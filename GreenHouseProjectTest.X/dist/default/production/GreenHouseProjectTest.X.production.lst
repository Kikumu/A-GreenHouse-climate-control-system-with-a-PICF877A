

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Dec 10 23:57:56 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.10
    56                           ; Generated 31/07/2019 GMT
    57                           ; 
    58                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F877A Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0098                     	;# 
   258  0099                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  000E                     	;# 
   285  000F                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0013                     	;# 
   290  0014                     	;# 
   291  0015                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001D                     	;# 
   302  001E                     	;# 
   303  001F                     	;# 
   304  0081                     	;# 
   305  0085                     	;# 
   306  0086                     	;# 
   307  0087                     	;# 
   308  0088                     	;# 
   309  0089                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0000                     	;# 
   330  0001                     	;# 
   331  0002                     	;# 
   332  0003                     	;# 
   333  0004                     	;# 
   334  0005                     	;# 
   335  0006                     	;# 
   336  0007                     	;# 
   337  0008                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000D                     	;# 
   343  000E                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0014                     	;# 
   351  0015                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001D                     	;# 
   362  001E                     	;# 
   363  001F                     	;# 
   364  0081                     	;# 
   365  0085                     	;# 
   366  0086                     	;# 
   367  0087                     	;# 
   368  0088                     	;# 
   369  0089                     	;# 
   370  008C                     	;# 
   371  008D                     	;# 
   372  008E                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  000E                     	;# 
   405  000F                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001D                     	;# 
   422  001E                     	;# 
   423  001F                     	;# 
   424  0081                     	;# 
   425  0085                     	;# 
   426  0086                     	;# 
   427  0087                     	;# 
   428  0088                     	;# 
   429  0089                     	;# 
   430  008C                     	;# 
   431  008D                     	;# 
   432  008E                     	;# 
   433  0091                     	;# 
   434  0092                     	;# 
   435  0093                     	;# 
   436  0094                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000D                     	;# 
   463  000E                     	;# 
   464  000E                     	;# 
   465  000F                     	;# 
   466  0010                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0015                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001B                     	;# 
   480  001C                     	;# 
   481  001D                     	;# 
   482  001E                     	;# 
   483  001F                     	;# 
   484  0081                     	;# 
   485  0085                     	;# 
   486  0086                     	;# 
   487  0087                     	;# 
   488  0088                     	;# 
   489  0089                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  010F                     	;# 
   507  018C                     	;# 
   508  018D                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  000E                     	;# 
   525  000F                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0014                     	;# 
   531  0015                     	;# 
   532  0015                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001B                     	;# 
   540  001C                     	;# 
   541  001D                     	;# 
   542  001E                     	;# 
   543  001F                     	;# 
   544  0081                     	;# 
   545  0085                     	;# 
   546  0086                     	;# 
   547  0087                     	;# 
   548  0088                     	;# 
   549  0089                     	;# 
   550  008C                     	;# 
   551  008D                     	;# 
   552  008E                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0094                     	;# 
   557  0098                     	;# 
   558  0099                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  010F                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  000E                     	;# 
   585  000F                     	;# 
   586  0010                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0014                     	;# 
   591  0015                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0017                     	;# 
   595  0018                     	;# 
   596  0019                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  0081                     	;# 
   605  0085                     	;# 
   606  0086                     	;# 
   607  0087                     	;# 
   608  0088                     	;# 
   609  0089                     	;# 
   610  008C                     	;# 
   611  008D                     	;# 
   612  008E                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0094                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0088                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  0091                     	;# 
   674  0092                     	;# 
   675  0093                     	;# 
   676  0094                     	;# 
   677  0098                     	;# 
   678  0099                     	;# 
   679  009C                     	;# 
   680  009D                     	;# 
   681  009E                     	;# 
   682  009F                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010E                     	;# 
   686  010F                     	;# 
   687  018C                     	;# 
   688  018D                     	;# 
   689                           
   690                           	psect	idataBANK0
   691  1631                     __pidataBANK0:	
   692                           
   693                           ;initializer for _table
   694  1631  3400               	retlw	0
   695  1632  3400               	retlw	0
   696  1633  3440               	retlw	64
   697  1634  3412               	retlw	18
   698  1635  3412               	retlw	18
   699  1636  3406               	retlw	6
   700  1637  3419               	retlw	25
   701  1638  3400               	retlw	0
   702  0009                     _PORTE	set	9
   703  0008                     _PORTD	set	8
   704  003E                     _RC6	set	62
   705  003F                     _RC7	set	63
   706  003C                     _RC4	set	60
   707  003B                     _RC3	set	59
   708  003A                     _RC2	set	58
   709  0039                     _RC1	set	57
   710  0038                     _RC0	set	56
   711  004A                     _RE2	set	74
   712  0034                     _RB4	set	52
   713  0031                     _RB1	set	49
   714  0035                     _RB5	set	53
   715  0030                     _RB0	set	48
   716  0048                     _RE0	set	72
   717  002B                     _RA3	set	43
   718  002C                     _RA4	set	44
   719  002D                     _RA5	set	45
   720  002A                     _RA2	set	42
   721  0028                     _RA0	set	40
   722  0087                     _TRISC	set	135
   723  0085                     _TRISA	set	133
   724  0089                     _TRISE	set	137
   725  0081                     _OPTION_REG	set	129
   726  0088                     _TRISD	set	136
   727  009F                     _ADCON1	set	159
   728  0086                     _TRISB	set	134
   729  0434                     _TRISB4	set	1076
   730  0448                     _TRISE0	set	1096
   731  0428                     _TRISA0	set	1064
   732                           
   733                           ; #config settings
   734  0000                     
   735                           	psect	cinit
   736  07E8                     start_initialization:	
   737  07E8                     __initialization:	
   738                           
   739                           ; Initialize objects allocated to BANK0
   740  07E8  1383               	bcf	3,7	;select IRP bank0
   741  07E9  3070               	movlw	low (__pdataBANK0+8)
   742  07EA  00FD               	movwf	btemp+-1
   743  07EB  3016               	movlw	high __pidataBANK0
   744  07EC  00FE               	movwf	btemp
   745  07ED  3031               	movlw	low __pidataBANK0
   746  07EE  00FF               	movwf	btemp+1
   747  07EF  3068               	movlw	low __pdataBANK0
   748  07F0  0084               	movwf	4
   749  07F1  160A  118A  2686  120A  118A  	fcall	init_ram0
   750                           
   751                           ; Clear objects allocated to BANK0
   752  07F6  3020               	movlw	low __pbssBANK0
   753  07F7  0084               	movwf	4
   754  07F8  305C               	movlw	low (__pbssBANK0+60)
   755  07F9  160A  118A  2629   	fcall	clear_ram0
   756  07FC                     end_of_initialization:	
   757                           ;End of C runtime variable initialization code
   758                           
   759  07FC                     __end_of__initialization:	
   760  07FC  0183               	clrf	3
   761  07FD  120A  158A  2C87   	ljmp	_main	;jump to C main() function
   762                           
   763                           	psect	bssBANK0
   764  0020                     __pbssBANK0:	
   765  0020                     _table1:	
   766  0020                     	ds	7
   767  0027                     _day_counter:	
   768  0027                     	ds	2
   769  0029                     _count:	
   770  0029                     	ds	2
   771  002B                     _var_night_high:	
   772  002B                     	ds	2
   773  002D                     _var_night_low:	
   774  002D                     	ds	2
   775  002F                     _p:	
   776  002F                     	ds	2
   777  0031                     _stats:	
   778  0031                     	ds	2
   779  0033                     _day_of_week_var:	
   780  0033                     	ds	2
   781  0035                     _day_high:	
   782  0035                     	ds	2
   783  0037                     _day_low:	
   784  0037                     	ds	2
   785  0039                     _z:	
   786  0039                     	ds	2
   787  003B                     _y:	
   788  003B                     	ds	2
   789  003D                     _x:	
   790  003D                     	ds	2
   791  003F                     _w:	
   792  003F                     	ds	2
   793  0041                     _t:	
   794  0041                     	ds	2
   795  0043                     _wd:	
   796  0043                     	ds	2
   797  0045                     read_byte@j:	
   798  0045                     	ds	1
   799  0046                     _var2:	
   800  0046                     	ds	1
   801  0047                     _var1:	
   802  0047                     	ds	1
   803  0048                     _buzzer_watcher1:	
   804  0048                     	ds	1
   805  0049                     _buzzer_watcher:	
   806  0049                     	ds	1
   807  004A                     _lower_t:	
   808  004A                     	ds	1
   809  004B                     _upper_t:	
   810  004B                     	ds	1
   811  004C                     _prev_hex:	
   812  004C                     	ds	1
   813  004D                     _hrs_limiter:	
   814  004D                     	ds	1
   815  004E                     _day_hex:	
   816  004E                     	ds	1
   817  004F                     _c:	
   818  004F                     	ds	1
   819  0050                     _b:	
   820  0050                     	ds	1
   821  0051                     _a:	
   822  0051                     	ds	1
   823  0052                     _wanfen:	
   824  0052                     	ds	1
   825  0053                     _qianfen:	
   826  0053                     	ds	1
   827  0054                     _baifen:	
   828  0054                     	ds	1
   829  0055                     _shifen:	
   830  0055                     	ds	1
   831  0056                     _ge:	
   832  0056                     	ds	1
   833  0057                     _shi:	
   834  0057                     	ds	1
   835  0058                     _TX:	
   836  0058                     	ds	1
   837  0059                     _TZ:	
   838  0059                     	ds	1
   839  005A                     _THV:	
   840  005A                     	ds	1
   841  005B                     _TLV:	
   842  005B                     	ds	1
   843                           
   844                           	psect	dataBANK0
   845  0068                     __pdataBANK0:	
   846  0068                     _table:	
   847  0068                     	ds	8
   848                           
   849                           	psect	inittext
   850  1682                     init_fetch0:	
   851                           ;	Called with low address in FSR and high address in W
   852                           
   853  1682  087E               	movf	126,w
   854  1683  008A               	movwf	10
   855  1684  087F               	movf	127,w
   856  1685  0082               	movwf	2
   857  1686                     init_ram0:	
   858                           ;Called with:
   859                           ;	high address of idata address in btemp 
   860                           ;	low address of idata address in btemp+1 
   861                           ;	low address of data in FSR
   862                           ;	high address + 1 of data in btemp-1
   863                           
   864  1686  2682  160A  118A   	fcall	init_fetch0
   865  1689  0080               	movwf	0
   866  168A  0A84               	incf	4,f
   867  168B  0804               	movf	4,w
   868  168C  067D               	xorwf	125,w
   869  168D  1903               	btfsc	3,2
   870  168E  3400               	retlw	0
   871  168F  0AFF               	incf	127,f
   872  1690  1903               	btfsc	3,2
   873  1691  0AFE               	incf	126,f
   874  1692  2E86               	goto	init_ram0
   875                           
   876                           	psect	clrtext
   877  1629                     clear_ram0:	
   878                           ;	Called with FSR containing the base address, and
   879                           ;	W with the last address+1
   880                           
   881  1629  0064               	clrwdt	;clear the watchdog before getting into this loop
   882  162A                     clrloop0:	
   883  162A  0180               	clrf	0	;clear RAM location pointed to by FSR
   884  162B  0A84               	incf	4,f	;increment pointer
   885  162C  0604               	xorwf	4,w	;XOR with final address
   886  162D  1903               	btfsc	3,2	;have we reached the end yet?
   887  162E  3400               	retlw	0	;all done for this memory range, return
   888  162F  0604               	xorwf	4,w	;XOR again to restore value
   889  1630  2E2A               	goto	clrloop0	;do the next byte
   890                           
   891                           	psect	cstackCOMMON
   892  0070                     __pcstackCOMMON:	
   893  0070                     ?_init_temp:	
   894  0070                     ??_init_temp:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_set_time:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_ds1302_init:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_init:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ??_init:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?_lcd_init:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_initialise_buttons:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ??_initialise_buttons:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ?_get_temp:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_get_time:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_write_cmd:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_write_char:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_display_temp:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_display_date:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?_display_clock:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_thermometer_threshhold_settings:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_date_settings:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_time_settings:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?_set_beep_threshhold:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_reset_alarm:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ??_reset_alarm:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_delay_screen:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ??_delay_screen:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_delay_temp:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_delay2:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ??_delay2:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_time_write_1:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ??_time_write_1:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_time_read_1:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ??_time_read_1:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?_button_delay:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ??_button_delay:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_time_date_hex_terminator:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_time_date_delimiter:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_main:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ?_reset_temp:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ?_write_byte:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?_read_byte:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ?___lbdiv:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?___lbmod:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ?___awmod:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?___lwmod:	
  1018                           ; 2 bytes @ 0x0
  1019                           
  1020  0070                     delay_temp@y:	
  1021                           ; 2 bytes @ 0x0
  1022                           
  1023  0070                     time_date_delimiter@hex:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     time_date_hex_terminator@limiter:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ___lbdiv@divisor:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ___lbmod@divisor:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     delay_screen@i:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     delay2@i:	
  1039                           ; 2 bytes @ 0x0
  1040                           
  1041  0070                     button_delay@i:	
  1042                           ; 2 bytes @ 0x0
  1043                           
  1044  0070                     ___awmod@divisor:	
  1045                           ; 2 bytes @ 0x0
  1046                           
  1047  0070                     ___lwmod@divisor:	
  1048                           ; 2 bytes @ 0x0
  1049                           
  1050                           
  1051                           ; 2 bytes @ 0x0
  1052  0070                     	ds	1
  1053  0071                     ??_delay_temp:	
  1054  0071                     ??_time_date_hex_terminator:	
  1055                           ; 1 bytes @ 0x1
  1056                           
  1057  0071                     ??___lbdiv:	
  1058                           ; 1 bytes @ 0x1
  1059                           
  1060  0071                     ??___lbmod:	
  1061                           ; 1 bytes @ 0x1
  1062                           
  1063  0071                     time_date_delimiter@limiter:	
  1064                           ; 1 bytes @ 0x1
  1065                           
  1066                           
  1067                           ; 1 bytes @ 0x1
  1068  0071                     	ds	1
  1069  0072                     ??_write_cmd:	
  1070  0072                     ??_write_char:	
  1071                           ; 1 bytes @ 0x2
  1072                           
  1073  0072                     ??_set_beep_threshhold:	
  1074                           ; 1 bytes @ 0x2
  1075                           
  1076  0072                     ??_time_date_delimiter:	
  1077                           ; 1 bytes @ 0x2
  1078                           
  1079  0072                     write_char@x:	
  1080                           ; 1 bytes @ 0x2
  1081                           
  1082  0072                     write_cmd@x:	
  1083                           ; 1 bytes @ 0x2
  1084                           
  1085  0072                     delay_temp@x:	
  1086                           ; 1 bytes @ 0x2
  1087                           
  1088  0072                     set_beep_threshhold@x:	
  1089                           ; 1 bytes @ 0x2
  1090                           
  1091  0072                     ___lbdiv@dividend:	
  1092                           ; 1 bytes @ 0x2
  1093                           
  1094  0072                     time_write_1@j:	
  1095                           ; 1 bytes @ 0x2
  1096                           
  1097  0072                     time_read_1@j:	
  1098                           ; 2 bytes @ 0x2
  1099                           
  1100  0072                     ___awmod@dividend:	
  1101                           ; 2 bytes @ 0x2
  1102                           
  1103  0072                     ___lwmod@dividend:	
  1104                           ; 2 bytes @ 0x2
  1105                           
  1106                           
  1107                           ; 2 bytes @ 0x2
  1108  0072                     	ds	1
  1109  0073                     ??_lcd_init:	
  1110  0073                     ??_display_temp:	
  1111                           ; 1 bytes @ 0x3
  1112                           
  1113  0073                     ??_display_date:	
  1114                           ; 1 bytes @ 0x3
  1115                           
  1116  0073                     ??_display_clock:	
  1117                           ; 1 bytes @ 0x3
  1118                           
  1119  0073                     ?_set_lower_threshold:	
  1120                           ; 1 bytes @ 0x3
  1121                           
  1122  0073                     ?_set_upper_threshold:	
  1123                           ; 1 bytes @ 0x3
  1124                           
  1125  0073                     ?_display_day:	
  1126                           ; 1 bytes @ 0x3
  1127                           
  1128  0073                     delay_temp@z:	
  1129                           ; 1 bytes @ 0x3
  1130                           
  1131  0073                     time_date_hex_terminator@val:	
  1132                           ; 1 bytes @ 0x3
  1133                           
  1134  0073                     ___lbdiv@counter:	
  1135                           ; 1 bytes @ 0x3
  1136                           
  1137  0073                     set_upper_threshold@upper_val:	
  1138                           ; 1 bytes @ 0x3
  1139                           
  1140  0073                     set_lower_threshold@upper_val:	
  1141                           ; 2 bytes @ 0x3
  1142                           
  1143  0073                     display_day@num:	
  1144                           ; 2 bytes @ 0x3
  1145                           
  1146                           
  1147                           ; 2 bytes @ 0x3
  1148  0073                     	ds	1
  1149  0074                     ??_reset_temp:	
  1150  0074                     ??_write_byte:	
  1151                           ; 1 bytes @ 0x4
  1152                           
  1153  0074                     ??_read_byte:	
  1154                           ; 1 bytes @ 0x4
  1155                           
  1156  0074                     ??___awmod:	
  1157                           ; 1 bytes @ 0x4
  1158                           
  1159  0074                     ??___lwmod:	
  1160                           ; 1 bytes @ 0x4
  1161                           
  1162  0074                     time_write_1@time_tx:	
  1163                           ; 1 bytes @ 0x4
  1164                           
  1165  0074                     time_read_1@time_rx:	
  1166                           ; 1 bytes @ 0x4
  1167                           
  1168  0074                     time_date_delimiter@val:	
  1169                           ; 1 bytes @ 0x4
  1170                           
  1171  0074                     ___lbdiv@quotient:	
  1172                           ; 1 bytes @ 0x4
  1173                           
  1174  0074                     ___lbmod@dividend:	
  1175                           ; 1 bytes @ 0x4
  1176                           
  1177                           
  1178                           ; 1 bytes @ 0x4
  1179  0074                     	ds	1
  1180  0075                     ??_set_time:	
  1181  0075                     ??_ds1302_init:	
  1182                           ; 1 bytes @ 0x5
  1183                           
  1184  0075                     ??_get_time:	
  1185                           ; 1 bytes @ 0x5
  1186                           
  1187  0075                     ??_display_day:	
  1188                           ; 1 bytes @ 0x5
  1189                           
  1190  0075                     reset_temp@presence:	
  1191                           ; 1 bytes @ 0x5
  1192                           
  1193  0075                     read_byte@value:	
  1194                           ; 1 bytes @ 0x5
  1195                           
  1196  0075                     ___awmod@counter:	
  1197                           ; 1 bytes @ 0x5
  1198                           
  1199  0075                     ___lbmod@counter:	
  1200                           ; 1 bytes @ 0x5
  1201                           
  1202  0075                     ___lwmod@counter:	
  1203                           ; 1 bytes @ 0x5
  1204                           
  1205  0075                     set_time@i:	
  1206                           ; 1 bytes @ 0x5
  1207                           
  1208  0075                     display_clock@i:	
  1209                           ; 2 bytes @ 0x5
  1210                           
  1211  0075                     display_date@i:	
  1212                           ; 2 bytes @ 0x5
  1213                           
  1214  0075                     set_upper_threshold@lower_val:	
  1215                           ; 2 bytes @ 0x5
  1216                           
  1217  0075                     set_lower_threshold@lower_val:	
  1218                           ; 2 bytes @ 0x5
  1219                           
  1220                           
  1221                           ; 2 bytes @ 0x5
  1222  0075                     	ds	1
  1223  0076                     ?___lwdiv:	
  1224  0076                     write_byte@temp:	
  1225                           ; 2 bytes @ 0x6
  1226                           
  1227  0076                     read_byte@i:	
  1228                           ; 1 bytes @ 0x6
  1229                           
  1230  0076                     ___awmod@sign:	
  1231                           ; 1 bytes @ 0x6
  1232                           
  1233  0076                     ___lbmod@rem:	
  1234                           ; 1 bytes @ 0x6
  1235                           
  1236  0076                     get_time@i:	
  1237                           ; 1 bytes @ 0x6
  1238                           
  1239  0076                     ___lwdiv@divisor:	
  1240                           ; 2 bytes @ 0x6
  1241                           
  1242                           
  1243                           ; 2 bytes @ 0x6
  1244  0076                     	ds	1
  1245  0077                     ??_set_lower_threshold:	
  1246  0077                     ??_set_upper_threshold:	
  1247                           ; 1 bytes @ 0x7
  1248                           
  1249  0077                     ?_modulus_func:	
  1250                           ; 1 bytes @ 0x7
  1251                           
  1252  0077                     write_byte@val:	
  1253                           ; 2 bytes @ 0x7
  1254                           
  1255  0077                     modulus_func@x:	
  1256                           ; 1 bytes @ 0x7
  1257                           
  1258                           
  1259                           ; 2 bytes @ 0x7
  1260  0077                     	ds	1
  1261  0078                     write_byte@i:	
  1262  0078                     ___lwdiv@dividend:	
  1263                           ; 1 bytes @ 0x8
  1264                           
  1265                           
  1266                           ; 2 bytes @ 0x8
  1267  0078                     	ds	1
  1268  0079                     modulus_func@y:	
  1269                           
  1270                           ; 2 bytes @ 0x9
  1271  0079                     	ds	1
  1272  007A                     ??___lwdiv:	
  1273                           
  1274                           ; 1 bytes @ 0xA
  1275  007A                     	ds	1
  1276  007B                     ??_modulus_func:	
  1277  007B                     ??_incrementor:	
  1278                           ; 1 bytes @ 0xB
  1279                           
  1280  007B                     ??_decrementor:	
  1281                           ; 1 bytes @ 0xB
  1282                           
  1283  007B                     ___lwdiv@quotient:	
  1284                           ; 1 bytes @ 0xB
  1285                           
  1286                           
  1287                           ; 2 bytes @ 0xB
  1288  007B                     	ds	2
  1289  007D                     ___lwdiv@counter:	
  1290                           
  1291                           ; 1 bytes @ 0xD
  1292  007D                     	ds	1
  1293  007E                     ??_main:	
  1294                           
  1295                           	psect	cstackBANK0
  1296  005C                     __pcstackBANK0:	
  1297                           ; 1 bytes @ 0xE
  1298                           
  1299  005C                     ??_get_temp:	
  1300  005C                     ?_incrementor:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  005C                     ?_decrementor:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  005C                     incrementor@upper_val:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  005C                     decrementor@lower_val:	
  1310                           ; 2 bytes @ 0x0
  1311                           
  1312                           
  1313                           ; 2 bytes @ 0x0
  1314  005C                     	ds	2
  1315  005E                     incrementor@lower_val:	
  1316  005E                     decrementor@upper_val:	
  1317                           ; 2 bytes @ 0x2
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0x2
  1321  005E                     	ds	2
  1322  0060                     incrementor@z:	
  1323  0060                     decrementor@z:	
  1324                           ; 1 bytes @ 0x4
  1325                           
  1326                           
  1327                           ; 1 bytes @ 0x4
  1328  0060                     	ds	1
  1329  0061                     ??_thermometer_threshhold_settings:	
  1330  0061                     ??_date_settings:	
  1331                           ; 1 bytes @ 0x5
  1332                           
  1333  0061                     ??_time_settings:	
  1334                           ; 1 bytes @ 0x5
  1335                           
  1336                           
  1337                           ; 1 bytes @ 0x5
  1338  0061                     	ds	3
  1339  0064                     thermometer_threshhold_settings@i:	
  1340                           
  1341                           ; 2 bytes @ 0x8
  1342  0064                     	ds	2
  1343  0066                     main@i:	
  1344                           
  1345                           ; 2 bytes @ 0xA
  1346  0066                     	ds	2
  1347                           
  1348                           	psect	maintext
  1349  0C87                     __pmaintext:	
  1350 ;;
  1351 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1352 ;;
  1353 ;; *************** function _main *****************
  1354 ;; Defined at:
  1355 ;;		line 10 in file "mainLogic.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  i               2   10[BANK0 ] int 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : B00/0
  1366 ;;		On exit  : 300/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         0       0       0       0       0
  1370 ;;      Locals:         0       2       0       0       0
  1371 ;;      Temps:          0       0       0       0       0
  1372 ;;      Totals:         0       2       0       0       0
  1373 ;;Total ram usage:        2 bytes
  1374 ;; Hardware stack levels required when called:    4
  1375 ;; This function calls:
  1376 ;;		_date_settings
  1377 ;;		_display_clock
  1378 ;;		_display_date
  1379 ;;		_display_day
  1380 ;;		_display_temp
  1381 ;;		_ds1302_init
  1382 ;;		_get_temp
  1383 ;;		_get_time
  1384 ;;		_init
  1385 ;;		_init_temp
  1386 ;;		_initialise_buttons
  1387 ;;		_lcd_init
  1388 ;;		_modulus_func
  1389 ;;		_reset_alarm
  1390 ;;		_set_beep_threshhold
  1391 ;;		_set_lower_threshold
  1392 ;;		_set_time
  1393 ;;		_set_upper_threshold
  1394 ;;		_thermometer_threshhold_settings
  1395 ;;		_time_settings
  1396 ;;		_write_char
  1397 ;;		_write_cmd
  1398 ;; This function is called by:
  1399 ;;		Startup code after reset
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           
  1404                           ;psect for function _main
  1405  0C87                     _main:	
  1406                           
  1407                           ;mainLogic.c: 11:     TRISB=0X02;
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1411  0C87  3002               	movlw	2
  1412  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  1413  0C89  0086               	movwf	6	;volatile
  1414                           
  1415                           ;mainLogic.c: 12:     init_temp();
  1416  0C8A  160A  118A  261C  120A  158A  	fcall	_init_temp
  1417                           
  1418                           ;mainLogic.c: 13:     set_time();
  1419  0C8F  120A  158A  2041  120A  158A  	fcall	_set_time
  1420                           
  1421                           ;mainLogic.c: 14:     ds1302_init();
  1422  0C94  160A  118A  2663  120A  158A  	fcall	_ds1302_init
  1423                           
  1424                           ;mainLogic.c: 16:     init();
  1425  0C99  160A  118A  2621  120A  158A  	fcall	_init
  1426                           
  1427                           ;mainLogic.c: 17:     lcd_init();
  1428  0C9E  160A  118A  2795  120A  158A  	fcall	_lcd_init
  1429                           
  1430                           ;mainLogic.c: 18:     init_temp();
  1431  0CA3  160A  118A  261C  120A  158A  	fcall	_init_temp
  1432                           
  1433                           ;mainLogic.c: 19:     initialise_buttons();
  1434  0CA8  160A  118A  26CF  120A  158A  	fcall	_initialise_buttons
  1435  0CAD                     l4051:	
  1436                           
  1437                           ;mainLogic.c: 24:     get_temp();
  1438  0CAD  120A  158A  2380  120A  158A  	fcall	_get_temp
  1439                           
  1440                           ;mainLogic.c: 25:     get_time();
  1441  0CB2  120A  158A  2069  120A  158A  	fcall	_get_time
  1442                           
  1443                           ;mainLogic.c: 26:     write_cmd(0x80);
  1444  0CB7  3080               	movlw	128
  1445  0CB8  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1446                           
  1447                           ;mainLogic.c: 27:     write_char('T');
  1448  0CBD  3054               	movlw	84
  1449  0CBE  160A  118A  26E5  120A  158A  	fcall	_write_char
  1450                           
  1451                           ;mainLogic.c: 28:     write_char('e');
  1452  0CC3  3065               	movlw	101
  1453  0CC4  160A  118A  26E5  120A  158A  	fcall	_write_char
  1454                           
  1455                           ;mainLogic.c: 29:     write_char('m');
  1456  0CC9  306D               	movlw	109
  1457  0CCA  160A  118A  26E5  120A  158A  	fcall	_write_char
  1458                           
  1459                           ;mainLogic.c: 30:     write_char('p');
  1460  0CCF  3070               	movlw	112
  1461  0CD0  160A  118A  26E5  120A  158A  	fcall	_write_char
  1462                           
  1463                           ;mainLogic.c: 31:     write_char(':');
  1464  0CD5  303A               	movlw	58
  1465  0CD6  160A  118A  26E5  120A  158A  	fcall	_write_char
  1466                           
  1467                           ;mainLogic.c: 32:     display_temp();
  1468  0CDB  160A  118A  2730  120A  158A  	fcall	_display_temp
  1469                           
  1470                           ;mainLogic.c: 34:     write_cmd(0x90);
  1471  0CE0  3090               	movlw	144
  1472  0CE1  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1473                           
  1474                           ;mainLogic.c: 35:     write_char('D');
  1475  0CE6  3044               	movlw	68
  1476  0CE7  160A  118A  26E5  120A  158A  	fcall	_write_char
  1477                           
  1478                           ;mainLogic.c: 36:     write_char('a');
  1479  0CEC  3061               	movlw	97
  1480  0CED  160A  118A  26E5  120A  158A  	fcall	_write_char
  1481                           
  1482                           ;mainLogic.c: 37:     write_char('t');
  1483  0CF2  3074               	movlw	116
  1484  0CF3  160A  118A  26E5  120A  158A  	fcall	_write_char
  1485                           
  1486                           ;mainLogic.c: 38:     write_char('e');
  1487  0CF8  3065               	movlw	101
  1488  0CF9  160A  118A  26E5  120A  158A  	fcall	_write_char
  1489                           
  1490                           ;mainLogic.c: 39:     write_char(':');
  1491  0CFE  303A               	movlw	58
  1492  0CFF  160A  118A  26E5  120A  158A  	fcall	_write_char
  1493                           
  1494                           ;mainLogic.c: 40:     write_char(' ');
  1495  0D04  3020               	movlw	32
  1496  0D05  160A  118A  26E5  120A  158A  	fcall	_write_char
  1497                           
  1498                           ;mainLogic.c: 42:     display_date();
  1499  0D0A  120A  158A  22EA  120A  158A  	fcall	_display_date
  1500                           
  1501                           ;mainLogic.c: 44:     write_cmd(0x88);
  1502  0D0F  3088               	movlw	136
  1503  0D10  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1504                           
  1505                           ;mainLogic.c: 45:     write_char('T');
  1506  0D15  3054               	movlw	84
  1507  0D16  160A  118A  26E5  120A  158A  	fcall	_write_char
  1508                           
  1509                           ;mainLogic.c: 46:     write_char('i');
  1510  0D1B  3069               	movlw	105
  1511  0D1C  160A  118A  26E5  120A  158A  	fcall	_write_char
  1512                           
  1513                           ;mainLogic.c: 47:     write_char('m');
  1514  0D21  306D               	movlw	109
  1515  0D22  160A  118A  26E5  120A  158A  	fcall	_write_char
  1516                           
  1517                           ;mainLogic.c: 48:     write_char('e');
  1518  0D27  3065               	movlw	101
  1519  0D28  160A  118A  26E5  120A  158A  	fcall	_write_char
  1520                           
  1521                           ;mainLogic.c: 49:     write_char(':');
  1522  0D2D  303A               	movlw	58
  1523  0D2E  160A  118A  26E5  120A  158A  	fcall	_write_char
  1524                           
  1525                           ;mainLogic.c: 50:     display_clock();
  1526  0D33  120A  158A  2254  120A  158A  	fcall	_display_clock
  1527                           
  1528                           ;mainLogic.c: 51:     thermometer_threshhold_settings();
  1529  0D38  120A  158A  25AA  120A  158A  	fcall	_thermometer_threshhold_settings
  1530                           
  1531                           ;mainLogic.c: 52:     date_settings();
  1532  0D3D  120A  118A  23D4  120A  158A  	fcall	_date_settings
  1533                           
  1534                           ;mainLogic.c: 53:     time_settings();
  1535  0D42  120A  118A  20EE  120A  158A  	fcall	_time_settings
  1536                           
  1537                           ;mainLogic.c: 54:     write_cmd(0x98);
  1538  0D47  3098               	movlw	152
  1539  0D48  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1540                           
  1541                           ;mainLogic.c: 55:     set_lower_threshold(2,4);
  1542  0D4D  3002               	movlw	2
  1543  0D4E  00F3               	movwf	set_lower_threshold@upper_val
  1544  0D4F  3000               	movlw	0
  1545  0D50  00F4               	movwf	set_lower_threshold@upper_val+1
  1546  0D51  3004               	movlw	4
  1547  0D52  00F5               	movwf	set_lower_threshold@lower_val
  1548  0D53  3000               	movlw	0
  1549  0D54  00F6               	movwf	set_lower_threshold@lower_val+1
  1550  0D55  120A  118A  2007  120A  158A  	fcall	_set_lower_threshold
  1551                           
  1552                           ;mainLogic.c: 56:     set_upper_threshold(2,4);
  1553  0D5A  3002               	movlw	2
  1554  0D5B  00F3               	movwf	set_upper_threshold@upper_val
  1555  0D5C  3000               	movlw	0
  1556  0D5D  00F4               	movwf	set_upper_threshold@upper_val+1
  1557  0D5E  3004               	movlw	4
  1558  0D5F  00F5               	movwf	set_upper_threshold@lower_val
  1559  0D60  3000               	movlw	0
  1560  0D61  00F6               	movwf	set_upper_threshold@lower_val+1
  1561  0D62  120A  158A  2195  120A  158A  	fcall	_set_upper_threshold
  1562                           
  1563                           ;mainLogic.c: 57:     set_beep_threshhold(buzzer_watcher);
  1564  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0D69  0849               	movf	_buzzer_watcher,w
  1567  0D6A  160A  118A  2713  120A  158A  	fcall	_set_beep_threshhold
  1568                           
  1569                           ;mainLogic.c: 58:     reset_alarm();
  1570  0D6F  160A  118A  2639  120A  158A  	fcall	_reset_alarm
  1571                           
  1572                           ;mainLogic.c: 59:     for(int i = 0; i < 7; i++)
  1573  0D74  01E6               	clrf	main@i
  1574  0D75  01E7               	clrf	main@i+1
  1575  0D76                     l4121:	
  1576                           
  1577                           ;mainLogic.c: 60:     write_char(' ');
  1578  0D76  3020               	movlw	32
  1579  0D77  160A  118A  26E5  120A  158A  	fcall	_write_char
  1580  0D7C  3001               	movlw	1
  1581  0D7D  07E6               	addwf	main@i,f
  1582  0D7E  1803               	skipnc
  1583  0D7F  0AE7               	incf	main@i+1,f
  1584  0D80  3000               	movlw	0
  1585  0D81  07E7               	addwf	main@i+1,f
  1586  0D82  0867               	movf	main@i+1,w
  1587  0D83  3A80               	xorlw	128
  1588  0D84  00FF               	movwf	127
  1589  0D85  3080               	movlw	128
  1590  0D86  027F               	subwf	127,w
  1591  0D87  1D03               	skipz
  1592  0D88  2D8B               	goto	u2845
  1593  0D89  3007               	movlw	7
  1594  0D8A  0266               	subwf	main@i,w
  1595  0D8B                     u2845:	
  1596  0D8B  1C03               	skipc
  1597  0D8C  2D76               	goto	l4121
  1598                           
  1599                           ;mainLogic.c: 61:     day_counter = modulus_func(day_low,8);
  1600  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0D8F  0838               	movf	_day_low+1,w
  1603  0D90  00F8               	movwf	modulus_func@x+1
  1604  0D91  0837               	movf	_day_low,w
  1605  0D92  00F7               	movwf	modulus_func@x
  1606  0D93  3008               	movlw	8
  1607  0D94  00F9               	movwf	modulus_func@y
  1608  0D95  3000               	movlw	0
  1609  0D96  00FA               	movwf	modulus_func@y+1
  1610  0D97  160A  118A  2672  120A  158A  	fcall	_modulus_func
  1611  0D9C  0878               	movf	?_modulus_func+1,w
  1612  0D9D  00A8               	movwf	_day_counter+1
  1613  0D9E  0877               	movf	?_modulus_func,w
  1614  0D9F  00A7               	movwf	_day_counter
  1615                           
  1616                           ;mainLogic.c: 62:     display_day(day_counter);
  1617  0DA0  0828               	movf	_day_counter+1,w
  1618  0DA1  00F4               	movwf	display_day@num+1
  1619  0DA2  0827               	movf	_day_counter,w
  1620  0DA3  00F3               	movwf	display_day@num
  1621  0DA4  120A  118A  204B  120A  158A  	fcall	_display_day
  1622  0DA9  2CAD               	goto	l4051
  1623  0DAA                     __end_of_main:	
  1624                           
  1625                           	psect	text1
  1626  00EE                     __ptext1:	
  1627 ;; *************** function _time_settings *****************
  1628 ;; Defined at:
  1629 ;;		line 167 in file "Button_src.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;		None
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;		None
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      void 
  1636 ;; Registers used:
  1637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1638 ;; Tracked objects:
  1639 ;;		On entry : 300/0
  1640 ;;		On exit  : 300/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1643 ;;      Params:         0       0       0       0       0
  1644 ;;      Locals:         0       0       0       0       0
  1645 ;;      Temps:          0       3       0       0       0
  1646 ;;      Totals:         0       3       0       0       0
  1647 ;;Total ram usage:        3 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    3
  1650 ;; This function calls:
  1651 ;;		_button_delay
  1652 ;;		_incrementor
  1653 ;;		_modulus_func
  1654 ;;		_set_time
  1655 ;;		_time_date_delimiter
  1656 ;;		_time_date_hex_terminator
  1657 ;;		_write_char
  1658 ;;		_write_cmd
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           
  1665                           ;psect for function _time_settings
  1666  00EE                     _time_settings:	
  1667                           
  1668                           ;Button_src.c: 168:  RC0 = 1;
  1669                           
  1670                           ;incstack = 0
  1671                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1672  00EE  1407               	bsf	7,0	;volatile
  1673                           
  1674                           ;Button_src.c: 169:  RC1 = 1;
  1675  00EF  1487               	bsf	7,1	;volatile
  1676                           
  1677                           ;Button_src.c: 170:  RC2 = 0;
  1678  00F0  1107               	bcf	7,2	;volatile
  1679                           
  1680                           ;Button_src.c: 171:  RC3 = 1;
  1681  00F1  1587               	bsf	7,3	;volatile
  1682                           
  1683                           ;Button_src.c: 172:   if (RC4 == 0){
  1684  00F2  1A07               	btfsc	7,4	;volatile
  1685  00F3  0008               	return
  1686                           
  1687                           ;Button_src.c: 173:       write_cmd(0x1);
  1688  00F4  3001               	movlw	1
  1689  00F5  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  1690  00FA                     l567:	
  1691                           ;Button_src.c: 174:       for(;;){
  1692                           
  1693                           
  1694                           ;Button_src.c: 175:             write_cmd(0x80);
  1695  00FA  3080               	movlw	128
  1696  00FB  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  1697                           
  1698                           ;Button_src.c: 176:             write_char('T');
  1699  0100  3054               	movlw	84
  1700  0101  160A  118A  26E5  120A  118A  	fcall	_write_char
  1701                           
  1702                           ;Button_src.c: 177:             write_char('i');
  1703  0106  3069               	movlw	105
  1704  0107  160A  118A  26E5  120A  118A  	fcall	_write_char
  1705                           
  1706                           ;Button_src.c: 178:             write_char('m');
  1707  010C  306D               	movlw	109
  1708  010D  160A  118A  26E5  120A  118A  	fcall	_write_char
  1709                           
  1710                           ;Button_src.c: 179:             write_char('e');
  1711  0112  3065               	movlw	101
  1712  0113  160A  118A  26E5  120A  118A  	fcall	_write_char
  1713                           
  1714                           ;Button_src.c: 180:             write_char('_');
  1715  0118  305F               	movlw	95
  1716  0119  160A  118A  26E5  120A  118A  	fcall	_write_char
  1717                           
  1718                           ;Button_src.c: 181:             write_char('S');
  1719  011E  3053               	movlw	83
  1720  011F  160A  118A  26E5  120A  118A  	fcall	_write_char
  1721                           
  1722                           ;Button_src.c: 182:             write_char('e');
  1723  0124  3065               	movlw	101
  1724  0125  160A  118A  26E5  120A  118A  	fcall	_write_char
  1725                           
  1726                           ;Button_src.c: 183:             write_char('t');
  1727  012A  3074               	movlw	116
  1728  012B  160A  118A  26E5  120A  118A  	fcall	_write_char
  1729                           
  1730                           ;Button_src.c: 184:             write_char('t');
  1731  0130  3074               	movlw	116
  1732  0131  160A  118A  26E5  120A  118A  	fcall	_write_char
  1733                           
  1734                           ;Button_src.c: 185:             write_char('i');
  1735  0136  3069               	movlw	105
  1736  0137  160A  118A  26E5  120A  118A  	fcall	_write_char
  1737                           
  1738                           ;Button_src.c: 186:             write_char('n');
  1739  013C  306E               	movlw	110
  1740  013D  160A  118A  26E5  120A  118A  	fcall	_write_char
  1741                           
  1742                           ;Button_src.c: 187:             write_char('g');
  1743  0142  3067               	movlw	103
  1744  0143  160A  118A  26E5  120A  118A  	fcall	_write_char
  1745                           
  1746                           ;Button_src.c: 188:             write_char('s');
  1747  0148  3073               	movlw	115
  1748  0149  160A  118A  26E5  120A  118A  	fcall	_write_char
  1749                           
  1750                           ;Button_src.c: 190:             RC0 = 1;
  1751  014E  1407               	bsf	7,0	;volatile
  1752                           
  1753                           ;Button_src.c: 191:             RC1 = 0;
  1754  014F  1087               	bcf	7,1	;volatile
  1755                           
  1756                           ;Button_src.c: 192:             RC2 = 1;
  1757  0150  1507               	bsf	7,2	;volatile
  1758                           
  1759                           ;Button_src.c: 193:             RC3 = 1;
  1760  0151  1587               	bsf	7,3	;volatile
  1761                           
  1762                           ;Button_src.c: 195:             if(RC7 == 0 && b =='x'){
  1763  0152  1B87               	btfsc	7,7	;volatile
  1764  0153  29C5               	goto	l3805
  1765  0154  3078               	movlw	120
  1766  0155  0650               	xorwf	_b,w
  1767  0156  1D03               	btfss	3,2
  1768  0157  29C5               	goto	l3805
  1769                           
  1770                           ;Button_src.c: 196:                 if(stats == 1)
  1771  0158  0331               	decf	_stats,w
  1772  0159  0432               	iorwf	_stats+1,w
  1773  015A  1D03               	btfss	3,2
  1774  015B  2960               	goto	l569
  1775                           
  1776                           ;Button_src.c: 197:                    a++;
  1777  015C  3001               	movlw	1
  1778  015D  00E1               	movwf	??_time_settings
  1779  015E  0861               	movf	??_time_settings,w
  1780  015F  07D1               	addwf	_a,f
  1781  0160                     l569:	
  1782                           
  1783                           ;Button_src.c: 198:                 if(stats == 0){
  1784  0160  0831               	movf	_stats,w
  1785  0161  0432               	iorwf	_stats+1,w
  1786  0162  1D03               	btfss	3,2
  1787  0163  2968               	goto	l570
  1788                           
  1789                           ;Button_src.c: 199:                    stats = 1;
  1790  0164  3001               	movlw	1
  1791  0165  00B1               	movwf	_stats
  1792  0166  3000               	movlw	0
  1793  0167  00B2               	movwf	_stats+1
  1794  0168                     l570:	
  1795                           ;Button_src.c: 200:                 }
  1796                           
  1797                           
  1798                           ;Button_src.c: 202:                     x++ ;
  1799  0168  3001               	movlw	1
  1800  0169  07BD               	addwf	_x,f
  1801  016A  1803               	skipnc
  1802  016B  0ABE               	incf	_x+1,f
  1803  016C  3000               	movlw	0
  1804  016D  07BE               	addwf	_x+1,f
  1805                           
  1806                           ;Button_src.c: 203:                     x = modulus_func(x,10);
  1807  016E  083E               	movf	_x+1,w
  1808  016F  00F8               	movwf	modulus_func@x+1
  1809  0170  083D               	movf	_x,w
  1810  0171  00F7               	movwf	modulus_func@x
  1811  0172  300A               	movlw	10
  1812  0173  00F9               	movwf	modulus_func@y
  1813  0174  3000               	movlw	0
  1814  0175  00FA               	movwf	modulus_func@y+1
  1815  0176  160A  118A  2672  120A  118A  	fcall	_modulus_func
  1816  017B  0878               	movf	?_modulus_func+1,w
  1817  017C  00BE               	movwf	_x+1
  1818  017D  0877               	movf	?_modulus_func,w
  1819  017E  00BD               	movwf	_x
  1820                           
  1821                           ;Button_src.c: 204:                     if (p == 1){
  1822  017F  032F               	decf	_p,w
  1823  0180  0430               	iorwf	_p+1,w
  1824  0181  1D03               	btfss	3,2
  1825  0182  299C               	goto	l3791
  1826                           
  1827                           ;Button_src.c: 205:                         y = incrementor(y,x,'0');
  1828  0183  083C               	movf	_y+1,w
  1829  0184  00DD               	movwf	incrementor@upper_val+1
  1830  0185  083B               	movf	_y,w
  1831  0186  00DC               	movwf	incrementor@upper_val
  1832  0187  083E               	movf	_x+1,w
  1833  0188  00DF               	movwf	incrementor@lower_val+1
  1834  0189  083D               	movf	_x,w
  1835  018A  00DE               	movwf	incrementor@lower_val
  1836  018B  3030               	movlw	48
  1837  018C  00E1               	movwf	??_time_settings
  1838  018D  0861               	movf	??_time_settings,w
  1839  018E  00E0               	movwf	incrementor@z
  1840  018F  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1841  0194  00E2               	movwf	??_time_settings+1
  1842  0195  01E3               	clrf	??_time_settings+2
  1843  0196  0862               	movf	??_time_settings+1,w
  1844  0197  00BB               	movwf	_y
  1845  0198  0863               	movf	??_time_settings+2,w
  1846  0199  00BC               	movwf	_y+1
  1847                           
  1848                           ;Button_src.c: 206:                         p = 0;
  1849  019A  01AF               	clrf	_p
  1850  019B  01B0               	clrf	_p+1
  1851  019C                     l3791:	
  1852                           
  1853                           ;Button_src.c: 208:                     if (x == 9){
  1854  019C  3009               	movlw	9
  1855  019D  063D               	xorwf	_x,w
  1856  019E  043E               	iorwf	_x+1,w
  1857  019F  1D03               	btfss	3,2
  1858  01A0  29A5               	goto	l3795
  1859                           
  1860                           ;Button_src.c: 209:                         p = 1;
  1861  01A1  3001               	movlw	1
  1862  01A2  00AF               	movwf	_p
  1863  01A3  3000               	movlw	0
  1864  01A4  00B0               	movwf	_p+1
  1865  01A5                     l3795:	
  1866                           
  1867                           ;Button_src.c: 213:                     a = time_date_hex_terminator(a,'T');
  1868  01A5  3054               	movlw	84
  1869  01A6  00E1               	movwf	??_time_settings
  1870  01A7  0861               	movf	??_time_settings,w
  1871  01A8  00F0               	movwf	time_date_hex_terminator@limiter
  1872  01A9  0851               	movf	_a,w
  1873  01AA  160A  118A  2654  120A  118A  	fcall	_time_date_hex_terminator
  1874  01AF  00E2               	movwf	??_time_settings+1
  1875  01B0  0862               	movf	??_time_settings+1,w
  1876  01B1  00D1               	movwf	_a
  1877                           
  1878                           ;Button_src.c: 214:                     if(y == 2 && x == 4){
  1879  01B2  3002               	movlw	2
  1880  01B3  063B               	xorwf	_y,w
  1881  01B4  043C               	iorwf	_y+1,w
  1882  01B5  1D03               	btfss	3,2
  1883  01B6  29C0               	goto	l3803
  1884  01B7  3004               	movlw	4
  1885  01B8  063D               	xorwf	_x,w
  1886  01B9  043E               	iorwf	_x+1,w
  1887  01BA  1D03               	btfss	3,2
  1888  01BB  29C0               	goto	l3803
  1889                           
  1890                           ;Button_src.c: 215:                         x = 0;
  1891  01BC  01BD               	clrf	_x
  1892  01BD  01BE               	clrf	_x+1
  1893                           
  1894                           ;Button_src.c: 216:                         y = 0;
  1895  01BE  01BB               	clrf	_y
  1896  01BF  01BC               	clrf	_y+1
  1897  01C0                     l3803:	
  1898                           
  1899                           ;Button_src.c: 218:                     button_delay();
  1900  01C0  160A  118A  2693  120A  118A  	fcall	_button_delay
  1901  01C5                     l3805:	
  1902                           
  1903                           ;Button_src.c: 220:             if(RC7==0 && b == 'y'){
  1904  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1905  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1906  01C7  1B87               	btfsc	7,7	;volatile
  1907  01C8  2A43               	goto	l3839
  1908  01C9  3079               	movlw	121
  1909  01CA  0650               	xorwf	_b,w
  1910  01CB  1D03               	btfss	3,2
  1911  01CC  2A43               	goto	l3839
  1912                           
  1913                           ;Button_src.c: 221:                  if(stats == 1)
  1914  01CD  0331               	decf	_stats,w
  1915  01CE  0432               	iorwf	_stats+1,w
  1916  01CF  1D03               	btfss	3,2
  1917  01D0  29D5               	goto	l575
  1918                           
  1919                           ;Button_src.c: 222:                    c++;
  1920  01D1  3001               	movlw	1
  1921  01D2  00E1               	movwf	??_time_settings
  1922  01D3  0861               	movf	??_time_settings,w
  1923  01D4  07CF               	addwf	_c,f
  1924  01D5                     l575:	
  1925                           
  1926                           ;Button_src.c: 223:                 if(stats == 0){
  1927  01D5  0831               	movf	_stats,w
  1928  01D6  0432               	iorwf	_stats+1,w
  1929  01D7  1D03               	btfss	3,2
  1930  01D8  29DD               	goto	l576
  1931                           
  1932                           ;Button_src.c: 224:                     stats = 1;
  1933  01D9  3001               	movlw	1
  1934  01DA  00B1               	movwf	_stats
  1935  01DB  3000               	movlw	0
  1936  01DC  00B2               	movwf	_stats+1
  1937  01DD                     l576:	
  1938                           ;Button_src.c: 225:                 }
  1939                           
  1940                           
  1941                           ;Button_src.c: 227:                     t++;
  1942  01DD  3001               	movlw	1
  1943  01DE  07C1               	addwf	_t,f
  1944  01DF  1803               	skipnc
  1945  01E0  0AC2               	incf	_t+1,f
  1946  01E1  3000               	movlw	0
  1947  01E2  07C2               	addwf	_t+1,f
  1948                           
  1949                           ;Button_src.c: 228:                     t = modulus_func(t,10);
  1950  01E3  0842               	movf	_t+1,w
  1951  01E4  00F8               	movwf	modulus_func@x+1
  1952  01E5  0841               	movf	_t,w
  1953  01E6  00F7               	movwf	modulus_func@x
  1954  01E7  300A               	movlw	10
  1955  01E8  00F9               	movwf	modulus_func@y
  1956  01E9  3000               	movlw	0
  1957  01EA  00FA               	movwf	modulus_func@y+1
  1958  01EB  160A  118A  2672  120A  118A  	fcall	_modulus_func
  1959  01F0  0878               	movf	?_modulus_func+1,w
  1960  01F1  00C2               	movwf	_t+1
  1961  01F2  0877               	movf	?_modulus_func,w
  1962  01F3  00C1               	movwf	_t
  1963                           
  1964                           ;Button_src.c: 229:                       if (p == 1){
  1965  01F4  032F               	decf	_p,w
  1966  01F5  0430               	iorwf	_p+1,w
  1967  01F6  1D03               	btfss	3,2
  1968  01F7  2A11               	goto	l3823
  1969                           
  1970                           ;Button_src.c: 230:                         w = incrementor(w,t,'0');
  1971  01F8  0840               	movf	_w+1,w
  1972  01F9  00DD               	movwf	incrementor@upper_val+1
  1973  01FA  083F               	movf	_w,w
  1974  01FB  00DC               	movwf	incrementor@upper_val
  1975  01FC  0842               	movf	_t+1,w
  1976  01FD  00DF               	movwf	incrementor@lower_val+1
  1977  01FE  0841               	movf	_t,w
  1978  01FF  00DE               	movwf	incrementor@lower_val
  1979  0200  3030               	movlw	48
  1980  0201  00E1               	movwf	??_time_settings
  1981  0202  0861               	movf	??_time_settings,w
  1982  0203  00E0               	movwf	incrementor@z
  1983  0204  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1984  0209  00E2               	movwf	??_time_settings+1
  1985  020A  01E3               	clrf	??_time_settings+2
  1986  020B  0862               	movf	??_time_settings+1,w
  1987  020C  00BF               	movwf	_w
  1988  020D  0863               	movf	??_time_settings+2,w
  1989  020E  00C0               	movwf	_w+1
  1990                           
  1991                           ;Button_src.c: 231:                         p = 0;
  1992  020F  01AF               	clrf	_p
  1993  0210  01B0               	clrf	_p+1
  1994  0211                     l3823:	
  1995                           
  1996                           ;Button_src.c: 233:                     if (t == 9){
  1997  0211  3009               	movlw	9
  1998  0212  0641               	xorwf	_t,w
  1999  0213  0442               	iorwf	_t+1,w
  2000  0214  1D03               	btfss	3,2
  2001  0215  2A1A               	goto	l3827
  2002                           
  2003                           ;Button_src.c: 234:                         p = 1;
  2004  0216  3001               	movlw	1
  2005  0217  00AF               	movwf	_p
  2006  0218  3000               	movlw	0
  2007  0219  00B0               	movwf	_p+1
  2008  021A                     l3827:	
  2009                           
  2010                           ;Button_src.c: 236:                     w = incrementor(w,t,'9');
  2011  021A  0840               	movf	_w+1,w
  2012  021B  00DD               	movwf	incrementor@upper_val+1
  2013  021C  083F               	movf	_w,w
  2014  021D  00DC               	movwf	incrementor@upper_val
  2015  021E  0842               	movf	_t+1,w
  2016  021F  00DF               	movwf	incrementor@lower_val+1
  2017  0220  0841               	movf	_t,w
  2018  0221  00DE               	movwf	incrementor@lower_val
  2019  0222  3039               	movlw	57
  2020  0223  00E1               	movwf	??_time_settings
  2021  0224  0861               	movf	??_time_settings,w
  2022  0225  00E0               	movwf	incrementor@z
  2023  0226  160A  118A  27B8  120A  118A  	fcall	_incrementor
  2024  022B  00E2               	movwf	??_time_settings+1
  2025  022C  01E3               	clrf	??_time_settings+2
  2026  022D  0862               	movf	??_time_settings+1,w
  2027  022E  00BF               	movwf	_w
  2028  022F  0863               	movf	??_time_settings+2,w
  2029  0230  00C0               	movwf	_w+1
  2030                           
  2031                           ;Button_src.c: 237:                     if(c == (0x59 + 1)){
  2032  0231  305A               	movlw	90
  2033  0232  064F               	xorwf	_c,w
  2034  0233  1903               	btfsc	3,2
  2035                           
  2036                           ;Button_src.c: 238:                         c = 0x00;
  2037  0234  01CF               	clrf	_c
  2038                           
  2039                           ;Button_src.c: 240:                     if(w == 6){
  2040  0235  3006               	movlw	6
  2041  0236  063F               	xorwf	_w,w
  2042  0237  0440               	iorwf	_w+1,w
  2043  0238  1D03               	btfss	3,2
  2044  0239  2A3E               	goto	l3837
  2045                           
  2046                           ;Button_src.c: 241:                         w = 0;
  2047  023A  01BF               	clrf	_w
  2048  023B  01C0               	clrf	_w+1
  2049                           
  2050                           ;Button_src.c: 242:                         t = 0;
  2051  023C  01C1               	clrf	_t
  2052  023D  01C2               	clrf	_t+1
  2053  023E                     l3837:	
  2054                           
  2055                           ;Button_src.c: 244:                     button_delay();
  2056  023E  160A  118A  2693  120A  118A  	fcall	_button_delay
  2057  0243                     l3839:	
  2058                           
  2059                           ;Button_src.c: 247:              write_cmd(0x88);
  2060  0243  3088               	movlw	136
  2061  0244  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2062                           
  2063                           ;Button_src.c: 248:                     table[2] = a;
  2064  0249  0851               	movf	_a,w
  2065  024A  00E1               	movwf	??_time_settings
  2066  024B  0861               	movf	??_time_settings,w
  2067  024C  00EA               	movwf	_table+2
  2068                           
  2069                           ;Button_src.c: 249:                     table[1] = c;
  2070  024D  084F               	movf	_c,w
  2071  024E  00E1               	movwf	??_time_settings
  2072  024F  0861               	movf	??_time_settings,w
  2073  0250  00E9               	movwf	_table+1
  2074                           
  2075                           ;Button_src.c: 254:                     a = time_date_delimiter(a,0x11,'9');
  2076  0251  3011               	movlw	17
  2077  0252  00E1               	movwf	??_time_settings
  2078  0253  0861               	movf	??_time_settings,w
  2079  0254  00F0               	movwf	time_date_delimiter@hex
  2080  0255  3039               	movlw	57
  2081  0256  00E2               	movwf	??_time_settings+1
  2082  0257  0862               	movf	??_time_settings+1,w
  2083  0258  00F1               	movwf	time_date_delimiter@limiter
  2084  0259  0851               	movf	_a,w
  2085  025A  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2086  025F  00E3               	movwf	??_time_settings+2
  2087  0260  0863               	movf	??_time_settings+2,w
  2088  0261  00D1               	movwf	_a
  2089                           
  2090                           ;Button_src.c: 255:                     a = time_date_delimiter(a,0x21,'J');
  2091  0262  3021               	movlw	33
  2092  0263  00E1               	movwf	??_time_settings
  2093  0264  0861               	movf	??_time_settings,w
  2094  0265  00F0               	movwf	time_date_delimiter@hex
  2095  0266  304A               	movlw	74
  2096  0267  00E2               	movwf	??_time_settings+1
  2097  0268  0862               	movf	??_time_settings+1,w
  2098  0269  00F1               	movwf	time_date_delimiter@limiter
  2099  026A  0851               	movf	_a,w
  2100  026B  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2101  0270  00E3               	movwf	??_time_settings+2
  2102  0271  0863               	movf	??_time_settings+2,w
  2103  0272  00D1               	movwf	_a
  2104                           
  2105                           ;Button_src.c: 257:                     c = time_date_delimiter(c,0x11,'9');
  2106  0273  3011               	movlw	17
  2107  0274  00E1               	movwf	??_time_settings
  2108  0275  0861               	movf	??_time_settings,w
  2109  0276  00F0               	movwf	time_date_delimiter@hex
  2110  0277  3039               	movlw	57
  2111  0278  00E2               	movwf	??_time_settings+1
  2112  0279  0862               	movf	??_time_settings+1,w
  2113  027A  00F1               	movwf	time_date_delimiter@limiter
  2114  027B  084F               	movf	_c,w
  2115  027C  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2116  0281  00E3               	movwf	??_time_settings+2
  2117  0282  0863               	movf	??_time_settings+2,w
  2118  0283  00CF               	movwf	_c
  2119                           
  2120                           ;Button_src.c: 258:                     c = time_date_delimiter(c,0x21,'J');
  2121  0284  3021               	movlw	33
  2122  0285  00E1               	movwf	??_time_settings
  2123  0286  0861               	movf	??_time_settings,w
  2124  0287  00F0               	movwf	time_date_delimiter@hex
  2125  0288  304A               	movlw	74
  2126  0289  00E2               	movwf	??_time_settings+1
  2127  028A  0862               	movf	??_time_settings+1,w
  2128  028B  00F1               	movwf	time_date_delimiter@limiter
  2129  028C  084F               	movf	_c,w
  2130  028D  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2131  0292  00E3               	movwf	??_time_settings+2
  2132  0293  0863               	movf	??_time_settings+2,w
  2133  0294  00CF               	movwf	_c
  2134                           
  2135                           ;Button_src.c: 259:                     c = time_date_delimiter(c,0x31,'Y');
  2136  0295  3031               	movlw	49
  2137  0296  00E1               	movwf	??_time_settings
  2138  0297  0861               	movf	??_time_settings,w
  2139  0298  00F0               	movwf	time_date_delimiter@hex
  2140  0299  3059               	movlw	89
  2141  029A  00E2               	movwf	??_time_settings+1
  2142  029B  0862               	movf	??_time_settings+1,w
  2143  029C  00F1               	movwf	time_date_delimiter@limiter
  2144  029D  084F               	movf	_c,w
  2145  029E  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2146  02A3  00E3               	movwf	??_time_settings+2
  2147  02A4  0863               	movf	??_time_settings+2,w
  2148  02A5  00CF               	movwf	_c
  2149                           
  2150                           ;Button_src.c: 260:                     c = time_date_delimiter(c,0x41,'j');
  2151  02A6  3041               	movlw	65
  2152  02A7  00E1               	movwf	??_time_settings
  2153  02A8  0861               	movf	??_time_settings,w
  2154  02A9  00F0               	movwf	time_date_delimiter@hex
  2155  02AA  306A               	movlw	106
  2156  02AB  00E2               	movwf	??_time_settings+1
  2157  02AC  0862               	movf	??_time_settings+1,w
  2158  02AD  00F1               	movwf	time_date_delimiter@limiter
  2159  02AE  084F               	movf	_c,w
  2160  02AF  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2161  02B4  00E3               	movwf	??_time_settings+2
  2162  02B5  0863               	movf	??_time_settings+2,w
  2163  02B6  00CF               	movwf	_c
  2164                           
  2165                           ;Button_src.c: 261:                     c = time_date_delimiter(c,0x51,'z');
  2166  02B7  3051               	movlw	81
  2167  02B8  00E1               	movwf	??_time_settings
  2168  02B9  0861               	movf	??_time_settings,w
  2169  02BA  00F0               	movwf	time_date_delimiter@hex
  2170  02BB  307A               	movlw	122
  2171  02BC  00E2               	movwf	??_time_settings+1
  2172  02BD  0862               	movf	??_time_settings+1,w
  2173  02BE  00F1               	movwf	time_date_delimiter@limiter
  2174  02BF  084F               	movf	_c,w
  2175  02C0  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2176  02C5  00E3               	movwf	??_time_settings+2
  2177  02C6  0863               	movf	??_time_settings+2,w
  2178  02C7  00CF               	movwf	_c
  2179                           
  2180                           ;Button_src.c: 263:                   RC0 = 0;
  2181  02C8  1007               	bcf	7,0	;volatile
  2182                           
  2183                           ;Button_src.c: 264:                   RC1 = 1;
  2184  02C9  1487               	bsf	7,1	;volatile
  2185                           
  2186                           ;Button_src.c: 265:                   RC2 = 1;
  2187  02CA  1507               	bsf	7,2	;volatile
  2188                           
  2189                           ;Button_src.c: 266:                   RC3 = 1;
  2190  02CB  1587               	bsf	7,3	;volatile
  2191                           
  2192                           ;Button_src.c: 267:                     if (RC6 == 0 ){
  2193  02CC  1B07               	btfsc	7,6	;volatile
  2194  02CD  2AE2               	goto	l581
  2195                           
  2196                           ;Button_src.c: 268:                           write_cmd(0x1);
  2197  02CE  3001               	movlw	1
  2198  02CF  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2199                           
  2200                           ;Button_src.c: 269:                           a = 0x00;
  2201  02D4  01D1               	clrf	_a
  2202                           
  2203                           ;Button_src.c: 270:                           c = 0x00;
  2204  02D5  01CF               	clrf	_c
  2205                           
  2206                           ;Button_src.c: 271:                           x = 0;
  2207  02D6  01BD               	clrf	_x
  2208  02D7  01BE               	clrf	_x+1
  2209                           
  2210                           ;Button_src.c: 272:                           y = 0;
  2211  02D8  01BB               	clrf	_y
  2212  02D9  01BC               	clrf	_y+1
  2213                           
  2214                           ;Button_src.c: 273:                           w = 0;
  2215  02DA  01BF               	clrf	_w
  2216  02DB  01C0               	clrf	_w+1
  2217                           
  2218                           ;Button_src.c: 274:                           t = 0;
  2219  02DC  01C1               	clrf	_t
  2220  02DD  01C2               	clrf	_t+1
  2221                           
  2222                           ;Button_src.c: 275:                           set_time();
  2223  02DE  120A  158A  2041   	fcall	_set_time
  2224  02E1  0008               	return
  2225  02E2                     l581:	
  2226                           ;Button_src.c: 277:                             }
  2227                           
  2228                           
  2229                           ;Button_src.c: 278:                   RC0 = 1;
  2230  02E2  1407               	bsf	7,0	;volatile
  2231                           
  2232                           ;Button_src.c: 279:                   RC1 = 1;
  2233  02E3  1487               	bsf	7,1	;volatile
  2234                           
  2235                           ;Button_src.c: 280:                   RC2 = 0;
  2236  02E4  1107               	bcf	7,2	;volatile
  2237                           
  2238                           ;Button_src.c: 281:                   RC3 = 1;
  2239  02E5  1587               	bsf	7,3	;volatile
  2240                           
  2241                           ;Button_src.c: 282:                   z = modulus_func(z,2);
  2242  02E6  083A               	movf	_z+1,w
  2243  02E7  00F8               	movwf	modulus_func@x+1
  2244  02E8  0839               	movf	_z,w
  2245  02E9  00F7               	movwf	modulus_func@x
  2246  02EA  3002               	movlw	2
  2247  02EB  00F9               	movwf	modulus_func@y
  2248  02EC  3000               	movlw	0
  2249  02ED  00FA               	movwf	modulus_func@y+1
  2250  02EE  160A  118A  2672  120A  118A  	fcall	_modulus_func
  2251  02F3  0878               	movf	?_modulus_func+1,w
  2252  02F4  00BA               	movwf	_z+1
  2253  02F5  0877               	movf	?_modulus_func,w
  2254  02F6  00B9               	movwf	_z
  2255                           
  2256                           ;Button_src.c: 283:                   if(RC4 == 0 && z ==0){
  2257  02F7  1A07               	btfsc	7,4	;volatile
  2258  02F8  2B32               	goto	l3899
  2259  02F9  0839               	movf	_z,w
  2260  02FA  043A               	iorwf	_z+1,w
  2261  02FB  1D03               	btfss	3,2
  2262  02FC  2B32               	goto	l3899
  2263                           
  2264                           ;Button_src.c: 284:                       write_cmd(0x90);
  2265  02FD  3090               	movlw	144
  2266  02FE  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2267                           
  2268                           ;Button_src.c: 285:                       write_char('H');
  2269  0303  3048               	movlw	72
  2270  0304  160A  118A  26E5  120A  118A  	fcall	_write_char
  2271                           
  2272                           ;Button_src.c: 286:                       write_char('o');
  2273  0309  306F               	movlw	111
  2274  030A  160A  118A  26E5  120A  118A  	fcall	_write_char
  2275                           
  2276                           ;Button_src.c: 287:                       write_char('u');
  2277  030F  3075               	movlw	117
  2278  0310  160A  118A  26E5  120A  118A  	fcall	_write_char
  2279                           
  2280                           ;Button_src.c: 288:                       write_char('r');
  2281  0315  3072               	movlw	114
  2282  0316  160A  118A  26E5  120A  118A  	fcall	_write_char
  2283                           
  2284                           ;Button_src.c: 289:                       write_char(':');
  2285  031B  303A               	movlw	58
  2286  031C  160A  118A  26E5  120A  118A  	fcall	_write_char
  2287                           
  2288                           ;Button_src.c: 290:                       b = 'x';
  2289  0321  3078               	movlw	120
  2290  0322  00E1               	movwf	??_time_settings
  2291  0323  0861               	movf	??_time_settings,w
  2292  0324  00D0               	movwf	_b
  2293                           
  2294                           ;Button_src.c: 291:                       button_delay();
  2295  0325  160A  118A  2693  120A  118A  	fcall	_button_delay
  2296                           
  2297                           ;Button_src.c: 292:                       z++;
  2298  032A  3001               	movlw	1
  2299  032B  1283               	bcf	3,5	;RP0=0, select bank0
  2300  032C  1303               	bcf	3,6	;RP1=0, select bank0
  2301  032D  07B9               	addwf	_z,f
  2302  032E  1803               	skipnc
  2303  032F  0ABA               	incf	_z+1,f
  2304  0330  3000               	movlw	0
  2305  0331  07BA               	addwf	_z+1,f
  2306  0332                     l3899:	
  2307                           
  2308                           ;Button_src.c: 294:                   RC0 = 1;
  2309  0332  1407               	bsf	7,0	;volatile
  2310                           
  2311                           ;Button_src.c: 295:                   RC1 = 1;
  2312  0333  1487               	bsf	7,1	;volatile
  2313                           
  2314                           ;Button_src.c: 296:                   RC2 = 0;
  2315  0334  1107               	bcf	7,2	;volatile
  2316                           
  2317                           ;Button_src.c: 297:                   RC3 = 1;
  2318  0335  1587               	bsf	7,3	;volatile
  2319                           
  2320                           ;Button_src.c: 299:                   if(RC4 == 0&& z ==1){
  2321  0336  1A07               	btfsc	7,4	;volatile
  2322  0337  2B6F               	goto	l584
  2323  0338  0339               	decf	_z,w
  2324  0339  043A               	iorwf	_z+1,w
  2325  033A  1D03               	btfss	3,2
  2326  033B  2B6F               	goto	l584
  2327                           
  2328                           ;Button_src.c: 300:                     z++;
  2329  033C  3001               	movlw	1
  2330  033D  07B9               	addwf	_z,f
  2331  033E  1803               	skipnc
  2332  033F  0ABA               	incf	_z+1,f
  2333  0340  3000               	movlw	0
  2334  0341  07BA               	addwf	_z+1,f
  2335                           
  2336                           ;Button_src.c: 301:                     button_delay();
  2337  0342  160A  118A  2693  120A  118A  	fcall	_button_delay
  2338                           
  2339                           ;Button_src.c: 302:                     write_cmd(0x90);
  2340  0347  3090               	movlw	144
  2341  0348  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2342                           
  2343                           ;Button_src.c: 303:                     write_char('M');
  2344  034D  304D               	movlw	77
  2345  034E  160A  118A  26E5  120A  118A  	fcall	_write_char
  2346                           
  2347                           ;Button_src.c: 304:                     write_char('i');
  2348  0353  3069               	movlw	105
  2349  0354  160A  118A  26E5  120A  118A  	fcall	_write_char
  2350                           
  2351                           ;Button_src.c: 305:                     write_char('n');
  2352  0359  306E               	movlw	110
  2353  035A  160A  118A  26E5  120A  118A  	fcall	_write_char
  2354                           
  2355                           ;Button_src.c: 306:                     write_char('s');
  2356  035F  3073               	movlw	115
  2357  0360  160A  118A  26E5  120A  118A  	fcall	_write_char
  2358                           
  2359                           ;Button_src.c: 307:                     write_char(':');
  2360  0365  303A               	movlw	58
  2361  0366  160A  118A  26E5  120A  118A  	fcall	_write_char
  2362                           
  2363                           ;Button_src.c: 308:                     b = 'y';
  2364  036B  3079               	movlw	121
  2365  036C  00E1               	movwf	??_time_settings
  2366  036D  0861               	movf	??_time_settings,w
  2367  036E  00D0               	movwf	_b
  2368  036F                     l584:	
  2369                           ;Button_src.c: 309:                   }
  2370                           
  2371                           
  2372                           ;Button_src.c: 310:                    write_cmd(0x88);
  2373  036F  3088               	movlw	136
  2374  0370  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2375                           
  2376                           ;Button_src.c: 317:                   RC0 = 1;
  2377  0375  1407               	bsf	7,0	;volatile
  2378                           
  2379                           ;Button_src.c: 318:                   RC1 = 1;
  2380  0376  1487               	bsf	7,1	;volatile
  2381                           
  2382                           ;Button_src.c: 319:                   RC2 = 0;
  2383  0377  1107               	bcf	7,2	;volatile
  2384                           
  2385                           ;Button_src.c: 320:                   RC3 = 1;
  2386  0378  1587               	bsf	7,3	;volatile
  2387                           
  2388                           ;Button_src.c: 322:              write_cmd(0x88);
  2389  0379  3088               	movlw	136
  2390  037A  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2391                           
  2392                           ;Button_src.c: 323:              write_char('T');
  2393  037F  3054               	movlw	84
  2394  0380  160A  118A  26E5  120A  118A  	fcall	_write_char
  2395                           
  2396                           ;Button_src.c: 324:              write_char('i');
  2397  0385  3069               	movlw	105
  2398  0386  160A  118A  26E5  120A  118A  	fcall	_write_char
  2399                           
  2400                           ;Button_src.c: 325:              write_char('m');
  2401  038B  306D               	movlw	109
  2402  038C  160A  118A  26E5  120A  118A  	fcall	_write_char
  2403                           
  2404                           ;Button_src.c: 326:              write_char('e');
  2405  0391  3065               	movlw	101
  2406  0392  160A  118A  26E5  120A  118A  	fcall	_write_char
  2407                           
  2408                           ;Button_src.c: 327:              write_char(':');
  2409  0397  303A               	movlw	58
  2410  0398  160A  118A  26E5  120A  118A  	fcall	_write_char
  2411                           
  2412                           ;Button_src.c: 328:              write_char(y + '0');
  2413  039D  083B               	movf	_y,w
  2414  039E  3E30               	addlw	48
  2415  039F  160A  118A  26E5  120A  118A  	fcall	_write_char
  2416                           
  2417                           ;Button_src.c: 329:              write_char(x + '0');
  2418  03A4  083D               	movf	_x,w
  2419  03A5  3E30               	addlw	48
  2420  03A6  160A  118A  26E5  120A  118A  	fcall	_write_char
  2421                           
  2422                           ;Button_src.c: 330:              write_char(':');
  2423  03AB  303A               	movlw	58
  2424  03AC  160A  118A  26E5  120A  118A  	fcall	_write_char
  2425                           
  2426                           ;Button_src.c: 331:              write_char(w + '0');
  2427  03B1  083F               	movf	_w,w
  2428  03B2  3E30               	addlw	48
  2429  03B3  160A  118A  26E5  120A  118A  	fcall	_write_char
  2430                           
  2431                           ;Button_src.c: 332:              write_char(t + '0');
  2432  03B8  0841               	movf	_t,w
  2433  03B9  3E30               	addlw	48
  2434  03BA  160A  118A  26E5  120A  118A  	fcall	_write_char
  2435                           
  2436                           ;Button_src.c: 334:             RC0 = 0;
  2437  03BF  1007               	bcf	7,0	;volatile
  2438                           
  2439                           ;Button_src.c: 335:             RC1 = 1;
  2440  03C0  1487               	bsf	7,1	;volatile
  2441                           
  2442                           ;Button_src.c: 336:             RC2 = 1;
  2443  03C1  1507               	bsf	7,2	;volatile
  2444                           
  2445                           ;Button_src.c: 337:             RC3 = 1;
  2446  03C2  1587               	bsf	7,3	;volatile
  2447                           
  2448                           ;Button_src.c: 338:             if (RC7 == 0 ){
  2449  03C3  1B87               	btfsc	7,7	;volatile
  2450  03C4  28FA               	goto	l567
  2451                           
  2452                           ;Button_src.c: 339:             a = 0x00;
  2453  03C5  01D1               	clrf	_a
  2454                           
  2455                           ;Button_src.c: 340:             c = 0x00;
  2456  03C6  01CF               	clrf	_c
  2457                           
  2458                           ;Button_src.c: 341:             x = 0;
  2459  03C7  01BD               	clrf	_x
  2460  03C8  01BE               	clrf	_x+1
  2461                           
  2462                           ;Button_src.c: 342:             y = 0;
  2463  03C9  01BB               	clrf	_y
  2464  03CA  01BC               	clrf	_y+1
  2465                           
  2466                           ;Button_src.c: 343:             w = 0;
  2467  03CB  01BF               	clrf	_w
  2468  03CC  01C0               	clrf	_w+1
  2469                           
  2470                           ;Button_src.c: 344:             t = 0;
  2471  03CD  01C1               	clrf	_t
  2472  03CE  01C2               	clrf	_t+1
  2473                           
  2474                           ;Button_src.c: 345:             write_cmd(0x1);
  2475  03CF  3001               	movlw	1
  2476  03D0  160A  118A  26FC   	fcall	_write_cmd
  2477                           
  2478                           ;Button_src.c: 346:             break;
  2479  03D3  0008               	return
  2480  03D4                     __end_of_time_settings:	
  2481                           
  2482                           	psect	text2
  2483  0DAA                     __ptext2:	
  2484 ;; *************** function _thermometer_threshhold_settings *****************
  2485 ;; Defined at:
  2486 ;;		line 23 in file "Button_src.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  i               2    8[BANK0 ] int 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 300/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2500 ;;      Params:         0       0       0       0       0
  2501 ;;      Locals:         0       2       0       0       0
  2502 ;;      Temps:          0       3       0       0       0
  2503 ;;      Totals:         0       5       0       0       0
  2504 ;;Total ram usage:        5 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    3
  2507 ;; This function calls:
  2508 ;;		_button_delay
  2509 ;;		_decrementor
  2510 ;;		_incrementor
  2511 ;;		_modulus_func
  2512 ;;		_write_char
  2513 ;;		_write_cmd
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _thermometer_threshhold_settings
  2521  0DAA                     _thermometer_threshhold_settings:	
  2522                           
  2523                           ;Button_src.c: 24:  RC0 = 1;
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2527  0DAA  1407               	bsf	7,0	;volatile
  2528                           
  2529                           ;Button_src.c: 25:  RC1 = 0;
  2530  0DAB  1087               	bcf	7,1	;volatile
  2531                           
  2532                           ;Button_src.c: 26:  RC2 = 1;
  2533  0DAC  1507               	bsf	7,2	;volatile
  2534                           
  2535                           ;Button_src.c: 27:  RC3 = 1;
  2536  0DAD  1587               	bsf	7,3	;volatile
  2537                           
  2538                           ;Button_src.c: 28:   if (RC4 == 0){
  2539  0DAE  1A07               	btfsc	7,4	;volatile
  2540  0DAF  0008               	return
  2541                           
  2542                           ;Button_src.c: 29:       write_cmd(0x1);
  2543  0DB0  3001               	movlw	1
  2544  0DB1  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2545                           
  2546                           ;Button_src.c: 31:             write_cmd(0x80);
  2547                           
  2548                           ;Button_src.c: 30:       for(;;){
  2549  0DB6  3080               	movlw	128
  2550  0DB7  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2551                           
  2552                           ;Button_src.c: 32:             write_char('t');
  2553  0DBC  3074               	movlw	116
  2554  0DBD  160A  118A  26E5  120A  158A  	fcall	_write_char
  2555                           
  2556                           ;Button_src.c: 33:             write_char('h');
  2557  0DC2  3068               	movlw	104
  2558  0DC3  160A  118A  26E5  120A  158A  	fcall	_write_char
  2559                           
  2560                           ;Button_src.c: 34:             write_char('r');
  2561  0DC8  3072               	movlw	114
  2562  0DC9  160A  118A  26E5  120A  158A  	fcall	_write_char
  2563                           
  2564                           ;Button_src.c: 35:             write_char('e');
  2565  0DCE  3065               	movlw	101
  2566  0DCF  160A  118A  26E5  120A  158A  	fcall	_write_char
  2567                           
  2568                           ;Button_src.c: 36:             write_char('s');
  2569  0DD4  3073               	movlw	115
  2570  0DD5  160A  118A  26E5  120A  158A  	fcall	_write_char
  2571                           
  2572                           ;Button_src.c: 37:             write_char('h');
  2573  0DDA  3068               	movlw	104
  2574  0DDB  160A  118A  26E5  120A  158A  	fcall	_write_char
  2575                           
  2576                           ;Button_src.c: 38:             write_char('o');
  2577  0DE0  306F               	movlw	111
  2578  0DE1  160A  118A  26E5  120A  158A  	fcall	_write_char
  2579                           
  2580                           ;Button_src.c: 39:             write_char('l');
  2581  0DE6  306C               	movlw	108
  2582  0DE7  160A  118A  26E5  120A  158A  	fcall	_write_char
  2583                           
  2584                           ;Button_src.c: 40:             write_char('d');
  2585  0DEC  3064               	movlw	100
  2586  0DED  160A  118A  26E5  120A  158A  	fcall	_write_char
  2587                           
  2588                           ;Button_src.c: 42:             write_cmd(0x90);
  2589  0DF2  3090               	movlw	144
  2590  0DF3  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2591                           
  2592                           ;Button_src.c: 43:             write_char('C');
  2593  0DF8  3043               	movlw	67
  2594  0DF9  160A  118A  26E5  120A  158A  	fcall	_write_char
  2595                           
  2596                           ;Button_src.c: 44:             write_char('u');
  2597  0DFE  3075               	movlw	117
  2598  0DFF  160A  118A  26E5  120A  158A  	fcall	_write_char
  2599                           
  2600                           ;Button_src.c: 45:             write_char('r');
  2601  0E04  3072               	movlw	114
  2602  0E05  160A  118A  26E5  120A  158A  	fcall	_write_char
  2603                           
  2604                           ;Button_src.c: 46:             write_char('r');
  2605  0E0A  3072               	movlw	114
  2606  0E0B  160A  118A  26E5  120A  158A  	fcall	_write_char
  2607                           
  2608                           ;Button_src.c: 47:             write_char('e');
  2609  0E10  3065               	movlw	101
  2610  0E11  160A  118A  26E5  120A  158A  	fcall	_write_char
  2611                           
  2612                           ;Button_src.c: 48:             write_char('n');
  2613  0E16  306E               	movlw	110
  2614  0E17  160A  118A  26E5  120A  158A  	fcall	_write_char
  2615                           
  2616                           ;Button_src.c: 49:             write_char('t');
  2617  0E1C  3074               	movlw	116
  2618  0E1D  160A  118A  26E5  120A  158A  	fcall	_write_char
  2619                           
  2620                           ;Button_src.c: 50:             write_char(':');
  2621  0E22  303A               	movlw	58
  2622  0E23  160A  118A  26E5  120A  158A  	fcall	_write_char
  2623                           
  2624                           ;Button_src.c: 52:             write_char(var1 + '0');
  2625  0E28  0847               	movf	_var1,w
  2626  0E29  3E30               	addlw	48
  2627  0E2A  160A  118A  26E5  120A  158A  	fcall	_write_char
  2628                           
  2629                           ;Button_src.c: 53:             write_char(var2 + '0');
  2630  0E2F  0846               	movf	_var2,w
  2631  0E30  3E30               	addlw	48
  2632  0E31  160A  118A  26E5  120A  158A  	fcall	_write_char
  2633                           
  2634                           ;Button_src.c: 55:             write_cmd(0x88);
  2635  0E36  3088               	movlw	136
  2636  0E37  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2637                           
  2638                           ;Button_src.c: 56:             write_char('S');
  2639  0E3C  3053               	movlw	83
  2640  0E3D  160A  118A  26E5  120A  158A  	fcall	_write_char
  2641                           
  2642                           ;Button_src.c: 57:             write_char('e');
  2643  0E42  3065               	movlw	101
  2644  0E43  160A  118A  26E5  120A  158A  	fcall	_write_char
  2645                           
  2646                           ;Button_src.c: 58:             write_char('t');
  2647  0E48  3074               	movlw	116
  2648  0E49  160A  118A  26E5  120A  158A  	fcall	_write_char
  2649                           
  2650                           ;Button_src.c: 59:             write_char('_');
  2651  0E4E  305F               	movlw	95
  2652  0E4F  160A  118A  26E5  120A  158A  	fcall	_write_char
  2653                           
  2654                           ;Button_src.c: 60:             write_char('t');
  2655  0E54  3074               	movlw	116
  2656  0E55  160A  118A  26E5  120A  158A  	fcall	_write_char
  2657                           
  2658                           ;Button_src.c: 61:             write_char('h');
  2659  0E5A  3068               	movlw	104
  2660  0E5B  160A  118A  26E5  120A  158A  	fcall	_write_char
  2661                           
  2662                           ;Button_src.c: 62:             write_char('r');
  2663  0E60  3072               	movlw	114
  2664  0E61  160A  118A  26E5  120A  158A  	fcall	_write_char
  2665                           
  2666                           ;Button_src.c: 63:             write_char('e');
  2667  0E66  3065               	movlw	101
  2668  0E67  160A  118A  26E5  120A  158A  	fcall	_write_char
  2669                           
  2670                           ;Button_src.c: 64:             write_char('s');
  2671  0E6C  3073               	movlw	115
  2672  0E6D  160A  118A  26E5  120A  158A  	fcall	_write_char
  2673                           
  2674                           ;Button_src.c: 65:             write_char('h');
  2675  0E72  3068               	movlw	104
  2676  0E73  160A  118A  26E5  120A  158A  	fcall	_write_char
  2677                           
  2678                           ;Button_src.c: 66:             write_char('o');
  2679  0E78  306F               	movlw	111
  2680  0E79  160A  118A  26E5  120A  158A  	fcall	_write_char
  2681                           
  2682                           ;Button_src.c: 67:             write_char('l');
  2683  0E7E  306C               	movlw	108
  2684  0E7F  160A  118A  26E5  120A  158A  	fcall	_write_char
  2685                           
  2686                           ;Button_src.c: 68:             write_char('d');
  2687  0E84  3064               	movlw	100
  2688  0E85  160A  118A  26E5  120A  158A  	fcall	_write_char
  2689                           
  2690                           ;Button_src.c: 69:             write_char(':');
  2691  0E8A  303A               	movlw	58
  2692  0E8B  160A  118A  26E5  120A  158A  	fcall	_write_char
  2693                           
  2694                           ;Button_src.c: 71:             write_cmd(0x98);
  2695  0E90  3098               	movlw	152
  2696  0E91  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2697                           
  2698                           ;Button_src.c: 72:             RC0 = 1;
  2699  0E96  1407               	bsf	7,0	;volatile
  2700                           
  2701                           ;Button_src.c: 73:             RC1 = 0;
  2702  0E97  1087               	bcf	7,1	;volatile
  2703                           
  2704                           ;Button_src.c: 74:             RC2 = 1;
  2705  0E98  1507               	bsf	7,2	;volatile
  2706                           
  2707                           ;Button_src.c: 75:             RC3 = 1;
  2708  0E99  1587               	bsf	7,3	;volatile
  2709                           
  2710                           ;Button_src.c: 76:             t = 0;
  2711  0E9A  01C1               	clrf	_t
  2712  0E9B  01C2               	clrf	_t+1
  2713                           
  2714                           ;Button_src.c: 77:             w = 0;
  2715  0E9C  01BF               	clrf	_w
  2716  0E9D  01C0               	clrf	_w+1
  2717                           
  2718                           ;Button_src.c: 78:             x = 0;
  2719  0E9E  01BD               	clrf	_x
  2720  0E9F  01BE               	clrf	_x+1
  2721                           
  2722                           ;Button_src.c: 79:             y = 0;
  2723  0EA0  01BB               	clrf	_y
  2724  0EA1  01BC               	clrf	_y+1
  2725                           
  2726                           ;Button_src.c: 80:             x = 0x00;
  2727  0EA2  01BD               	clrf	_x
  2728  0EA3  01BE               	clrf	_x+1
  2729  0EA4                     l3379:	
  2730                           
  2731                           ;Button_src.c: 82:                  RC0 = 1;
  2732  0EA4  1407               	bsf	7,0	;volatile
  2733                           
  2734                           ;Button_src.c: 83:                  RC1 = 0;
  2735  0EA5  1087               	bcf	7,1	;volatile
  2736                           
  2737                           ;Button_src.c: 84:                  RC2 = 1;
  2738  0EA6  1507               	bsf	7,2	;volatile
  2739                           
  2740                           ;Button_src.c: 85:                  RC3 = 1;
  2741  0EA7  1587               	bsf	7,3	;volatile
  2742                           
  2743                           ;Button_src.c: 87:                 if(RC7==0){
  2744  0EA8  1B87               	btfsc	7,7	;volatile
  2745  0EA9  2F03               	goto	l3407
  2746                           
  2747                           ;Button_src.c: 88:                     write_cmd(0x98);
  2748  0EAA  3098               	movlw	152
  2749  0EAB  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2750                           
  2751                           ;Button_src.c: 89:                     x++;
  2752  0EB0  3001               	movlw	1
  2753  0EB1  07BD               	addwf	_x,f
  2754  0EB2  1803               	skipnc
  2755  0EB3  0ABE               	incf	_x+1,f
  2756  0EB4  3000               	movlw	0
  2757  0EB5  07BE               	addwf	_x+1,f
  2758                           
  2759                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2760  0EB6  083B               	movf	_y,w
  2761  0EB7  00E1               	movwf	??_thermometer_threshhold_settings
  2762  0EB8  01E2               	clrf	??_thermometer_threshhold_settings+1
  2763  0EB9  0861               	movf	??_thermometer_threshhold_settings,w
  2764  0EBA  00BB               	movwf	_y
  2765  0EBB  0862               	movf	??_thermometer_threshhold_settings+1,w
  2766  0EBC  00BC               	movwf	_y+1
  2767                           
  2768                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2769  0EBD  083E               	movf	_x+1,w
  2770  0EBE  00F8               	movwf	modulus_func@x+1
  2771  0EBF  083D               	movf	_x,w
  2772  0EC0  00F7               	movwf	modulus_func@x
  2773  0EC1  300A               	movlw	10
  2774  0EC2  00F9               	movwf	modulus_func@y
  2775  0EC3  3000               	movlw	0
  2776  0EC4  00FA               	movwf	modulus_func@y+1
  2777  0EC5  160A  118A  2672  120A  158A  	fcall	_modulus_func
  2778  0ECA  0877               	movf	?_modulus_func,w
  2779  0ECB  00E1               	movwf	??_thermometer_threshhold_settings
  2780  0ECC  01E2               	clrf	??_thermometer_threshhold_settings+1
  2781  0ECD  0861               	movf	??_thermometer_threshhold_settings,w
  2782  0ECE  00BD               	movwf	_x
  2783  0ECF  0862               	movf	??_thermometer_threshhold_settings+1,w
  2784  0ED0  00BE               	movwf	_x+1
  2785                           
  2786                           ;Button_src.c: 92:                     write_char(y + '0');
  2787  0ED1  083B               	movf	_y,w
  2788  0ED2  3E30               	addlw	48
  2789  0ED3  160A  118A  26E5  120A  158A  	fcall	_write_char
  2790                           
  2791                           ;Button_src.c: 93:                     write_char(x + '0');
  2792  0ED8  083D               	movf	_x,w
  2793  0ED9  3E30               	addlw	48
  2794  0EDA  160A  118A  26E5  120A  158A  	fcall	_write_char
  2795                           
  2796                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2797  0EDF  083C               	movf	_y+1,w
  2798  0EE0  00DD               	movwf	incrementor@upper_val+1
  2799  0EE1  083B               	movf	_y,w
  2800  0EE2  00DC               	movwf	incrementor@upper_val
  2801  0EE3  083E               	movf	_x+1,w
  2802  0EE4  00DF               	movwf	incrementor@lower_val+1
  2803  0EE5  083D               	movf	_x,w
  2804  0EE6  00DE               	movwf	incrementor@lower_val
  2805  0EE7  3039               	movlw	57
  2806  0EE8  00E1               	movwf	??_thermometer_threshhold_settings
  2807  0EE9  0861               	movf	??_thermometer_threshhold_settings,w
  2808  0EEA  00E0               	movwf	incrementor@z
  2809  0EEB  160A  118A  27B8  120A  158A  	fcall	_incrementor
  2810  0EF0  00E2               	movwf	??_thermometer_threshhold_settings+1
  2811  0EF1  01E3               	clrf	??_thermometer_threshhold_settings+2
  2812  0EF2  0862               	movf	??_thermometer_threshhold_settings+1,w
  2813  0EF3  00BB               	movwf	_y
  2814  0EF4  0863               	movf	??_thermometer_threshhold_settings+2,w
  2815  0EF5  00BC               	movwf	_y+1
  2816                           
  2817                           ;Button_src.c: 95:                     t = x;
  2818  0EF6  083E               	movf	_x+1,w
  2819  0EF7  00C2               	movwf	_t+1
  2820  0EF8  083D               	movf	_x,w
  2821  0EF9  00C1               	movwf	_t
  2822                           
  2823                           ;Button_src.c: 96:                     w = y;
  2824  0EFA  083C               	movf	_y+1,w
  2825  0EFB  00C0               	movwf	_w+1
  2826  0EFC  083B               	movf	_y,w
  2827  0EFD  00BF               	movwf	_w
  2828                           
  2829                           ;Button_src.c: 97:                     button_delay();
  2830  0EFE  160A  118A  2693  120A  158A  	fcall	_button_delay
  2831  0F03                     l3407:	
  2832                           
  2833                           ;Button_src.c: 99:                   RC0 = 0;
  2834  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  2835  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  2836  0F05  1007               	bcf	7,0	;volatile
  2837                           
  2838                           ;Button_src.c: 100:                     RC1 = 1;
  2839  0F06  1487               	bsf	7,1	;volatile
  2840                           
  2841                           ;Button_src.c: 101:                     RC2 = 1;
  2842  0F07  1507               	bsf	7,2	;volatile
  2843                           
  2844                           ;Button_src.c: 102:                     RC3 = 1;
  2845  0F08  1587               	bsf	7,3	;volatile
  2846                           
  2847                           ;Button_src.c: 103:                     if(RC6 == 0){
  2848  0F09  1B07               	btfsc	7,6	;volatile
  2849  0F0A  2F4D               	goto	l554
  2850                           
  2851                           ;Button_src.c: 104:                         var1 = y;
  2852  0F0B  083B               	movf	_y,w
  2853  0F0C  00E1               	movwf	??_thermometer_threshhold_settings
  2854  0F0D  0861               	movf	??_thermometer_threshhold_settings,w
  2855  0F0E  00C7               	movwf	_var1
  2856                           
  2857                           ;Button_src.c: 105:                         var2 = x;
  2858  0F0F  083D               	movf	_x,w
  2859  0F10  00E1               	movwf	??_thermometer_threshhold_settings
  2860  0F11  0861               	movf	??_thermometer_threshhold_settings,w
  2861  0F12  00C6               	movwf	_var2
  2862                           
  2863                           ;Button_src.c: 107:                         write_cmd(0x1);
  2864  0F13  3001               	movlw	1
  2865  0F14  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2866                           
  2867                           ;Button_src.c: 108:                         write_char('S');
  2868  0F19  3053               	movlw	83
  2869  0F1A  160A  118A  26E5  120A  158A  	fcall	_write_char
  2870                           
  2871                           ;Button_src.c: 109:                         write_char('A');
  2872  0F1F  3041               	movlw	65
  2873  0F20  160A  118A  26E5  120A  158A  	fcall	_write_char
  2874                           
  2875                           ;Button_src.c: 110:                         write_char('V');
  2876  0F25  3056               	movlw	86
  2877  0F26  160A  118A  26E5  120A  158A  	fcall	_write_char
  2878                           
  2879                           ;Button_src.c: 111:                         write_char('E');
  2880  0F2B  3045               	movlw	69
  2881  0F2C  160A  118A  26E5  120A  158A  	fcall	_write_char
  2882                           
  2883                           ;Button_src.c: 112:                         write_char('D');
  2884  0F31  3044               	movlw	68
  2885  0F32  160A  118A  26E5  120A  158A  	fcall	_write_char
  2886                           
  2887                           ;Button_src.c: 113:                         for(int i=0;i<30000;i++);
  2888  0F37  01E4               	clrf	thermometer_threshhold_settings@i
  2889  0F38  01E5               	clrf	thermometer_threshhold_settings@i+1
  2890  0F39                     l3437:	
  2891  0F39  3001               	movlw	1
  2892  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0F3C  07E4               	addwf	thermometer_threshhold_settings@i,f
  2895  0F3D  1803               	skipnc
  2896  0F3E  0AE5               	incf	thermometer_threshhold_settings@i+1,f
  2897  0F3F  3000               	movlw	0
  2898  0F40  07E5               	addwf	thermometer_threshhold_settings@i+1,f
  2899  0F41  0865               	movf	thermometer_threshhold_settings@i+1,w
  2900  0F42  3A80               	xorlw	128
  2901  0F43  00FF               	movwf	127
  2902  0F44  30F5               	movlw	245
  2903  0F45  027F               	subwf	127,w
  2904  0F46  1D03               	skipz
  2905  0F47  2F4A               	goto	u2055
  2906  0F48  3030               	movlw	48
  2907  0F49  0264               	subwf	thermometer_threshhold_settings@i,w
  2908  0F4A                     u2055:	
  2909  0F4A  1803               	btfsc	3,0
  2910  0F4B  0008               	return
  2911  0F4C  2F39               	goto	l3437
  2912  0F4D                     l554:	
  2913                           ;Button_src.c: 115:                     }
  2914                           
  2915                           
  2916                           ;Button_src.c: 116:                  RC0 = 1;
  2917  0F4D  1407               	bsf	7,0	;volatile
  2918                           
  2919                           ;Button_src.c: 117:                  RC1 = 1;
  2920  0F4E  1487               	bsf	7,1	;volatile
  2921                           
  2922                           ;Button_src.c: 118:                  RC2 = 0;
  2923  0F4F  1107               	bcf	7,2	;volatile
  2924                           
  2925                           ;Button_src.c: 119:                  RC3 = 1;
  2926  0F50  1587               	bsf	7,3	;volatile
  2927                           
  2928                           ;Button_src.c: 121:                  if(RC7 == 0){
  2929  0F51  1B87               	btfsc	7,7	;volatile
  2930  0F52  2FBD               	goto	l3461
  2931                           
  2932                           ;Button_src.c: 122:                     write_cmd(0x98);
  2933  0F53  3098               	movlw	152
  2934  0F54  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2935                           
  2936                           ;Button_src.c: 123:                       t--;
  2937  0F59  3001               	movlw	1
  2938  0F5A  02C1               	subwf	_t,f
  2939  0F5B  3000               	movlw	0
  2940  0F5C  1C03               	skipc
  2941  0F5D  03C2               	decf	_t+1,f
  2942  0F5E  02C2               	subwf	_t+1,f
  2943                           
  2944                           ;Button_src.c: 124:                     w = (unsigned char )w;
  2945  0F5F  083F               	movf	_w,w
  2946  0F60  00E1               	movwf	??_thermometer_threshhold_settings
  2947  0F61  01E2               	clrf	??_thermometer_threshhold_settings+1
  2948  0F62  0861               	movf	??_thermometer_threshhold_settings,w
  2949  0F63  00BF               	movwf	_w
  2950  0F64  0862               	movf	??_thermometer_threshhold_settings+1,w
  2951  0F65  00C0               	movwf	_w+1
  2952                           
  2953                           ;Button_src.c: 125:                     t = (unsigned char )(modulus_func(t,10));
  2954  0F66  0842               	movf	_t+1,w
  2955  0F67  00F8               	movwf	modulus_func@x+1
  2956  0F68  0841               	movf	_t,w
  2957  0F69  00F7               	movwf	modulus_func@x
  2958  0F6A  300A               	movlw	10
  2959  0F6B  00F9               	movwf	modulus_func@y
  2960  0F6C  3000               	movlw	0
  2961  0F6D  00FA               	movwf	modulus_func@y+1
  2962  0F6E  160A  118A  2672  120A  158A  	fcall	_modulus_func
  2963  0F73  0877               	movf	?_modulus_func,w
  2964  0F74  00E1               	movwf	??_thermometer_threshhold_settings
  2965  0F75  01E2               	clrf	??_thermometer_threshhold_settings+1
  2966  0F76  0861               	movf	??_thermometer_threshhold_settings,w
  2967  0F77  00C1               	movwf	_t
  2968  0F78  0862               	movf	??_thermometer_threshhold_settings+1,w
  2969  0F79  00C2               	movwf	_t+1
  2970                           
  2971                           ;Button_src.c: 126:                     write_char(w + '0');
  2972  0F7A  083F               	movf	_w,w
  2973  0F7B  3E30               	addlw	48
  2974  0F7C  160A  118A  26E5  120A  158A  	fcall	_write_char
  2975                           
  2976                           ;Button_src.c: 127:                     write_char(t + '0');
  2977  0F81  0841               	movf	_t,w
  2978  0F82  3E30               	addlw	48
  2979  0F83  160A  118A  26E5  120A  158A  	fcall	_write_char
  2980                           
  2981                           ;Button_src.c: 128:                     w = decrementor(w,t,'0');
  2982  0F88  0840               	movf	_w+1,w
  2983  0F89  00DD               	movwf	decrementor@lower_val+1
  2984  0F8A  083F               	movf	_w,w
  2985  0F8B  00DC               	movwf	decrementor@lower_val
  2986  0F8C  0842               	movf	_t+1,w
  2987  0F8D  00DF               	movwf	decrementor@upper_val+1
  2988  0F8E  0841               	movf	_t,w
  2989  0F8F  00DE               	movwf	decrementor@upper_val
  2990  0F90  3030               	movlw	48
  2991  0F91  00E1               	movwf	??_thermometer_threshhold_settings
  2992  0F92  0861               	movf	??_thermometer_threshhold_settings,w
  2993  0F93  00E0               	movwf	decrementor@z
  2994  0F94  160A  118A  27DC  120A  158A  	fcall	_decrementor
  2995  0F99  00E2               	movwf	??_thermometer_threshhold_settings+1
  2996  0F9A  01E3               	clrf	??_thermometer_threshhold_settings+2
  2997  0F9B  0862               	movf	??_thermometer_threshhold_settings+1,w
  2998  0F9C  00BF               	movwf	_w
  2999  0F9D  0863               	movf	??_thermometer_threshhold_settings+2,w
  3000  0F9E  00C0               	movwf	_w+1
  3001                           
  3002                           ;Button_src.c: 129:                     if((t + '0')=='0'){
  3003  0F9F  0841               	movf	_t,w
  3004  0FA0  3E30               	addlw	48
  3005  0FA1  00E1               	movwf	??_thermometer_threshhold_settings
  3006  0FA2  0842               	movf	_t+1,w
  3007  0FA3  1803               	skipnc
  3008  0FA4  3E01               	addlw	1
  3009  0FA5  3E00               	addlw	0
  3010  0FA6  00E2               	movwf	??_thermometer_threshhold_settings+1
  3011  0FA7  3030               	movlw	48
  3012  0FA8  0661               	xorwf	??_thermometer_threshhold_settings,w
  3013  0FA9  0462               	iorwf	??_thermometer_threshhold_settings+1,w
  3014  0FAA  1D03               	btfss	3,2
  3015  0FAB  2FB0               	goto	l559
  3016                           
  3017                           ;Button_src.c: 130:                         t = 10;
  3018  0FAC  300A               	movlw	10
  3019  0FAD  00C1               	movwf	_t
  3020  0FAE  3000               	movlw	0
  3021  0FAF  00C2               	movwf	_t+1
  3022  0FB0                     l559:	
  3023                           ;Button_src.c: 131:                     }
  3024                           
  3025                           
  3026                           ;Button_src.c: 133:                     x = t;
  3027  0FB0  0842               	movf	_t+1,w
  3028  0FB1  00BE               	movwf	_x+1
  3029  0FB2  0841               	movf	_t,w
  3030  0FB3  00BD               	movwf	_x
  3031                           
  3032                           ;Button_src.c: 134:                     y = w;
  3033  0FB4  0840               	movf	_w+1,w
  3034  0FB5  00BC               	movwf	_y+1
  3035  0FB6  083F               	movf	_w,w
  3036  0FB7  00BB               	movwf	_y
  3037                           
  3038                           ;Button_src.c: 135:                     button_delay();
  3039  0FB8  160A  118A  2693  120A  158A  	fcall	_button_delay
  3040  0FBD                     l3461:	
  3041                           
  3042                           ;Button_src.c: 137:                 RC0 = 0;
  3043  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0FBF  1007               	bcf	7,0	;volatile
  3046                           
  3047                           ;Button_src.c: 138:                 RC1 = 1;
  3048  0FC0  1487               	bsf	7,1	;volatile
  3049                           
  3050                           ;Button_src.c: 139:                 RC2 = 1;
  3051  0FC1  1507               	bsf	7,2	;volatile
  3052                           
  3053                           ;Button_src.c: 140:                 RC3 = 1;
  3054  0FC2  1587               	bsf	7,3	;volatile
  3055                           
  3056                           ;Button_src.c: 141:                     if(RC6 == 0){
  3057  0FC3  1B07               	btfsc	7,6	;volatile
  3058  0FC4  2FF5               	goto	l560
  3059                           
  3060                           ;Button_src.c: 142:                         var1 = w;
  3061  0FC5  083F               	movf	_w,w
  3062  0FC6  00E1               	movwf	??_thermometer_threshhold_settings
  3063  0FC7  0861               	movf	??_thermometer_threshhold_settings,w
  3064  0FC8  00C7               	movwf	_var1
  3065                           
  3066                           ;Button_src.c: 143:                         var2 = t;
  3067  0FC9  0841               	movf	_t,w
  3068  0FCA  00E1               	movwf	??_thermometer_threshhold_settings
  3069  0FCB  0861               	movf	??_thermometer_threshhold_settings,w
  3070  0FCC  00C6               	movwf	_var2
  3071                           
  3072                           ;Button_src.c: 145:                         write_cmd(0x1);
  3073  0FCD  3001               	movlw	1
  3074  0FCE  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  3075                           
  3076                           ;Button_src.c: 146:                         write_char('S');
  3077  0FD3  3053               	movlw	83
  3078  0FD4  160A  118A  26E5  120A  158A  	fcall	_write_char
  3079                           
  3080                           ;Button_src.c: 147:                         write_char('A');
  3081  0FD9  3041               	movlw	65
  3082  0FDA  160A  118A  26E5  120A  158A  	fcall	_write_char
  3083                           
  3084                           ;Button_src.c: 148:                         write_char('V');
  3085  0FDF  3056               	movlw	86
  3086  0FE0  160A  118A  26E5  120A  158A  	fcall	_write_char
  3087                           
  3088                           ;Button_src.c: 149:                         write_char('E');
  3089  0FE5  3045               	movlw	69
  3090  0FE6  160A  118A  26E5  120A  158A  	fcall	_write_char
  3091                           
  3092                           ;Button_src.c: 150:                         write_char('D');
  3093  0FEB  3044               	movlw	68
  3094  0FEC  160A  118A  26E5  120A  158A  	fcall	_write_char
  3095                           
  3096                           ;Button_src.c: 151:                         button_delay();
  3097  0FF1  160A  118A  2693   	fcall	_button_delay
  3098  0FF4  0008               	return
  3099  0FF5                     l560:	
  3100                           ;Button_src.c: 153:                     }
  3101                           
  3102                           
  3103                           ;Button_src.c: 154:             RC0 = 0;
  3104  0FF5  1007               	bcf	7,0	;volatile
  3105                           
  3106                           ;Button_src.c: 155:             RC1 = 1;
  3107  0FF6  1487               	bsf	7,1	;volatile
  3108                           
  3109                           ;Button_src.c: 156:             RC2 = 1;
  3110  0FF7  1507               	bsf	7,2	;volatile
  3111                           
  3112                           ;Button_src.c: 157:             RC3 = 1;
  3113  0FF8  1587               	bsf	7,3	;volatile
  3114                           
  3115                           ;Button_src.c: 158:             if (RC7 == 0 ){
  3116  0FF9  1B87               	btfsc	7,7	;volatile
  3117  0FFA  2EA4               	goto	l3379
  3118                           
  3119                           ;Button_src.c: 159:             write_cmd(0x1);
  3120  0FFB  3001               	movlw	1
  3121  0FFC  160A  118A  26FC   	fcall	_write_cmd
  3122  0FFF  0008               	return
  3123  1000                     __end_of_thermometer_threshhold_settings:	
  3124                           
  3125                           	psect	text3
  3126  17DC                     __ptext3:	
  3127 ;; *************** function _decrementor *****************
  3128 ;; Defined at:
  3129 ;;		line 19 in file "math_src.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  lower_val       2    0[BANK0 ] int 
  3132 ;;  upper_val       2    2[BANK0 ] int 
  3133 ;;  z               1    4[BANK0 ] unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;		None
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      unsigned char 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0, pclath, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 300/0
  3142 ;;		On exit  : 300/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3145 ;;      Params:         0       5       0       0       0
  3146 ;;      Locals:         0       0       0       0       0
  3147 ;;      Temps:          2       0       0       0       0
  3148 ;;      Totals:         2       5       0       0       0
  3149 ;;Total ram usage:        7 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    2
  3152 ;; This function calls:
  3153 ;;		_modulus_func
  3154 ;; This function is called by:
  3155 ;;		_thermometer_threshhold_settings
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _decrementor
  3161  17DC                     _decrementor:	
  3162                           
  3163                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3167  17DC  085E               	movf	decrementor@upper_val,w
  3168  17DD  3E30               	addlw	48
  3169  17DE  00FB               	movwf	??_decrementor
  3170  17DF  085F               	movf	decrementor@upper_val+1,w
  3171  17E0  1803               	skipnc
  3172  17E1  3E01               	addlw	1
  3173  17E2  3E00               	addlw	0
  3174  17E3  00FC               	movwf	??_decrementor+1
  3175  17E4  0860               	movf	decrementor@z,w
  3176  17E5  067B               	xorwf	??_decrementor,w
  3177  17E6  047C               	iorwf	??_decrementor+1,w
  3178  17E7  1D03               	skipz
  3179  17E8  2FFE               	goto	l3043
  3180                           
  3181                           ;math_src.c: 21:         lower_val--;
  3182  17E9  30FF               	movlw	255
  3183  17EA  07DC               	addwf	decrementor@lower_val,f
  3184  17EB  1803               	skipnc
  3185  17EC  0ADD               	incf	decrementor@lower_val+1,f
  3186  17ED  30FF               	movlw	255
  3187  17EE  07DD               	addwf	decrementor@lower_val+1,f
  3188                           
  3189                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3190  17EF  085D               	movf	decrementor@lower_val+1,w
  3191  17F0  00F8               	movwf	modulus_func@x+1
  3192  17F1  085C               	movf	decrementor@lower_val,w
  3193  17F2  00F7               	movwf	modulus_func@x
  3194  17F3  300A               	movlw	10
  3195  17F4  00F9               	movwf	modulus_func@y
  3196  17F5  3000               	movlw	0
  3197  17F6  00FA               	movwf	modulus_func@y+1
  3198  17F7  160A  118A  2672   	fcall	_modulus_func
  3199  17FA  0878               	movf	?_modulus_func+1,w
  3200  17FB  00DD               	movwf	decrementor@lower_val+1
  3201  17FC  0877               	movf	?_modulus_func,w
  3202  17FD  00DC               	movwf	decrementor@lower_val
  3203  17FE                     l3043:	
  3204                           
  3205                           ;math_src.c: 24:      return lower_val;
  3206  17FE  085C               	movf	decrementor@lower_val,w
  3207  17FF  0008               	return
  3208  1800                     __end_of_decrementor:	
  3209                           
  3210                           	psect	text4
  3211  0995                     __ptext4:	
  3212 ;; *************** function _set_upper_threshold *****************
  3213 ;; Defined at:
  3214 ;;		line 4 in file "threshold_src.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  upper_val       2    3[COMMON] int 
  3217 ;;  lower_val       2    5[COMMON] int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 300/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         4       0       0       0       0
  3230 ;;      Locals:         0       0       0       0       0
  3231 ;;      Temps:          2       0       0       0       0
  3232 ;;      Totals:         6       0       0       0       0
  3233 ;;Total ram usage:        6 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    2
  3236 ;; This function calls:
  3237 ;;		_write_char
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _set_upper_threshold
  3245  0995                     _set_upper_threshold:	
  3246                           
  3247                           ;threshold_src.c: 5:     if(shi == upper_val && ge > lower_val && count == 2){
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3251  0995  0857               	movf	_shi,w
  3252  0996  00F7               	movwf	??_set_upper_threshold
  3253  0997  01F8               	clrf	??_set_upper_threshold+1
  3254  0998  0874               	movf	set_upper_threshold@upper_val+1,w
  3255  0999  0678               	xorwf	??_set_upper_threshold+1,w
  3256  099A  1D03               	skipz
  3257  099B  299E               	goto	u2715
  3258  099C  0873               	movf	set_upper_threshold@upper_val,w
  3259  099D  0677               	xorwf	??_set_upper_threshold,w
  3260  099E                     u2715:	
  3261  099E  1D03               	skipz
  3262  099F  0008               	return
  3263  09A0  0876               	movf	set_upper_threshold@lower_val+1,w
  3264  09A1  3A80               	xorlw	128
  3265  09A2  00F7               	movwf	??_set_upper_threshold
  3266  09A3  3080               	movlw	128
  3267  09A4  0277               	subwf	??_set_upper_threshold,w
  3268  09A5  1D03               	skipz
  3269  09A6  29A9               	goto	u2725
  3270  09A7  0856               	movf	_ge,w
  3271  09A8  0275               	subwf	set_upper_threshold@lower_val,w
  3272  09A9                     u2725:	
  3273  09A9  1803               	skipnc
  3274  09AA  0008               	return
  3275  09AB  3002               	movlw	2
  3276  09AC  1283               	bcf	3,5	;RP0=0, select bank0
  3277  09AD  1303               	bcf	3,6	;RP1=0, select bank0
  3278  09AE  0629               	xorwf	_count,w
  3279  09AF  042A               	iorwf	_count+1,w
  3280  09B0  1D03               	btfss	3,2
  3281  09B1  0008               	return
  3282                           
  3283                           ;threshold_src.c: 6:     buzzer_watcher = 'w';
  3284  09B2  3077               	movlw	119
  3285  09B3  00F7               	movwf	??_set_upper_threshold
  3286  09B4  0877               	movf	??_set_upper_threshold,w
  3287  09B5  00C9               	movwf	_buzzer_watcher
  3288                           
  3289                           ;threshold_src.c: 7:     write_char('W');
  3290  09B6  3057               	movlw	87
  3291  09B7  160A  118A  26E5  120A  158A  	fcall	_write_char
  3292                           
  3293                           ;threshold_src.c: 8:     write_char('A');
  3294  09BC  3041               	movlw	65
  3295  09BD  160A  118A  26E5  120A  158A  	fcall	_write_char
  3296                           
  3297                           ;threshold_src.c: 9:     write_char('R');
  3298  09C2  3052               	movlw	82
  3299  09C3  160A  118A  26E5  120A  158A  	fcall	_write_char
  3300                           
  3301                           ;threshold_src.c: 10:     write_char('M');
  3302  09C8  304D               	movlw	77
  3303  09C9  160A  118A  26E5   	fcall	_write_char
  3304  09CC  0008               	return
  3305  09CD                     __end_of_set_upper_threshold:	
  3306                           
  3307                           	psect	text5
  3308  0007                     __ptext5:	
  3309 ;; *************** function _set_lower_threshold *****************
  3310 ;; Defined at:
  3311 ;;		line 14 in file "threshold_src.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  upper_val       2    3[COMMON] int 
  3314 ;;  lower_val       2    5[COMMON] int 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 300/0
  3323 ;;		On exit  : 300/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         4       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0
  3328 ;;      Temps:          2       0       0       0       0
  3329 ;;      Totals:         6       0       0       0       0
  3330 ;;Total ram usage:        6 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    2
  3333 ;; This function calls:
  3334 ;;		_write_char
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _set_lower_threshold
  3342  0007                     _set_lower_threshold:	
  3343                           
  3344                           ;threshold_src.c: 15:     if((shi == upper_val && ge <= lower_val)|| ge == lower_val)
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3348  0007  0857               	movf	_shi,w
  3349  0008  00F7               	movwf	??_set_lower_threshold
  3350  0009  01F8               	clrf	??_set_lower_threshold+1
  3351  000A  0874               	movf	set_lower_threshold@upper_val+1,w
  3352  000B  0678               	xorwf	??_set_lower_threshold+1,w
  3353  000C  1D03               	skipz
  3354  000D  2810               	goto	u2685
  3355  000E  0873               	movf	set_lower_threshold@upper_val,w
  3356  000F  0677               	xorwf	??_set_lower_threshold,w
  3357  0010                     u2685:	
  3358  0010  1D03               	skipz
  3359  0011  281D               	goto	l3955
  3360  0012  0876               	movf	set_lower_threshold@lower_val+1,w
  3361  0013  3A80               	xorlw	128
  3362  0014  00F7               	movwf	??_set_lower_threshold
  3363  0015  3080               	movlw	128
  3364  0016  0277               	subwf	??_set_lower_threshold,w
  3365  0017  1D03               	skipz
  3366  0018  281B               	goto	u2695
  3367  0019  0856               	movf	_ge,w
  3368  001A  0275               	subwf	set_lower_threshold@lower_val,w
  3369  001B                     u2695:	
  3370  001B  1803               	skipnc
  3371  001C  282A               	goto	l3957
  3372  001D                     l3955:	
  3373  001D  1283               	bcf	3,5	;RP0=0, select bank0
  3374  001E  1303               	bcf	3,6	;RP1=0, select bank0
  3375  001F  0856               	movf	_ge,w
  3376  0020  00F7               	movwf	??_set_lower_threshold
  3377  0021  01F8               	clrf	??_set_lower_threshold+1
  3378  0022  0876               	movf	set_lower_threshold@lower_val+1,w
  3379  0023  0678               	xorwf	??_set_lower_threshold+1,w
  3380  0024  1D03               	skipz
  3381  0025  2828               	goto	u2705
  3382  0026  0875               	movf	set_lower_threshold@lower_val,w
  3383  0027  0677               	xorwf	??_set_lower_threshold,w
  3384  0028                     u2705:	
  3385  0028  1D03               	skipz
  3386  0029  0008               	return
  3387  002A                     l3957:	
  3388                           
  3389                           ;threshold_src.c: 16:     {;threshold_src.c: 17:     count = 2;
  3390  002A  3002               	movlw	2
  3391  002B  1283               	bcf	3,5	;RP0=0, select bank0
  3392  002C  1303               	bcf	3,6	;RP1=0, select bank0
  3393  002D  00A9               	movwf	_count
  3394  002E  3000               	movlw	0
  3395  002F  00AA               	movwf	_count+1
  3396                           
  3397                           ;threshold_src.c: 18:     buzzer_watcher = 'x';
  3398  0030  3078               	movlw	120
  3399  0031  00F7               	movwf	??_set_lower_threshold
  3400  0032  0877               	movf	??_set_lower_threshold,w
  3401  0033  00C9               	movwf	_buzzer_watcher
  3402                           
  3403                           ;threshold_src.c: 19:     write_char('O');
  3404  0034  304F               	movlw	79
  3405  0035  160A  118A  26E5  120A  118A  	fcall	_write_char
  3406                           
  3407                           ;threshold_src.c: 20:     write_char('K');
  3408  003A  304B               	movlw	75
  3409  003B  160A  118A  26E5  120A  118A  	fcall	_write_char
  3410                           
  3411                           ;threshold_src.c: 21:     write_char(' ');
  3412  0040  3020               	movlw	32
  3413  0041  160A  118A  26E5  120A  118A  	fcall	_write_char
  3414                           
  3415                           ;threshold_src.c: 22:     write_char(' ');
  3416  0046  3020               	movlw	32
  3417  0047  160A  118A  26E5   	fcall	_write_char
  3418  004A  0008               	return
  3419  004B                     __end_of_set_lower_threshold:	
  3420                           
  3421                           	psect	text6
  3422  1713                     __ptext6:	
  3423 ;; *************** function _set_beep_threshhold *****************
  3424 ;; Defined at:
  3425 ;;		line 5 in file "buzzer_src.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  x               1    wreg     unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  x               1    2[COMMON] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 300/0
  3436 ;;		On exit  : 300/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3439 ;;      Params:         0       0       0       0       0
  3440 ;;      Locals:         1       0       0       0       0
  3441 ;;      Temps:          0       0       0       0       0
  3442 ;;      Totals:         1       0       0       0       0
  3443 ;;Total ram usage:        1 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    1
  3446 ;; This function calls:
  3447 ;;		_button_delay
  3448 ;; This function is called by:
  3449 ;;		_main
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _set_beep_threshhold
  3455  1713                     _set_beep_threshhold:	
  3456                           
  3457                           ;incstack = 0
  3458                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3459                           ;set_beep_threshhold@x stored from wreg
  3460  1713  00F2               	movwf	set_beep_threshhold@x
  3461                           
  3462                           ;buzzer_src.c: 6:     if (x == 'w'){
  3463  1714  3077               	movlw	119
  3464  1715  0672               	xorwf	set_beep_threshhold@x,w
  3465  1716  1D03               	btfss	3,2
  3466  1717  2F2C               	goto	l3993
  3467                           
  3468                           ;buzzer_src.c: 7:         RE2 = 1;
  3469  1718  1509               	bsf	9,2	;volatile
  3470                           
  3471                           ;buzzer_src.c: 8:         button_delay();
  3472  1719  160A  118A  2693  160A  118A  	fcall	_button_delay
  3473                           
  3474                           ;buzzer_src.c: 9:         RE2 = 0;
  3475  171E  1283               	bcf	3,5	;RP0=0, select bank0
  3476  171F  1303               	bcf	3,6	;RP1=0, select bank0
  3477  1720  1109               	bcf	9,2	;volatile
  3478                           
  3479                           ;buzzer_src.c: 10:         button_delay();
  3480  1721  160A  118A  2693  160A  118A  	fcall	_button_delay
  3481                           
  3482                           ;buzzer_src.c: 11:         RE2 = 1;
  3483  1726  1283               	bcf	3,5	;RP0=0, select bank0
  3484  1727  1303               	bcf	3,6	;RP1=0, select bank0
  3485  1728  1509               	bsf	9,2	;volatile
  3486                           
  3487                           ;buzzer_src.c: 12:         button_delay();
  3488  1729  160A  118A  2693   	fcall	_button_delay
  3489  172C                     l3993:	
  3490                           
  3491                           ;buzzer_src.c: 13:         RE2 = 0;
  3492  172C  1283               	bcf	3,5	;RP0=0, select bank0
  3493  172D  1303               	bcf	3,6	;RP1=0, select bank0
  3494  172E  1109               	bcf	9,2	;volatile
  3495  172F  0008               	return
  3496  1730                     __end_of_set_beep_threshhold:	
  3497                           
  3498                           	psect	text7
  3499  1639                     __ptext7:	
  3500 ;; *************** function _reset_alarm *****************
  3501 ;; Defined at:
  3502 ;;		line 26 in file "threshold_src.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      void 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2
  3511 ;; Tracked objects:
  3512 ;;		On entry : 300/0
  3513 ;;		On exit  : 300/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3516 ;;      Params:         0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0
  3518 ;;      Temps:          1       0       0       0       0
  3519 ;;      Totals:         1       0       0       0       0
  3520 ;;Total ram usage:        1 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_main
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _reset_alarm
  3531  1639                     _reset_alarm:	
  3532                           
  3533                           ;threshold_src.c: 27:     RC0 = 1;
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in _reset_alarm: [wreg+status,2]
  3537  1639  1407               	bsf	7,0	;volatile
  3538                           
  3539                           ;threshold_src.c: 28:     RC1 = 1;
  3540  163A  1487               	bsf	7,1	;volatile
  3541                           
  3542                           ;threshold_src.c: 29:     RC2 = 1;
  3543  163B  1507               	bsf	7,2	;volatile
  3544                           
  3545                           ;threshold_src.c: 30:     RC3 = 0;
  3546  163C  1187               	bcf	7,3	;volatile
  3547                           
  3548                           ;threshold_src.c: 31:     if(RC4 == 0){
  3549  163D  1A07               	btfsc	7,4	;volatile
  3550  163E  0008               	return
  3551                           
  3552                           ;threshold_src.c: 32:         count = 0;
  3553  163F  01A9               	clrf	_count
  3554  1640  01AA               	clrf	_count+1
  3555                           
  3556                           ;threshold_src.c: 33:         buzzer_watcher = 'x';
  3557  1641  3078               	movlw	120
  3558  1642  00F0               	movwf	??_reset_alarm
  3559  1643  0870               	movf	??_reset_alarm,w
  3560  1644  00C9               	movwf	_buzzer_watcher
  3561  1645  0008               	return
  3562  1646                     __end_of_reset_alarm:	
  3563                           
  3564                           	psect	text8
  3565  1795                     __ptext8:	
  3566 ;; *************** function _lcd_init *****************
  3567 ;; Defined at:
  3568 ;;		line 14 in file "LCD_src.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  i               2    0        int 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 300/100
  3579 ;;		On exit  : 300/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3582 ;;      Params:         0       0       0       0       0
  3583 ;;      Locals:         0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0
  3585 ;;      Totals:         0       0       0       0       0
  3586 ;;Total ram usage:        0 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    2
  3589 ;; This function calls:
  3590 ;;		_delay_screen
  3591 ;;		_write_cmd
  3592 ;; This function is called by:
  3593 ;;		_main
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _lcd_init
  3599  1795                     _lcd_init:	
  3600                           
  3601                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3605  1795  0185               	clrf	5	;volatile
  3606                           
  3607                           ;LCD_src.c: 18:  RA0=0;
  3608  1796  1283               	bcf	3,5	;RP0=0, select bank0
  3609  1797  1005               	bcf	5,0	;volatile
  3610                           
  3611                           ;LCD_src.c: 19:  delay_screen();
  3612  1798  160A  118A  26A7  160A  118A  	fcall	_delay_screen
  3613                           
  3614                           ;LCD_src.c: 20:  RA0=1;
  3615  179D  1283               	bcf	3,5	;RP0=0, select bank0
  3616  179E  1303               	bcf	3,6	;RP1=0, select bank0
  3617  179F  1405               	bsf	5,0	;volatile
  3618                           
  3619                           ;LCD_src.c: 21:  RA2=1;
  3620  17A0  1505               	bsf	5,2	;volatile
  3621                           
  3622                           ;LCD_src.c: 22:  write_cmd(0x30);
  3623  17A1  3030               	movlw	48
  3624  17A2  160A  118A  26FC  160A  118A  	fcall	_write_cmd
  3625                           
  3626                           ;LCD_src.c: 23:  write_cmd(0x01);
  3627  17A7  3001               	movlw	1
  3628  17A8  160A  118A  26FC  160A  118A  	fcall	_write_cmd
  3629                           
  3630                           ;LCD_src.c: 24:  write_cmd(0x06);
  3631  17AD  3006               	movlw	6
  3632  17AE  160A  118A  26FC  160A  118A  	fcall	_write_cmd
  3633                           
  3634                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3635  17B3  300C               	movlw	12
  3636  17B4  160A  118A  26FC   	fcall	_write_cmd
  3637  17B7  0008               	return
  3638  17B8                     __end_of_lcd_init:	
  3639                           
  3640                           	psect	text9
  3641  16CF                     __ptext9:	
  3642 ;; *************** function _initialise_buttons *****************
  3643 ;; Defined at:
  3644 ;;		line 11 in file "Button_src.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2
  3653 ;; Tracked objects:
  3654 ;;		On entry : 300/0
  3655 ;;		On exit  : 300/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_main
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _initialise_buttons
  3673  16CF                     _initialise_buttons:	
  3674                           
  3675                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3679  16CF  3006               	movlw	6
  3680  16D0  1683               	bsf	3,5	;RP0=1, select bank1
  3681  16D1  009F               	movwf	31	;volatile
  3682                           
  3683                           ;Button_src.c: 13:     TRISC = 0xf0;
  3684  16D2  30F0               	movlw	240
  3685  16D3  0087               	movwf	7	;volatile
  3686                           
  3687                           ;Button_src.c: 14:     a = 0x00;
  3688  16D4  1283               	bcf	3,5	;RP0=0, select bank0
  3689  16D5  01D1               	clrf	_a
  3690                           
  3691                           ;Button_src.c: 15:     b = 0x00;
  3692  16D6  01D0               	clrf	_b
  3693                           
  3694                           ;Button_src.c: 16:     c = 0x00;
  3695  16D7  01CF               	clrf	_c
  3696                           
  3697                           ;Button_src.c: 17:     z = 0;
  3698  16D8  01B9               	clrf	_z
  3699  16D9  01BA               	clrf	_z+1
  3700                           
  3701                           ;Button_src.c: 18:     day_low = 12;
  3702  16DA  300C               	movlw	12
  3703  16DB  00B7               	movwf	_day_low
  3704  16DC  3000               	movlw	0
  3705  16DD  00B8               	movwf	_day_low+1
  3706                           
  3707                           ;Button_src.c: 19:     stats = 1;
  3708  16DE  3001               	movlw	1
  3709  16DF  00B1               	movwf	_stats
  3710  16E0  3000               	movlw	0
  3711  16E1  00B2               	movwf	_stats+1
  3712                           
  3713                           ;Button_src.c: 20:     p = 0;
  3714  16E2  01AF               	clrf	_p
  3715  16E3  01B0               	clrf	_p+1
  3716  16E4  0008               	return
  3717  16E5                     __end_of_initialise_buttons:	
  3718                           
  3719                           	psect	text10
  3720  161C                     __ptext10:	
  3721 ;; *************** function _init_temp *****************
  3722 ;; Defined at:
  3723 ;;		line 6 in file "Thermometer_src.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		status,2
  3732 ;; Tracked objects:
  3733 ;;		On entry : 200/100
  3734 ;;		On exit  : 300/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3737 ;;      Params:         0       0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0
  3740 ;;      Totals:         0       0       0       0       0
  3741 ;;Total ram usage:        0 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_main
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _init_temp
  3752  161C                     _init_temp:	
  3753                           
  3754                           ;Thermometer_src.c: 8:     TRISE=0X00;
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _init_temp: [status,2]
  3758  161C  1683               	bsf	3,5	;RP0=1, select bank1
  3759  161D  0189               	clrf	9	;volatile
  3760                           
  3761                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  3762  161E  1283               	bcf	3,5	;RP0=0, select bank0
  3763  161F  0189               	clrf	9	;volatile
  3764  1620  0008               	return
  3765  1621                     __end_of_init_temp:	
  3766                           
  3767                           	psect	text11
  3768  1621                     __ptext11:	
  3769 ;; *************** function _init *****************
  3770 ;; Defined at:
  3771 ;;		line 5 in file "LCD_src.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2
  3780 ;; Tracked objects:
  3781 ;;		On entry : 300/0
  3782 ;;		On exit  : 300/100
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3785 ;;      Params:         0       0       0       0       0
  3786 ;;      Locals:         0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0
  3788 ;;      Totals:         0       0       0       0       0
  3789 ;;Total ram usage:        0 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; This function calls:
  3792 ;;		Nothing
  3793 ;; This function is called by:
  3794 ;;		_main
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           
  3799                           ;psect for function _init
  3800  1621                     _init:	
  3801                           
  3802                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  3803                           
  3804                           ;incstack = 0
  3805                           ; Regs used in _init: [wreg+status,2]
  3806  1621  3007               	movlw	7
  3807  1622  1683               	bsf	3,5	;RP0=1, select bank1
  3808  1623  009F               	movwf	31	;volatile
  3809                           
  3810                           ;LCD_src.c: 8:  TRISA0=1;
  3811  1624  1405               	bsf	5,0	;volatile
  3812                           
  3813                           ;LCD_src.c: 9:  TRISD=0X00;
  3814  1625  0188               	clrf	8	;volatile
  3815                           
  3816                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  3817  1626  0181               	clrf	1	;volatile
  3818                           
  3819                           ;LCD_src.c: 11:  TRISE = 0X00;
  3820  1627  0189               	clrf	9	;volatile
  3821  1628  0008               	return
  3822  1629                     __end_of_init:	
  3823                           
  3824                           	psect	text12
  3825  0869                     __ptext12:	
  3826 ;; *************** function _get_time *****************
  3827 ;; Defined at:
  3828 ;;		line 26 in file "clock_src.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  i               2    6[COMMON] int 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 300/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3842 ;;      Params:         0       0       0       0       0
  3843 ;;      Locals:         2       0       0       0       0
  3844 ;;      Temps:          1       0       0       0       0
  3845 ;;      Totals:         3       0       0       0       0
  3846 ;;Total ram usage:        3 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    1
  3849 ;; This function calls:
  3850 ;;		_time_read_1
  3851 ;;		_time_write_1
  3852 ;; This function is called by:
  3853 ;;		_main
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function _get_time
  3859  0869                     _get_time:	
  3860                           
  3861                           ;clock_src.c: 28:    int i;;clock_src.c: 29:    RB5=1;
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3865  0869  1283               	bcf	3,5	;RP0=0, select bank0
  3866  086A  1303               	bcf	3,6	;RP1=0, select bank0
  3867  086B  1686               	bsf	6,5	;volatile
  3868                           
  3869                           ;clock_src.c: 30:    time_write_1(0xbf);
  3870  086C  30BF               	movlw	191
  3871  086D  120A  158A  201B  120A  158A  	fcall	_time_write_1
  3872                           
  3873                           ;clock_src.c: 31:    for(i=0;i<7;i++)
  3874  0872  01F6               	clrf	get_time@i
  3875  0873  01F7               	clrf	get_time@i+1
  3876  0874                     l3273:	
  3877                           
  3878                           ;clock_src.c: 32:      {;clock_src.c: 33:         table1[i]=time_read_1();
  3879  0874  120A  158A  2095  120A  158A  	fcall	_time_read_1
  3880  0879  00F5               	movwf	??_get_time
  3881  087A  0876               	movf	get_time@i,w
  3882  087B  3E20               	addlw	(low (_table1| 0))& (0+255)
  3883  087C  0084               	movwf	4
  3884  087D  0875               	movf	??_get_time,w
  3885  087E  1383               	bcf	3,7	;select IRP bank0
  3886  087F  0080               	movwf	0
  3887                           
  3888                           ;clock_src.c: 34:      }
  3889  0880  3001               	movlw	1
  3890  0881  07F6               	addwf	get_time@i,f
  3891  0882  1803               	skipnc
  3892  0883  0AF7               	incf	get_time@i+1,f
  3893  0884  3000               	movlw	0
  3894  0885  07F7               	addwf	get_time@i+1,f
  3895  0886  0877               	movf	get_time@i+1,w
  3896  0887  3A80               	xorlw	128
  3897  0888  00FF               	movwf	127
  3898  0889  3080               	movlw	128
  3899  088A  027F               	subwf	127,w
  3900  088B  1D03               	skipz
  3901  088C  288F               	goto	u1995
  3902  088D  3007               	movlw	7
  3903  088E  0276               	subwf	get_time@i,w
  3904  088F                     u1995:	
  3905  088F  1C03               	skipc
  3906  0890  2874               	goto	l3273
  3907                           
  3908                           ;clock_src.c: 35:    RB5=0;
  3909  0891  1283               	bcf	3,5	;RP0=0, select bank0
  3910  0892  1303               	bcf	3,6	;RP1=0, select bank0
  3911  0893  1286               	bcf	6,5	;volatile
  3912  0894  0008               	return
  3913  0895                     __end_of_get_time:	
  3914                           
  3915                           	psect	text13
  3916  0895                     __ptext13:	
  3917 ;; *************** function _time_read_1 *****************
  3918 ;; Defined at:
  3919 ;;		line 132 in file "clock_src.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  j               2    2[COMMON] int 
  3924 ;;  time_rx         1    4[COMMON] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      unsigned char 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, btemp+1
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 300/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3934 ;;      Params:         0       0       0       0       0
  3935 ;;      Locals:         3       0       0       0       0
  3936 ;;      Temps:          2       0       0       0       0
  3937 ;;      Totals:         5       0       0       0       0
  3938 ;;Total ram usage:        5 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; This function calls:
  3941 ;;		Nothing
  3942 ;; This function is called by:
  3943 ;;		_get_time
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           
  3948                           ;psect for function _time_read_1
  3949  0895                     _time_read_1:	
  3950                           
  3951                           ;clock_src.c: 134:    unsigned char time_rx=0;
  3952                           
  3953                           ;incstack = 0
  3954                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  3955  0895  01F4               	clrf	time_read_1@time_rx
  3956                           
  3957                           ;clock_src.c: 135:    int j;;clock_src.c: 136:    TRISB4=1;
  3958  0896  1683               	bsf	3,5	;RP0=1, select bank1
  3959  0897  1303               	bcf	3,6	;RP1=0, select bank1
  3960  0898  1606               	bsf	6,4	;volatile
  3961                           
  3962                           ;clock_src.c: 137:    for(j=0;j<8;j++)
  3963  0899  01F2               	clrf	time_read_1@j
  3964  089A  01F3               	clrf	time_read_1@j+1
  3965  089B                     l360:	
  3966                           
  3967                           ;clock_src.c: 138:       {;clock_src.c: 139:         RB0=0;
  3968  089B  1283               	bcf	3,5	;RP0=0, select bank0
  3969  089C  1303               	bcf	3,6	;RP1=0, select bank0
  3970  089D  1006               	bcf	6,0	;volatile
  3971                           
  3972                           ;clock_src.c: 140:         time_rx=time_rx>>1;
  3973  089E  0874               	movf	time_read_1@time_rx,w
  3974  089F  00F0               	movwf	??_time_read_1
  3975  08A0  1003               	clrc
  3976  08A1  0C70               	rrf	??_time_read_1,w
  3977  08A2  00F1               	movwf	??_time_read_1+1
  3978  08A3  0871               	movf	??_time_read_1+1,w
  3979  08A4  00F4               	movwf	time_read_1@time_rx
  3980                           
  3981                           ;clock_src.c: 141:         if(RB4)time_rx=time_rx|0x80;
  3982  08A5  1E06               	btfss	6,4	;volatile
  3983  08A6  28AC               	goto	l3007
  3984  08A7  0874               	movf	time_read_1@time_rx,w
  3985  08A8  3880               	iorlw	128
  3986  08A9  00F0               	movwf	??_time_read_1
  3987  08AA  0870               	movf	??_time_read_1,w
  3988  08AB  00F4               	movwf	time_read_1@time_rx
  3989  08AC                     l3007:	
  3990                           
  3991                           ;clock_src.c: 143:        RB0=1;
  3992  08AC  1406               	bsf	6,0	;volatile
  3993                           
  3994                           ;clock_src.c: 144:       }
  3995  08AD  3001               	movlw	1
  3996  08AE  07F2               	addwf	time_read_1@j,f
  3997  08AF  1803               	skipnc
  3998  08B0  0AF3               	incf	time_read_1@j+1,f
  3999  08B1  3000               	movlw	0
  4000  08B2  07F3               	addwf	time_read_1@j+1,f
  4001  08B3  0873               	movf	time_read_1@j+1,w
  4002  08B4  3A80               	xorlw	128
  4003  08B5  00FF               	movwf	127
  4004  08B6  3080               	movlw	128
  4005  08B7  027F               	subwf	127,w
  4006  08B8  1D03               	skipz
  4007  08B9  28BC               	goto	u1665
  4008  08BA  3008               	movlw	8
  4009  08BB  0272               	subwf	time_read_1@j,w
  4010  08BC                     u1665:	
  4011  08BC  1C03               	skipc
  4012  08BD  289B               	goto	l360
  4013                           
  4014                           ;clock_src.c: 145:     TRISB4=0;
  4015  08BE  1683               	bsf	3,5	;RP0=1, select bank1
  4016  08BF  1303               	bcf	3,6	;RP1=0, select bank1
  4017  08C0  1206               	bcf	6,4	;volatile
  4018                           
  4019                           ;clock_src.c: 146:     RB0=0;
  4020  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  4021  08C2  1006               	bcf	6,0	;volatile
  4022                           
  4023                           ;clock_src.c: 147:     return(time_rx);
  4024  08C3  0874               	movf	time_read_1@time_rx,w
  4025  08C4  0008               	return
  4026  08C5                     __end_of_time_read_1:	
  4027                           
  4028                           	psect	text14
  4029  0B80                     __ptext14:	
  4030 ;; *************** function _get_temp *****************
  4031 ;; Defined at:
  4032 ;;		line 89 in file "Thermometer_src.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  i               2    0        int 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 300/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4046 ;;      Params:         0       0       0       0       0
  4047 ;;      Locals:         0       0       0       0       0
  4048 ;;      Temps:          0       4       0       0       0
  4049 ;;      Totals:         0       4       0       0       0
  4050 ;;Total ram usage:        4 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    2
  4053 ;; This function calls:
  4054 ;;		___lbdiv
  4055 ;;		___lbmod
  4056 ;;		___lwdiv
  4057 ;;		___lwmod
  4058 ;;		_delay2
  4059 ;;		_read_byte
  4060 ;;		_reset_temp
  4061 ;;		_write_byte
  4062 ;; This function is called by:
  4063 ;;		_main
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           
  4068                           ;psect for function _get_temp
  4069  0B80                     _get_temp:	
  4070                           
  4071                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4075  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  4076  0B81  1409               	bsf	9,0	;volatile
  4077                           
  4078                           ;Thermometer_src.c: 93: reset_temp();
  4079  0B82  120A  158A  212B  120A  158A  	fcall	_reset_temp
  4080                           
  4081                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4082  0B87  30CC               	movlw	204
  4083  0B88  120A  158A  215F  120A  158A  	fcall	_write_byte
  4084                           
  4085                           ;Thermometer_src.c: 95: delay2();
  4086  0B8D  160A  118A  26BB  120A  158A  	fcall	_delay2
  4087                           
  4088                           ;Thermometer_src.c: 96: write_byte(0X44);
  4089  0B92  3044               	movlw	68
  4090  0B93  120A  158A  215F  120A  158A  	fcall	_write_byte
  4091                           
  4092                           ;Thermometer_src.c: 98: reset_temp();
  4093  0B98  120A  158A  212B  120A  158A  	fcall	_reset_temp
  4094                           
  4095                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4096  0B9D  30CC               	movlw	204
  4097  0B9E  120A  158A  215F  120A  158A  	fcall	_write_byte
  4098                           
  4099                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4100  0BA3  30BE               	movlw	190
  4101  0BA4  120A  158A  215F  120A  158A  	fcall	_write_byte
  4102                           
  4103                           ;Thermometer_src.c: 101: TLV=read_byte();
  4104  0BA9  120A  158A  20F7  120A  158A  	fcall	_read_byte
  4105  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  4106  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  4107  0BB0  00DC               	movwf	??_get_temp
  4108  0BB1  085C               	movf	??_get_temp,w
  4109  0BB2  00DB               	movwf	_TLV
  4110                           
  4111                           ;Thermometer_src.c: 102: THV=read_byte();
  4112  0BB3  120A  158A  20F7  120A  158A  	fcall	_read_byte
  4113  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0BBA  00DC               	movwf	??_get_temp
  4116  0BBB  085C               	movf	??_get_temp,w
  4117  0BBC  00DA               	movwf	_THV
  4118                           
  4119                           ;Thermometer_src.c: 103: TRISE0 =1;
  4120  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  4121  0BBE  1409               	bsf	9,0	;volatile
  4122                           
  4123                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4124  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  4125  0BC0  085A               	movf	_THV,w
  4126  0BC1  00DC               	movwf	??_get_temp
  4127  0BC2  3004               	movlw	4
  4128  0BC3                     u1925:	
  4129  0BC3  1003               	clrc
  4130  0BC4  0DDC               	rlf	??_get_temp,f
  4131  0BC5  3EFF               	addlw	-1
  4132  0BC6  1D03               	skipz
  4133  0BC7  2BC3               	goto	u1925
  4134  0BC8  303F               	movlw	63
  4135  0BC9  055C               	andwf	??_get_temp,w
  4136  0BCA  00DD               	movwf	??_get_temp+1
  4137  0BCB  085B               	movf	_TLV,w
  4138  0BCC  00DE               	movwf	??_get_temp+2
  4139  0BCD  3004               	movlw	4
  4140  0BCE                     u1935:	
  4141  0BCE  1003               	clrc
  4142  0BCF  0CDE               	rrf	??_get_temp+2,f
  4143  0BD0  3EFF               	addlw	-1
  4144  0BD1  1D03               	skipz
  4145  0BD2  2BCE               	goto	u1935
  4146  0BD3  085E               	movf	??_get_temp+2,w
  4147  0BD4  045D               	iorwf	??_get_temp+1,w
  4148  0BD5  00DF               	movwf	??_get_temp+3
  4149  0BD6  085F               	movf	??_get_temp+3,w
  4150  0BD7  00D9               	movwf	_TZ
  4151                           
  4152                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4153  0BD8  085B               	movf	_TLV,w
  4154  0BD9  00DC               	movwf	??_get_temp
  4155  0BDA  3003               	movlw	3
  4156  0BDB                     u1945:	
  4157  0BDB  1003               	clrc
  4158  0BDC  0DDC               	rlf	??_get_temp,f
  4159  0BDD  3EFF               	addlw	-1
  4160  0BDE  1D03               	skipz
  4161  0BDF  2BDB               	goto	u1945
  4162  0BE0  1003               	clrc
  4163  0BE1  0D5C               	rlf	??_get_temp,w
  4164  0BE2  00DD               	movwf	??_get_temp+1
  4165  0BE3  085D               	movf	??_get_temp+1,w
  4166  0BE4  00D8               	movwf	_TX
  4167                           
  4168                           ;Thermometer_src.c: 107: ge=TZ%10;
  4169  0BE5  300A               	movlw	10
  4170  0BE6  00DC               	movwf	??_get_temp
  4171  0BE7  085C               	movf	??_get_temp,w
  4172  0BE8  00F0               	movwf	___lbmod@divisor
  4173  0BE9  0859               	movf	_TZ,w
  4174  0BEA  160A  118A  2772  120A  158A  	fcall	___lbmod
  4175  0BEF  00DD               	movwf	??_get_temp+1
  4176  0BF0  085D               	movf	??_get_temp+1,w
  4177  0BF1  00D6               	movwf	_ge
  4178                           
  4179                           ;Thermometer_src.c: 108: shi=TZ/10;
  4180  0BF2  300A               	movlw	10
  4181  0BF3  00DC               	movwf	??_get_temp
  4182  0BF4  085C               	movf	??_get_temp,w
  4183  0BF5  00F0               	movwf	___lbdiv@divisor
  4184  0BF6  0859               	movf	_TZ,w
  4185  0BF7  160A  118A  2751  120A  158A  	fcall	___lbdiv
  4186  0BFC  00DD               	movwf	??_get_temp+1
  4187  0BFD  085D               	movf	??_get_temp+1,w
  4188  0BFE  00D7               	movwf	_shi
  4189                           
  4190                           ;Thermometer_src.c: 109: wd=0;
  4191  0BFF  01C3               	clrf	_wd
  4192  0C00  01C4               	clrf	_wd+1
  4193                           
  4194                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4195  0C01  1FD8               	btfss	_TX,7
  4196  0C02  2C0B               	goto	l3241
  4197  0C03  0843               	movf	_wd,w
  4198  0C04  3E88               	addlw	136
  4199  0C05  00C3               	movwf	_wd
  4200  0C06  0844               	movf	_wd+1,w
  4201  0C07  1803               	skipnc
  4202  0C08  3E01               	addlw	1
  4203  0C09  3E13               	addlw	19
  4204  0C0A  00C4               	movwf	_wd+1
  4205  0C0B                     l3241:	
  4206                           
  4207                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4208  0C0B  1F58               	btfss	_TX,6
  4209  0C0C  2C15               	goto	l3245
  4210  0C0D  0843               	movf	_wd,w
  4211  0C0E  3EC4               	addlw	196
  4212  0C0F  00C3               	movwf	_wd
  4213  0C10  0844               	movf	_wd+1,w
  4214  0C11  1803               	skipnc
  4215  0C12  3E01               	addlw	1
  4216  0C13  3E09               	addlw	9
  4217  0C14  00C4               	movwf	_wd+1
  4218  0C15                     l3245:	
  4219                           
  4220                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4221  0C15  1ED8               	btfss	_TX,5
  4222  0C16  2C1F               	goto	l3249
  4223  0C17  0843               	movf	_wd,w
  4224  0C18  3EE2               	addlw	226
  4225  0C19  00C3               	movwf	_wd
  4226  0C1A  0844               	movf	_wd+1,w
  4227  0C1B  1803               	skipnc
  4228  0C1C  3E01               	addlw	1
  4229  0C1D  3E04               	addlw	4
  4230  0C1E  00C4               	movwf	_wd+1
  4231  0C1F                     l3249:	
  4232                           
  4233                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4234  0C1F  1E58               	btfss	_TX,4
  4235  0C20  2C29               	goto	l3253
  4236  0C21  0843               	movf	_wd,w
  4237  0C22  3E71               	addlw	113
  4238  0C23  00C3               	movwf	_wd
  4239  0C24  0844               	movf	_wd+1,w
  4240  0C25  1803               	skipnc
  4241  0C26  3E01               	addlw	1
  4242  0C27  3E02               	addlw	2
  4243  0C28  00C4               	movwf	_wd+1
  4244  0C29                     l3253:	
  4245                           
  4246                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4247  0C29  30E8               	movlw	232
  4248  0C2A  00F6               	movwf	___lwdiv@divisor
  4249  0C2B  3003               	movlw	3
  4250  0C2C  00F7               	movwf	___lwdiv@divisor+1
  4251  0C2D  0844               	movf	_wd+1,w
  4252  0C2E  00F9               	movwf	___lwdiv@dividend+1
  4253  0C2F  0843               	movf	_wd,w
  4254  0C30  00F8               	movwf	___lwdiv@dividend
  4255  0C31  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4256  0C36  0876               	movf	?___lwdiv,w
  4257  0C37  00DC               	movwf	??_get_temp
  4258  0C38  085C               	movf	??_get_temp,w
  4259  0C39  00D5               	movwf	_shifen
  4260                           
  4261                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4262  0C3A  3064               	movlw	100
  4263  0C3B  00F6               	movwf	___lwdiv@divisor
  4264  0C3C  3000               	movlw	0
  4265  0C3D  00F7               	movwf	___lwdiv@divisor+1
  4266  0C3E  0844               	movf	_wd+1,w
  4267  0C3F  00F3               	movwf	___lwmod@dividend+1
  4268  0C40  0843               	movf	_wd,w
  4269  0C41  00F2               	movwf	___lwmod@dividend
  4270  0C42  30E8               	movlw	232
  4271  0C43  00F0               	movwf	___lwmod@divisor
  4272  0C44  3003               	movlw	3
  4273  0C45  00F1               	movwf	___lwmod@divisor+1
  4274  0C46  120A  158A  20C5  120A  158A  	fcall	___lwmod
  4275  0C4B  0871               	movf	?___lwmod+1,w
  4276  0C4C  00F9               	movwf	___lwdiv@dividend+1
  4277  0C4D  0870               	movf	?___lwmod,w
  4278  0C4E  00F8               	movwf	___lwdiv@dividend
  4279  0C4F  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4280  0C54  0876               	movf	?___lwdiv,w
  4281  0C55  00DC               	movwf	??_get_temp
  4282  0C56  085C               	movf	??_get_temp,w
  4283  0C57  00D4               	movwf	_baifen
  4284                           
  4285                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4286  0C58  300A               	movlw	10
  4287  0C59  00F6               	movwf	___lwdiv@divisor
  4288  0C5A  3000               	movlw	0
  4289  0C5B  00F7               	movwf	___lwdiv@divisor+1
  4290  0C5C  0844               	movf	_wd+1,w
  4291  0C5D  00F3               	movwf	___lwmod@dividend+1
  4292  0C5E  0843               	movf	_wd,w
  4293  0C5F  00F2               	movwf	___lwmod@dividend
  4294  0C60  3064               	movlw	100
  4295  0C61  00F0               	movwf	___lwmod@divisor
  4296  0C62  3000               	movlw	0
  4297  0C63  00F1               	movwf	___lwmod@divisor+1
  4298  0C64  120A  158A  20C5  120A  158A  	fcall	___lwmod
  4299  0C69  0871               	movf	?___lwmod+1,w
  4300  0C6A  00F9               	movwf	___lwdiv@dividend+1
  4301  0C6B  0870               	movf	?___lwmod,w
  4302  0C6C  00F8               	movwf	___lwdiv@dividend
  4303  0C6D  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4304  0C72  0876               	movf	?___lwdiv,w
  4305  0C73  00DC               	movwf	??_get_temp
  4306  0C74  085C               	movf	??_get_temp,w
  4307  0C75  00D3               	movwf	_qianfen
  4308                           
  4309                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4310  0C76  300A               	movlw	10
  4311  0C77  00F0               	movwf	___lwmod@divisor
  4312  0C78  3000               	movlw	0
  4313  0C79  00F1               	movwf	___lwmod@divisor+1
  4314  0C7A  0844               	movf	_wd+1,w
  4315  0C7B  00F3               	movwf	___lwmod@dividend+1
  4316  0C7C  0843               	movf	_wd,w
  4317  0C7D  00F2               	movwf	___lwmod@dividend
  4318  0C7E  120A  158A  20C5   	fcall	___lwmod
  4319  0C81  0870               	movf	?___lwmod,w
  4320  0C82  00DC               	movwf	??_get_temp
  4321  0C83  085C               	movf	??_get_temp,w
  4322  0C84  00D2               	movwf	_wanfen
  4323                           
  4324                           ;Thermometer_src.c: 118: __nop();
  4325  0C85  0000               	nop
  4326  0C86  0008               	return
  4327  0C87                     __end_of_get_temp:	
  4328                           
  4329                           	psect	text15
  4330  095F                     __ptext15:	
  4331 ;; *************** function _write_byte *****************
  4332 ;; Defined at:
  4333 ;;		line 40 in file "Thermometer_src.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  val             1    wreg     unsigned char 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  val             1    7[COMMON] unsigned char 
  4338 ;;  i               1    8[COMMON] unsigned char 
  4339 ;;  temp            1    6[COMMON] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/100
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       0       0       0       0
  4350 ;;      Locals:         3       0       0       0       0
  4351 ;;      Temps:          2       0       0       0       0
  4352 ;;      Totals:         5       0       0       0       0
  4353 ;;Total ram usage:        5 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    1
  4356 ;; This function calls:
  4357 ;;		_delay_temp
  4358 ;; This function is called by:
  4359 ;;		_get_temp
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _write_byte
  4365  095F                     _write_byte:	
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4369                           ;write_byte@val stored from wreg
  4370  095F  00F7               	movwf	write_byte@val
  4371                           
  4372                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4373  0960  3008               	movlw	8
  4374  0961  00F4               	movwf	??_write_byte
  4375  0962  0874               	movf	??_write_byte,w
  4376  0963  00F8               	movwf	write_byte@i
  4377  0964                     l2895:	
  4378                           
  4379                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4380  0964  0877               	movf	write_byte@val,w
  4381  0965  3901               	andlw	1
  4382  0966  00F4               	movwf	??_write_byte
  4383  0967  0874               	movf	??_write_byte,w
  4384  0968  00F6               	movwf	write_byte@temp
  4385                           
  4386                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4387  0969  1283               	bcf	3,5	;RP0=0, select bank0
  4388  096A  1303               	bcf	3,6	;RP1=0, select bank0
  4389  096B  1009               	bcf	9,0	;volatile
  4390  096C  1683               	bsf	3,5	;RP0=1, select bank1
  4391  096D  1009               	bcf	9,0	;volatile
  4392                           
  4393                           ;Thermometer_src.c: 48:    __nop();
  4394  096E  0000               	nop
  4395                           
  4396                           ;Thermometer_src.c: 49:    __nop();
  4397  096F  0000               	nop
  4398                           
  4399                           ;Thermometer_src.c: 50:    __nop();
  4400  0970  0000               	nop
  4401                           
  4402                           ;Thermometer_src.c: 51:    __nop();
  4403  0971  0000               	nop
  4404                           
  4405                           ;Thermometer_src.c: 52:    __nop();
  4406  0972  0000               	nop
  4407                           
  4408                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4409  0973  0376               	decf	write_byte@temp,w
  4410  0974  1D03               	btfss	3,2
  4411  0975  2979               	goto	l2915
  4412  0976  1683               	bsf	3,5	;RP0=1, select bank1
  4413  0977  1303               	bcf	3,6	;RP1=0, select bank1
  4414  0978  1409               	bsf	9,0	;volatile
  4415  0979                     l2915:	
  4416                           
  4417                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4418  0979  3007               	movlw	7
  4419  097A  00F4               	movwf	??_write_byte
  4420  097B  0874               	movf	??_write_byte,w
  4421  097C  00F0               	movwf	delay_temp@y
  4422  097D  3002               	movlw	2
  4423  097E  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4424                           
  4425                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4426  0983  1683               	bsf	3,5	;RP0=1, select bank1
  4427  0984  1303               	bcf	3,6	;RP1=0, select bank1
  4428  0985  1409               	bsf	9,0	;volatile
  4429                           
  4430                           ;Thermometer_src.c: 56:    __nop();
  4431  0986  0000               	nop
  4432                           
  4433                           ;Thermometer_src.c: 57:    __nop();
  4434  0987  0000               	nop
  4435                           
  4436                           ;Thermometer_src.c: 58:    val=val>>1;
  4437  0988  0877               	movf	write_byte@val,w
  4438  0989  00F4               	movwf	??_write_byte
  4439  098A  1003               	clrc
  4440  098B  0C74               	rrf	??_write_byte,w
  4441  098C  00F5               	movwf	??_write_byte+1
  4442  098D  0875               	movf	??_write_byte+1,w
  4443  098E  00F7               	movwf	write_byte@val
  4444                           
  4445                           ;Thermometer_src.c: 59:   }
  4446  098F  3001               	movlw	1
  4447  0990  02F8               	subwf	write_byte@i,f
  4448  0991  0878               	movf	write_byte@i,w
  4449  0992  1903               	btfsc	3,2
  4450  0993  0008               	return
  4451  0994  2964               	goto	l2895
  4452  0995                     __end_of_write_byte:	
  4453                           
  4454                           	psect	text16
  4455  092B                     __ptext16:	
  4456 ;; *************** function _reset_temp *****************
  4457 ;; Defined at:
  4458 ;;		line 25 in file "Thermometer_src.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  presence        1    5[COMMON] unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0, pclath, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/100
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4472 ;;      Params:         0       0       0       0       0
  4473 ;;      Locals:         1       0       0       0       0
  4474 ;;      Temps:          1       0       0       0       0
  4475 ;;      Totals:         2       0       0       0       0
  4476 ;;Total ram usage:        2 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    1
  4479 ;; This function calls:
  4480 ;;		_delay_temp
  4481 ;; This function is called by:
  4482 ;;		_get_temp
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           
  4487                           ;psect for function _reset_temp
  4488  092B                     _reset_temp:	
  4489                           
  4490                           ;Thermometer_src.c: 27:   char presence=1;
  4491                           
  4492                           ;incstack = 0
  4493                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4494  092B  01F5               	clrf	reset_temp@presence
  4495  092C  0AF5               	incf	reset_temp@presence,f
  4496  092D                     l2887:	
  4497                           ;Thermometer_src.c: 28:   while(presence)
  4498                           
  4499                           
  4500                           ;Thermometer_src.c: 28:   while(presence)
  4501  092D  0875               	movf	reset_temp@presence,w
  4502  092E  1903               	btfsc	3,2
  4503  092F  0008               	return
  4504                           
  4505                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4506  0930  1283               	bcf	3,5	;RP0=0, select bank0
  4507  0931  1303               	bcf	3,6	;RP1=0, select bank0
  4508  0932  1009               	bcf	9,0	;volatile
  4509  0933  1683               	bsf	3,5	;RP0=1, select bank1
  4510  0934  1009               	bcf	9,0	;volatile
  4511                           
  4512                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4513  0935  3046               	movlw	70
  4514  0936  00F4               	movwf	??_reset_temp
  4515  0937  0874               	movf	??_reset_temp,w
  4516  0938  00F0               	movwf	delay_temp@y
  4517  0939  3002               	movlw	2
  4518  093A  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4519                           
  4520                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4521  093F  1683               	bsf	3,5	;RP0=1, select bank1
  4522  0940  1303               	bcf	3,6	;RP1=0, select bank1
  4523  0941  1409               	bsf	9,0	;volatile
  4524                           
  4525                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4526  0942  3008               	movlw	8
  4527  0943  00F4               	movwf	??_reset_temp
  4528  0944  0874               	movf	??_reset_temp,w
  4529  0945  00F0               	movwf	delay_temp@y
  4530  0946  3002               	movlw	2
  4531  0947  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4532                           
  4533                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4534  094C  1283               	bcf	3,5	;RP0=0, select bank0
  4535  094D  1303               	bcf	3,6	;RP1=0, select bank0
  4536  094E  1C09               	btfss	9,0	;volatile
  4537  094F  2953               	goto	l2883
  4538  0950  01F5               	clrf	reset_temp@presence
  4539  0951  0AF5               	incf	reset_temp@presence,f
  4540  0952  2954               	goto	l2885
  4541  0953                     l2883:	
  4542  0953  01F5               	clrf	reset_temp@presence
  4543  0954                     l2885:	
  4544                           
  4545                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4546  0954  303C               	movlw	60
  4547  0955  00F4               	movwf	??_reset_temp
  4548  0956  0874               	movf	??_reset_temp,w
  4549  0957  00F0               	movwf	delay_temp@y
  4550  0958  3002               	movlw	2
  4551  0959  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4552  095E  292D               	goto	l2887
  4553  095F                     __end_of_reset_temp:	
  4554                           
  4555                           	psect	text17
  4556  08F7                     __ptext17:	
  4557 ;; *************** function _read_byte *****************
  4558 ;; Defined at:
  4559 ;;		line 62 in file "Thermometer_src.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  i               1    6[COMMON] unsigned char 
  4564 ;;  value           1    5[COMMON] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      unsigned char 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0, pclath, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/100
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4574 ;;      Params:         0       0       0       0       0
  4575 ;;      Locals:         2       0       0       0       0
  4576 ;;      Temps:          1       0       0       0       0
  4577 ;;      Totals:         3       0       0       0       0
  4578 ;;Total ram usage:        3 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    1
  4581 ;; This function calls:
  4582 ;;		_delay_temp
  4583 ;; This function is called by:
  4584 ;;		_get_temp
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           
  4589                           ;psect for function _read_byte
  4590  08F7                     _read_byte:	
  4591                           
  4592                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4596  08F7  01F5               	clrf	read_byte@value
  4597                           
  4598                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4599  08F8  3008               	movlw	8
  4600  08F9  00F4               	movwf	??_read_byte
  4601  08FA  0874               	movf	??_read_byte,w
  4602  08FB  00F6               	movwf	read_byte@i
  4603  08FC                     l2937:	
  4604                           
  4605                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4606  08FC  1003               	clrc
  4607  08FD  0CF5               	rrf	read_byte@value,f
  4608                           
  4609                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4610  08FE  1283               	bcf	3,5	;RP0=0, select bank0
  4611  08FF  1303               	bcf	3,6	;RP1=0, select bank0
  4612  0900  1009               	bcf	9,0	;volatile
  4613  0901  1683               	bsf	3,5	;RP0=1, select bank1
  4614  0902  1009               	bcf	9,0	;volatile
  4615                           
  4616                           ;Thermometer_src.c: 71:    __nop();
  4617  0903  0000               	nop
  4618                           
  4619                           ;Thermometer_src.c: 72:    __nop();
  4620  0904  0000               	nop
  4621                           
  4622                           ;Thermometer_src.c: 73:    __nop();
  4623  0905  0000               	nop
  4624                           
  4625                           ;Thermometer_src.c: 74:    __nop();
  4626  0906  0000               	nop
  4627                           
  4628                           ;Thermometer_src.c: 75:    __nop();
  4629  0907  0000               	nop
  4630                           
  4631                           ;Thermometer_src.c: 76:    __nop();
  4632  0908  0000               	nop
  4633                           
  4634                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4635  0909  1683               	bsf	3,5	;RP0=1, select bank1
  4636  090A  1303               	bcf	3,6	;RP1=0, select bank1
  4637  090B  1409               	bsf	9,0	;volatile
  4638                           
  4639                           ;Thermometer_src.c: 78:    __nop();
  4640  090C  0000               	nop
  4641                           
  4642                           ;Thermometer_src.c: 79:    __nop();
  4643  090D  0000               	nop
  4644                           
  4645                           ;Thermometer_src.c: 80:    __nop();
  4646  090E  0000               	nop
  4647                           
  4648                           ;Thermometer_src.c: 81:    __nop();
  4649  090F  0000               	nop
  4650                           
  4651                           ;Thermometer_src.c: 82:    __nop();
  4652  0910  0000               	nop
  4653                           
  4654                           ;Thermometer_src.c: 83:    j=RE0;
  4655  0911  3000               	movlw	0
  4656  0912  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0913  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0914  1809               	btfsc	9,0	;volatile
  4659  0915  3001               	movlw	1
  4660  0916  00C5               	movwf	read_byte@j
  4661                           
  4662                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4663  0917  0845               	movf	read_byte@j,w
  4664  0918  1D03               	btfss	3,2
  4665  0919  17F5               	bsf	read_byte@value,7
  4666                           
  4667                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4668  091A  3007               	movlw	7
  4669  091B  00F4               	movwf	??_read_byte
  4670  091C  0874               	movf	??_read_byte,w
  4671  091D  00F0               	movwf	delay_temp@y
  4672  091E  3002               	movlw	2
  4673  091F  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4674                           
  4675                           ;Thermometer_src.c: 86:   }
  4676  0924  3001               	movlw	1
  4677  0925  02F6               	subwf	read_byte@i,f
  4678  0926  0876               	movf	read_byte@i,w
  4679  0927  1D03               	btfss	3,2
  4680  0928  28FC               	goto	l2937
  4681                           
  4682                           ;Thermometer_src.c: 87:   return(value);
  4683  0929  0875               	movf	read_byte@value,w
  4684  092A  0008               	return
  4685  092B                     __end_of_read_byte:	
  4686                           
  4687                           	psect	text18
  4688  1646                     __ptext18:	
  4689 ;; *************** function _delay_temp *****************
  4690 ;; Defined at:
  4691 ;;		line 121 in file "Thermometer_src.c"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;  x               1    wreg     unsigned char 
  4694 ;;  y               1    0[COMMON] unsigned char 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  x               1    2[COMMON] unsigned char 
  4697 ;;  z               1    3[COMMON] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      void 
  4700 ;; Registers used:
  4701 ;;		wreg, status,2, status,0
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/100
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4707 ;;      Params:         1       0       0       0       0
  4708 ;;      Locals:         2       0       0       0       0
  4709 ;;      Temps:          1       0       0       0       0
  4710 ;;      Totals:         4       0       0       0       0
  4711 ;;Total ram usage:        4 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_reset_temp
  4717 ;;		_write_byte
  4718 ;;		_read_byte
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           
  4723                           ;psect for function _delay_temp
  4724  1646                     _delay_temp:	
  4725                           
  4726                           ;incstack = 0
  4727                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  4728                           ;delay_temp@x stored from wreg
  4729  1646  00F2               	movwf	delay_temp@x
  4730  1647                     l301:	
  4731                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  4732                           
  4733                           
  4734                           ;Thermometer_src.c: 125:  z=y;
  4735  1647  0870               	movf	delay_temp@y,w
  4736  1648  00F1               	movwf	??_delay_temp
  4737  1649  0871               	movf	??_delay_temp,w
  4738  164A  00F3               	movwf	delay_temp@z
  4739  164B                     l2813:	
  4740  164B  3001               	movlw	1
  4741  164C  02F3               	subwf	delay_temp@z,f
  4742  164D  1D03               	btfss	3,2
  4743  164E  2E4B               	goto	l2813
  4744                           
  4745                           ;Thermometer_src.c: 127:  }while(--x);
  4746  164F  3001               	movlw	1
  4747  1650  02F2               	subwf	delay_temp@x,f
  4748  1651  1903               	btfsc	3,2
  4749  1652  0008               	return
  4750  1653  2E47               	goto	l301
  4751  1654                     __end_of_delay_temp:	
  4752                           
  4753                           	psect	text19
  4754  16BB                     __ptext19:	
  4755 ;; *************** function _delay2 *****************
  4756 ;; Defined at:
  4757 ;;		line 130 in file "Thermometer_src.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;  i               2    0[COMMON] int 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, btemp+1
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/100
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4771 ;;      Params:         0       0       0       0       0
  4772 ;;      Locals:         2       0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0
  4774 ;;      Totals:         2       0       0       0       0
  4775 ;;Total ram usage:        2 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_get_temp
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           
  4785                           ;psect for function _delay2
  4786  16BB                     _delay2:	
  4787                           
  4788                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  4792  16BB  01F0               	clrf	delay2@i
  4793  16BC  01F1               	clrf	delay2@i+1
  4794  16BD                     l2989:	
  4795                           
  4796                           ;Thermometer_src.c: 132:  }
  4797  16BD  3001               	movlw	1
  4798  16BE  07F0               	addwf	delay2@i,f
  4799  16BF  1803               	skipnc
  4800  16C0  0AF1               	incf	delay2@i+1,f
  4801  16C1  3000               	movlw	0
  4802  16C2  07F1               	addwf	delay2@i+1,f
  4803  16C3  0871               	movf	delay2@i+1,w
  4804  16C4  3A80               	xorlw	128
  4805  16C5  00FF               	movwf	127
  4806  16C6  3080               	movlw	128
  4807  16C7  027F               	subwf	127,w
  4808  16C8  1D03               	skipz
  4809  16C9  2ECC               	goto	u1645
  4810  16CA  3032               	movlw	50
  4811  16CB  0270               	subwf	delay2@i,w
  4812  16CC                     u1645:	
  4813  16CC  1803               	btfsc	3,0
  4814  16CD  0008               	return
  4815  16CE  2EBD               	goto	l2989
  4816  16CF                     __end_of_delay2:	
  4817                           
  4818                           	psect	text20
  4819  08C5                     __ptext20:	
  4820 ;; *************** function ___lwmod *****************
  4821 ;; Defined at:
  4822 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  divisor         2    0[COMMON] unsigned int 
  4825 ;;  dividend        2    2[COMMON] unsigned int 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  counter         1    5[COMMON] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  2    0[COMMON] unsigned int 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 300/0
  4834 ;;		On exit  : 300/0
  4835 ;;		Unchanged: 300/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         4       0       0       0       0
  4838 ;;      Locals:         1       0       0       0       0
  4839 ;;      Temps:          1       0       0       0       0
  4840 ;;      Totals:         6       0       0       0       0
  4841 ;;Total ram usage:        6 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_get_temp
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function ___lwmod
  4852  08C5                     ___lwmod:	
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4856  08C5  0870               	movf	___lwmod@divisor,w
  4857  08C6  0471               	iorwf	___lwmod@divisor+1,w
  4858  08C7  1903               	btfsc	3,2
  4859  08C8  28F2               	goto	l3155
  4860  08C9  01F5               	clrf	___lwmod@counter
  4861  08CA  0AF5               	incf	___lwmod@counter,f
  4862  08CB                     l3145:	
  4863  08CB  1BF1               	btfsc	___lwmod@divisor+1,7
  4864  08CC  28D9               	goto	l3147
  4865  08CD  3001               	movlw	1
  4866  08CE                     u1875:	
  4867  08CE  1003               	clrc
  4868  08CF  0DF0               	rlf	___lwmod@divisor,f
  4869  08D0  0DF1               	rlf	___lwmod@divisor+1,f
  4870  08D1  3EFF               	addlw	-1
  4871  08D2  1D03               	skipz
  4872  08D3  28CE               	goto	u1875
  4873  08D4  3001               	movlw	1
  4874  08D5  00F4               	movwf	??___lwmod
  4875  08D6  0874               	movf	??___lwmod,w
  4876  08D7  07F5               	addwf	___lwmod@counter,f
  4877  08D8  28CB               	goto	l3145
  4878  08D9                     l3147:	
  4879  08D9  0871               	movf	___lwmod@divisor+1,w
  4880  08DA  0273               	subwf	___lwmod@dividend+1,w
  4881  08DB  1D03               	skipz
  4882  08DC  28DF               	goto	u1895
  4883  08DD  0870               	movf	___lwmod@divisor,w
  4884  08DE  0272               	subwf	___lwmod@dividend,w
  4885  08DF                     u1895:	
  4886  08DF  1C03               	skipc
  4887  08E0  28E7               	goto	l3151
  4888  08E1  0870               	movf	___lwmod@divisor,w
  4889  08E2  02F2               	subwf	___lwmod@dividend,f
  4890  08E3  0871               	movf	___lwmod@divisor+1,w
  4891  08E4  1C03               	skipc
  4892  08E5  03F3               	decf	___lwmod@dividend+1,f
  4893  08E6  02F3               	subwf	___lwmod@dividend+1,f
  4894  08E7                     l3151:	
  4895  08E7  3001               	movlw	1
  4896  08E8                     u1905:	
  4897  08E8  1003               	clrc
  4898  08E9  0CF1               	rrf	___lwmod@divisor+1,f
  4899  08EA  0CF0               	rrf	___lwmod@divisor,f
  4900  08EB  3EFF               	addlw	-1
  4901  08EC  1D03               	skipz
  4902  08ED  28E8               	goto	u1905
  4903  08EE  3001               	movlw	1
  4904  08EF  02F5               	subwf	___lwmod@counter,f
  4905  08F0  1D03               	btfss	3,2
  4906  08F1  28D9               	goto	l3147
  4907  08F2                     l3155:	
  4908  08F2  0873               	movf	___lwmod@dividend+1,w
  4909  08F3  00F1               	movwf	?___lwmod+1
  4910  08F4  0872               	movf	___lwmod@dividend,w
  4911  08F5  00F0               	movwf	?___lwmod
  4912  08F6  0008               	return
  4913  08F7                     __end_of___lwmod:	
  4914                           
  4915                           	psect	text21
  4916  09CD                     __ptext21:	
  4917 ;; *************** function ___lwdiv *****************
  4918 ;; Defined at:
  4919 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  divisor         2    6[COMMON] unsigned int 
  4922 ;;  dividend        2    8[COMMON] unsigned int 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  quotient        2   11[COMMON] unsigned int 
  4925 ;;  counter         1   13[COMMON] unsigned char 
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  2    6[COMMON] unsigned int 
  4928 ;; Registers used:
  4929 ;;		wreg, status,2, status,0
  4930 ;; Tracked objects:
  4931 ;;		On entry : 300/0
  4932 ;;		On exit  : 300/0
  4933 ;;		Unchanged: 300/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4935 ;;      Params:         4       0       0       0       0
  4936 ;;      Locals:         3       0       0       0       0
  4937 ;;      Temps:          1       0       0       0       0
  4938 ;;      Totals:         8       0       0       0       0
  4939 ;;Total ram usage:        8 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_get_temp
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function ___lwdiv
  4950  09CD                     ___lwdiv:	
  4951                           
  4952                           ;incstack = 0
  4953                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4954  09CD  01FB               	clrf	___lwdiv@quotient
  4955  09CE  01FC               	clrf	___lwdiv@quotient+1
  4956  09CF  0876               	movf	___lwdiv@divisor,w
  4957  09D0  0477               	iorwf	___lwdiv@divisor+1,w
  4958  09D1  1903               	btfsc	3,2
  4959  09D2  2A04               	goto	l3133
  4960  09D3  01FD               	clrf	___lwdiv@counter
  4961  09D4  0AFD               	incf	___lwdiv@counter,f
  4962  09D5                     l3121:	
  4963  09D5  1BF7               	btfsc	___lwdiv@divisor+1,7
  4964  09D6  29E3               	goto	l3123
  4965  09D7  3001               	movlw	1
  4966  09D8                     u1805:	
  4967  09D8  1003               	clrc
  4968  09D9  0DF6               	rlf	___lwdiv@divisor,f
  4969  09DA  0DF7               	rlf	___lwdiv@divisor+1,f
  4970  09DB  3EFF               	addlw	-1
  4971  09DC  1D03               	skipz
  4972  09DD  29D8               	goto	u1805
  4973  09DE  3001               	movlw	1
  4974  09DF  00FA               	movwf	??___lwdiv
  4975  09E0  087A               	movf	??___lwdiv,w
  4976  09E1  07FD               	addwf	___lwdiv@counter,f
  4977  09E2  29D5               	goto	l3121
  4978  09E3                     l3123:	
  4979  09E3  3001               	movlw	1
  4980  09E4                     u1825:	
  4981  09E4  1003               	clrc
  4982  09E5  0DFB               	rlf	___lwdiv@quotient,f
  4983  09E6  0DFC               	rlf	___lwdiv@quotient+1,f
  4984  09E7  3EFF               	addlw	-1
  4985  09E8  1D03               	skipz
  4986  09E9  29E4               	goto	u1825
  4987  09EA  0877               	movf	___lwdiv@divisor+1,w
  4988  09EB  0279               	subwf	___lwdiv@dividend+1,w
  4989  09EC  1D03               	skipz
  4990  09ED  29F0               	goto	u1835
  4991  09EE  0876               	movf	___lwdiv@divisor,w
  4992  09EF  0278               	subwf	___lwdiv@dividend,w
  4993  09F0                     u1835:	
  4994  09F0  1C03               	skipc
  4995  09F1  29F9               	goto	l3129
  4996  09F2  0876               	movf	___lwdiv@divisor,w
  4997  09F3  02F8               	subwf	___lwdiv@dividend,f
  4998  09F4  0877               	movf	___lwdiv@divisor+1,w
  4999  09F5  1C03               	skipc
  5000  09F6  03F9               	decf	___lwdiv@dividend+1,f
  5001  09F7  02F9               	subwf	___lwdiv@dividend+1,f
  5002  09F8  147B               	bsf	___lwdiv@quotient,0
  5003  09F9                     l3129:	
  5004  09F9  3001               	movlw	1
  5005  09FA                     u1845:	
  5006  09FA  1003               	clrc
  5007  09FB  0CF7               	rrf	___lwdiv@divisor+1,f
  5008  09FC  0CF6               	rrf	___lwdiv@divisor,f
  5009  09FD  3EFF               	addlw	-1
  5010  09FE  1D03               	skipz
  5011  09FF  29FA               	goto	u1845
  5012  0A00  3001               	movlw	1
  5013  0A01  02FD               	subwf	___lwdiv@counter,f
  5014  0A02  1D03               	btfss	3,2
  5015  0A03  29E3               	goto	l3123
  5016  0A04                     l3133:	
  5017  0A04  087C               	movf	___lwdiv@quotient+1,w
  5018  0A05  00F7               	movwf	?___lwdiv+1
  5019  0A06  087B               	movf	___lwdiv@quotient,w
  5020  0A07  00F6               	movwf	?___lwdiv
  5021  0A08  0008               	return
  5022  0A09                     __end_of___lwdiv:	
  5023                           
  5024                           	psect	text22
  5025  1772                     __ptext22:	
  5026 ;; *************** function ___lbmod *****************
  5027 ;; Defined at:
  5028 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  dividend        1    wreg     unsigned char 
  5031 ;;  divisor         1    0[COMMON] unsigned char 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  dividend        1    4[COMMON] unsigned char 
  5034 ;;  rem             1    6[COMMON] unsigned char 
  5035 ;;  counter         1    5[COMMON] unsigned char 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      unsigned char 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2, status,0
  5040 ;; Tracked objects:
  5041 ;;		On entry : 300/0
  5042 ;;		On exit  : 300/0
  5043 ;;		Unchanged: 300/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5045 ;;      Params:         1       0       0       0       0
  5046 ;;      Locals:         3       0       0       0       0
  5047 ;;      Temps:          3       0       0       0       0
  5048 ;;      Totals:         7       0       0       0       0
  5049 ;;Total ram usage:        7 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_get_temp
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function ___lbmod
  5060  1772                     ___lbmod:	
  5061                           
  5062                           ;incstack = 0
  5063                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5064                           ;___lbmod@dividend stored from wreg
  5065  1772  00F4               	movwf	___lbmod@dividend
  5066  1773  3008               	movlw	8
  5067  1774  00F1               	movwf	??___lbmod
  5068  1775  0871               	movf	??___lbmod,w
  5069  1776  00F5               	movwf	___lbmod@counter
  5070  1777  01F6               	clrf	___lbmod@rem
  5071  1778                     l3099:	
  5072  1778  0874               	movf	___lbmod@dividend,w
  5073  1779  00F1               	movwf	??___lbmod
  5074  177A  3007               	movlw	7
  5075  177B                     u1765:	
  5076  177B  1003               	clrc
  5077  177C  0CF1               	rrf	??___lbmod,f
  5078  177D  3EFF               	addlw	-1
  5079  177E  1D03               	skipz
  5080  177F  2F7B               	goto	u1765
  5081  1780  0876               	movf	___lbmod@rem,w
  5082  1781  00F2               	movwf	??___lbmod+1
  5083  1782  0772               	addwf	??___lbmod+1,w
  5084  1783  0471               	iorwf	??___lbmod,w
  5085  1784  00F3               	movwf	??___lbmod+2
  5086  1785  0873               	movf	??___lbmod+2,w
  5087  1786  00F6               	movwf	___lbmod@rem
  5088  1787  1003               	clrc
  5089  1788  0DF4               	rlf	___lbmod@dividend,f
  5090  1789  0870               	movf	___lbmod@divisor,w
  5091  178A  0276               	subwf	___lbmod@rem,w
  5092  178B  1C03               	skipc
  5093  178C  2F8F               	goto	l1087
  5094  178D  0870               	movf	___lbmod@divisor,w
  5095  178E  02F6               	subwf	___lbmod@rem,f
  5096  178F                     l1087:	
  5097  178F  3001               	movlw	1
  5098  1790  02F5               	subwf	___lbmod@counter,f
  5099  1791  1D03               	btfss	3,2
  5100  1792  2F78               	goto	l3099
  5101  1793  0876               	movf	___lbmod@rem,w
  5102  1794  0008               	return
  5103  1795                     __end_of___lbmod:	
  5104                           
  5105                           	psect	text23
  5106  1751                     __ptext23:	
  5107 ;; *************** function ___lbdiv *****************
  5108 ;; Defined at:
  5109 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  dividend        1    wreg     unsigned char 
  5112 ;;  divisor         1    0[COMMON] unsigned char 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  dividend        1    2[COMMON] unsigned char 
  5115 ;;  quotient        1    4[COMMON] unsigned char 
  5116 ;;  counter         1    3[COMMON] unsigned char 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      unsigned char 
  5119 ;; Registers used:
  5120 ;;		wreg, status,2, status,0
  5121 ;; Tracked objects:
  5122 ;;		On entry : 300/0
  5123 ;;		On exit  : 300/0
  5124 ;;		Unchanged: 300/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5126 ;;      Params:         1       0       0       0       0
  5127 ;;      Locals:         3       0       0       0       0
  5128 ;;      Temps:          1       0       0       0       0
  5129 ;;      Totals:         5       0       0       0       0
  5130 ;;Total ram usage:        5 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_get_temp
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function ___lbdiv
  5141  1751                     ___lbdiv:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5145                           ;___lbdiv@dividend stored from wreg
  5146  1751  00F2               	movwf	___lbdiv@dividend
  5147  1752  01F4               	clrf	___lbdiv@quotient
  5148  1753  0870               	movf	___lbdiv@divisor,w
  5149  1754  1903               	btfsc	3,2
  5150  1755  2F70               	goto	l3091
  5151  1756  01F3               	clrf	___lbdiv@counter
  5152  1757  0AF3               	incf	___lbdiv@counter,f
  5153  1758                     l3079:	
  5154  1758  1BF0               	btfsc	___lbdiv@divisor,7
  5155  1759  2F61               	goto	l3081
  5156  175A  1003               	clrc
  5157  175B  0DF0               	rlf	___lbdiv@divisor,f
  5158  175C  3001               	movlw	1
  5159  175D  00F1               	movwf	??___lbdiv
  5160  175E  0871               	movf	??___lbdiv,w
  5161  175F  07F3               	addwf	___lbdiv@counter,f
  5162  1760  2F58               	goto	l3079
  5163  1761                     l3081:	
  5164  1761  1003               	clrc
  5165  1762  0DF4               	rlf	___lbdiv@quotient,f
  5166  1763  0870               	movf	___lbdiv@divisor,w
  5167  1764  0272               	subwf	___lbdiv@dividend,w
  5168  1765  1C03               	skipc
  5169  1766  2F6B               	goto	L1
  5170  1767  0870               	movf	___lbdiv@divisor,w
  5171  1768  02F2               	subwf	___lbdiv@dividend,f
  5172  1769  1474               	bsf	___lbdiv@quotient,0
  5173  176A  1003               	clrc
  5174  176B                     L1:	
  5175  176B  0CF0               	rrf	___lbdiv@divisor,f
  5176  176C  3001               	movlw	1
  5177  176D  02F3               	subwf	___lbdiv@counter,f
  5178  176E  1D03               	btfss	3,2
  5179  176F  2F61               	goto	l3081
  5180  1770                     l3091:	
  5181  1770  0874               	movf	___lbdiv@quotient,w
  5182  1771  0008               	return
  5183  1772                     __end_of___lbdiv:	
  5184                           
  5185                           	psect	text24
  5186  1663                     __ptext24:	
  5187 ;; *************** function _ds1302_init *****************
  5188 ;; Defined at:
  5189 ;;		line 6 in file "clock_src.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;		None
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 300/0
  5200 ;;		On exit  : 300/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5203 ;;      Params:         0       0       0       0       0
  5204 ;;      Locals:         0       0       0       0       0
  5205 ;;      Temps:          0       0       0       0       0
  5206 ;;      Totals:         0       0       0       0       0
  5207 ;;Total ram usage:        0 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    1
  5210 ;; This function calls:
  5211 ;;		_time_write_1
  5212 ;; This function is called by:
  5213 ;;		_main
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _ds1302_init
  5219  1663                     _ds1302_init:	
  5220                           
  5221                           ;clock_src.c: 8:    RB0=0;
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5225  1663  1006               	bcf	6,0	;volatile
  5226                           
  5227                           ;clock_src.c: 9:    RB5 =0;
  5228  1664  1286               	bcf	6,5	;volatile
  5229                           
  5230                           ;clock_src.c: 10:    RB5=1;
  5231  1665  1686               	bsf	6,5	;volatile
  5232                           
  5233                           ;clock_src.c: 11:    time_write_1(0x8e);
  5234  1666  308E               	movlw	142
  5235  1667  120A  158A  201B  160A  118A  	fcall	_time_write_1
  5236                           
  5237                           ;clock_src.c: 12:    time_write_1(0);
  5238  166C  3000               	movlw	0
  5239  166D  120A  158A  201B   	fcall	_time_write_1
  5240                           
  5241                           ;clock_src.c: 13:    RB5=0;
  5242  1670  1286               	bcf	6,5	;volatile
  5243  1671  0008               	return
  5244  1672                     __end_of_ds1302_init:	
  5245                           
  5246                           	psect	text25
  5247  1730                     __ptext25:	
  5248 ;; *************** function _display_temp *****************
  5249 ;; Defined at:
  5250 ;;		line 12 in file "Thermometer_src.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 300/0
  5261 ;;		On exit  : 300/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5264 ;;      Params:         0       0       0       0       0
  5265 ;;      Locals:         0       0       0       0       0
  5266 ;;      Temps:          0       0       0       0       0
  5267 ;;      Totals:         0       0       0       0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    2
  5271 ;; This function calls:
  5272 ;;		_write_char
  5273 ;; This function is called by:
  5274 ;;		_main
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _display_temp
  5280  1730                     _display_temp:	
  5281                           
  5282                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5286  1730  0857               	movf	_shi,w
  5287  1731  3E30               	addlw	48
  5288  1732  160A  118A  26E5  160A  118A  	fcall	_write_char
  5289                           
  5290                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5291  1737  0856               	movf	_ge,w
  5292  1738  3E30               	addlw	48
  5293  1739  160A  118A  26E5  160A  118A  	fcall	_write_char
  5294                           
  5295                           ;Thermometer_src.c: 17:  write_char('.');
  5296  173E  302E               	movlw	46
  5297  173F  160A  118A  26E5  160A  118A  	fcall	_write_char
  5298                           
  5299                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5300  1744  0855               	movf	_shifen,w
  5301  1745  3E30               	addlw	48
  5302  1746  160A  118A  26E5  160A  118A  	fcall	_write_char
  5303                           
  5304                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5305  174B  0854               	movf	_baifen,w
  5306  174C  3E30               	addlw	48
  5307  174D  160A  118A  26E5   	fcall	_write_char
  5308  1750  0008               	return
  5309  1751                     __end_of_display_temp:	
  5310                           
  5311                           	psect	text26
  5312  004B                     __ptext26:	
  5313 ;; *************** function _display_day *****************
  5314 ;; Defined at:
  5315 ;;		line 4 in file "Day_of_week_src.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  num             2    3[COMMON] int 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 300/0
  5326 ;;		On exit  : 300/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         2       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0
  5332 ;;      Totals:         2       0       0       0       0
  5333 ;;Total ram usage:        2 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		_write_char
  5338 ;; This function is called by:
  5339 ;;		_main
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _display_day
  5345  004B                     _display_day:	
  5346                           
  5347                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5348                           
  5349                           ;incstack = 0
  5350                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5351  004B  0373               	decf	display_day@num,w
  5352  004C  0474               	iorwf	display_day@num+1,w
  5353  004D  1903               	btfsc	3,2
  5354  004E  2853               	goto	l4009
  5355  004F  0873               	movf	display_day@num,w
  5356  0050  0474               	iorwf	display_day@num+1,w
  5357  0051  1D03               	btfss	3,2
  5358  0052  2865               	goto	l4011
  5359  0053                     l4009:	
  5360                           
  5361                           ;Day_of_week_src.c: 6:     write_char('M');
  5362  0053  304D               	movlw	77
  5363  0054  160A  118A  26E5  120A  118A  	fcall	_write_char
  5364                           
  5365                           ;Day_of_week_src.c: 7:     write_char('o');
  5366  0059  306F               	movlw	111
  5367  005A  160A  118A  26E5  120A  118A  	fcall	_write_char
  5368                           
  5369                           ;Day_of_week_src.c: 8:     write_char('n');
  5370  005F  306E               	movlw	110
  5371  0060  160A  118A  26E5  120A  118A  	fcall	_write_char
  5372  0065                     l4011:	
  5373                           
  5374                           ;Day_of_week_src.c: 10:     if(num == 2){
  5375  0065  3002               	movlw	2
  5376  0066  0673               	xorwf	display_day@num,w
  5377  0067  0474               	iorwf	display_day@num+1,w
  5378  0068  1D03               	btfss	3,2
  5379  0069  287C               	goto	l4015
  5380                           
  5381                           ;Day_of_week_src.c: 11:     write_char('T');
  5382  006A  3054               	movlw	84
  5383  006B  160A  118A  26E5  120A  118A  	fcall	_write_char
  5384                           
  5385                           ;Day_of_week_src.c: 12:     write_char('u');
  5386  0070  3075               	movlw	117
  5387  0071  160A  118A  26E5  120A  118A  	fcall	_write_char
  5388                           
  5389                           ;Day_of_week_src.c: 13:     write_char('e');
  5390  0076  3065               	movlw	101
  5391  0077  160A  118A  26E5  120A  118A  	fcall	_write_char
  5392  007C                     l4015:	
  5393                           
  5394                           ;Day_of_week_src.c: 15:     if(num == 3){
  5395  007C  3003               	movlw	3
  5396  007D  0673               	xorwf	display_day@num,w
  5397  007E  0474               	iorwf	display_day@num+1,w
  5398  007F  1D03               	btfss	3,2
  5399  0080  2893               	goto	l4019
  5400                           
  5401                           ;Day_of_week_src.c: 16:     write_char('W');
  5402  0081  3057               	movlw	87
  5403  0082  160A  118A  26E5  120A  118A  	fcall	_write_char
  5404                           
  5405                           ;Day_of_week_src.c: 17:     write_char('e');
  5406  0087  3065               	movlw	101
  5407  0088  160A  118A  26E5  120A  118A  	fcall	_write_char
  5408                           
  5409                           ;Day_of_week_src.c: 18:     write_char('d');
  5410  008D  3064               	movlw	100
  5411  008E  160A  118A  26E5  120A  118A  	fcall	_write_char
  5412  0093                     l4019:	
  5413                           
  5414                           ;Day_of_week_src.c: 20:     if(num == 4){
  5415  0093  3004               	movlw	4
  5416  0094  0673               	xorwf	display_day@num,w
  5417  0095  0474               	iorwf	display_day@num+1,w
  5418  0096  1D03               	btfss	3,2
  5419  0097  28AA               	goto	l4023
  5420                           
  5421                           ;Day_of_week_src.c: 21:     write_char('T');
  5422  0098  3054               	movlw	84
  5423  0099  160A  118A  26E5  120A  118A  	fcall	_write_char
  5424                           
  5425                           ;Day_of_week_src.c: 22:     write_char('h');
  5426  009E  3068               	movlw	104
  5427  009F  160A  118A  26E5  120A  118A  	fcall	_write_char
  5428                           
  5429                           ;Day_of_week_src.c: 23:     write_char('u');
  5430  00A4  3075               	movlw	117
  5431  00A5  160A  118A  26E5  120A  118A  	fcall	_write_char
  5432  00AA                     l4023:	
  5433                           
  5434                           ;Day_of_week_src.c: 25:     if(num == 5){
  5435  00AA  3005               	movlw	5
  5436  00AB  0673               	xorwf	display_day@num,w
  5437  00AC  0474               	iorwf	display_day@num+1,w
  5438  00AD  1D03               	btfss	3,2
  5439  00AE  28C1               	goto	l4027
  5440                           
  5441                           ;Day_of_week_src.c: 26:     write_char('F');
  5442  00AF  3046               	movlw	70
  5443  00B0  160A  118A  26E5  120A  118A  	fcall	_write_char
  5444                           
  5445                           ;Day_of_week_src.c: 27:     write_char('r');
  5446  00B5  3072               	movlw	114
  5447  00B6  160A  118A  26E5  120A  118A  	fcall	_write_char
  5448                           
  5449                           ;Day_of_week_src.c: 28:     write_char('i');
  5450  00BB  3069               	movlw	105
  5451  00BC  160A  118A  26E5  120A  118A  	fcall	_write_char
  5452  00C1                     l4027:	
  5453                           
  5454                           ;Day_of_week_src.c: 30:     if(num == 6){
  5455  00C1  3006               	movlw	6
  5456  00C2  0673               	xorwf	display_day@num,w
  5457  00C3  0474               	iorwf	display_day@num+1,w
  5458  00C4  1D03               	btfss	3,2
  5459  00C5  28D8               	goto	l4031
  5460                           
  5461                           ;Day_of_week_src.c: 31:     write_char('S');
  5462  00C6  3053               	movlw	83
  5463  00C7  160A  118A  26E5  120A  118A  	fcall	_write_char
  5464                           
  5465                           ;Day_of_week_src.c: 32:     write_char('a');
  5466  00CC  3061               	movlw	97
  5467  00CD  160A  118A  26E5  120A  118A  	fcall	_write_char
  5468                           
  5469                           ;Day_of_week_src.c: 33:     write_char('t');
  5470  00D2  3074               	movlw	116
  5471  00D3  160A  118A  26E5  120A  118A  	fcall	_write_char
  5472  00D8                     l4031:	
  5473                           
  5474                           ;Day_of_week_src.c: 35:     if(num == 7){
  5475  00D8  3007               	movlw	7
  5476  00D9  0673               	xorwf	display_day@num,w
  5477  00DA  0474               	iorwf	display_day@num+1,w
  5478  00DB  1D03               	btfss	3,2
  5479  00DC  0008               	return
  5480                           
  5481                           ;Day_of_week_src.c: 36:     write_char('S');
  5482  00DD  3053               	movlw	83
  5483  00DE  160A  118A  26E5  120A  118A  	fcall	_write_char
  5484                           
  5485                           ;Day_of_week_src.c: 37:     write_char('u');
  5486  00E3  3075               	movlw	117
  5487  00E4  160A  118A  26E5  120A  118A  	fcall	_write_char
  5488                           
  5489                           ;Day_of_week_src.c: 38:     write_char('n');
  5490  00E9  306E               	movlw	110
  5491  00EA  160A  118A  26E5   	fcall	_write_char
  5492  00ED  0008               	return
  5493  00EE                     __end_of_display_day:	
  5494                           
  5495                           	psect	text27
  5496  0AEA                     __ptext27:	
  5497 ;; *************** function _display_date *****************
  5498 ;; Defined at:
  5499 ;;		line 79 in file "clock_src.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  i               2    5[COMMON] int 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 300/0
  5510 ;;		On exit  : 300/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5513 ;;      Params:         0       0       0       0       0
  5514 ;;      Locals:         2       0       0       0       0
  5515 ;;      Temps:          2       0       0       0       0
  5516 ;;      Totals:         4       0       0       0       0
  5517 ;;Total ram usage:        4 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    2
  5520 ;; This function calls:
  5521 ;;		_write_char
  5522 ;; This function is called by:
  5523 ;;		_main
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _display_date
  5529  0AEA                     _display_date:	
  5530                           
  5531                           ;clock_src.c: 81:      int i;;clock_src.c: 82:      if(RB1==0)
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5535  0AEA  1886               	btfsc	6,1	;volatile
  5536  0AEB  2AF4               	goto	l3285
  5537                           
  5538                           ;clock_src.c: 83:        {;clock_src.c: 84:           table1[0]=table1[3];
  5539  0AEC  0823               	movf	_table1+3,w
  5540  0AED  00F3               	movwf	??_display_date
  5541  0AEE  0873               	movf	??_display_date,w
  5542  0AEF  00A0               	movwf	_table1
  5543                           
  5544                           ;clock_src.c: 85:           table1[1]=table1[4];
  5545  0AF0  0824               	movf	_table1+4,w
  5546  0AF1  00F3               	movwf	??_display_date
  5547  0AF2  0873               	movf	??_display_date,w
  5548  0AF3  00A1               	movwf	_table1+1
  5549  0AF4                     l3285:	
  5550                           
  5551                           ;clock_src.c: 87:      i=table1[3]&0xf0;
  5552  0AF4  0823               	movf	_table1+3,w
  5553  0AF5  39F0               	andlw	240
  5554  0AF6  00F3               	movwf	??_display_date
  5555  0AF7  01F4               	clrf	??_display_date+1
  5556  0AF8  0873               	movf	??_display_date,w
  5557  0AF9  00F5               	movwf	display_date@i
  5558  0AFA  0874               	movf	??_display_date+1,w
  5559  0AFB  00F6               	movwf	display_date@i+1
  5560                           
  5561                           ;clock_src.c: 88:      i=i>>4;
  5562  0AFC  0E75               	swapf	display_date@i,w
  5563  0AFD  390F               	andlw	15
  5564  0AFE  00F5               	movwf	display_date@i
  5565  0AFF  0E76               	swapf	display_date@i+1,w
  5566  0B00  39F0               	andlw	240
  5567  0B01  04F5               	iorwf	display_date@i,f
  5568  0B02  0E76               	swapf	display_date@i+1,w
  5569  0B03  390F               	andlw	15
  5570  0B04  00F6               	movwf	display_date@i+1
  5571  0B05  30F0               	movlw	240
  5572  0B06  1DF6               	btfss	display_date@i+1,3
  5573  0B07  3000               	movlw	0
  5574  0B08  04F6               	iorwf	display_date@i+1,f
  5575                           
  5576                           ;clock_src.c: 89:      write_char(i + '0');
  5577  0B09  0875               	movf	display_date@i,w
  5578  0B0A  3E30               	addlw	48
  5579  0B0B  160A  118A  26E5  120A  158A  	fcall	_write_char
  5580                           
  5581                           ;clock_src.c: 91:      i=table1[3]&0x0f;
  5582  0B10  0823               	movf	_table1+3,w
  5583  0B11  390F               	andlw	15
  5584  0B12  00F3               	movwf	??_display_date
  5585  0B13  01F4               	clrf	??_display_date+1
  5586  0B14  0873               	movf	??_display_date,w
  5587  0B15  00F5               	movwf	display_date@i
  5588  0B16  0874               	movf	??_display_date+1,w
  5589  0B17  00F6               	movwf	display_date@i+1
  5590                           
  5591                           ;clock_src.c: 92:      write_char(i + '0');
  5592  0B18  0875               	movf	display_date@i,w
  5593  0B19  3E30               	addlw	48
  5594  0B1A  160A  118A  26E5  120A  158A  	fcall	_write_char
  5595                           
  5596                           ;clock_src.c: 93:      write_char('/');
  5597  0B1F  302F               	movlw	47
  5598  0B20  160A  118A  26E5  120A  158A  	fcall	_write_char
  5599                           
  5600                           ;clock_src.c: 97:      i=table1[4]&0xf0;
  5601  0B25  0824               	movf	_table1+4,w
  5602  0B26  39F0               	andlw	240
  5603  0B27  00F3               	movwf	??_display_date
  5604  0B28  01F4               	clrf	??_display_date+1
  5605  0B29  0873               	movf	??_display_date,w
  5606  0B2A  00F5               	movwf	display_date@i
  5607  0B2B  0874               	movf	??_display_date+1,w
  5608  0B2C  00F6               	movwf	display_date@i+1
  5609                           
  5610                           ;clock_src.c: 98:      i=i>>4;
  5611  0B2D  0E75               	swapf	display_date@i,w
  5612  0B2E  390F               	andlw	15
  5613  0B2F  00F5               	movwf	display_date@i
  5614  0B30  0E76               	swapf	display_date@i+1,w
  5615  0B31  39F0               	andlw	240
  5616  0B32  04F5               	iorwf	display_date@i,f
  5617  0B33  0E76               	swapf	display_date@i+1,w
  5618  0B34  390F               	andlw	15
  5619  0B35  00F6               	movwf	display_date@i+1
  5620  0B36  30F0               	movlw	240
  5621  0B37  1DF6               	btfss	display_date@i+1,3
  5622  0B38  3000               	movlw	0
  5623  0B39  04F6               	iorwf	display_date@i+1,f
  5624                           
  5625                           ;clock_src.c: 99:      write_char(i + '0');
  5626  0B3A  0875               	movf	display_date@i,w
  5627  0B3B  3E30               	addlw	48
  5628  0B3C  160A  118A  26E5  120A  158A  	fcall	_write_char
  5629                           
  5630                           ;clock_src.c: 101:      i=table1[4]&0x0f;
  5631  0B41  0824               	movf	_table1+4,w
  5632  0B42  390F               	andlw	15
  5633  0B43  00F3               	movwf	??_display_date
  5634  0B44  01F4               	clrf	??_display_date+1
  5635  0B45  0873               	movf	??_display_date,w
  5636  0B46  00F5               	movwf	display_date@i
  5637  0B47  0874               	movf	??_display_date+1,w
  5638  0B48  00F6               	movwf	display_date@i+1
  5639                           
  5640                           ;clock_src.c: 102:      write_char(i + '0');
  5641  0B49  0875               	movf	display_date@i,w
  5642  0B4A  3E30               	addlw	48
  5643  0B4B  160A  118A  26E5  120A  158A  	fcall	_write_char
  5644                           
  5645                           ;clock_src.c: 103:      write_char('/');
  5646  0B50  302F               	movlw	47
  5647  0B51  160A  118A  26E5  120A  158A  	fcall	_write_char
  5648                           
  5649                           ;clock_src.c: 107:      i=table1[6]&0xf0;
  5650  0B56  0826               	movf	_table1+6,w
  5651  0B57  39F0               	andlw	240
  5652  0B58  00F3               	movwf	??_display_date
  5653  0B59  01F4               	clrf	??_display_date+1
  5654  0B5A  0873               	movf	??_display_date,w
  5655  0B5B  00F5               	movwf	display_date@i
  5656  0B5C  0874               	movf	??_display_date+1,w
  5657  0B5D  00F6               	movwf	display_date@i+1
  5658                           
  5659                           ;clock_src.c: 108:      i=i>>4;
  5660  0B5E  0E75               	swapf	display_date@i,w
  5661  0B5F  390F               	andlw	15
  5662  0B60  00F5               	movwf	display_date@i
  5663  0B61  0E76               	swapf	display_date@i+1,w
  5664  0B62  39F0               	andlw	240
  5665  0B63  04F5               	iorwf	display_date@i,f
  5666  0B64  0E76               	swapf	display_date@i+1,w
  5667  0B65  390F               	andlw	15
  5668  0B66  00F6               	movwf	display_date@i+1
  5669  0B67  30F0               	movlw	240
  5670  0B68  1DF6               	btfss	display_date@i+1,3
  5671  0B69  3000               	movlw	0
  5672  0B6A  04F6               	iorwf	display_date@i+1,f
  5673                           
  5674                           ;clock_src.c: 109:      write_char(i + '0');
  5675  0B6B  0875               	movf	display_date@i,w
  5676  0B6C  3E30               	addlw	48
  5677  0B6D  160A  118A  26E5  120A  158A  	fcall	_write_char
  5678                           
  5679                           ;clock_src.c: 111:      i=table1[6]&0x0f;
  5680  0B72  0826               	movf	_table1+6,w
  5681  0B73  390F               	andlw	15
  5682  0B74  00F3               	movwf	??_display_date
  5683  0B75  01F4               	clrf	??_display_date+1
  5684  0B76  0873               	movf	??_display_date,w
  5685  0B77  00F5               	movwf	display_date@i
  5686  0B78  0874               	movf	??_display_date+1,w
  5687  0B79  00F6               	movwf	display_date@i+1
  5688                           
  5689                           ;clock_src.c: 112:      write_char(i + '0');
  5690  0B7A  0875               	movf	display_date@i,w
  5691  0B7B  3E30               	addlw	48
  5692  0B7C  160A  118A  26E5   	fcall	_write_char
  5693  0B7F  0008               	return
  5694  0B80                     __end_of_display_date:	
  5695                           
  5696                           	psect	text28
  5697  0A54                     __ptext28:	
  5698 ;; *************** function _display_clock *****************
  5699 ;; Defined at:
  5700 ;;		line 37 in file "clock_src.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  i               2    5[COMMON] int 
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      void 
  5707 ;; Registers used:
  5708 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 300/0
  5711 ;;		On exit  : 300/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5714 ;;      Params:         0       0       0       0       0
  5715 ;;      Locals:         2       0       0       0       0
  5716 ;;      Temps:          2       0       0       0       0
  5717 ;;      Totals:         4       0       0       0       0
  5718 ;;Total ram usage:        4 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    2
  5721 ;; This function calls:
  5722 ;;		_write_char
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function _display_clock
  5730  0A54                     _display_clock:	
  5731                           
  5732                           ;clock_src.c: 39:      int i;;clock_src.c: 40:      if(RB1==0)
  5733                           
  5734                           ;incstack = 0
  5735                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5736  0A54  1886               	btfsc	6,1	;volatile
  5737  0A55  2A5E               	goto	l3323
  5738                           
  5739                           ;clock_src.c: 41:        {;clock_src.c: 42:           table1[0]=table1[3];
  5740  0A56  0823               	movf	_table1+3,w
  5741  0A57  00F3               	movwf	??_display_clock
  5742  0A58  0873               	movf	??_display_clock,w
  5743  0A59  00A0               	movwf	_table1
  5744                           
  5745                           ;clock_src.c: 43:           table1[1]=table1[4];
  5746  0A5A  0824               	movf	_table1+4,w
  5747  0A5B  00F3               	movwf	??_display_clock
  5748  0A5C  0873               	movf	??_display_clock,w
  5749  0A5D  00A1               	movwf	_table1+1
  5750  0A5E                     l3323:	
  5751                           
  5752                           ;clock_src.c: 46:      i=table1[2]&0xf0;
  5753  0A5E  0822               	movf	_table1+2,w
  5754  0A5F  39F0               	andlw	240
  5755  0A60  00F3               	movwf	??_display_clock
  5756  0A61  01F4               	clrf	??_display_clock+1
  5757  0A62  0873               	movf	??_display_clock,w
  5758  0A63  00F5               	movwf	display_clock@i
  5759  0A64  0874               	movf	??_display_clock+1,w
  5760  0A65  00F6               	movwf	display_clock@i+1
  5761                           
  5762                           ;clock_src.c: 47:      i=i>>4;
  5763  0A66  0E75               	swapf	display_clock@i,w
  5764  0A67  390F               	andlw	15
  5765  0A68  00F5               	movwf	display_clock@i
  5766  0A69  0E76               	swapf	display_clock@i+1,w
  5767  0A6A  39F0               	andlw	240
  5768  0A6B  04F5               	iorwf	display_clock@i,f
  5769  0A6C  0E76               	swapf	display_clock@i+1,w
  5770  0A6D  390F               	andlw	15
  5771  0A6E  00F6               	movwf	display_clock@i+1
  5772  0A6F  30F0               	movlw	240
  5773  0A70  1DF6               	btfss	display_clock@i+1,3
  5774  0A71  3000               	movlw	0
  5775  0A72  04F6               	iorwf	display_clock@i+1,f
  5776                           
  5777                           ;clock_src.c: 48:      write_char(i + '0');
  5778  0A73  0875               	movf	display_clock@i,w
  5779  0A74  3E30               	addlw	48
  5780  0A75  160A  118A  26E5  120A  158A  	fcall	_write_char
  5781                           
  5782                           ;clock_src.c: 52:      i=table1[2]&0x0f;
  5783  0A7A  0822               	movf	_table1+2,w
  5784  0A7B  390F               	andlw	15
  5785  0A7C  00F3               	movwf	??_display_clock
  5786  0A7D  01F4               	clrf	??_display_clock+1
  5787  0A7E  0873               	movf	??_display_clock,w
  5788  0A7F  00F5               	movwf	display_clock@i
  5789  0A80  0874               	movf	??_display_clock+1,w
  5790  0A81  00F6               	movwf	display_clock@i+1
  5791                           
  5792                           ;clock_src.c: 53:      write_char(i + '0');
  5793  0A82  0875               	movf	display_clock@i,w
  5794  0A83  3E30               	addlw	48
  5795  0A84  160A  118A  26E5  120A  158A  	fcall	_write_char
  5796                           
  5797                           ;clock_src.c: 54:      write_char(':');
  5798  0A89  303A               	movlw	58
  5799  0A8A  160A  118A  26E5  120A  158A  	fcall	_write_char
  5800                           
  5801                           ;clock_src.c: 58:      i=table1[1]&0xf0;
  5802  0A8F  0821               	movf	_table1+1,w
  5803  0A90  39F0               	andlw	240
  5804  0A91  00F3               	movwf	??_display_clock
  5805  0A92  01F4               	clrf	??_display_clock+1
  5806  0A93  0873               	movf	??_display_clock,w
  5807  0A94  00F5               	movwf	display_clock@i
  5808  0A95  0874               	movf	??_display_clock+1,w
  5809  0A96  00F6               	movwf	display_clock@i+1
  5810                           
  5811                           ;clock_src.c: 59:      i=i>>4;
  5812  0A97  0E75               	swapf	display_clock@i,w
  5813  0A98  390F               	andlw	15
  5814  0A99  00F5               	movwf	display_clock@i
  5815  0A9A  0E76               	swapf	display_clock@i+1,w
  5816  0A9B  39F0               	andlw	240
  5817  0A9C  04F5               	iorwf	display_clock@i,f
  5818  0A9D  0E76               	swapf	display_clock@i+1,w
  5819  0A9E  390F               	andlw	15
  5820  0A9F  00F6               	movwf	display_clock@i+1
  5821  0AA0  30F0               	movlw	240
  5822  0AA1  1DF6               	btfss	display_clock@i+1,3
  5823  0AA2  3000               	movlw	0
  5824  0AA3  04F6               	iorwf	display_clock@i+1,f
  5825                           
  5826                           ;clock_src.c: 60:      write_char(i + '0');
  5827  0AA4  0875               	movf	display_clock@i,w
  5828  0AA5  3E30               	addlw	48
  5829  0AA6  160A  118A  26E5  120A  158A  	fcall	_write_char
  5830                           
  5831                           ;clock_src.c: 63:      i=table1[1]&0x0f;
  5832  0AAB  0821               	movf	_table1+1,w
  5833  0AAC  390F               	andlw	15
  5834  0AAD  00F3               	movwf	??_display_clock
  5835  0AAE  01F4               	clrf	??_display_clock+1
  5836  0AAF  0873               	movf	??_display_clock,w
  5837  0AB0  00F5               	movwf	display_clock@i
  5838  0AB1  0874               	movf	??_display_clock+1,w
  5839  0AB2  00F6               	movwf	display_clock@i+1
  5840                           
  5841                           ;clock_src.c: 64:      write_char(i + '0');
  5842  0AB3  0875               	movf	display_clock@i,w
  5843  0AB4  3E30               	addlw	48
  5844  0AB5  160A  118A  26E5  120A  158A  	fcall	_write_char
  5845                           
  5846                           ;clock_src.c: 65:      write_char(':');
  5847  0ABA  303A               	movlw	58
  5848  0ABB  160A  118A  26E5  120A  158A  	fcall	_write_char
  5849                           
  5850                           ;clock_src.c: 68:      i=table1[0]&0xf0;
  5851  0AC0  0820               	movf	_table1,w
  5852  0AC1  39F0               	andlw	240
  5853  0AC2  00F3               	movwf	??_display_clock
  5854  0AC3  01F4               	clrf	??_display_clock+1
  5855  0AC4  0873               	movf	??_display_clock,w
  5856  0AC5  00F5               	movwf	display_clock@i
  5857  0AC6  0874               	movf	??_display_clock+1,w
  5858  0AC7  00F6               	movwf	display_clock@i+1
  5859                           
  5860                           ;clock_src.c: 69:      i=i>>4;
  5861  0AC8  0E75               	swapf	display_clock@i,w
  5862  0AC9  390F               	andlw	15
  5863  0ACA  00F5               	movwf	display_clock@i
  5864  0ACB  0E76               	swapf	display_clock@i+1,w
  5865  0ACC  39F0               	andlw	240
  5866  0ACD  04F5               	iorwf	display_clock@i,f
  5867  0ACE  0E76               	swapf	display_clock@i+1,w
  5868  0ACF  390F               	andlw	15
  5869  0AD0  00F6               	movwf	display_clock@i+1
  5870  0AD1  30F0               	movlw	240
  5871  0AD2  1DF6               	btfss	display_clock@i+1,3
  5872  0AD3  3000               	movlw	0
  5873  0AD4  04F6               	iorwf	display_clock@i+1,f
  5874                           
  5875                           ;clock_src.c: 70:      write_char(i + '0');
  5876  0AD5  0875               	movf	display_clock@i,w
  5877  0AD6  3E30               	addlw	48
  5878  0AD7  160A  118A  26E5  120A  158A  	fcall	_write_char
  5879                           
  5880                           ;clock_src.c: 73:      i=table1[0]&0x0f;
  5881  0ADC  0820               	movf	_table1,w
  5882  0ADD  390F               	andlw	15
  5883  0ADE  00F3               	movwf	??_display_clock
  5884  0ADF  01F4               	clrf	??_display_clock+1
  5885  0AE0  0873               	movf	??_display_clock,w
  5886  0AE1  00F5               	movwf	display_clock@i
  5887  0AE2  0874               	movf	??_display_clock+1,w
  5888  0AE3  00F6               	movwf	display_clock@i+1
  5889                           
  5890                           ;clock_src.c: 74:      write_char(i + '0');
  5891  0AE4  0875               	movf	display_clock@i,w
  5892  0AE5  3E30               	addlw	48
  5893  0AE6  160A  118A  26E5   	fcall	_write_char
  5894  0AE9  0008               	return
  5895  0AEA                     __end_of_display_clock:	
  5896                           
  5897                           	psect	text29
  5898  03D4                     __ptext29:	
  5899 ;; *************** function _date_settings *****************
  5900 ;; Defined at:
  5901 ;;		line 352 in file "Button_src.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 300/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5915 ;;      Params:         0       0       0       0       0
  5916 ;;      Locals:         0       0       0       0       0
  5917 ;;      Temps:          0       3       0       0       0
  5918 ;;      Totals:         0       3       0       0       0
  5919 ;;Total ram usage:        3 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    3
  5922 ;; This function calls:
  5923 ;;		_button_delay
  5924 ;;		_incrementor
  5925 ;;		_modulus_func
  5926 ;;		_set_time
  5927 ;;		_time_date_delimiter
  5928 ;;		_time_date_hex_terminator
  5929 ;;		_write_char
  5930 ;;		_write_cmd
  5931 ;; This function is called by:
  5932 ;;		_main
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           
  5937                           ;psect for function _date_settings
  5938  03D4                     _date_settings:	
  5939                           
  5940                           ;Button_src.c: 353:  RC0 = 0;
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5944  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  5945  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  5946  03D6  1007               	bcf	7,0	;volatile
  5947                           
  5948                           ;Button_src.c: 354:  RC1 = 1;
  5949  03D7  1487               	bsf	7,1	;volatile
  5950                           
  5951                           ;Button_src.c: 355:  RC2 = 1;
  5952  03D8  1507               	bsf	7,2	;volatile
  5953                           
  5954                           ;Button_src.c: 356:  RC3 = 1;
  5955  03D9  1587               	bsf	7,3	;volatile
  5956                           
  5957                           ;Button_src.c: 357:   if (RC4 == 0){
  5958  03DA  1A07               	btfsc	7,4	;volatile
  5959  03DB  0008               	return
  5960                           
  5961                           ;Button_src.c: 358:       write_cmd(0x1);
  5962  03DC  3001               	movlw	1
  5963  03DD  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  5964  03E2                     l590:	
  5965                           ;Button_src.c: 359:       for(;;){
  5966                           
  5967                           
  5968                           ;Button_src.c: 360:             write_cmd(0x80);
  5969  03E2  3080               	movlw	128
  5970  03E3  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  5971                           
  5972                           ;Button_src.c: 361:             write_char('D');
  5973  03E8  3044               	movlw	68
  5974  03E9  160A  118A  26E5  120A  118A  	fcall	_write_char
  5975                           
  5976                           ;Button_src.c: 362:             write_char('a');
  5977  03EE  3061               	movlw	97
  5978  03EF  160A  118A  26E5  120A  118A  	fcall	_write_char
  5979                           
  5980                           ;Button_src.c: 363:             write_char('t');
  5981  03F4  3074               	movlw	116
  5982  03F5  160A  118A  26E5  120A  118A  	fcall	_write_char
  5983                           
  5984                           ;Button_src.c: 364:             write_char('e');
  5985  03FA  3065               	movlw	101
  5986  03FB  160A  118A  26E5  120A  118A  	fcall	_write_char
  5987                           
  5988                           ;Button_src.c: 365:             write_char('_');
  5989  0400  305F               	movlw	95
  5990  0401  160A  118A  26E5  120A  118A  	fcall	_write_char
  5991                           
  5992                           ;Button_src.c: 366:             write_char('S');
  5993  0406  3053               	movlw	83
  5994  0407  160A  118A  26E5  120A  118A  	fcall	_write_char
  5995                           
  5996                           ;Button_src.c: 367:             write_char('e');
  5997  040C  3065               	movlw	101
  5998  040D  160A  118A  26E5  120A  118A  	fcall	_write_char
  5999                           
  6000                           ;Button_src.c: 368:             write_char('t');
  6001  0412  3074               	movlw	116
  6002  0413  160A  118A  26E5  120A  118A  	fcall	_write_char
  6003                           
  6004                           ;Button_src.c: 369:             write_char('t');
  6005  0418  3074               	movlw	116
  6006  0419  160A  118A  26E5  120A  118A  	fcall	_write_char
  6007                           
  6008                           ;Button_src.c: 370:             write_char('i');
  6009  041E  3069               	movlw	105
  6010  041F  160A  118A  26E5  120A  118A  	fcall	_write_char
  6011                           
  6012                           ;Button_src.c: 371:             write_char('n');
  6013  0424  306E               	movlw	110
  6014  0425  160A  118A  26E5  120A  118A  	fcall	_write_char
  6015                           
  6016                           ;Button_src.c: 372:             write_char('g');
  6017  042A  3067               	movlw	103
  6018  042B  160A  118A  26E5  120A  118A  	fcall	_write_char
  6019                           
  6020                           ;Button_src.c: 373:             write_char('s');
  6021  0430  3073               	movlw	115
  6022  0431  160A  118A  26E5  120A  118A  	fcall	_write_char
  6023                           
  6024                           ;Button_src.c: 374:             RC0 = 1;
  6025  0436  1407               	bsf	7,0	;volatile
  6026                           
  6027                           ;Button_src.c: 375:             RC1 = 0;
  6028  0437  1087               	bcf	7,1	;volatile
  6029                           
  6030                           ;Button_src.c: 376:             RC2 = 1;
  6031  0438  1507               	bsf	7,2	;volatile
  6032                           
  6033                           ;Button_src.c: 377:             RC3 = 1;
  6034  0439  1587               	bsf	7,3	;volatile
  6035                           
  6036                           ;Button_src.c: 378:             if(RC7 == 0 && b =='x'){
  6037  043A  1B87               	btfsc	7,7	;volatile
  6038  043B  2CAC               	goto	l3537
  6039  043C  3078               	movlw	120
  6040  043D  0650               	xorwf	_b,w
  6041  043E  1D03               	btfss	3,2
  6042  043F  2CAC               	goto	l3537
  6043                           
  6044                           ;Button_src.c: 379:                 if(stats == 1)
  6045  0440  0331               	decf	_stats,w
  6046  0441  0432               	iorwf	_stats+1,w
  6047  0442  1D03               	btfss	3,2
  6048  0443  2C48               	goto	l592
  6049                           
  6050                           ;Button_src.c: 380:                     a++;
  6051  0444  3001               	movlw	1
  6052  0445  00E1               	movwf	??_date_settings
  6053  0446  0861               	movf	??_date_settings,w
  6054  0447  07D1               	addwf	_a,f
  6055  0448                     l592:	
  6056                           
  6057                           ;Button_src.c: 381:                 if(stats == 0){
  6058  0448  0831               	movf	_stats,w
  6059  0449  0432               	iorwf	_stats+1,w
  6060  044A  1D03               	btfss	3,2
  6061  044B  2C50               	goto	l593
  6062                           
  6063                           ;Button_src.c: 382:                     stats = 1;
  6064  044C  3001               	movlw	1
  6065  044D  00B1               	movwf	_stats
  6066  044E  3000               	movlw	0
  6067  044F  00B2               	movwf	_stats+1
  6068  0450                     l593:	
  6069                           ;Button_src.c: 383:                 }
  6070                           
  6071                           
  6072                           ;Button_src.c: 385:                     x++ ;
  6073  0450  3001               	movlw	1
  6074  0451  07BD               	addwf	_x,f
  6075  0452  1803               	skipnc
  6076  0453  0ABE               	incf	_x+1,f
  6077  0454  3000               	movlw	0
  6078  0455  07BE               	addwf	_x+1,f
  6079                           
  6080                           ;Button_src.c: 386:                     x = modulus_func(x,10);
  6081  0456  083E               	movf	_x+1,w
  6082  0457  00F8               	movwf	modulus_func@x+1
  6083  0458  083D               	movf	_x,w
  6084  0459  00F7               	movwf	modulus_func@x
  6085  045A  300A               	movlw	10
  6086  045B  00F9               	movwf	modulus_func@y
  6087  045C  3000               	movlw	0
  6088  045D  00FA               	movwf	modulus_func@y+1
  6089  045E  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6090  0463  0878               	movf	?_modulus_func+1,w
  6091  0464  00BE               	movwf	_x+1
  6092  0465  0877               	movf	?_modulus_func,w
  6093  0466  00BD               	movwf	_x
  6094                           
  6095                           ;Button_src.c: 387:                      if (p == 1){
  6096  0467  032F               	decf	_p,w
  6097  0468  0430               	iorwf	_p+1,w
  6098  0469  1D03               	btfss	3,2
  6099  046A  2C84               	goto	l3523
  6100                           
  6101                           ;Button_src.c: 388:                         y = incrementor(y,x,'0');
  6102  046B  083C               	movf	_y+1,w
  6103  046C  00DD               	movwf	incrementor@upper_val+1
  6104  046D  083B               	movf	_y,w
  6105  046E  00DC               	movwf	incrementor@upper_val
  6106  046F  083E               	movf	_x+1,w
  6107  0470  00DF               	movwf	incrementor@lower_val+1
  6108  0471  083D               	movf	_x,w
  6109  0472  00DE               	movwf	incrementor@lower_val
  6110  0473  3030               	movlw	48
  6111  0474  00E1               	movwf	??_date_settings
  6112  0475  0861               	movf	??_date_settings,w
  6113  0476  00E0               	movwf	incrementor@z
  6114  0477  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6115  047C  00E2               	movwf	??_date_settings+1
  6116  047D  01E3               	clrf	??_date_settings+2
  6117  047E  0862               	movf	??_date_settings+1,w
  6118  047F  00BB               	movwf	_y
  6119  0480  0863               	movf	??_date_settings+2,w
  6120  0481  00BC               	movwf	_y+1
  6121                           
  6122                           ;Button_src.c: 389:                         p = 0;
  6123  0482  01AF               	clrf	_p
  6124  0483  01B0               	clrf	_p+1
  6125  0484                     l3523:	
  6126                           
  6127                           ;Button_src.c: 391:                     if (x == 9){
  6128  0484  3009               	movlw	9
  6129  0485  063D               	xorwf	_x,w
  6130  0486  043E               	iorwf	_x+1,w
  6131  0487  1D03               	btfss	3,2
  6132  0488  2C8D               	goto	l3527
  6133                           
  6134                           ;Button_src.c: 392:                         p = 1;
  6135  0489  3001               	movlw	1
  6136  048A  00AF               	movwf	_p
  6137  048B  3000               	movlw	0
  6138  048C  00B0               	movwf	_p+1
  6139  048D                     l3527:	
  6140                           
  6141                           ;Button_src.c: 394:                     a = time_date_hex_terminator(a,'C');
  6142  048D  3043               	movlw	67
  6143  048E  00E1               	movwf	??_date_settings
  6144  048F  0861               	movf	??_date_settings,w
  6145  0490  00F0               	movwf	time_date_hex_terminator@limiter
  6146  0491  0851               	movf	_a,w
  6147  0492  160A  118A  2654  120A  118A  	fcall	_time_date_hex_terminator
  6148  0497  00E2               	movwf	??_date_settings+1
  6149  0498  0862               	movf	??_date_settings+1,w
  6150  0499  00D1               	movwf	_a
  6151                           
  6152                           ;Button_src.c: 396:                     if(y == 1 && x == 3){
  6153  049A  033B               	decf	_y,w
  6154  049B  043C               	iorwf	_y+1,w
  6155  049C  1D03               	btfss	3,2
  6156  049D  2CA7               	goto	l3535
  6157  049E  3003               	movlw	3
  6158  049F  063D               	xorwf	_x,w
  6159  04A0  043E               	iorwf	_x+1,w
  6160  04A1  1D03               	btfss	3,2
  6161  04A2  2CA7               	goto	l3535
  6162                           
  6163                           ;Button_src.c: 397:                         x = 0;
  6164  04A3  01BD               	clrf	_x
  6165  04A4  01BE               	clrf	_x+1
  6166                           
  6167                           ;Button_src.c: 398:                         y = 0;
  6168  04A5  01BB               	clrf	_y
  6169  04A6  01BC               	clrf	_y+1
  6170  04A7                     l3535:	
  6171                           
  6172                           ;Button_src.c: 400:                     button_delay();
  6173  04A7  160A  118A  2693  120A  118A  	fcall	_button_delay
  6174  04AC                     l3537:	
  6175                           
  6176                           ;Button_src.c: 402:             if(RC7==0 && b == 'y'){
  6177  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  6178  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  6179  04AE  1B87               	btfsc	7,7	;volatile
  6180  04AF  2D32               	goto	l3571
  6181  04B0  3079               	movlw	121
  6182  04B1  0650               	xorwf	_b,w
  6183  04B2  1D03               	btfss	3,2
  6184  04B3  2D32               	goto	l3571
  6185                           
  6186                           ;Button_src.c: 403:                  if(stats == 1)
  6187  04B4  0331               	decf	_stats,w
  6188  04B5  0432               	iorwf	_stats+1,w
  6189  04B6  1D03               	btfss	3,2
  6190  04B7  2CBC               	goto	l598
  6191                           
  6192                           ;Button_src.c: 404:                     day_hex++;
  6193  04B8  3001               	movlw	1
  6194  04B9  00E1               	movwf	??_date_settings
  6195  04BA  0861               	movf	??_date_settings,w
  6196  04BB  07CE               	addwf	_day_hex,f
  6197  04BC                     l598:	
  6198                           
  6199                           ;Button_src.c: 405:                 if(stats == 0){
  6200  04BC  0831               	movf	_stats,w
  6201  04BD  0432               	iorwf	_stats+1,w
  6202  04BE  1D03               	btfss	3,2
  6203  04BF  2CC4               	goto	l599
  6204                           
  6205                           ;Button_src.c: 406:                     stats = 1;
  6206  04C0  3001               	movlw	1
  6207  04C1  00B1               	movwf	_stats
  6208  04C2  3000               	movlw	0
  6209  04C3  00B2               	movwf	_stats+1
  6210  04C4                     l599:	
  6211                           ;Button_src.c: 407:                 }
  6212                           
  6213                           
  6214                           ;Button_src.c: 409:                     day_low++;
  6215  04C4  3001               	movlw	1
  6216  04C5  07B7               	addwf	_day_low,f
  6217  04C6  1803               	skipnc
  6218  04C7  0AB8               	incf	_day_low+1,f
  6219  04C8  3000               	movlw	0
  6220  04C9  07B8               	addwf	_day_low+1,f
  6221                           
  6222                           ;Button_src.c: 410:                     day_low = modulus_func(day_low,10);
  6223  04CA  0838               	movf	_day_low+1,w
  6224  04CB  00F8               	movwf	modulus_func@x+1
  6225  04CC  0837               	movf	_day_low,w
  6226  04CD  00F7               	movwf	modulus_func@x
  6227  04CE  300A               	movlw	10
  6228  04CF  00F9               	movwf	modulus_func@y
  6229  04D0  3000               	movlw	0
  6230  04D1  00FA               	movwf	modulus_func@y+1
  6231  04D2  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6232  04D7  0878               	movf	?_modulus_func+1,w
  6233  04D8  00B8               	movwf	_day_low+1
  6234  04D9  0877               	movf	?_modulus_func,w
  6235  04DA  00B7               	movwf	_day_low
  6236                           
  6237                           ;Button_src.c: 411:                     day_counter = modulus_func(day_low,8);
  6238  04DB  0838               	movf	_day_low+1,w
  6239  04DC  00F8               	movwf	modulus_func@x+1
  6240  04DD  0837               	movf	_day_low,w
  6241  04DE  00F7               	movwf	modulus_func@x
  6242  04DF  3008               	movlw	8
  6243  04E0  00F9               	movwf	modulus_func@y
  6244  04E1  3000               	movlw	0
  6245  04E2  00FA               	movwf	modulus_func@y+1
  6246  04E3  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6247  04E8  0878               	movf	?_modulus_func+1,w
  6248  04E9  00A8               	movwf	_day_counter+1
  6249  04EA  0877               	movf	?_modulus_func,w
  6250  04EB  00A7               	movwf	_day_counter
  6251                           
  6252                           ;Button_src.c: 412:                     if (p == 1){
  6253  04EC  032F               	decf	_p,w
  6254  04ED  0430               	iorwf	_p+1,w
  6255  04EE  1D03               	btfss	3,2
  6256  04EF  2D09               	goto	l3557
  6257                           
  6258                           ;Button_src.c: 413:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6259  04F0  0836               	movf	_day_high+1,w
  6260  04F1  00DD               	movwf	incrementor@upper_val+1
  6261  04F2  0835               	movf	_day_high,w
  6262  04F3  00DC               	movwf	incrementor@upper_val
  6263  04F4  0838               	movf	_day_low+1,w
  6264  04F5  00DF               	movwf	incrementor@lower_val+1
  6265  04F6  0837               	movf	_day_low,w
  6266  04F7  00DE               	movwf	incrementor@lower_val
  6267  04F8  3030               	movlw	48
  6268  04F9  00E1               	movwf	??_date_settings
  6269  04FA  0861               	movf	??_date_settings,w
  6270  04FB  00E0               	movwf	incrementor@z
  6271  04FC  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6272  0501  00E2               	movwf	??_date_settings+1
  6273  0502  01E3               	clrf	??_date_settings+2
  6274  0503  0862               	movf	??_date_settings+1,w
  6275  0504  00B5               	movwf	_day_high
  6276  0505  0863               	movf	??_date_settings+2,w
  6277  0506  00B6               	movwf	_day_high+1
  6278                           
  6279                           ;Button_src.c: 414:                         p = 0;
  6280  0507  01AF               	clrf	_p
  6281  0508  01B0               	clrf	_p+1
  6282  0509                     l3557:	
  6283                           
  6284                           ;Button_src.c: 416:                     if (day_low == 9){
  6285  0509  3009               	movlw	9
  6286  050A  0637               	xorwf	_day_low,w
  6287  050B  0438               	iorwf	_day_low+1,w
  6288  050C  1D03               	btfss	3,2
  6289  050D  2D12               	goto	l3561
  6290                           
  6291                           ;Button_src.c: 417:                         p = 1;
  6292  050E  3001               	movlw	1
  6293  050F  00AF               	movwf	_p
  6294  0510  3000               	movlw	0
  6295  0511  00B0               	movwf	_p+1
  6296  0512                     l3561:	
  6297                           
  6298                           ;Button_src.c: 419:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6299  0512  3063               	movlw	99
  6300  0513  00E1               	movwf	??_date_settings
  6301  0514  0861               	movf	??_date_settings,w
  6302  0515  00F0               	movwf	time_date_hex_terminator@limiter
  6303  0516  084E               	movf	_day_hex,w
  6304  0517  160A  118A  2654  120A  118A  	fcall	_time_date_hex_terminator
  6305  051C  00E2               	movwf	??_date_settings+1
  6306  051D  0862               	movf	??_date_settings+1,w
  6307  051E  00CE               	movwf	_day_hex
  6308                           
  6309                           ;Button_src.c: 420:                     if(day_high == 3 && day_low==2 ){
  6310  051F  3003               	movlw	3
  6311  0520  0635               	xorwf	_day_high,w
  6312  0521  0436               	iorwf	_day_high+1,w
  6313  0522  1D03               	btfss	3,2
  6314  0523  2D2D               	goto	l3569
  6315  0524  3002               	movlw	2
  6316  0525  0637               	xorwf	_day_low,w
  6317  0526  0438               	iorwf	_day_low+1,w
  6318  0527  1D03               	btfss	3,2
  6319  0528  2D2D               	goto	l3569
  6320                           
  6321                           ;Button_src.c: 421:                         day_high = 0;
  6322  0529  01B5               	clrf	_day_high
  6323  052A  01B6               	clrf	_day_high+1
  6324                           
  6325                           ;Button_src.c: 422:                         day_low = 0;
  6326  052B  01B7               	clrf	_day_low
  6327  052C  01B8               	clrf	_day_low+1
  6328  052D                     l3569:	
  6329                           
  6330                           ;Button_src.c: 424:                     button_delay();
  6331  052D  160A  118A  2693  120A  118A  	fcall	_button_delay
  6332  0532                     l3571:	
  6333                           
  6334                           ;Button_src.c: 426:             if(RC7==0 && b == 'z'){
  6335  0532  1283               	bcf	3,5	;RP0=0, select bank0
  6336  0533  1303               	bcf	3,6	;RP1=0, select bank0
  6337  0534  1B87               	btfsc	7,7	;volatile
  6338  0535  2D99               	goto	l3603
  6339  0536  307A               	movlw	122
  6340  0537  0650               	xorwf	_b,w
  6341  0538  1D03               	btfss	3,2
  6342  0539  2D99               	goto	l3603
  6343                           
  6344                           ;Button_src.c: 427:                 if(stats == 1)
  6345  053A  0331               	decf	_stats,w
  6346  053B  0432               	iorwf	_stats+1,w
  6347  053C  1D03               	btfss	3,2
  6348  053D  2D42               	goto	l604
  6349                           
  6350                           ;Button_src.c: 428:                    c++;
  6351  053E  3001               	movlw	1
  6352  053F  00E1               	movwf	??_date_settings
  6353  0540  0861               	movf	??_date_settings,w
  6354  0541  07CF               	addwf	_c,f
  6355  0542                     l604:	
  6356                           
  6357                           ;Button_src.c: 429:                 if(stats == 0){
  6358  0542  0831               	movf	_stats,w
  6359  0543  0432               	iorwf	_stats+1,w
  6360  0544  1D03               	btfss	3,2
  6361  0545  2D4A               	goto	l605
  6362                           
  6363                           ;Button_src.c: 430:                     stats = 1;
  6364  0546  3001               	movlw	1
  6365  0547  00B1               	movwf	_stats
  6366  0548  3000               	movlw	0
  6367  0549  00B2               	movwf	_stats+1
  6368  054A                     l605:	
  6369                           ;Button_src.c: 431:                 }
  6370                           
  6371                           
  6372                           ;Button_src.c: 433:                     t++;
  6373  054A  3001               	movlw	1
  6374  054B  07C1               	addwf	_t,f
  6375  054C  1803               	skipnc
  6376  054D  0AC2               	incf	_t+1,f
  6377  054E  3000               	movlw	0
  6378  054F  07C2               	addwf	_t+1,f
  6379                           
  6380                           ;Button_src.c: 434:                     t = modulus_func(t,10);
  6381  0550  0842               	movf	_t+1,w
  6382  0551  00F8               	movwf	modulus_func@x+1
  6383  0552  0841               	movf	_t,w
  6384  0553  00F7               	movwf	modulus_func@x
  6385  0554  300A               	movlw	10
  6386  0555  00F9               	movwf	modulus_func@y
  6387  0556  3000               	movlw	0
  6388  0557  00FA               	movwf	modulus_func@y+1
  6389  0558  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6390  055D  0878               	movf	?_modulus_func+1,w
  6391  055E  00C2               	movwf	_t+1
  6392  055F  0877               	movf	?_modulus_func,w
  6393  0560  00C1               	movwf	_t
  6394                           
  6395                           ;Button_src.c: 435:                      if (p == 1){
  6396  0561  032F               	decf	_p,w
  6397  0562  0430               	iorwf	_p+1,w
  6398  0563  1D03               	btfss	3,2
  6399  0564  2D7E               	goto	l3589
  6400                           
  6401                           ;Button_src.c: 436:                         w = incrementor(w,t,'0');
  6402  0565  0840               	movf	_w+1,w
  6403  0566  00DD               	movwf	incrementor@upper_val+1
  6404  0567  083F               	movf	_w,w
  6405  0568  00DC               	movwf	incrementor@upper_val
  6406  0569  0842               	movf	_t+1,w
  6407  056A  00DF               	movwf	incrementor@lower_val+1
  6408  056B  0841               	movf	_t,w
  6409  056C  00DE               	movwf	incrementor@lower_val
  6410  056D  3030               	movlw	48
  6411  056E  00E1               	movwf	??_date_settings
  6412  056F  0861               	movf	??_date_settings,w
  6413  0570  00E0               	movwf	incrementor@z
  6414  0571  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6415  0576  00E2               	movwf	??_date_settings+1
  6416  0577  01E3               	clrf	??_date_settings+2
  6417  0578  0862               	movf	??_date_settings+1,w
  6418  0579  00BF               	movwf	_w
  6419  057A  0863               	movf	??_date_settings+2,w
  6420  057B  00C0               	movwf	_w+1
  6421                           
  6422                           ;Button_src.c: 437:                         p = 0;
  6423  057C  01AF               	clrf	_p
  6424  057D  01B0               	clrf	_p+1
  6425  057E                     l3589:	
  6426                           
  6427                           ;Button_src.c: 439:                     if (t == 9){
  6428  057E  3009               	movlw	9
  6429  057F  0641               	xorwf	_t,w
  6430  0580  0442               	iorwf	_t+1,w
  6431  0581  1D03               	btfss	3,2
  6432  0582  2D87               	goto	l3593
  6433                           
  6434                           ;Button_src.c: 440:                         p = 1;
  6435  0583  3001               	movlw	1
  6436  0584  00AF               	movwf	_p
  6437  0585  3000               	movlw	0
  6438  0586  00B0               	movwf	_p+1
  6439  0587                     l3593:	
  6440                           
  6441                           ;Button_src.c: 443:                      if(c == (0x59 + 1)){
  6442  0587  305A               	movlw	90
  6443  0588  064F               	xorwf	_c,w
  6444  0589  1903               	btfsc	3,2
  6445                           
  6446                           ;Button_src.c: 444:                         c = 0x00;
  6447  058A  01CF               	clrf	_c
  6448                           
  6449                           ;Button_src.c: 446:                     if(w == 6){
  6450  058B  3006               	movlw	6
  6451  058C  063F               	xorwf	_w,w
  6452  058D  0440               	iorwf	_w+1,w
  6453  058E  1D03               	btfss	3,2
  6454  058F  2D94               	goto	l3601
  6455                           
  6456                           ;Button_src.c: 447:                         w = 0;
  6457  0590  01BF               	clrf	_w
  6458  0591  01C0               	clrf	_w+1
  6459                           
  6460                           ;Button_src.c: 448:                         t = 0;
  6461  0592  01C1               	clrf	_t
  6462  0593  01C2               	clrf	_t+1
  6463  0594                     l3601:	
  6464                           
  6465                           ;Button_src.c: 450:                     button_delay();
  6466  0594  160A  118A  2693  120A  118A  	fcall	_button_delay
  6467  0599                     l3603:	
  6468                           
  6469                           ;Button_src.c: 457:                     a = time_date_delimiter(a,0x11,'9');
  6470  0599  3011               	movlw	17
  6471  059A  1283               	bcf	3,5	;RP0=0, select bank0
  6472  059B  1303               	bcf	3,6	;RP1=0, select bank0
  6473  059C  00E1               	movwf	??_date_settings
  6474  059D  0861               	movf	??_date_settings,w
  6475  059E  00F0               	movwf	time_date_delimiter@hex
  6476  059F  3039               	movlw	57
  6477  05A0  00E2               	movwf	??_date_settings+1
  6478  05A1  0862               	movf	??_date_settings+1,w
  6479  05A2  00F1               	movwf	time_date_delimiter@limiter
  6480  05A3  0851               	movf	_a,w
  6481  05A4  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6482  05A9  00E3               	movwf	??_date_settings+2
  6483  05AA  0863               	movf	??_date_settings+2,w
  6484  05AB  00D1               	movwf	_a
  6485                           
  6486                           ;Button_src.c: 459:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6487  05AC  3011               	movlw	17
  6488  05AD  00E1               	movwf	??_date_settings
  6489  05AE  0861               	movf	??_date_settings,w
  6490  05AF  00F0               	movwf	time_date_delimiter@hex
  6491  05B0  3039               	movlw	57
  6492  05B1  00E2               	movwf	??_date_settings+1
  6493  05B2  0862               	movf	??_date_settings+1,w
  6494  05B3  00F1               	movwf	time_date_delimiter@limiter
  6495  05B4  084E               	movf	_day_hex,w
  6496  05B5  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6497  05BA  00E3               	movwf	??_date_settings+2
  6498  05BB  0863               	movf	??_date_settings+2,w
  6499  05BC  00CE               	movwf	_day_hex
  6500                           
  6501                           ;Button_src.c: 460:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6502  05BD  3021               	movlw	33
  6503  05BE  00E1               	movwf	??_date_settings
  6504  05BF  0861               	movf	??_date_settings,w
  6505  05C0  00F0               	movwf	time_date_delimiter@hex
  6506  05C1  304A               	movlw	74
  6507  05C2  00E2               	movwf	??_date_settings+1
  6508  05C3  0862               	movf	??_date_settings+1,w
  6509  05C4  00F1               	movwf	time_date_delimiter@limiter
  6510  05C5  084E               	movf	_day_hex,w
  6511  05C6  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6512  05CB  00E3               	movwf	??_date_settings+2
  6513  05CC  0863               	movf	??_date_settings+2,w
  6514  05CD  00CE               	movwf	_day_hex
  6515                           
  6516                           ;Button_src.c: 461:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6517  05CE  3011               	movlw	17
  6518  05CF  00E1               	movwf	??_date_settings
  6519  05D0  0861               	movf	??_date_settings,w
  6520  05D1  00F0               	movwf	time_date_delimiter@hex
  6521  05D2  3039               	movlw	57
  6522  05D3  00E2               	movwf	??_date_settings+1
  6523  05D4  0862               	movf	??_date_settings+1,w
  6524  05D5  00F1               	movwf	time_date_delimiter@limiter
  6525  05D6  084E               	movf	_day_hex,w
  6526  05D7  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6527  05DC  00E3               	movwf	??_date_settings+2
  6528  05DD  0863               	movf	??_date_settings+2,w
  6529  05DE  00CE               	movwf	_day_hex
  6530                           
  6531                           ;Button_src.c: 462:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6532  05DF  3021               	movlw	33
  6533  05E0  00E1               	movwf	??_date_settings
  6534  05E1  0861               	movf	??_date_settings,w
  6535  05E2  00F0               	movwf	time_date_delimiter@hex
  6536  05E3  304A               	movlw	74
  6537  05E4  00E2               	movwf	??_date_settings+1
  6538  05E5  0862               	movf	??_date_settings+1,w
  6539  05E6  00F1               	movwf	time_date_delimiter@limiter
  6540  05E7  084E               	movf	_day_hex,w
  6541  05E8  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6542  05ED  00E3               	movwf	??_date_settings+2
  6543  05EE  0863               	movf	??_date_settings+2,w
  6544  05EF  00CE               	movwf	_day_hex
  6545                           
  6546                           ;Button_src.c: 463:                     day_hex = time_date_delimiter(day_hex,0x31,'Y');
  6547  05F0  3031               	movlw	49
  6548  05F1  00E1               	movwf	??_date_settings
  6549  05F2  0861               	movf	??_date_settings,w
  6550  05F3  00F0               	movwf	time_date_delimiter@hex
  6551  05F4  3059               	movlw	89
  6552  05F5  00E2               	movwf	??_date_settings+1
  6553  05F6  0862               	movf	??_date_settings+1,w
  6554  05F7  00F1               	movwf	time_date_delimiter@limiter
  6555  05F8  084E               	movf	_day_hex,w
  6556  05F9  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6557  05FE  00E3               	movwf	??_date_settings+2
  6558  05FF  0863               	movf	??_date_settings+2,w
  6559  0600  00CE               	movwf	_day_hex
  6560                           
  6561                           ;Button_src.c: 465:                     c = time_date_delimiter(c,0x11,'9');
  6562  0601  3011               	movlw	17
  6563  0602  00E1               	movwf	??_date_settings
  6564  0603  0861               	movf	??_date_settings,w
  6565  0604  00F0               	movwf	time_date_delimiter@hex
  6566  0605  3039               	movlw	57
  6567  0606  00E2               	movwf	??_date_settings+1
  6568  0607  0862               	movf	??_date_settings+1,w
  6569  0608  00F1               	movwf	time_date_delimiter@limiter
  6570  0609  084F               	movf	_c,w
  6571  060A  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6572  060F  00E3               	movwf	??_date_settings+2
  6573  0610  0863               	movf	??_date_settings+2,w
  6574  0611  00CF               	movwf	_c
  6575                           
  6576                           ;Button_src.c: 466:                     c = time_date_delimiter(c,0x21,'J');
  6577  0612  3021               	movlw	33
  6578  0613  00E1               	movwf	??_date_settings
  6579  0614  0861               	movf	??_date_settings,w
  6580  0615  00F0               	movwf	time_date_delimiter@hex
  6581  0616  304A               	movlw	74
  6582  0617  00E2               	movwf	??_date_settings+1
  6583  0618  0862               	movf	??_date_settings+1,w
  6584  0619  00F1               	movwf	time_date_delimiter@limiter
  6585  061A  084F               	movf	_c,w
  6586  061B  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6587  0620  00E3               	movwf	??_date_settings+2
  6588  0621  0863               	movf	??_date_settings+2,w
  6589  0622  00CF               	movwf	_c
  6590                           
  6591                           ;Button_src.c: 467:                     c = time_date_delimiter(c,0x11,'9');
  6592  0623  3011               	movlw	17
  6593  0624  00E1               	movwf	??_date_settings
  6594  0625  0861               	movf	??_date_settings,w
  6595  0626  00F0               	movwf	time_date_delimiter@hex
  6596  0627  3039               	movlw	57
  6597  0628  00E2               	movwf	??_date_settings+1
  6598  0629  0862               	movf	??_date_settings+1,w
  6599  062A  00F1               	movwf	time_date_delimiter@limiter
  6600  062B  084F               	movf	_c,w
  6601  062C  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6602  0631  00E3               	movwf	??_date_settings+2
  6603  0632  0863               	movf	??_date_settings+2,w
  6604  0633  00CF               	movwf	_c
  6605                           
  6606                           ;Button_src.c: 468:                     c = time_date_delimiter(c,0x21,'J');
  6607  0634  3021               	movlw	33
  6608  0635  00E1               	movwf	??_date_settings
  6609  0636  0861               	movf	??_date_settings,w
  6610  0637  00F0               	movwf	time_date_delimiter@hex
  6611  0638  304A               	movlw	74
  6612  0639  00E2               	movwf	??_date_settings+1
  6613  063A  0862               	movf	??_date_settings+1,w
  6614  063B  00F1               	movwf	time_date_delimiter@limiter
  6615  063C  084F               	movf	_c,w
  6616  063D  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6617  0642  00E3               	movwf	??_date_settings+2
  6618  0643  0863               	movf	??_date_settings+2,w
  6619  0644  00CF               	movwf	_c
  6620                           
  6621                           ;Button_src.c: 469:                     c = time_date_delimiter(c,0x31,'Y');
  6622  0645  3031               	movlw	49
  6623  0646  00E1               	movwf	??_date_settings
  6624  0647  0861               	movf	??_date_settings,w
  6625  0648  00F0               	movwf	time_date_delimiter@hex
  6626  0649  3059               	movlw	89
  6627  064A  00E2               	movwf	??_date_settings+1
  6628  064B  0862               	movf	??_date_settings+1,w
  6629  064C  00F1               	movwf	time_date_delimiter@limiter
  6630  064D  084F               	movf	_c,w
  6631  064E  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6632  0653  00E3               	movwf	??_date_settings+2
  6633  0654  0863               	movf	??_date_settings+2,w
  6634  0655  00CF               	movwf	_c
  6635                           
  6636                           ;Button_src.c: 470:                     c = time_date_delimiter(c,0x41,'j');
  6637  0656  3041               	movlw	65
  6638  0657  00E1               	movwf	??_date_settings
  6639  0658  0861               	movf	??_date_settings,w
  6640  0659  00F0               	movwf	time_date_delimiter@hex
  6641  065A  306A               	movlw	106
  6642  065B  00E2               	movwf	??_date_settings+1
  6643  065C  0862               	movf	??_date_settings+1,w
  6644  065D  00F1               	movwf	time_date_delimiter@limiter
  6645  065E  084F               	movf	_c,w
  6646  065F  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6647  0664  00E3               	movwf	??_date_settings+2
  6648  0665  0863               	movf	??_date_settings+2,w
  6649  0666  00CF               	movwf	_c
  6650                           
  6651                           ;Button_src.c: 471:                     c = time_date_delimiter(c,0x51,'z');
  6652  0667  3051               	movlw	81
  6653  0668  00E1               	movwf	??_date_settings
  6654  0669  0861               	movf	??_date_settings,w
  6655  066A  00F0               	movwf	time_date_delimiter@hex
  6656  066B  307A               	movlw	122
  6657  066C  00E2               	movwf	??_date_settings+1
  6658  066D  0862               	movf	??_date_settings+1,w
  6659  066E  00F1               	movwf	time_date_delimiter@limiter
  6660  066F  084F               	movf	_c,w
  6661  0670  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6662  0675  00E3               	movwf	??_date_settings+2
  6663  0676  0863               	movf	??_date_settings+2,w
  6664  0677  00CF               	movwf	_c
  6665                           
  6666                           ;Button_src.c: 473:                     if(stats==0)
  6667  0678  0831               	movf	_stats,w
  6668  0679  0432               	iorwf	_stats+1,w
  6669  067A  1D03               	btfss	3,2
  6670  067B  2E7E               	goto	l3633
  6671                           
  6672                           ;Button_src.c: 474:                         table[4] = prev_hex;
  6673  067C  084C               	movf	_prev_hex,w
  6674  067D  2E83               	goto	L2
  6675  067E                     l3633:	
  6676  067E  0331               	decf	_stats,w
  6677  067F  0432               	iorwf	_stats+1,w
  6678  0680  1D03               	btfss	3,2
  6679  0681  2E86               	goto	l611
  6680                           
  6681                           ;Button_src.c: 476:                         table[4]= a;
  6682  0682  0851               	movf	_a,w
  6683  0683                     L2:	
  6684  0683  00E1               	movwf	??_date_settings
  6685  0684  0861               	movf	??_date_settings,w
  6686  0685  00EC               	movwf	_table+4
  6687  0686                     l611:	
  6688                           
  6689                           ;Button_src.c: 477:              table[6] = c;
  6690  0686  084F               	movf	_c,w
  6691  0687  00E1               	movwf	??_date_settings
  6692  0688  0861               	movf	??_date_settings,w
  6693  0689  00EE               	movwf	_table+6
  6694                           
  6695                           ;Button_src.c: 478:              table[3] = day_hex;
  6696  068A  084E               	movf	_day_hex,w
  6697  068B  00E1               	movwf	??_date_settings
  6698  068C  0861               	movf	??_date_settings,w
  6699  068D  00EB               	movwf	_table+3
  6700                           
  6701                           ;Button_src.c: 479:              write_cmd(0x88);
  6702  068E  3088               	movlw	136
  6703  068F  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6704                           
  6705                           ;Button_src.c: 481:                   RC0 = 0;
  6706  0694  1007               	bcf	7,0	;volatile
  6707                           
  6708                           ;Button_src.c: 482:                   RC1 = 1;
  6709  0695  1487               	bsf	7,1	;volatile
  6710                           
  6711                           ;Button_src.c: 483:                   RC2 = 1;
  6712  0696  1507               	bsf	7,2	;volatile
  6713                           
  6714                           ;Button_src.c: 484:                   RC3 = 1;
  6715  0697  1587               	bsf	7,3	;volatile
  6716                           
  6717                           ;Button_src.c: 486:                     if (RC6 == 0 ){
  6718  0698  1B07               	btfsc	7,6	;volatile
  6719  0699  2EB3               	goto	l613
  6720                           
  6721                           ;Button_src.c: 487:                           a = 0x00;
  6722  069A  01D1               	clrf	_a
  6723                           
  6724                           ;Button_src.c: 488:                           c = 0x00;
  6725  069B  01CF               	clrf	_c
  6726                           
  6727                           ;Button_src.c: 489:                           day_hex = 0x00;
  6728  069C  01CE               	clrf	_day_hex
  6729                           
  6730                           ;Button_src.c: 490:                           day_high = 0;
  6731  069D  01B5               	clrf	_day_high
  6732  069E  01B6               	clrf	_day_high+1
  6733                           
  6734                           ;Button_src.c: 491:                           day_low = 0;
  6735  069F  01B7               	clrf	_day_low
  6736  06A0  01B8               	clrf	_day_low+1
  6737                           
  6738                           ;Button_src.c: 492:                           x = 0;
  6739  06A1  01BD               	clrf	_x
  6740  06A2  01BE               	clrf	_x+1
  6741                           
  6742                           ;Button_src.c: 493:                           y = 0;
  6743  06A3  01BB               	clrf	_y
  6744  06A4  01BC               	clrf	_y+1
  6745                           
  6746                           ;Button_src.c: 494:                           w = 0;
  6747  06A5  01BF               	clrf	_w
  6748  06A6  01C0               	clrf	_w+1
  6749                           
  6750                           ;Button_src.c: 495:                           t = 0;
  6751  06A7  01C1               	clrf	_t
  6752  06A8  01C2               	clrf	_t+1
  6753                           
  6754                           ;Button_src.c: 496:                           write_cmd(0x1);
  6755  06A9  3001               	movlw	1
  6756  06AA  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6757                           
  6758                           ;Button_src.c: 497:                           set_time();
  6759  06AF  120A  158A  2041   	fcall	_set_time
  6760  06B2  0008               	return
  6761  06B3                     l613:	
  6762                           ;Button_src.c: 499:                             }
  6763                           
  6764                           
  6765                           ;Button_src.c: 500:                   RC0 = 0;
  6766  06B3  1007               	bcf	7,0	;volatile
  6767                           
  6768                           ;Button_src.c: 501:                   RC1 = 1;
  6769  06B4  1487               	bsf	7,1	;volatile
  6770                           
  6771                           ;Button_src.c: 502:                   RC2 = 1;
  6772  06B5  1507               	bsf	7,2	;volatile
  6773                           
  6774                           ;Button_src.c: 503:                   RC3 = 1;
  6775  06B6  1587               	bsf	7,3	;volatile
  6776                           
  6777                           ;Button_src.c: 504:                   z = modulus_func(z,3);
  6778  06B7  083A               	movf	_z+1,w
  6779  06B8  00F8               	movwf	modulus_func@x+1
  6780  06B9  0839               	movf	_z,w
  6781  06BA  00F7               	movwf	modulus_func@x
  6782  06BB  3003               	movlw	3
  6783  06BC  00F9               	movwf	modulus_func@y
  6784  06BD  3000               	movlw	0
  6785  06BE  00FA               	movwf	modulus_func@y+1
  6786  06BF  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6787  06C4  0878               	movf	?_modulus_func+1,w
  6788  06C5  00BA               	movwf	_z+1
  6789  06C6  0877               	movf	?_modulus_func,w
  6790  06C7  00B9               	movwf	_z
  6791                           
  6792                           ;Button_src.c: 505:                   if(RC4 == 0 && z ==0){
  6793  06C8  1A07               	btfsc	7,4	;volatile
  6794  06C9  2F09               	goto	l3669
  6795  06CA  0839               	movf	_z,w
  6796  06CB  043A               	iorwf	_z+1,w
  6797  06CC  1D03               	btfss	3,2
  6798  06CD  2F09               	goto	l3669
  6799                           
  6800                           ;Button_src.c: 506:                       write_cmd(0x90);
  6801  06CE  3090               	movlw	144
  6802  06CF  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6803                           
  6804                           ;Button_src.c: 507:                       write_char('D');
  6805  06D4  3044               	movlw	68
  6806  06D5  160A  118A  26E5  120A  118A  	fcall	_write_char
  6807                           
  6808                           ;Button_src.c: 508:                       write_char('a');
  6809  06DA  3061               	movlw	97
  6810  06DB  160A  118A  26E5  120A  118A  	fcall	_write_char
  6811                           
  6812                           ;Button_src.c: 509:                       write_char('y');
  6813  06E0  3079               	movlw	121
  6814  06E1  160A  118A  26E5  120A  118A  	fcall	_write_char
  6815                           
  6816                           ;Button_src.c: 510:                       write_char(':');
  6817  06E6  303A               	movlw	58
  6818  06E7  160A  118A  26E5  120A  118A  	fcall	_write_char
  6819                           
  6820                           ;Button_src.c: 511:                       write_char(' ');
  6821  06EC  3020               	movlw	32
  6822  06ED  160A  118A  26E5  120A  118A  	fcall	_write_char
  6823                           
  6824                           ;Button_src.c: 512:                       write_char(' ');
  6825  06F2  3020               	movlw	32
  6826  06F3  160A  118A  26E5  120A  118A  	fcall	_write_char
  6827                           
  6828                           ;Button_src.c: 513:                       b = 'y';
  6829  06F8  3079               	movlw	121
  6830  06F9  00E1               	movwf	??_date_settings
  6831  06FA  0861               	movf	??_date_settings,w
  6832  06FB  00D0               	movwf	_b
  6833                           
  6834                           ;Button_src.c: 515:                       button_delay();
  6835  06FC  160A  118A  2693  120A  118A  	fcall	_button_delay
  6836                           
  6837                           ;Button_src.c: 516:                       z++;
  6838  0701  3001               	movlw	1
  6839  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6840  0703  1303               	bcf	3,6	;RP1=0, select bank0
  6841  0704  07B9               	addwf	_z,f
  6842  0705  1803               	skipnc
  6843  0706  0ABA               	incf	_z+1,f
  6844  0707  3000               	movlw	0
  6845  0708  07BA               	addwf	_z+1,f
  6846  0709                     l3669:	
  6847                           
  6848                           ;Button_src.c: 518:                   RC0 = 0;
  6849  0709  1007               	bcf	7,0	;volatile
  6850                           
  6851                           ;Button_src.c: 519:                   RC1 = 1;
  6852  070A  1487               	bsf	7,1	;volatile
  6853                           
  6854                           ;Button_src.c: 520:                   RC2 = 1;
  6855  070B  1507               	bsf	7,2	;volatile
  6856                           
  6857                           ;Button_src.c: 521:                   RC3 = 1;
  6858  070C  1587               	bsf	7,3	;volatile
  6859                           
  6860                           ;Button_src.c: 522:                   if(RC4 == 0&& z ==1){
  6861  070D  1A07               	btfsc	7,4	;volatile
  6862  070E  2F4C               	goto	l3699
  6863  070F  0339               	decf	_z,w
  6864  0710  043A               	iorwf	_z+1,w
  6865  0711  1D03               	btfss	3,2
  6866  0712  2F4C               	goto	l3699
  6867                           
  6868                           ;Button_src.c: 523:                       z++;
  6869  0713  3001               	movlw	1
  6870  0714  07B9               	addwf	_z,f
  6871  0715  1803               	skipnc
  6872  0716  0ABA               	incf	_z+1,f
  6873  0717  3000               	movlw	0
  6874  0718  07BA               	addwf	_z+1,f
  6875                           
  6876                           ;Button_src.c: 524:                       button_delay();
  6877  0719  160A  118A  2693  120A  118A  	fcall	_button_delay
  6878                           
  6879                           ;Button_src.c: 526:                       write_cmd(0x90);
  6880  071E  3090               	movlw	144
  6881  071F  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6882                           
  6883                           ;Button_src.c: 527:                       write_char('M');
  6884  0724  304D               	movlw	77
  6885  0725  160A  118A  26E5  120A  118A  	fcall	_write_char
  6886                           
  6887                           ;Button_src.c: 528:                       write_char('o');
  6888  072A  306F               	movlw	111
  6889  072B  160A  118A  26E5  120A  118A  	fcall	_write_char
  6890                           
  6891                           ;Button_src.c: 529:                       write_char('n');
  6892  0730  306E               	movlw	110
  6893  0731  160A  118A  26E5  120A  118A  	fcall	_write_char
  6894                           
  6895                           ;Button_src.c: 530:                       write_char('t');
  6896  0736  3074               	movlw	116
  6897  0737  160A  118A  26E5  120A  118A  	fcall	_write_char
  6898                           
  6899                           ;Button_src.c: 531:                       write_char('h');
  6900  073C  3068               	movlw	104
  6901  073D  160A  118A  26E5  120A  118A  	fcall	_write_char
  6902                           
  6903                           ;Button_src.c: 532:                       write_char(':');
  6904  0742  303A               	movlw	58
  6905  0743  160A  118A  26E5  120A  118A  	fcall	_write_char
  6906                           
  6907                           ;Button_src.c: 533:                       b = 'x';
  6908  0748  3078               	movlw	120
  6909  0749  00E1               	movwf	??_date_settings
  6910  074A  0861               	movf	??_date_settings,w
  6911  074B  00D0               	movwf	_b
  6912  074C                     l3699:	
  6913                           
  6914                           ;Button_src.c: 536:                   RC0 = 0;
  6915  074C  1007               	bcf	7,0	;volatile
  6916                           
  6917                           ;Button_src.c: 537:                   RC1 = 1;
  6918  074D  1487               	bsf	7,1	;volatile
  6919                           
  6920                           ;Button_src.c: 538:                   RC2 = 1;
  6921  074E  1507               	bsf	7,2	;volatile
  6922                           
  6923                           ;Button_src.c: 539:                   RC3 = 1;
  6924  074F  1587               	bsf	7,3	;volatile
  6925                           
  6926                           ;Button_src.c: 540:                   if(RC4 == 0&& z ==2){
  6927  0750  1A07               	btfsc	7,4	;volatile
  6928  0751  2F92               	goto	l3729
  6929  0752  3002               	movlw	2
  6930  0753  0639               	xorwf	_z,w
  6931  0754  043A               	iorwf	_z+1,w
  6932  0755  1D03               	btfss	3,2
  6933  0756  2F92               	goto	l3729
  6934                           
  6935                           ;Button_src.c: 541:                       button_delay();
  6936  0757  160A  118A  2693  120A  118A  	fcall	_button_delay
  6937                           
  6938                           ;Button_src.c: 542:                       z++;
  6939  075C  3001               	movlw	1
  6940  075D  1283               	bcf	3,5	;RP0=0, select bank0
  6941  075E  1303               	bcf	3,6	;RP1=0, select bank0
  6942  075F  07B9               	addwf	_z,f
  6943  0760  1803               	skipnc
  6944  0761  0ABA               	incf	_z+1,f
  6945  0762  3000               	movlw	0
  6946  0763  07BA               	addwf	_z+1,f
  6947                           
  6948                           ;Button_src.c: 544:                       write_cmd(0x90);
  6949  0764  3090               	movlw	144
  6950  0765  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6951                           
  6952                           ;Button_src.c: 545:                       write_char('Y');
  6953  076A  3059               	movlw	89
  6954  076B  160A  118A  26E5  120A  118A  	fcall	_write_char
  6955                           
  6956                           ;Button_src.c: 546:                       write_char('e');
  6957  0770  3065               	movlw	101
  6958  0771  160A  118A  26E5  120A  118A  	fcall	_write_char
  6959                           
  6960                           ;Button_src.c: 547:                       write_char('a');
  6961  0776  3061               	movlw	97
  6962  0777  160A  118A  26E5  120A  118A  	fcall	_write_char
  6963                           
  6964                           ;Button_src.c: 548:                       write_char('r');
  6965  077C  3072               	movlw	114
  6966  077D  160A  118A  26E5  120A  118A  	fcall	_write_char
  6967                           
  6968                           ;Button_src.c: 549:                       write_char(':');
  6969  0782  303A               	movlw	58
  6970  0783  160A  118A  26E5  120A  118A  	fcall	_write_char
  6971                           
  6972                           ;Button_src.c: 550:                       write_char(' ');
  6973  0788  3020               	movlw	32
  6974  0789  160A  118A  26E5  120A  118A  	fcall	_write_char
  6975                           
  6976                           ;Button_src.c: 551:                       b = 'z';
  6977  078E  307A               	movlw	122
  6978  078F  00E1               	movwf	??_date_settings
  6979  0790  0861               	movf	??_date_settings,w
  6980  0791  00D0               	movwf	_b
  6981  0792                     l3729:	
  6982                           
  6983                           ;Button_src.c: 554:               write_cmd(0x88);
  6984  0792  3088               	movlw	136
  6985  0793  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6986                           
  6987                           ;Button_src.c: 555:               write_char(day_high + '0');
  6988  0798  0835               	movf	_day_high,w
  6989  0799  3E30               	addlw	48
  6990  079A  160A  118A  26E5  120A  118A  	fcall	_write_char
  6991                           
  6992                           ;Button_src.c: 556:               write_char(day_low + '0');
  6993  079F  0837               	movf	_day_low,w
  6994  07A0  3E30               	addlw	48
  6995  07A1  160A  118A  26E5  120A  118A  	fcall	_write_char
  6996                           
  6997                           ;Button_src.c: 557:               write_char('/');
  6998  07A6  302F               	movlw	47
  6999  07A7  160A  118A  26E5  120A  118A  	fcall	_write_char
  7000                           
  7001                           ;Button_src.c: 558:               write_char(y + '0');
  7002  07AC  083B               	movf	_y,w
  7003  07AD  3E30               	addlw	48
  7004  07AE  160A  118A  26E5  120A  118A  	fcall	_write_char
  7005                           
  7006                           ;Button_src.c: 559:               write_char(x + '0');
  7007  07B3  083D               	movf	_x,w
  7008  07B4  3E30               	addlw	48
  7009  07B5  160A  118A  26E5  120A  118A  	fcall	_write_char
  7010                           
  7011                           ;Button_src.c: 560:               write_char('/');
  7012  07BA  302F               	movlw	47
  7013  07BB  160A  118A  26E5  120A  118A  	fcall	_write_char
  7014                           
  7015                           ;Button_src.c: 561:               write_char(w+ '0');
  7016  07C0  083F               	movf	_w,w
  7017  07C1  3E30               	addlw	48
  7018  07C2  160A  118A  26E5  120A  118A  	fcall	_write_char
  7019                           
  7020                           ;Button_src.c: 562:               write_char(t+ '0');
  7021  07C7  0841               	movf	_t,w
  7022  07C8  3E30               	addlw	48
  7023  07C9  160A  118A  26E5  120A  118A  	fcall	_write_char
  7024                           
  7025                           ;Button_src.c: 565:             RC0 = 0;
  7026  07CE  1007               	bcf	7,0	;volatile
  7027                           
  7028                           ;Button_src.c: 566:             RC1 = 1;
  7029  07CF  1487               	bsf	7,1	;volatile
  7030                           
  7031                           ;Button_src.c: 567:             RC2 = 1;
  7032  07D0  1507               	bsf	7,2	;volatile
  7033                           
  7034                           ;Button_src.c: 568:             RC3 = 1;
  7035  07D1  1587               	bsf	7,3	;volatile
  7036                           
  7037                           ;Button_src.c: 569:             if (RC7 == 0 ){
  7038  07D2  1B87               	btfsc	7,7	;volatile
  7039  07D3  2BE2               	goto	l590
  7040                           
  7041                           ;Button_src.c: 570:             a = 0x00;
  7042  07D4  01D1               	clrf	_a
  7043                           
  7044                           ;Button_src.c: 571:             c = 0x00;
  7045  07D5  01CF               	clrf	_c
  7046                           
  7047                           ;Button_src.c: 572:             day_hex = 0x00;
  7048  07D6  01CE               	clrf	_day_hex
  7049                           
  7050                           ;Button_src.c: 573:             x = 0;
  7051  07D7  01BD               	clrf	_x
  7052  07D8  01BE               	clrf	_x+1
  7053                           
  7054                           ;Button_src.c: 574:             y = 0;
  7055  07D9  01BB               	clrf	_y
  7056  07DA  01BC               	clrf	_y+1
  7057                           
  7058                           ;Button_src.c: 575:             w = 0;
  7059  07DB  01BF               	clrf	_w
  7060  07DC  01C0               	clrf	_w+1
  7061                           
  7062                           ;Button_src.c: 576:             t = 0;
  7063  07DD  01C1               	clrf	_t
  7064  07DE  01C2               	clrf	_t+1
  7065                           
  7066                           ;Button_src.c: 577:             day_high = 0;
  7067  07DF  01B5               	clrf	_day_high
  7068  07E0  01B6               	clrf	_day_high+1
  7069                           
  7070                           ;Button_src.c: 578:             day_low = 0;
  7071  07E1  01B7               	clrf	_day_low
  7072  07E2  01B8               	clrf	_day_low+1
  7073                           
  7074                           ;Button_src.c: 579:             write_cmd(0x1);
  7075  07E3  3001               	movlw	1
  7076  07E4  160A  118A  26FC   	fcall	_write_cmd
  7077                           
  7078                           ;Button_src.c: 580:             break;
  7079  07E7  0008               	return
  7080  07E8                     __end_of_date_settings:	
  7081                           
  7082                           	psect	text30
  7083  16FC                     __ptext30:	
  7084 ;; *************** function _write_cmd *****************
  7085 ;; Defined at:
  7086 ;;		line 41 in file "LCD_src.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  x               1    wreg     unsigned char 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;  x               1    2[COMMON] unsigned char 
  7091 ;;  i               2    0        int 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 300/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7101 ;;      Params:         0       0       0       0       0
  7102 ;;      Locals:         1       0       0       0       0
  7103 ;;      Temps:          0       0       0       0       0
  7104 ;;      Totals:         1       0       0       0       0
  7105 ;;Total ram usage:        1 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    1
  7108 ;; This function calls:
  7109 ;;		_delay_screen
  7110 ;; This function is called by:
  7111 ;;		_main
  7112 ;;		_lcd_init
  7113 ;;		_thermometer_threshhold_settings
  7114 ;;		_time_settings
  7115 ;;		_date_settings
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           
  7120                           ;psect for function _write_cmd
  7121  16FC                     _write_cmd:	
  7122                           
  7123                           ;incstack = 0
  7124                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7125                           ;write_cmd@x stored from wreg
  7126  16FC  00F2               	movwf	write_cmd@x
  7127                           
  7128                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7129  16FD  1283               	bcf	3,5	;RP0=0, select bank0
  7130  16FE  1303               	bcf	3,6	;RP1=0, select bank0
  7131  16FF  1285               	bcf	5,5	;volatile
  7132                           
  7133                           ;LCD_src.c: 45:  RA4=0;
  7134  1700  1205               	bcf	5,4	;volatile
  7135                           
  7136                           ;LCD_src.c: 46:  RA3=0;
  7137  1701  1185               	bcf	5,3	;volatile
  7138                           
  7139                           ;LCD_src.c: 47:  delay_screen();
  7140  1702  160A  118A  26A7  160A  118A  	fcall	_delay_screen
  7141                           
  7142                           ;LCD_src.c: 48:  RA3=1;
  7143  1707  1283               	bcf	3,5	;RP0=0, select bank0
  7144  1708  1303               	bcf	3,6	;RP1=0, select bank0
  7145  1709  1585               	bsf	5,3	;volatile
  7146                           
  7147                           ;LCD_src.c: 49:  PORTD=x;
  7148  170A  0872               	movf	write_cmd@x,w
  7149  170B  0088               	movwf	8	;volatile
  7150                           
  7151                           ;LCD_src.c: 50:  delay_screen();
  7152  170C  160A  118A  26A7   	fcall	_delay_screen
  7153                           
  7154                           ;LCD_src.c: 51:  RA3=0;
  7155  170F  1283               	bcf	3,5	;RP0=0, select bank0
  7156  1710  1303               	bcf	3,6	;RP1=0, select bank0
  7157  1711  1185               	bcf	5,3	;volatile
  7158  1712  0008               	return
  7159  1713                     __end_of_write_cmd:	
  7160                           
  7161                           	psect	text31
  7162  16E5                     __ptext31:	
  7163 ;; *************** function _write_char *****************
  7164 ;; Defined at:
  7165 ;;		line 28 in file "LCD_src.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  x               1    wreg     unsigned char 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  x               1    2[COMMON] unsigned char 
  7170 ;;  i               2    0        int 
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      void 
  7173 ;; Registers used:
  7174 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 300/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7180 ;;      Params:         0       0       0       0       0
  7181 ;;      Locals:         1       0       0       0       0
  7182 ;;      Temps:          0       0       0       0       0
  7183 ;;      Totals:         1       0       0       0       0
  7184 ;;Total ram usage:        1 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    1
  7187 ;; This function calls:
  7188 ;;		_delay_screen
  7189 ;; This function is called by:
  7190 ;;		_main
  7191 ;;		_display_temp
  7192 ;;		_display_clock
  7193 ;;		_display_date
  7194 ;;		_thermometer_threshhold_settings
  7195 ;;		_time_settings
  7196 ;;		_date_settings
  7197 ;;		_set_upper_threshold
  7198 ;;		_set_lower_threshold
  7199 ;;		_display_day
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           
  7204                           ;psect for function _write_char
  7205  16E5                     _write_char:	
  7206                           
  7207                           ;incstack = 0
  7208                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7209                           ;write_char@x stored from wreg
  7210  16E5  00F2               	movwf	write_char@x
  7211                           
  7212                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7213  16E6  1283               	bcf	3,5	;RP0=0, select bank0
  7214  16E7  1303               	bcf	3,6	;RP1=0, select bank0
  7215  16E8  1685               	bsf	5,5	;volatile
  7216                           
  7217                           ;LCD_src.c: 32:  RA4=0;
  7218  16E9  1205               	bcf	5,4	;volatile
  7219                           
  7220                           ;LCD_src.c: 33:  RA3=0;
  7221  16EA  1185               	bcf	5,3	;volatile
  7222                           
  7223                           ;LCD_src.c: 34:  delay_screen();
  7224  16EB  160A  118A  26A7  160A  118A  	fcall	_delay_screen
  7225                           
  7226                           ;LCD_src.c: 35:  RA3=1;
  7227  16F0  1283               	bcf	3,5	;RP0=0, select bank0
  7228  16F1  1303               	bcf	3,6	;RP1=0, select bank0
  7229  16F2  1585               	bsf	5,3	;volatile
  7230                           
  7231                           ;LCD_src.c: 36:  PORTD= x;
  7232  16F3  0872               	movf	write_char@x,w
  7233  16F4  0088               	movwf	8	;volatile
  7234                           
  7235                           ;LCD_src.c: 37:  delay_screen();
  7236  16F5  160A  118A  26A7   	fcall	_delay_screen
  7237                           
  7238                           ;LCD_src.c: 38:  RA3=0;
  7239  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  7240  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  7241  16FA  1185               	bcf	5,3	;volatile
  7242  16FB  0008               	return
  7243  16FC                     __end_of_write_char:	
  7244                           
  7245                           	psect	text32
  7246  16A7                     __ptext32:	
  7247 ;; *************** function _delay_screen *****************
  7248 ;; Defined at:
  7249 ;;		line 70 in file "LCD_src.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;		None
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  i               2    0[COMMON] int 
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg, status,2, btemp+1
  7258 ;; Tracked objects:
  7259 ;;		On entry : 300/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7263 ;;      Params:         0       0       0       0       0
  7264 ;;      Locals:         2       0       0       0       0
  7265 ;;      Temps:          0       0       0       0       0
  7266 ;;      Totals:         2       0       0       0       0
  7267 ;;Total ram usage:        2 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_lcd_init
  7273 ;;		_write_char
  7274 ;;		_write_cmd
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           
  7279                           ;psect for function _delay_screen
  7280  16A7                     _delay_screen:	
  7281                           
  7282                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7283                           
  7284                           ;incstack = 0
  7285                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7286  16A7  01F0               	clrf	delay_screen@i
  7287  16A8  01F1               	clrf	delay_screen@i+1
  7288  16A9                     l2807:	
  7289  16A9  3001               	movlw	1
  7290  16AA  07F0               	addwf	delay_screen@i,f
  7291  16AB  1803               	skipnc
  7292  16AC  0AF1               	incf	delay_screen@i+1,f
  7293  16AD  3000               	movlw	0
  7294  16AE  07F1               	addwf	delay_screen@i+1,f
  7295  16AF  0871               	movf	delay_screen@i+1,w
  7296  16B0  3A80               	xorlw	128
  7297  16B1  00FF               	movwf	127
  7298  16B2  3080               	movlw	128
  7299  16B3  027F               	subwf	127,w
  7300  16B4  1D03               	skipz
  7301  16B5  2EB8               	goto	u1525
  7302  16B6  3005               	movlw	5
  7303  16B7  0270               	subwf	delay_screen@i,w
  7304  16B8                     u1525:	
  7305  16B8  1803               	btfsc	3,0
  7306  16B9  0008               	return
  7307  16BA  2EA9               	goto	l2807
  7308  16BB                     __end_of_delay_screen:	
  7309                           
  7310                           	psect	text33
  7311  1654                     __ptext33:	
  7312 ;; *************** function _time_date_hex_terminator *****************
  7313 ;; Defined at:
  7314 ;;		line 37 in file "math_src.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  val             1    wreg     unsigned char 
  7317 ;;  limiter         1    0[COMMON] unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  val             1    3[COMMON] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      unsigned char 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2
  7324 ;; Tracked objects:
  7325 ;;		On entry : 300/0
  7326 ;;		On exit  : 300/0
  7327 ;;		Unchanged: 300/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7329 ;;      Params:         1       0       0       0       0
  7330 ;;      Locals:         1       0       0       0       0
  7331 ;;      Temps:          2       0       0       0       0
  7332 ;;      Totals:         4       0       0       0       0
  7333 ;;Total ram usage:        4 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_time_settings
  7339 ;;		_date_settings
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _time_date_hex_terminator
  7345  1654                     _time_date_hex_terminator:	
  7346                           
  7347                           ;incstack = 0
  7348                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7349                           ;time_date_hex_terminator@val stored from wreg
  7350  1654  00F3               	movwf	time_date_hex_terminator@val
  7351                           
  7352                           ;math_src.c: 38:     if((val + '0') == limiter){
  7353  1655  0873               	movf	time_date_hex_terminator@val,w
  7354  1656  3E30               	addlw	48
  7355  1657  00F1               	movwf	??_time_date_hex_terminator
  7356  1658  3000               	movlw	0
  7357  1659  1803               	skipnc
  7358  165A  3001               	movlw	1
  7359  165B  00F2               	movwf	??_time_date_hex_terminator+1
  7360  165C  0870               	movf	time_date_hex_terminator@limiter,w
  7361  165D  0671               	xorwf	??_time_date_hex_terminator,w
  7362  165E  0472               	iorwf	??_time_date_hex_terminator+1,w
  7363  165F  1903               	btfsc	3,2
  7364                           
  7365                           ;math_src.c: 39:     val = 0x00;
  7366  1660  01F3               	clrf	time_date_hex_terminator@val
  7367                           
  7368                           ;math_src.c: 41:     return val;
  7369  1661  0873               	movf	time_date_hex_terminator@val,w
  7370  1662  0008               	return
  7371  1663                     __end_of_time_date_hex_terminator:	
  7372                           
  7373                           	psect	text34
  7374  0800                     __ptext34:	
  7375 ;; *************** function _time_date_delimiter *****************
  7376 ;; Defined at:
  7377 ;;		line 27 in file "math_src.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;  val             1    wreg     unsigned char 
  7380 ;;  hex             1    0[COMMON] unsigned char 
  7381 ;;  limiter         1    1[COMMON] unsigned char 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  val             1    4[COMMON] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      unsigned char 
  7386 ;; Registers used:
  7387 ;;		wreg, status,2, status,0
  7388 ;; Tracked objects:
  7389 ;;		On entry : 300/0
  7390 ;;		On exit  : 300/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7393 ;;      Params:         2       0       0       0       0
  7394 ;;      Locals:         1       0       0       0       0
  7395 ;;      Temps:          2       0       0       0       0
  7396 ;;      Totals:         5       0       0       0       0
  7397 ;;Total ram usage:        5 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; This function calls:
  7400 ;;		Nothing
  7401 ;; This function is called by:
  7402 ;;		_time_settings
  7403 ;;		_date_settings
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function _time_date_delimiter
  7409  0800                     _time_date_delimiter:	
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7413                           ;time_date_delimiter@val stored from wreg
  7414  0800  00F4               	movwf	time_date_delimiter@val
  7415                           
  7416                           ;math_src.c: 28:     if((val + '0') == limiter){
  7417  0801  0874               	movf	time_date_delimiter@val,w
  7418  0802  3E30               	addlw	48
  7419  0803  00F2               	movwf	??_time_date_delimiter
  7420  0804  3000               	movlw	0
  7421  0805  1803               	skipnc
  7422  0806  3001               	movlw	1
  7423  0807  00F3               	movwf	??_time_date_delimiter+1
  7424  0808  0871               	movf	time_date_delimiter@limiter,w
  7425  0809  0672               	xorwf	??_time_date_delimiter,w
  7426  080A  0473               	iorwf	??_time_date_delimiter+1,w
  7427  080B  1D03               	skipz
  7428  080C  2819               	goto	l3065
  7429                           
  7430                           ;math_src.c: 29:     val = hex;
  7431  080D  0870               	movf	time_date_delimiter@hex,w
  7432  080E  00F2               	movwf	??_time_date_delimiter
  7433  080F  0872               	movf	??_time_date_delimiter,w
  7434  0810  00F4               	movwf	time_date_delimiter@val
  7435                           
  7436                           ;math_src.c: 30:     stats=0;
  7437  0811  01B1               	clrf	_stats
  7438  0812  01B2               	clrf	_stats+1
  7439                           
  7440                           ;math_src.c: 31:     prev_hex= 0x09;
  7441  0813  3009               	movlw	9
  7442  0814  00F2               	movwf	??_time_date_delimiter
  7443  0815  0872               	movf	??_time_date_delimiter,w
  7444  0816  00CC               	movwf	_prev_hex
  7445                           
  7446                           ;math_src.c: 32:     val--;
  7447  0817  3001               	movlw	1
  7448  0818  02F4               	subwf	time_date_delimiter@val,f
  7449  0819                     l3065:	
  7450                           
  7451                           ;math_src.c: 34:     return val;
  7452  0819  0874               	movf	time_date_delimiter@val,w
  7453  081A  0008               	return
  7454  081B                     __end_of_time_date_delimiter:	
  7455                           
  7456                           	psect	text35
  7457  0841                     __ptext35:	
  7458 ;; *************** function _set_time *****************
  7459 ;; Defined at:
  7460 ;;		line 15 in file "clock_src.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;		None
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;  i               2    5[COMMON] int 
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  1    wreg      void 
  7467 ;; Registers used:
  7468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7469 ;; Tracked objects:
  7470 ;;		On entry : 300/0
  7471 ;;		On exit  : 300/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7474 ;;      Params:         0       0       0       0       0
  7475 ;;      Locals:         2       0       0       0       0
  7476 ;;      Temps:          0       0       0       0       0
  7477 ;;      Totals:         2       0       0       0       0
  7478 ;;Total ram usage:        2 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    1
  7481 ;; This function calls:
  7482 ;;		_time_write_1
  7483 ;; This function is called by:
  7484 ;;		_main
  7485 ;;		_time_settings
  7486 ;;		_date_settings
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           
  7491                           ;psect for function _set_time
  7492  0841                     _set_time:	
  7493                           
  7494                           ;clock_src.c: 17:    int i;;clock_src.c: 18:    RB5=1;
  7495                           
  7496                           ;incstack = 0
  7497                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7498  0841  1686               	bsf	6,5	;volatile
  7499                           
  7500                           ;clock_src.c: 19:    time_write_1(0xbe);
  7501  0842  30BE               	movlw	190
  7502  0843  120A  158A  201B  120A  158A  	fcall	_time_write_1
  7503                           
  7504                           ;clock_src.c: 20:    for(i=0;i<8;i++)
  7505  0848  01F5               	clrf	set_time@i
  7506  0849  01F6               	clrf	set_time@i+1
  7507  084A                     l2843:	
  7508                           
  7509                           ;clock_src.c: 21:      {;clock_src.c: 22:        time_write_1(table[i]);
  7510  084A  0875               	movf	set_time@i,w
  7511  084B  3E68               	addlw	(low (_table| 0))& (0+255)
  7512  084C  0084               	movwf	4
  7513  084D  1383               	bcf	3,7	;select IRP bank0
  7514  084E  0800               	movf	0,w
  7515  084F  120A  158A  201B  120A  158A  	fcall	_time_write_1
  7516                           
  7517                           ;clock_src.c: 23:      }
  7518  0854  3001               	movlw	1
  7519  0855  07F5               	addwf	set_time@i,f
  7520  0856  1803               	skipnc
  7521  0857  0AF6               	incf	set_time@i+1,f
  7522  0858  3000               	movlw	0
  7523  0859  07F6               	addwf	set_time@i+1,f
  7524  085A  0876               	movf	set_time@i+1,w
  7525  085B  3A80               	xorlw	128
  7526  085C  00FF               	movwf	127
  7527  085D  3080               	movlw	128
  7528  085E  027F               	subwf	127,w
  7529  085F  1D03               	skipz
  7530  0860  2863               	goto	u1575
  7531  0861  3008               	movlw	8
  7532  0862  0275               	subwf	set_time@i,w
  7533  0863                     u1575:	
  7534  0863  1C03               	skipc
  7535  0864  284A               	goto	l2843
  7536                           
  7537                           ;clock_src.c: 24:    RB5=0;
  7538  0865  1283               	bcf	3,5	;RP0=0, select bank0
  7539  0866  1303               	bcf	3,6	;RP1=0, select bank0
  7540  0867  1286               	bcf	6,5	;volatile
  7541  0868  0008               	return
  7542  0869                     __end_of_set_time:	
  7543                           
  7544                           	psect	text36
  7545  081B                     __ptext36:	
  7546 ;; *************** function _time_write_1 *****************
  7547 ;; Defined at:
  7548 ;;		line 116 in file "clock_src.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  time_tx         1    wreg     unsigned char 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;  time_tx         1    4[COMMON] unsigned char 
  7553 ;;  j               2    2[COMMON] int 
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		wreg, status,2, status,0, btemp+1
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 300/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7563 ;;      Params:         0       0       0       0       0
  7564 ;;      Locals:         3       0       0       0       0
  7565 ;;      Temps:          2       0       0       0       0
  7566 ;;      Totals:         5       0       0       0       0
  7567 ;;Total ram usage:        5 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; This function calls:
  7570 ;;		Nothing
  7571 ;; This function is called by:
  7572 ;;		_ds1302_init
  7573 ;;		_set_time
  7574 ;;		_get_time
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           
  7579                           ;psect for function _time_write_1
  7580  081B                     _time_write_1:	
  7581                           
  7582                           ;incstack = 0
  7583                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  7584                           ;time_write_1@time_tx stored from wreg
  7585  081B  00F4               	movwf	time_write_1@time_tx
  7586                           
  7587                           ;clock_src.c: 116: void time_write_1(unsigned char time_tx);clock_src.c: 117: {;clock_sr
      +                          c.c: 118:     int j;;clock_src.c: 119:     for(j=0;j<8;j++)
  7588  081C  01F2               	clrf	time_write_1@j
  7589  081D  01F3               	clrf	time_write_1@j+1
  7590  081E                     l354:	
  7591                           
  7592                           ;clock_src.c: 120:    {;clock_src.c: 121:         RB4=0;
  7593  081E  1283               	bcf	3,5	;RP0=0, select bank0
  7594  081F  1303               	bcf	3,6	;RP1=0, select bank0
  7595  0820  1206               	bcf	6,4	;volatile
  7596                           
  7597                           ;clock_src.c: 122:         RB0=0;
  7598  0821  1006               	bcf	6,0	;volatile
  7599                           
  7600                           ;clock_src.c: 123:         if(time_tx&0x01)
  7601  0822  1874               	btfsc	time_write_1@time_tx,0
  7602                           
  7603                           ;clock_src.c: 124:           {;clock_src.c: 125:             RB4=1;
  7604  0823  1606               	bsf	6,4	;volatile
  7605                           
  7606                           ;clock_src.c: 127:         time_tx=time_tx>>1;
  7607  0824  0874               	movf	time_write_1@time_tx,w
  7608  0825  00F0               	movwf	??_time_write_1
  7609  0826  1003               	clrc
  7610  0827  0C70               	rrf	??_time_write_1,w
  7611  0828  00F1               	movwf	??_time_write_1+1
  7612  0829  0871               	movf	??_time_write_1+1,w
  7613  082A  00F4               	movwf	time_write_1@time_tx
  7614                           
  7615                           ;clock_src.c: 128:         RB0=1;
  7616  082B  1406               	bsf	6,0	;volatile
  7617                           
  7618                           ;clock_src.c: 129:     }
  7619  082C  3001               	movlw	1
  7620  082D  07F2               	addwf	time_write_1@j,f
  7621  082E  1803               	skipnc
  7622  082F  0AF3               	incf	time_write_1@j+1,f
  7623  0830  3000               	movlw	0
  7624  0831  07F3               	addwf	time_write_1@j+1,f
  7625  0832  0873               	movf	time_write_1@j+1,w
  7626  0833  3A80               	xorlw	128
  7627  0834  00FF               	movwf	127
  7628  0835  3080               	movlw	128
  7629  0836  027F               	subwf	127,w
  7630  0837  1D03               	skipz
  7631  0838  283B               	goto	u1565
  7632  0839  3008               	movlw	8
  7633  083A  0272               	subwf	time_write_1@j,w
  7634  083B                     u1565:	
  7635  083B  1C03               	skipc
  7636  083C  281E               	goto	l354
  7637                           
  7638                           ;clock_src.c: 130:       RB0=0;
  7639  083D  1283               	bcf	3,5	;RP0=0, select bank0
  7640  083E  1303               	bcf	3,6	;RP1=0, select bank0
  7641  083F  1006               	bcf	6,0	;volatile
  7642  0840  0008               	return
  7643  0841                     __end_of_time_write_1:	
  7644                           
  7645                           	psect	text37
  7646  17B8                     __ptext37:	
  7647 ;; *************** function _incrementor *****************
  7648 ;; Defined at:
  7649 ;;		line 10 in file "math_src.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;  upper_val       2    0[BANK0 ] int 
  7652 ;;  lower_val       2    2[BANK0 ] int 
  7653 ;;  z               1    4[BANK0 ] unsigned char 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;		None
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      unsigned char 
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0, pclath, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 300/0
  7662 ;;		On exit  : 300/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7665 ;;      Params:         0       5       0       0       0
  7666 ;;      Locals:         0       0       0       0       0
  7667 ;;      Temps:          2       0       0       0       0
  7668 ;;      Totals:         2       5       0       0       0
  7669 ;;Total ram usage:        7 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    2
  7672 ;; This function calls:
  7673 ;;		_modulus_func
  7674 ;; This function is called by:
  7675 ;;		_thermometer_threshhold_settings
  7676 ;;		_time_settings
  7677 ;;		_date_settings
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           
  7682                           ;psect for function _incrementor
  7683  17B8                     _incrementor:	
  7684                           
  7685                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  7686                           
  7687                           ;incstack = 0
  7688                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  7689  17B8  085E               	movf	incrementor@lower_val,w
  7690  17B9  3E30               	addlw	48
  7691  17BA  00FB               	movwf	??_incrementor
  7692  17BB  085F               	movf	incrementor@lower_val+1,w
  7693  17BC  1803               	skipnc
  7694  17BD  3E01               	addlw	1
  7695  17BE  3E00               	addlw	0
  7696  17BF  00FC               	movwf	??_incrementor+1
  7697  17C0  0860               	movf	incrementor@z,w
  7698  17C1  067B               	xorwf	??_incrementor,w
  7699  17C2  047C               	iorwf	??_incrementor+1,w
  7700  17C3  1D03               	skipz
  7701  17C4  2FDA               	goto	l3033
  7702                           
  7703                           ;math_src.c: 12:      upper_val++;
  7704  17C5  3001               	movlw	1
  7705  17C6  07DC               	addwf	incrementor@upper_val,f
  7706  17C7  1803               	skipnc
  7707  17C8  0ADD               	incf	incrementor@upper_val+1,f
  7708  17C9  3000               	movlw	0
  7709  17CA  07DD               	addwf	incrementor@upper_val+1,f
  7710                           
  7711                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  7712  17CB  085D               	movf	incrementor@upper_val+1,w
  7713  17CC  00F8               	movwf	modulus_func@x+1
  7714  17CD  085C               	movf	incrementor@upper_val,w
  7715  17CE  00F7               	movwf	modulus_func@x
  7716  17CF  300A               	movlw	10
  7717  17D0  00F9               	movwf	modulus_func@y
  7718  17D1  3000               	movlw	0
  7719  17D2  00FA               	movwf	modulus_func@y+1
  7720  17D3  160A  118A  2672   	fcall	_modulus_func
  7721  17D6  0878               	movf	?_modulus_func+1,w
  7722  17D7  00DD               	movwf	incrementor@upper_val+1
  7723  17D8  0877               	movf	?_modulus_func,w
  7724  17D9  00DC               	movwf	incrementor@upper_val
  7725  17DA                     l3033:	
  7726                           
  7727                           ;math_src.c: 15:      return upper_val;
  7728  17DA  085C               	movf	incrementor@upper_val,w
  7729  17DB  0008               	return
  7730  17DC                     __end_of_incrementor:	
  7731                           
  7732                           	psect	text38
  7733  1672                     __ptext38:	
  7734 ;; *************** function _modulus_func *****************
  7735 ;; Defined at:
  7736 ;;		line 5 in file "math_src.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  x               2    7[COMMON] int 
  7739 ;;  y               2    9[COMMON] int 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;		None
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  2    7[COMMON] int 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0, pclath, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : 300/0
  7748 ;;		On exit  : 300/0
  7749 ;;		Unchanged: 300/0
  7750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7751 ;;      Params:         4       0       0       0       0
  7752 ;;      Locals:         0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0
  7754 ;;      Totals:         4       0       0       0       0
  7755 ;;Total ram usage:        4 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    1
  7758 ;; This function calls:
  7759 ;;		___awmod
  7760 ;; This function is called by:
  7761 ;;		_main
  7762 ;;		_thermometer_threshhold_settings
  7763 ;;		_time_settings
  7764 ;;		_date_settings
  7765 ;;		_incrementor
  7766 ;;		_decrementor
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _modulus_func
  7772  1672                     _modulus_func:	
  7773                           
  7774                           ;math_src.c: 6:     x = x % y;
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  7778  1672  087A               	movf	modulus_func@y+1,w
  7779  1673  00F1               	movwf	___awmod@divisor+1
  7780  1674  0879               	movf	modulus_func@y,w
  7781  1675  00F0               	movwf	___awmod@divisor
  7782  1676  0878               	movf	modulus_func@x+1,w
  7783  1677  00F3               	movwf	___awmod@dividend+1
  7784  1678  0877               	movf	modulus_func@x,w
  7785  1679  00F2               	movwf	___awmod@dividend
  7786  167A  120A  158A  2209   	fcall	___awmod
  7787  167D  0871               	movf	?___awmod+1,w
  7788  167E  00F8               	movwf	modulus_func@x+1
  7789  167F  0870               	movf	?___awmod,w
  7790  1680  00F7               	movwf	modulus_func@x
  7791                           
  7792                           ;math_src.c: 7:     return x;
  7793  1681  0008               	return
  7794  1682                     __end_of_modulus_func:	
  7795                           
  7796                           	psect	text39
  7797  0A09                     __ptext39:	
  7798 ;; *************** function ___awmod *****************
  7799 ;; Defined at:
  7800 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;  divisor         2    0[COMMON] int 
  7803 ;;  dividend        2    2[COMMON] int 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  sign            1    6[COMMON] unsigned char 
  7806 ;;  counter         1    5[COMMON] unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  2    0[COMMON] int 
  7809 ;; Registers used:
  7810 ;;		wreg, status,2, status,0
  7811 ;; Tracked objects:
  7812 ;;		On entry : 300/0
  7813 ;;		On exit  : 300/0
  7814 ;;		Unchanged: 300/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7816 ;;      Params:         4       0       0       0       0
  7817 ;;      Locals:         2       0       0       0       0
  7818 ;;      Temps:          1       0       0       0       0
  7819 ;;      Totals:         7       0       0       0       0
  7820 ;;Total ram usage:        7 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_modulus_func
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           
  7830                           ;psect for function ___awmod
  7831  0A09                     ___awmod:	
  7832                           
  7833                           ;incstack = 0
  7834                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7835  0A09  01F6               	clrf	___awmod@sign
  7836  0A0A  1FF3               	btfss	___awmod@dividend+1,7
  7837  0A0B  2A13               	goto	l2765
  7838  0A0C  09F2               	comf	___awmod@dividend,f
  7839  0A0D  09F3               	comf	___awmod@dividend+1,f
  7840  0A0E  0AF2               	incf	___awmod@dividend,f
  7841  0A0F  1903               	skipnz
  7842  0A10  0AF3               	incf	___awmod@dividend+1,f
  7843  0A11  01F6               	clrf	___awmod@sign
  7844  0A12  0AF6               	incf	___awmod@sign,f
  7845  0A13                     l2765:	
  7846  0A13  1FF1               	btfss	___awmod@divisor+1,7
  7847  0A14  2A1A               	goto	l2769
  7848  0A15  09F0               	comf	___awmod@divisor,f
  7849  0A16  09F1               	comf	___awmod@divisor+1,f
  7850  0A17  0AF0               	incf	___awmod@divisor,f
  7851  0A18  1903               	skipnz
  7852  0A19  0AF1               	incf	___awmod@divisor+1,f
  7853  0A1A                     l2769:	
  7854  0A1A  0870               	movf	___awmod@divisor,w
  7855  0A1B  0471               	iorwf	___awmod@divisor+1,w
  7856  0A1C  1903               	btfsc	3,2
  7857  0A1D  2A47               	goto	l2787
  7858  0A1E  01F5               	clrf	___awmod@counter
  7859  0A1F  0AF5               	incf	___awmod@counter,f
  7860  0A20                     l2777:	
  7861  0A20  1BF1               	btfsc	___awmod@divisor+1,7
  7862  0A21  2A2E               	goto	l2779
  7863  0A22  3001               	movlw	1
  7864  0A23                     u1465:	
  7865  0A23  1003               	clrc
  7866  0A24  0DF0               	rlf	___awmod@divisor,f
  7867  0A25  0DF1               	rlf	___awmod@divisor+1,f
  7868  0A26  3EFF               	addlw	-1
  7869  0A27  1D03               	skipz
  7870  0A28  2A23               	goto	u1465
  7871  0A29  3001               	movlw	1
  7872  0A2A  00F4               	movwf	??___awmod
  7873  0A2B  0874               	movf	??___awmod,w
  7874  0A2C  07F5               	addwf	___awmod@counter,f
  7875  0A2D  2A20               	goto	l2777
  7876  0A2E                     l2779:	
  7877  0A2E  0871               	movf	___awmod@divisor+1,w
  7878  0A2F  0273               	subwf	___awmod@dividend+1,w
  7879  0A30  1D03               	skipz
  7880  0A31  2A34               	goto	u1485
  7881  0A32  0870               	movf	___awmod@divisor,w
  7882  0A33  0272               	subwf	___awmod@dividend,w
  7883  0A34                     u1485:	
  7884  0A34  1C03               	skipc
  7885  0A35  2A3C               	goto	l2783
  7886  0A36  0870               	movf	___awmod@divisor,w
  7887  0A37  02F2               	subwf	___awmod@dividend,f
  7888  0A38  0871               	movf	___awmod@divisor+1,w
  7889  0A39  1C03               	skipc
  7890  0A3A  03F3               	decf	___awmod@dividend+1,f
  7891  0A3B  02F3               	subwf	___awmod@dividend+1,f
  7892  0A3C                     l2783:	
  7893  0A3C  3001               	movlw	1
  7894  0A3D                     u1495:	
  7895  0A3D  1003               	clrc
  7896  0A3E  0CF1               	rrf	___awmod@divisor+1,f
  7897  0A3F  0CF0               	rrf	___awmod@divisor,f
  7898  0A40  3EFF               	addlw	-1
  7899  0A41  1D03               	skipz
  7900  0A42  2A3D               	goto	u1495
  7901  0A43  3001               	movlw	1
  7902  0A44  02F5               	subwf	___awmod@counter,f
  7903  0A45  1D03               	btfss	3,2
  7904  0A46  2A2E               	goto	l2779
  7905  0A47                     l2787:	
  7906  0A47  0876               	movf	___awmod@sign,w
  7907  0A48  1903               	btfsc	3,2
  7908  0A49  2A4F               	goto	l2791
  7909  0A4A  09F2               	comf	___awmod@dividend,f
  7910  0A4B  09F3               	comf	___awmod@dividend+1,f
  7911  0A4C  0AF2               	incf	___awmod@dividend,f
  7912  0A4D  1903               	skipnz
  7913  0A4E  0AF3               	incf	___awmod@dividend+1,f
  7914  0A4F                     l2791:	
  7915  0A4F  0873               	movf	___awmod@dividend+1,w
  7916  0A50  00F1               	movwf	?___awmod+1
  7917  0A51  0872               	movf	___awmod@dividend,w
  7918  0A52  00F0               	movwf	?___awmod
  7919  0A53  0008               	return
  7920  0A54                     __end_of___awmod:	
  7921                           
  7922                           	psect	text40
  7923  1693                     __ptext40:	
  7924 ;; *************** function _button_delay *****************
  7925 ;; Defined at:
  7926 ;;		line 586 in file "Button_src.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  i               2    0[COMMON] int 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2, btemp+1
  7935 ;; Tracked objects:
  7936 ;;		On entry : 300/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7940 ;;      Params:         0       0       0       0       0
  7941 ;;      Locals:         2       0       0       0       0
  7942 ;;      Temps:          0       0       0       0       0
  7943 ;;      Totals:         2       0       0       0       0
  7944 ;;Total ram usage:        2 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_set_beep_threshhold
  7950 ;;		_thermometer_threshhold_settings
  7951 ;;		_time_settings
  7952 ;;		_date_settings
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           
  7957                           ;psect for function _button_delay
  7958  1693                     _button_delay:	
  7959                           
  7960                           ;Button_src.c: 587:     for(int i=0;i<10000;i++);
  7961                           
  7962                           ;incstack = 0
  7963                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  7964  1693  01F0               	clrf	button_delay@i
  7965  1694  01F1               	clrf	button_delay@i+1
  7966  1695                     l3023:	
  7967  1695  3001               	movlw	1
  7968  1696  07F0               	addwf	button_delay@i,f
  7969  1697  1803               	skipnc
  7970  1698  0AF1               	incf	button_delay@i+1,f
  7971  1699  3000               	movlw	0
  7972  169A  07F1               	addwf	button_delay@i+1,f
  7973  169B  0871               	movf	button_delay@i+1,w
  7974  169C  3A80               	xorlw	128
  7975  169D  00FF               	movwf	127
  7976  169E  30A7               	movlw	167
  7977  169F  027F               	subwf	127,w
  7978  16A0  1D03               	skipz
  7979  16A1  2EA4               	goto	u1675
  7980  16A2  3010               	movlw	16
  7981  16A3  0270               	subwf	button_delay@i,w
  7982  16A4                     u1675:	
  7983  16A4  1803               	btfsc	3,0
  7984  16A5  0008               	return
  7985  16A6  2E95               	goto	l3023
  7986  16A7                     __end_of_button_delay:	
  7987  007E                     btemp	set	126	;btemp
  7988  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   38743
                                             10 BANK0      2     2      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   10434
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  6     2      4     264
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  6     2      4     286
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   10434
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  5     3      2    3130
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Dec 10 23:57:56 2019

                                       _a 0051                                         _b 0050  
                                       _c 004F                                         _p 002F  
                                       _t 0041                                         _w 003F  
                                       _x 003D                                         _y 003B  
                                       _z 0039                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 0058                                        _TZ 0059  
                                      _ge 0056                                        _wd 0043  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 1713  
                           ?_display_date 0070                                       l301 1647  
                                     l360 089B                                       l354 081E  
                                     l611 0686                                       l604 0542  
                                     l613 06B3                                       l605 054A  
                                     l560 0FF5                                       l554 0F4D  
                                     l570 0168                                       l581 02E2  
                                     l590 03E2                                       l559 0FB0  
                                     l575 01D5                                       l567 00FA  
                                     l592 0448                                       l584 036F  
                                     l576 01DD                                       l593 0450  
                                     l569 0160                                       l598 04BC  
                                     l599 04C4                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005A  
                           ?_display_temp 0070                                       _TLV 005B  
                                     _shi 0057                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0061  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l3023 1695                                      l1087 178F  
                                    l3007 08AC                                      l3033 17DA  
                                    l3121 09D5                                      l4011 0065  
                                    l3123 09E3                                      l3043 17FE  
                                    l3133 0A04                                      l4031 00D8  
                                    l4023 00AA                                      l4015 007C  
                                    l3151 08E7                                      l3065 0819  
                                    l4009 0053                                      l3081 1761  
                                    l3129 09F9                                      l3145 08CB  
                                    l3241 0C0B                                      l4121 0D76  
                                    l3323 0A5E                                      l4027 00C1  
                                    l4019 0093                                      l3091 1770  
                                    l3147 08D9                                      l3155 08F2  
                                    l4051 0CAD                                      l3253 0C29  
                                    l3245 0C15                                      l3079 1758  
                                    l3407 0F03                                      l3601 0594  
                                    l3249 0C1F                                      l3273 0874  
                                    l3603 0599                                      l3523 0484  
                                    l3099 1778                                      l3285 0AF4  
                                    l2813 164B                                      l3461 0FBD  
                                    l3437 0F39                                      l2807 16A9  
                                    l3535 04A7                                      l3527 048D  
                                    l3633 067E                                      l3561 0512  
                                    l3537 04AC                                      l2843 084A  
                                    l3571 0532                                      l2915 0979  
                                    l3379 0EA4                                      l3803 01C0  
                                    l2765 0A13                                      l3557 0509  
                                    l3805 01C5                                      l2791 0A4F  
                                    l2783 0A3C                                      l3823 0211  
                                    l2777 0A20                                      l2769 0A1A  
                                    l3729 0792                                      l3593 0587  
                                    l3569 052D                                      l2937 08FC  
                                    l2779 0A2E                                      l2787 0A47  
                                    l2883 0953                                      l3827 021A  
                                    l3669 0709                                      l3589 057E  
                                    l2885 0954                                      l3837 023E  
                                    l2887 092D                                      l2895 0964  
                                    l3839 0243                                      l3791 019C  
                                    l3699 074C                                      l3955 001D  
                                    l3795 01A5                                      l2989 16BD  
                                    l3957 002A                                      l3993 172C  
                          ?_display_clock 0070                                      l3899 0332  
                                    u2055 0F4A                                      u1525 16B8  
                                    u1465 0A23                                      u1485 0A34  
                                    u1565 083B                                      u1805 09D8  
                                    u1645 16CC                                      u1495 0A3D  
                                    u1575 0863                                      u1825 09E4  
                                    u1905 08E8                                      u1665 08BC  
                                    u2705 0028                                      u1675 16A4  
                                    u1835 09F0                                      u2715 099E  
                                    u1765 177B                                      u1845 09FA  
                                    u1925 0BC3                                      u2725 09A9  
                                    u1935 0BCE                                      u1945 0BDB  
                                    u1875 08CE                                      u2685 0010  
                                    u2845 0D8B                                      u1895 08DF  
                                    u2695 001B                                      u1995 088F  
             time_date_hex_terminator@val 0073                      ?_set_beep_threshhold 0070  
                                    _main 0C87                                      _init 1621  
                                    _var1 0047                                      _var2 0046  
                                    btemp 007E           time_date_hex_terminator@limiter 0070  
                           write_byte@val 0077                                      start 0000  
                  time_date_delimiter@hex 0070                    time_date_delimiter@val 0074  
                            ?_incrementor 005C               __size_of_initialise_buttons 0016  
                          ??_display_date 0073                                     ?_main 0070  
                          ??_display_temp 0073                                     ?_init 0070  
                         __end_of___lbdiv 1772                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0A54                           __end_of___lbmod 1795  
                    __end_of_delay_screen 16BB                           __end_of___lwdiv 0A09  
                         __end_of___lwmod 08F7                                     _PORTD 0008  
                                   _PORTE 0009                                     _TRISA 0085  
                                   _TRISB 0086                                     _TRISC 0087  
                                   _TRISD 0088                                     _TRISE 0089  
                           __CFG_PWRTE$ON 0000                                     _count 0029  
                                   _table 0068                                     _stats 0031  
                                   main@i 0066                            write_byte@temp 0076  
                     _set_lower_threshold 0007                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                     ??_set_beep_threshhold 0072  
                                   status 0003                      __size_of_decrementor 0024  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                         __initialization 07E8                              __end_of_main 0DAA  
                            __end_of_init 1629                     __end_of_date_settings 07E8  
                    ?_set_lower_threshold 0073                                    ??_main 007E  
                                  ??_init 0070                      incrementor@lower_val 005E  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 005C  
                        __end_of_lcd_init 17B8                          __end_of_get_temp 0C87  
                        __end_of_get_time 0895                                    _baifen 0054  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 16BB                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 1672  
                     _set_upper_threshold 0995                                    _table1 0020  
                         ___awmod@divisor 0070                                    _shifen 0055  
                                  _wanfen 0052                           ___awmod@counter 0075  
                    __size_of_display_day 00A3                              ?_time_read_1 0070  
                     time_write_1@time_tx 0074                             display_date@i 0075  
                        __end_of_set_time 0869                        reset_temp@presence 0075  
                        ___lbdiv@dividend 0072                      ?_set_upper_threshold 0073  
                         ___lbmod@divisor 0070                   __end_of__initialization 07FC  
                         ___lbmod@counter 0075                            ??_button_delay 0070  
            __size_of_time_date_delimiter 001B                      __end_of_display_date 0B80  
                    __end_of_display_temp 1751                            __pcstackCOMMON 0070  
                            __pidataBANK0 1631                     __size_of_delay_screen 0014  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                                __pbssBANK0 0020  
                            _delay_screen 16A7                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1663  
                              _delay_temp 1646                                __pmaintext 0C87  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0060  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 03D4                                 ?_get_time 0070  
                      __size_of_write_cmd 0017                                 ?_set_time 0070  
                    __size_of_reset_alarm 000D                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 16E5  
                _time_date_hex_terminator 1654                                   ___lbdiv 1751  
                                 ___awmod 0A09                                   ___lbmod 1772  
                         __size_of_delay2 0014                                   ___lwdiv 09CD  
                                 ___lwmod 08C5                                   _day_hex 004E  
                                 _day_low 0037                                   __ptext1 00EE  
                                 __ptext2 0DAA                                   __ptext3 17DC  
                                 __ptext4 0995                                   __ptext5 0007  
                                 __ptext6 1713                                   __ptext7 1639  
                                 __ptext8 1795                                   __ptext9 16CF  
                    __end_of_button_delay 16A7                                   delay2@i 0070  
                       __end_of_init_temp 1621                          ___awmod@dividend 0072  
                       __end_of_read_byte 092B                                   _qianfen 0053  
                    __size_of_time_read_1 0030                                   _lower_t 004A  
             __end_of_set_beep_threshhold 1730              set_upper_threshold@upper_val 0073  
                   __size_of_display_date 0096                                   clrloop0 162A  
                              ??_lcd_init 0073                                   _upper_t 004B  
                           ??_decrementor 007B                                ??_get_temp 005C  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 092B  
                              ??_set_time 0075                       _time_date_delimiter 0800  
                    decrementor@lower_val 005C                              _display_date 0AEA  
                            _display_temp 1730                         __end_of_write_cmd 1713  
                        ___lbmod@dividend 0074                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 0AEA  
                  __size_of_date_settings 0414                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                      decrementor@upper_val 005E  
                          ??_time_write_1 0070               __end_of_set_lower_threshold 004B  
                     __end_of_decrementor 1800                             ??_display_day 0075  
                          __end_of_delay2 16CF                                _write_char 16E5  
                              _write_byte 095F                            _var_night_high 002B  
                     start_initialization 07E8                             delay_screen@i 0070  
                     __size_of_delay_temp 000E                      __end_of_modulus_func 1682  
                   ??_time_date_delimiter 0072                              ?_ds1302_init 0070  
                             ?_reset_temp 0070                             ??_incrementor 007B  
                              init_fetch0 1682                                  ??_delay2 0070  
                   __size_of_button_delay 0014                             _date_settings 03D4  
                             __pdataBANK0 0068                                read_byte@i 0076  
                              read_byte@j 0045               __end_of_set_upper_threshold 09CD  
                     __end_of_display_day 00EE                                 ___latbits 0002  
                           __pcstackBANK0 005C                               _decrementor 17DC  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 1693  
                        ___lwdiv@dividend 0078                               _day_counter 0027  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                               ?_write_char 0070  
                             ?_write_byte 0070                       __end_of_incrementor 17DC  
                    __end_of_time_write_1 0841                        _initialise_buttons 16CF  
                         _day_of_week_var 0033                       __size_of_reset_temp 0034  
                        ___lwdiv@quotient 007B                                 _init_temp 161C  
                               _read_byte 08F7                              decrementor@z 0060  
                     ?_initialise_buttons 0070                                 clear_ram0 1629  
                           ??_reset_alarm 0070                              ??_delay_temp 0071  
                             _display_day 004B   __end_of_thermometer_threshhold_settings 1000  
__size_of_thermometer_threshhold_settings 0256         ??_thermometer_threshhold_settings 0061  
        ?_thermometer_threshhold_settings 0070           _thermometer_threshhold_settings 0DAA  
                    ??_initialise_buttons 0070                    __size_of_time_settings 02E6  
        thermometer_threshhold_settings@i 0064                             ??_time_read_1 0070  
                             write_char@x 0072                     __size_of_modulus_func 0010  
                               get_time@i 0076                               write_byte@i 0078  
                      __end_of_delay_temp 1654                                 _write_cmd 16FC  
                              ?_init_temp 0070                                ?_read_byte 0070  
                           _var_night_low 002D                           _buzzer_watcher1 0048  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 001D  
                     __size_of_write_byte 0036                           ??_date_settings 0061  
                    __size_of_ds1302_init 000F                               _incrementor 17B8  
                            _modulus_func 1672                       __end_of_reset_alarm 1646  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0035  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 161C                                  __ptext11 1621  
                                __ptext20 08C5                                  __ptext12 0869  
                                __ptext21 09CD                                  __ptext13 0895  
                                __ptext30 16FC                                  __ptext22 1772  
                                __ptext14 0B80                                  __ptext31 16E5  
                                __ptext23 1751                                  __ptext15 095F  
                                __ptext40 1693                                  __ptext32 16A7  
                                __ptext24 1663                                  __ptext16 092B  
                                __ptext33 1654                                  __ptext25 1730  
                                __ptext17 08F7                                  __ptext34 0800  
                                __ptext26 004B                                  __ptext18 1646  
                                __ptext35 0841                                  __ptext27 0AEA  
                                __ptext19 16BB                                  __ptext36 081B  
                                __ptext28 0A54                                  __ptext37 17B8  
                                __ptext29 03D4                                  __ptext38 1672  
                                __ptext39 0A09                       __end_of_time_read_1 08C5  
                              ?_write_cmd 0070                                  _lcd_init 1795  
                                _get_temp 0B80                                  _get_time 0869  
                           _time_settings 00EE          __end_of_time_date_hex_terminator 1663  
                           __size_of_main 0123                             __size_of_init 0008  
                           ?_delay_screen 0070                               _hrs_limiter 004D  
                               set_time@i 0075                              ??_reset_temp 0074  
                                _set_time 0841                                  _prev_hex 004C  
              time_date_delimiter@limiter 0071              __size_of_set_lower_threshold 0044  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 0096                            _buzzer_watcher 0049  
                             delay_temp@x 0072                               delay_temp@y 0070  
                             delay_temp@z 0073                            read_byte@value 0075  
             __end_of_time_date_delimiter 081B                                  init_ram0 1686  
                           button_delay@i 0070                               ??_init_temp 0070  
                      __end_of_reset_temp 095F                               ??_read_byte 0074  
                          ?_time_settings 0070                              ?_decrementor 005C  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 1639                              _time_write_1 081B  
                            ??_write_char 0072                              ??_write_byte 0074  
                              _OPTION_REG 0081                               _time_read_1 0895  
                            time_read_1@j 0072                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0075                               ??_write_cmd 0072  
            __size_of_set_upper_threshold 0038                             _display_clock 0A54  
                           time_write_1@j 0072                        __end_of_write_char 16FC  
                      __end_of_write_byte 0995  
