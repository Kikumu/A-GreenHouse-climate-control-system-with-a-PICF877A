

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 11 14:43:16 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  1400                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  1400  3400               	retlw	0
   696  1401  3402               	retlw	2
   697  1402  3400               	retlw	0
   698  1403  3412               	retlw	18
   699  1404  3412               	retlw	18
   700  1405  3406               	retlw	6
   701  1406  3419               	retlw	25
   702  1407  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003E                     _RC6	set	62
   706  003F                     _RC7	set	63
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30B0               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3014               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  3000               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30A8               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  2448  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30A8               	movlw	low (__pbssBANK1+8)
   756  07F1  160A  118A  23F8  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  305F               	movlw	low (__pbssBANK0+63)
   762  07F9  160A  118A  23F8   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2C12   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _table1:	
   773  0020                     	ds	7
   774  0027                     _day_counter:	
   775  0027                     	ds	2
   776  0029                     _p:	
   777  0029                     	ds	2
   778  002B                     _stats:	
   779  002B                     	ds	2
   780  002D                     _day_high:	
   781  002D                     	ds	2
   782  002F                     _day_low:	
   783  002F                     	ds	2
   784  0031                     _z:	
   785  0031                     	ds	2
   786  0033                     _y:	
   787  0033                     	ds	2
   788  0035                     _x:	
   789  0035                     	ds	2
   790  0037                     _w:	
   791  0037                     	ds	2
   792  0039                     _t:	
   793  0039                     	ds	2
   794  003B                     _count:	
   795  003B                     	ds	2
   796  003D                     _wd:	
   797  003D                     	ds	2
   798  003F                     read_byte@j:	
   799  003F                     	ds	1
   800  0040                     _prev_hex_mins:	
   801  0040                     	ds	1
   802  0041                     _prev_hex_hours:	
   803  0041                     	ds	1
   804  0042                     _prev_hex_year:	
   805  0042                     	ds	1
   806  0043                     _prev_hex_day:	
   807  0043                     	ds	1
   808  0044                     _prev_hex:	
   809  0044                     	ds	1
   810  0045                     _hrs_limiter:	
   811  0045                     	ds	1
   812  0046                     _day_hex:	
   813  0046                     	ds	1
   814  0047                     _c:	
   815  0047                     	ds	1
   816  0048                     _b:	
   817  0048                     	ds	1
   818  0049                     _a:	
   819  0049                     	ds	1
   820  004A                     _temp_high:	
   821  004A                     	ds	1
   822  004B                     _temp_low:	
   823  004B                     	ds	1
   824  004C                     _alarm__:	
   825  004C                     	ds	1
   826  004D                     _var2:	
   827  004D                     	ds	1
   828  004E                     _var1:	
   829  004E                     	ds	1
   830  004F                     _cooler_state:	
   831  004F                     	ds	1
   832  0050                     _heater_state:	
   833  0050                     	ds	1
   834  0051                     _buzzer_watcher1:	
   835  0051                     	ds	1
   836  0052                     _buzzer_watcher:	
   837  0052                     	ds	1
   838  0053                     _lower_t:	
   839  0053                     	ds	1
   840  0054                     _upper_t:	
   841  0054                     	ds	1
   842  0055                     _wanfen:	
   843  0055                     	ds	1
   844  0056                     _qianfen:	
   845  0056                     	ds	1
   846  0057                     _baifen:	
   847  0057                     	ds	1
   848  0058                     _shifen:	
   849  0058                     	ds	1
   850  0059                     _ge:	
   851  0059                     	ds	1
   852  005A                     _shi:	
   853  005A                     	ds	1
   854  005B                     _TX:	
   855  005B                     	ds	1
   856  005C                     _TZ:	
   857  005C                     	ds	1
   858  005D                     _THV:	
   859  005D                     	ds	1
   860  005E                     _TLV:	
   861  005E                     	ds	1
   862                           
   863                           	psect	bssBANK1
   864  00A0                     __pbssBANK1:	
   865  00A0                     _d_type:	
   866  00A0                     	ds	2
   867  00A2                     _day_of_week_var:	
   868  00A2                     	ds	2
   869  00A4                     _var_night_high:	
   870  00A4                     	ds	2
   871  00A6                     _var_night_low:	
   872  00A6                     	ds	2
   873                           
   874                           	psect	dataBANK1
   875  00A8                     __pdataBANK1:	
   876  00A8                     _table:	
   877  00A8                     	ds	8
   878                           
   879                           	psect	inittext
   880  1444                     init_fetch0:	
   881                           ;	Called with low address in FSR and high address in W
   882                           
   883  1444  087E               	movf	126,w
   884  1445  008A               	movwf	10
   885  1446  087F               	movf	127,w
   886  1447  0082               	movwf	2
   887  1448                     init_ram0:	
   888                           ;Called with:
   889                           ;	high address of idata address in btemp 
   890                           ;	low address of idata address in btemp+1 
   891                           ;	low address of data in FSR
   892                           ;	high address + 1 of data in btemp-1
   893                           
   894  1448  2444  160A  118A   	fcall	init_fetch0
   895  144B  0080               	movwf	0
   896  144C  0A84               	incf	4,f
   897  144D  0804               	movf	4,w
   898  144E  067D               	xorwf	125,w
   899  144F  1903               	btfsc	3,2
   900  1450  3400               	retlw	0
   901  1451  0AFF               	incf	127,f
   902  1452  1903               	btfsc	3,2
   903  1453  0AFE               	incf	126,f
   904  1454  2C48               	goto	init_ram0
   905                           
   906                           	psect	clrtext
   907  13F8                     clear_ram0:	
   908                           ;	Called with FSR containing the base address, and
   909                           ;	W with the last address+1
   910                           
   911  13F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   912  13F9                     clrloop0:	
   913  13F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   914  13FA  0A84               	incf	4,f	;increment pointer
   915  13FB  0604               	xorwf	4,w	;XOR with final address
   916  13FC  1903               	btfsc	3,2	;have we reached the end yet?
   917  13FD  3400               	retlw	0	;all done for this memory range, return
   918  13FE  0604               	xorwf	4,w	;XOR again to restore value
   919  13FF  2BF9               	goto	clrloop0	;do the next byte
   920                           
   921                           	psect	cstackCOMMON
   922  0070                     __pcstackCOMMON:	
   923  0070                     ?_init_temp:	
   924  0070                     ??_init_temp:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_set_time:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_ds1302_init:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_init:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ??_init:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_lcd_init:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_initialise_buttons:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ??_initialise_buttons:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?_get_temp:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_get_time:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_write_cmd:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_write_char:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_display_temp:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_display_date:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_display_clock:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_thermometer_threshhold_settings:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_date_settings:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_time_settings:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_reset_alarm:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_set_beep_threshhold:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?_delay_screen:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ??_delay_screen:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_delay_temp:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_delay2:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ??_delay2:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ?_time_write_1:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ??_time_write_1:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?_time_read_1:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ??_time_read_1:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_button_delay:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ??_button_delay:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_time_date_hex_terminator:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ?_time_date_delimiter:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_main:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_reset_temp:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_write_byte:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_read_byte:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?___lbdiv:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?___lbmod:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?___awmod:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?___lwmod:	
  1045                           ; 2 bytes @ 0x0
  1046                           
  1047  0070                     delay_temp@y:	
  1048                           ; 2 bytes @ 0x0
  1049                           
  1050  0070                     time_date_delimiter@hex:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     time_date_hex_terminator@limiter:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ___lbdiv@divisor:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ___lbmod@divisor:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     delay_screen@i:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     delay2@i:	
  1066                           ; 2 bytes @ 0x0
  1067                           
  1068  0070                     button_delay@i:	
  1069                           ; 2 bytes @ 0x0
  1070                           
  1071  0070                     ___awmod@divisor:	
  1072                           ; 2 bytes @ 0x0
  1073                           
  1074  0070                     ___lwmod@divisor:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 2 bytes @ 0x0
  1079  0070                     	ds	1
  1080  0071                     ??_delay_temp:	
  1081  0071                     ??_time_date_hex_terminator:	
  1082                           ; 1 bytes @ 0x1
  1083                           
  1084  0071                     ??___lbdiv:	
  1085                           ; 1 bytes @ 0x1
  1086                           
  1087  0071                     ??___lbmod:	
  1088                           ; 1 bytes @ 0x1
  1089                           
  1090  0071                     time_date_delimiter@limiter:	
  1091                           ; 1 bytes @ 0x1
  1092                           
  1093                           
  1094                           ; 1 bytes @ 0x1
  1095  0071                     	ds	1
  1096  0072                     ??_write_cmd:	
  1097  0072                     ??_write_char:	
  1098                           ; 1 bytes @ 0x2
  1099                           
  1100  0072                     ??_set_beep_threshhold:	
  1101                           ; 1 bytes @ 0x2
  1102                           
  1103  0072                     write_char@x:	
  1104                           ; 1 bytes @ 0x2
  1105                           
  1106  0072                     write_cmd@x:	
  1107                           ; 1 bytes @ 0x2
  1108                           
  1109  0072                     delay_temp@x:	
  1110                           ; 1 bytes @ 0x2
  1111                           
  1112  0072                     set_beep_threshhold@x:	
  1113                           ; 1 bytes @ 0x2
  1114                           
  1115  0072                     ___lbdiv@dividend:	
  1116                           ; 1 bytes @ 0x2
  1117                           
  1118  0072                     time_write_1@j:	
  1119                           ; 1 bytes @ 0x2
  1120                           
  1121  0072                     time_read_1@j:	
  1122                           ; 2 bytes @ 0x2
  1123                           
  1124  0072                     time_date_delimiter@type:	
  1125                           ; 2 bytes @ 0x2
  1126                           
  1127  0072                     ___awmod@dividend:	
  1128                           ; 2 bytes @ 0x2
  1129                           
  1130  0072                     ___lwmod@dividend:	
  1131                           ; 2 bytes @ 0x2
  1132                           
  1133                           
  1134                           ; 2 bytes @ 0x2
  1135  0072                     	ds	1
  1136  0073                     ??_lcd_init:	
  1137  0073                     ??_display_temp:	
  1138                           ; 1 bytes @ 0x3
  1139                           
  1140  0073                     ??_display_date:	
  1141                           ; 1 bytes @ 0x3
  1142                           
  1143  0073                     ??_display_clock:	
  1144                           ; 1 bytes @ 0x3
  1145                           
  1146  0073                     ?_set_lower_threshold:	
  1147                           ; 1 bytes @ 0x3
  1148                           
  1149  0073                     ?_set_upper_threshold:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     ??_reset_alarm:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155  0073                     ?_display_day:	
  1156                           ; 1 bytes @ 0x3
  1157                           
  1158  0073                     delay_temp@z:	
  1159                           ; 1 bytes @ 0x3
  1160                           
  1161  0073                     time_date_hex_terminator@val:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164  0073                     ___lbdiv@counter:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167  0073                     set_upper_threshold@upper_val:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0073                     set_lower_threshold@upper_val:	
  1171                           ; 2 bytes @ 0x3
  1172                           
  1173  0073                     display_day@num:	
  1174                           ; 2 bytes @ 0x3
  1175                           
  1176                           
  1177                           ; 2 bytes @ 0x3
  1178  0073                     	ds	1
  1179  0074                     ??_time_date_delimiter:	
  1180  0074                     ??_reset_temp:	
  1181                           ; 1 bytes @ 0x4
  1182                           
  1183  0074                     ??_write_byte:	
  1184                           ; 1 bytes @ 0x4
  1185                           
  1186  0074                     ??_read_byte:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189  0074                     ??___awmod:	
  1190                           ; 1 bytes @ 0x4
  1191                           
  1192  0074                     ??___lwmod:	
  1193                           ; 1 bytes @ 0x4
  1194                           
  1195  0074                     time_write_1@time_tx:	
  1196                           ; 1 bytes @ 0x4
  1197                           
  1198  0074                     time_read_1@time_rx:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     ___lbdiv@quotient:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     ___lbmod@dividend:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207                           
  1208                           ; 1 bytes @ 0x4
  1209  0074                     	ds	1
  1210  0075                     ??_set_time:	
  1211  0075                     ??_ds1302_init:	
  1212                           ; 1 bytes @ 0x5
  1213                           
  1214  0075                     ??_get_time:	
  1215                           ; 1 bytes @ 0x5
  1216                           
  1217  0075                     ??_display_day:	
  1218                           ; 1 bytes @ 0x5
  1219                           
  1220  0075                     reset_temp@presence:	
  1221                           ; 1 bytes @ 0x5
  1222                           
  1223  0075                     read_byte@value:	
  1224                           ; 1 bytes @ 0x5
  1225                           
  1226  0075                     ___awmod@counter:	
  1227                           ; 1 bytes @ 0x5
  1228                           
  1229  0075                     ___lbmod@counter:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0075                     ___lwmod@counter:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0075                     set_time@i:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0075                     display_clock@i:	
  1239                           ; 2 bytes @ 0x5
  1240                           
  1241  0075                     display_date@i:	
  1242                           ; 2 bytes @ 0x5
  1243                           
  1244  0075                     set_upper_threshold@lower_val:	
  1245                           ; 2 bytes @ 0x5
  1246                           
  1247  0075                     set_lower_threshold@lower_val:	
  1248                           ; 2 bytes @ 0x5
  1249                           
  1250                           
  1251                           ; 2 bytes @ 0x5
  1252  0075                     	ds	1
  1253  0076                     ?___lwdiv:	
  1254  0076                     write_byte@temp:	
  1255                           ; 2 bytes @ 0x6
  1256                           
  1257  0076                     read_byte@i:	
  1258                           ; 1 bytes @ 0x6
  1259                           
  1260  0076                     time_date_delimiter@val:	
  1261                           ; 1 bytes @ 0x6
  1262                           
  1263  0076                     ___awmod@sign:	
  1264                           ; 1 bytes @ 0x6
  1265                           
  1266  0076                     ___lbmod@rem:	
  1267                           ; 1 bytes @ 0x6
  1268                           
  1269  0076                     get_time@i:	
  1270                           ; 1 bytes @ 0x6
  1271                           
  1272  0076                     ___lwdiv@divisor:	
  1273                           ; 2 bytes @ 0x6
  1274                           
  1275                           
  1276                           ; 2 bytes @ 0x6
  1277  0076                     	ds	1
  1278  0077                     ??_set_lower_threshold:	
  1279  0077                     ??_set_upper_threshold:	
  1280                           ; 1 bytes @ 0x7
  1281                           
  1282  0077                     ?_modulus_func:	
  1283                           ; 1 bytes @ 0x7
  1284                           
  1285  0077                     write_byte@val:	
  1286                           ; 2 bytes @ 0x7
  1287                           
  1288  0077                     modulus_func@x:	
  1289                           ; 1 bytes @ 0x7
  1290                           
  1291                           
  1292                           ; 2 bytes @ 0x7
  1293  0077                     	ds	1
  1294  0078                     write_byte@i:	
  1295  0078                     ___lwdiv@dividend:	
  1296                           ; 1 bytes @ 0x8
  1297                           
  1298                           
  1299                           ; 2 bytes @ 0x8
  1300  0078                     	ds	1
  1301  0079                     modulus_func@y:	
  1302                           
  1303                           ; 2 bytes @ 0x9
  1304  0079                     	ds	1
  1305  007A                     ??___lwdiv:	
  1306                           
  1307                           ; 1 bytes @ 0xA
  1308  007A                     	ds	1
  1309  007B                     ??_modulus_func:	
  1310  007B                     ??_incrementor:	
  1311                           ; 1 bytes @ 0xB
  1312                           
  1313  007B                     ??_decrementor:	
  1314                           ; 1 bytes @ 0xB
  1315                           
  1316  007B                     ___lwdiv@quotient:	
  1317                           ; 1 bytes @ 0xB
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0xB
  1321  007B                     	ds	2
  1322  007D                     ___lwdiv@counter:	
  1323                           
  1324                           ; 1 bytes @ 0xD
  1325  007D                     	ds	1
  1326                           
  1327                           	psect	cstackBANK0
  1328  005F                     __pcstackBANK0:	
  1329  005F                     ??_get_temp:	
  1330  005F                     ?_incrementor:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  005F                     ?_decrementor:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  005F                     incrementor@upper_val:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  005F                     decrementor@lower_val:	
  1340                           ; 2 bytes @ 0x0
  1341                           
  1342                           
  1343                           ; 2 bytes @ 0x0
  1344  005F                     	ds	2
  1345  0061                     incrementor@lower_val:	
  1346  0061                     decrementor@upper_val:	
  1347                           ; 2 bytes @ 0x2
  1348                           
  1349                           
  1350                           ; 2 bytes @ 0x2
  1351  0061                     	ds	2
  1352  0063                     incrementor@z:	
  1353  0063                     decrementor@z:	
  1354                           ; 1 bytes @ 0x4
  1355                           
  1356                           
  1357                           ; 1 bytes @ 0x4
  1358  0063                     	ds	1
  1359  0064                     ??_thermometer_threshhold_settings:	
  1360  0064                     ??_date_settings:	
  1361                           ; 1 bytes @ 0x5
  1362                           
  1363  0064                     ??_time_settings:	
  1364                           ; 1 bytes @ 0x5
  1365                           
  1366                           
  1367                           ; 1 bytes @ 0x5
  1368  0064                     	ds	3
  1369  0067                     thermometer_threshhold_settings@i:	
  1370                           
  1371                           ; 2 bytes @ 0x8
  1372  0067                     	ds	2
  1373  0069                     ??_main:	
  1374                           
  1375                           ; 1 bytes @ 0xA
  1376  0069                     	ds	5
  1377  006E                     main@i:	
  1378                           
  1379                           ; 2 bytes @ 0xF
  1380  006E                     	ds	2
  1381                           
  1382                           	psect	maintext
  1383  0C12                     __pmaintext:	
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 10 in file "mainLogic.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  i               2   15[BANK0 ] int 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : B00/0
  1400 ;;		On exit  : 300/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1403 ;;      Params:         0       0       0       0       0
  1404 ;;      Locals:         0       2       0       0       0
  1405 ;;      Temps:          0       5       0       0       0
  1406 ;;      Totals:         0       7       0       0       0
  1407 ;;Total ram usage:        7 bytes
  1408 ;; Hardware stack levels required when called:    4
  1409 ;; This function calls:
  1410 ;;		_date_settings
  1411 ;;		_display_clock
  1412 ;;		_display_date
  1413 ;;		_display_day
  1414 ;;		_display_temp
  1415 ;;		_ds1302_init
  1416 ;;		_get_temp
  1417 ;;		_get_time
  1418 ;;		_init
  1419 ;;		_init_temp
  1420 ;;		_initialise_buttons
  1421 ;;		_lcd_init
  1422 ;;		_modulus_func
  1423 ;;		_reset_alarm
  1424 ;;		_set_beep_threshhold
  1425 ;;		_set_lower_threshold
  1426 ;;		_set_time
  1427 ;;		_set_upper_threshold
  1428 ;;		_thermometer_threshhold_settings
  1429 ;;		_time_settings
  1430 ;;		_write_char
  1431 ;;		_write_cmd
  1432 ;; This function is called by:
  1433 ;;		Startup code after reset
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function _main
  1439  0C12                     _main:	
  1440                           
  1441                           ;mainLogic.c: 11:     TRISB=0X02;
  1442                           
  1443                           ;incstack = 0
  1444                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1445  0C12  3002               	movlw	2
  1446  0C13  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0C14  0086               	movwf	6	;volatile
  1448                           
  1449                           ;mainLogic.c: 12:     init_temp();
  1450  0C15  120A  158A  2002  120A  158A  	fcall	_init_temp
  1451                           
  1452                           ;mainLogic.c: 13:     set_time();
  1453  0C1A  160A  118A  25C3  120A  158A  	fcall	_set_time
  1454                           
  1455                           ;mainLogic.c: 14:     ds1302_init();
  1456  0C1F  160A  118A  2425  120A  158A  	fcall	_ds1302_init
  1457                           
  1458                           ;mainLogic.c: 16:     init();
  1459  0C24  160A  118A  23F0  120A  158A  	fcall	_init
  1460                           
  1461                           ;mainLogic.c: 17:     lcd_init();
  1462  0C29  120A  118A  2003  120A  158A  	fcall	_lcd_init
  1463                           
  1464                           ;mainLogic.c: 18:     init_temp();
  1465  0C2E  120A  158A  2002  120A  158A  	fcall	_init_temp
  1466                           
  1467                           ;mainLogic.c: 19:     initialise_buttons();
  1468  0C33  160A  118A  2491  120A  158A  	fcall	_initialise_buttons
  1469                           
  1470                           ;mainLogic.c: 20:     var1 = 2;
  1471  0C38  3002               	movlw	2
  1472  0C39  00E9               	movwf	??_main
  1473  0C3A  0869               	movf	??_main,w
  1474  0C3B  00CE               	movwf	_var1
  1475                           
  1476                           ;mainLogic.c: 21:     var2 = 4;
  1477  0C3C  3004               	movlw	4
  1478  0C3D  00E9               	movwf	??_main
  1479  0C3E  0869               	movf	??_main,w
  1480  0C3F  00CD               	movwf	_var2
  1481  0C40                     l4607:	
  1482                           
  1483                           ;mainLogic.c: 25:     get_temp();
  1484  0C40  120A  158A  21B4  120A  158A  	fcall	_get_temp
  1485                           
  1486                           ;mainLogic.c: 26:     get_time();
  1487  0C45  160A  118A  2615  120A  158A  	fcall	_get_time
  1488                           
  1489                           ;mainLogic.c: 27:     write_cmd(0x80);
  1490  0C4A  3080               	movlw	128
  1491  0C4B  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  1492                           
  1493                           ;mainLogic.c: 28:     write_char('T');
  1494  0C50  3054               	movlw	84
  1495  0C51  160A  118A  24A5  120A  158A  	fcall	_write_char
  1496                           
  1497                           ;mainLogic.c: 29:     write_char('e');
  1498  0C56  3065               	movlw	101
  1499  0C57  160A  118A  24A5  120A  158A  	fcall	_write_char
  1500                           
  1501                           ;mainLogic.c: 30:     write_char('m');
  1502  0C5C  306D               	movlw	109
  1503  0C5D  160A  118A  24A5  120A  158A  	fcall	_write_char
  1504                           
  1505                           ;mainLogic.c: 31:     write_char('p');
  1506  0C62  3070               	movlw	112
  1507  0C63  160A  118A  24A5  120A  158A  	fcall	_write_char
  1508                           
  1509                           ;mainLogic.c: 32:     write_char(':');
  1510  0C68  303A               	movlw	58
  1511  0C69  160A  118A  24A5  120A  158A  	fcall	_write_char
  1512                           
  1513                           ;mainLogic.c: 33:     display_temp();
  1514  0C6E  160A  118A  24F0  120A  158A  	fcall	_display_temp
  1515                           
  1516                           ;mainLogic.c: 35:     write_cmd(0x90);
  1517  0C73  3090               	movlw	144
  1518  0C74  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  1519                           
  1520                           ;mainLogic.c: 36:     write_char('D');
  1521  0C79  3044               	movlw	68
  1522  0C7A  160A  118A  24A5  120A  158A  	fcall	_write_char
  1523                           
  1524                           ;mainLogic.c: 37:     write_char('a');
  1525  0C7F  3061               	movlw	97
  1526  0C80  160A  118A  24A5  120A  158A  	fcall	_write_char
  1527                           
  1528                           ;mainLogic.c: 38:     write_char('t');
  1529  0C85  3074               	movlw	116
  1530  0C86  160A  118A  24A5  120A  158A  	fcall	_write_char
  1531                           
  1532                           ;mainLogic.c: 39:     write_char('e');
  1533  0C8B  3065               	movlw	101
  1534  0C8C  160A  118A  24A5  120A  158A  	fcall	_write_char
  1535                           
  1536                           ;mainLogic.c: 40:     write_char(':');
  1537  0C91  303A               	movlw	58
  1538  0C92  160A  118A  24A5  120A  158A  	fcall	_write_char
  1539                           
  1540                           ;mainLogic.c: 41:     write_char(' ');
  1541  0C97  3020               	movlw	32
  1542  0C98  160A  118A  24A5  120A  158A  	fcall	_write_char
  1543                           
  1544                           ;mainLogic.c: 43:     display_date();
  1545  0C9D  120A  158A  2080  120A  158A  	fcall	_display_date
  1546                           
  1547                           ;mainLogic.c: 45:     write_cmd(0x88);
  1548  0CA2  3088               	movlw	136
  1549  0CA3  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  1550                           
  1551                           ;mainLogic.c: 46:     write_char('T');
  1552  0CA8  3054               	movlw	84
  1553  0CA9  160A  118A  24A5  120A  158A  	fcall	_write_char
  1554                           
  1555                           ;mainLogic.c: 47:     write_char('i');
  1556  0CAE  3069               	movlw	105
  1557  0CAF  160A  118A  24A5  120A  158A  	fcall	_write_char
  1558                           
  1559                           ;mainLogic.c: 48:     write_char('m');
  1560  0CB4  306D               	movlw	109
  1561  0CB5  160A  118A  24A5  120A  158A  	fcall	_write_char
  1562                           
  1563                           ;mainLogic.c: 49:     write_char('e');
  1564  0CBA  3065               	movlw	101
  1565  0CBB  160A  118A  24A5  120A  158A  	fcall	_write_char
  1566                           
  1567                           ;mainLogic.c: 50:     write_char(':');
  1568  0CC0  303A               	movlw	58
  1569  0CC1  160A  118A  24A5  120A  158A  	fcall	_write_char
  1570                           
  1571                           ;mainLogic.c: 51:     display_clock();
  1572  0CC6  120A  158A  2116  120A  158A  	fcall	_display_clock
  1573                           
  1574                           ;mainLogic.c: 52:     thermometer_threshhold_settings();
  1575  0CCB  120A  158A  2592  120A  158A  	fcall	_thermometer_threshhold_settings
  1576                           
  1577                           ;mainLogic.c: 53:     date_settings();
  1578  0CD0  120A  118A  2387  120A  158A  	fcall	_date_settings
  1579                           
  1580                           ;mainLogic.c: 54:     time_settings();
  1581  0CD5  120A  118A  2071  120A  158A  	fcall	_time_settings
  1582                           
  1583                           ;mainLogic.c: 55:     write_cmd(0x98);
  1584  0CDA  3098               	movlw	152
  1585  0CDB  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  1586                           
  1587                           ;mainLogic.c: 56:      if((temp_high+'0') == '0' && (temp_low + '0') == '0'){
  1588  0CE0  084A               	movf	_temp_high,w
  1589  0CE1  3E30               	addlw	48
  1590  0CE2  00E9               	movwf	??_main
  1591  0CE3  3000               	movlw	0
  1592  0CE4  1803               	skipnc
  1593  0CE5  3001               	movlw	1
  1594  0CE6  00EA               	movwf	??_main+1
  1595  0CE7  3030               	movlw	48
  1596  0CE8  0669               	xorwf	??_main,w
  1597  0CE9  046A               	iorwf	??_main+1,w
  1598  0CEA  1D03               	btfss	3,2
  1599  0CEB  2D24               	goto	l150
  1600  0CEC  084B               	movf	_temp_low,w
  1601  0CED  3E30               	addlw	48
  1602  0CEE  00E9               	movwf	??_main
  1603  0CEF  3000               	movlw	0
  1604  0CF0  1803               	skipnc
  1605  0CF1  3001               	movlw	1
  1606  0CF2  00EA               	movwf	??_main+1
  1607  0CF3  3030               	movlw	48
  1608  0CF4  0669               	xorwf	??_main,w
  1609  0CF5  046A               	iorwf	??_main+1,w
  1610  0CF6  1D03               	btfss	3,2
  1611  0CF7  2D24               	goto	l150
  1612                           
  1613                           ;mainLogic.c: 57:     alarm__ = set_lower_threshold(var1,var2);
  1614  0CF8  084E               	movf	_var1,w
  1615  0CF9  00E9               	movwf	??_main
  1616  0CFA  01EA               	clrf	??_main+1
  1617  0CFB  0869               	movf	??_main,w
  1618  0CFC  00F3               	movwf	set_lower_threshold@upper_val
  1619  0CFD  086A               	movf	??_main+1,w
  1620  0CFE  00F4               	movwf	set_lower_threshold@upper_val+1
  1621  0CFF  084D               	movf	_var2,w
  1622  0D00  00EB               	movwf	??_main+2
  1623  0D01  01EC               	clrf	??_main+3
  1624  0D02  086B               	movf	??_main+2,w
  1625  0D03  00F5               	movwf	set_lower_threshold@lower_val
  1626  0D04  086C               	movf	??_main+3,w
  1627  0D05  00F6               	movwf	set_lower_threshold@lower_val+1
  1628  0D06  160A  118A  27BE  120A  158A  	fcall	_set_lower_threshold
  1629  0D0B  00ED               	movwf	??_main+4
  1630  0D0C  086D               	movf	??_main+4,w
  1631  0D0D  00CC               	movwf	_alarm__
  1632                           
  1633                           ;mainLogic.c: 58:     alarm__ = set_upper_threshold(var1,var2);
  1634  0D0E  084E               	movf	_var1,w
  1635  0D0F  00E9               	movwf	??_main
  1636  0D10  01EA               	clrf	??_main+1
  1637  0D11  0869               	movf	??_main,w
  1638  0D12  00F3               	movwf	set_upper_threshold@upper_val
  1639  0D13  086A               	movf	??_main+1,w
  1640  0D14  00F4               	movwf	set_upper_threshold@upper_val+1
  1641  0D15  084D               	movf	_var2,w
  1642  0D16  00EB               	movwf	??_main+2
  1643  0D17  01EC               	clrf	??_main+3
  1644  0D18  086B               	movf	??_main+2,w
  1645  0D19  00F5               	movwf	set_upper_threshold@lower_val
  1646  0D1A  086C               	movf	??_main+3,w
  1647  0D1B  00F6               	movwf	set_upper_threshold@lower_val+1
  1648  0D1C  160A  118A  277D  120A  158A  	fcall	_set_upper_threshold
  1649  0D21  00ED               	movwf	??_main+4
  1650  0D22  086D               	movf	??_main+4,w
  1651  0D23  00CC               	movwf	_alarm__
  1652  0D24                     l150:	
  1653                           ;mainLogic.c: 59:     }
  1654                           
  1655                           
  1656                           ;mainLogic.c: 60:     alarm__ = reset_alarm();
  1657  0D24  160A  118A  25EB  120A  158A  	fcall	_reset_alarm
  1658  0D29  00E9               	movwf	??_main
  1659  0D2A  0869               	movf	??_main,w
  1660  0D2B  00CC               	movwf	_alarm__
  1661                           
  1662                           ;mainLogic.c: 61:     set_beep_threshhold(alarm__);
  1663  0D2C  084C               	movf	_alarm__,w
  1664  0D2D  160A  118A  24D3  120A  158A  	fcall	_set_beep_threshhold
  1665                           
  1666                           ;mainLogic.c: 62:     write_char(' ');
  1667  0D32  3020               	movlw	32
  1668  0D33  160A  118A  24A5  120A  158A  	fcall	_write_char
  1669                           
  1670                           ;mainLogic.c: 63:     write_char('H');
  1671  0D38  3048               	movlw	72
  1672  0D39  160A  118A  24A5  120A  158A  	fcall	_write_char
  1673                           
  1674                           ;mainLogic.c: 64:     write_char(':');
  1675  0D3E  303A               	movlw	58
  1676  0D3F  160A  118A  24A5  120A  158A  	fcall	_write_char
  1677                           
  1678                           ;mainLogic.c: 65:     write_char(heater_state);
  1679  0D44  0850               	movf	_heater_state,w
  1680  0D45  160A  118A  24A5  120A  158A  	fcall	_write_char
  1681                           
  1682                           ;mainLogic.c: 66:     write_char('C');
  1683  0D4A  3043               	movlw	67
  1684  0D4B  160A  118A  24A5  120A  158A  	fcall	_write_char
  1685                           
  1686                           ;mainLogic.c: 67:     write_char(':');
  1687  0D50  303A               	movlw	58
  1688  0D51  160A  118A  24A5  120A  158A  	fcall	_write_char
  1689                           
  1690                           ;mainLogic.c: 68:     write_char(cooler_state);
  1691  0D56  084F               	movf	_cooler_state,w
  1692  0D57  160A  118A  24A5  120A  158A  	fcall	_write_char
  1693                           
  1694                           ;mainLogic.c: 69:     for(int i = 0; i < 3; i++)
  1695  0D5C  01EE               	clrf	main@i
  1696  0D5D  01EF               	clrf	main@i+1
  1697  0D5E                     l4675:	
  1698                           
  1699                           ;mainLogic.c: 70:     write_char(' ');
  1700  0D5E  3020               	movlw	32
  1701  0D5F  160A  118A  24A5  120A  158A  	fcall	_write_char
  1702  0D64  3001               	movlw	1
  1703  0D65  07EE               	addwf	main@i,f
  1704  0D66  1803               	skipnc
  1705  0D67  0AEF               	incf	main@i+1,f
  1706  0D68  3000               	movlw	0
  1707  0D69  07EF               	addwf	main@i+1,f
  1708  0D6A  086F               	movf	main@i+1,w
  1709  0D6B  3A80               	xorlw	128
  1710  0D6C  00FF               	movwf	127
  1711  0D6D  3080               	movlw	128
  1712  0D6E  027F               	subwf	127,w
  1713  0D6F  1D03               	skipz
  1714  0D70  2D73               	goto	u3905
  1715  0D71  3003               	movlw	3
  1716  0D72  026E               	subwf	main@i,w
  1717  0D73                     u3905:	
  1718  0D73  1C03               	skipc
  1719  0D74  2D5E               	goto	l4675
  1720                           
  1721                           ;mainLogic.c: 71:     day_counter = modulus_func(day_low,8);
  1722  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  1723  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  1724  0D77  0830               	movf	_day_low+1,w
  1725  0D78  00F8               	movwf	modulus_func@x+1
  1726  0D79  082F               	movf	_day_low,w
  1727  0D7A  00F7               	movwf	modulus_func@x
  1728  0D7B  3008               	movlw	8
  1729  0D7C  00F9               	movwf	modulus_func@y
  1730  0D7D  3000               	movlw	0
  1731  0D7E  00FA               	movwf	modulus_func@y+1
  1732  0D7F  160A  118A  2434  120A  158A  	fcall	_modulus_func
  1733  0D84  0878               	movf	?_modulus_func+1,w
  1734  0D85  00A8               	movwf	_day_counter+1
  1735  0D86  0877               	movf	?_modulus_func,w
  1736  0D87  00A7               	movwf	_day_counter
  1737                           
  1738                           ;mainLogic.c: 72:     display_day(day_counter);
  1739  0D88  0828               	movf	_day_counter+1,w
  1740  0D89  00F4               	movwf	display_day@num+1
  1741  0D8A  0827               	movf	_day_counter,w
  1742  0D8B  00F3               	movwf	display_day@num
  1743  0D8C  120A  158A  2007  120A  158A  	fcall	_display_day
  1744  0D91  2C40               	goto	l4607
  1745  0D92                     __end_of_main:	
  1746                           
  1747                           	psect	text1
  1748  0071                     __ptext1:	
  1749 ;; *************** function _time_settings *****************
  1750 ;; Defined at:
  1751 ;;		line 179 in file "Button_src.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 300/0
  1762 ;;		On exit  : 300/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1765 ;;      Params:         0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0
  1767 ;;      Temps:          0       3       0       0       0
  1768 ;;      Totals:         0       3       0       0       0
  1769 ;;Total ram usage:        3 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    3
  1772 ;; This function calls:
  1773 ;;		_button_delay
  1774 ;;		_incrementor
  1775 ;;		_modulus_func
  1776 ;;		_set_time
  1777 ;;		_time_date_delimiter
  1778 ;;		_time_date_hex_terminator
  1779 ;;		_write_char
  1780 ;;		_write_cmd
  1781 ;; This function is called by:
  1782 ;;		_main
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           
  1787                           ;psect for function _time_settings
  1788  0071                     _time_settings:	
  1789                           
  1790                           ;Button_src.c: 180:  RC0 = 1;
  1791                           
  1792                           ;incstack = 0
  1793                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1794  0071  1407               	bsf	7,0	;volatile
  1795                           
  1796                           ;Button_src.c: 181:  RC1 = 1;
  1797  0072  1487               	bsf	7,1	;volatile
  1798                           
  1799                           ;Button_src.c: 182:  RC2 = 0;
  1800  0073  1107               	bcf	7,2	;volatile
  1801                           
  1802                           ;Button_src.c: 183:  RC3 = 1;
  1803  0074  1587               	bsf	7,3	;volatile
  1804                           
  1805                           ;Button_src.c: 184:   if (RC4 == 0){
  1806  0075  1A07               	btfsc	7,4	;volatile
  1807  0076  0008               	return
  1808                           
  1809                           ;Button_src.c: 185:       write_cmd(0x1);
  1810  0077  3001               	movlw	1
  1811  0078  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  1812  007D                     l692:	
  1813                           ;Button_src.c: 186:       for(;;){
  1814                           
  1815                           
  1816                           ;Button_src.c: 187:             write_cmd(0x80);
  1817  007D  3080               	movlw	128
  1818  007E  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  1819                           
  1820                           ;Button_src.c: 188:             write_char('T');
  1821  0083  3054               	movlw	84
  1822  0084  160A  118A  24A5  120A  118A  	fcall	_write_char
  1823                           
  1824                           ;Button_src.c: 189:             write_char('i');
  1825  0089  3069               	movlw	105
  1826  008A  160A  118A  24A5  120A  118A  	fcall	_write_char
  1827                           
  1828                           ;Button_src.c: 190:             write_char('m');
  1829  008F  306D               	movlw	109
  1830  0090  160A  118A  24A5  120A  118A  	fcall	_write_char
  1831                           
  1832                           ;Button_src.c: 191:             write_char('e');
  1833  0095  3065               	movlw	101
  1834  0096  160A  118A  24A5  120A  118A  	fcall	_write_char
  1835                           
  1836                           ;Button_src.c: 192:             write_char('_');
  1837  009B  305F               	movlw	95
  1838  009C  160A  118A  24A5  120A  118A  	fcall	_write_char
  1839                           
  1840                           ;Button_src.c: 193:             write_char('S');
  1841  00A1  3053               	movlw	83
  1842  00A2  160A  118A  24A5  120A  118A  	fcall	_write_char
  1843                           
  1844                           ;Button_src.c: 194:             write_char('e');
  1845  00A7  3065               	movlw	101
  1846  00A8  160A  118A  24A5  120A  118A  	fcall	_write_char
  1847                           
  1848                           ;Button_src.c: 195:             write_char('t');
  1849  00AD  3074               	movlw	116
  1850  00AE  160A  118A  24A5  120A  118A  	fcall	_write_char
  1851                           
  1852                           ;Button_src.c: 196:             write_char('t');
  1853  00B3  3074               	movlw	116
  1854  00B4  160A  118A  24A5  120A  118A  	fcall	_write_char
  1855                           
  1856                           ;Button_src.c: 197:             write_char('i');
  1857  00B9  3069               	movlw	105
  1858  00BA  160A  118A  24A5  120A  118A  	fcall	_write_char
  1859                           
  1860                           ;Button_src.c: 198:             write_char('n');
  1861  00BF  306E               	movlw	110
  1862  00C0  160A  118A  24A5  120A  118A  	fcall	_write_char
  1863                           
  1864                           ;Button_src.c: 199:             write_char('g');
  1865  00C5  3067               	movlw	103
  1866  00C6  160A  118A  24A5  120A  118A  	fcall	_write_char
  1867                           
  1868                           ;Button_src.c: 200:             write_char('s');
  1869  00CB  3073               	movlw	115
  1870  00CC  160A  118A  24A5  120A  118A  	fcall	_write_char
  1871                           
  1872                           ;Button_src.c: 202:             RC0 = 1;
  1873  00D1  1407               	bsf	7,0	;volatile
  1874                           
  1875                           ;Button_src.c: 203:             RC1 = 0;
  1876  00D2  1087               	bcf	7,1	;volatile
  1877                           
  1878                           ;Button_src.c: 204:             RC2 = 1;
  1879  00D3  1507               	bsf	7,2	;volatile
  1880                           
  1881                           ;Button_src.c: 205:             RC3 = 1;
  1882  00D4  1587               	bsf	7,3	;volatile
  1883                           
  1884                           ;Button_src.c: 207:             if(RC7 == 0 && b =='x'){
  1885  00D5  1B87               	btfsc	7,7	;volatile
  1886  00D6  2948               	goto	l4337
  1887  00D7  3078               	movlw	120
  1888  00D8  0648               	xorwf	_b,w
  1889  00D9  1D03               	btfss	3,2
  1890  00DA  2948               	goto	l4337
  1891                           
  1892                           ;Button_src.c: 208:                 if(stats == 1)
  1893  00DB  032B               	decf	_stats,w
  1894  00DC  042C               	iorwf	_stats+1,w
  1895  00DD  1D03               	btfss	3,2
  1896  00DE  28E3               	goto	l694
  1897                           
  1898                           ;Button_src.c: 209:                    a++;
  1899  00DF  3001               	movlw	1
  1900  00E0  00E4               	movwf	??_time_settings
  1901  00E1  0864               	movf	??_time_settings,w
  1902  00E2  07C9               	addwf	_a,f
  1903  00E3                     l694:	
  1904                           
  1905                           ;Button_src.c: 210:                 if(stats == 0){
  1906  00E3  082B               	movf	_stats,w
  1907  00E4  042C               	iorwf	_stats+1,w
  1908  00E5  1D03               	btfss	3,2
  1909  00E6  28EB               	goto	l695
  1910                           
  1911                           ;Button_src.c: 211:                    stats = 1;
  1912  00E7  3001               	movlw	1
  1913  00E8  00AB               	movwf	_stats
  1914  00E9  3000               	movlw	0
  1915  00EA  00AC               	movwf	_stats+1
  1916  00EB                     l695:	
  1917                           ;Button_src.c: 212:                 }
  1918                           
  1919                           
  1920                           ;Button_src.c: 214:                     x++ ;
  1921  00EB  3001               	movlw	1
  1922  00EC  07B5               	addwf	_x,f
  1923  00ED  1803               	skipnc
  1924  00EE  0AB6               	incf	_x+1,f
  1925  00EF  3000               	movlw	0
  1926  00F0  07B6               	addwf	_x+1,f
  1927                           
  1928                           ;Button_src.c: 215:                     x = modulus_func(x,10);
  1929  00F1  0836               	movf	_x+1,w
  1930  00F2  00F8               	movwf	modulus_func@x+1
  1931  00F3  0835               	movf	_x,w
  1932  00F4  00F7               	movwf	modulus_func@x
  1933  00F5  300A               	movlw	10
  1934  00F6  00F9               	movwf	modulus_func@y
  1935  00F7  3000               	movlw	0
  1936  00F8  00FA               	movwf	modulus_func@y+1
  1937  00F9  160A  118A  2434  120A  118A  	fcall	_modulus_func
  1938  00FE  0878               	movf	?_modulus_func+1,w
  1939  00FF  00B6               	movwf	_x+1
  1940  0100  0877               	movf	?_modulus_func,w
  1941  0101  00B5               	movwf	_x
  1942                           
  1943                           ;Button_src.c: 216:                     if (p == 1){
  1944  0102  0329               	decf	_p,w
  1945  0103  042A               	iorwf	_p+1,w
  1946  0104  1D03               	btfss	3,2
  1947  0105  291F               	goto	l4323
  1948                           
  1949                           ;Button_src.c: 217:                         y = incrementor(y,x,'0');
  1950  0106  0834               	movf	_y+1,w
  1951  0107  00E0               	movwf	incrementor@upper_val+1
  1952  0108  0833               	movf	_y,w
  1953  0109  00DF               	movwf	incrementor@upper_val
  1954  010A  0836               	movf	_x+1,w
  1955  010B  00E2               	movwf	incrementor@lower_val+1
  1956  010C  0835               	movf	_x,w
  1957  010D  00E1               	movwf	incrementor@lower_val
  1958  010E  3030               	movlw	48
  1959  010F  00E4               	movwf	??_time_settings
  1960  0110  0864               	movf	??_time_settings,w
  1961  0111  00E3               	movwf	incrementor@z
  1962  0112  160A  118A  2555  120A  118A  	fcall	_incrementor
  1963  0117  00E5               	movwf	??_time_settings+1
  1964  0118  01E6               	clrf	??_time_settings+2
  1965  0119  0865               	movf	??_time_settings+1,w
  1966  011A  00B3               	movwf	_y
  1967  011B  0866               	movf	??_time_settings+2,w
  1968  011C  00B4               	movwf	_y+1
  1969                           
  1970                           ;Button_src.c: 218:                         p = 0;
  1971  011D  01A9               	clrf	_p
  1972  011E  01AA               	clrf	_p+1
  1973  011F                     l4323:	
  1974                           
  1975                           ;Button_src.c: 220:                     if (x == 9){
  1976  011F  3009               	movlw	9
  1977  0120  0635               	xorwf	_x,w
  1978  0121  0436               	iorwf	_x+1,w
  1979  0122  1D03               	btfss	3,2
  1980  0123  2928               	goto	l4327
  1981                           
  1982                           ;Button_src.c: 221:                         p = 1;
  1983  0124  3001               	movlw	1
  1984  0125  00A9               	movwf	_p
  1985  0126  3000               	movlw	0
  1986  0127  00AA               	movwf	_p+1
  1987  0128                     l4327:	
  1988                           
  1989                           ;Button_src.c: 225:                     a = time_date_hex_terminator(a,'T');
  1990  0128  3054               	movlw	84
  1991  0129  00E4               	movwf	??_time_settings
  1992  012A  0864               	movf	??_time_settings,w
  1993  012B  00F0               	movwf	time_date_hex_terminator@limiter
  1994  012C  0849               	movf	_a,w
  1995  012D  160A  118A  2416  120A  118A  	fcall	_time_date_hex_terminator
  1996  0132  00E5               	movwf	??_time_settings+1
  1997  0133  0865               	movf	??_time_settings+1,w
  1998  0134  00C9               	movwf	_a
  1999                           
  2000                           ;Button_src.c: 226:                     if(y == 2 && x == 4){
  2001  0135  3002               	movlw	2
  2002  0136  0633               	xorwf	_y,w
  2003  0137  0434               	iorwf	_y+1,w
  2004  0138  1D03               	btfss	3,2
  2005  0139  2943               	goto	l4335
  2006  013A  3004               	movlw	4
  2007  013B  0635               	xorwf	_x,w
  2008  013C  0436               	iorwf	_x+1,w
  2009  013D  1D03               	btfss	3,2
  2010  013E  2943               	goto	l4335
  2011                           
  2012                           ;Button_src.c: 227:                         x = 0;
  2013  013F  01B5               	clrf	_x
  2014  0140  01B6               	clrf	_x+1
  2015                           
  2016                           ;Button_src.c: 228:                         y = 0;
  2017  0141  01B3               	clrf	_y
  2018  0142  01B4               	clrf	_y+1
  2019  0143                     l4335:	
  2020                           
  2021                           ;Button_src.c: 230:                     button_delay();
  2022  0143  160A  118A  2455  120A  118A  	fcall	_button_delay
  2023  0148                     l4337:	
  2024                           
  2025                           ;Button_src.c: 232:             if(RC7==0 && b == 'y'){
  2026  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2028  014A  1B87               	btfsc	7,7	;volatile
  2029  014B  29C6               	goto	l4371
  2030  014C  3079               	movlw	121
  2031  014D  0648               	xorwf	_b,w
  2032  014E  1D03               	btfss	3,2
  2033  014F  29C6               	goto	l4371
  2034                           
  2035                           ;Button_src.c: 233:                  if(stats == 1)
  2036  0150  032B               	decf	_stats,w
  2037  0151  042C               	iorwf	_stats+1,w
  2038  0152  1D03               	btfss	3,2
  2039  0153  2958               	goto	l700
  2040                           
  2041                           ;Button_src.c: 234:                    c++;
  2042  0154  3001               	movlw	1
  2043  0155  00E4               	movwf	??_time_settings
  2044  0156  0864               	movf	??_time_settings,w
  2045  0157  07C7               	addwf	_c,f
  2046  0158                     l700:	
  2047                           
  2048                           ;Button_src.c: 235:                 if(stats == 0){
  2049  0158  082B               	movf	_stats,w
  2050  0159  042C               	iorwf	_stats+1,w
  2051  015A  1D03               	btfss	3,2
  2052  015B  2960               	goto	l701
  2053                           
  2054                           ;Button_src.c: 236:                     stats = 1;
  2055  015C  3001               	movlw	1
  2056  015D  00AB               	movwf	_stats
  2057  015E  3000               	movlw	0
  2058  015F  00AC               	movwf	_stats+1
  2059  0160                     l701:	
  2060                           ;Button_src.c: 237:                 }
  2061                           
  2062                           
  2063                           ;Button_src.c: 239:                     t++;
  2064  0160  3001               	movlw	1
  2065  0161  07B9               	addwf	_t,f
  2066  0162  1803               	skipnc
  2067  0163  0ABA               	incf	_t+1,f
  2068  0164  3000               	movlw	0
  2069  0165  07BA               	addwf	_t+1,f
  2070                           
  2071                           ;Button_src.c: 240:                     t = modulus_func(t,10);
  2072  0166  083A               	movf	_t+1,w
  2073  0167  00F8               	movwf	modulus_func@x+1
  2074  0168  0839               	movf	_t,w
  2075  0169  00F7               	movwf	modulus_func@x
  2076  016A  300A               	movlw	10
  2077  016B  00F9               	movwf	modulus_func@y
  2078  016C  3000               	movlw	0
  2079  016D  00FA               	movwf	modulus_func@y+1
  2080  016E  160A  118A  2434  120A  118A  	fcall	_modulus_func
  2081  0173  0878               	movf	?_modulus_func+1,w
  2082  0174  00BA               	movwf	_t+1
  2083  0175  0877               	movf	?_modulus_func,w
  2084  0176  00B9               	movwf	_t
  2085                           
  2086                           ;Button_src.c: 241:                       if (p == 1){
  2087  0177  0329               	decf	_p,w
  2088  0178  042A               	iorwf	_p+1,w
  2089  0179  1D03               	btfss	3,2
  2090  017A  2994               	goto	l4355
  2091                           
  2092                           ;Button_src.c: 242:                         w = incrementor(w,t,'0');
  2093  017B  0838               	movf	_w+1,w
  2094  017C  00E0               	movwf	incrementor@upper_val+1
  2095  017D  0837               	movf	_w,w
  2096  017E  00DF               	movwf	incrementor@upper_val
  2097  017F  083A               	movf	_t+1,w
  2098  0180  00E2               	movwf	incrementor@lower_val+1
  2099  0181  0839               	movf	_t,w
  2100  0182  00E1               	movwf	incrementor@lower_val
  2101  0183  3030               	movlw	48
  2102  0184  00E4               	movwf	??_time_settings
  2103  0185  0864               	movf	??_time_settings,w
  2104  0186  00E3               	movwf	incrementor@z
  2105  0187  160A  118A  2555  120A  118A  	fcall	_incrementor
  2106  018C  00E5               	movwf	??_time_settings+1
  2107  018D  01E6               	clrf	??_time_settings+2
  2108  018E  0865               	movf	??_time_settings+1,w
  2109  018F  00B7               	movwf	_w
  2110  0190  0866               	movf	??_time_settings+2,w
  2111  0191  00B8               	movwf	_w+1
  2112                           
  2113                           ;Button_src.c: 243:                         p = 0;
  2114  0192  01A9               	clrf	_p
  2115  0193  01AA               	clrf	_p+1
  2116  0194                     l4355:	
  2117                           
  2118                           ;Button_src.c: 245:                     if (t == 9){
  2119  0194  3009               	movlw	9
  2120  0195  0639               	xorwf	_t,w
  2121  0196  043A               	iorwf	_t+1,w
  2122  0197  1D03               	btfss	3,2
  2123  0198  299D               	goto	l4359
  2124                           
  2125                           ;Button_src.c: 246:                         p = 1;
  2126  0199  3001               	movlw	1
  2127  019A  00A9               	movwf	_p
  2128  019B  3000               	movlw	0
  2129  019C  00AA               	movwf	_p+1
  2130  019D                     l4359:	
  2131                           
  2132                           ;Button_src.c: 248:                     w = incrementor(w,t,'9');
  2133  019D  0838               	movf	_w+1,w
  2134  019E  00E0               	movwf	incrementor@upper_val+1
  2135  019F  0837               	movf	_w,w
  2136  01A0  00DF               	movwf	incrementor@upper_val
  2137  01A1  083A               	movf	_t+1,w
  2138  01A2  00E2               	movwf	incrementor@lower_val+1
  2139  01A3  0839               	movf	_t,w
  2140  01A4  00E1               	movwf	incrementor@lower_val
  2141  01A5  3039               	movlw	57
  2142  01A6  00E4               	movwf	??_time_settings
  2143  01A7  0864               	movf	??_time_settings,w
  2144  01A8  00E3               	movwf	incrementor@z
  2145  01A9  160A  118A  2555  120A  118A  	fcall	_incrementor
  2146  01AE  00E5               	movwf	??_time_settings+1
  2147  01AF  01E6               	clrf	??_time_settings+2
  2148  01B0  0865               	movf	??_time_settings+1,w
  2149  01B1  00B7               	movwf	_w
  2150  01B2  0866               	movf	??_time_settings+2,w
  2151  01B3  00B8               	movwf	_w+1
  2152                           
  2153                           ;Button_src.c: 249:                     if(c == (0x59 + 1)){
  2154  01B4  305A               	movlw	90
  2155  01B5  0647               	xorwf	_c,w
  2156  01B6  1903               	btfsc	3,2
  2157                           
  2158                           ;Button_src.c: 250:                         c = 0x00;
  2159  01B7  01C7               	clrf	_c
  2160                           
  2161                           ;Button_src.c: 252:                     if(w == 6){
  2162  01B8  3006               	movlw	6
  2163  01B9  0637               	xorwf	_w,w
  2164  01BA  0438               	iorwf	_w+1,w
  2165  01BB  1D03               	btfss	3,2
  2166  01BC  29C1               	goto	l4369
  2167                           
  2168                           ;Button_src.c: 253:                         w = 0;
  2169  01BD  01B7               	clrf	_w
  2170  01BE  01B8               	clrf	_w+1
  2171                           
  2172                           ;Button_src.c: 254:                         t = 0;
  2173  01BF  01B9               	clrf	_t
  2174  01C0  01BA               	clrf	_t+1
  2175  01C1                     l4369:	
  2176                           
  2177                           ;Button_src.c: 256:                     button_delay();
  2178  01C1  160A  118A  2455  120A  118A  	fcall	_button_delay
  2179  01C6                     l4371:	
  2180                           
  2181                           ;Button_src.c: 259:              write_cmd(0x88);
  2182  01C6  3088               	movlw	136
  2183  01C7  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  2184                           
  2185                           ;Button_src.c: 260:               if(stats==0){
  2186  01CC  082B               	movf	_stats,w
  2187  01CD  042C               	iorwf	_stats+1,w
  2188  01CE  1D03               	btfss	3,2
  2189  01CF  29D8               	goto	l4377
  2190                           
  2191                           ;Button_src.c: 261:                   table[2] = prev_hex_hours;
  2192  01D0  0841               	movf	_prev_hex_hours,w
  2193  01D1  00E4               	movwf	??_time_settings
  2194  01D2  0864               	movf	??_time_settings,w
  2195  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2196  01D4  00AA               	movwf	(_table^(0+128)+2)
  2197                           
  2198                           ;Button_src.c: 262:                   table[1] = prev_hex_mins;
  2199  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2200  01D6  0840               	movf	_prev_hex_mins,w
  2201  01D7  29E3               	goto	L1
  2202  01D8                     l4377:	
  2203                           ;Button_src.c: 263:               }
  2204                           
  2205  01D8  032B               	decf	_stats,w
  2206  01D9  042C               	iorwf	_stats+1,w
  2207  01DA  1D03               	btfss	3,2
  2208  01DB  29E7               	goto	l4381
  2209                           
  2210                           ;Button_src.c: 265:               {;Button_src.c: 266:                  table[2]= a;
  2211  01DC  0849               	movf	_a,w
  2212  01DD  00E4               	movwf	??_time_settings
  2213  01DE  0864               	movf	??_time_settings,w
  2214  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2215  01E0  00AA               	movwf	(_table^(0+128)+2)
  2216                           
  2217                           ;Button_src.c: 267:                  table[1] = c;
  2218  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2219  01E2  0847               	movf	_c,w
  2220  01E3                     L1:	
  2221  01E3  00E4               	movwf	??_time_settings
  2222  01E4  0864               	movf	??_time_settings,w
  2223  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2224  01E6  00A9               	movwf	(_table^(0+128)+1)
  2225  01E7                     l4381:	
  2226                           
  2227                           ;Button_src.c: 271:                     a = time_date_delimiter(a,0x11,'9',4);
  2228  01E7  3011               	movlw	17
  2229  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2230  01E9  00E4               	movwf	??_time_settings
  2231  01EA  0864               	movf	??_time_settings,w
  2232  01EB  00F0               	movwf	time_date_delimiter@hex
  2233  01EC  3039               	movlw	57
  2234  01ED  00E5               	movwf	??_time_settings+1
  2235  01EE  0865               	movf	??_time_settings+1,w
  2236  01EF  00F1               	movwf	time_date_delimiter@limiter
  2237  01F0  3004               	movlw	4
  2238  01F1  00F2               	movwf	time_date_delimiter@type
  2239  01F2  3000               	movlw	0
  2240  01F3  00F3               	movwf	time_date_delimiter@type+1
  2241  01F4  0849               	movf	_a,w
  2242  01F5  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2243  01FA  00E6               	movwf	??_time_settings+2
  2244  01FB  0866               	movf	??_time_settings+2,w
  2245  01FC  00C9               	movwf	_a
  2246                           
  2247                           ;Button_src.c: 272:                     a = time_date_delimiter(a,0x21,'J',4);
  2248  01FD  3021               	movlw	33
  2249  01FE  00E4               	movwf	??_time_settings
  2250  01FF  0864               	movf	??_time_settings,w
  2251  0200  00F0               	movwf	time_date_delimiter@hex
  2252  0201  304A               	movlw	74
  2253  0202  00E5               	movwf	??_time_settings+1
  2254  0203  0865               	movf	??_time_settings+1,w
  2255  0204  00F1               	movwf	time_date_delimiter@limiter
  2256  0205  3004               	movlw	4
  2257  0206  00F2               	movwf	time_date_delimiter@type
  2258  0207  3000               	movlw	0
  2259  0208  00F3               	movwf	time_date_delimiter@type+1
  2260  0209  0849               	movf	_a,w
  2261  020A  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2262  020F  00E6               	movwf	??_time_settings+2
  2263  0210  0866               	movf	??_time_settings+2,w
  2264  0211  00C9               	movwf	_a
  2265                           
  2266                           ;Button_src.c: 274:                     c = time_date_delimiter(c,0x11,'9',5);
  2267  0212  3011               	movlw	17
  2268  0213  00E4               	movwf	??_time_settings
  2269  0214  0864               	movf	??_time_settings,w
  2270  0215  00F0               	movwf	time_date_delimiter@hex
  2271  0216  3039               	movlw	57
  2272  0217  00E5               	movwf	??_time_settings+1
  2273  0218  0865               	movf	??_time_settings+1,w
  2274  0219  00F1               	movwf	time_date_delimiter@limiter
  2275  021A  3005               	movlw	5
  2276  021B  00F2               	movwf	time_date_delimiter@type
  2277  021C  3000               	movlw	0
  2278  021D  00F3               	movwf	time_date_delimiter@type+1
  2279  021E  0847               	movf	_c,w
  2280  021F  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2281  0224  00E6               	movwf	??_time_settings+2
  2282  0225  0866               	movf	??_time_settings+2,w
  2283  0226  00C7               	movwf	_c
  2284                           
  2285                           ;Button_src.c: 275:                     c = time_date_delimiter(c,0x21,'J',5);
  2286  0227  3021               	movlw	33
  2287  0228  00E4               	movwf	??_time_settings
  2288  0229  0864               	movf	??_time_settings,w
  2289  022A  00F0               	movwf	time_date_delimiter@hex
  2290  022B  304A               	movlw	74
  2291  022C  00E5               	movwf	??_time_settings+1
  2292  022D  0865               	movf	??_time_settings+1,w
  2293  022E  00F1               	movwf	time_date_delimiter@limiter
  2294  022F  3005               	movlw	5
  2295  0230  00F2               	movwf	time_date_delimiter@type
  2296  0231  3000               	movlw	0
  2297  0232  00F3               	movwf	time_date_delimiter@type+1
  2298  0233  0847               	movf	_c,w
  2299  0234  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2300  0239  00E6               	movwf	??_time_settings+2
  2301  023A  0866               	movf	??_time_settings+2,w
  2302  023B  00C7               	movwf	_c
  2303                           
  2304                           ;Button_src.c: 276:                     c = time_date_delimiter(c,0x31,'Y',5);
  2305  023C  3031               	movlw	49
  2306  023D  00E4               	movwf	??_time_settings
  2307  023E  0864               	movf	??_time_settings,w
  2308  023F  00F0               	movwf	time_date_delimiter@hex
  2309  0240  3059               	movlw	89
  2310  0241  00E5               	movwf	??_time_settings+1
  2311  0242  0865               	movf	??_time_settings+1,w
  2312  0243  00F1               	movwf	time_date_delimiter@limiter
  2313  0244  3005               	movlw	5
  2314  0245  00F2               	movwf	time_date_delimiter@type
  2315  0246  3000               	movlw	0
  2316  0247  00F3               	movwf	time_date_delimiter@type+1
  2317  0248  0847               	movf	_c,w
  2318  0249  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2319  024E  00E6               	movwf	??_time_settings+2
  2320  024F  0866               	movf	??_time_settings+2,w
  2321  0250  00C7               	movwf	_c
  2322                           
  2323                           ;Button_src.c: 277:                     c = time_date_delimiter(c,0x41,'j',5);
  2324  0251  3041               	movlw	65
  2325  0252  00E4               	movwf	??_time_settings
  2326  0253  0864               	movf	??_time_settings,w
  2327  0254  00F0               	movwf	time_date_delimiter@hex
  2328  0255  306A               	movlw	106
  2329  0256  00E5               	movwf	??_time_settings+1
  2330  0257  0865               	movf	??_time_settings+1,w
  2331  0258  00F1               	movwf	time_date_delimiter@limiter
  2332  0259  3005               	movlw	5
  2333  025A  00F2               	movwf	time_date_delimiter@type
  2334  025B  3000               	movlw	0
  2335  025C  00F3               	movwf	time_date_delimiter@type+1
  2336  025D  0847               	movf	_c,w
  2337  025E  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2338  0263  00E6               	movwf	??_time_settings+2
  2339  0264  0866               	movf	??_time_settings+2,w
  2340  0265  00C7               	movwf	_c
  2341                           
  2342                           ;Button_src.c: 278:                     c = time_date_delimiter(c,0x51,'z',5);
  2343  0266  3051               	movlw	81
  2344  0267  00E4               	movwf	??_time_settings
  2345  0268  0864               	movf	??_time_settings,w
  2346  0269  00F0               	movwf	time_date_delimiter@hex
  2347  026A  307A               	movlw	122
  2348  026B  00E5               	movwf	??_time_settings+1
  2349  026C  0865               	movf	??_time_settings+1,w
  2350  026D  00F1               	movwf	time_date_delimiter@limiter
  2351  026E  3005               	movlw	5
  2352  026F  00F2               	movwf	time_date_delimiter@type
  2353  0270  3000               	movlw	0
  2354  0271  00F3               	movwf	time_date_delimiter@type+1
  2355  0272  0847               	movf	_c,w
  2356  0273  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2357  0278  00E6               	movwf	??_time_settings+2
  2358  0279  0866               	movf	??_time_settings+2,w
  2359  027A  00C7               	movwf	_c
  2360                           
  2361                           ;Button_src.c: 280:                   RC0 = 0;
  2362  027B  1007               	bcf	7,0	;volatile
  2363                           
  2364                           ;Button_src.c: 281:                   RC1 = 1;
  2365  027C  1487               	bsf	7,1	;volatile
  2366                           
  2367                           ;Button_src.c: 282:                   RC2 = 1;
  2368  027D  1507               	bsf	7,2	;volatile
  2369                           
  2370                           ;Button_src.c: 283:                   RC3 = 1;
  2371  027E  1587               	bsf	7,3	;volatile
  2372                           
  2373                           ;Button_src.c: 284:                     if (RC6 == 0 ){
  2374  027F  1B07               	btfsc	7,6	;volatile
  2375  0280  2A95               	goto	l709
  2376                           
  2377                           ;Button_src.c: 285:                           write_cmd(0x1);
  2378  0281  3001               	movlw	1
  2379  0282  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  2380                           
  2381                           ;Button_src.c: 286:                           a = 0x00;
  2382  0287  01C9               	clrf	_a
  2383                           
  2384                           ;Button_src.c: 287:                           c = 0x00;
  2385  0288  01C7               	clrf	_c
  2386                           
  2387                           ;Button_src.c: 288:                           x = 0;
  2388  0289  01B5               	clrf	_x
  2389  028A  01B6               	clrf	_x+1
  2390                           
  2391                           ;Button_src.c: 289:                           y = 0;
  2392  028B  01B3               	clrf	_y
  2393  028C  01B4               	clrf	_y+1
  2394                           
  2395                           ;Button_src.c: 290:                           w = 0;
  2396  028D  01B7               	clrf	_w
  2397  028E  01B8               	clrf	_w+1
  2398                           
  2399                           ;Button_src.c: 291:                           t = 0;
  2400  028F  01B9               	clrf	_t
  2401  0290  01BA               	clrf	_t+1
  2402                           
  2403                           ;Button_src.c: 292:                           set_time();
  2404  0291  160A  118A  25C3   	fcall	_set_time
  2405  0294  0008               	return
  2406  0295                     l709:	
  2407                           ;Button_src.c: 294:                             }
  2408                           
  2409                           
  2410                           ;Button_src.c: 295:                   RC0 = 1;
  2411  0295  1407               	bsf	7,0	;volatile
  2412                           
  2413                           ;Button_src.c: 296:                   RC1 = 1;
  2414  0296  1487               	bsf	7,1	;volatile
  2415                           
  2416                           ;Button_src.c: 297:                   RC2 = 0;
  2417  0297  1107               	bcf	7,2	;volatile
  2418                           
  2419                           ;Button_src.c: 298:                   RC3 = 1;
  2420  0298  1587               	bsf	7,3	;volatile
  2421                           
  2422                           ;Button_src.c: 299:                   z = modulus_func(z,2);
  2423  0299  0832               	movf	_z+1,w
  2424  029A  00F8               	movwf	modulus_func@x+1
  2425  029B  0831               	movf	_z,w
  2426  029C  00F7               	movwf	modulus_func@x
  2427  029D  3002               	movlw	2
  2428  029E  00F9               	movwf	modulus_func@y
  2429  029F  3000               	movlw	0
  2430  02A0  00FA               	movwf	modulus_func@y+1
  2431  02A1  160A  118A  2434  120A  118A  	fcall	_modulus_func
  2432  02A6  0878               	movf	?_modulus_func+1,w
  2433  02A7  00B2               	movwf	_z+1
  2434  02A8  0877               	movf	?_modulus_func,w
  2435  02A9  00B1               	movwf	_z
  2436                           
  2437                           ;Button_src.c: 300:                   if(RC4 == 0 && z ==0){
  2438  02AA  1A07               	btfsc	7,4	;volatile
  2439  02AB  2AE5               	goto	l4435
  2440  02AC  0831               	movf	_z,w
  2441  02AD  0432               	iorwf	_z+1,w
  2442  02AE  1D03               	btfss	3,2
  2443  02AF  2AE5               	goto	l4435
  2444                           
  2445                           ;Button_src.c: 301:                       write_cmd(0x90);
  2446  02B0  3090               	movlw	144
  2447  02B1  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  2448                           
  2449                           ;Button_src.c: 302:                       write_char('H');
  2450  02B6  3048               	movlw	72
  2451  02B7  160A  118A  24A5  120A  118A  	fcall	_write_char
  2452                           
  2453                           ;Button_src.c: 303:                       write_char('o');
  2454  02BC  306F               	movlw	111
  2455  02BD  160A  118A  24A5  120A  118A  	fcall	_write_char
  2456                           
  2457                           ;Button_src.c: 304:                       write_char('u');
  2458  02C2  3075               	movlw	117
  2459  02C3  160A  118A  24A5  120A  118A  	fcall	_write_char
  2460                           
  2461                           ;Button_src.c: 305:                       write_char('r');
  2462  02C8  3072               	movlw	114
  2463  02C9  160A  118A  24A5  120A  118A  	fcall	_write_char
  2464                           
  2465                           ;Button_src.c: 306:                       write_char(':');
  2466  02CE  303A               	movlw	58
  2467  02CF  160A  118A  24A5  120A  118A  	fcall	_write_char
  2468                           
  2469                           ;Button_src.c: 307:                       b = 'x';
  2470  02D4  3078               	movlw	120
  2471  02D5  00E4               	movwf	??_time_settings
  2472  02D6  0864               	movf	??_time_settings,w
  2473  02D7  00C8               	movwf	_b
  2474                           
  2475                           ;Button_src.c: 308:                       button_delay();
  2476  02D8  160A  118A  2455  120A  118A  	fcall	_button_delay
  2477                           
  2478                           ;Button_src.c: 309:                       z++;
  2479  02DD  3001               	movlw	1
  2480  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2481  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2482  02E0  07B1               	addwf	_z,f
  2483  02E1  1803               	skipnc
  2484  02E2  0AB2               	incf	_z+1,f
  2485  02E3  3000               	movlw	0
  2486  02E4  07B2               	addwf	_z+1,f
  2487  02E5                     l4435:	
  2488                           
  2489                           ;Button_src.c: 311:                   RC0 = 1;
  2490  02E5  1407               	bsf	7,0	;volatile
  2491                           
  2492                           ;Button_src.c: 312:                   RC1 = 1;
  2493  02E6  1487               	bsf	7,1	;volatile
  2494                           
  2495                           ;Button_src.c: 313:                   RC2 = 0;
  2496  02E7  1107               	bcf	7,2	;volatile
  2497                           
  2498                           ;Button_src.c: 314:                   RC3 = 1;
  2499  02E8  1587               	bsf	7,3	;volatile
  2500                           
  2501                           ;Button_src.c: 316:                   if(RC4 == 0&& z ==1){
  2502  02E9  1A07               	btfsc	7,4	;volatile
  2503  02EA  2B22               	goto	l712
  2504  02EB  0331               	decf	_z,w
  2505  02EC  0432               	iorwf	_z+1,w
  2506  02ED  1D03               	btfss	3,2
  2507  02EE  2B22               	goto	l712
  2508                           
  2509                           ;Button_src.c: 317:                     z++;
  2510  02EF  3001               	movlw	1
  2511  02F0  07B1               	addwf	_z,f
  2512  02F1  1803               	skipnc
  2513  02F2  0AB2               	incf	_z+1,f
  2514  02F3  3000               	movlw	0
  2515  02F4  07B2               	addwf	_z+1,f
  2516                           
  2517                           ;Button_src.c: 318:                     button_delay();
  2518  02F5  160A  118A  2455  120A  118A  	fcall	_button_delay
  2519                           
  2520                           ;Button_src.c: 319:                     write_cmd(0x90);
  2521  02FA  3090               	movlw	144
  2522  02FB  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  2523                           
  2524                           ;Button_src.c: 320:                     write_char('M');
  2525  0300  304D               	movlw	77
  2526  0301  160A  118A  24A5  120A  118A  	fcall	_write_char
  2527                           
  2528                           ;Button_src.c: 321:                     write_char('i');
  2529  0306  3069               	movlw	105
  2530  0307  160A  118A  24A5  120A  118A  	fcall	_write_char
  2531                           
  2532                           ;Button_src.c: 322:                     write_char('n');
  2533  030C  306E               	movlw	110
  2534  030D  160A  118A  24A5  120A  118A  	fcall	_write_char
  2535                           
  2536                           ;Button_src.c: 323:                     write_char('s');
  2537  0312  3073               	movlw	115
  2538  0313  160A  118A  24A5  120A  118A  	fcall	_write_char
  2539                           
  2540                           ;Button_src.c: 324:                     write_char(':');
  2541  0318  303A               	movlw	58
  2542  0319  160A  118A  24A5  120A  118A  	fcall	_write_char
  2543                           
  2544                           ;Button_src.c: 325:                     b = 'y';
  2545  031E  3079               	movlw	121
  2546  031F  00E4               	movwf	??_time_settings
  2547  0320  0864               	movf	??_time_settings,w
  2548  0321  00C8               	movwf	_b
  2549  0322                     l712:	
  2550                           ;Button_src.c: 326:                   }
  2551                           
  2552                           
  2553                           ;Button_src.c: 327:                    write_cmd(0x88);
  2554  0322  3088               	movlw	136
  2555  0323  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  2556                           
  2557                           ;Button_src.c: 331:                   RC0 = 1;
  2558  0328  1407               	bsf	7,0	;volatile
  2559                           
  2560                           ;Button_src.c: 332:                   RC1 = 1;
  2561  0329  1487               	bsf	7,1	;volatile
  2562                           
  2563                           ;Button_src.c: 333:                   RC2 = 0;
  2564  032A  1107               	bcf	7,2	;volatile
  2565                           
  2566                           ;Button_src.c: 334:                   RC3 = 1;
  2567  032B  1587               	bsf	7,3	;volatile
  2568                           
  2569                           ;Button_src.c: 336:              write_cmd(0x88);
  2570  032C  3088               	movlw	136
  2571  032D  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  2572                           
  2573                           ;Button_src.c: 337:              write_char('T');
  2574  0332  3054               	movlw	84
  2575  0333  160A  118A  24A5  120A  118A  	fcall	_write_char
  2576                           
  2577                           ;Button_src.c: 338:              write_char('i');
  2578  0338  3069               	movlw	105
  2579  0339  160A  118A  24A5  120A  118A  	fcall	_write_char
  2580                           
  2581                           ;Button_src.c: 339:              write_char('m');
  2582  033E  306D               	movlw	109
  2583  033F  160A  118A  24A5  120A  118A  	fcall	_write_char
  2584                           
  2585                           ;Button_src.c: 340:              write_char('e');
  2586  0344  3065               	movlw	101
  2587  0345  160A  118A  24A5  120A  118A  	fcall	_write_char
  2588                           
  2589                           ;Button_src.c: 341:              write_char(':');
  2590  034A  303A               	movlw	58
  2591  034B  160A  118A  24A5  120A  118A  	fcall	_write_char
  2592                           
  2593                           ;Button_src.c: 342:              write_char(y + '0');
  2594  0350  0833               	movf	_y,w
  2595  0351  3E30               	addlw	48
  2596  0352  160A  118A  24A5  120A  118A  	fcall	_write_char
  2597                           
  2598                           ;Button_src.c: 343:              write_char(x + '0');
  2599  0357  0835               	movf	_x,w
  2600  0358  3E30               	addlw	48
  2601  0359  160A  118A  24A5  120A  118A  	fcall	_write_char
  2602                           
  2603                           ;Button_src.c: 344:              write_char(':');
  2604  035E  303A               	movlw	58
  2605  035F  160A  118A  24A5  120A  118A  	fcall	_write_char
  2606                           
  2607                           ;Button_src.c: 345:              write_char(w + '0');
  2608  0364  0837               	movf	_w,w
  2609  0365  3E30               	addlw	48
  2610  0366  160A  118A  24A5  120A  118A  	fcall	_write_char
  2611                           
  2612                           ;Button_src.c: 346:              write_char(t + '0');
  2613  036B  0839               	movf	_t,w
  2614  036C  3E30               	addlw	48
  2615  036D  160A  118A  24A5  120A  118A  	fcall	_write_char
  2616                           
  2617                           ;Button_src.c: 348:             RC0 = 0;
  2618  0372  1007               	bcf	7,0	;volatile
  2619                           
  2620                           ;Button_src.c: 349:             RC1 = 1;
  2621  0373  1487               	bsf	7,1	;volatile
  2622                           
  2623                           ;Button_src.c: 350:             RC2 = 1;
  2624  0374  1507               	bsf	7,2	;volatile
  2625                           
  2626                           ;Button_src.c: 351:             RC3 = 1;
  2627  0375  1587               	bsf	7,3	;volatile
  2628                           
  2629                           ;Button_src.c: 352:             if (RC7 == 0 ){
  2630  0376  1B87               	btfsc	7,7	;volatile
  2631  0377  287D               	goto	l692
  2632                           
  2633                           ;Button_src.c: 353:             a = 0x00;
  2634  0378  01C9               	clrf	_a
  2635                           
  2636                           ;Button_src.c: 354:             c = 0x00;
  2637  0379  01C7               	clrf	_c
  2638                           
  2639                           ;Button_src.c: 355:             x = 0;
  2640  037A  01B5               	clrf	_x
  2641  037B  01B6               	clrf	_x+1
  2642                           
  2643                           ;Button_src.c: 356:             y = 0;
  2644  037C  01B3               	clrf	_y
  2645  037D  01B4               	clrf	_y+1
  2646                           
  2647                           ;Button_src.c: 357:             w = 0;
  2648  037E  01B7               	clrf	_w
  2649  037F  01B8               	clrf	_w+1
  2650                           
  2651                           ;Button_src.c: 358:             t = 0;
  2652  0380  01B9               	clrf	_t
  2653  0381  01BA               	clrf	_t+1
  2654                           
  2655                           ;Button_src.c: 359:             write_cmd(0x1);
  2656  0382  3001               	movlw	1
  2657  0383  160A  118A  24BC   	fcall	_write_cmd
  2658                           
  2659                           ;Button_src.c: 360:             break;
  2660  0386  0008               	return
  2661  0387                     __end_of_time_settings:	
  2662                           
  2663                           	psect	text2
  2664  0D92                     __ptext2:	
  2665 ;; *************** function _thermometer_threshhold_settings *****************
  2666 ;; Defined at:
  2667 ;;		line 23 in file "Button_src.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  i               2    8[BANK0 ] int 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 300/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2681 ;;      Params:         0       0       0       0       0
  2682 ;;      Locals:         0       2       0       0       0
  2683 ;;      Temps:          0       3       0       0       0
  2684 ;;      Totals:         0       5       0       0       0
  2685 ;;Total ram usage:        5 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    3
  2688 ;; This function calls:
  2689 ;;		_button_delay
  2690 ;;		_decrementor
  2691 ;;		_incrementor
  2692 ;;		_modulus_func
  2693 ;;		_write_char
  2694 ;;		_write_cmd
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function _thermometer_threshhold_settings
  2702  0D92                     _thermometer_threshhold_settings:	
  2703                           
  2704                           ;Button_src.c: 24:  RC0 = 1;
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2708  0D92  1407               	bsf	7,0	;volatile
  2709                           
  2710                           ;Button_src.c: 25:  RC1 = 0;
  2711  0D93  1087               	bcf	7,1	;volatile
  2712                           
  2713                           ;Button_src.c: 26:  RC2 = 1;
  2714  0D94  1507               	bsf	7,2	;volatile
  2715                           
  2716                           ;Button_src.c: 27:  RC3 = 1;
  2717  0D95  1587               	bsf	7,3	;volatile
  2718                           
  2719                           ;Button_src.c: 28:   if (RC4 == 0){
  2720  0D96  1A07               	btfsc	7,4	;volatile
  2721  0D97  0008               	return
  2722                           
  2723                           ;Button_src.c: 29:       write_cmd(0x1);
  2724  0D98  3001               	movlw	1
  2725  0D99  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  2726                           
  2727                           ;Button_src.c: 31:             write_cmd(0x80);
  2728                           
  2729                           ;Button_src.c: 30:       for(;;){
  2730  0D9E  3080               	movlw	128
  2731  0D9F  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  2732                           
  2733                           ;Button_src.c: 32:             write_char('t');
  2734  0DA4  3074               	movlw	116
  2735  0DA5  160A  118A  24A5  120A  158A  	fcall	_write_char
  2736                           
  2737                           ;Button_src.c: 33:             write_char('h');
  2738  0DAA  3068               	movlw	104
  2739  0DAB  160A  118A  24A5  120A  158A  	fcall	_write_char
  2740                           
  2741                           ;Button_src.c: 34:             write_char('r');
  2742  0DB0  3072               	movlw	114
  2743  0DB1  160A  118A  24A5  120A  158A  	fcall	_write_char
  2744                           
  2745                           ;Button_src.c: 35:             write_char('e');
  2746  0DB6  3065               	movlw	101
  2747  0DB7  160A  118A  24A5  120A  158A  	fcall	_write_char
  2748                           
  2749                           ;Button_src.c: 36:             write_char('s');
  2750  0DBC  3073               	movlw	115
  2751  0DBD  160A  118A  24A5  120A  158A  	fcall	_write_char
  2752                           
  2753                           ;Button_src.c: 37:             write_char('h');
  2754  0DC2  3068               	movlw	104
  2755  0DC3  160A  118A  24A5  120A  158A  	fcall	_write_char
  2756                           
  2757                           ;Button_src.c: 38:             write_char('o');
  2758  0DC8  306F               	movlw	111
  2759  0DC9  160A  118A  24A5  120A  158A  	fcall	_write_char
  2760                           
  2761                           ;Button_src.c: 39:             write_char('l');
  2762  0DCE  306C               	movlw	108
  2763  0DCF  160A  118A  24A5  120A  158A  	fcall	_write_char
  2764                           
  2765                           ;Button_src.c: 40:             write_char('d');
  2766  0DD4  3064               	movlw	100
  2767  0DD5  160A  118A  24A5  120A  158A  	fcall	_write_char
  2768                           
  2769                           ;Button_src.c: 42:             write_cmd(0x90);
  2770  0DDA  3090               	movlw	144
  2771  0DDB  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  2772                           
  2773                           ;Button_src.c: 43:             write_char('C');
  2774  0DE0  3043               	movlw	67
  2775  0DE1  160A  118A  24A5  120A  158A  	fcall	_write_char
  2776                           
  2777                           ;Button_src.c: 44:             write_char('u');
  2778  0DE6  3075               	movlw	117
  2779  0DE7  160A  118A  24A5  120A  158A  	fcall	_write_char
  2780                           
  2781                           ;Button_src.c: 45:             write_char('r');
  2782  0DEC  3072               	movlw	114
  2783  0DED  160A  118A  24A5  120A  158A  	fcall	_write_char
  2784                           
  2785                           ;Button_src.c: 46:             write_char('r');
  2786  0DF2  3072               	movlw	114
  2787  0DF3  160A  118A  24A5  120A  158A  	fcall	_write_char
  2788                           
  2789                           ;Button_src.c: 47:             write_char('e');
  2790  0DF8  3065               	movlw	101
  2791  0DF9  160A  118A  24A5  120A  158A  	fcall	_write_char
  2792                           
  2793                           ;Button_src.c: 48:             write_char('n');
  2794  0DFE  306E               	movlw	110
  2795  0DFF  160A  118A  24A5  120A  158A  	fcall	_write_char
  2796                           
  2797                           ;Button_src.c: 49:             write_char('t');
  2798  0E04  3074               	movlw	116
  2799  0E05  160A  118A  24A5  120A  158A  	fcall	_write_char
  2800                           
  2801                           ;Button_src.c: 50:             write_char(':');
  2802  0E0A  303A               	movlw	58
  2803  0E0B  160A  118A  24A5  120A  158A  	fcall	_write_char
  2804                           
  2805                           ;Button_src.c: 52:             write_char(var1 + '0');
  2806  0E10  084E               	movf	_var1,w
  2807  0E11  3E30               	addlw	48
  2808  0E12  160A  118A  24A5  120A  158A  	fcall	_write_char
  2809                           
  2810                           ;Button_src.c: 53:             write_char(var2 + '0');
  2811  0E17  084D               	movf	_var2,w
  2812  0E18  3E30               	addlw	48
  2813  0E19  160A  118A  24A5  120A  158A  	fcall	_write_char
  2814                           
  2815                           ;Button_src.c: 55:             write_cmd(0x88);
  2816  0E1E  3088               	movlw	136
  2817  0E1F  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  2818                           
  2819                           ;Button_src.c: 56:             write_char('S');
  2820  0E24  3053               	movlw	83
  2821  0E25  160A  118A  24A5  120A  158A  	fcall	_write_char
  2822                           
  2823                           ;Button_src.c: 57:             write_char('e');
  2824  0E2A  3065               	movlw	101
  2825  0E2B  160A  118A  24A5  120A  158A  	fcall	_write_char
  2826                           
  2827                           ;Button_src.c: 58:             write_char('t');
  2828  0E30  3074               	movlw	116
  2829  0E31  160A  118A  24A5  120A  158A  	fcall	_write_char
  2830                           
  2831                           ;Button_src.c: 59:             write_char('_');
  2832  0E36  305F               	movlw	95
  2833  0E37  160A  118A  24A5  120A  158A  	fcall	_write_char
  2834                           
  2835                           ;Button_src.c: 60:             write_char('t');
  2836  0E3C  3074               	movlw	116
  2837  0E3D  160A  118A  24A5  120A  158A  	fcall	_write_char
  2838                           
  2839                           ;Button_src.c: 61:             write_char('h');
  2840  0E42  3068               	movlw	104
  2841  0E43  160A  118A  24A5  120A  158A  	fcall	_write_char
  2842                           
  2843                           ;Button_src.c: 62:             write_char('r');
  2844  0E48  3072               	movlw	114
  2845  0E49  160A  118A  24A5  120A  158A  	fcall	_write_char
  2846                           
  2847                           ;Button_src.c: 63:             write_char('e');
  2848  0E4E  3065               	movlw	101
  2849  0E4F  160A  118A  24A5  120A  158A  	fcall	_write_char
  2850                           
  2851                           ;Button_src.c: 64:             write_char('s');
  2852  0E54  3073               	movlw	115
  2853  0E55  160A  118A  24A5  120A  158A  	fcall	_write_char
  2854                           
  2855                           ;Button_src.c: 65:             write_char('h');
  2856  0E5A  3068               	movlw	104
  2857  0E5B  160A  118A  24A5  120A  158A  	fcall	_write_char
  2858                           
  2859                           ;Button_src.c: 66:             write_char('o');
  2860  0E60  306F               	movlw	111
  2861  0E61  160A  118A  24A5  120A  158A  	fcall	_write_char
  2862                           
  2863                           ;Button_src.c: 67:             write_char('l');
  2864  0E66  306C               	movlw	108
  2865  0E67  160A  118A  24A5  120A  158A  	fcall	_write_char
  2866                           
  2867                           ;Button_src.c: 68:             write_char('d');
  2868  0E6C  3064               	movlw	100
  2869  0E6D  160A  118A  24A5  120A  158A  	fcall	_write_char
  2870                           
  2871                           ;Button_src.c: 69:             write_char(':');
  2872  0E72  303A               	movlw	58
  2873  0E73  160A  118A  24A5  120A  158A  	fcall	_write_char
  2874                           
  2875                           ;Button_src.c: 71:             write_cmd(0x98);
  2876  0E78  3098               	movlw	152
  2877  0E79  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  2878                           
  2879                           ;Button_src.c: 72:             RC0 = 1;
  2880  0E7E  1407               	bsf	7,0	;volatile
  2881                           
  2882                           ;Button_src.c: 73:             RC1 = 0;
  2883  0E7F  1087               	bcf	7,1	;volatile
  2884                           
  2885                           ;Button_src.c: 74:             RC2 = 1;
  2886  0E80  1507               	bsf	7,2	;volatile
  2887                           
  2888                           ;Button_src.c: 75:             RC3 = 1;
  2889  0E81  1587               	bsf	7,3	;volatile
  2890                           
  2891                           ;Button_src.c: 76:             t = 0;
  2892  0E82  01B9               	clrf	_t
  2893  0E83  01BA               	clrf	_t+1
  2894                           
  2895                           ;Button_src.c: 77:             w = 0;
  2896  0E84  01B7               	clrf	_w
  2897  0E85  01B8               	clrf	_w+1
  2898                           
  2899                           ;Button_src.c: 78:             x = 0;
  2900  0E86  01B5               	clrf	_x
  2901  0E87  01B6               	clrf	_x+1
  2902                           
  2903                           ;Button_src.c: 79:             y = 0;
  2904  0E88  01B3               	clrf	_y
  2905  0E89  01B4               	clrf	_y+1
  2906                           
  2907                           ;Button_src.c: 80:             x = 0x00;
  2908  0E8A  01B5               	clrf	_x
  2909  0E8B  01B6               	clrf	_x+1
  2910  0E8C                     l3893:	
  2911                           
  2912                           ;Button_src.c: 82:                  RC0 = 1;
  2913  0E8C  1407               	bsf	7,0	;volatile
  2914                           
  2915                           ;Button_src.c: 83:                  RC1 = 0;
  2916  0E8D  1087               	bcf	7,1	;volatile
  2917                           
  2918                           ;Button_src.c: 84:                  RC2 = 1;
  2919  0E8E  1507               	bsf	7,2	;volatile
  2920                           
  2921                           ;Button_src.c: 85:                  RC3 = 1;
  2922  0E8F  1587               	bsf	7,3	;volatile
  2923                           
  2924                           ;Button_src.c: 87:                 if(RC7==0){
  2925  0E90  1B87               	btfsc	7,7	;volatile
  2926  0E91  2EEB               	goto	l3921
  2927                           
  2928                           ;Button_src.c: 88:                     write_cmd(0x98);
  2929  0E92  3098               	movlw	152
  2930  0E93  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  2931                           
  2932                           ;Button_src.c: 89:                     x++;
  2933  0E98  3001               	movlw	1
  2934  0E99  07B5               	addwf	_x,f
  2935  0E9A  1803               	skipnc
  2936  0E9B  0AB6               	incf	_x+1,f
  2937  0E9C  3000               	movlw	0
  2938  0E9D  07B6               	addwf	_x+1,f
  2939                           
  2940                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2941  0E9E  0833               	movf	_y,w
  2942  0E9F  00E4               	movwf	??_thermometer_threshhold_settings
  2943  0EA0  01E5               	clrf	??_thermometer_threshhold_settings+1
  2944  0EA1  0864               	movf	??_thermometer_threshhold_settings,w
  2945  0EA2  00B3               	movwf	_y
  2946  0EA3  0865               	movf	??_thermometer_threshhold_settings+1,w
  2947  0EA4  00B4               	movwf	_y+1
  2948                           
  2949                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2950  0EA5  0836               	movf	_x+1,w
  2951  0EA6  00F8               	movwf	modulus_func@x+1
  2952  0EA7  0835               	movf	_x,w
  2953  0EA8  00F7               	movwf	modulus_func@x
  2954  0EA9  300A               	movlw	10
  2955  0EAA  00F9               	movwf	modulus_func@y
  2956  0EAB  3000               	movlw	0
  2957  0EAC  00FA               	movwf	modulus_func@y+1
  2958  0EAD  160A  118A  2434  120A  158A  	fcall	_modulus_func
  2959  0EB2  0877               	movf	?_modulus_func,w
  2960  0EB3  00E4               	movwf	??_thermometer_threshhold_settings
  2961  0EB4  01E5               	clrf	??_thermometer_threshhold_settings+1
  2962  0EB5  0864               	movf	??_thermometer_threshhold_settings,w
  2963  0EB6  00B5               	movwf	_x
  2964  0EB7  0865               	movf	??_thermometer_threshhold_settings+1,w
  2965  0EB8  00B6               	movwf	_x+1
  2966                           
  2967                           ;Button_src.c: 92:                     write_char(y + '0');
  2968  0EB9  0833               	movf	_y,w
  2969  0EBA  3E30               	addlw	48
  2970  0EBB  160A  118A  24A5  120A  158A  	fcall	_write_char
  2971                           
  2972                           ;Button_src.c: 93:                     write_char(x + '0');
  2973  0EC0  0835               	movf	_x,w
  2974  0EC1  3E30               	addlw	48
  2975  0EC2  160A  118A  24A5  120A  158A  	fcall	_write_char
  2976                           
  2977                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2978  0EC7  0834               	movf	_y+1,w
  2979  0EC8  00E0               	movwf	incrementor@upper_val+1
  2980  0EC9  0833               	movf	_y,w
  2981  0ECA  00DF               	movwf	incrementor@upper_val
  2982  0ECB  0836               	movf	_x+1,w
  2983  0ECC  00E2               	movwf	incrementor@lower_val+1
  2984  0ECD  0835               	movf	_x,w
  2985  0ECE  00E1               	movwf	incrementor@lower_val
  2986  0ECF  3039               	movlw	57
  2987  0ED0  00E4               	movwf	??_thermometer_threshhold_settings
  2988  0ED1  0864               	movf	??_thermometer_threshhold_settings,w
  2989  0ED2  00E3               	movwf	incrementor@z
  2990  0ED3  160A  118A  2555  120A  158A  	fcall	_incrementor
  2991  0ED8  00E5               	movwf	??_thermometer_threshhold_settings+1
  2992  0ED9  01E6               	clrf	??_thermometer_threshhold_settings+2
  2993  0EDA  0865               	movf	??_thermometer_threshhold_settings+1,w
  2994  0EDB  00B3               	movwf	_y
  2995  0EDC  0866               	movf	??_thermometer_threshhold_settings+2,w
  2996  0EDD  00B4               	movwf	_y+1
  2997                           
  2998                           ;Button_src.c: 95:                     t = x;
  2999  0EDE  0836               	movf	_x+1,w
  3000  0EDF  00BA               	movwf	_t+1
  3001  0EE0  0835               	movf	_x,w
  3002  0EE1  00B9               	movwf	_t
  3003                           
  3004                           ;Button_src.c: 96:                     w = y;
  3005  0EE2  0834               	movf	_y+1,w
  3006  0EE3  00B8               	movwf	_w+1
  3007  0EE4  0833               	movf	_y,w
  3008  0EE5  00B7               	movwf	_w
  3009                           
  3010                           ;Button_src.c: 97:                     button_delay();
  3011  0EE6  160A  118A  2455  120A  158A  	fcall	_button_delay
  3012  0EEB                     l3921:	
  3013                           
  3014                           ;Button_src.c: 99:                   RC0 = 0;
  3015  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0EED  1007               	bcf	7,0	;volatile
  3018                           
  3019                           ;Button_src.c: 100:                     RC1 = 1;
  3020  0EEE  1487               	bsf	7,1	;volatile
  3021                           
  3022                           ;Button_src.c: 101:                     RC2 = 1;
  3023  0EEF  1507               	bsf	7,2	;volatile
  3024                           
  3025                           ;Button_src.c: 102:                     RC3 = 1;
  3026  0EF0  1587               	bsf	7,3	;volatile
  3027                           
  3028                           ;Button_src.c: 103:                     if(RC6 == 0){
  3029  0EF1  1B07               	btfsc	7,6	;volatile
  3030  0EF2  2F3D               	goto	l679
  3031                           
  3032                           ;Button_src.c: 104:                         var1 = y;
  3033  0EF3  0833               	movf	_y,w
  3034  0EF4  00E4               	movwf	??_thermometer_threshhold_settings
  3035  0EF5  0864               	movf	??_thermometer_threshhold_settings,w
  3036  0EF6  00CE               	movwf	_var1
  3037                           
  3038                           ;Button_src.c: 105:                         var2 = x;
  3039  0EF7  0835               	movf	_x,w
  3040  0EF8  00E4               	movwf	??_thermometer_threshhold_settings
  3041  0EF9  0864               	movf	??_thermometer_threshhold_settings,w
  3042  0EFA  00CD               	movwf	_var2
  3043                           
  3044                           ;Button_src.c: 106:                         x = 0;
  3045  0EFB  01B5               	clrf	_x
  3046  0EFC  01B6               	clrf	_x+1
  3047                           
  3048                           ;Button_src.c: 107:                         y = 0;
  3049  0EFD  01B3               	clrf	_y
  3050  0EFE  01B4               	clrf	_y+1
  3051                           
  3052                           ;Button_src.c: 108:                         w = 0;
  3053  0EFF  01B7               	clrf	_w
  3054  0F00  01B8               	clrf	_w+1
  3055                           
  3056                           ;Button_src.c: 109:                         t = 0;
  3057  0F01  01B9               	clrf	_t
  3058  0F02  01BA               	clrf	_t+1
  3059                           
  3060                           ;Button_src.c: 111:                         write_cmd(0x1);
  3061  0F03  3001               	movlw	1
  3062  0F04  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  3063                           
  3064                           ;Button_src.c: 112:                         write_char('S');
  3065  0F09  3053               	movlw	83
  3066  0F0A  160A  118A  24A5  120A  158A  	fcall	_write_char
  3067                           
  3068                           ;Button_src.c: 113:                         write_char('A');
  3069  0F0F  3041               	movlw	65
  3070  0F10  160A  118A  24A5  120A  158A  	fcall	_write_char
  3071                           
  3072                           ;Button_src.c: 114:                         write_char('V');
  3073  0F15  3056               	movlw	86
  3074  0F16  160A  118A  24A5  120A  158A  	fcall	_write_char
  3075                           
  3076                           ;Button_src.c: 115:                         write_char('E');
  3077  0F1B  3045               	movlw	69
  3078  0F1C  160A  118A  24A5  120A  158A  	fcall	_write_char
  3079                           
  3080                           ;Button_src.c: 116:                         write_char('D');
  3081  0F21  3044               	movlw	68
  3082  0F22  160A  118A  24A5  120A  158A  	fcall	_write_char
  3083                           
  3084                           ;Button_src.c: 117:                         for(int i=0;i<30000;i++);
  3085  0F27  01E7               	clrf	thermometer_threshhold_settings@i
  3086  0F28  01E8               	clrf	thermometer_threshhold_settings@i+1
  3087  0F29                     l3959:	
  3088  0F29  3001               	movlw	1
  3089  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0F2C  07E7               	addwf	thermometer_threshhold_settings@i,f
  3092  0F2D  1803               	skipnc
  3093  0F2E  0AE8               	incf	thermometer_threshhold_settings@i+1,f
  3094  0F2F  3000               	movlw	0
  3095  0F30  07E8               	addwf	thermometer_threshhold_settings@i+1,f
  3096  0F31  0868               	movf	thermometer_threshhold_settings@i+1,w
  3097  0F32  3A80               	xorlw	128
  3098  0F33  00FF               	movwf	127
  3099  0F34  30F5               	movlw	245
  3100  0F35  027F               	subwf	127,w
  3101  0F36  1D03               	skipz
  3102  0F37  2F3A               	goto	u3085
  3103  0F38  3030               	movlw	48
  3104  0F39  0267               	subwf	thermometer_threshhold_settings@i,w
  3105  0F3A                     u3085:	
  3106  0F3A  1803               	btfsc	3,0
  3107  0F3B  0008               	return
  3108  0F3C  2F29               	goto	l3959
  3109  0F3D                     l679:	
  3110                           ;Button_src.c: 119:                     }
  3111                           
  3112                           
  3113                           ;Button_src.c: 120:                  RC0 = 1;
  3114  0F3D  1407               	bsf	7,0	;volatile
  3115                           
  3116                           ;Button_src.c: 121:                  RC1 = 1;
  3117  0F3E  1487               	bsf	7,1	;volatile
  3118                           
  3119                           ;Button_src.c: 122:                  RC2 = 0;
  3120  0F3F  1107               	bcf	7,2	;volatile
  3121                           
  3122                           ;Button_src.c: 123:                  RC3 = 1;
  3123  0F40  1587               	bsf	7,3	;volatile
  3124                           
  3125                           ;Button_src.c: 125:                  if(RC7 == 0){
  3126  0F41  1B87               	btfsc	7,7	;volatile
  3127  0F42  2FAD               	goto	l3983
  3128                           
  3129                           ;Button_src.c: 126:                     write_cmd(0x98);
  3130  0F43  3098               	movlw	152
  3131  0F44  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  3132                           
  3133                           ;Button_src.c: 127:                       t--;
  3134  0F49  3001               	movlw	1
  3135  0F4A  02B9               	subwf	_t,f
  3136  0F4B  3000               	movlw	0
  3137  0F4C  1C03               	skipc
  3138  0F4D  03BA               	decf	_t+1,f
  3139  0F4E  02BA               	subwf	_t+1,f
  3140                           
  3141                           ;Button_src.c: 128:                     w = (unsigned char )w;
  3142  0F4F  0837               	movf	_w,w
  3143  0F50  00E4               	movwf	??_thermometer_threshhold_settings
  3144  0F51  01E5               	clrf	??_thermometer_threshhold_settings+1
  3145  0F52  0864               	movf	??_thermometer_threshhold_settings,w
  3146  0F53  00B7               	movwf	_w
  3147  0F54  0865               	movf	??_thermometer_threshhold_settings+1,w
  3148  0F55  00B8               	movwf	_w+1
  3149                           
  3150                           ;Button_src.c: 129:                     t = (unsigned char )(modulus_func(t,10));
  3151  0F56  083A               	movf	_t+1,w
  3152  0F57  00F8               	movwf	modulus_func@x+1
  3153  0F58  0839               	movf	_t,w
  3154  0F59  00F7               	movwf	modulus_func@x
  3155  0F5A  300A               	movlw	10
  3156  0F5B  00F9               	movwf	modulus_func@y
  3157  0F5C  3000               	movlw	0
  3158  0F5D  00FA               	movwf	modulus_func@y+1
  3159  0F5E  160A  118A  2434  120A  158A  	fcall	_modulus_func
  3160  0F63  0877               	movf	?_modulus_func,w
  3161  0F64  00E4               	movwf	??_thermometer_threshhold_settings
  3162  0F65  01E5               	clrf	??_thermometer_threshhold_settings+1
  3163  0F66  0864               	movf	??_thermometer_threshhold_settings,w
  3164  0F67  00B9               	movwf	_t
  3165  0F68  0865               	movf	??_thermometer_threshhold_settings+1,w
  3166  0F69  00BA               	movwf	_t+1
  3167                           
  3168                           ;Button_src.c: 130:                     write_char(w + '0');
  3169  0F6A  0837               	movf	_w,w
  3170  0F6B  3E30               	addlw	48
  3171  0F6C  160A  118A  24A5  120A  158A  	fcall	_write_char
  3172                           
  3173                           ;Button_src.c: 131:                     write_char(t + '0');
  3174  0F71  0839               	movf	_t,w
  3175  0F72  3E30               	addlw	48
  3176  0F73  160A  118A  24A5  120A  158A  	fcall	_write_char
  3177                           
  3178                           ;Button_src.c: 132:                     w = decrementor(w,t,'0');
  3179  0F78  0838               	movf	_w+1,w
  3180  0F79  00E0               	movwf	decrementor@lower_val+1
  3181  0F7A  0837               	movf	_w,w
  3182  0F7B  00DF               	movwf	decrementor@lower_val
  3183  0F7C  083A               	movf	_t+1,w
  3184  0F7D  00E2               	movwf	decrementor@upper_val+1
  3185  0F7E  0839               	movf	_t,w
  3186  0F7F  00E1               	movwf	decrementor@upper_val
  3187  0F80  3030               	movlw	48
  3188  0F81  00E4               	movwf	??_thermometer_threshhold_settings
  3189  0F82  0864               	movf	??_thermometer_threshhold_settings,w
  3190  0F83  00E3               	movwf	decrementor@z
  3191  0F84  160A  118A  2579  120A  158A  	fcall	_decrementor
  3192  0F89  00E5               	movwf	??_thermometer_threshhold_settings+1
  3193  0F8A  01E6               	clrf	??_thermometer_threshhold_settings+2
  3194  0F8B  0865               	movf	??_thermometer_threshhold_settings+1,w
  3195  0F8C  00B7               	movwf	_w
  3196  0F8D  0866               	movf	??_thermometer_threshhold_settings+2,w
  3197  0F8E  00B8               	movwf	_w+1
  3198                           
  3199                           ;Button_src.c: 133:                     if((t + '0')=='0'){
  3200  0F8F  0839               	movf	_t,w
  3201  0F90  3E30               	addlw	48
  3202  0F91  00E4               	movwf	??_thermometer_threshhold_settings
  3203  0F92  083A               	movf	_t+1,w
  3204  0F93  1803               	skipnc
  3205  0F94  3E01               	addlw	1
  3206  0F95  3E00               	addlw	0
  3207  0F96  00E5               	movwf	??_thermometer_threshhold_settings+1
  3208  0F97  3030               	movlw	48
  3209  0F98  0664               	xorwf	??_thermometer_threshhold_settings,w
  3210  0F99  0465               	iorwf	??_thermometer_threshhold_settings+1,w
  3211  0F9A  1D03               	btfss	3,2
  3212  0F9B  2FA0               	goto	l684
  3213                           
  3214                           ;Button_src.c: 134:                         t = 10;
  3215  0F9C  300A               	movlw	10
  3216  0F9D  00B9               	movwf	_t
  3217  0F9E  3000               	movlw	0
  3218  0F9F  00BA               	movwf	_t+1
  3219  0FA0                     l684:	
  3220                           ;Button_src.c: 135:                     }
  3221                           
  3222                           
  3223                           ;Button_src.c: 137:                     x = t;
  3224  0FA0  083A               	movf	_t+1,w
  3225  0FA1  00B6               	movwf	_x+1
  3226  0FA2  0839               	movf	_t,w
  3227  0FA3  00B5               	movwf	_x
  3228                           
  3229                           ;Button_src.c: 138:                     y = w;
  3230  0FA4  0838               	movf	_w+1,w
  3231  0FA5  00B4               	movwf	_y+1
  3232  0FA6  0837               	movf	_w,w
  3233  0FA7  00B3               	movwf	_y
  3234                           
  3235                           ;Button_src.c: 139:                     button_delay();
  3236  0FA8  160A  118A  2455  120A  158A  	fcall	_button_delay
  3237  0FAD                     l3983:	
  3238                           
  3239                           ;Button_src.c: 141:                 RC0 = 0;
  3240  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0FAF  1007               	bcf	7,0	;volatile
  3243                           
  3244                           ;Button_src.c: 142:                 RC1 = 1;
  3245  0FB0  1487               	bsf	7,1	;volatile
  3246                           
  3247                           ;Button_src.c: 143:                 RC2 = 1;
  3248  0FB1  1507               	bsf	7,2	;volatile
  3249                           
  3250                           ;Button_src.c: 144:                 RC3 = 1;
  3251  0FB2  1587               	bsf	7,3	;volatile
  3252                           
  3253                           ;Button_src.c: 145:                     if(RC6 == 0){
  3254  0FB3  1B07               	btfsc	7,6	;volatile
  3255  0FB4  2FED               	goto	l685
  3256                           
  3257                           ;Button_src.c: 146:                         var1 = w;
  3258  0FB5  0837               	movf	_w,w
  3259  0FB6  00E4               	movwf	??_thermometer_threshhold_settings
  3260  0FB7  0864               	movf	??_thermometer_threshhold_settings,w
  3261  0FB8  00CE               	movwf	_var1
  3262                           
  3263                           ;Button_src.c: 147:                         var2 = t;
  3264  0FB9  0839               	movf	_t,w
  3265  0FBA  00E4               	movwf	??_thermometer_threshhold_settings
  3266  0FBB  0864               	movf	??_thermometer_threshhold_settings,w
  3267  0FBC  00CD               	movwf	_var2
  3268                           
  3269                           ;Button_src.c: 148:                         x = 0;
  3270  0FBD  01B5               	clrf	_x
  3271  0FBE  01B6               	clrf	_x+1
  3272                           
  3273                           ;Button_src.c: 149:                         y = 0;
  3274  0FBF  01B3               	clrf	_y
  3275  0FC0  01B4               	clrf	_y+1
  3276                           
  3277                           ;Button_src.c: 150:                         w = 0;
  3278  0FC1  01B7               	clrf	_w
  3279  0FC2  01B8               	clrf	_w+1
  3280                           
  3281                           ;Button_src.c: 151:                         t = 0;
  3282  0FC3  01B9               	clrf	_t
  3283  0FC4  01BA               	clrf	_t+1
  3284                           
  3285                           ;Button_src.c: 153:                         write_cmd(0x1);
  3286  0FC5  3001               	movlw	1
  3287  0FC6  160A  118A  24BC  120A  158A  	fcall	_write_cmd
  3288                           
  3289                           ;Button_src.c: 154:                         write_char('S');
  3290  0FCB  3053               	movlw	83
  3291  0FCC  160A  118A  24A5  120A  158A  	fcall	_write_char
  3292                           
  3293                           ;Button_src.c: 155:                         write_char('A');
  3294  0FD1  3041               	movlw	65
  3295  0FD2  160A  118A  24A5  120A  158A  	fcall	_write_char
  3296                           
  3297                           ;Button_src.c: 156:                         write_char('V');
  3298  0FD7  3056               	movlw	86
  3299  0FD8  160A  118A  24A5  120A  158A  	fcall	_write_char
  3300                           
  3301                           ;Button_src.c: 157:                         write_char('E');
  3302  0FDD  3045               	movlw	69
  3303  0FDE  160A  118A  24A5  120A  158A  	fcall	_write_char
  3304                           
  3305                           ;Button_src.c: 158:                         write_char('D');
  3306  0FE3  3044               	movlw	68
  3307  0FE4  160A  118A  24A5  120A  158A  	fcall	_write_char
  3308                           
  3309                           ;Button_src.c: 159:                         button_delay();
  3310  0FE9  160A  118A  2455   	fcall	_button_delay
  3311  0FEC  0008               	return
  3312  0FED                     l685:	
  3313                           ;Button_src.c: 161:                     }
  3314                           
  3315                           
  3316                           ;Button_src.c: 162:             RC0 = 0;
  3317  0FED  1007               	bcf	7,0	;volatile
  3318                           
  3319                           ;Button_src.c: 163:             RC1 = 1;
  3320  0FEE  1487               	bsf	7,1	;volatile
  3321                           
  3322                           ;Button_src.c: 164:             RC2 = 1;
  3323  0FEF  1507               	bsf	7,2	;volatile
  3324                           
  3325                           ;Button_src.c: 165:             RC3 = 1;
  3326  0FF0  1587               	bsf	7,3	;volatile
  3327                           
  3328                           ;Button_src.c: 166:             if (RC7 == 0 ){
  3329  0FF1  1B87               	btfsc	7,7	;volatile
  3330  0FF2  2E8C               	goto	l3893
  3331                           
  3332                           ;Button_src.c: 167:                         x = 0;
  3333  0FF3  01B5               	clrf	_x
  3334  0FF4  01B6               	clrf	_x+1
  3335                           
  3336                           ;Button_src.c: 168:                         y = 0;
  3337  0FF5  01B3               	clrf	_y
  3338  0FF6  01B4               	clrf	_y+1
  3339                           
  3340                           ;Button_src.c: 169:                         w = 0;
  3341  0FF7  01B7               	clrf	_w
  3342  0FF8  01B8               	clrf	_w+1
  3343                           
  3344                           ;Button_src.c: 170:                         t = 0;
  3345  0FF9  01B9               	clrf	_t
  3346  0FFA  01BA               	clrf	_t+1
  3347                           
  3348                           ;Button_src.c: 171:             write_cmd(0x1);
  3349  0FFB  3001               	movlw	1
  3350  0FFC  160A  118A  24BC   	fcall	_write_cmd
  3351  0FFF  0008               	return
  3352  1000                     __end_of_thermometer_threshhold_settings:	
  3353                           
  3354                           	psect	text3
  3355  1579                     __ptext3:	
  3356 ;; *************** function _decrementor *****************
  3357 ;; Defined at:
  3358 ;;		line 19 in file "math_src.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  lower_val       2    0[BANK0 ] int 
  3361 ;;  upper_val       2    2[BANK0 ] int 
  3362 ;;  z               1    4[BANK0 ] unsigned char 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      unsigned char 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0, pclath, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 300/0
  3371 ;;		On exit  : 300/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3374 ;;      Params:         0       5       0       0       0
  3375 ;;      Locals:         0       0       0       0       0
  3376 ;;      Temps:          2       0       0       0       0
  3377 ;;      Totals:         2       5       0       0       0
  3378 ;;Total ram usage:        7 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    2
  3381 ;; This function calls:
  3382 ;;		_modulus_func
  3383 ;; This function is called by:
  3384 ;;		_thermometer_threshhold_settings
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           
  3389                           ;psect for function _decrementor
  3390  1579                     _decrementor:	
  3391                           
  3392                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3393                           
  3394                           ;incstack = 0
  3395                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3396  1579  0861               	movf	decrementor@upper_val,w
  3397  157A  3E30               	addlw	48
  3398  157B  00FB               	movwf	??_decrementor
  3399  157C  0862               	movf	decrementor@upper_val+1,w
  3400  157D  1803               	skipnc
  3401  157E  3E01               	addlw	1
  3402  157F  3E00               	addlw	0
  3403  1580  00FC               	movwf	??_decrementor+1
  3404  1581  0863               	movf	decrementor@z,w
  3405  1582  067B               	xorwf	??_decrementor,w
  3406  1583  047C               	iorwf	??_decrementor+1,w
  3407  1584  1D03               	skipz
  3408  1585  2D9B               	goto	l3403
  3409                           
  3410                           ;math_src.c: 21:         lower_val--;
  3411  1586  30FF               	movlw	255
  3412  1587  07DF               	addwf	decrementor@lower_val,f
  3413  1588  1803               	skipnc
  3414  1589  0AE0               	incf	decrementor@lower_val+1,f
  3415  158A  30FF               	movlw	255
  3416  158B  07E0               	addwf	decrementor@lower_val+1,f
  3417                           
  3418                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3419  158C  0860               	movf	decrementor@lower_val+1,w
  3420  158D  00F8               	movwf	modulus_func@x+1
  3421  158E  085F               	movf	decrementor@lower_val,w
  3422  158F  00F7               	movwf	modulus_func@x
  3423  1590  300A               	movlw	10
  3424  1591  00F9               	movwf	modulus_func@y
  3425  1592  3000               	movlw	0
  3426  1593  00FA               	movwf	modulus_func@y+1
  3427  1594  160A  118A  2434   	fcall	_modulus_func
  3428  1597  0878               	movf	?_modulus_func+1,w
  3429  1598  00E0               	movwf	decrementor@lower_val+1
  3430  1599  0877               	movf	?_modulus_func,w
  3431  159A  00DF               	movwf	decrementor@lower_val
  3432  159B                     l3403:	
  3433                           
  3434                           ;math_src.c: 24:      return lower_val;
  3435  159B  085F               	movf	decrementor@lower_val,w
  3436  159C  0008               	return
  3437  159D                     __end_of_decrementor:	
  3438                           
  3439                           	psect	text4
  3440  177D                     __ptext4:	
  3441 ;; *************** function _set_upper_threshold *****************
  3442 ;; Defined at:
  3443 ;;		line 4 in file "threshold_src.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  upper_val       2    3[COMMON] int 
  3446 ;;  lower_val       2    5[COMMON] int 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      unsigned char 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 300/0
  3455 ;;		On exit  : 300/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3458 ;;      Params:         4       0       0       0       0
  3459 ;;      Locals:         0       0       0       0       0
  3460 ;;      Temps:          1       0       0       0       0
  3461 ;;      Totals:         5       0       0       0       0
  3462 ;;Total ram usage:        5 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    2
  3465 ;; This function calls:
  3466 ;;		_write_char
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           
  3473                           ;psect for function _set_upper_threshold
  3474  177D                     _set_upper_threshold:	
  3475                           
  3476                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3477                           
  3478                           ;incstack = 0
  3479                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3480  177D  0874               	movf	set_upper_threshold@upper_val+1,w
  3481  177E  3A80               	xorlw	128
  3482  177F  3C80               	sublw	128
  3483  1780  1D03               	skipz
  3484  1781  2F84               	goto	u3755
  3485  1782  0873               	movf	set_upper_threshold@upper_val,w
  3486  1783  025A               	subwf	_shi,w
  3487  1784                     u3755:	
  3488  1784  1C03               	skipc
  3489  1785  2FBA               	goto	l889
  3490  1786  0876               	movf	set_upper_threshold@lower_val+1,w
  3491  1787  3A80               	xorlw	128
  3492  1788  3C80               	sublw	128
  3493  1789  1D03               	skipz
  3494  178A  2F8F               	goto	u3765
  3495  178B  0875               	movf	set_upper_threshold@lower_val,w
  3496  178C  1283               	bcf	3,5	;RP0=0, select bank0
  3497  178D  1303               	bcf	3,6	;RP1=0, select bank0
  3498  178E  0259               	subwf	_ge,w
  3499  178F                     u3765:	
  3500  178F  1C03               	skipc
  3501  1790  2FBA               	goto	l889
  3502                           
  3503                           ;threshold_src.c: 6:         if(count == 2)
  3504  1791  3002               	movlw	2
  3505  1792  1283               	bcf	3,5	;RP0=0, select bank0
  3506  1793  1303               	bcf	3,6	;RP1=0, select bank0
  3507  1794  063B               	xorwf	_count,w
  3508  1795  043C               	iorwf	_count+1,w
  3509  1796  1D03               	btfss	3,2
  3510  1797  2F9C               	goto	l890
  3511                           
  3512                           ;threshold_src.c: 7:     buzzer_watcher = 'w';
  3513  1798  3077               	movlw	119
  3514  1799  00F7               	movwf	??_set_upper_threshold
  3515  179A  0877               	movf	??_set_upper_threshold,w
  3516  179B  00D2               	movwf	_buzzer_watcher
  3517  179C                     l890:	
  3518                           
  3519                           ;threshold_src.c: 8:     heater_state = '0';
  3520  179C  3030               	movlw	48
  3521  179D  00F7               	movwf	??_set_upper_threshold
  3522  179E  0877               	movf	??_set_upper_threshold,w
  3523  179F  00D0               	movwf	_heater_state
  3524                           
  3525                           ;threshold_src.c: 9:     cooler_state = '1';
  3526  17A0  3031               	movlw	49
  3527  17A1  00F7               	movwf	??_set_upper_threshold
  3528  17A2  0877               	movf	??_set_upper_threshold,w
  3529  17A3  00CF               	movwf	_cooler_state
  3530                           
  3531                           ;threshold_src.c: 10:     write_char('W');
  3532  17A4  3057               	movlw	87
  3533  17A5  160A  118A  24A5  160A  118A  	fcall	_write_char
  3534                           
  3535                           ;threshold_src.c: 11:     write_char('A');
  3536  17AA  3041               	movlw	65
  3537  17AB  160A  118A  24A5  160A  118A  	fcall	_write_char
  3538                           
  3539                           ;threshold_src.c: 12:     write_char('R');
  3540  17B0  3052               	movlw	82
  3541  17B1  160A  118A  24A5  160A  118A  	fcall	_write_char
  3542                           
  3543                           ;threshold_src.c: 13:     write_char('M');
  3544  17B6  304D               	movlw	77
  3545  17B7  160A  118A  24A5   	fcall	_write_char
  3546  17BA                     l889:	
  3547                           ;threshold_src.c: 15:     }
  3548                           
  3549                           
  3550                           ;threshold_src.c: 16:     return buzzer_watcher;
  3551  17BA  1283               	bcf	3,5	;RP0=0, select bank0
  3552  17BB  1303               	bcf	3,6	;RP1=0, select bank0
  3553  17BC  0852               	movf	_buzzer_watcher,w
  3554  17BD  0008               	return
  3555  17BE                     __end_of_set_upper_threshold:	
  3556                           
  3557                           	psect	text5
  3558  17BE                     __ptext5:	
  3559 ;; *************** function _set_lower_threshold *****************
  3560 ;; Defined at:
  3561 ;;		line 19 in file "threshold_src.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  upper_val       2    3[COMMON] int 
  3564 ;;  lower_val       2    5[COMMON] int 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      unsigned char 
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 300/0
  3573 ;;		On exit  : 300/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3576 ;;      Params:         4       0       0       0       0
  3577 ;;      Locals:         0       0       0       0       0
  3578 ;;      Temps:          1       0       0       0       0
  3579 ;;      Totals:         5       0       0       0       0
  3580 ;;Total ram usage:        5 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    2
  3583 ;; This function calls:
  3584 ;;		_write_char
  3585 ;; This function is called by:
  3586 ;;		_main
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           
  3591                           ;psect for function _set_lower_threshold
  3592  17BE                     _set_lower_threshold:	
  3593                           
  3594                           ;threshold_src.c: 20:     if((shi <= upper_val && ge < lower_val))
  3595                           
  3596                           ;incstack = 0
  3597                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3598  17BE  0874               	movf	set_lower_threshold@upper_val+1,w
  3599  17BF  3A80               	xorlw	128
  3600  17C0  00F7               	movwf	??_set_lower_threshold
  3601  17C1  3080               	movlw	128
  3602  17C2  0277               	subwf	??_set_lower_threshold,w
  3603  17C3  1D03               	skipz
  3604  17C4  2FC7               	goto	u3735
  3605  17C5  085A               	movf	_shi,w
  3606  17C6  0273               	subwf	set_lower_threshold@upper_val,w
  3607  17C7                     u3735:	
  3608  17C7  1C03               	skipc
  3609  17C8  2FFC               	goto	l894
  3610  17C9  0876               	movf	set_lower_threshold@lower_val+1,w
  3611  17CA  3A80               	xorlw	128
  3612  17CB  3C80               	sublw	128
  3613  17CC  1D03               	skipz
  3614  17CD  2FD2               	goto	u3745
  3615  17CE  0875               	movf	set_lower_threshold@lower_val,w
  3616  17CF  1283               	bcf	3,5	;RP0=0, select bank0
  3617  17D0  1303               	bcf	3,6	;RP1=0, select bank0
  3618  17D1  0259               	subwf	_ge,w
  3619  17D2                     u3745:	
  3620  17D2  1803               	skipnc
  3621  17D3  2FFC               	goto	l894
  3622                           
  3623                           ;threshold_src.c: 21:     {;threshold_src.c: 22:     count = 2;
  3624  17D4  3002               	movlw	2
  3625  17D5  1283               	bcf	3,5	;RP0=0, select bank0
  3626  17D6  1303               	bcf	3,6	;RP1=0, select bank0
  3627  17D7  00BB               	movwf	_count
  3628  17D8  3000               	movlw	0
  3629  17D9  00BC               	movwf	_count+1
  3630                           
  3631                           ;threshold_src.c: 23:     buzzer_watcher = 'x';
  3632  17DA  3078               	movlw	120
  3633  17DB  00F7               	movwf	??_set_lower_threshold
  3634  17DC  0877               	movf	??_set_lower_threshold,w
  3635  17DD  00D2               	movwf	_buzzer_watcher
  3636                           
  3637                           ;threshold_src.c: 24:     heater_state = '0';
  3638  17DE  3030               	movlw	48
  3639  17DF  00F7               	movwf	??_set_lower_threshold
  3640  17E0  0877               	movf	??_set_lower_threshold,w
  3641  17E1  00D0               	movwf	_heater_state
  3642                           
  3643                           ;threshold_src.c: 25:     cooler_state = '0';
  3644  17E2  3030               	movlw	48
  3645  17E3  00F7               	movwf	??_set_lower_threshold
  3646  17E4  0877               	movf	??_set_lower_threshold,w
  3647  17E5  00CF               	movwf	_cooler_state
  3648                           
  3649                           ;threshold_src.c: 26:     write_char('O');
  3650  17E6  304F               	movlw	79
  3651  17E7  160A  118A  24A5  160A  118A  	fcall	_write_char
  3652                           
  3653                           ;threshold_src.c: 27:     write_char('K');
  3654  17EC  304B               	movlw	75
  3655  17ED  160A  118A  24A5  160A  118A  	fcall	_write_char
  3656                           
  3657                           ;threshold_src.c: 28:     write_char(' ');
  3658  17F2  3020               	movlw	32
  3659  17F3  160A  118A  24A5  160A  118A  	fcall	_write_char
  3660                           
  3661                           ;threshold_src.c: 29:     write_char(' ');
  3662  17F8  3020               	movlw	32
  3663  17F9  160A  118A  24A5   	fcall	_write_char
  3664  17FC                     l894:	
  3665                           ;threshold_src.c: 30:     }
  3666                           
  3667                           
  3668                           ;threshold_src.c: 31:     return buzzer_watcher;
  3669  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  3670  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  3671  17FE  0852               	movf	_buzzer_watcher,w
  3672  17FF  0008               	return
  3673  1800                     __end_of_set_lower_threshold:	
  3674                           
  3675                           	psect	text6
  3676  14D3                     __ptext6:	
  3677 ;; *************** function _set_beep_threshhold *****************
  3678 ;; Defined at:
  3679 ;;		line 5 in file "buzzer_src.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  x               1    wreg     unsigned char 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  x               1    2[COMMON] unsigned char 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 300/0
  3690 ;;		On exit  : 300/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3693 ;;      Params:         0       0       0       0       0
  3694 ;;      Locals:         1       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0
  3696 ;;      Totals:         1       0       0       0       0
  3697 ;;Total ram usage:        1 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    1
  3700 ;; This function calls:
  3701 ;;		_button_delay
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _set_beep_threshhold
  3709  14D3                     _set_beep_threshhold:	
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3713                           ;set_beep_threshhold@x stored from wreg
  3714  14D3  00F2               	movwf	set_beep_threshhold@x
  3715                           
  3716                           ;buzzer_src.c: 6:     if (x == 'w'){
  3717  14D4  3077               	movlw	119
  3718  14D5  0672               	xorwf	set_beep_threshhold@x,w
  3719  14D6  1D03               	btfss	3,2
  3720  14D7  2CEC               	goto	l4551
  3721                           
  3722                           ;buzzer_src.c: 7:         RE2 = 1;
  3723  14D8  1509               	bsf	9,2	;volatile
  3724                           
  3725                           ;buzzer_src.c: 8:         button_delay();
  3726  14D9  160A  118A  2455  160A  118A  	fcall	_button_delay
  3727                           
  3728                           ;buzzer_src.c: 9:         RE2 = 0;
  3729  14DE  1283               	bcf	3,5	;RP0=0, select bank0
  3730  14DF  1303               	bcf	3,6	;RP1=0, select bank0
  3731  14E0  1109               	bcf	9,2	;volatile
  3732                           
  3733                           ;buzzer_src.c: 10:         button_delay();
  3734  14E1  160A  118A  2455  160A  118A  	fcall	_button_delay
  3735                           
  3736                           ;buzzer_src.c: 11:         RE2 = 1;
  3737  14E6  1283               	bcf	3,5	;RP0=0, select bank0
  3738  14E7  1303               	bcf	3,6	;RP1=0, select bank0
  3739  14E8  1509               	bsf	9,2	;volatile
  3740                           
  3741                           ;buzzer_src.c: 12:         button_delay();
  3742  14E9  160A  118A  2455   	fcall	_button_delay
  3743  14EC                     l4551:	
  3744                           
  3745                           ;buzzer_src.c: 13:         RE2 = 0;
  3746  14EC  1283               	bcf	3,5	;RP0=0, select bank0
  3747  14ED  1303               	bcf	3,6	;RP1=0, select bank0
  3748  14EE  1109               	bcf	9,2	;volatile
  3749  14EF  0008               	return
  3750  14F0                     __end_of_set_beep_threshhold:	
  3751                           
  3752                           	psect	text7
  3753  15EB                     __ptext7:	
  3754 ;; *************** function _reset_alarm *****************
  3755 ;; Defined at:
  3756 ;;		line 34 in file "threshold_src.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      unsigned char 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 300/0
  3767 ;;		On exit  : 300/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3770 ;;      Params:         0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0
  3772 ;;      Temps:          1       0       0       0       0
  3773 ;;      Totals:         1       0       0       0       0
  3774 ;;Total ram usage:        1 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    2
  3777 ;; This function calls:
  3778 ;;		_write_char
  3779 ;; This function is called by:
  3780 ;;		_main
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _reset_alarm
  3786  15EB                     _reset_alarm:	
  3787                           
  3788                           ;threshold_src.c: 35:     RC0 = 1;
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3792  15EB  1407               	bsf	7,0	;volatile
  3793                           
  3794                           ;threshold_src.c: 36:     RC1 = 1;
  3795  15EC  1487               	bsf	7,1	;volatile
  3796                           
  3797                           ;threshold_src.c: 37:     RC2 = 1;
  3798  15ED  1507               	bsf	7,2	;volatile
  3799                           
  3800                           ;threshold_src.c: 38:     RC3 = 0;
  3801  15EE  1187               	bcf	7,3	;volatile
  3802                           
  3803                           ;threshold_src.c: 39:     if(RC4 == 0){
  3804  15EF  1A07               	btfsc	7,4	;volatile
  3805  15F0  2E13               	goto	l4537
  3806                           
  3807                           ;threshold_src.c: 40:         count = 0;
  3808  15F1  01BB               	clrf	_count
  3809  15F2  01BC               	clrf	_count+1
  3810                           
  3811                           ;threshold_src.c: 41:         buzzer_watcher = 'x';
  3812  15F3  3078               	movlw	120
  3813  15F4  00F3               	movwf	??_reset_alarm
  3814  15F5  0873               	movf	??_reset_alarm,w
  3815  15F6  00D2               	movwf	_buzzer_watcher
  3816                           
  3817                           ;threshold_src.c: 42:         write_char('R');
  3818  15F7  3052               	movlw	82
  3819  15F8  160A  118A  24A5  160A  118A  	fcall	_write_char
  3820                           
  3821                           ;threshold_src.c: 43:         write_char('E');
  3822  15FD  3045               	movlw	69
  3823  15FE  160A  118A  24A5  160A  118A  	fcall	_write_char
  3824                           
  3825                           ;threshold_src.c: 44:         write_char('S');
  3826  1603  3053               	movlw	83
  3827  1604  160A  118A  24A5  160A  118A  	fcall	_write_char
  3828                           
  3829                           ;threshold_src.c: 45:         write_char('E');
  3830  1609  3045               	movlw	69
  3831  160A  160A  118A  24A5  160A  118A  	fcall	_write_char
  3832                           
  3833                           ;threshold_src.c: 46:         write_char('T');
  3834  160F  3054               	movlw	84
  3835  1610  160A  118A  24A5   	fcall	_write_char
  3836  1613                     l4537:	
  3837                           
  3838                           ;threshold_src.c: 48:     return buzzer_watcher;
  3839  1613  0852               	movf	_buzzer_watcher,w
  3840  1614  0008               	return
  3841  1615                     __end_of_reset_alarm:	
  3842                           
  3843                           	psect	text8
  3844  0003                     __ptext8:	
  3845 ;; *************** function _lcd_init *****************
  3846 ;; Defined at:
  3847 ;;		line 14 in file "LCD_src.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  i               2    0        int 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 300/100
  3858 ;;		On exit  : 300/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3861 ;;      Params:         0       0       0       0       0
  3862 ;;      Locals:         0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0
  3864 ;;      Totals:         0       0       0       0       0
  3865 ;;Total ram usage:        0 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    2
  3868 ;; This function calls:
  3869 ;;		_delay_screen
  3870 ;;		_write_cmd
  3871 ;; This function is called by:
  3872 ;;		_main
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           
  3877                           ;psect for function _lcd_init
  3878  0003                     _lcd_init:	
  3879                           
  3880                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3881                           
  3882                           ;incstack = 0
  3883                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3884  0003  0185               	clrf	5	;volatile
  3885                           
  3886                           ;LCD_src.c: 18:  RA0=0;
  3887  0004  1283               	bcf	3,5	;RP0=0, select bank0
  3888  0005  1005               	bcf	5,0	;volatile
  3889                           
  3890                           ;LCD_src.c: 19:  delay_screen();
  3891  0006  160A  118A  2469  120A  118A  	fcall	_delay_screen
  3892                           
  3893                           ;LCD_src.c: 20:  RA0=1;
  3894  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3895  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3896  000D  1405               	bsf	5,0	;volatile
  3897                           
  3898                           ;LCD_src.c: 21:  RA2=1;
  3899  000E  1505               	bsf	5,2	;volatile
  3900                           
  3901                           ;LCD_src.c: 22:  write_cmd(0x30);
  3902  000F  3030               	movlw	48
  3903  0010  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  3904                           
  3905                           ;LCD_src.c: 23:  write_cmd(0x01);
  3906  0015  3001               	movlw	1
  3907  0016  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  3908                           
  3909                           ;LCD_src.c: 24:  write_cmd(0x06);
  3910  001B  3006               	movlw	6
  3911  001C  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  3912                           
  3913                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3914  0021  300C               	movlw	12
  3915  0022  160A  118A  24BC   	fcall	_write_cmd
  3916  0025  0008               	return
  3917  0026                     __end_of_lcd_init:	
  3918                           
  3919                           	psect	text9
  3920  1491                     __ptext9:	
  3921 ;; *************** function _initialise_buttons *****************
  3922 ;; Defined at:
  3923 ;;		line 11 in file "Button_src.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;		None
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;		None
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2
  3932 ;; Tracked objects:
  3933 ;;		On entry : 300/0
  3934 ;;		On exit  : 300/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3937 ;;      Params:         0       0       0       0       0
  3938 ;;      Locals:         0       0       0       0       0
  3939 ;;      Temps:          0       0       0       0       0
  3940 ;;      Totals:         0       0       0       0       0
  3941 ;;Total ram usage:        0 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_main
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _initialise_buttons
  3952  1491                     _initialise_buttons:	
  3953                           
  3954                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3958  1491  3006               	movlw	6
  3959  1492  1683               	bsf	3,5	;RP0=1, select bank1
  3960  1493  009F               	movwf	31	;volatile
  3961                           
  3962                           ;Button_src.c: 13:     TRISC = 0xf0;
  3963  1494  30F0               	movlw	240
  3964  1495  0087               	movwf	7	;volatile
  3965                           
  3966                           ;Button_src.c: 14:     a = 0x00;
  3967  1496  1283               	bcf	3,5	;RP0=0, select bank0
  3968  1497  01C9               	clrf	_a
  3969                           
  3970                           ;Button_src.c: 15:     b = 0x00;
  3971  1498  01C8               	clrf	_b
  3972                           
  3973                           ;Button_src.c: 16:     c = 0x00;
  3974  1499  01C7               	clrf	_c
  3975                           
  3976                           ;Button_src.c: 17:     z = 0;
  3977  149A  01B1               	clrf	_z
  3978  149B  01B2               	clrf	_z+1
  3979                           
  3980                           ;Button_src.c: 18:     day_low = 0;
  3981  149C  01AF               	clrf	_day_low
  3982  149D  01B0               	clrf	_day_low+1
  3983                           
  3984                           ;Button_src.c: 19:     stats = 1;
  3985  149E  3001               	movlw	1
  3986  149F  00AB               	movwf	_stats
  3987  14A0  3000               	movlw	0
  3988  14A1  00AC               	movwf	_stats+1
  3989                           
  3990                           ;Button_src.c: 20:     p = 0;
  3991  14A2  01A9               	clrf	_p
  3992  14A3  01AA               	clrf	_p+1
  3993  14A4  0008               	return
  3994  14A5                     __end_of_initialise_buttons:	
  3995                           
  3996                           	psect	text10
  3997  0802                     __ptext10:	
  3998 ;; *************** function _init_temp *****************
  3999 ;; Defined at:
  4000 ;;		line 6 in file "Thermometer_src.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		status,2
  4009 ;; Tracked objects:
  4010 ;;		On entry : 200/100
  4011 ;;		On exit  : 300/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4014 ;;      Params:         0       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0
  4017 ;;      Totals:         0       0       0       0       0
  4018 ;;Total ram usage:        0 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_main
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _init_temp
  4029  0802                     _init_temp:	
  4030                           
  4031                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _init_temp: [status,2]
  4035  0802  1683               	bsf	3,5	;RP0=1, select bank1
  4036  0803  0189               	clrf	9	;volatile
  4037                           
  4038                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4039  0804  1283               	bcf	3,5	;RP0=0, select bank0
  4040  0805  0189               	clrf	9	;volatile
  4041  0806  0008               	return
  4042  0807                     __end_of_init_temp:	
  4043                           
  4044                           	psect	text11
  4045  13F0                     __ptext11:	
  4046 ;; *************** function _init *****************
  4047 ;; Defined at:
  4048 ;;		line 5 in file "LCD_src.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2
  4057 ;; Tracked objects:
  4058 ;;		On entry : 300/0
  4059 ;;		On exit  : 300/100
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4062 ;;      Params:         0       0       0       0       0
  4063 ;;      Locals:         0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0
  4065 ;;      Totals:         0       0       0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_main
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _init
  4077  13F0                     _init:	
  4078                           
  4079                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _init: [wreg+status,2]
  4083  13F0  3007               	movlw	7
  4084  13F1  1683               	bsf	3,5	;RP0=1, select bank1
  4085  13F2  009F               	movwf	31	;volatile
  4086                           
  4087                           ;LCD_src.c: 8:  TRISA0=1;
  4088  13F3  1405               	bsf	5,0	;volatile
  4089                           
  4090                           ;LCD_src.c: 9:  TRISD=0X00;
  4091  13F4  0188               	clrf	8	;volatile
  4092                           
  4093                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4094  13F5  0181               	clrf	1	;volatile
  4095                           
  4096                           ;LCD_src.c: 11:  TRISE = 0X00;
  4097  13F6  0189               	clrf	9	;volatile
  4098  13F7  0008               	return
  4099  13F8                     __end_of_init:	
  4100                           
  4101                           	psect	text12
  4102  1615                     __ptext12:	
  4103 ;; *************** function _get_time *****************
  4104 ;; Defined at:
  4105 ;;		line 23 in file "clock_src.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  i               2    6[COMMON] int 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 300/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4119 ;;      Params:         0       0       0       0       0
  4120 ;;      Locals:         2       0       0       0       0
  4121 ;;      Temps:          1       0       0       0       0
  4122 ;;      Totals:         3       0       0       0       0
  4123 ;;Total ram usage:        3 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    1
  4126 ;; This function calls:
  4127 ;;		_time_read_1
  4128 ;;		_time_write_1
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _get_time
  4136  1615                     _get_time:	
  4137                           
  4138                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4139                           
  4140                           ;incstack = 0
  4141                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4142  1615  1283               	bcf	3,5	;RP0=0, select bank0
  4143  1616  1303               	bcf	3,6	;RP1=0, select bank0
  4144  1617  1686               	bsf	6,5	;volatile
  4145                           
  4146                           ;clock_src.c: 27:    time_write_1(0xbf);
  4147  1618  30BF               	movlw	191
  4148  1619  160A  118A  259D  160A  118A  	fcall	_time_write_1
  4149                           
  4150                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4151  161E  01F6               	clrf	get_time@i
  4152  161F  01F7               	clrf	get_time@i+1
  4153  1620                     l3783:	
  4154                           
  4155                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4156  1620  160A  118A  2641  160A  118A  	fcall	_time_read_1
  4157  1625  00F5               	movwf	??_get_time
  4158  1626  0876               	movf	get_time@i,w
  4159  1627  3E20               	addlw	(low (_table1| 0))& (0+255)
  4160  1628  0084               	movwf	4
  4161  1629  0875               	movf	??_get_time,w
  4162  162A  1383               	bcf	3,7	;select IRP bank0
  4163  162B  0080               	movwf	0
  4164                           
  4165                           ;clock_src.c: 31:      }
  4166  162C  3001               	movlw	1
  4167  162D  07F6               	addwf	get_time@i,f
  4168  162E  1803               	skipnc
  4169  162F  0AF7               	incf	get_time@i+1,f
  4170  1630  3000               	movlw	0
  4171  1631  07F7               	addwf	get_time@i+1,f
  4172  1632  0877               	movf	get_time@i+1,w
  4173  1633  3A80               	xorlw	128
  4174  1634  00FF               	movwf	127
  4175  1635  3080               	movlw	128
  4176  1636  027F               	subwf	127,w
  4177  1637  1D03               	skipz
  4178  1638  2E3B               	goto	u3025
  4179  1639  3007               	movlw	7
  4180  163A  0276               	subwf	get_time@i,w
  4181  163B                     u3025:	
  4182  163B  1C03               	skipc
  4183  163C  2E20               	goto	l3783
  4184                           
  4185                           ;clock_src.c: 32:    RB5=0;
  4186  163D  1283               	bcf	3,5	;RP0=0, select bank0
  4187  163E  1303               	bcf	3,6	;RP1=0, select bank0
  4188  163F  1286               	bcf	6,5	;volatile
  4189  1640  0008               	return
  4190  1641                     __end_of_get_time:	
  4191                           
  4192                           	psect	text13
  4193  1641                     __ptext13:	
  4194 ;; *************** function _time_read_1 *****************
  4195 ;; Defined at:
  4196 ;;		line 130 in file "clock_src.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  j               2    2[COMMON] int 
  4201 ;;  time_rx         1    4[COMMON] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      unsigned char 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0, btemp+1
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 300/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4211 ;;      Params:         0       0       0       0       0
  4212 ;;      Locals:         3       0       0       0       0
  4213 ;;      Temps:          2       0       0       0       0
  4214 ;;      Totals:         5       0       0       0       0
  4215 ;;Total ram usage:        5 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_get_time
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _time_read_1
  4226  1641                     _time_read_1:	
  4227                           
  4228                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4232  1641  01F4               	clrf	time_read_1@time_rx
  4233                           
  4234                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4235  1642  1683               	bsf	3,5	;RP0=1, select bank1
  4236  1643  1303               	bcf	3,6	;RP1=0, select bank1
  4237  1644  1606               	bsf	6,4	;volatile
  4238                           
  4239                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4240  1645  01F2               	clrf	time_read_1@j
  4241  1646  01F3               	clrf	time_read_1@j+1
  4242  1647                     l443:	
  4243                           
  4244                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4245  1647  1283               	bcf	3,5	;RP0=0, select bank0
  4246  1648  1303               	bcf	3,6	;RP1=0, select bank0
  4247  1649  1006               	bcf	6,0	;volatile
  4248                           
  4249                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4250  164A  0874               	movf	time_read_1@time_rx,w
  4251  164B  00F0               	movwf	??_time_read_1
  4252  164C  1003               	clrc
  4253  164D  0C70               	rrf	??_time_read_1,w
  4254  164E  00F1               	movwf	??_time_read_1+1
  4255  164F  0871               	movf	??_time_read_1+1,w
  4256  1650  00F4               	movwf	time_read_1@time_rx
  4257                           
  4258                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4259  1651  1E06               	btfss	6,4	;volatile
  4260  1652  2E58               	goto	l3367
  4261  1653  0874               	movf	time_read_1@time_rx,w
  4262  1654  3880               	iorlw	128
  4263  1655  00F0               	movwf	??_time_read_1
  4264  1656  0870               	movf	??_time_read_1,w
  4265  1657  00F4               	movwf	time_read_1@time_rx
  4266  1658                     l3367:	
  4267                           
  4268                           ;clock_src.c: 141:        RB0=1;
  4269  1658  1406               	bsf	6,0	;volatile
  4270                           
  4271                           ;clock_src.c: 142:       }
  4272  1659  3001               	movlw	1
  4273  165A  07F2               	addwf	time_read_1@j,f
  4274  165B  1803               	skipnc
  4275  165C  0AF3               	incf	time_read_1@j+1,f
  4276  165D  3000               	movlw	0
  4277  165E  07F3               	addwf	time_read_1@j+1,f
  4278  165F  0873               	movf	time_read_1@j+1,w
  4279  1660  3A80               	xorlw	128
  4280  1661  00FF               	movwf	127
  4281  1662  3080               	movlw	128
  4282  1663  027F               	subwf	127,w
  4283  1664  1D03               	skipz
  4284  1665  2E68               	goto	u2195
  4285  1666  3008               	movlw	8
  4286  1667  0272               	subwf	time_read_1@j,w
  4287  1668                     u2195:	
  4288  1668  1C03               	skipc
  4289  1669  2E47               	goto	l443
  4290                           
  4291                           ;clock_src.c: 143:     TRISB4=0;
  4292  166A  1683               	bsf	3,5	;RP0=1, select bank1
  4293  166B  1303               	bcf	3,6	;RP1=0, select bank1
  4294  166C  1206               	bcf	6,4	;volatile
  4295                           
  4296                           ;clock_src.c: 144:     RB0=0;
  4297  166D  1283               	bcf	3,5	;RP0=0, select bank0
  4298  166E  1006               	bcf	6,0	;volatile
  4299                           
  4300                           ;clock_src.c: 145:     return(time_rx);
  4301  166F  0874               	movf	time_read_1@time_rx,w
  4302  1670  0008               	return
  4303  1671                     __end_of_time_read_1:	
  4304                           
  4305                           	psect	text14
  4306  09B4                     __ptext14:	
  4307 ;; *************** function _get_temp *****************
  4308 ;; Defined at:
  4309 ;;		line 89 in file "Thermometer_src.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  i               2    0        int 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 300/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4323 ;;      Params:         0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0
  4325 ;;      Temps:          0       4       0       0       0
  4326 ;;      Totals:         0       4       0       0       0
  4327 ;;Total ram usage:        4 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    2
  4330 ;; This function calls:
  4331 ;;		___lbdiv
  4332 ;;		___lbmod
  4333 ;;		___lwdiv
  4334 ;;		___lwmod
  4335 ;;		_delay2
  4336 ;;		_read_byte
  4337 ;;		_reset_temp
  4338 ;;		_write_byte
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _get_temp
  4346  09B4                     _get_temp:	
  4347                           
  4348                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4352  09B4  1683               	bsf	3,5	;RP0=1, select bank1
  4353  09B5  1409               	bsf	9,0	;volatile
  4354                           
  4355                           ;Thermometer_src.c: 93: reset_temp();
  4356  09B6  160A  118A  26D7  120A  158A  	fcall	_reset_temp
  4357                           
  4358                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4359  09BB  30CC               	movlw	204
  4360  09BC  160A  118A  270B  120A  158A  	fcall	_write_byte
  4361                           
  4362                           ;Thermometer_src.c: 95: delay2();
  4363  09C1  160A  118A  247D  120A  158A  	fcall	_delay2
  4364                           
  4365                           ;Thermometer_src.c: 96: write_byte(0X44);
  4366  09C6  3044               	movlw	68
  4367  09C7  160A  118A  270B  120A  158A  	fcall	_write_byte
  4368                           
  4369                           ;Thermometer_src.c: 98: reset_temp();
  4370  09CC  160A  118A  26D7  120A  158A  	fcall	_reset_temp
  4371                           
  4372                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4373  09D1  30CC               	movlw	204
  4374  09D2  160A  118A  270B  120A  158A  	fcall	_write_byte
  4375                           
  4376                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4377  09D7  30BE               	movlw	190
  4378  09D8  160A  118A  270B  120A  158A  	fcall	_write_byte
  4379                           
  4380                           ;Thermometer_src.c: 101: TLV=read_byte();
  4381  09DD  160A  118A  26A3  120A  158A  	fcall	_read_byte
  4382  09E2  1283               	bcf	3,5	;RP0=0, select bank0
  4383  09E3  1303               	bcf	3,6	;RP1=0, select bank0
  4384  09E4  00DF               	movwf	??_get_temp
  4385  09E5  085F               	movf	??_get_temp,w
  4386  09E6  00DE               	movwf	_TLV
  4387                           
  4388                           ;Thermometer_src.c: 102: THV=read_byte();
  4389  09E7  160A  118A  26A3  120A  158A  	fcall	_read_byte
  4390  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  4391  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  4392  09EE  00DF               	movwf	??_get_temp
  4393  09EF  085F               	movf	??_get_temp,w
  4394  09F0  00DD               	movwf	_THV
  4395                           
  4396                           ;Thermometer_src.c: 103: TRISE0 =1;
  4397  09F1  1683               	bsf	3,5	;RP0=1, select bank1
  4398  09F2  1409               	bsf	9,0	;volatile
  4399                           
  4400                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4401  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  4402  09F4  085D               	movf	_THV,w
  4403  09F5  00DF               	movwf	??_get_temp
  4404  09F6  3004               	movlw	4
  4405  09F7                     u2955:	
  4406  09F7  1003               	clrc
  4407  09F8  0DDF               	rlf	??_get_temp,f
  4408  09F9  3EFF               	addlw	-1
  4409  09FA  1D03               	skipz
  4410  09FB  29F7               	goto	u2955
  4411  09FC  303F               	movlw	63
  4412  09FD  055F               	andwf	??_get_temp,w
  4413  09FE  00E0               	movwf	??_get_temp+1
  4414  09FF  085E               	movf	_TLV,w
  4415  0A00  00E1               	movwf	??_get_temp+2
  4416  0A01  3004               	movlw	4
  4417  0A02                     u2965:	
  4418  0A02  1003               	clrc
  4419  0A03  0CE1               	rrf	??_get_temp+2,f
  4420  0A04  3EFF               	addlw	-1
  4421  0A05  1D03               	skipz
  4422  0A06  2A02               	goto	u2965
  4423  0A07  0861               	movf	??_get_temp+2,w
  4424  0A08  0460               	iorwf	??_get_temp+1,w
  4425  0A09  00E2               	movwf	??_get_temp+3
  4426  0A0A  0862               	movf	??_get_temp+3,w
  4427  0A0B  00DC               	movwf	_TZ
  4428                           
  4429                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4430  0A0C  085E               	movf	_TLV,w
  4431  0A0D  00DF               	movwf	??_get_temp
  4432  0A0E  3003               	movlw	3
  4433  0A0F                     u2975:	
  4434  0A0F  1003               	clrc
  4435  0A10  0DDF               	rlf	??_get_temp,f
  4436  0A11  3EFF               	addlw	-1
  4437  0A12  1D03               	skipz
  4438  0A13  2A0F               	goto	u2975
  4439  0A14  1003               	clrc
  4440  0A15  0D5F               	rlf	??_get_temp,w
  4441  0A16  00E0               	movwf	??_get_temp+1
  4442  0A17  0860               	movf	??_get_temp+1,w
  4443  0A18  00DB               	movwf	_TX
  4444                           
  4445                           ;Thermometer_src.c: 107: ge=TZ%10;
  4446  0A19  300A               	movlw	10
  4447  0A1A  00DF               	movwf	??_get_temp
  4448  0A1B  085F               	movf	??_get_temp,w
  4449  0A1C  00F0               	movwf	___lbmod@divisor
  4450  0A1D  085C               	movf	_TZ,w
  4451  0A1E  160A  118A  2532  120A  158A  	fcall	___lbmod
  4452  0A23  00E0               	movwf	??_get_temp+1
  4453  0A24  0860               	movf	??_get_temp+1,w
  4454  0A25  00D9               	movwf	_ge
  4455                           
  4456                           ;Thermometer_src.c: 108: shi=TZ/10;
  4457  0A26  300A               	movlw	10
  4458  0A27  00DF               	movwf	??_get_temp
  4459  0A28  085F               	movf	??_get_temp,w
  4460  0A29  00F0               	movwf	___lbdiv@divisor
  4461  0A2A  085C               	movf	_TZ,w
  4462  0A2B  160A  118A  2511  120A  158A  	fcall	___lbdiv
  4463  0A30  00E0               	movwf	??_get_temp+1
  4464  0A31  0860               	movf	??_get_temp+1,w
  4465  0A32  00DA               	movwf	_shi
  4466                           
  4467                           ;Thermometer_src.c: 109: wd=0;
  4468  0A33  01BD               	clrf	_wd
  4469  0A34  01BE               	clrf	_wd+1
  4470                           
  4471                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4472  0A35  1FDB               	btfss	_TX,7
  4473  0A36  2A3F               	goto	l3751
  4474  0A37  083D               	movf	_wd,w
  4475  0A38  3E88               	addlw	136
  4476  0A39  00BD               	movwf	_wd
  4477  0A3A  083E               	movf	_wd+1,w
  4478  0A3B  1803               	skipnc
  4479  0A3C  3E01               	addlw	1
  4480  0A3D  3E13               	addlw	19
  4481  0A3E  00BE               	movwf	_wd+1
  4482  0A3F                     l3751:	
  4483                           
  4484                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4485  0A3F  1F5B               	btfss	_TX,6
  4486  0A40  2A49               	goto	l3755
  4487  0A41  083D               	movf	_wd,w
  4488  0A42  3EC4               	addlw	196
  4489  0A43  00BD               	movwf	_wd
  4490  0A44  083E               	movf	_wd+1,w
  4491  0A45  1803               	skipnc
  4492  0A46  3E01               	addlw	1
  4493  0A47  3E09               	addlw	9
  4494  0A48  00BE               	movwf	_wd+1
  4495  0A49                     l3755:	
  4496                           
  4497                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4498  0A49  1EDB               	btfss	_TX,5
  4499  0A4A  2A53               	goto	l3759
  4500  0A4B  083D               	movf	_wd,w
  4501  0A4C  3EE2               	addlw	226
  4502  0A4D  00BD               	movwf	_wd
  4503  0A4E  083E               	movf	_wd+1,w
  4504  0A4F  1803               	skipnc
  4505  0A50  3E01               	addlw	1
  4506  0A51  3E04               	addlw	4
  4507  0A52  00BE               	movwf	_wd+1
  4508  0A53                     l3759:	
  4509                           
  4510                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4511  0A53  1E5B               	btfss	_TX,4
  4512  0A54  2A5D               	goto	l3763
  4513  0A55  083D               	movf	_wd,w
  4514  0A56  3E71               	addlw	113
  4515  0A57  00BD               	movwf	_wd
  4516  0A58  083E               	movf	_wd+1,w
  4517  0A59  1803               	skipnc
  4518  0A5A  3E01               	addlw	1
  4519  0A5B  3E02               	addlw	2
  4520  0A5C  00BE               	movwf	_wd+1
  4521  0A5D                     l3763:	
  4522                           
  4523                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4524  0A5D  30E8               	movlw	232
  4525  0A5E  00F6               	movwf	___lwdiv@divisor
  4526  0A5F  3003               	movlw	3
  4527  0A60  00F7               	movwf	___lwdiv@divisor+1
  4528  0A61  083E               	movf	_wd+1,w
  4529  0A62  00F9               	movwf	___lwdiv@dividend+1
  4530  0A63  083D               	movf	_wd,w
  4531  0A64  00F8               	movwf	___lwdiv@dividend
  4532  0A65  160A  118A  2741  120A  158A  	fcall	___lwdiv
  4533  0A6A  0876               	movf	?___lwdiv,w
  4534  0A6B  00DF               	movwf	??_get_temp
  4535  0A6C  085F               	movf	??_get_temp,w
  4536  0A6D  00D8               	movwf	_shifen
  4537                           
  4538                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4539  0A6E  3064               	movlw	100
  4540  0A6F  00F6               	movwf	___lwdiv@divisor
  4541  0A70  3000               	movlw	0
  4542  0A71  00F7               	movwf	___lwdiv@divisor+1
  4543  0A72  083E               	movf	_wd+1,w
  4544  0A73  00F3               	movwf	___lwmod@dividend+1
  4545  0A74  083D               	movf	_wd,w
  4546  0A75  00F2               	movwf	___lwmod@dividend
  4547  0A76  30E8               	movlw	232
  4548  0A77  00F0               	movwf	___lwmod@divisor
  4549  0A78  3003               	movlw	3
  4550  0A79  00F1               	movwf	___lwmod@divisor+1
  4551  0A7A  160A  118A  2671  120A  158A  	fcall	___lwmod
  4552  0A7F  0871               	movf	?___lwmod+1,w
  4553  0A80  00F9               	movwf	___lwdiv@dividend+1
  4554  0A81  0870               	movf	?___lwmod,w
  4555  0A82  00F8               	movwf	___lwdiv@dividend
  4556  0A83  160A  118A  2741  120A  158A  	fcall	___lwdiv
  4557  0A88  0876               	movf	?___lwdiv,w
  4558  0A89  00DF               	movwf	??_get_temp
  4559  0A8A  085F               	movf	??_get_temp,w
  4560  0A8B  00D7               	movwf	_baifen
  4561                           
  4562                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4563  0A8C  300A               	movlw	10
  4564  0A8D  00F6               	movwf	___lwdiv@divisor
  4565  0A8E  3000               	movlw	0
  4566  0A8F  00F7               	movwf	___lwdiv@divisor+1
  4567  0A90  083E               	movf	_wd+1,w
  4568  0A91  00F3               	movwf	___lwmod@dividend+1
  4569  0A92  083D               	movf	_wd,w
  4570  0A93  00F2               	movwf	___lwmod@dividend
  4571  0A94  3064               	movlw	100
  4572  0A95  00F0               	movwf	___lwmod@divisor
  4573  0A96  3000               	movlw	0
  4574  0A97  00F1               	movwf	___lwmod@divisor+1
  4575  0A98  160A  118A  2671  120A  158A  	fcall	___lwmod
  4576  0A9D  0871               	movf	?___lwmod+1,w
  4577  0A9E  00F9               	movwf	___lwdiv@dividend+1
  4578  0A9F  0870               	movf	?___lwmod,w
  4579  0AA0  00F8               	movwf	___lwdiv@dividend
  4580  0AA1  160A  118A  2741  120A  158A  	fcall	___lwdiv
  4581  0AA6  0876               	movf	?___lwdiv,w
  4582  0AA7  00DF               	movwf	??_get_temp
  4583  0AA8  085F               	movf	??_get_temp,w
  4584  0AA9  00D6               	movwf	_qianfen
  4585                           
  4586                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4587  0AAA  300A               	movlw	10
  4588  0AAB  00F0               	movwf	___lwmod@divisor
  4589  0AAC  3000               	movlw	0
  4590  0AAD  00F1               	movwf	___lwmod@divisor+1
  4591  0AAE  083E               	movf	_wd+1,w
  4592  0AAF  00F3               	movwf	___lwmod@dividend+1
  4593  0AB0  083D               	movf	_wd,w
  4594  0AB1  00F2               	movwf	___lwmod@dividend
  4595  0AB2  160A  118A  2671   	fcall	___lwmod
  4596  0AB5  0870               	movf	?___lwmod,w
  4597  0AB6  00DF               	movwf	??_get_temp
  4598  0AB7  085F               	movf	??_get_temp,w
  4599  0AB8  00D5               	movwf	_wanfen
  4600                           
  4601                           ;Thermometer_src.c: 118: __nop();
  4602  0AB9  0000               	nop
  4603  0ABA  0008               	return
  4604  0ABB                     __end_of_get_temp:	
  4605                           
  4606                           	psect	text15
  4607  170B                     __ptext15:	
  4608 ;; *************** function _write_byte *****************
  4609 ;; Defined at:
  4610 ;;		line 40 in file "Thermometer_src.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  val             1    wreg     unsigned char 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  val             1    7[COMMON] unsigned char 
  4615 ;;  i               1    8[COMMON] unsigned char 
  4616 ;;  temp            1    6[COMMON] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/100
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4626 ;;      Params:         0       0       0       0       0
  4627 ;;      Locals:         3       0       0       0       0
  4628 ;;      Temps:          2       0       0       0       0
  4629 ;;      Totals:         5       0       0       0       0
  4630 ;;Total ram usage:        5 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    1
  4633 ;; This function calls:
  4634 ;;		_delay_temp
  4635 ;; This function is called by:
  4636 ;;		_get_temp
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _write_byte
  4642  170B                     _write_byte:	
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4646                           ;write_byte@val stored from wreg
  4647  170B  00F7               	movwf	write_byte@val
  4648                           
  4649                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4650  170C  3008               	movlw	8
  4651  170D  00F4               	movwf	??_write_byte
  4652  170E  0874               	movf	??_write_byte,w
  4653  170F  00F8               	movwf	write_byte@i
  4654  1710                     l3255:	
  4655                           
  4656                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4657  1710  0877               	movf	write_byte@val,w
  4658  1711  3901               	andlw	1
  4659  1712  00F4               	movwf	??_write_byte
  4660  1713  0874               	movf	??_write_byte,w
  4661  1714  00F6               	movwf	write_byte@temp
  4662                           
  4663                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4664  1715  1283               	bcf	3,5	;RP0=0, select bank0
  4665  1716  1303               	bcf	3,6	;RP1=0, select bank0
  4666  1717  1009               	bcf	9,0	;volatile
  4667  1718  1683               	bsf	3,5	;RP0=1, select bank1
  4668  1719  1009               	bcf	9,0	;volatile
  4669                           
  4670                           ;Thermometer_src.c: 48:    __nop();
  4671  171A  0000               	nop
  4672                           
  4673                           ;Thermometer_src.c: 49:    __nop();
  4674  171B  0000               	nop
  4675                           
  4676                           ;Thermometer_src.c: 50:    __nop();
  4677  171C  0000               	nop
  4678                           
  4679                           ;Thermometer_src.c: 51:    __nop();
  4680  171D  0000               	nop
  4681                           
  4682                           ;Thermometer_src.c: 52:    __nop();
  4683  171E  0000               	nop
  4684                           
  4685                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4686  171F  0376               	decf	write_byte@temp,w
  4687  1720  1D03               	btfss	3,2
  4688  1721  2F25               	goto	l3275
  4689  1722  1683               	bsf	3,5	;RP0=1, select bank1
  4690  1723  1303               	bcf	3,6	;RP1=0, select bank1
  4691  1724  1409               	bsf	9,0	;volatile
  4692  1725                     l3275:	
  4693                           
  4694                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4695  1725  3007               	movlw	7
  4696  1726  00F4               	movwf	??_write_byte
  4697  1727  0874               	movf	??_write_byte,w
  4698  1728  00F0               	movwf	delay_temp@y
  4699  1729  3002               	movlw	2
  4700  172A  160A  118A  2408  160A  118A  	fcall	_delay_temp
  4701                           
  4702                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4703  172F  1683               	bsf	3,5	;RP0=1, select bank1
  4704  1730  1303               	bcf	3,6	;RP1=0, select bank1
  4705  1731  1409               	bsf	9,0	;volatile
  4706                           
  4707                           ;Thermometer_src.c: 56:    __nop();
  4708  1732  0000               	nop
  4709                           
  4710                           ;Thermometer_src.c: 57:    __nop();
  4711  1733  0000               	nop
  4712                           
  4713                           ;Thermometer_src.c: 58:    val=val>>1;
  4714  1734  0877               	movf	write_byte@val,w
  4715  1735  00F4               	movwf	??_write_byte
  4716  1736  1003               	clrc
  4717  1737  0C74               	rrf	??_write_byte,w
  4718  1738  00F5               	movwf	??_write_byte+1
  4719  1739  0875               	movf	??_write_byte+1,w
  4720  173A  00F7               	movwf	write_byte@val
  4721                           
  4722                           ;Thermometer_src.c: 59:   }
  4723  173B  3001               	movlw	1
  4724  173C  02F8               	subwf	write_byte@i,f
  4725  173D  0878               	movf	write_byte@i,w
  4726  173E  1903               	btfsc	3,2
  4727  173F  0008               	return
  4728  1740  2F10               	goto	l3255
  4729  1741                     __end_of_write_byte:	
  4730                           
  4731                           	psect	text16
  4732  16D7                     __ptext16:	
  4733 ;; *************** function _reset_temp *****************
  4734 ;; Defined at:
  4735 ;;		line 25 in file "Thermometer_src.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  presence        1    5[COMMON] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/100
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4749 ;;      Params:         0       0       0       0       0
  4750 ;;      Locals:         1       0       0       0       0
  4751 ;;      Temps:          1       0       0       0       0
  4752 ;;      Totals:         2       0       0       0       0
  4753 ;;Total ram usage:        2 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    1
  4756 ;; This function calls:
  4757 ;;		_delay_temp
  4758 ;; This function is called by:
  4759 ;;		_get_temp
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           
  4764                           ;psect for function _reset_temp
  4765  16D7                     _reset_temp:	
  4766                           
  4767                           ;Thermometer_src.c: 27:   char presence=1;
  4768                           
  4769                           ;incstack = 0
  4770                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4771  16D7  01F5               	clrf	reset_temp@presence
  4772  16D8  0AF5               	incf	reset_temp@presence,f
  4773  16D9                     l3247:	
  4774                           ;Thermometer_src.c: 28:   while(presence)
  4775                           
  4776                           
  4777                           ;Thermometer_src.c: 28:   while(presence)
  4778  16D9  0875               	movf	reset_temp@presence,w
  4779  16DA  1903               	btfsc	3,2
  4780  16DB  0008               	return
  4781                           
  4782                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4783  16DC  1283               	bcf	3,5	;RP0=0, select bank0
  4784  16DD  1303               	bcf	3,6	;RP1=0, select bank0
  4785  16DE  1009               	bcf	9,0	;volatile
  4786  16DF  1683               	bsf	3,5	;RP0=1, select bank1
  4787  16E0  1009               	bcf	9,0	;volatile
  4788                           
  4789                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4790  16E1  3046               	movlw	70
  4791  16E2  00F4               	movwf	??_reset_temp
  4792  16E3  0874               	movf	??_reset_temp,w
  4793  16E4  00F0               	movwf	delay_temp@y
  4794  16E5  3002               	movlw	2
  4795  16E6  160A  118A  2408  160A  118A  	fcall	_delay_temp
  4796                           
  4797                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4798  16EB  1683               	bsf	3,5	;RP0=1, select bank1
  4799  16EC  1303               	bcf	3,6	;RP1=0, select bank1
  4800  16ED  1409               	bsf	9,0	;volatile
  4801                           
  4802                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4803  16EE  3008               	movlw	8
  4804  16EF  00F4               	movwf	??_reset_temp
  4805  16F0  0874               	movf	??_reset_temp,w
  4806  16F1  00F0               	movwf	delay_temp@y
  4807  16F2  3002               	movlw	2
  4808  16F3  160A  118A  2408  160A  118A  	fcall	_delay_temp
  4809                           
  4810                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4811  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  4812  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  4813  16FA  1C09               	btfss	9,0	;volatile
  4814  16FB  2EFF               	goto	l3243
  4815  16FC  01F5               	clrf	reset_temp@presence
  4816  16FD  0AF5               	incf	reset_temp@presence,f
  4817  16FE  2F00               	goto	l3245
  4818  16FF                     l3243:	
  4819  16FF  01F5               	clrf	reset_temp@presence
  4820  1700                     l3245:	
  4821                           
  4822                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4823  1700  303C               	movlw	60
  4824  1701  00F4               	movwf	??_reset_temp
  4825  1702  0874               	movf	??_reset_temp,w
  4826  1703  00F0               	movwf	delay_temp@y
  4827  1704  3002               	movlw	2
  4828  1705  160A  118A  2408  160A  118A  	fcall	_delay_temp
  4829  170A  2ED9               	goto	l3247
  4830  170B                     __end_of_reset_temp:	
  4831                           
  4832                           	psect	text17
  4833  16A3                     __ptext17:	
  4834 ;; *************** function _read_byte *****************
  4835 ;; Defined at:
  4836 ;;		line 62 in file "Thermometer_src.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  i               1    6[COMMON] unsigned char 
  4841 ;;  value           1    5[COMMON] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      unsigned char 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/100
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4851 ;;      Params:         0       0       0       0       0
  4852 ;;      Locals:         2       0       0       0       0
  4853 ;;      Temps:          1       0       0       0       0
  4854 ;;      Totals:         3       0       0       0       0
  4855 ;;Total ram usage:        3 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    1
  4858 ;; This function calls:
  4859 ;;		_delay_temp
  4860 ;; This function is called by:
  4861 ;;		_get_temp
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _read_byte
  4867  16A3                     _read_byte:	
  4868                           
  4869                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4873  16A3  01F5               	clrf	read_byte@value
  4874                           
  4875                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4876  16A4  3008               	movlw	8
  4877  16A5  00F4               	movwf	??_read_byte
  4878  16A6  0874               	movf	??_read_byte,w
  4879  16A7  00F6               	movwf	read_byte@i
  4880  16A8                     l3297:	
  4881                           
  4882                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4883  16A8  1003               	clrc
  4884  16A9  0CF5               	rrf	read_byte@value,f
  4885                           
  4886                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4887  16AA  1283               	bcf	3,5	;RP0=0, select bank0
  4888  16AB  1303               	bcf	3,6	;RP1=0, select bank0
  4889  16AC  1009               	bcf	9,0	;volatile
  4890  16AD  1683               	bsf	3,5	;RP0=1, select bank1
  4891  16AE  1009               	bcf	9,0	;volatile
  4892                           
  4893                           ;Thermometer_src.c: 71:    __nop();
  4894  16AF  0000               	nop
  4895                           
  4896                           ;Thermometer_src.c: 72:    __nop();
  4897  16B0  0000               	nop
  4898                           
  4899                           ;Thermometer_src.c: 73:    __nop();
  4900  16B1  0000               	nop
  4901                           
  4902                           ;Thermometer_src.c: 74:    __nop();
  4903  16B2  0000               	nop
  4904                           
  4905                           ;Thermometer_src.c: 75:    __nop();
  4906  16B3  0000               	nop
  4907                           
  4908                           ;Thermometer_src.c: 76:    __nop();
  4909  16B4  0000               	nop
  4910                           
  4911                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4912  16B5  1683               	bsf	3,5	;RP0=1, select bank1
  4913  16B6  1303               	bcf	3,6	;RP1=0, select bank1
  4914  16B7  1409               	bsf	9,0	;volatile
  4915                           
  4916                           ;Thermometer_src.c: 78:    __nop();
  4917  16B8  0000               	nop
  4918                           
  4919                           ;Thermometer_src.c: 79:    __nop();
  4920  16B9  0000               	nop
  4921                           
  4922                           ;Thermometer_src.c: 80:    __nop();
  4923  16BA  0000               	nop
  4924                           
  4925                           ;Thermometer_src.c: 81:    __nop();
  4926  16BB  0000               	nop
  4927                           
  4928                           ;Thermometer_src.c: 82:    __nop();
  4929  16BC  0000               	nop
  4930                           
  4931                           ;Thermometer_src.c: 83:    j=RE0;
  4932  16BD  3000               	movlw	0
  4933  16BE  1283               	bcf	3,5	;RP0=0, select bank0
  4934  16BF  1303               	bcf	3,6	;RP1=0, select bank0
  4935  16C0  1809               	btfsc	9,0	;volatile
  4936  16C1  3001               	movlw	1
  4937  16C2  00BF               	movwf	read_byte@j
  4938                           
  4939                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4940  16C3  083F               	movf	read_byte@j,w
  4941  16C4  1D03               	btfss	3,2
  4942  16C5  17F5               	bsf	read_byte@value,7
  4943                           
  4944                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4945  16C6  3007               	movlw	7
  4946  16C7  00F4               	movwf	??_read_byte
  4947  16C8  0874               	movf	??_read_byte,w
  4948  16C9  00F0               	movwf	delay_temp@y
  4949  16CA  3002               	movlw	2
  4950  16CB  160A  118A  2408  160A  118A  	fcall	_delay_temp
  4951                           
  4952                           ;Thermometer_src.c: 86:   }
  4953  16D0  3001               	movlw	1
  4954  16D1  02F6               	subwf	read_byte@i,f
  4955  16D2  0876               	movf	read_byte@i,w
  4956  16D3  1D03               	btfss	3,2
  4957  16D4  2EA8               	goto	l3297
  4958                           
  4959                           ;Thermometer_src.c: 87:   return(value);
  4960  16D5  0875               	movf	read_byte@value,w
  4961  16D6  0008               	return
  4962  16D7                     __end_of_read_byte:	
  4963                           
  4964                           	psect	text18
  4965  1408                     __ptext18:	
  4966 ;; *************** function _delay_temp *****************
  4967 ;; Defined at:
  4968 ;;		line 121 in file "Thermometer_src.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  x               1    wreg     unsigned char 
  4971 ;;  y               1    0[COMMON] unsigned char 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  x               1    2[COMMON] unsigned char 
  4974 ;;  z               1    3[COMMON] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/100
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4984 ;;      Params:         1       0       0       0       0
  4985 ;;      Locals:         2       0       0       0       0
  4986 ;;      Temps:          1       0       0       0       0
  4987 ;;      Totals:         4       0       0       0       0
  4988 ;;Total ram usage:        4 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; This function calls:
  4991 ;;		Nothing
  4992 ;; This function is called by:
  4993 ;;		_reset_temp
  4994 ;;		_write_byte
  4995 ;;		_read_byte
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _delay_temp
  5001  1408                     _delay_temp:	
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5005                           ;delay_temp@x stored from wreg
  5006  1408  00F2               	movwf	delay_temp@x
  5007  1409                     l334:	
  5008                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5009                           
  5010                           
  5011                           ;Thermometer_src.c: 125:  z=y;
  5012  1409  0870               	movf	delay_temp@y,w
  5013  140A  00F1               	movwf	??_delay_temp
  5014  140B  0871               	movf	??_delay_temp,w
  5015  140C  00F3               	movwf	delay_temp@z
  5016  140D                     l3173:	
  5017  140D  3001               	movlw	1
  5018  140E  02F3               	subwf	delay_temp@z,f
  5019  140F  1D03               	btfss	3,2
  5020  1410  2C0D               	goto	l3173
  5021                           
  5022                           ;Thermometer_src.c: 127:  }while(--x);
  5023  1411  3001               	movlw	1
  5024  1412  02F2               	subwf	delay_temp@x,f
  5025  1413  1903               	btfsc	3,2
  5026  1414  0008               	return
  5027  1415  2C09               	goto	l334
  5028  1416                     __end_of_delay_temp:	
  5029                           
  5030                           	psect	text19
  5031  147D                     __ptext19:	
  5032 ;; *************** function _delay2 *****************
  5033 ;; Defined at:
  5034 ;;		line 130 in file "Thermometer_src.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  i               2    0[COMMON] int 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, btemp+1
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/100
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5048 ;;      Params:         0       0       0       0       0
  5049 ;;      Locals:         2       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0
  5051 ;;      Totals:         2       0       0       0       0
  5052 ;;Total ram usage:        2 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_get_temp
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           
  5062                           ;psect for function _delay2
  5063  147D                     _delay2:	
  5064                           
  5065                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5066                           
  5067                           ;incstack = 0
  5068                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5069  147D  01F0               	clrf	delay2@i
  5070  147E  01F1               	clrf	delay2@i+1
  5071  147F                     l3349:	
  5072                           
  5073                           ;Thermometer_src.c: 132:  }
  5074  147F  3001               	movlw	1
  5075  1480  07F0               	addwf	delay2@i,f
  5076  1481  1803               	skipnc
  5077  1482  0AF1               	incf	delay2@i+1,f
  5078  1483  3000               	movlw	0
  5079  1484  07F1               	addwf	delay2@i+1,f
  5080  1485  0871               	movf	delay2@i+1,w
  5081  1486  3A80               	xorlw	128
  5082  1487  00FF               	movwf	127
  5083  1488  3080               	movlw	128
  5084  1489  027F               	subwf	127,w
  5085  148A  1D03               	skipz
  5086  148B  2C8E               	goto	u2175
  5087  148C  3032               	movlw	50
  5088  148D  0270               	subwf	delay2@i,w
  5089  148E                     u2175:	
  5090  148E  1803               	btfsc	3,0
  5091  148F  0008               	return
  5092  1490  2C7F               	goto	l3349
  5093  1491                     __end_of_delay2:	
  5094                           
  5095                           	psect	text20
  5096  1671                     __ptext20:	
  5097 ;; *************** function ___lwmod *****************
  5098 ;; Defined at:
  5099 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  divisor         2    0[COMMON] unsigned int 
  5102 ;;  dividend        2    2[COMMON] unsigned int 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  counter         1    5[COMMON] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  2    0[COMMON] unsigned int 
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0
  5109 ;; Tracked objects:
  5110 ;;		On entry : 300/0
  5111 ;;		On exit  : 300/0
  5112 ;;		Unchanged: 300/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5114 ;;      Params:         4       0       0       0       0
  5115 ;;      Locals:         1       0       0       0       0
  5116 ;;      Temps:          1       0       0       0       0
  5117 ;;      Totals:         6       0       0       0       0
  5118 ;;Total ram usage:        6 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_get_temp
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           
  5128                           ;psect for function ___lwmod
  5129  1671                     ___lwmod:	
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5133  1671  0870               	movf	___lwmod@divisor,w
  5134  1672  0471               	iorwf	___lwmod@divisor+1,w
  5135  1673  1903               	btfsc	3,2
  5136  1674  2E9E               	goto	l3663
  5137  1675  01F5               	clrf	___lwmod@counter
  5138  1676  0AF5               	incf	___lwmod@counter,f
  5139  1677                     l3653:	
  5140  1677  1BF1               	btfsc	___lwmod@divisor+1,7
  5141  1678  2E85               	goto	l3655
  5142  1679  3001               	movlw	1
  5143  167A                     u2905:	
  5144  167A  1003               	clrc
  5145  167B  0DF0               	rlf	___lwmod@divisor,f
  5146  167C  0DF1               	rlf	___lwmod@divisor+1,f
  5147  167D  3EFF               	addlw	-1
  5148  167E  1D03               	skipz
  5149  167F  2E7A               	goto	u2905
  5150  1680  3001               	movlw	1
  5151  1681  00F4               	movwf	??___lwmod
  5152  1682  0874               	movf	??___lwmod,w
  5153  1683  07F5               	addwf	___lwmod@counter,f
  5154  1684  2E77               	goto	l3653
  5155  1685                     l3655:	
  5156  1685  0871               	movf	___lwmod@divisor+1,w
  5157  1686  0273               	subwf	___lwmod@dividend+1,w
  5158  1687  1D03               	skipz
  5159  1688  2E8B               	goto	u2925
  5160  1689  0870               	movf	___lwmod@divisor,w
  5161  168A  0272               	subwf	___lwmod@dividend,w
  5162  168B                     u2925:	
  5163  168B  1C03               	skipc
  5164  168C  2E93               	goto	l3659
  5165  168D  0870               	movf	___lwmod@divisor,w
  5166  168E  02F2               	subwf	___lwmod@dividend,f
  5167  168F  0871               	movf	___lwmod@divisor+1,w
  5168  1690  1C03               	skipc
  5169  1691  03F3               	decf	___lwmod@dividend+1,f
  5170  1692  02F3               	subwf	___lwmod@dividend+1,f
  5171  1693                     l3659:	
  5172  1693  3001               	movlw	1
  5173  1694                     u2935:	
  5174  1694  1003               	clrc
  5175  1695  0CF1               	rrf	___lwmod@divisor+1,f
  5176  1696  0CF0               	rrf	___lwmod@divisor,f
  5177  1697  3EFF               	addlw	-1
  5178  1698  1D03               	skipz
  5179  1699  2E94               	goto	u2935
  5180  169A  3001               	movlw	1
  5181  169B  02F5               	subwf	___lwmod@counter,f
  5182  169C  1D03               	btfss	3,2
  5183  169D  2E85               	goto	l3655
  5184  169E                     l3663:	
  5185  169E  0873               	movf	___lwmod@dividend+1,w
  5186  169F  00F1               	movwf	?___lwmod+1
  5187  16A0  0872               	movf	___lwmod@dividend,w
  5188  16A1  00F0               	movwf	?___lwmod
  5189  16A2  0008               	return
  5190  16A3                     __end_of___lwmod:	
  5191                           
  5192                           	psect	text21
  5193  1741                     __ptext21:	
  5194 ;; *************** function ___lwdiv *****************
  5195 ;; Defined at:
  5196 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  divisor         2    6[COMMON] unsigned int 
  5199 ;;  dividend        2    8[COMMON] unsigned int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  quotient        2   11[COMMON] unsigned int 
  5202 ;;  counter         1   13[COMMON] unsigned char 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  2    6[COMMON] unsigned int 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2, status,0
  5207 ;; Tracked objects:
  5208 ;;		On entry : 300/0
  5209 ;;		On exit  : 300/0
  5210 ;;		Unchanged: 300/0
  5211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5212 ;;      Params:         4       0       0       0       0
  5213 ;;      Locals:         3       0       0       0       0
  5214 ;;      Temps:          1       0       0       0       0
  5215 ;;      Totals:         8       0       0       0       0
  5216 ;;Total ram usage:        8 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_get_temp
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function ___lwdiv
  5227  1741                     ___lwdiv:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5231  1741  01FB               	clrf	___lwdiv@quotient
  5232  1742  01FC               	clrf	___lwdiv@quotient+1
  5233  1743  0876               	movf	___lwdiv@divisor,w
  5234  1744  0477               	iorwf	___lwdiv@divisor+1,w
  5235  1745  1903               	btfsc	3,2
  5236  1746  2F78               	goto	l3641
  5237  1747  01FD               	clrf	___lwdiv@counter
  5238  1748  0AFD               	incf	___lwdiv@counter,f
  5239  1749                     l3629:	
  5240  1749  1BF7               	btfsc	___lwdiv@divisor+1,7
  5241  174A  2F57               	goto	l3631
  5242  174B  3001               	movlw	1
  5243  174C                     u2835:	
  5244  174C  1003               	clrc
  5245  174D  0DF6               	rlf	___lwdiv@divisor,f
  5246  174E  0DF7               	rlf	___lwdiv@divisor+1,f
  5247  174F  3EFF               	addlw	-1
  5248  1750  1D03               	skipz
  5249  1751  2F4C               	goto	u2835
  5250  1752  3001               	movlw	1
  5251  1753  00FA               	movwf	??___lwdiv
  5252  1754  087A               	movf	??___lwdiv,w
  5253  1755  07FD               	addwf	___lwdiv@counter,f
  5254  1756  2F49               	goto	l3629
  5255  1757                     l3631:	
  5256  1757  3001               	movlw	1
  5257  1758                     u2855:	
  5258  1758  1003               	clrc
  5259  1759  0DFB               	rlf	___lwdiv@quotient,f
  5260  175A  0DFC               	rlf	___lwdiv@quotient+1,f
  5261  175B  3EFF               	addlw	-1
  5262  175C  1D03               	skipz
  5263  175D  2F58               	goto	u2855
  5264  175E  0877               	movf	___lwdiv@divisor+1,w
  5265  175F  0279               	subwf	___lwdiv@dividend+1,w
  5266  1760  1D03               	skipz
  5267  1761  2F64               	goto	u2865
  5268  1762  0876               	movf	___lwdiv@divisor,w
  5269  1763  0278               	subwf	___lwdiv@dividend,w
  5270  1764                     u2865:	
  5271  1764  1C03               	skipc
  5272  1765  2F6D               	goto	l3637
  5273  1766  0876               	movf	___lwdiv@divisor,w
  5274  1767  02F8               	subwf	___lwdiv@dividend,f
  5275  1768  0877               	movf	___lwdiv@divisor+1,w
  5276  1769  1C03               	skipc
  5277  176A  03F9               	decf	___lwdiv@dividend+1,f
  5278  176B  02F9               	subwf	___lwdiv@dividend+1,f
  5279  176C  147B               	bsf	___lwdiv@quotient,0
  5280  176D                     l3637:	
  5281  176D  3001               	movlw	1
  5282  176E                     u2875:	
  5283  176E  1003               	clrc
  5284  176F  0CF7               	rrf	___lwdiv@divisor+1,f
  5285  1770  0CF6               	rrf	___lwdiv@divisor,f
  5286  1771  3EFF               	addlw	-1
  5287  1772  1D03               	skipz
  5288  1773  2F6E               	goto	u2875
  5289  1774  3001               	movlw	1
  5290  1775  02FD               	subwf	___lwdiv@counter,f
  5291  1776  1D03               	btfss	3,2
  5292  1777  2F57               	goto	l3631
  5293  1778                     l3641:	
  5294  1778  087C               	movf	___lwdiv@quotient+1,w
  5295  1779  00F7               	movwf	?___lwdiv+1
  5296  177A  087B               	movf	___lwdiv@quotient,w
  5297  177B  00F6               	movwf	?___lwdiv
  5298  177C  0008               	return
  5299  177D                     __end_of___lwdiv:	
  5300                           
  5301                           	psect	text22
  5302  1532                     __ptext22:	
  5303 ;; *************** function ___lbmod *****************
  5304 ;; Defined at:
  5305 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  dividend        1    wreg     unsigned char 
  5308 ;;  divisor         1    0[COMMON] unsigned char 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  dividend        1    4[COMMON] unsigned char 
  5311 ;;  rem             1    6[COMMON] unsigned char 
  5312 ;;  counter         1    5[COMMON] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      unsigned char 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0
  5317 ;; Tracked objects:
  5318 ;;		On entry : 300/0
  5319 ;;		On exit  : 300/0
  5320 ;;		Unchanged: 300/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5322 ;;      Params:         1       0       0       0       0
  5323 ;;      Locals:         3       0       0       0       0
  5324 ;;      Temps:          3       0       0       0       0
  5325 ;;      Totals:         7       0       0       0       0
  5326 ;;Total ram usage:        7 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_get_temp
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function ___lbmod
  5337  1532                     ___lbmod:	
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5341                           ;___lbmod@dividend stored from wreg
  5342  1532  00F4               	movwf	___lbmod@dividend
  5343  1533  3008               	movlw	8
  5344  1534  00F1               	movwf	??___lbmod
  5345  1535  0871               	movf	??___lbmod,w
  5346  1536  00F5               	movwf	___lbmod@counter
  5347  1537  01F6               	clrf	___lbmod@rem
  5348  1538                     l3607:	
  5349  1538  0874               	movf	___lbmod@dividend,w
  5350  1539  00F1               	movwf	??___lbmod
  5351  153A  3007               	movlw	7
  5352  153B                     u2795:	
  5353  153B  1003               	clrc
  5354  153C  0CF1               	rrf	??___lbmod,f
  5355  153D  3EFF               	addlw	-1
  5356  153E  1D03               	skipz
  5357  153F  2D3B               	goto	u2795
  5358  1540  0876               	movf	___lbmod@rem,w
  5359  1541  00F2               	movwf	??___lbmod+1
  5360  1542  0772               	addwf	??___lbmod+1,w
  5361  1543  0471               	iorwf	??___lbmod,w
  5362  1544  00F3               	movwf	??___lbmod+2
  5363  1545  0873               	movf	??___lbmod+2,w
  5364  1546  00F6               	movwf	___lbmod@rem
  5365  1547  1003               	clrc
  5366  1548  0DF4               	rlf	___lbmod@dividend,f
  5367  1549  0870               	movf	___lbmod@divisor,w
  5368  154A  0276               	subwf	___lbmod@rem,w
  5369  154B  1C03               	skipc
  5370  154C  2D4F               	goto	l1253
  5371  154D  0870               	movf	___lbmod@divisor,w
  5372  154E  02F6               	subwf	___lbmod@rem,f
  5373  154F                     l1253:	
  5374  154F  3001               	movlw	1
  5375  1550  02F5               	subwf	___lbmod@counter,f
  5376  1551  1D03               	btfss	3,2
  5377  1552  2D38               	goto	l3607
  5378  1553  0876               	movf	___lbmod@rem,w
  5379  1554  0008               	return
  5380  1555                     __end_of___lbmod:	
  5381                           
  5382                           	psect	text23
  5383  1511                     __ptext23:	
  5384 ;; *************** function ___lbdiv *****************
  5385 ;; Defined at:
  5386 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  dividend        1    wreg     unsigned char 
  5389 ;;  divisor         1    0[COMMON] unsigned char 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  dividend        1    2[COMMON] unsigned char 
  5392 ;;  quotient        1    4[COMMON] unsigned char 
  5393 ;;  counter         1    3[COMMON] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      unsigned char 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0
  5398 ;; Tracked objects:
  5399 ;;		On entry : 300/0
  5400 ;;		On exit  : 300/0
  5401 ;;		Unchanged: 300/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5403 ;;      Params:         1       0       0       0       0
  5404 ;;      Locals:         3       0       0       0       0
  5405 ;;      Temps:          1       0       0       0       0
  5406 ;;      Totals:         5       0       0       0       0
  5407 ;;Total ram usage:        5 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_get_temp
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function ___lbdiv
  5418  1511                     ___lbdiv:	
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5422                           ;___lbdiv@dividend stored from wreg
  5423  1511  00F2               	movwf	___lbdiv@dividend
  5424  1512  01F4               	clrf	___lbdiv@quotient
  5425  1513  0870               	movf	___lbdiv@divisor,w
  5426  1514  1903               	btfsc	3,2
  5427  1515  2D30               	goto	l3599
  5428  1516  01F3               	clrf	___lbdiv@counter
  5429  1517  0AF3               	incf	___lbdiv@counter,f
  5430  1518                     l3587:	
  5431  1518  1BF0               	btfsc	___lbdiv@divisor,7
  5432  1519  2D21               	goto	l3589
  5433  151A  1003               	clrc
  5434  151B  0DF0               	rlf	___lbdiv@divisor,f
  5435  151C  3001               	movlw	1
  5436  151D  00F1               	movwf	??___lbdiv
  5437  151E  0871               	movf	??___lbdiv,w
  5438  151F  07F3               	addwf	___lbdiv@counter,f
  5439  1520  2D18               	goto	l3587
  5440  1521                     l3589:	
  5441  1521  1003               	clrc
  5442  1522  0DF4               	rlf	___lbdiv@quotient,f
  5443  1523  0870               	movf	___lbdiv@divisor,w
  5444  1524  0272               	subwf	___lbdiv@dividend,w
  5445  1525  1C03               	skipc
  5446  1526  2D2B               	goto	L2
  5447  1527  0870               	movf	___lbdiv@divisor,w
  5448  1528  02F2               	subwf	___lbdiv@dividend,f
  5449  1529  1474               	bsf	___lbdiv@quotient,0
  5450  152A  1003               	clrc
  5451  152B                     L2:	
  5452  152B  0CF0               	rrf	___lbdiv@divisor,f
  5453  152C  3001               	movlw	1
  5454  152D  02F3               	subwf	___lbdiv@counter,f
  5455  152E  1D03               	btfss	3,2
  5456  152F  2D21               	goto	l3589
  5457  1530                     l3599:	
  5458  1530  0874               	movf	___lbdiv@quotient,w
  5459  1531  0008               	return
  5460  1532                     __end_of___lbdiv:	
  5461                           
  5462                           	psect	text24
  5463  1425                     __ptext24:	
  5464 ;; *************** function _ds1302_init *****************
  5465 ;; Defined at:
  5466 ;;		line 3 in file "clock_src.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 300/0
  5477 ;;		On exit  : 300/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5480 ;;      Params:         0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0
  5483 ;;      Totals:         0       0       0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    1
  5487 ;; This function calls:
  5488 ;;		_time_write_1
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function _ds1302_init
  5496  1425                     _ds1302_init:	
  5497                           
  5498                           ;clock_src.c: 5:    RB0=0;
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5502  1425  1006               	bcf	6,0	;volatile
  5503                           
  5504                           ;clock_src.c: 6:    RB5 =0;
  5505  1426  1286               	bcf	6,5	;volatile
  5506                           
  5507                           ;clock_src.c: 7:    RB5=1;
  5508  1427  1686               	bsf	6,5	;volatile
  5509                           
  5510                           ;clock_src.c: 8:    time_write_1(0x8e);
  5511  1428  308E               	movlw	142
  5512  1429  160A  118A  259D  160A  118A  	fcall	_time_write_1
  5513                           
  5514                           ;clock_src.c: 9:    time_write_1(0);
  5515  142E  3000               	movlw	0
  5516  142F  160A  118A  259D   	fcall	_time_write_1
  5517                           
  5518                           ;clock_src.c: 10:    RB5=0;
  5519  1432  1286               	bcf	6,5	;volatile
  5520  1433  0008               	return
  5521  1434                     __end_of_ds1302_init:	
  5522                           
  5523                           	psect	text25
  5524  14F0                     __ptext25:	
  5525 ;; *************** function _display_temp *****************
  5526 ;; Defined at:
  5527 ;;		line 12 in file "Thermometer_src.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  1    wreg      void 
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 300/0
  5538 ;;		On exit  : 300/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5541 ;;      Params:         0       0       0       0       0
  5542 ;;      Locals:         0       0       0       0       0
  5543 ;;      Temps:          0       0       0       0       0
  5544 ;;      Totals:         0       0       0       0       0
  5545 ;;Total ram usage:        0 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    2
  5548 ;; This function calls:
  5549 ;;		_write_char
  5550 ;; This function is called by:
  5551 ;;		_main
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           
  5556                           ;psect for function _display_temp
  5557  14F0                     _display_temp:	
  5558                           
  5559                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5563  14F0  085A               	movf	_shi,w
  5564  14F1  3E30               	addlw	48
  5565  14F2  160A  118A  24A5  160A  118A  	fcall	_write_char
  5566                           
  5567                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5568  14F7  0859               	movf	_ge,w
  5569  14F8  3E30               	addlw	48
  5570  14F9  160A  118A  24A5  160A  118A  	fcall	_write_char
  5571                           
  5572                           ;Thermometer_src.c: 17:  write_char('.');
  5573  14FE  302E               	movlw	46
  5574  14FF  160A  118A  24A5  160A  118A  	fcall	_write_char
  5575                           
  5576                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5577  1504  0858               	movf	_shifen,w
  5578  1505  3E30               	addlw	48
  5579  1506  160A  118A  24A5  160A  118A  	fcall	_write_char
  5580                           
  5581                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5582  150B  0857               	movf	_baifen,w
  5583  150C  3E30               	addlw	48
  5584  150D  160A  118A  24A5   	fcall	_write_char
  5585  1510  0008               	return
  5586  1511                     __end_of_display_temp:	
  5587                           
  5588                           	psect	text26
  5589  0807                     __ptext26:	
  5590 ;; *************** function _display_day *****************
  5591 ;; Defined at:
  5592 ;;		line 4 in file "Day_of_week_src.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  num             2    3[COMMON] int 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 300/0
  5603 ;;		On exit  : 300/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5606 ;;      Params:         2       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0
  5608 ;;      Temps:          0       0       0       0       0
  5609 ;;      Totals:         2       0       0       0       0
  5610 ;;Total ram usage:        2 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    2
  5613 ;; This function calls:
  5614 ;;		_write_char
  5615 ;; This function is called by:
  5616 ;;		_main
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           
  5621                           ;psect for function _display_day
  5622  0807                     _display_day:	
  5623                           
  5624                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5625                           
  5626                           ;incstack = 0
  5627                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5628  0807  0373               	decf	display_day@num,w
  5629  0808  0474               	iorwf	display_day@num+1,w
  5630  0809  1903               	btfsc	3,2
  5631  080A  280F               	goto	l4561
  5632  080B  0873               	movf	display_day@num,w
  5633  080C  0474               	iorwf	display_day@num+1,w
  5634  080D  1D03               	btfss	3,2
  5635  080E  281B               	goto	l4563
  5636  080F                     l4561:	
  5637                           
  5638                           ;Day_of_week_src.c: 6:     write_char('M');
  5639  080F  304D               	movlw	77
  5640  0810  160A  118A  24A5  120A  158A  	fcall	_write_char
  5641                           
  5642                           ;Day_of_week_src.c: 7:     write_char('o');
  5643  0815  306F               	movlw	111
  5644  0816  160A  118A  24A5  120A  158A  	fcall	_write_char
  5645  081B                     l4563:	
  5646                           
  5647                           ;Day_of_week_src.c: 10:     if(num == 2){
  5648  081B  3002               	movlw	2
  5649  081C  0673               	xorwf	display_day@num,w
  5650  081D  0474               	iorwf	display_day@num+1,w
  5651  081E  1D03               	btfss	3,2
  5652  081F  282C               	goto	l4567
  5653                           
  5654                           ;Day_of_week_src.c: 11:     write_char('T');
  5655  0820  3054               	movlw	84
  5656  0821  160A  118A  24A5  120A  158A  	fcall	_write_char
  5657                           
  5658                           ;Day_of_week_src.c: 12:     write_char('u');
  5659  0826  3075               	movlw	117
  5660  0827  160A  118A  24A5  120A  158A  	fcall	_write_char
  5661  082C                     l4567:	
  5662                           
  5663                           ;Day_of_week_src.c: 15:     if(num == 3){
  5664  082C  3003               	movlw	3
  5665  082D  0673               	xorwf	display_day@num,w
  5666  082E  0474               	iorwf	display_day@num+1,w
  5667  082F  1D03               	btfss	3,2
  5668  0830  283D               	goto	l4571
  5669                           
  5670                           ;Day_of_week_src.c: 16:     write_char('W');
  5671  0831  3057               	movlw	87
  5672  0832  160A  118A  24A5  120A  158A  	fcall	_write_char
  5673                           
  5674                           ;Day_of_week_src.c: 17:     write_char('e');
  5675  0837  3065               	movlw	101
  5676  0838  160A  118A  24A5  120A  158A  	fcall	_write_char
  5677  083D                     l4571:	
  5678                           
  5679                           ;Day_of_week_src.c: 20:     if(num == 4){
  5680  083D  3004               	movlw	4
  5681  083E  0673               	xorwf	display_day@num,w
  5682  083F  0474               	iorwf	display_day@num+1,w
  5683  0840  1D03               	btfss	3,2
  5684  0841  284E               	goto	l4575
  5685                           
  5686                           ;Day_of_week_src.c: 21:     write_char('T');
  5687  0842  3054               	movlw	84
  5688  0843  160A  118A  24A5  120A  158A  	fcall	_write_char
  5689                           
  5690                           ;Day_of_week_src.c: 22:     write_char('h');
  5691  0848  3068               	movlw	104
  5692  0849  160A  118A  24A5  120A  158A  	fcall	_write_char
  5693  084E                     l4575:	
  5694                           
  5695                           ;Day_of_week_src.c: 25:     if(num == 5){
  5696  084E  3005               	movlw	5
  5697  084F  0673               	xorwf	display_day@num,w
  5698  0850  0474               	iorwf	display_day@num+1,w
  5699  0851  1D03               	btfss	3,2
  5700  0852  285F               	goto	l4579
  5701                           
  5702                           ;Day_of_week_src.c: 26:     write_char('F');
  5703  0853  3046               	movlw	70
  5704  0854  160A  118A  24A5  120A  158A  	fcall	_write_char
  5705                           
  5706                           ;Day_of_week_src.c: 27:     write_char('r');
  5707  0859  3072               	movlw	114
  5708  085A  160A  118A  24A5  120A  158A  	fcall	_write_char
  5709  085F                     l4579:	
  5710                           
  5711                           ;Day_of_week_src.c: 30:     if(num == 6){
  5712  085F  3006               	movlw	6
  5713  0860  0673               	xorwf	display_day@num,w
  5714  0861  0474               	iorwf	display_day@num+1,w
  5715  0862  1D03               	btfss	3,2
  5716  0863  2870               	goto	l4583
  5717                           
  5718                           ;Day_of_week_src.c: 31:     write_char('S');
  5719  0864  3053               	movlw	83
  5720  0865  160A  118A  24A5  120A  158A  	fcall	_write_char
  5721                           
  5722                           ;Day_of_week_src.c: 32:     write_char('a');
  5723  086A  3061               	movlw	97
  5724  086B  160A  118A  24A5  120A  158A  	fcall	_write_char
  5725  0870                     l4583:	
  5726                           
  5727                           ;Day_of_week_src.c: 35:     if(num == 7){
  5728  0870  3007               	movlw	7
  5729  0871  0673               	xorwf	display_day@num,w
  5730  0872  0474               	iorwf	display_day@num+1,w
  5731  0873  1D03               	btfss	3,2
  5732  0874  0008               	return
  5733                           
  5734                           ;Day_of_week_src.c: 36:     write_char('S');
  5735  0875  3053               	movlw	83
  5736  0876  160A  118A  24A5  120A  158A  	fcall	_write_char
  5737                           
  5738                           ;Day_of_week_src.c: 37:     write_char('u');
  5739  087B  3075               	movlw	117
  5740  087C  160A  118A  24A5   	fcall	_write_char
  5741  087F  0008               	return
  5742  0880                     __end_of_display_day:	
  5743                           
  5744                           	psect	text27
  5745  0880                     __ptext27:	
  5746 ;; *************** function _display_date *****************
  5747 ;; Defined at:
  5748 ;;		line 77 in file "clock_src.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;		None
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  i               2    5[COMMON] int 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      void 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 300/0
  5759 ;;		On exit  : 300/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5762 ;;      Params:         0       0       0       0       0
  5763 ;;      Locals:         2       0       0       0       0
  5764 ;;      Temps:          2       0       0       0       0
  5765 ;;      Totals:         4       0       0       0       0
  5766 ;;Total ram usage:        4 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    2
  5769 ;; This function calls:
  5770 ;;		_write_char
  5771 ;; This function is called by:
  5772 ;;		_main
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function _display_date
  5778  0880                     _display_date:	
  5779                           
  5780                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5781                           
  5782                           ;incstack = 0
  5783                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5784  0880  1886               	btfsc	6,1	;volatile
  5785  0881  288A               	goto	l3795
  5786                           
  5787                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5788  0882  0823               	movf	_table1+3,w
  5789  0883  00F3               	movwf	??_display_date
  5790  0884  0873               	movf	??_display_date,w
  5791  0885  00A0               	movwf	_table1
  5792                           
  5793                           ;clock_src.c: 83:           table1[1]=table1[4];
  5794  0886  0824               	movf	_table1+4,w
  5795  0887  00F3               	movwf	??_display_date
  5796  0888  0873               	movf	??_display_date,w
  5797  0889  00A1               	movwf	_table1+1
  5798  088A                     l3795:	
  5799                           
  5800                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5801  088A  0823               	movf	_table1+3,w
  5802  088B  39F0               	andlw	240
  5803  088C  00F3               	movwf	??_display_date
  5804  088D  01F4               	clrf	??_display_date+1
  5805  088E  0873               	movf	??_display_date,w
  5806  088F  00F5               	movwf	display_date@i
  5807  0890  0874               	movf	??_display_date+1,w
  5808  0891  00F6               	movwf	display_date@i+1
  5809                           
  5810                           ;clock_src.c: 86:      i=i>>4;
  5811  0892  0E75               	swapf	display_date@i,w
  5812  0893  390F               	andlw	15
  5813  0894  00F5               	movwf	display_date@i
  5814  0895  0E76               	swapf	display_date@i+1,w
  5815  0896  39F0               	andlw	240
  5816  0897  04F5               	iorwf	display_date@i,f
  5817  0898  0E76               	swapf	display_date@i+1,w
  5818  0899  390F               	andlw	15
  5819  089A  00F6               	movwf	display_date@i+1
  5820  089B  30F0               	movlw	240
  5821  089C  1DF6               	btfss	display_date@i+1,3
  5822  089D  3000               	movlw	0
  5823  089E  04F6               	iorwf	display_date@i+1,f
  5824                           
  5825                           ;clock_src.c: 87:      write_char(i + '0');
  5826  089F  0875               	movf	display_date@i,w
  5827  08A0  3E30               	addlw	48
  5828  08A1  160A  118A  24A5  120A  158A  	fcall	_write_char
  5829                           
  5830                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  5831  08A6  0823               	movf	_table1+3,w
  5832  08A7  390F               	andlw	15
  5833  08A8  00F3               	movwf	??_display_date
  5834  08A9  01F4               	clrf	??_display_date+1
  5835  08AA  0873               	movf	??_display_date,w
  5836  08AB  00F5               	movwf	display_date@i
  5837  08AC  0874               	movf	??_display_date+1,w
  5838  08AD  00F6               	movwf	display_date@i+1
  5839                           
  5840                           ;clock_src.c: 90:      write_char(i + '0');
  5841  08AE  0875               	movf	display_date@i,w
  5842  08AF  3E30               	addlw	48
  5843  08B0  160A  118A  24A5  120A  158A  	fcall	_write_char
  5844                           
  5845                           ;clock_src.c: 91:      write_char('/');
  5846  08B5  302F               	movlw	47
  5847  08B6  160A  118A  24A5  120A  158A  	fcall	_write_char
  5848                           
  5849                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  5850  08BB  0824               	movf	_table1+4,w
  5851  08BC  39F0               	andlw	240
  5852  08BD  00F3               	movwf	??_display_date
  5853  08BE  01F4               	clrf	??_display_date+1
  5854  08BF  0873               	movf	??_display_date,w
  5855  08C0  00F5               	movwf	display_date@i
  5856  08C1  0874               	movf	??_display_date+1,w
  5857  08C2  00F6               	movwf	display_date@i+1
  5858                           
  5859                           ;clock_src.c: 96:      i=i>>4;
  5860  08C3  0E75               	swapf	display_date@i,w
  5861  08C4  390F               	andlw	15
  5862  08C5  00F5               	movwf	display_date@i
  5863  08C6  0E76               	swapf	display_date@i+1,w
  5864  08C7  39F0               	andlw	240
  5865  08C8  04F5               	iorwf	display_date@i,f
  5866  08C9  0E76               	swapf	display_date@i+1,w
  5867  08CA  390F               	andlw	15
  5868  08CB  00F6               	movwf	display_date@i+1
  5869  08CC  30F0               	movlw	240
  5870  08CD  1DF6               	btfss	display_date@i+1,3
  5871  08CE  3000               	movlw	0
  5872  08CF  04F6               	iorwf	display_date@i+1,f
  5873                           
  5874                           ;clock_src.c: 97:      write_char(i + '0');
  5875  08D0  0875               	movf	display_date@i,w
  5876  08D1  3E30               	addlw	48
  5877  08D2  160A  118A  24A5  120A  158A  	fcall	_write_char
  5878                           
  5879                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  5880  08D7  0824               	movf	_table1+4,w
  5881  08D8  390F               	andlw	15
  5882  08D9  00F3               	movwf	??_display_date
  5883  08DA  01F4               	clrf	??_display_date+1
  5884  08DB  0873               	movf	??_display_date,w
  5885  08DC  00F5               	movwf	display_date@i
  5886  08DD  0874               	movf	??_display_date+1,w
  5887  08DE  00F6               	movwf	display_date@i+1
  5888                           
  5889                           ;clock_src.c: 100:      write_char(i + '0');
  5890  08DF  0875               	movf	display_date@i,w
  5891  08E0  3E30               	addlw	48
  5892  08E1  160A  118A  24A5  120A  158A  	fcall	_write_char
  5893                           
  5894                           ;clock_src.c: 101:      write_char('/');
  5895  08E6  302F               	movlw	47
  5896  08E7  160A  118A  24A5  120A  158A  	fcall	_write_char
  5897                           
  5898                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  5899  08EC  0826               	movf	_table1+6,w
  5900  08ED  39F0               	andlw	240
  5901  08EE  00F3               	movwf	??_display_date
  5902  08EF  01F4               	clrf	??_display_date+1
  5903  08F0  0873               	movf	??_display_date,w
  5904  08F1  00F5               	movwf	display_date@i
  5905  08F2  0874               	movf	??_display_date+1,w
  5906  08F3  00F6               	movwf	display_date@i+1
  5907                           
  5908                           ;clock_src.c: 106:      i=i>>4;
  5909  08F4  0E75               	swapf	display_date@i,w
  5910  08F5  390F               	andlw	15
  5911  08F6  00F5               	movwf	display_date@i
  5912  08F7  0E76               	swapf	display_date@i+1,w
  5913  08F8  39F0               	andlw	240
  5914  08F9  04F5               	iorwf	display_date@i,f
  5915  08FA  0E76               	swapf	display_date@i+1,w
  5916  08FB  390F               	andlw	15
  5917  08FC  00F6               	movwf	display_date@i+1
  5918  08FD  30F0               	movlw	240
  5919  08FE  1DF6               	btfss	display_date@i+1,3
  5920  08FF  3000               	movlw	0
  5921  0900  04F6               	iorwf	display_date@i+1,f
  5922                           
  5923                           ;clock_src.c: 107:      write_char(i + '0');
  5924  0901  0875               	movf	display_date@i,w
  5925  0902  3E30               	addlw	48
  5926  0903  160A  118A  24A5  120A  158A  	fcall	_write_char
  5927                           
  5928                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  5929  0908  0826               	movf	_table1+6,w
  5930  0909  390F               	andlw	15
  5931  090A  00F3               	movwf	??_display_date
  5932  090B  01F4               	clrf	??_display_date+1
  5933  090C  0873               	movf	??_display_date,w
  5934  090D  00F5               	movwf	display_date@i
  5935  090E  0874               	movf	??_display_date+1,w
  5936  090F  00F6               	movwf	display_date@i+1
  5937                           
  5938                           ;clock_src.c: 110:      write_char(i + '0');
  5939  0910  0875               	movf	display_date@i,w
  5940  0911  3E30               	addlw	48
  5941  0912  160A  118A  24A5   	fcall	_write_char
  5942  0915  0008               	return
  5943  0916                     __end_of_display_date:	
  5944                           
  5945                           	psect	text28
  5946  0916                     __ptext28:	
  5947 ;; *************** function _display_clock *****************
  5948 ;; Defined at:
  5949 ;;		line 34 in file "clock_src.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;		None
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;  i               2    5[COMMON] int 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      void 
  5956 ;; Registers used:
  5957 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 300/0
  5960 ;;		On exit  : 300/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5963 ;;      Params:         0       0       0       0       0
  5964 ;;      Locals:         2       0       0       0       0
  5965 ;;      Temps:          2       0       0       0       0
  5966 ;;      Totals:         4       0       0       0       0
  5967 ;;Total ram usage:        4 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    2
  5970 ;; This function calls:
  5971 ;;		_write_char
  5972 ;; This function is called by:
  5973 ;;		_main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _display_clock
  5979  0916                     _display_clock:	
  5980                           
  5981                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5985  0916  1886               	btfsc	6,1	;volatile
  5986  0917  2920               	goto	l3833
  5987                           
  5988                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  5989  0918  0823               	movf	_table1+3,w
  5990  0919  00F3               	movwf	??_display_clock
  5991  091A  0873               	movf	??_display_clock,w
  5992  091B  00A0               	movwf	_table1
  5993                           
  5994                           ;clock_src.c: 40:           table1[1]=table1[4];
  5995  091C  0824               	movf	_table1+4,w
  5996  091D  00F3               	movwf	??_display_clock
  5997  091E  0873               	movf	??_display_clock,w
  5998  091F  00A1               	movwf	_table1+1
  5999  0920                     l3833:	
  6000                           
  6001                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6002  0920  0822               	movf	_table1+2,w
  6003  0921  39F0               	andlw	240
  6004  0922  00F3               	movwf	??_display_clock
  6005  0923  01F4               	clrf	??_display_clock+1
  6006  0924  0873               	movf	??_display_clock,w
  6007  0925  00F5               	movwf	display_clock@i
  6008  0926  0874               	movf	??_display_clock+1,w
  6009  0927  00F6               	movwf	display_clock@i+1
  6010                           
  6011                           ;clock_src.c: 44:      i=i>>4;
  6012  0928  0E75               	swapf	display_clock@i,w
  6013  0929  390F               	andlw	15
  6014  092A  00F5               	movwf	display_clock@i
  6015  092B  0E76               	swapf	display_clock@i+1,w
  6016  092C  39F0               	andlw	240
  6017  092D  04F5               	iorwf	display_clock@i,f
  6018  092E  0E76               	swapf	display_clock@i+1,w
  6019  092F  390F               	andlw	15
  6020  0930  00F6               	movwf	display_clock@i+1
  6021  0931  30F0               	movlw	240
  6022  0932  1DF6               	btfss	display_clock@i+1,3
  6023  0933  3000               	movlw	0
  6024  0934  04F6               	iorwf	display_clock@i+1,f
  6025                           
  6026                           ;clock_src.c: 45:      write_char(i + '0');
  6027  0935  0875               	movf	display_clock@i,w
  6028  0936  3E30               	addlw	48
  6029  0937  160A  118A  24A5  120A  158A  	fcall	_write_char
  6030                           
  6031                           ;clock_src.c: 46:      temp_high = i;
  6032  093C  0875               	movf	display_clock@i,w
  6033  093D  00F3               	movwf	??_display_clock
  6034  093E  0873               	movf	??_display_clock,w
  6035  093F  00CA               	movwf	_temp_high
  6036                           
  6037                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6038  0940  0822               	movf	_table1+2,w
  6039  0941  390F               	andlw	15
  6040  0942  00F3               	movwf	??_display_clock
  6041  0943  01F4               	clrf	??_display_clock+1
  6042  0944  0873               	movf	??_display_clock,w
  6043  0945  00F5               	movwf	display_clock@i
  6044  0946  0874               	movf	??_display_clock+1,w
  6045  0947  00F6               	movwf	display_clock@i+1
  6046                           
  6047                           ;clock_src.c: 50:      write_char(i + '0');
  6048  0948  0875               	movf	display_clock@i,w
  6049  0949  3E30               	addlw	48
  6050  094A  160A  118A  24A5  120A  158A  	fcall	_write_char
  6051                           
  6052                           ;clock_src.c: 51:      write_char(':');
  6053  094F  303A               	movlw	58
  6054  0950  160A  118A  24A5  120A  158A  	fcall	_write_char
  6055                           
  6056                           ;clock_src.c: 52:      temp_low = i;
  6057  0955  0875               	movf	display_clock@i,w
  6058  0956  00F3               	movwf	??_display_clock
  6059  0957  0873               	movf	??_display_clock,w
  6060  0958  00CB               	movwf	_temp_low
  6061                           
  6062                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6063  0959  0821               	movf	_table1+1,w
  6064  095A  39F0               	andlw	240
  6065  095B  00F3               	movwf	??_display_clock
  6066  095C  01F4               	clrf	??_display_clock+1
  6067  095D  0873               	movf	??_display_clock,w
  6068  095E  00F5               	movwf	display_clock@i
  6069  095F  0874               	movf	??_display_clock+1,w
  6070  0960  00F6               	movwf	display_clock@i+1
  6071                           
  6072                           ;clock_src.c: 56:      i=i>>4;
  6073  0961  0E75               	swapf	display_clock@i,w
  6074  0962  390F               	andlw	15
  6075  0963  00F5               	movwf	display_clock@i
  6076  0964  0E76               	swapf	display_clock@i+1,w
  6077  0965  39F0               	andlw	240
  6078  0966  04F5               	iorwf	display_clock@i,f
  6079  0967  0E76               	swapf	display_clock@i+1,w
  6080  0968  390F               	andlw	15
  6081  0969  00F6               	movwf	display_clock@i+1
  6082  096A  30F0               	movlw	240
  6083  096B  1DF6               	btfss	display_clock@i+1,3
  6084  096C  3000               	movlw	0
  6085  096D  04F6               	iorwf	display_clock@i+1,f
  6086                           
  6087                           ;clock_src.c: 57:      write_char(i + '0');
  6088  096E  0875               	movf	display_clock@i,w
  6089  096F  3E30               	addlw	48
  6090  0970  160A  118A  24A5  120A  158A  	fcall	_write_char
  6091                           
  6092                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6093  0975  0821               	movf	_table1+1,w
  6094  0976  390F               	andlw	15
  6095  0977  00F3               	movwf	??_display_clock
  6096  0978  01F4               	clrf	??_display_clock+1
  6097  0979  0873               	movf	??_display_clock,w
  6098  097A  00F5               	movwf	display_clock@i
  6099  097B  0874               	movf	??_display_clock+1,w
  6100  097C  00F6               	movwf	display_clock@i+1
  6101                           
  6102                           ;clock_src.c: 61:      write_char(i + '0');
  6103  097D  0875               	movf	display_clock@i,w
  6104  097E  3E30               	addlw	48
  6105  097F  160A  118A  24A5  120A  158A  	fcall	_write_char
  6106                           
  6107                           ;clock_src.c: 62:      write_char(':');
  6108  0984  303A               	movlw	58
  6109  0985  160A  118A  24A5  120A  158A  	fcall	_write_char
  6110                           
  6111                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6112  098A  0820               	movf	_table1,w
  6113  098B  39F0               	andlw	240
  6114  098C  00F3               	movwf	??_display_clock
  6115  098D  01F4               	clrf	??_display_clock+1
  6116  098E  0873               	movf	??_display_clock,w
  6117  098F  00F5               	movwf	display_clock@i
  6118  0990  0874               	movf	??_display_clock+1,w
  6119  0991  00F6               	movwf	display_clock@i+1
  6120                           
  6121                           ;clock_src.c: 66:      i=i>>4;
  6122  0992  0E75               	swapf	display_clock@i,w
  6123  0993  390F               	andlw	15
  6124  0994  00F5               	movwf	display_clock@i
  6125  0995  0E76               	swapf	display_clock@i+1,w
  6126  0996  39F0               	andlw	240
  6127  0997  04F5               	iorwf	display_clock@i,f
  6128  0998  0E76               	swapf	display_clock@i+1,w
  6129  0999  390F               	andlw	15
  6130  099A  00F6               	movwf	display_clock@i+1
  6131  099B  30F0               	movlw	240
  6132  099C  1DF6               	btfss	display_clock@i+1,3
  6133  099D  3000               	movlw	0
  6134  099E  04F6               	iorwf	display_clock@i+1,f
  6135                           
  6136                           ;clock_src.c: 67:      write_char(i + '0');
  6137  099F  0875               	movf	display_clock@i,w
  6138  09A0  3E30               	addlw	48
  6139  09A1  160A  118A  24A5  120A  158A  	fcall	_write_char
  6140                           
  6141                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6142  09A6  0820               	movf	_table1,w
  6143  09A7  390F               	andlw	15
  6144  09A8  00F3               	movwf	??_display_clock
  6145  09A9  01F4               	clrf	??_display_clock+1
  6146  09AA  0873               	movf	??_display_clock,w
  6147  09AB  00F5               	movwf	display_clock@i
  6148  09AC  0874               	movf	??_display_clock+1,w
  6149  09AD  00F6               	movwf	display_clock@i+1
  6150                           
  6151                           ;clock_src.c: 71:      write_char(i + '0');
  6152  09AE  0875               	movf	display_clock@i,w
  6153  09AF  3E30               	addlw	48
  6154  09B0  160A  118A  24A5   	fcall	_write_char
  6155  09B3  0008               	return
  6156  09B4                     __end_of_display_clock:	
  6157                           
  6158                           	psect	text29
  6159  0387                     __ptext29:	
  6160 ;; *************** function _date_settings *****************
  6161 ;; Defined at:
  6162 ;;		line 366 in file "Button_src.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;		None
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 300/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6176 ;;      Params:         0       0       0       0       0
  6177 ;;      Locals:         0       0       0       0       0
  6178 ;;      Temps:          0       3       0       0       0
  6179 ;;      Totals:         0       3       0       0       0
  6180 ;;Total ram usage:        3 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    3
  6183 ;; This function calls:
  6184 ;;		_button_delay
  6185 ;;		_incrementor
  6186 ;;		_modulus_func
  6187 ;;		_set_time
  6188 ;;		_time_date_delimiter
  6189 ;;		_time_date_hex_terminator
  6190 ;;		_write_char
  6191 ;;		_write_cmd
  6192 ;; This function is called by:
  6193 ;;		_main
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _date_settings
  6199  0387                     _date_settings:	
  6200                           
  6201                           ;Button_src.c: 367:  RC0 = 0;
  6202                           
  6203                           ;incstack = 0
  6204                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6205  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6206  0388  1303               	bcf	3,6	;RP1=0, select bank0
  6207  0389  1007               	bcf	7,0	;volatile
  6208                           
  6209                           ;Button_src.c: 368:  RC1 = 1;
  6210  038A  1487               	bsf	7,1	;volatile
  6211                           
  6212                           ;Button_src.c: 369:  RC2 = 1;
  6213  038B  1507               	bsf	7,2	;volatile
  6214                           
  6215                           ;Button_src.c: 370:  RC3 = 1;
  6216  038C  1587               	bsf	7,3	;volatile
  6217                           
  6218                           ;Button_src.c: 371:   if (RC4 == 0){
  6219  038D  1A07               	btfsc	7,4	;volatile
  6220  038E  0008               	return
  6221                           
  6222                           ;Button_src.c: 372:       write_cmd(0x1);
  6223  038F  3001               	movlw	1
  6224  0390  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  6225  0395                     l718:	
  6226                           ;Button_src.c: 373:       for(;;){
  6227                           
  6228                           
  6229                           ;Button_src.c: 374:             write_cmd(0x80);
  6230  0395  3080               	movlw	128
  6231  0396  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  6232                           
  6233                           ;Button_src.c: 375:             write_char('D');
  6234  039B  3044               	movlw	68
  6235  039C  160A  118A  24A5  120A  118A  	fcall	_write_char
  6236                           
  6237                           ;Button_src.c: 376:             write_char('a');
  6238  03A1  3061               	movlw	97
  6239  03A2  160A  118A  24A5  120A  118A  	fcall	_write_char
  6240                           
  6241                           ;Button_src.c: 377:             write_char('t');
  6242  03A7  3074               	movlw	116
  6243  03A8  160A  118A  24A5  120A  118A  	fcall	_write_char
  6244                           
  6245                           ;Button_src.c: 378:             write_char('e');
  6246  03AD  3065               	movlw	101
  6247  03AE  160A  118A  24A5  120A  118A  	fcall	_write_char
  6248                           
  6249                           ;Button_src.c: 379:             write_char('_');
  6250  03B3  305F               	movlw	95
  6251  03B4  160A  118A  24A5  120A  118A  	fcall	_write_char
  6252                           
  6253                           ;Button_src.c: 380:             write_char('S');
  6254  03B9  3053               	movlw	83
  6255  03BA  160A  118A  24A5  120A  118A  	fcall	_write_char
  6256                           
  6257                           ;Button_src.c: 381:             write_char('e');
  6258  03BF  3065               	movlw	101
  6259  03C0  160A  118A  24A5  120A  118A  	fcall	_write_char
  6260                           
  6261                           ;Button_src.c: 382:             write_char('t');
  6262  03C5  3074               	movlw	116
  6263  03C6  160A  118A  24A5  120A  118A  	fcall	_write_char
  6264                           
  6265                           ;Button_src.c: 383:             write_char('t');
  6266  03CB  3074               	movlw	116
  6267  03CC  160A  118A  24A5  120A  118A  	fcall	_write_char
  6268                           
  6269                           ;Button_src.c: 384:             write_char('i');
  6270  03D1  3069               	movlw	105
  6271  03D2  160A  118A  24A5  120A  118A  	fcall	_write_char
  6272                           
  6273                           ;Button_src.c: 385:             write_char('n');
  6274  03D7  306E               	movlw	110
  6275  03D8  160A  118A  24A5  120A  118A  	fcall	_write_char
  6276                           
  6277                           ;Button_src.c: 386:             write_char('g');
  6278  03DD  3067               	movlw	103
  6279  03DE  160A  118A  24A5  120A  118A  	fcall	_write_char
  6280                           
  6281                           ;Button_src.c: 387:             write_char('s');
  6282  03E3  3073               	movlw	115
  6283  03E4  160A  118A  24A5  120A  118A  	fcall	_write_char
  6284                           
  6285                           ;Button_src.c: 388:             RC0 = 1;
  6286  03E9  1407               	bsf	7,0	;volatile
  6287                           
  6288                           ;Button_src.c: 389:             RC1 = 0;
  6289  03EA  1087               	bcf	7,1	;volatile
  6290                           
  6291                           ;Button_src.c: 390:             RC2 = 1;
  6292  03EB  1507               	bsf	7,2	;volatile
  6293                           
  6294                           ;Button_src.c: 391:             RC3 = 1;
  6295  03EC  1587               	bsf	7,3	;volatile
  6296                           
  6297                           ;Button_src.c: 392:             if(RC7 == 0 && b =='x'){
  6298  03ED  1B87               	btfsc	7,7	;volatile
  6299  03EE  2C5F               	goto	l4069
  6300  03EF  3078               	movlw	120
  6301  03F0  0648               	xorwf	_b,w
  6302  03F1  1D03               	btfss	3,2
  6303  03F2  2C5F               	goto	l4069
  6304                           
  6305                           ;Button_src.c: 393:                 if(stats == 1)
  6306  03F3  032B               	decf	_stats,w
  6307  03F4  042C               	iorwf	_stats+1,w
  6308  03F5  1D03               	btfss	3,2
  6309  03F6  2BFB               	goto	l720
  6310                           
  6311                           ;Button_src.c: 394:                     a++;
  6312  03F7  3001               	movlw	1
  6313  03F8  00E4               	movwf	??_date_settings
  6314  03F9  0864               	movf	??_date_settings,w
  6315  03FA  07C9               	addwf	_a,f
  6316  03FB                     l720:	
  6317                           
  6318                           ;Button_src.c: 395:                 if(stats == 0){
  6319  03FB  082B               	movf	_stats,w
  6320  03FC  042C               	iorwf	_stats+1,w
  6321  03FD  1D03               	btfss	3,2
  6322  03FE  2C03               	goto	l721
  6323                           
  6324                           ;Button_src.c: 396:                     stats = 1;
  6325  03FF  3001               	movlw	1
  6326  0400  00AB               	movwf	_stats
  6327  0401  3000               	movlw	0
  6328  0402  00AC               	movwf	_stats+1
  6329  0403                     l721:	
  6330                           ;Button_src.c: 397:                 }
  6331                           
  6332                           
  6333                           ;Button_src.c: 399:                     x++ ;
  6334  0403  3001               	movlw	1
  6335  0404  07B5               	addwf	_x,f
  6336  0405  1803               	skipnc
  6337  0406  0AB6               	incf	_x+1,f
  6338  0407  3000               	movlw	0
  6339  0408  07B6               	addwf	_x+1,f
  6340                           
  6341                           ;Button_src.c: 400:                     x = modulus_func(x,10);
  6342  0409  0836               	movf	_x+1,w
  6343  040A  00F8               	movwf	modulus_func@x+1
  6344  040B  0835               	movf	_x,w
  6345  040C  00F7               	movwf	modulus_func@x
  6346  040D  300A               	movlw	10
  6347  040E  00F9               	movwf	modulus_func@y
  6348  040F  3000               	movlw	0
  6349  0410  00FA               	movwf	modulus_func@y+1
  6350  0411  160A  118A  2434  120A  118A  	fcall	_modulus_func
  6351  0416  0878               	movf	?_modulus_func+1,w
  6352  0417  00B6               	movwf	_x+1
  6353  0418  0877               	movf	?_modulus_func,w
  6354  0419  00B5               	movwf	_x
  6355                           
  6356                           ;Button_src.c: 401:                      if (p == 1){
  6357  041A  0329               	decf	_p,w
  6358  041B  042A               	iorwf	_p+1,w
  6359  041C  1D03               	btfss	3,2
  6360  041D  2C37               	goto	l4055
  6361                           
  6362                           ;Button_src.c: 402:                         y = incrementor(y,x,'0');
  6363  041E  0834               	movf	_y+1,w
  6364  041F  00E0               	movwf	incrementor@upper_val+1
  6365  0420  0833               	movf	_y,w
  6366  0421  00DF               	movwf	incrementor@upper_val
  6367  0422  0836               	movf	_x+1,w
  6368  0423  00E2               	movwf	incrementor@lower_val+1
  6369  0424  0835               	movf	_x,w
  6370  0425  00E1               	movwf	incrementor@lower_val
  6371  0426  3030               	movlw	48
  6372  0427  00E4               	movwf	??_date_settings
  6373  0428  0864               	movf	??_date_settings,w
  6374  0429  00E3               	movwf	incrementor@z
  6375  042A  160A  118A  2555  120A  118A  	fcall	_incrementor
  6376  042F  00E5               	movwf	??_date_settings+1
  6377  0430  01E6               	clrf	??_date_settings+2
  6378  0431  0865               	movf	??_date_settings+1,w
  6379  0432  00B3               	movwf	_y
  6380  0433  0866               	movf	??_date_settings+2,w
  6381  0434  00B4               	movwf	_y+1
  6382                           
  6383                           ;Button_src.c: 403:                         p = 0;
  6384  0435  01A9               	clrf	_p
  6385  0436  01AA               	clrf	_p+1
  6386  0437                     l4055:	
  6387                           
  6388                           ;Button_src.c: 405:                     if (x == 9){
  6389  0437  3009               	movlw	9
  6390  0438  0635               	xorwf	_x,w
  6391  0439  0436               	iorwf	_x+1,w
  6392  043A  1D03               	btfss	3,2
  6393  043B  2C40               	goto	l4059
  6394                           
  6395                           ;Button_src.c: 406:                         p = 1;
  6396  043C  3001               	movlw	1
  6397  043D  00A9               	movwf	_p
  6398  043E  3000               	movlw	0
  6399  043F  00AA               	movwf	_p+1
  6400  0440                     l4059:	
  6401                           
  6402                           ;Button_src.c: 408:                     a = time_date_hex_terminator(a,'C');
  6403  0440  3043               	movlw	67
  6404  0441  00E4               	movwf	??_date_settings
  6405  0442  0864               	movf	??_date_settings,w
  6406  0443  00F0               	movwf	time_date_hex_terminator@limiter
  6407  0444  0849               	movf	_a,w
  6408  0445  160A  118A  2416  120A  118A  	fcall	_time_date_hex_terminator
  6409  044A  00E5               	movwf	??_date_settings+1
  6410  044B  0865               	movf	??_date_settings+1,w
  6411  044C  00C9               	movwf	_a
  6412                           
  6413                           ;Button_src.c: 410:                     if(y == 1 && x == 3){
  6414  044D  0333               	decf	_y,w
  6415  044E  0434               	iorwf	_y+1,w
  6416  044F  1D03               	btfss	3,2
  6417  0450  2C5A               	goto	l4067
  6418  0451  3003               	movlw	3
  6419  0452  0635               	xorwf	_x,w
  6420  0453  0436               	iorwf	_x+1,w
  6421  0454  1D03               	btfss	3,2
  6422  0455  2C5A               	goto	l4067
  6423                           
  6424                           ;Button_src.c: 411:                         x = 0;
  6425  0456  01B5               	clrf	_x
  6426  0457  01B6               	clrf	_x+1
  6427                           
  6428                           ;Button_src.c: 412:                         y = 0;
  6429  0458  01B3               	clrf	_y
  6430  0459  01B4               	clrf	_y+1
  6431  045A                     l4067:	
  6432                           
  6433                           ;Button_src.c: 414:                     button_delay();
  6434  045A  160A  118A  2455  120A  118A  	fcall	_button_delay
  6435  045F                     l4069:	
  6436                           
  6437                           ;Button_src.c: 416:             if(RC7==0 && b == 'y'){
  6438  045F  1283               	bcf	3,5	;RP0=0, select bank0
  6439  0460  1303               	bcf	3,6	;RP1=0, select bank0
  6440  0461  1B87               	btfsc	7,7	;volatile
  6441  0462  2CE5               	goto	l4103
  6442  0463  3079               	movlw	121
  6443  0464  0648               	xorwf	_b,w
  6444  0465  1D03               	btfss	3,2
  6445  0466  2CE5               	goto	l4103
  6446                           
  6447                           ;Button_src.c: 417:                  if(stats == 1)
  6448  0467  032B               	decf	_stats,w
  6449  0468  042C               	iorwf	_stats+1,w
  6450  0469  1D03               	btfss	3,2
  6451  046A  2C6F               	goto	l726
  6452                           
  6453                           ;Button_src.c: 418:                     day_hex++;
  6454  046B  3001               	movlw	1
  6455  046C  00E4               	movwf	??_date_settings
  6456  046D  0864               	movf	??_date_settings,w
  6457  046E  07C6               	addwf	_day_hex,f
  6458  046F                     l726:	
  6459                           
  6460                           ;Button_src.c: 419:                 if(stats == 0){
  6461  046F  082B               	movf	_stats,w
  6462  0470  042C               	iorwf	_stats+1,w
  6463  0471  1D03               	btfss	3,2
  6464  0472  2C77               	goto	l727
  6465                           
  6466                           ;Button_src.c: 420:                     stats = 1;
  6467  0473  3001               	movlw	1
  6468  0474  00AB               	movwf	_stats
  6469  0475  3000               	movlw	0
  6470  0476  00AC               	movwf	_stats+1
  6471  0477                     l727:	
  6472                           ;Button_src.c: 421:                 }
  6473                           
  6474                           
  6475                           ;Button_src.c: 423:                     day_low++;
  6476  0477  3001               	movlw	1
  6477  0478  07AF               	addwf	_day_low,f
  6478  0479  1803               	skipnc
  6479  047A  0AB0               	incf	_day_low+1,f
  6480  047B  3000               	movlw	0
  6481  047C  07B0               	addwf	_day_low+1,f
  6482                           
  6483                           ;Button_src.c: 424:                     day_low = modulus_func(day_low,10);
  6484  047D  0830               	movf	_day_low+1,w
  6485  047E  00F8               	movwf	modulus_func@x+1
  6486  047F  082F               	movf	_day_low,w
  6487  0480  00F7               	movwf	modulus_func@x
  6488  0481  300A               	movlw	10
  6489  0482  00F9               	movwf	modulus_func@y
  6490  0483  3000               	movlw	0
  6491  0484  00FA               	movwf	modulus_func@y+1
  6492  0485  160A  118A  2434  120A  118A  	fcall	_modulus_func
  6493  048A  0878               	movf	?_modulus_func+1,w
  6494  048B  00B0               	movwf	_day_low+1
  6495  048C  0877               	movf	?_modulus_func,w
  6496  048D  00AF               	movwf	_day_low
  6497                           
  6498                           ;Button_src.c: 425:                     day_counter = modulus_func(day_low,8);
  6499  048E  0830               	movf	_day_low+1,w
  6500  048F  00F8               	movwf	modulus_func@x+1
  6501  0490  082F               	movf	_day_low,w
  6502  0491  00F7               	movwf	modulus_func@x
  6503  0492  3008               	movlw	8
  6504  0493  00F9               	movwf	modulus_func@y
  6505  0494  3000               	movlw	0
  6506  0495  00FA               	movwf	modulus_func@y+1
  6507  0496  160A  118A  2434  120A  118A  	fcall	_modulus_func
  6508  049B  0878               	movf	?_modulus_func+1,w
  6509  049C  00A8               	movwf	_day_counter+1
  6510  049D  0877               	movf	?_modulus_func,w
  6511  049E  00A7               	movwf	_day_counter
  6512                           
  6513                           ;Button_src.c: 426:                     if (p == 1){
  6514  049F  0329               	decf	_p,w
  6515  04A0  042A               	iorwf	_p+1,w
  6516  04A1  1D03               	btfss	3,2
  6517  04A2  2CBC               	goto	l4089
  6518                           
  6519                           ;Button_src.c: 427:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6520  04A3  082E               	movf	_day_high+1,w
  6521  04A4  00E0               	movwf	incrementor@upper_val+1
  6522  04A5  082D               	movf	_day_high,w
  6523  04A6  00DF               	movwf	incrementor@upper_val
  6524  04A7  0830               	movf	_day_low+1,w
  6525  04A8  00E2               	movwf	incrementor@lower_val+1
  6526  04A9  082F               	movf	_day_low,w
  6527  04AA  00E1               	movwf	incrementor@lower_val
  6528  04AB  3030               	movlw	48
  6529  04AC  00E4               	movwf	??_date_settings
  6530  04AD  0864               	movf	??_date_settings,w
  6531  04AE  00E3               	movwf	incrementor@z
  6532  04AF  160A  118A  2555  120A  118A  	fcall	_incrementor
  6533  04B4  00E5               	movwf	??_date_settings+1
  6534  04B5  01E6               	clrf	??_date_settings+2
  6535  04B6  0865               	movf	??_date_settings+1,w
  6536  04B7  00AD               	movwf	_day_high
  6537  04B8  0866               	movf	??_date_settings+2,w
  6538  04B9  00AE               	movwf	_day_high+1
  6539                           
  6540                           ;Button_src.c: 428:                         p = 0;
  6541  04BA  01A9               	clrf	_p
  6542  04BB  01AA               	clrf	_p+1
  6543  04BC                     l4089:	
  6544                           
  6545                           ;Button_src.c: 430:                     if (day_low == 9){
  6546  04BC  3009               	movlw	9
  6547  04BD  062F               	xorwf	_day_low,w
  6548  04BE  0430               	iorwf	_day_low+1,w
  6549  04BF  1D03               	btfss	3,2
  6550  04C0  2CC5               	goto	l4093
  6551                           
  6552                           ;Button_src.c: 431:                         p = 1;
  6553  04C1  3001               	movlw	1
  6554  04C2  00A9               	movwf	_p
  6555  04C3  3000               	movlw	0
  6556  04C4  00AA               	movwf	_p+1
  6557  04C5                     l4093:	
  6558                           
  6559                           ;Button_src.c: 433:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6560  04C5  3063               	movlw	99
  6561  04C6  00E4               	movwf	??_date_settings
  6562  04C7  0864               	movf	??_date_settings,w
  6563  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6564  04C9  0846               	movf	_day_hex,w
  6565  04CA  160A  118A  2416  120A  118A  	fcall	_time_date_hex_terminator
  6566  04CF  00E5               	movwf	??_date_settings+1
  6567  04D0  0865               	movf	??_date_settings+1,w
  6568  04D1  00C6               	movwf	_day_hex
  6569                           
  6570                           ;Button_src.c: 434:                     if(day_high == 3 && day_low==2 ){
  6571  04D2  3003               	movlw	3
  6572  04D3  062D               	xorwf	_day_high,w
  6573  04D4  042E               	iorwf	_day_high+1,w
  6574  04D5  1D03               	btfss	3,2
  6575  04D6  2CE0               	goto	l4101
  6576  04D7  3002               	movlw	2
  6577  04D8  062F               	xorwf	_day_low,w
  6578  04D9  0430               	iorwf	_day_low+1,w
  6579  04DA  1D03               	btfss	3,2
  6580  04DB  2CE0               	goto	l4101
  6581                           
  6582                           ;Button_src.c: 435:                         day_high = 0;
  6583  04DC  01AD               	clrf	_day_high
  6584  04DD  01AE               	clrf	_day_high+1
  6585                           
  6586                           ;Button_src.c: 436:                         day_low = 0;
  6587  04DE  01AF               	clrf	_day_low
  6588  04DF  01B0               	clrf	_day_low+1
  6589  04E0                     l4101:	
  6590                           
  6591                           ;Button_src.c: 438:                     button_delay();
  6592  04E0  160A  118A  2455  120A  118A  	fcall	_button_delay
  6593  04E5                     l4103:	
  6594                           
  6595                           ;Button_src.c: 440:             if(RC7==0 && b == 'z'){
  6596  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6597  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6598  04E7  1B87               	btfsc	7,7	;volatile
  6599  04E8  2D4C               	goto	l4135
  6600  04E9  307A               	movlw	122
  6601  04EA  0648               	xorwf	_b,w
  6602  04EB  1D03               	btfss	3,2
  6603  04EC  2D4C               	goto	l4135
  6604                           
  6605                           ;Button_src.c: 441:                 if(stats == 1)
  6606  04ED  032B               	decf	_stats,w
  6607  04EE  042C               	iorwf	_stats+1,w
  6608  04EF  1D03               	btfss	3,2
  6609  04F0  2CF5               	goto	l732
  6610                           
  6611                           ;Button_src.c: 442:                    c++;
  6612  04F1  3001               	movlw	1
  6613  04F2  00E4               	movwf	??_date_settings
  6614  04F3  0864               	movf	??_date_settings,w
  6615  04F4  07C7               	addwf	_c,f
  6616  04F5                     l732:	
  6617                           
  6618                           ;Button_src.c: 443:                 if(stats == 0){
  6619  04F5  082B               	movf	_stats,w
  6620  04F6  042C               	iorwf	_stats+1,w
  6621  04F7  1D03               	btfss	3,2
  6622  04F8  2CFD               	goto	l733
  6623                           
  6624                           ;Button_src.c: 444:                     stats = 1;
  6625  04F9  3001               	movlw	1
  6626  04FA  00AB               	movwf	_stats
  6627  04FB  3000               	movlw	0
  6628  04FC  00AC               	movwf	_stats+1
  6629  04FD                     l733:	
  6630                           ;Button_src.c: 445:                 }
  6631                           
  6632                           
  6633                           ;Button_src.c: 447:                     t++;
  6634  04FD  3001               	movlw	1
  6635  04FE  07B9               	addwf	_t,f
  6636  04FF  1803               	skipnc
  6637  0500  0ABA               	incf	_t+1,f
  6638  0501  3000               	movlw	0
  6639  0502  07BA               	addwf	_t+1,f
  6640                           
  6641                           ;Button_src.c: 448:                     t = modulus_func(t,10);
  6642  0503  083A               	movf	_t+1,w
  6643  0504  00F8               	movwf	modulus_func@x+1
  6644  0505  0839               	movf	_t,w
  6645  0506  00F7               	movwf	modulus_func@x
  6646  0507  300A               	movlw	10
  6647  0508  00F9               	movwf	modulus_func@y
  6648  0509  3000               	movlw	0
  6649  050A  00FA               	movwf	modulus_func@y+1
  6650  050B  160A  118A  2434  120A  118A  	fcall	_modulus_func
  6651  0510  0878               	movf	?_modulus_func+1,w
  6652  0511  00BA               	movwf	_t+1
  6653  0512  0877               	movf	?_modulus_func,w
  6654  0513  00B9               	movwf	_t
  6655                           
  6656                           ;Button_src.c: 449:                      if (p == 1){
  6657  0514  0329               	decf	_p,w
  6658  0515  042A               	iorwf	_p+1,w
  6659  0516  1D03               	btfss	3,2
  6660  0517  2D31               	goto	l4121
  6661                           
  6662                           ;Button_src.c: 450:                         w = incrementor(w,t,'0');
  6663  0518  0838               	movf	_w+1,w
  6664  0519  00E0               	movwf	incrementor@upper_val+1
  6665  051A  0837               	movf	_w,w
  6666  051B  00DF               	movwf	incrementor@upper_val
  6667  051C  083A               	movf	_t+1,w
  6668  051D  00E2               	movwf	incrementor@lower_val+1
  6669  051E  0839               	movf	_t,w
  6670  051F  00E1               	movwf	incrementor@lower_val
  6671  0520  3030               	movlw	48
  6672  0521  00E4               	movwf	??_date_settings
  6673  0522  0864               	movf	??_date_settings,w
  6674  0523  00E3               	movwf	incrementor@z
  6675  0524  160A  118A  2555  120A  118A  	fcall	_incrementor
  6676  0529  00E5               	movwf	??_date_settings+1
  6677  052A  01E6               	clrf	??_date_settings+2
  6678  052B  0865               	movf	??_date_settings+1,w
  6679  052C  00B7               	movwf	_w
  6680  052D  0866               	movf	??_date_settings+2,w
  6681  052E  00B8               	movwf	_w+1
  6682                           
  6683                           ;Button_src.c: 451:                         p = 0;
  6684  052F  01A9               	clrf	_p
  6685  0530  01AA               	clrf	_p+1
  6686  0531                     l4121:	
  6687                           
  6688                           ;Button_src.c: 453:                     if (t == 9){
  6689  0531  3009               	movlw	9
  6690  0532  0639               	xorwf	_t,w
  6691  0533  043A               	iorwf	_t+1,w
  6692  0534  1D03               	btfss	3,2
  6693  0535  2D3A               	goto	l4125
  6694                           
  6695                           ;Button_src.c: 454:                         p = 1;
  6696  0536  3001               	movlw	1
  6697  0537  00A9               	movwf	_p
  6698  0538  3000               	movlw	0
  6699  0539  00AA               	movwf	_p+1
  6700  053A                     l4125:	
  6701                           
  6702                           ;Button_src.c: 457:                      if(c == (0x59 + 1)){
  6703  053A  305A               	movlw	90
  6704  053B  0647               	xorwf	_c,w
  6705  053C  1903               	btfsc	3,2
  6706                           
  6707                           ;Button_src.c: 458:                         c = 0x00;
  6708  053D  01C7               	clrf	_c
  6709                           
  6710                           ;Button_src.c: 460:                     if(w == 6){
  6711  053E  3006               	movlw	6
  6712  053F  0637               	xorwf	_w,w
  6713  0540  0438               	iorwf	_w+1,w
  6714  0541  1D03               	btfss	3,2
  6715  0542  2D47               	goto	l4133
  6716                           
  6717                           ;Button_src.c: 461:                         w = 0;
  6718  0543  01B7               	clrf	_w
  6719  0544  01B8               	clrf	_w+1
  6720                           
  6721                           ;Button_src.c: 462:                         t = 0;
  6722  0545  01B9               	clrf	_t
  6723  0546  01BA               	clrf	_t+1
  6724  0547                     l4133:	
  6725                           
  6726                           ;Button_src.c: 464:                     button_delay();
  6727  0547  160A  118A  2455  120A  118A  	fcall	_button_delay
  6728  054C                     l4135:	
  6729                           
  6730                           ;Button_src.c: 471:                     a = time_date_delimiter(a,0x11,'9',1);
  6731  054C  3011               	movlw	17
  6732  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6733  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6734  054F  00E4               	movwf	??_date_settings
  6735  0550  0864               	movf	??_date_settings,w
  6736  0551  00F0               	movwf	time_date_delimiter@hex
  6737  0552  3039               	movlw	57
  6738  0553  00E5               	movwf	??_date_settings+1
  6739  0554  0865               	movf	??_date_settings+1,w
  6740  0555  00F1               	movwf	time_date_delimiter@limiter
  6741  0556  3001               	movlw	1
  6742  0557  00F2               	movwf	time_date_delimiter@type
  6743  0558  3000               	movlw	0
  6744  0559  00F3               	movwf	time_date_delimiter@type+1
  6745  055A  0849               	movf	_a,w
  6746  055B  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6747  0560  00E6               	movwf	??_date_settings+2
  6748  0561  0866               	movf	??_date_settings+2,w
  6749  0562  00C9               	movwf	_a
  6750                           
  6751                           ;Button_src.c: 473:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6752  0563  3011               	movlw	17
  6753  0564  00E4               	movwf	??_date_settings
  6754  0565  0864               	movf	??_date_settings,w
  6755  0566  00F0               	movwf	time_date_delimiter@hex
  6756  0567  3039               	movlw	57
  6757  0568  00E5               	movwf	??_date_settings+1
  6758  0569  0865               	movf	??_date_settings+1,w
  6759  056A  00F1               	movwf	time_date_delimiter@limiter
  6760  056B  3002               	movlw	2
  6761  056C  00F2               	movwf	time_date_delimiter@type
  6762  056D  3000               	movlw	0
  6763  056E  00F3               	movwf	time_date_delimiter@type+1
  6764  056F  0846               	movf	_day_hex,w
  6765  0570  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6766  0575  00E6               	movwf	??_date_settings+2
  6767  0576  0866               	movf	??_date_settings+2,w
  6768  0577  00C6               	movwf	_day_hex
  6769                           
  6770                           ;Button_src.c: 474:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6771  0578  3021               	movlw	33
  6772  0579  00E4               	movwf	??_date_settings
  6773  057A  0864               	movf	??_date_settings,w
  6774  057B  00F0               	movwf	time_date_delimiter@hex
  6775  057C  304A               	movlw	74
  6776  057D  00E5               	movwf	??_date_settings+1
  6777  057E  0865               	movf	??_date_settings+1,w
  6778  057F  00F1               	movwf	time_date_delimiter@limiter
  6779  0580  3002               	movlw	2
  6780  0581  00F2               	movwf	time_date_delimiter@type
  6781  0582  3000               	movlw	0
  6782  0583  00F3               	movwf	time_date_delimiter@type+1
  6783  0584  0846               	movf	_day_hex,w
  6784  0585  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6785  058A  00E6               	movwf	??_date_settings+2
  6786  058B  0866               	movf	??_date_settings+2,w
  6787  058C  00C6               	movwf	_day_hex
  6788                           
  6789                           ;Button_src.c: 475:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6790  058D  3011               	movlw	17
  6791  058E  00E4               	movwf	??_date_settings
  6792  058F  0864               	movf	??_date_settings,w
  6793  0590  00F0               	movwf	time_date_delimiter@hex
  6794  0591  3039               	movlw	57
  6795  0592  00E5               	movwf	??_date_settings+1
  6796  0593  0865               	movf	??_date_settings+1,w
  6797  0594  00F1               	movwf	time_date_delimiter@limiter
  6798  0595  3002               	movlw	2
  6799  0596  00F2               	movwf	time_date_delimiter@type
  6800  0597  3000               	movlw	0
  6801  0598  00F3               	movwf	time_date_delimiter@type+1
  6802  0599  0846               	movf	_day_hex,w
  6803  059A  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6804  059F  00E6               	movwf	??_date_settings+2
  6805  05A0  0866               	movf	??_date_settings+2,w
  6806  05A1  00C6               	movwf	_day_hex
  6807                           
  6808                           ;Button_src.c: 476:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6809  05A2  3021               	movlw	33
  6810  05A3  00E4               	movwf	??_date_settings
  6811  05A4  0864               	movf	??_date_settings,w
  6812  05A5  00F0               	movwf	time_date_delimiter@hex
  6813  05A6  304A               	movlw	74
  6814  05A7  00E5               	movwf	??_date_settings+1
  6815  05A8  0865               	movf	??_date_settings+1,w
  6816  05A9  00F1               	movwf	time_date_delimiter@limiter
  6817  05AA  3002               	movlw	2
  6818  05AB  00F2               	movwf	time_date_delimiter@type
  6819  05AC  3000               	movlw	0
  6820  05AD  00F3               	movwf	time_date_delimiter@type+1
  6821  05AE  0846               	movf	_day_hex,w
  6822  05AF  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6823  05B4  00E6               	movwf	??_date_settings+2
  6824  05B5  0866               	movf	??_date_settings+2,w
  6825  05B6  00C6               	movwf	_day_hex
  6826                           
  6827                           ;Button_src.c: 477:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6828  05B7  3031               	movlw	49
  6829  05B8  00E4               	movwf	??_date_settings
  6830  05B9  0864               	movf	??_date_settings,w
  6831  05BA  00F0               	movwf	time_date_delimiter@hex
  6832  05BB  3059               	movlw	89
  6833  05BC  00E5               	movwf	??_date_settings+1
  6834  05BD  0865               	movf	??_date_settings+1,w
  6835  05BE  00F1               	movwf	time_date_delimiter@limiter
  6836  05BF  3002               	movlw	2
  6837  05C0  00F2               	movwf	time_date_delimiter@type
  6838  05C1  3000               	movlw	0
  6839  05C2  00F3               	movwf	time_date_delimiter@type+1
  6840  05C3  0846               	movf	_day_hex,w
  6841  05C4  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6842  05C9  00E6               	movwf	??_date_settings+2
  6843  05CA  0866               	movf	??_date_settings+2,w
  6844  05CB  00C6               	movwf	_day_hex
  6845                           
  6846                           ;Button_src.c: 479:                     c = time_date_delimiter(c,0x11,'9',3);
  6847  05CC  3011               	movlw	17
  6848  05CD  00E4               	movwf	??_date_settings
  6849  05CE  0864               	movf	??_date_settings,w
  6850  05CF  00F0               	movwf	time_date_delimiter@hex
  6851  05D0  3039               	movlw	57
  6852  05D1  00E5               	movwf	??_date_settings+1
  6853  05D2  0865               	movf	??_date_settings+1,w
  6854  05D3  00F1               	movwf	time_date_delimiter@limiter
  6855  05D4  3003               	movlw	3
  6856  05D5  00F2               	movwf	time_date_delimiter@type
  6857  05D6  3000               	movlw	0
  6858  05D7  00F3               	movwf	time_date_delimiter@type+1
  6859  05D8  0847               	movf	_c,w
  6860  05D9  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6861  05DE  00E6               	movwf	??_date_settings+2
  6862  05DF  0866               	movf	??_date_settings+2,w
  6863  05E0  00C7               	movwf	_c
  6864                           
  6865                           ;Button_src.c: 480:                     c = time_date_delimiter(c,0x21,'J',3);
  6866  05E1  3021               	movlw	33
  6867  05E2  00E4               	movwf	??_date_settings
  6868  05E3  0864               	movf	??_date_settings,w
  6869  05E4  00F0               	movwf	time_date_delimiter@hex
  6870  05E5  304A               	movlw	74
  6871  05E6  00E5               	movwf	??_date_settings+1
  6872  05E7  0865               	movf	??_date_settings+1,w
  6873  05E8  00F1               	movwf	time_date_delimiter@limiter
  6874  05E9  3003               	movlw	3
  6875  05EA  00F2               	movwf	time_date_delimiter@type
  6876  05EB  3000               	movlw	0
  6877  05EC  00F3               	movwf	time_date_delimiter@type+1
  6878  05ED  0847               	movf	_c,w
  6879  05EE  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6880  05F3  00E6               	movwf	??_date_settings+2
  6881  05F4  0866               	movf	??_date_settings+2,w
  6882  05F5  00C7               	movwf	_c
  6883                           
  6884                           ;Button_src.c: 481:                     c = time_date_delimiter(c,0x11,'9',3);
  6885  05F6  3011               	movlw	17
  6886  05F7  00E4               	movwf	??_date_settings
  6887  05F8  0864               	movf	??_date_settings,w
  6888  05F9  00F0               	movwf	time_date_delimiter@hex
  6889  05FA  3039               	movlw	57
  6890  05FB  00E5               	movwf	??_date_settings+1
  6891  05FC  0865               	movf	??_date_settings+1,w
  6892  05FD  00F1               	movwf	time_date_delimiter@limiter
  6893  05FE  3003               	movlw	3
  6894  05FF  00F2               	movwf	time_date_delimiter@type
  6895  0600  3000               	movlw	0
  6896  0601  00F3               	movwf	time_date_delimiter@type+1
  6897  0602  0847               	movf	_c,w
  6898  0603  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6899  0608  00E6               	movwf	??_date_settings+2
  6900  0609  0866               	movf	??_date_settings+2,w
  6901  060A  00C7               	movwf	_c
  6902                           
  6903                           ;Button_src.c: 482:                     c = time_date_delimiter(c,0x21,'J',3);
  6904  060B  3021               	movlw	33
  6905  060C  00E4               	movwf	??_date_settings
  6906  060D  0864               	movf	??_date_settings,w
  6907  060E  00F0               	movwf	time_date_delimiter@hex
  6908  060F  304A               	movlw	74
  6909  0610  00E5               	movwf	??_date_settings+1
  6910  0611  0865               	movf	??_date_settings+1,w
  6911  0612  00F1               	movwf	time_date_delimiter@limiter
  6912  0613  3003               	movlw	3
  6913  0614  00F2               	movwf	time_date_delimiter@type
  6914  0615  3000               	movlw	0
  6915  0616  00F3               	movwf	time_date_delimiter@type+1
  6916  0617  0847               	movf	_c,w
  6917  0618  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6918  061D  00E6               	movwf	??_date_settings+2
  6919  061E  0866               	movf	??_date_settings+2,w
  6920  061F  00C7               	movwf	_c
  6921                           
  6922                           ;Button_src.c: 483:                     c = time_date_delimiter(c,0x31,'Y',3);
  6923  0620  3031               	movlw	49
  6924  0621  00E4               	movwf	??_date_settings
  6925  0622  0864               	movf	??_date_settings,w
  6926  0623  00F0               	movwf	time_date_delimiter@hex
  6927  0624  3059               	movlw	89
  6928  0625  00E5               	movwf	??_date_settings+1
  6929  0626  0865               	movf	??_date_settings+1,w
  6930  0627  00F1               	movwf	time_date_delimiter@limiter
  6931  0628  3003               	movlw	3
  6932  0629  00F2               	movwf	time_date_delimiter@type
  6933  062A  3000               	movlw	0
  6934  062B  00F3               	movwf	time_date_delimiter@type+1
  6935  062C  0847               	movf	_c,w
  6936  062D  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6937  0632  00E6               	movwf	??_date_settings+2
  6938  0633  0866               	movf	??_date_settings+2,w
  6939  0634  00C7               	movwf	_c
  6940                           
  6941                           ;Button_src.c: 484:                     c = time_date_delimiter(c,0x41,'j',3);
  6942  0635  3041               	movlw	65
  6943  0636  00E4               	movwf	??_date_settings
  6944  0637  0864               	movf	??_date_settings,w
  6945  0638  00F0               	movwf	time_date_delimiter@hex
  6946  0639  306A               	movlw	106
  6947  063A  00E5               	movwf	??_date_settings+1
  6948  063B  0865               	movf	??_date_settings+1,w
  6949  063C  00F1               	movwf	time_date_delimiter@limiter
  6950  063D  3003               	movlw	3
  6951  063E  00F2               	movwf	time_date_delimiter@type
  6952  063F  3000               	movlw	0
  6953  0640  00F3               	movwf	time_date_delimiter@type+1
  6954  0641  0847               	movf	_c,w
  6955  0642  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6956  0647  00E6               	movwf	??_date_settings+2
  6957  0648  0866               	movf	??_date_settings+2,w
  6958  0649  00C7               	movwf	_c
  6959                           
  6960                           ;Button_src.c: 485:                     c = time_date_delimiter(c,0x51,'z',3);
  6961  064A  3051               	movlw	81
  6962  064B  00E4               	movwf	??_date_settings
  6963  064C  0864               	movf	??_date_settings,w
  6964  064D  00F0               	movwf	time_date_delimiter@hex
  6965  064E  307A               	movlw	122
  6966  064F  00E5               	movwf	??_date_settings+1
  6967  0650  0865               	movf	??_date_settings+1,w
  6968  0651  00F1               	movwf	time_date_delimiter@limiter
  6969  0652  3003               	movlw	3
  6970  0653  00F2               	movwf	time_date_delimiter@type
  6971  0654  3000               	movlw	0
  6972  0655  00F3               	movwf	time_date_delimiter@type+1
  6973  0656  0847               	movf	_c,w
  6974  0657  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6975  065C  00E6               	movwf	??_date_settings+2
  6976  065D  0866               	movf	??_date_settings+2,w
  6977  065E  00C7               	movwf	_c
  6978                           
  6979                           ;Button_src.c: 487:               if(stats==0){
  6980  065F  082B               	movf	_stats,w
  6981  0660  042C               	iorwf	_stats+1,w
  6982  0661  1D03               	btfss	3,2
  6983  0662  2E71               	goto	l4165
  6984                           
  6985                           ;Button_src.c: 488:                   table[4] = prev_hex;
  6986  0663  0844               	movf	_prev_hex,w
  6987  0664  00E4               	movwf	??_date_settings
  6988  0665  0864               	movf	??_date_settings,w
  6989  0666  1683               	bsf	3,5	;RP0=1, select bank1
  6990  0667  00AC               	movwf	(_table^(0+128)+4)
  6991                           
  6992                           ;Button_src.c: 489:                   table[6] = prev_hex_year;
  6993  0668  1283               	bcf	3,5	;RP0=0, select bank0
  6994  0669  0842               	movf	_prev_hex_year,w
  6995  066A  00E4               	movwf	??_date_settings
  6996  066B  0864               	movf	??_date_settings,w
  6997  066C  1683               	bsf	3,5	;RP0=1, select bank1
  6998  066D  00AE               	movwf	(_table^(0+128)+6)
  6999                           
  7000                           ;Button_src.c: 490:                   table[3] = prev_hex_day;
  7001  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7002  066F  0843               	movf	_prev_hex_day,w
  7003  0670  2E82               	goto	L3
  7004  0671                     l4165:	
  7005                           ;Button_src.c: 491:               }
  7006                           
  7007  0671  032B               	decf	_stats,w
  7008  0672  042C               	iorwf	_stats+1,w
  7009  0673  1D03               	btfss	3,2
  7010  0674  2E86               	goto	l4169
  7011                           
  7012                           ;Button_src.c: 493:               {;Button_src.c: 494:                  table[4]= a;
  7013  0675  0849               	movf	_a,w
  7014  0676  00E4               	movwf	??_date_settings
  7015  0677  0864               	movf	??_date_settings,w
  7016  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7017  0679  00AC               	movwf	(_table^(0+128)+4)
  7018                           
  7019                           ;Button_src.c: 495:                  table[6] = c;
  7020  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7021  067B  0847               	movf	_c,w
  7022  067C  00E4               	movwf	??_date_settings
  7023  067D  0864               	movf	??_date_settings,w
  7024  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7025  067F  00AE               	movwf	(_table^(0+128)+6)
  7026                           
  7027                           ;Button_src.c: 496:                  table[3] = day_hex;
  7028  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7029  0681  0846               	movf	_day_hex,w
  7030  0682                     L3:	
  7031  0682  00E4               	movwf	??_date_settings
  7032  0683  0864               	movf	??_date_settings,w
  7033  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7034  0685  00AB               	movwf	(_table^(0+128)+3)
  7035  0686                     l4169:	
  7036                           
  7037                           ;Button_src.c: 499:              write_cmd(0x88);
  7038  0686  3088               	movlw	136
  7039  0687  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  7040                           
  7041                           ;Button_src.c: 501:                   RC0 = 0;
  7042  068C  1007               	bcf	7,0	;volatile
  7043                           
  7044                           ;Button_src.c: 502:                   RC1 = 1;
  7045  068D  1487               	bsf	7,1	;volatile
  7046                           
  7047                           ;Button_src.c: 503:                   RC2 = 1;
  7048  068E  1507               	bsf	7,2	;volatile
  7049                           
  7050                           ;Button_src.c: 504:                   RC3 = 1;
  7051  068F  1587               	bsf	7,3	;volatile
  7052                           
  7053                           ;Button_src.c: 506:                     if (RC6 == 0 ){
  7054  0690  1B07               	btfsc	7,6	;volatile
  7055  0691  2EAB               	goto	l741
  7056                           
  7057                           ;Button_src.c: 507:                           a = 0x00;
  7058  0692  01C9               	clrf	_a
  7059                           
  7060                           ;Button_src.c: 508:                           c = 0x00;
  7061  0693  01C7               	clrf	_c
  7062                           
  7063                           ;Button_src.c: 509:                           day_hex = 0x00;
  7064  0694  01C6               	clrf	_day_hex
  7065                           
  7066                           ;Button_src.c: 510:                           day_high = 0;
  7067  0695  01AD               	clrf	_day_high
  7068  0696  01AE               	clrf	_day_high+1
  7069                           
  7070                           ;Button_src.c: 511:                           day_low = 0;
  7071  0697  01AF               	clrf	_day_low
  7072  0698  01B0               	clrf	_day_low+1
  7073                           
  7074                           ;Button_src.c: 512:                           x = 0;
  7075  0699  01B5               	clrf	_x
  7076  069A  01B6               	clrf	_x+1
  7077                           
  7078                           ;Button_src.c: 513:                           y = 0;
  7079  069B  01B3               	clrf	_y
  7080  069C  01B4               	clrf	_y+1
  7081                           
  7082                           ;Button_src.c: 514:                           w = 0;
  7083  069D  01B7               	clrf	_w
  7084  069E  01B8               	clrf	_w+1
  7085                           
  7086                           ;Button_src.c: 515:                           t = 0;
  7087  069F  01B9               	clrf	_t
  7088  06A0  01BA               	clrf	_t+1
  7089                           
  7090                           ;Button_src.c: 516:                           write_cmd(0x1);
  7091  06A1  3001               	movlw	1
  7092  06A2  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  7093                           
  7094                           ;Button_src.c: 517:                           set_time();
  7095  06A7  160A  118A  25C3   	fcall	_set_time
  7096  06AA  0008               	return
  7097  06AB                     l741:	
  7098                           ;Button_src.c: 519:                             }
  7099                           
  7100                           
  7101                           ;Button_src.c: 520:                   RC0 = 0;
  7102  06AB  1007               	bcf	7,0	;volatile
  7103                           
  7104                           ;Button_src.c: 521:                   RC1 = 1;
  7105  06AC  1487               	bsf	7,1	;volatile
  7106                           
  7107                           ;Button_src.c: 522:                   RC2 = 1;
  7108  06AD  1507               	bsf	7,2	;volatile
  7109                           
  7110                           ;Button_src.c: 523:                   RC3 = 1;
  7111  06AE  1587               	bsf	7,3	;volatile
  7112                           
  7113                           ;Button_src.c: 524:                   z = modulus_func(z,3);
  7114  06AF  0832               	movf	_z+1,w
  7115  06B0  00F8               	movwf	modulus_func@x+1
  7116  06B1  0831               	movf	_z,w
  7117  06B2  00F7               	movwf	modulus_func@x
  7118  06B3  3003               	movlw	3
  7119  06B4  00F9               	movwf	modulus_func@y
  7120  06B5  3000               	movlw	0
  7121  06B6  00FA               	movwf	modulus_func@y+1
  7122  06B7  160A  118A  2434  120A  118A  	fcall	_modulus_func
  7123  06BC  0878               	movf	?_modulus_func+1,w
  7124  06BD  00B2               	movwf	_z+1
  7125  06BE  0877               	movf	?_modulus_func,w
  7126  06BF  00B1               	movwf	_z
  7127                           
  7128                           ;Button_src.c: 525:                   if(RC4 == 0 && z ==0){
  7129  06C0  1A07               	btfsc	7,4	;volatile
  7130  06C1  2F01               	goto	l4201
  7131  06C2  0831               	movf	_z,w
  7132  06C3  0432               	iorwf	_z+1,w
  7133  06C4  1D03               	btfss	3,2
  7134  06C5  2F01               	goto	l4201
  7135                           
  7136                           ;Button_src.c: 526:                       write_cmd(0x90);
  7137  06C6  3090               	movlw	144
  7138  06C7  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  7139                           
  7140                           ;Button_src.c: 527:                       write_char('D');
  7141  06CC  3044               	movlw	68
  7142  06CD  160A  118A  24A5  120A  118A  	fcall	_write_char
  7143                           
  7144                           ;Button_src.c: 528:                       write_char('a');
  7145  06D2  3061               	movlw	97
  7146  06D3  160A  118A  24A5  120A  118A  	fcall	_write_char
  7147                           
  7148                           ;Button_src.c: 529:                       write_char('y');
  7149  06D8  3079               	movlw	121
  7150  06D9  160A  118A  24A5  120A  118A  	fcall	_write_char
  7151                           
  7152                           ;Button_src.c: 530:                       write_char(':');
  7153  06DE  303A               	movlw	58
  7154  06DF  160A  118A  24A5  120A  118A  	fcall	_write_char
  7155                           
  7156                           ;Button_src.c: 531:                       write_char(' ');
  7157  06E4  3020               	movlw	32
  7158  06E5  160A  118A  24A5  120A  118A  	fcall	_write_char
  7159                           
  7160                           ;Button_src.c: 532:                       write_char(' ');
  7161  06EA  3020               	movlw	32
  7162  06EB  160A  118A  24A5  120A  118A  	fcall	_write_char
  7163                           
  7164                           ;Button_src.c: 533:                       b = 'y';
  7165  06F0  3079               	movlw	121
  7166  06F1  00E4               	movwf	??_date_settings
  7167  06F2  0864               	movf	??_date_settings,w
  7168  06F3  00C8               	movwf	_b
  7169                           
  7170                           ;Button_src.c: 535:                       button_delay();
  7171  06F4  160A  118A  2455  120A  118A  	fcall	_button_delay
  7172                           
  7173                           ;Button_src.c: 536:                       z++;
  7174  06F9  3001               	movlw	1
  7175  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7176  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7177  06FC  07B1               	addwf	_z,f
  7178  06FD  1803               	skipnc
  7179  06FE  0AB2               	incf	_z+1,f
  7180  06FF  3000               	movlw	0
  7181  0700  07B2               	addwf	_z+1,f
  7182  0701                     l4201:	
  7183                           
  7184                           ;Button_src.c: 538:                   RC0 = 0;
  7185  0701  1007               	bcf	7,0	;volatile
  7186                           
  7187                           ;Button_src.c: 539:                   RC1 = 1;
  7188  0702  1487               	bsf	7,1	;volatile
  7189                           
  7190                           ;Button_src.c: 540:                   RC2 = 1;
  7191  0703  1507               	bsf	7,2	;volatile
  7192                           
  7193                           ;Button_src.c: 541:                   RC3 = 1;
  7194  0704  1587               	bsf	7,3	;volatile
  7195                           
  7196                           ;Button_src.c: 542:                   if(RC4 == 0&& z ==1){
  7197  0705  1A07               	btfsc	7,4	;volatile
  7198  0706  2F44               	goto	l4231
  7199  0707  0331               	decf	_z,w
  7200  0708  0432               	iorwf	_z+1,w
  7201  0709  1D03               	btfss	3,2
  7202  070A  2F44               	goto	l4231
  7203                           
  7204                           ;Button_src.c: 543:                       z++;
  7205  070B  3001               	movlw	1
  7206  070C  07B1               	addwf	_z,f
  7207  070D  1803               	skipnc
  7208  070E  0AB2               	incf	_z+1,f
  7209  070F  3000               	movlw	0
  7210  0710  07B2               	addwf	_z+1,f
  7211                           
  7212                           ;Button_src.c: 544:                       button_delay();
  7213  0711  160A  118A  2455  120A  118A  	fcall	_button_delay
  7214                           
  7215                           ;Button_src.c: 546:                       write_cmd(0x90);
  7216  0716  3090               	movlw	144
  7217  0717  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  7218                           
  7219                           ;Button_src.c: 547:                       write_char('M');
  7220  071C  304D               	movlw	77
  7221  071D  160A  118A  24A5  120A  118A  	fcall	_write_char
  7222                           
  7223                           ;Button_src.c: 548:                       write_char('o');
  7224  0722  306F               	movlw	111
  7225  0723  160A  118A  24A5  120A  118A  	fcall	_write_char
  7226                           
  7227                           ;Button_src.c: 549:                       write_char('n');
  7228  0728  306E               	movlw	110
  7229  0729  160A  118A  24A5  120A  118A  	fcall	_write_char
  7230                           
  7231                           ;Button_src.c: 550:                       write_char('t');
  7232  072E  3074               	movlw	116
  7233  072F  160A  118A  24A5  120A  118A  	fcall	_write_char
  7234                           
  7235                           ;Button_src.c: 551:                       write_char('h');
  7236  0734  3068               	movlw	104
  7237  0735  160A  118A  24A5  120A  118A  	fcall	_write_char
  7238                           
  7239                           ;Button_src.c: 552:                       write_char(':');
  7240  073A  303A               	movlw	58
  7241  073B  160A  118A  24A5  120A  118A  	fcall	_write_char
  7242                           
  7243                           ;Button_src.c: 553:                       b = 'x';
  7244  0740  3078               	movlw	120
  7245  0741  00E4               	movwf	??_date_settings
  7246  0742  0864               	movf	??_date_settings,w
  7247  0743  00C8               	movwf	_b
  7248  0744                     l4231:	
  7249                           
  7250                           ;Button_src.c: 556:                   RC0 = 0;
  7251  0744  1007               	bcf	7,0	;volatile
  7252                           
  7253                           ;Button_src.c: 557:                   RC1 = 1;
  7254  0745  1487               	bsf	7,1	;volatile
  7255                           
  7256                           ;Button_src.c: 558:                   RC2 = 1;
  7257  0746  1507               	bsf	7,2	;volatile
  7258                           
  7259                           ;Button_src.c: 559:                   RC3 = 1;
  7260  0747  1587               	bsf	7,3	;volatile
  7261                           
  7262                           ;Button_src.c: 560:                   if(RC4 == 0&& z ==2){
  7263  0748  1A07               	btfsc	7,4	;volatile
  7264  0749  2F8A               	goto	l4261
  7265  074A  3002               	movlw	2
  7266  074B  0631               	xorwf	_z,w
  7267  074C  0432               	iorwf	_z+1,w
  7268  074D  1D03               	btfss	3,2
  7269  074E  2F8A               	goto	l4261
  7270                           
  7271                           ;Button_src.c: 561:                       button_delay();
  7272  074F  160A  118A  2455  120A  118A  	fcall	_button_delay
  7273                           
  7274                           ;Button_src.c: 562:                       z++;
  7275  0754  3001               	movlw	1
  7276  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7277  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7278  0757  07B1               	addwf	_z,f
  7279  0758  1803               	skipnc
  7280  0759  0AB2               	incf	_z+1,f
  7281  075A  3000               	movlw	0
  7282  075B  07B2               	addwf	_z+1,f
  7283                           
  7284                           ;Button_src.c: 564:                       write_cmd(0x90);
  7285  075C  3090               	movlw	144
  7286  075D  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  7287                           
  7288                           ;Button_src.c: 565:                       write_char('Y');
  7289  0762  3059               	movlw	89
  7290  0763  160A  118A  24A5  120A  118A  	fcall	_write_char
  7291                           
  7292                           ;Button_src.c: 566:                       write_char('e');
  7293  0768  3065               	movlw	101
  7294  0769  160A  118A  24A5  120A  118A  	fcall	_write_char
  7295                           
  7296                           ;Button_src.c: 567:                       write_char('a');
  7297  076E  3061               	movlw	97
  7298  076F  160A  118A  24A5  120A  118A  	fcall	_write_char
  7299                           
  7300                           ;Button_src.c: 568:                       write_char('r');
  7301  0774  3072               	movlw	114
  7302  0775  160A  118A  24A5  120A  118A  	fcall	_write_char
  7303                           
  7304                           ;Button_src.c: 569:                       write_char(':');
  7305  077A  303A               	movlw	58
  7306  077B  160A  118A  24A5  120A  118A  	fcall	_write_char
  7307                           
  7308                           ;Button_src.c: 570:                       write_char(' ');
  7309  0780  3020               	movlw	32
  7310  0781  160A  118A  24A5  120A  118A  	fcall	_write_char
  7311                           
  7312                           ;Button_src.c: 571:                       b = 'z';
  7313  0786  307A               	movlw	122
  7314  0787  00E4               	movwf	??_date_settings
  7315  0788  0864               	movf	??_date_settings,w
  7316  0789  00C8               	movwf	_b
  7317  078A                     l4261:	
  7318                           
  7319                           ;Button_src.c: 574:               write_cmd(0x88);
  7320  078A  3088               	movlw	136
  7321  078B  160A  118A  24BC  120A  118A  	fcall	_write_cmd
  7322                           
  7323                           ;Button_src.c: 575:               write_char(day_high + '0');
  7324  0790  082D               	movf	_day_high,w
  7325  0791  3E30               	addlw	48
  7326  0792  160A  118A  24A5  120A  118A  	fcall	_write_char
  7327                           
  7328                           ;Button_src.c: 576:               write_char(day_low + '0');
  7329  0797  082F               	movf	_day_low,w
  7330  0798  3E30               	addlw	48
  7331  0799  160A  118A  24A5  120A  118A  	fcall	_write_char
  7332                           
  7333                           ;Button_src.c: 577:               write_char('/');
  7334  079E  302F               	movlw	47
  7335  079F  160A  118A  24A5  120A  118A  	fcall	_write_char
  7336                           
  7337                           ;Button_src.c: 578:               write_char(y + '0');
  7338  07A4  0833               	movf	_y,w
  7339  07A5  3E30               	addlw	48
  7340  07A6  160A  118A  24A5  120A  118A  	fcall	_write_char
  7341                           
  7342                           ;Button_src.c: 579:               write_char(x + '0');
  7343  07AB  0835               	movf	_x,w
  7344  07AC  3E30               	addlw	48
  7345  07AD  160A  118A  24A5  120A  118A  	fcall	_write_char
  7346                           
  7347                           ;Button_src.c: 580:               write_char('/');
  7348  07B2  302F               	movlw	47
  7349  07B3  160A  118A  24A5  120A  118A  	fcall	_write_char
  7350                           
  7351                           ;Button_src.c: 581:               write_char(w+ '0');
  7352  07B8  0837               	movf	_w,w
  7353  07B9  3E30               	addlw	48
  7354  07BA  160A  118A  24A5  120A  118A  	fcall	_write_char
  7355                           
  7356                           ;Button_src.c: 582:               write_char(t+ '0');
  7357  07BF  0839               	movf	_t,w
  7358  07C0  3E30               	addlw	48
  7359  07C1  160A  118A  24A5  120A  118A  	fcall	_write_char
  7360                           
  7361                           ;Button_src.c: 585:             RC0 = 0;
  7362  07C6  1007               	bcf	7,0	;volatile
  7363                           
  7364                           ;Button_src.c: 586:             RC1 = 1;
  7365  07C7  1487               	bsf	7,1	;volatile
  7366                           
  7367                           ;Button_src.c: 587:             RC2 = 1;
  7368  07C8  1507               	bsf	7,2	;volatile
  7369                           
  7370                           ;Button_src.c: 588:             RC3 = 1;
  7371  07C9  1587               	bsf	7,3	;volatile
  7372                           
  7373                           ;Button_src.c: 589:             if (RC7 == 0 ){
  7374  07CA  1B87               	btfsc	7,7	;volatile
  7375  07CB  2B95               	goto	l718
  7376                           
  7377                           ;Button_src.c: 590:             a = 0x00;
  7378  07CC  01C9               	clrf	_a
  7379                           
  7380                           ;Button_src.c: 591:             c = 0x00;
  7381  07CD  01C7               	clrf	_c
  7382                           
  7383                           ;Button_src.c: 592:             day_hex = 0x00;
  7384  07CE  01C6               	clrf	_day_hex
  7385                           
  7386                           ;Button_src.c: 593:             x = 0;
  7387  07CF  01B5               	clrf	_x
  7388  07D0  01B6               	clrf	_x+1
  7389                           
  7390                           ;Button_src.c: 594:             y = 0;
  7391  07D1  01B3               	clrf	_y
  7392  07D2  01B4               	clrf	_y+1
  7393                           
  7394                           ;Button_src.c: 595:             w = 0;
  7395  07D3  01B7               	clrf	_w
  7396  07D4  01B8               	clrf	_w+1
  7397                           
  7398                           ;Button_src.c: 596:             t = 0;
  7399  07D5  01B9               	clrf	_t
  7400  07D6  01BA               	clrf	_t+1
  7401                           
  7402                           ;Button_src.c: 597:             day_high = 0;
  7403  07D7  01AD               	clrf	_day_high
  7404  07D8  01AE               	clrf	_day_high+1
  7405                           
  7406                           ;Button_src.c: 598:             day_low = 0;
  7407  07D9  01AF               	clrf	_day_low
  7408  07DA  01B0               	clrf	_day_low+1
  7409                           
  7410                           ;Button_src.c: 599:             write_cmd(0x1);
  7411  07DB  3001               	movlw	1
  7412  07DC  160A  118A  24BC   	fcall	_write_cmd
  7413                           
  7414                           ;Button_src.c: 600:             break;
  7415  07DF  0008               	return
  7416  07E0                     __end_of_date_settings:	
  7417                           
  7418                           	psect	text30
  7419  14BC                     __ptext30:	
  7420 ;; *************** function _write_cmd *****************
  7421 ;; Defined at:
  7422 ;;		line 41 in file "LCD_src.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;  x               1    wreg     unsigned char 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  x               1    2[COMMON] unsigned char 
  7427 ;;  i               2    0        int 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 300/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7437 ;;      Params:         0       0       0       0       0
  7438 ;;      Locals:         1       0       0       0       0
  7439 ;;      Temps:          0       0       0       0       0
  7440 ;;      Totals:         1       0       0       0       0
  7441 ;;Total ram usage:        1 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    1
  7444 ;; This function calls:
  7445 ;;		_delay_screen
  7446 ;; This function is called by:
  7447 ;;		_main
  7448 ;;		_lcd_init
  7449 ;;		_thermometer_threshhold_settings
  7450 ;;		_time_settings
  7451 ;;		_date_settings
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           
  7456                           ;psect for function _write_cmd
  7457  14BC                     _write_cmd:	
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7461                           ;write_cmd@x stored from wreg
  7462  14BC  00F2               	movwf	write_cmd@x
  7463                           
  7464                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7465  14BD  1283               	bcf	3,5	;RP0=0, select bank0
  7466  14BE  1303               	bcf	3,6	;RP1=0, select bank0
  7467  14BF  1285               	bcf	5,5	;volatile
  7468                           
  7469                           ;LCD_src.c: 45:  RA4=0;
  7470  14C0  1205               	bcf	5,4	;volatile
  7471                           
  7472                           ;LCD_src.c: 46:  RA3=0;
  7473  14C1  1185               	bcf	5,3	;volatile
  7474                           
  7475                           ;LCD_src.c: 47:  delay_screen();
  7476  14C2  160A  118A  2469  160A  118A  	fcall	_delay_screen
  7477                           
  7478                           ;LCD_src.c: 48:  RA3=1;
  7479  14C7  1283               	bcf	3,5	;RP0=0, select bank0
  7480  14C8  1303               	bcf	3,6	;RP1=0, select bank0
  7481  14C9  1585               	bsf	5,3	;volatile
  7482                           
  7483                           ;LCD_src.c: 49:  PORTD=x;
  7484  14CA  0872               	movf	write_cmd@x,w
  7485  14CB  0088               	movwf	8	;volatile
  7486                           
  7487                           ;LCD_src.c: 50:  delay_screen();
  7488  14CC  160A  118A  2469   	fcall	_delay_screen
  7489                           
  7490                           ;LCD_src.c: 51:  RA3=0;
  7491  14CF  1283               	bcf	3,5	;RP0=0, select bank0
  7492  14D0  1303               	bcf	3,6	;RP1=0, select bank0
  7493  14D1  1185               	bcf	5,3	;volatile
  7494  14D2  0008               	return
  7495  14D3                     __end_of_write_cmd:	
  7496                           
  7497                           	psect	text31
  7498  14A5                     __ptext31:	
  7499 ;; *************** function _write_char *****************
  7500 ;; Defined at:
  7501 ;;		line 28 in file "LCD_src.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;  x               1    wreg     unsigned char 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  x               1    2[COMMON] unsigned char 
  7506 ;;  i               2    0        int 
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  1    wreg      void 
  7509 ;; Registers used:
  7510 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 300/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7516 ;;      Params:         0       0       0       0       0
  7517 ;;      Locals:         1       0       0       0       0
  7518 ;;      Temps:          0       0       0       0       0
  7519 ;;      Totals:         1       0       0       0       0
  7520 ;;Total ram usage:        1 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    1
  7523 ;; This function calls:
  7524 ;;		_delay_screen
  7525 ;; This function is called by:
  7526 ;;		_main
  7527 ;;		_display_temp
  7528 ;;		_display_clock
  7529 ;;		_display_date
  7530 ;;		_thermometer_threshhold_settings
  7531 ;;		_time_settings
  7532 ;;		_date_settings
  7533 ;;		_set_upper_threshold
  7534 ;;		_set_lower_threshold
  7535 ;;		_reset_alarm
  7536 ;;		_display_day
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           
  7541                           ;psect for function _write_char
  7542  14A5                     _write_char:	
  7543                           
  7544                           ;incstack = 0
  7545                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7546                           ;write_char@x stored from wreg
  7547  14A5  00F2               	movwf	write_char@x
  7548                           
  7549                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7550  14A6  1283               	bcf	3,5	;RP0=0, select bank0
  7551  14A7  1303               	bcf	3,6	;RP1=0, select bank0
  7552  14A8  1685               	bsf	5,5	;volatile
  7553                           
  7554                           ;LCD_src.c: 32:  RA4=0;
  7555  14A9  1205               	bcf	5,4	;volatile
  7556                           
  7557                           ;LCD_src.c: 33:  RA3=0;
  7558  14AA  1185               	bcf	5,3	;volatile
  7559                           
  7560                           ;LCD_src.c: 34:  delay_screen();
  7561  14AB  160A  118A  2469  160A  118A  	fcall	_delay_screen
  7562                           
  7563                           ;LCD_src.c: 35:  RA3=1;
  7564  14B0  1283               	bcf	3,5	;RP0=0, select bank0
  7565  14B1  1303               	bcf	3,6	;RP1=0, select bank0
  7566  14B2  1585               	bsf	5,3	;volatile
  7567                           
  7568                           ;LCD_src.c: 36:  PORTD= x;
  7569  14B3  0872               	movf	write_char@x,w
  7570  14B4  0088               	movwf	8	;volatile
  7571                           
  7572                           ;LCD_src.c: 37:  delay_screen();
  7573  14B5  160A  118A  2469   	fcall	_delay_screen
  7574                           
  7575                           ;LCD_src.c: 38:  RA3=0;
  7576  14B8  1283               	bcf	3,5	;RP0=0, select bank0
  7577  14B9  1303               	bcf	3,6	;RP1=0, select bank0
  7578  14BA  1185               	bcf	5,3	;volatile
  7579  14BB  0008               	return
  7580  14BC                     __end_of_write_char:	
  7581                           
  7582                           	psect	text32
  7583  1469                     __ptext32:	
  7584 ;; *************** function _delay_screen *****************
  7585 ;; Defined at:
  7586 ;;		line 70 in file "LCD_src.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  i               2    0[COMMON] int 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      void 
  7593 ;; Registers used:
  7594 ;;		wreg, status,2, btemp+1
  7595 ;; Tracked objects:
  7596 ;;		On entry : 300/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7600 ;;      Params:         0       0       0       0       0
  7601 ;;      Locals:         2       0       0       0       0
  7602 ;;      Temps:          0       0       0       0       0
  7603 ;;      Totals:         2       0       0       0       0
  7604 ;;Total ram usage:        2 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; This function calls:
  7607 ;;		Nothing
  7608 ;; This function is called by:
  7609 ;;		_lcd_init
  7610 ;;		_write_char
  7611 ;;		_write_cmd
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           
  7616                           ;psect for function _delay_screen
  7617  1469                     _delay_screen:	
  7618                           
  7619                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7620                           
  7621                           ;incstack = 0
  7622                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7623  1469  01F0               	clrf	delay_screen@i
  7624  146A  01F1               	clrf	delay_screen@i+1
  7625  146B                     l3167:	
  7626  146B  3001               	movlw	1
  7627  146C  07F0               	addwf	delay_screen@i,f
  7628  146D  1803               	skipnc
  7629  146E  0AF1               	incf	delay_screen@i+1,f
  7630  146F  3000               	movlw	0
  7631  1470  07F1               	addwf	delay_screen@i+1,f
  7632  1471  0871               	movf	delay_screen@i+1,w
  7633  1472  3A80               	xorlw	128
  7634  1473  00FF               	movwf	127
  7635  1474  3080               	movlw	128
  7636  1475  027F               	subwf	127,w
  7637  1476  1D03               	skipz
  7638  1477  2C7A               	goto	u2055
  7639  1478  3005               	movlw	5
  7640  1479  0270               	subwf	delay_screen@i,w
  7641  147A                     u2055:	
  7642  147A  1803               	btfsc	3,0
  7643  147B  0008               	return
  7644  147C  2C6B               	goto	l3167
  7645  147D                     __end_of_delay_screen:	
  7646                           
  7647                           	psect	text33
  7648  1416                     __ptext33:	
  7649 ;; *************** function _time_date_hex_terminator *****************
  7650 ;; Defined at:
  7651 ;;		line 87 in file "math_src.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  val             1    wreg     unsigned char 
  7654 ;;  limiter         1    0[COMMON] unsigned char 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  val             1    3[COMMON] unsigned char 
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      unsigned char 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2
  7661 ;; Tracked objects:
  7662 ;;		On entry : 300/0
  7663 ;;		On exit  : 300/0
  7664 ;;		Unchanged: 300/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7666 ;;      Params:         1       0       0       0       0
  7667 ;;      Locals:         1       0       0       0       0
  7668 ;;      Temps:          2       0       0       0       0
  7669 ;;      Totals:         4       0       0       0       0
  7670 ;;Total ram usage:        4 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; This function calls:
  7673 ;;		Nothing
  7674 ;; This function is called by:
  7675 ;;		_time_settings
  7676 ;;		_date_settings
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           
  7681                           ;psect for function _time_date_hex_terminator
  7682  1416                     _time_date_hex_terminator:	
  7683                           
  7684                           ;incstack = 0
  7685                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7686                           ;time_date_hex_terminator@val stored from wreg
  7687  1416  00F3               	movwf	time_date_hex_terminator@val
  7688                           
  7689                           ;math_src.c: 88:     if((val + '0') == limiter){
  7690  1417  0873               	movf	time_date_hex_terminator@val,w
  7691  1418  3E30               	addlw	48
  7692  1419  00F1               	movwf	??_time_date_hex_terminator
  7693  141A  3000               	movlw	0
  7694  141B  1803               	skipnc
  7695  141C  3001               	movlw	1
  7696  141D  00F2               	movwf	??_time_date_hex_terminator+1
  7697  141E  0870               	movf	time_date_hex_terminator@limiter,w
  7698  141F  0671               	xorwf	??_time_date_hex_terminator,w
  7699  1420  0472               	iorwf	??_time_date_hex_terminator+1,w
  7700  1421  1903               	btfsc	3,2
  7701                           
  7702                           ;math_src.c: 89:     val = 0x00;
  7703  1422  01F3               	clrf	time_date_hex_terminator@val
  7704                           
  7705                           ;math_src.c: 91:     return val;
  7706  1423  0873               	movf	time_date_hex_terminator@val,w
  7707  1424  0008               	return
  7708  1425                     __end_of_time_date_hex_terminator:	
  7709                           
  7710                           	psect	text34
  7711  0ABB                     __ptext34:	
  7712 ;; *************** function _time_date_delimiter *****************
  7713 ;; Defined at:
  7714 ;;		line 28 in file "math_src.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  val             1    wreg     unsigned char 
  7717 ;;  hex             1    0[COMMON] unsigned char 
  7718 ;;  limiter         1    1[COMMON] unsigned char 
  7719 ;;  type            2    2[COMMON] int 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  val             1    6[COMMON] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      unsigned char 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0
  7726 ;; Tracked objects:
  7727 ;;		On entry : 300/0
  7728 ;;		On exit  : 300/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7731 ;;      Params:         4       0       0       0       0
  7732 ;;      Locals:         1       0       0       0       0
  7733 ;;      Temps:          2       0       0       0       0
  7734 ;;      Totals:         7       0       0       0       0
  7735 ;;Total ram usage:        7 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		_time_settings
  7741 ;;		_date_settings
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           
  7746                           ;psect for function _time_date_delimiter
  7747  0ABB                     _time_date_delimiter:	
  7748                           
  7749                           ;incstack = 0
  7750                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7751                           ;time_date_delimiter@val stored from wreg
  7752  0ABB  00F6               	movwf	time_date_delimiter@val
  7753                           
  7754                           ;math_src.c: 29:     if((val + '0') == limiter){
  7755  0ABC  0876               	movf	time_date_delimiter@val,w
  7756  0ABD  3E30               	addlw	48
  7757  0ABE  00F4               	movwf	??_time_date_delimiter
  7758  0ABF  3000               	movlw	0
  7759  0AC0  1803               	skipnc
  7760  0AC1  3001               	movlw	1
  7761  0AC2  00F5               	movwf	??_time_date_delimiter+1
  7762  0AC3  0871               	movf	time_date_delimiter@limiter,w
  7763  0AC4  0674               	xorwf	??_time_date_delimiter,w
  7764  0AC5  0475               	iorwf	??_time_date_delimiter+1,w
  7765  0AC6  1D03               	skipz
  7766  0AC7  2C10               	goto	l3573
  7767                           
  7768                           ;math_src.c: 30:     val = hex;
  7769  0AC8  0870               	movf	time_date_delimiter@hex,w
  7770  0AC9  00F4               	movwf	??_time_date_delimiter
  7771  0ACA  0874               	movf	??_time_date_delimiter,w
  7772  0ACB  00F6               	movwf	time_date_delimiter@val
  7773                           
  7774                           ;math_src.c: 31:     stats=0;
  7775  0ACC  01AB               	clrf	_stats
  7776  0ACD  01AC               	clrf	_stats+1
  7777                           
  7778                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7779  0ACE  3039               	movlw	57
  7780  0ACF  0671               	xorwf	time_date_delimiter@limiter,w
  7781  0AD0  1D03               	btfss	3,2
  7782  0AD1  2ADA               	goto	l3427
  7783  0AD2  0372               	decf	time_date_delimiter@type,w
  7784  0AD3  0473               	iorwf	time_date_delimiter@type+1,w
  7785  0AD4  1D03               	btfss	3,2
  7786  0AD5  2ADA               	goto	l3427
  7787                           
  7788                           ;math_src.c: 33:         prev_hex= 0x09;
  7789  0AD6  3009               	movlw	9
  7790  0AD7  00F4               	movwf	??_time_date_delimiter
  7791  0AD8  0874               	movf	??_time_date_delimiter,w
  7792  0AD9  00C4               	movwf	_prev_hex
  7793  0ADA                     l3427:	
  7794                           
  7795                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7796  0ADA  304A               	movlw	74
  7797  0ADB  0671               	xorwf	time_date_delimiter@limiter,w
  7798  0ADC  1D03               	btfss	3,2
  7799  0ADD  2AE6               	goto	l3433
  7800  0ADE  0372               	decf	time_date_delimiter@type,w
  7801  0ADF  0473               	iorwf	time_date_delimiter@type+1,w
  7802  0AE0  1D03               	btfss	3,2
  7803  0AE1  2AE6               	goto	l3433
  7804                           
  7805                           ;math_src.c: 35:         prev_hex = 0x19;
  7806  0AE2  3019               	movlw	25
  7807  0AE3  00F4               	movwf	??_time_date_delimiter
  7808  0AE4  0874               	movf	??_time_date_delimiter,w
  7809  0AE5  00C4               	movwf	_prev_hex
  7810  0AE6                     l3433:	
  7811                           
  7812                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7813  0AE6  3059               	movlw	89
  7814  0AE7  0671               	xorwf	time_date_delimiter@limiter,w
  7815  0AE8  1D03               	btfss	3,2
  7816  0AE9  2AF2               	goto	l3439
  7817  0AEA  0372               	decf	time_date_delimiter@type,w
  7818  0AEB  0473               	iorwf	time_date_delimiter@type+1,w
  7819  0AEC  1D03               	btfss	3,2
  7820  0AED  2AF2               	goto	l3439
  7821                           
  7822                           ;math_src.c: 37:         prev_hex = 0x29;
  7823  0AEE  3029               	movlw	41
  7824  0AEF  00F4               	movwf	??_time_date_delimiter
  7825  0AF0  0874               	movf	??_time_date_delimiter,w
  7826  0AF1  00C4               	movwf	_prev_hex
  7827  0AF2                     l3439:	
  7828                           
  7829                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7830  0AF2  306A               	movlw	106
  7831  0AF3  0671               	xorwf	time_date_delimiter@limiter,w
  7832  0AF4  1D03               	btfss	3,2
  7833  0AF5  2AFE               	goto	l3445
  7834  0AF6  0372               	decf	time_date_delimiter@type,w
  7835  0AF7  0473               	iorwf	time_date_delimiter@type+1,w
  7836  0AF8  1D03               	btfss	3,2
  7837  0AF9  2AFE               	goto	l3445
  7838                           
  7839                           ;math_src.c: 39:         prev_hex =0x39;
  7840  0AFA  3039               	movlw	57
  7841  0AFB  00F4               	movwf	??_time_date_delimiter
  7842  0AFC  0874               	movf	??_time_date_delimiter,w
  7843  0AFD  00C4               	movwf	_prev_hex
  7844  0AFE                     l3445:	
  7845                           
  7846                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7847  0AFE  307A               	movlw	122
  7848  0AFF  0671               	xorwf	time_date_delimiter@limiter,w
  7849  0B00  1D03               	btfss	3,2
  7850  0B01  2B0A               	goto	l3451
  7851  0B02  0372               	decf	time_date_delimiter@type,w
  7852  0B03  0473               	iorwf	time_date_delimiter@type+1,w
  7853  0B04  1D03               	btfss	3,2
  7854  0B05  2B0A               	goto	l3451
  7855                           
  7856                           ;math_src.c: 41:         prev_hex = 0x49;
  7857  0B06  3049               	movlw	73
  7858  0B07  00F4               	movwf	??_time_date_delimiter
  7859  0B08  0874               	movf	??_time_date_delimiter,w
  7860  0B09  00C4               	movwf	_prev_hex
  7861  0B0A                     l3451:	
  7862                           
  7863                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7864  0B0A  3039               	movlw	57
  7865  0B0B  0671               	xorwf	time_date_delimiter@limiter,w
  7866  0B0C  1D03               	btfss	3,2
  7867  0B0D  2B17               	goto	l3457
  7868  0B0E  3002               	movlw	2
  7869  0B0F  0672               	xorwf	time_date_delimiter@type,w
  7870  0B10  0473               	iorwf	time_date_delimiter@type+1,w
  7871  0B11  1D03               	btfss	3,2
  7872  0B12  2B17               	goto	l3457
  7873                           
  7874                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7875  0B13  3009               	movlw	9
  7876  0B14  00F4               	movwf	??_time_date_delimiter
  7877  0B15  0874               	movf	??_time_date_delimiter,w
  7878  0B16  00C3               	movwf	_prev_hex_day
  7879  0B17                     l3457:	
  7880                           
  7881                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7882  0B17  304A               	movlw	74
  7883  0B18  0671               	xorwf	time_date_delimiter@limiter,w
  7884  0B19  1D03               	btfss	3,2
  7885  0B1A  2B24               	goto	l3463
  7886  0B1B  3002               	movlw	2
  7887  0B1C  0672               	xorwf	time_date_delimiter@type,w
  7888  0B1D  0473               	iorwf	time_date_delimiter@type+1,w
  7889  0B1E  1D03               	btfss	3,2
  7890  0B1F  2B24               	goto	l3463
  7891                           
  7892                           ;math_src.c: 45:         prev_hex_day = 0x19;
  7893  0B20  3019               	movlw	25
  7894  0B21  00F4               	movwf	??_time_date_delimiter
  7895  0B22  0874               	movf	??_time_date_delimiter,w
  7896  0B23  00C3               	movwf	_prev_hex_day
  7897  0B24                     l3463:	
  7898                           
  7899                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  7900  0B24  3059               	movlw	89
  7901  0B25  0671               	xorwf	time_date_delimiter@limiter,w
  7902  0B26  1D03               	btfss	3,2
  7903  0B27  2B31               	goto	l3469
  7904  0B28  3002               	movlw	2
  7905  0B29  0672               	xorwf	time_date_delimiter@type,w
  7906  0B2A  0473               	iorwf	time_date_delimiter@type+1,w
  7907  0B2B  1D03               	btfss	3,2
  7908  0B2C  2B31               	goto	l3469
  7909                           
  7910                           ;math_src.c: 47:         prev_hex_day = 0x29;
  7911  0B2D  3029               	movlw	41
  7912  0B2E  00F4               	movwf	??_time_date_delimiter
  7913  0B2F  0874               	movf	??_time_date_delimiter,w
  7914  0B30  00C3               	movwf	_prev_hex_day
  7915  0B31                     l3469:	
  7916                           
  7917                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  7918  0B31  306A               	movlw	106
  7919  0B32  0671               	xorwf	time_date_delimiter@limiter,w
  7920  0B33  1D03               	btfss	3,2
  7921  0B34  2B3E               	goto	l3475
  7922  0B35  3002               	movlw	2
  7923  0B36  0672               	xorwf	time_date_delimiter@type,w
  7924  0B37  0473               	iorwf	time_date_delimiter@type+1,w
  7925  0B38  1D03               	btfss	3,2
  7926  0B39  2B3E               	goto	l3475
  7927                           
  7928                           ;math_src.c: 49:         prev_hex_day =0x39;
  7929  0B3A  3039               	movlw	57
  7930  0B3B  00F4               	movwf	??_time_date_delimiter
  7931  0B3C  0874               	movf	??_time_date_delimiter,w
  7932  0B3D  00C3               	movwf	_prev_hex_day
  7933  0B3E                     l3475:	
  7934                           
  7935                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  7936  0B3E  307A               	movlw	122
  7937  0B3F  0671               	xorwf	time_date_delimiter@limiter,w
  7938  0B40  1D03               	btfss	3,2
  7939  0B41  2B4B               	goto	l3481
  7940  0B42  3002               	movlw	2
  7941  0B43  0672               	xorwf	time_date_delimiter@type,w
  7942  0B44  0473               	iorwf	time_date_delimiter@type+1,w
  7943  0B45  1D03               	btfss	3,2
  7944  0B46  2B4B               	goto	l3481
  7945                           
  7946                           ;math_src.c: 51:         prev_hex_day = 0x49;
  7947  0B47  3049               	movlw	73
  7948  0B48  00F4               	movwf	??_time_date_delimiter
  7949  0B49  0874               	movf	??_time_date_delimiter,w
  7950  0B4A  00C3               	movwf	_prev_hex_day
  7951  0B4B                     l3481:	
  7952                           
  7953                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  7954  0B4B  3039               	movlw	57
  7955  0B4C  0671               	xorwf	time_date_delimiter@limiter,w
  7956  0B4D  1D03               	btfss	3,2
  7957  0B4E  2B58               	goto	l3487
  7958  0B4F  3003               	movlw	3
  7959  0B50  0672               	xorwf	time_date_delimiter@type,w
  7960  0B51  0473               	iorwf	time_date_delimiter@type+1,w
  7961  0B52  1D03               	btfss	3,2
  7962  0B53  2B58               	goto	l3487
  7963                           
  7964                           ;math_src.c: 53:         prev_hex_year= 0x09;
  7965  0B54  3009               	movlw	9
  7966  0B55  00F4               	movwf	??_time_date_delimiter
  7967  0B56  0874               	movf	??_time_date_delimiter,w
  7968  0B57  00C2               	movwf	_prev_hex_year
  7969  0B58                     l3487:	
  7970                           
  7971                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  7972  0B58  304A               	movlw	74
  7973  0B59  0671               	xorwf	time_date_delimiter@limiter,w
  7974  0B5A  1D03               	btfss	3,2
  7975  0B5B  2B65               	goto	l3493
  7976  0B5C  3003               	movlw	3
  7977  0B5D  0672               	xorwf	time_date_delimiter@type,w
  7978  0B5E  0473               	iorwf	time_date_delimiter@type+1,w
  7979  0B5F  1D03               	btfss	3,2
  7980  0B60  2B65               	goto	l3493
  7981                           
  7982                           ;math_src.c: 55:         prev_hex_year = 0x19;
  7983  0B61  3019               	movlw	25
  7984  0B62  00F4               	movwf	??_time_date_delimiter
  7985  0B63  0874               	movf	??_time_date_delimiter,w
  7986  0B64  00C2               	movwf	_prev_hex_year
  7987  0B65                     l3493:	
  7988                           
  7989                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  7990  0B65  3059               	movlw	89
  7991  0B66  0671               	xorwf	time_date_delimiter@limiter,w
  7992  0B67  1D03               	btfss	3,2
  7993  0B68  2B72               	goto	l3499
  7994  0B69  3003               	movlw	3
  7995  0B6A  0672               	xorwf	time_date_delimiter@type,w
  7996  0B6B  0473               	iorwf	time_date_delimiter@type+1,w
  7997  0B6C  1D03               	btfss	3,2
  7998  0B6D  2B72               	goto	l3499
  7999                           
  8000                           ;math_src.c: 57:         prev_hex_year = 0x29;
  8001  0B6E  3029               	movlw	41
  8002  0B6F  00F4               	movwf	??_time_date_delimiter
  8003  0B70  0874               	movf	??_time_date_delimiter,w
  8004  0B71  00C2               	movwf	_prev_hex_year
  8005  0B72                     l3499:	
  8006                           
  8007                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  8008  0B72  306A               	movlw	106
  8009  0B73  0671               	xorwf	time_date_delimiter@limiter,w
  8010  0B74  1D03               	btfss	3,2
  8011  0B75  2B7F               	goto	l3505
  8012  0B76  3003               	movlw	3
  8013  0B77  0672               	xorwf	time_date_delimiter@type,w
  8014  0B78  0473               	iorwf	time_date_delimiter@type+1,w
  8015  0B79  1D03               	btfss	3,2
  8016  0B7A  2B7F               	goto	l3505
  8017                           
  8018                           ;math_src.c: 59:         prev_hex_year =0x39;
  8019  0B7B  3039               	movlw	57
  8020  0B7C  00F4               	movwf	??_time_date_delimiter
  8021  0B7D  0874               	movf	??_time_date_delimiter,w
  8022  0B7E  00C2               	movwf	_prev_hex_year
  8023  0B7F                     l3505:	
  8024                           
  8025                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8026  0B7F  307A               	movlw	122
  8027  0B80  0671               	xorwf	time_date_delimiter@limiter,w
  8028  0B81  1D03               	btfss	3,2
  8029  0B82  2B8C               	goto	l3511
  8030  0B83  3003               	movlw	3
  8031  0B84  0672               	xorwf	time_date_delimiter@type,w
  8032  0B85  0473               	iorwf	time_date_delimiter@type+1,w
  8033  0B86  1D03               	btfss	3,2
  8034  0B87  2B8C               	goto	l3511
  8035                           
  8036                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8037  0B88  3049               	movlw	73
  8038  0B89  00F4               	movwf	??_time_date_delimiter
  8039  0B8A  0874               	movf	??_time_date_delimiter,w
  8040  0B8B  00C2               	movwf	_prev_hex_year
  8041  0B8C                     l3511:	
  8042                           
  8043                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8044  0B8C  3039               	movlw	57
  8045  0B8D  0671               	xorwf	time_date_delimiter@limiter,w
  8046  0B8E  1D03               	btfss	3,2
  8047  0B8F  2B99               	goto	l3517
  8048  0B90  3004               	movlw	4
  8049  0B91  0672               	xorwf	time_date_delimiter@type,w
  8050  0B92  0473               	iorwf	time_date_delimiter@type+1,w
  8051  0B93  1D03               	btfss	3,2
  8052  0B94  2B99               	goto	l3517
  8053                           
  8054                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8055  0B95  3009               	movlw	9
  8056  0B96  00F4               	movwf	??_time_date_delimiter
  8057  0B97  0874               	movf	??_time_date_delimiter,w
  8058  0B98  00C1               	movwf	_prev_hex_hours
  8059  0B99                     l3517:	
  8060                           
  8061                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8062  0B99  304A               	movlw	74
  8063  0B9A  0671               	xorwf	time_date_delimiter@limiter,w
  8064  0B9B  1D03               	btfss	3,2
  8065  0B9C  2BA6               	goto	l3523
  8066  0B9D  3004               	movlw	4
  8067  0B9E  0672               	xorwf	time_date_delimiter@type,w
  8068  0B9F  0473               	iorwf	time_date_delimiter@type+1,w
  8069  0BA0  1D03               	btfss	3,2
  8070  0BA1  2BA6               	goto	l3523
  8071                           
  8072                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8073  0BA2  3019               	movlw	25
  8074  0BA3  00F4               	movwf	??_time_date_delimiter
  8075  0BA4  0874               	movf	??_time_date_delimiter,w
  8076  0BA5  00C1               	movwf	_prev_hex_hours
  8077  0BA6                     l3523:	
  8078                           
  8079                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8080  0BA6  3059               	movlw	89
  8081  0BA7  0671               	xorwf	time_date_delimiter@limiter,w
  8082  0BA8  1D03               	btfss	3,2
  8083  0BA9  2BB3               	goto	l3529
  8084  0BAA  3004               	movlw	4
  8085  0BAB  0672               	xorwf	time_date_delimiter@type,w
  8086  0BAC  0473               	iorwf	time_date_delimiter@type+1,w
  8087  0BAD  1D03               	btfss	3,2
  8088  0BAE  2BB3               	goto	l3529
  8089                           
  8090                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8091  0BAF  3029               	movlw	41
  8092  0BB0  00F4               	movwf	??_time_date_delimiter
  8093  0BB1  0874               	movf	??_time_date_delimiter,w
  8094  0BB2  00C1               	movwf	_prev_hex_hours
  8095  0BB3                     l3529:	
  8096                           
  8097                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8098  0BB3  306A               	movlw	106
  8099  0BB4  0671               	xorwf	time_date_delimiter@limiter,w
  8100  0BB5  1D03               	btfss	3,2
  8101  0BB6  2BC0               	goto	l3535
  8102  0BB7  3004               	movlw	4
  8103  0BB8  0672               	xorwf	time_date_delimiter@type,w
  8104  0BB9  0473               	iorwf	time_date_delimiter@type+1,w
  8105  0BBA  1D03               	btfss	3,2
  8106  0BBB  2BC0               	goto	l3535
  8107                           
  8108                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8109  0BBC  3039               	movlw	57
  8110  0BBD  00F4               	movwf	??_time_date_delimiter
  8111  0BBE  0874               	movf	??_time_date_delimiter,w
  8112  0BBF  00C1               	movwf	_prev_hex_hours
  8113  0BC0                     l3535:	
  8114                           
  8115                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8116  0BC0  307A               	movlw	122
  8117  0BC1  0671               	xorwf	time_date_delimiter@limiter,w
  8118  0BC2  1D03               	btfss	3,2
  8119  0BC3  2BCD               	goto	l3541
  8120  0BC4  3004               	movlw	4
  8121  0BC5  0672               	xorwf	time_date_delimiter@type,w
  8122  0BC6  0473               	iorwf	time_date_delimiter@type+1,w
  8123  0BC7  1D03               	btfss	3,2
  8124  0BC8  2BCD               	goto	l3541
  8125                           
  8126                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8127  0BC9  3049               	movlw	73
  8128  0BCA  00F4               	movwf	??_time_date_delimiter
  8129  0BCB  0874               	movf	??_time_date_delimiter,w
  8130  0BCC  00C1               	movwf	_prev_hex_hours
  8131  0BCD                     l3541:	
  8132                           
  8133                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8134  0BCD  3039               	movlw	57
  8135  0BCE  0671               	xorwf	time_date_delimiter@limiter,w
  8136  0BCF  1D03               	btfss	3,2
  8137  0BD0  2BDA               	goto	l3547
  8138  0BD1  3005               	movlw	5
  8139  0BD2  0672               	xorwf	time_date_delimiter@type,w
  8140  0BD3  0473               	iorwf	time_date_delimiter@type+1,w
  8141  0BD4  1D03               	btfss	3,2
  8142  0BD5  2BDA               	goto	l3547
  8143                           
  8144                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8145  0BD6  3009               	movlw	9
  8146  0BD7  00F4               	movwf	??_time_date_delimiter
  8147  0BD8  0874               	movf	??_time_date_delimiter,w
  8148  0BD9  00C0               	movwf	_prev_hex_mins
  8149  0BDA                     l3547:	
  8150                           
  8151                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8152  0BDA  304A               	movlw	74
  8153  0BDB  0671               	xorwf	time_date_delimiter@limiter,w
  8154  0BDC  1D03               	btfss	3,2
  8155  0BDD  2BE7               	goto	l3553
  8156  0BDE  3005               	movlw	5
  8157  0BDF  0672               	xorwf	time_date_delimiter@type,w
  8158  0BE0  0473               	iorwf	time_date_delimiter@type+1,w
  8159  0BE1  1D03               	btfss	3,2
  8160  0BE2  2BE7               	goto	l3553
  8161                           
  8162                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8163  0BE3  3019               	movlw	25
  8164  0BE4  00F4               	movwf	??_time_date_delimiter
  8165  0BE5  0874               	movf	??_time_date_delimiter,w
  8166  0BE6  00C0               	movwf	_prev_hex_mins
  8167  0BE7                     l3553:	
  8168                           
  8169                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8170  0BE7  3059               	movlw	89
  8171  0BE8  0671               	xorwf	time_date_delimiter@limiter,w
  8172  0BE9  1D03               	btfss	3,2
  8173  0BEA  2BF4               	goto	l3559
  8174  0BEB  3005               	movlw	5
  8175  0BEC  0672               	xorwf	time_date_delimiter@type,w
  8176  0BED  0473               	iorwf	time_date_delimiter@type+1,w
  8177  0BEE  1D03               	btfss	3,2
  8178  0BEF  2BF4               	goto	l3559
  8179                           
  8180                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8181  0BF0  3029               	movlw	41
  8182  0BF1  00F4               	movwf	??_time_date_delimiter
  8183  0BF2  0874               	movf	??_time_date_delimiter,w
  8184  0BF3  00C0               	movwf	_prev_hex_mins
  8185  0BF4                     l3559:	
  8186                           
  8187                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8188  0BF4  306A               	movlw	106
  8189  0BF5  0671               	xorwf	time_date_delimiter@limiter,w
  8190  0BF6  1D03               	btfss	3,2
  8191  0BF7  2C01               	goto	l3565
  8192  0BF8  3005               	movlw	5
  8193  0BF9  0672               	xorwf	time_date_delimiter@type,w
  8194  0BFA  0473               	iorwf	time_date_delimiter@type+1,w
  8195  0BFB  1D03               	btfss	3,2
  8196  0BFC  2C01               	goto	l3565
  8197                           
  8198                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8199  0BFD  3039               	movlw	57
  8200  0BFE  00F4               	movwf	??_time_date_delimiter
  8201  0BFF  0874               	movf	??_time_date_delimiter,w
  8202  0C00  00C0               	movwf	_prev_hex_mins
  8203  0C01                     l3565:	
  8204                           
  8205                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8206  0C01  307A               	movlw	122
  8207  0C02  0671               	xorwf	time_date_delimiter@limiter,w
  8208  0C03  1D03               	btfss	3,2
  8209  0C04  2C0E               	goto	l3571
  8210  0C05  3005               	movlw	5
  8211  0C06  0672               	xorwf	time_date_delimiter@type,w
  8212  0C07  0473               	iorwf	time_date_delimiter@type+1,w
  8213  0C08  1D03               	btfss	3,2
  8214  0C09  2C0E               	goto	l3571
  8215                           
  8216                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8217  0C0A  3049               	movlw	73
  8218  0C0B  00F4               	movwf	??_time_date_delimiter
  8219  0C0C  0874               	movf	??_time_date_delimiter,w
  8220  0C0D  00C0               	movwf	_prev_hex_mins
  8221  0C0E                     l3571:	
  8222                           
  8223                           ;math_src.c: 82:     val--;
  8224  0C0E  3001               	movlw	1
  8225  0C0F  02F6               	subwf	time_date_delimiter@val,f
  8226  0C10                     l3573:	
  8227                           
  8228                           ;math_src.c: 84:     return val;
  8229  0C10  0876               	movf	time_date_delimiter@val,w
  8230  0C11  0008               	return
  8231  0C12                     __end_of_time_date_delimiter:	
  8232                           
  8233                           	psect	text35
  8234  15C3                     __ptext35:	
  8235 ;; *************** function _set_time *****************
  8236 ;; Defined at:
  8237 ;;		line 12 in file "clock_src.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;		None
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;  i               2    5[COMMON] int 
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  1    wreg      void 
  8244 ;; Registers used:
  8245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 300/0
  8248 ;;		On exit  : 300/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8251 ;;      Params:         0       0       0       0       0
  8252 ;;      Locals:         2       0       0       0       0
  8253 ;;      Temps:          0       0       0       0       0
  8254 ;;      Totals:         2       0       0       0       0
  8255 ;;Total ram usage:        2 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    1
  8258 ;; This function calls:
  8259 ;;		_time_write_1
  8260 ;; This function is called by:
  8261 ;;		_main
  8262 ;;		_time_settings
  8263 ;;		_date_settings
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           
  8268                           ;psect for function _set_time
  8269  15C3                     _set_time:	
  8270                           
  8271                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8272                           
  8273                           ;incstack = 0
  8274                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8275  15C3  1686               	bsf	6,5	;volatile
  8276                           
  8277                           ;clock_src.c: 16:    time_write_1(0xbe);
  8278  15C4  30BE               	movlw	190
  8279  15C5  160A  118A  259D  160A  118A  	fcall	_time_write_1
  8280                           
  8281                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8282  15CA  01F5               	clrf	set_time@i
  8283  15CB  01F6               	clrf	set_time@i+1
  8284  15CC                     l3203:	
  8285                           
  8286                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8287  15CC  0875               	movf	set_time@i,w
  8288  15CD  3EA8               	addlw	(low (_table| 0))& (0+255)
  8289  15CE  0084               	movwf	4
  8290  15CF  1383               	bcf	3,7	;select IRP bank1
  8291  15D0  0800               	movf	0,w
  8292  15D1  160A  118A  259D  160A  118A  	fcall	_time_write_1
  8293                           
  8294                           ;clock_src.c: 20:      }
  8295  15D6  3001               	movlw	1
  8296  15D7  07F5               	addwf	set_time@i,f
  8297  15D8  1803               	skipnc
  8298  15D9  0AF6               	incf	set_time@i+1,f
  8299  15DA  3000               	movlw	0
  8300  15DB  07F6               	addwf	set_time@i+1,f
  8301  15DC  0876               	movf	set_time@i+1,w
  8302  15DD  3A80               	xorlw	128
  8303  15DE  00FF               	movwf	127
  8304  15DF  3080               	movlw	128
  8305  15E0  027F               	subwf	127,w
  8306  15E1  1D03               	skipz
  8307  15E2  2DE5               	goto	u2105
  8308  15E3  3008               	movlw	8
  8309  15E4  0275               	subwf	set_time@i,w
  8310  15E5                     u2105:	
  8311  15E5  1C03               	skipc
  8312  15E6  2DCC               	goto	l3203
  8313                           
  8314                           ;clock_src.c: 21:    RB5=0;
  8315  15E7  1283               	bcf	3,5	;RP0=0, select bank0
  8316  15E8  1303               	bcf	3,6	;RP1=0, select bank0
  8317  15E9  1286               	bcf	6,5	;volatile
  8318  15EA  0008               	return
  8319  15EB                     __end_of_set_time:	
  8320                           
  8321                           	psect	text36
  8322  159D                     __ptext36:	
  8323 ;; *************** function _time_write_1 *****************
  8324 ;; Defined at:
  8325 ;;		line 114 in file "clock_src.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  time_tx         1    wreg     unsigned char 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  time_tx         1    4[COMMON] unsigned char 
  8330 ;;  j               2    2[COMMON] int 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0, btemp+1
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 300/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8340 ;;      Params:         0       0       0       0       0
  8341 ;;      Locals:         3       0       0       0       0
  8342 ;;      Temps:          2       0       0       0       0
  8343 ;;      Totals:         5       0       0       0       0
  8344 ;;Total ram usage:        5 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_ds1302_init
  8350 ;;		_set_time
  8351 ;;		_get_time
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _time_write_1
  8357  159D                     _time_write_1:	
  8358                           
  8359                           ;incstack = 0
  8360                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8361                           ;time_write_1@time_tx stored from wreg
  8362  159D  00F4               	movwf	time_write_1@time_tx
  8363                           
  8364                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8365  159E  01F2               	clrf	time_write_1@j
  8366  159F  01F3               	clrf	time_write_1@j+1
  8367  15A0                     l437:	
  8368                           
  8369                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8370  15A0  1283               	bcf	3,5	;RP0=0, select bank0
  8371  15A1  1303               	bcf	3,6	;RP1=0, select bank0
  8372  15A2  1206               	bcf	6,4	;volatile
  8373                           
  8374                           ;clock_src.c: 120:         RB0=0;
  8375  15A3  1006               	bcf	6,0	;volatile
  8376                           
  8377                           ;clock_src.c: 121:         if(time_tx&0x01)
  8378  15A4  1874               	btfsc	time_write_1@time_tx,0
  8379                           
  8380                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8381  15A5  1606               	bsf	6,4	;volatile
  8382                           
  8383                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8384  15A6  0874               	movf	time_write_1@time_tx,w
  8385  15A7  00F0               	movwf	??_time_write_1
  8386  15A8  1003               	clrc
  8387  15A9  0C70               	rrf	??_time_write_1,w
  8388  15AA  00F1               	movwf	??_time_write_1+1
  8389  15AB  0871               	movf	??_time_write_1+1,w
  8390  15AC  00F4               	movwf	time_write_1@time_tx
  8391                           
  8392                           ;clock_src.c: 126:         RB0=1;
  8393  15AD  1406               	bsf	6,0	;volatile
  8394                           
  8395                           ;clock_src.c: 127:     }
  8396  15AE  3001               	movlw	1
  8397  15AF  07F2               	addwf	time_write_1@j,f
  8398  15B0  1803               	skipnc
  8399  15B1  0AF3               	incf	time_write_1@j+1,f
  8400  15B2  3000               	movlw	0
  8401  15B3  07F3               	addwf	time_write_1@j+1,f
  8402  15B4  0873               	movf	time_write_1@j+1,w
  8403  15B5  3A80               	xorlw	128
  8404  15B6  00FF               	movwf	127
  8405  15B7  3080               	movlw	128
  8406  15B8  027F               	subwf	127,w
  8407  15B9  1D03               	skipz
  8408  15BA  2DBD               	goto	u2095
  8409  15BB  3008               	movlw	8
  8410  15BC  0272               	subwf	time_write_1@j,w
  8411  15BD                     u2095:	
  8412  15BD  1C03               	skipc
  8413  15BE  2DA0               	goto	l437
  8414                           
  8415                           ;clock_src.c: 128:       RB0=0;
  8416  15BF  1283               	bcf	3,5	;RP0=0, select bank0
  8417  15C0  1303               	bcf	3,6	;RP1=0, select bank0
  8418  15C1  1006               	bcf	6,0	;volatile
  8419  15C2  0008               	return
  8420  15C3                     __end_of_time_write_1:	
  8421                           
  8422                           	psect	text37
  8423  1555                     __ptext37:	
  8424 ;; *************** function _incrementor *****************
  8425 ;; Defined at:
  8426 ;;		line 10 in file "math_src.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;  upper_val       2    0[BANK0 ] int 
  8429 ;;  lower_val       2    2[BANK0 ] int 
  8430 ;;  z               1    4[BANK0 ] unsigned char 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      unsigned char 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 300/0
  8439 ;;		On exit  : 300/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8442 ;;      Params:         0       5       0       0       0
  8443 ;;      Locals:         0       0       0       0       0
  8444 ;;      Temps:          2       0       0       0       0
  8445 ;;      Totals:         2       5       0       0       0
  8446 ;;Total ram usage:        7 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    2
  8449 ;; This function calls:
  8450 ;;		_modulus_func
  8451 ;; This function is called by:
  8452 ;;		_thermometer_threshhold_settings
  8453 ;;		_time_settings
  8454 ;;		_date_settings
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           
  8459                           ;psect for function _incrementor
  8460  1555                     _incrementor:	
  8461                           
  8462                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8463                           
  8464                           ;incstack = 0
  8465                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8466  1555  0861               	movf	incrementor@lower_val,w
  8467  1556  3E30               	addlw	48
  8468  1557  00FB               	movwf	??_incrementor
  8469  1558  0862               	movf	incrementor@lower_val+1,w
  8470  1559  1803               	skipnc
  8471  155A  3E01               	addlw	1
  8472  155B  3E00               	addlw	0
  8473  155C  00FC               	movwf	??_incrementor+1
  8474  155D  0863               	movf	incrementor@z,w
  8475  155E  067B               	xorwf	??_incrementor,w
  8476  155F  047C               	iorwf	??_incrementor+1,w
  8477  1560  1D03               	skipz
  8478  1561  2D77               	goto	l3393
  8479                           
  8480                           ;math_src.c: 12:      upper_val++;
  8481  1562  3001               	movlw	1
  8482  1563  07DF               	addwf	incrementor@upper_val,f
  8483  1564  1803               	skipnc
  8484  1565  0AE0               	incf	incrementor@upper_val+1,f
  8485  1566  3000               	movlw	0
  8486  1567  07E0               	addwf	incrementor@upper_val+1,f
  8487                           
  8488                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8489  1568  0860               	movf	incrementor@upper_val+1,w
  8490  1569  00F8               	movwf	modulus_func@x+1
  8491  156A  085F               	movf	incrementor@upper_val,w
  8492  156B  00F7               	movwf	modulus_func@x
  8493  156C  300A               	movlw	10
  8494  156D  00F9               	movwf	modulus_func@y
  8495  156E  3000               	movlw	0
  8496  156F  00FA               	movwf	modulus_func@y+1
  8497  1570  160A  118A  2434   	fcall	_modulus_func
  8498  1573  0878               	movf	?_modulus_func+1,w
  8499  1574  00E0               	movwf	incrementor@upper_val+1
  8500  1575  0877               	movf	?_modulus_func,w
  8501  1576  00DF               	movwf	incrementor@upper_val
  8502  1577                     l3393:	
  8503                           
  8504                           ;math_src.c: 15:      return upper_val;
  8505  1577  085F               	movf	incrementor@upper_val,w
  8506  1578  0008               	return
  8507  1579                     __end_of_incrementor:	
  8508                           
  8509                           	psect	text38
  8510  1434                     __ptext38:	
  8511 ;; *************** function _modulus_func *****************
  8512 ;; Defined at:
  8513 ;;		line 5 in file "math_src.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  x               2    7[COMMON] int 
  8516 ;;  y               2    9[COMMON] int 
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;		None
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  2    7[COMMON] int 
  8521 ;; Registers used:
  8522 ;;		wreg, status,2, status,0, pclath, cstack
  8523 ;; Tracked objects:
  8524 ;;		On entry : 300/0
  8525 ;;		On exit  : 300/0
  8526 ;;		Unchanged: 300/0
  8527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8528 ;;      Params:         4       0       0       0       0
  8529 ;;      Locals:         0       0       0       0       0
  8530 ;;      Temps:          0       0       0       0       0
  8531 ;;      Totals:         4       0       0       0       0
  8532 ;;Total ram usage:        4 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:    1
  8535 ;; This function calls:
  8536 ;;		___awmod
  8537 ;; This function is called by:
  8538 ;;		_main
  8539 ;;		_thermometer_threshhold_settings
  8540 ;;		_time_settings
  8541 ;;		_date_settings
  8542 ;;		_incrementor
  8543 ;;		_decrementor
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function _modulus_func
  8549  1434                     _modulus_func:	
  8550                           
  8551                           ;math_src.c: 6:     x = x % y;
  8552                           
  8553                           ;incstack = 0
  8554                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8555  1434  087A               	movf	modulus_func@y+1,w
  8556  1435  00F1               	movwf	___awmod@divisor+1
  8557  1436  0879               	movf	modulus_func@y,w
  8558  1437  00F0               	movwf	___awmod@divisor
  8559  1438  0878               	movf	modulus_func@x+1,w
  8560  1439  00F3               	movwf	___awmod@dividend+1
  8561  143A  0877               	movf	modulus_func@x,w
  8562  143B  00F2               	movwf	___awmod@dividend
  8563  143C  120A  118A  2026   	fcall	___awmod
  8564  143F  0871               	movf	?___awmod+1,w
  8565  1440  00F8               	movwf	modulus_func@x+1
  8566  1441  0870               	movf	?___awmod,w
  8567  1442  00F7               	movwf	modulus_func@x
  8568                           
  8569                           ;math_src.c: 7:     return x;
  8570  1443  0008               	return
  8571  1444                     __end_of_modulus_func:	
  8572                           
  8573                           	psect	text39
  8574  0026                     __ptext39:	
  8575 ;; *************** function ___awmod *****************
  8576 ;; Defined at:
  8577 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  divisor         2    0[COMMON] int 
  8580 ;;  dividend        2    2[COMMON] int 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  sign            1    6[COMMON] unsigned char 
  8583 ;;  counter         1    5[COMMON] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  2    0[COMMON] int 
  8586 ;; Registers used:
  8587 ;;		wreg, status,2, status,0
  8588 ;; Tracked objects:
  8589 ;;		On entry : 300/0
  8590 ;;		On exit  : 300/0
  8591 ;;		Unchanged: 300/0
  8592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8593 ;;      Params:         4       0       0       0       0
  8594 ;;      Locals:         2       0       0       0       0
  8595 ;;      Temps:          1       0       0       0       0
  8596 ;;      Totals:         7       0       0       0       0
  8597 ;;Total ram usage:        7 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; This function calls:
  8600 ;;		Nothing
  8601 ;; This function is called by:
  8602 ;;		_modulus_func
  8603 ;; This function uses a non-reentrant model
  8604 ;;
  8605                           
  8606                           
  8607                           ;psect for function ___awmod
  8608  0026                     ___awmod:	
  8609                           
  8610                           ;incstack = 0
  8611                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8612  0026  01F6               	clrf	___awmod@sign
  8613  0027  1FF3               	btfss	___awmod@dividend+1,7
  8614  0028  2830               	goto	l3125
  8615  0029  09F2               	comf	___awmod@dividend,f
  8616  002A  09F3               	comf	___awmod@dividend+1,f
  8617  002B  0AF2               	incf	___awmod@dividend,f
  8618  002C  1903               	skipnz
  8619  002D  0AF3               	incf	___awmod@dividend+1,f
  8620  002E  01F6               	clrf	___awmod@sign
  8621  002F  0AF6               	incf	___awmod@sign,f
  8622  0030                     l3125:	
  8623  0030  1FF1               	btfss	___awmod@divisor+1,7
  8624  0031  2837               	goto	l3129
  8625  0032  09F0               	comf	___awmod@divisor,f
  8626  0033  09F1               	comf	___awmod@divisor+1,f
  8627  0034  0AF0               	incf	___awmod@divisor,f
  8628  0035  1903               	skipnz
  8629  0036  0AF1               	incf	___awmod@divisor+1,f
  8630  0037                     l3129:	
  8631  0037  0870               	movf	___awmod@divisor,w
  8632  0038  0471               	iorwf	___awmod@divisor+1,w
  8633  0039  1903               	btfsc	3,2
  8634  003A  2864               	goto	l3147
  8635  003B  01F5               	clrf	___awmod@counter
  8636  003C  0AF5               	incf	___awmod@counter,f
  8637  003D                     l3137:	
  8638  003D  1BF1               	btfsc	___awmod@divisor+1,7
  8639  003E  284B               	goto	l3139
  8640  003F  3001               	movlw	1
  8641  0040                     u1995:	
  8642  0040  1003               	clrc
  8643  0041  0DF0               	rlf	___awmod@divisor,f
  8644  0042  0DF1               	rlf	___awmod@divisor+1,f
  8645  0043  3EFF               	addlw	-1
  8646  0044  1D03               	skipz
  8647  0045  2840               	goto	u1995
  8648  0046  3001               	movlw	1
  8649  0047  00F4               	movwf	??___awmod
  8650  0048  0874               	movf	??___awmod,w
  8651  0049  07F5               	addwf	___awmod@counter,f
  8652  004A  283D               	goto	l3137
  8653  004B                     l3139:	
  8654  004B  0871               	movf	___awmod@divisor+1,w
  8655  004C  0273               	subwf	___awmod@dividend+1,w
  8656  004D  1D03               	skipz
  8657  004E  2851               	goto	u2015
  8658  004F  0870               	movf	___awmod@divisor,w
  8659  0050  0272               	subwf	___awmod@dividend,w
  8660  0051                     u2015:	
  8661  0051  1C03               	skipc
  8662  0052  2859               	goto	l3143
  8663  0053  0870               	movf	___awmod@divisor,w
  8664  0054  02F2               	subwf	___awmod@dividend,f
  8665  0055  0871               	movf	___awmod@divisor+1,w
  8666  0056  1C03               	skipc
  8667  0057  03F3               	decf	___awmod@dividend+1,f
  8668  0058  02F3               	subwf	___awmod@dividend+1,f
  8669  0059                     l3143:	
  8670  0059  3001               	movlw	1
  8671  005A                     u2025:	
  8672  005A  1003               	clrc
  8673  005B  0CF1               	rrf	___awmod@divisor+1,f
  8674  005C  0CF0               	rrf	___awmod@divisor,f
  8675  005D  3EFF               	addlw	-1
  8676  005E  1D03               	skipz
  8677  005F  285A               	goto	u2025
  8678  0060  3001               	movlw	1
  8679  0061  02F5               	subwf	___awmod@counter,f
  8680  0062  1D03               	btfss	3,2
  8681  0063  284B               	goto	l3139
  8682  0064                     l3147:	
  8683  0064  0876               	movf	___awmod@sign,w
  8684  0065  1903               	btfsc	3,2
  8685  0066  286C               	goto	l3151
  8686  0067  09F2               	comf	___awmod@dividend,f
  8687  0068  09F3               	comf	___awmod@dividend+1,f
  8688  0069  0AF2               	incf	___awmod@dividend,f
  8689  006A  1903               	skipnz
  8690  006B  0AF3               	incf	___awmod@dividend+1,f
  8691  006C                     l3151:	
  8692  006C  0873               	movf	___awmod@dividend+1,w
  8693  006D  00F1               	movwf	?___awmod+1
  8694  006E  0872               	movf	___awmod@dividend,w
  8695  006F  00F0               	movwf	?___awmod
  8696  0070  0008               	return
  8697  0071                     __end_of___awmod:	
  8698                           
  8699                           	psect	text40
  8700  1455                     __ptext40:	
  8701 ;; *************** function _button_delay *****************
  8702 ;; Defined at:
  8703 ;;		line 606 in file "Button_src.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;		None
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  i               2    0[COMMON] int 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  1    wreg      void 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, btemp+1
  8712 ;; Tracked objects:
  8713 ;;		On entry : 300/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8717 ;;      Params:         0       0       0       0       0
  8718 ;;      Locals:         2       0       0       0       0
  8719 ;;      Temps:          0       0       0       0       0
  8720 ;;      Totals:         2       0       0       0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_set_beep_threshhold
  8727 ;;		_thermometer_threshhold_settings
  8728 ;;		_time_settings
  8729 ;;		_date_settings
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _button_delay
  8735  1455                     _button_delay:	
  8736                           
  8737                           ;Button_src.c: 607:     for(int i=0;i<10000;i++);
  8738                           
  8739                           ;incstack = 0
  8740                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8741  1455  01F0               	clrf	button_delay@i
  8742  1456  01F1               	clrf	button_delay@i+1
  8743  1457                     l3383:	
  8744  1457  3001               	movlw	1
  8745  1458  07F0               	addwf	button_delay@i,f
  8746  1459  1803               	skipnc
  8747  145A  0AF1               	incf	button_delay@i+1,f
  8748  145B  3000               	movlw	0
  8749  145C  07F1               	addwf	button_delay@i+1,f
  8750  145D  0871               	movf	button_delay@i+1,w
  8751  145E  3A80               	xorlw	128
  8752  145F  00FF               	movwf	127
  8753  1460  30A7               	movlw	167
  8754  1461  027F               	subwf	127,w
  8755  1462  1D03               	skipz
  8756  1463  2C66               	goto	u2205
  8757  1464  3010               	movlw	16
  8758  1465  0270               	subwf	button_delay@i,w
  8759  1466                     u2205:	
  8760  1466  1803               	btfsc	3,0
  8761  1467  0008               	return
  8762  1468  2C57               	goto	l3383
  8763  1469                     __end_of_button_delay:	
  8764  007E                     btemp	set	126	;btemp
  8765  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      80
    BANK1            80      0      16
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   44073
                                             10 BANK0      7     7      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     264
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     264
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      10       7       20.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6E      12        0.0%
ABS                  0      0      6E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 11 14:43:16 2019

                                       _a 0049                                         _b 0048  
                                       _c 0047                                         _p 0029  
                                       _t 0039                                         _w 0037  
                                       _x 0035                                         _y 0033  
                                       _z 0031                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005B                                        _TZ 005C  
                                      _ge 0059                                        _wd 003D  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 14D3  
                           ?_display_date 0070                                       l150 0D24  
                                     l334 1409                                       l443 1647  
                                     l700 0158                                       l437 15A0  
                                     l701 0160                                       l720 03FB  
                                     l712 0322                                       l721 0403  
                                     l732 04F5                                       l741 06AB  
                                     l733 04FD                                       l709 0295  
                                     l726 046F                                       l718 0395  
                                     l727 0477                                       l684 0FA0  
                                     l692 007D                                       l685 0FED  
                                     l694 00E3                                       l679 0F3D  
                                     l695 00EB                                       l890 179C  
                                     l894 17FC                                       l889 17BA  
                                     _RA0 0028                                       _RA2 002A  
                                     _RB0 0030                                       _RA3 002B  
                                     _RB1 0031                                       _RA4 002C  
                                     _RC0 0038                                       _RA5 002D  
                                     _RC1 0039                                       _RB4 0034  
                                     _RC2 003A                                       _RB5 0035  
                                     _RC3 003B                                       _RE0 0048  
                                     _RC4 003C                                       _RE2 004A  
                                     _RC6 003E                                       _RC7 003F  
                                     _THV 005D                             ?_display_temp 0070  
                                     _TLV 005E                                       _shi 005A  
                                     fsr0 0004                                       indf 0000  
                            ___awmod@sign 0076                              __CFG_FOSC$HS 0000  
                         ??_time_settings 0064                              __CFG_LVP$OFF 0000  
            set_lower_threshold@upper_val 0073                                      l1253 154F  
                                    l3203 15CC                                      l3125 0030  
                                    l4101 04E0                                      l3151 006C  
                                    l3143 0059                                      l4103 04E5  
                                    l3137 003D                                      l3129 0037  
                                    l4201 0701                                      l4121 0531  
                                    l3139 004B                                      l3147 0064  
                                    l3243 16FF                                      l3403 159B  
                                    l4133 0547                                      l4125 053A  
                                    l3173 140D                                      l3245 1700  
                                    l3511 0B8C                                      l3167 146B  
                                    l4231 0744                                      l4135 054C  
                                    l4055 0437                                      l3247 16D9  
                                    l3255 1710                                      l3505 0B7F  
                                    l3433 0AE6                                      l3523 0BA6  
                                    l3451 0B0A                                      l3427 0ADA  
                                    l4067 045A                                      l4059 0440  
                                    l3275 1725                                      l4323 011F  
                                    l3541 0BCD                                      l3517 0B99  
                                    l3445 0AFE                                      l4261 078A  
                                    l4165 0671                                      l4093 04C5  
                                    l4069 045F                                      l3349 147F  
                                    l3383 1457                                      l3535 0BC0  
                                    l3463 0B24                                      l3439 0AF2  
                                    l3607 1538                                      l3631 1757  
                                    l3367 1658                                      l4335 0143  
                                    l4327 0128                                      l3393 1577  
                                    l3553 0BE7                                      l3529 0BB3  
                                    l3481 0B4B                                      l3457 0B17  
                                    l4169 0686                                      l4089 04BC  
                                    l3641 1778                                      l3297 16A8  
                                    l4337 0148                                      l3571 0C0E  
                                    l3547 0BDA                                      l3475 0B3E  
                                    l4435 02E5                                      l4355 0194  
                                    l4371 01C6                                      l3565 0C01  
                                    l3493 0B65                                      l3469 0B31  
                                    l3573 0C10                                      l3637 176D  
                                    l3629 1749                                      l3653 1677  
                                    l4381 01E7                                      l3559 0BF4  
                                    l3487 0B58                                      l3655 1685  
                                    l3663 169E                                      l3751 0A3F  
                                    l4551 14EC                                      l4359 019D  
                                    l4607 0C40                                      l3833 0920  
                                    l4561 080F                                      l4537 1613  
                                    l3921 0EEB                                      l4377 01D8  
                                    l4369 01C1                                      l3499 0B72  
                                    l4571 083D                                      l4563 081B  
                                    l3587 1518                                      l3659 1693  
                                    l3763 0A5D                                      l3755 0A49  
                                    l3589 1521                                      l4583 0870  
                                    l4575 084E                                      l4567 082C  
                                    l3599 1530                                      l3759 0A53  
                                    l3783 1620                                      l3795 088A  
                                    l4579 085F                                      l4675 0D5E  
                                    l3893 0E8C                                      l3983 0FAD  
                                    l3959 0F29                            ?_display_clock 0070  
                                    u2015 0051                                      u2025 005A  
                                    u2105 15E5                                      u2205 1466  
                                    u2055 147A                                      u3025 163B  
                                    u2095 15BD                                      u2175 148E  
                                    u2195 1668                                      u3085 0F3A  
                                    u2905 167A                                      u2835 174C  
                                    u2925 168B                                      u2855 1758  
                                    u2935 1694                                      u3735 17C7  
                                    u2865 1764                                      u3745 17D2  
                                    u3905 0D73                                      u1995 0040  
                                    u2795 153B                                      u2875 176E  
                                    u2955 09F7                                      u3755 1784  
                                    u2965 0A02                                      u3765 178F  
                                    u2975 0A0F               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0C12  
                                    _init 13F0                                      _var1 004E  
                                    _var2 004D                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 005F  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 1532  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 0071  
                         __end_of___lbmod 1555                      __end_of_delay_screen 147D  
                         __end_of___lwdiv 177D                           __end_of___lwmod 16A3  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 003B                                     _table 00A8  
                                   _stats 002B                                     main@i 006E  
                          write_byte@temp 0076                       _set_lower_threshold 17BE  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                    __size_of_decrementor 0024                                     wtemp0 007E  
                         ___lbdiv@divisor 0070                           ___lbdiv@counter 0073  
                           ??_ds1302_init 0075                           __initialization 07E0  
                            __end_of_main 0D92                              __end_of_init 13F8  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0069  
                                  ??_init 0070                      incrementor@lower_val 0061  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 005F  
                        __end_of_lcd_init 0026                          __end_of_get_temp 0ABB  
                        __end_of_get_time 1641                                    _baifen 0057  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 147D                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00A0  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 1434                       _set_upper_threshold 177D  
                                  _table1 0020                           ___awmod@divisor 0070  
                                  _shifen 0058                                    _wanfen 0055  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 15EB  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 0916                      __end_of_display_temp 1511  
                          __pcstackCOMMON 0070                              __pidataBANK1 1400  
                   __size_of_delay_screen 0014                      __size_of_incrementor 0024  
                        ___lbdiv@quotient 0074                     ??_set_upper_threshold 0077  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 1469                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1425  
                              _delay_temp 1408                                __pmaintext 0C12  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0063  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 0387                                 ?_get_time 0070  
                      __size_of_write_cmd 0017                                 ?_set_time 0070  
                    __size_of_reset_alarm 002A                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 14A5  
                _time_date_hex_terminator 1416                                   ___lbdiv 1511  
                                 ___awmod 0026                                   ___lbmod 1532  
                         __size_of_delay2 0014                                   ___lwdiv 1741  
                                 ___lwmod 1671                                   _alarm__ 004C  
                                 _day_hex 0046                                   _day_low 002F  
                            _heater_state 0050                                   __ptext1 0071  
                                 __ptext2 0D92                                   __ptext3 1579  
                                 __ptext4 177D                                   __ptext5 17BE  
                                 __ptext6 14D3                                   __ptext7 15EB  
                                 __ptext8 0003                                   __ptext9 1491  
                    __end_of_button_delay 1469                                   delay2@i 0070  
                       __end_of_init_temp 0807                          ___awmod@dividend 0072  
                       __end_of_read_byte 16D7                                   _qianfen 0056  
                    __size_of_time_read_1 0030                                   _lower_t 0053  
             __end_of_set_beep_threshhold 14F0              set_upper_threshold@upper_val 0073  
                   __size_of_display_date 0096                                   clrloop0 13F9  
                              ??_lcd_init 0073                                   _upper_t 0054  
                           ??_decrementor 007B                                ??_get_temp 005F  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 16D7  
                              ??_set_time 0075                       _time_date_delimiter 0ABB  
                    decrementor@lower_val 005F                              _display_date 0880  
                            _display_temp 14F0                         __end_of_write_cmd 14D3  
                        ___lbmod@dividend 0074                              _cooler_state 004F  
                           modulus_func@x 0077                             modulus_func@y 0079  
                   __end_of_display_clock 09B4                    __size_of_date_settings 0459  
                             ___lbmod@rem 0076                      ?_time_date_delimiter 0070  
                    decrementor@upper_val 0061                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 1800                       __end_of_decrementor 159D  
                           ??_display_day 0075                            __end_of_delay2 1491  
                              _write_char 14A5                                _write_byte 170B  
                          _var_night_high 00A4                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 1444                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 1444  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0387                               __pdataBANK1 00A8  
                              read_byte@i 0076                                read_byte@j 003F  
             __end_of_set_upper_threshold 17BE                       __end_of_display_day 0880  
                               ___latbits 0002                             __pcstackBANK0 005F  
                             _decrementor 1579                      set_beep_threshhold@x 0072  
                       __size_of_lcd_init 0023                         __size_of_get_temp 0107  
                       __size_of_get_time 002C                ??_time_date_hex_terminator 0071  
                            _button_delay 1455                          ___lwdiv@dividend 0078  
                             _day_counter 0027                                  ?___lbdiv 0070  
                          ?_date_settings 0070                                  ?___awmod 0070  
                                ?___lbmod 0070                                  ?___lwdiv 0076  
                                ?___lwmod 0070                         __size_of_set_time 0028  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 1579                      __end_of_time_write_1 15C3  
                      _initialise_buttons 1491                           _day_of_week_var 00A2  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 0802                                 _read_byte 16A3  
                            decrementor@z 0063                       ?_initialise_buttons 0070  
                               clear_ram0 13F8                             ??_reset_alarm 0073  
                          _prev_hex_hours 0041                              ??_delay_temp 0071  
                               _temp_high 004A                               _display_day 0807  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 026E  
       ??_thermometer_threshhold_settings 0064          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0D92                      ??_initialise_buttons 0070  
                  __size_of_time_settings 0316          thermometer_threshhold_settings@i 0067  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 1416  
                               _write_cmd 14BC                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 00A6  
                         _buzzer_watcher1 0051                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0064                      __size_of_ds1302_init 000F  
                             _incrementor 1555                              _modulus_func 1434  
                     __end_of_reset_alarm 1615                          __size_of___lbdiv 0021  
                        __size_of___awmod 004B                          __size_of___lbmod 0023  
                        __size_of___lwdiv 003C                          __size_of___lwmod 0032  
                                _day_high 002D                           ___lwdiv@divisor 0076  
                         ___lwdiv@counter 007D                                  __ptext10 0802  
                                __ptext11 13F0                                  __ptext20 1671  
                                __ptext12 1615                                  __ptext21 1741  
                                __ptext13 1641                                  __ptext30 14BC  
                                __ptext22 1532                                  __ptext14 09B4  
                                __ptext31 14A5                                  __ptext23 1511  
                                __ptext15 170B                                  __ptext40 1455  
                                __ptext32 1469                                  __ptext24 1425  
                                __ptext16 16D7                                  __ptext33 1416  
                                __ptext25 14F0                                  __ptext17 16A3  
                                __ptext34 0ABB                                  __ptext26 0807  
                                __ptext18 1408                                  __ptext35 15C3  
                                __ptext27 0880                                  __ptext19 147D  
                                __ptext36 159D                                  __ptext28 0916  
                                __ptext37 1555                                  __ptext29 0387  
                                __ptext38 1434                                  __ptext39 0026  
                     __end_of_time_read_1 1671                                ?_write_cmd 0070  
                                _lcd_init 0003                                  _get_temp 09B4  
                                _get_time 1615                             _time_settings 0071  
        __end_of_time_date_hex_terminator 1425                             __size_of_main 0180  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0045                                 set_time@i 0075  
                           _prev_hex_mins 0040                             _prev_hex_year 0042  
                            ??_reset_temp 0074                                  _set_time 15C3  
                                _temp_low 004B                                  _prev_hex 0044  
              time_date_delimiter@limiter 0071              __size_of_set_lower_threshold 0042  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 009E                            _buzzer_watcher 0052  
                             delay_temp@x 0072                               delay_temp@y 0070  
                             delay_temp@z 0073                            read_byte@value 0075  
             __end_of_time_date_delimiter 0C12                                  init_ram0 1448  
                           button_delay@i 0070                               ??_init_temp 0070  
                      __end_of_reset_temp 170B                               ??_read_byte 0074  
                          ?_time_settings 0070                              ?_decrementor 005F  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 15EB                              _time_write_1 159D  
                            _prev_hex_day 0043                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 1641                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0041  
                           _display_clock 0916                             time_write_1@j 0072  
                      __end_of_write_char 14BC                        __end_of_write_byte 1741  
