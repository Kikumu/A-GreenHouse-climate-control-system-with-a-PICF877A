

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Dec 12 20:37:08 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  0005                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  0005  3400               	retlw	0
   696  0006  3418               	retlw	24
   697  0007  3400               	retlw	0
   698  0008  3412               	retlw	18
   699  0009  3412               	retlw	18
   700  000A  3406               	retlw	6
   701  000B  3419               	retlw	25
   702  000C  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003E                     _RC6	set	62
   706  003F                     _RC7	set	63
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30C3               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3000               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  3005               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30BB               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  21CB  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30BB               	movlw	low (__pbssBANK1+27)
   756  07F1  160A  118A  2183  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  3060               	movlw	low (__pbssBANK0+64)
   762  07F9  160A  118A  2183   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  29F7   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _day_lower_lower:	
   773  0020                     	ds	2
   774  0022                     _night_lower_lower:	
   775  0022                     	ds	2
   776  0024                     _p:	
   777  0024                     	ds	2
   778  0026                     _stats:	
   779  0026                     	ds	2
   780  0028                     _day_high:	
   781  0028                     	ds	2
   782  002A                     _day_low:	
   783  002A                     	ds	2
   784  002C                     _z:	
   785  002C                     	ds	2
   786  002E                     _y:	
   787  002E                     	ds	2
   788  0030                     _x:	
   789  0030                     	ds	2
   790  0032                     _w:	
   791  0032                     	ds	2
   792  0034                     _t:	
   793  0034                     	ds	2
   794  0036                     _cold_high:	
   795  0036                     	ds	2
   796  0038                     _var_night_high:	
   797  0038                     	ds	2
   798  003A                     _var_night_low:	
   799  003A                     	ds	2
   800  003C                     _count:	
   801  003C                     	ds	2
   802  003E                     _wd:	
   803  003E                     	ds	2
   804  0040                     read_byte@j:	
   805  0040                     	ds	1
   806  0041                     _prev_hex_mins:	
   807  0041                     	ds	1
   808  0042                     _prev_hex_hours:	
   809  0042                     	ds	1
   810  0043                     _prev_hex_year:	
   811  0043                     	ds	1
   812  0044                     _prev_hex_day:	
   813  0044                     	ds	1
   814  0045                     _prev_hex:	
   815  0045                     	ds	1
   816  0046                     _hrs_limiter:	
   817  0046                     	ds	1
   818  0047                     _day_hex:	
   819  0047                     	ds	1
   820  0048                     _c:	
   821  0048                     	ds	1
   822  0049                     _b:	
   823  0049                     	ds	1
   824  004A                     _a:	
   825  004A                     	ds	1
   826  004B                     _temp_high:	
   827  004B                     	ds	1
   828  004C                     _temp_low:	
   829  004C                     	ds	1
   830  004D                     _alarm__:	
   831  004D                     	ds	1
   832  004E                     _var2:	
   833  004E                     	ds	1
   834  004F                     _var1:	
   835  004F                     	ds	1
   836  0050                     _cooler_state:	
   837  0050                     	ds	1
   838  0051                     _heater_state:	
   839  0051                     	ds	1
   840  0052                     _buzzer_watcher1:	
   841  0052                     	ds	1
   842  0053                     _buzzer_watcher:	
   843  0053                     	ds	1
   844  0054                     _lower_t:	
   845  0054                     	ds	1
   846  0055                     _upper_t:	
   847  0055                     	ds	1
   848  0056                     _wanfen:	
   849  0056                     	ds	1
   850  0057                     _qianfen:	
   851  0057                     	ds	1
   852  0058                     _baifen:	
   853  0058                     	ds	1
   854  0059                     _shifen:	
   855  0059                     	ds	1
   856  005A                     _ge:	
   857  005A                     	ds	1
   858  005B                     _shi:	
   859  005B                     	ds	1
   860  005C                     _TX:	
   861  005C                     	ds	1
   862  005D                     _TZ:	
   863  005D                     	ds	1
   864  005E                     _THV:	
   865  005E                     	ds	1
   866  005F                     _TLV:	
   867  005F                     	ds	1
   868                           
   869                           	psect	bssBANK1
   870  00A0                     __pbssBANK1:	
   871  00A0                     _table1:	
   872  00A0                     	ds	7
   873  00A7                     _day_counter:	
   874  00A7                     	ds	2
   875  00A9                     _day_lower_upper:	
   876  00A9                     	ds	2
   877  00AB                     _night_lower_upper:	
   878  00AB                     	ds	2
   879  00AD                     _d_type:	
   880  00AD                     	ds	2
   881  00AF                     _day_of_week_var:	
   882  00AF                     	ds	2
   883  00B1                     _cold_low_night:	
   884  00B1                     	ds	2
   885  00B3                     _cold_high_night:	
   886  00B3                     	ds	2
   887  00B5                     _cold_low:	
   888  00B5                     	ds	2
   889  00B7                     _cold_counter:	
   890  00B7                     	ds	2
   891  00B9                     _heat_counter:	
   892  00B9                     	ds	2
   893                           
   894                           	psect	dataBANK1
   895  00BB                     __pdataBANK1:	
   896  00BB                     _table:	
   897  00BB                     	ds	8
   898                           
   899                           	psect	inittext
   900  11C7                     init_fetch0:	
   901                           ;	Called with low address in FSR and high address in W
   902                           
   903  11C7  087E               	movf	126,w
   904  11C8  008A               	movwf	10
   905  11C9  087F               	movf	127,w
   906  11CA  0082               	movwf	2
   907  11CB                     init_ram0:	
   908                           ;Called with:
   909                           ;	high address of idata address in btemp 
   910                           ;	low address of idata address in btemp+1 
   911                           ;	low address of data in FSR
   912                           ;	high address + 1 of data in btemp-1
   913                           
   914  11CB  21C7  160A  118A   	fcall	init_fetch0
   915  11CE  0080               	movwf	0
   916  11CF  0A84               	incf	4,f
   917  11D0  0804               	movf	4,w
   918  11D1  067D               	xorwf	125,w
   919  11D2  1903               	btfsc	3,2
   920  11D3  3400               	retlw	0
   921  11D4  0AFF               	incf	127,f
   922  11D5  1903               	btfsc	3,2
   923  11D6  0AFE               	incf	126,f
   924  11D7  29CB               	goto	init_ram0
   925                           
   926                           	psect	clrtext
   927  1183                     clear_ram0:	
   928                           ;	Called with FSR containing the base address, and
   929                           ;	W with the last address+1
   930                           
   931  1183  0064               	clrwdt	;clear the watchdog before getting into this loop
   932  1184                     clrloop0:	
   933  1184  0180               	clrf	0	;clear RAM location pointed to by FSR
   934  1185  0A84               	incf	4,f	;increment pointer
   935  1186  0604               	xorwf	4,w	;XOR with final address
   936  1187  1903               	btfsc	3,2	;have we reached the end yet?
   937  1188  3400               	retlw	0	;all done for this memory range, return
   938  1189  0604               	xorwf	4,w	;XOR again to restore value
   939  118A  2984               	goto	clrloop0	;do the next byte
   940                           
   941                           	psect	cstackCOMMON
   942  0070                     __pcstackCOMMON:	
   943  0070                     ?_init_temp:	
   944  0070                     ??_init_temp:	
   945                           ; 1 bytes @ 0x0
   946                           
   947  0070                     ?_set_time:	
   948                           ; 1 bytes @ 0x0
   949                           
   950  0070                     ?_ds1302_init:	
   951                           ; 1 bytes @ 0x0
   952                           
   953  0070                     ?_init:	
   954                           ; 1 bytes @ 0x0
   955                           
   956  0070                     ??_init:	
   957                           ; 1 bytes @ 0x0
   958                           
   959  0070                     ?_lcd_init:	
   960                           ; 1 bytes @ 0x0
   961                           
   962  0070                     ?_initialise_buttons:	
   963                           ; 1 bytes @ 0x0
   964                           
   965  0070                     ??_initialise_buttons:	
   966                           ; 1 bytes @ 0x0
   967                           
   968  0070                     ?_get_temp:	
   969                           ; 1 bytes @ 0x0
   970                           
   971  0070                     ?_get_time:	
   972                           ; 1 bytes @ 0x0
   973                           
   974  0070                     ?_write_cmd:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0070                     ?_write_char:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0070                     ?_display_temp:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0070                     ?_display_date:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0070                     ?_display_clock:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0070                     ?_thermometer_threshhold_settings:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0070                     ?_date_settings:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_time_settings:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_reset_alarm:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_set_beep_threshhold:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_delay_screen:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ??_delay_screen:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_delay_temp:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_delay2:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ??_delay2:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ?_time_write_1:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ??_time_write_1:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_time_read_1:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ??_time_read_1:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?_button_delay:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ??_button_delay:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ?_time_date_hex_terminator:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_time_date_delimiter:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_main:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_reset_temp:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_write_byte:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_read_byte:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?___lbdiv:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?___lbmod:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?___awmod:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?___lwmod:	
  1065                           ; 2 bytes @ 0x0
  1066                           
  1067  0070                     delay_temp@y:	
  1068                           ; 2 bytes @ 0x0
  1069                           
  1070  0070                     time_date_delimiter@hex:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     time_date_hex_terminator@limiter:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ___lbdiv@divisor:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ___lbmod@divisor:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     delay_screen@i:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     delay2@i:	
  1086                           ; 2 bytes @ 0x0
  1087                           
  1088  0070                     button_delay@i:	
  1089                           ; 2 bytes @ 0x0
  1090                           
  1091  0070                     ___awmod@divisor:	
  1092                           ; 2 bytes @ 0x0
  1093                           
  1094  0070                     ___lwmod@divisor:	
  1095                           ; 2 bytes @ 0x0
  1096                           
  1097                           
  1098                           ; 2 bytes @ 0x0
  1099  0070                     	ds	1
  1100  0071                     ??_delay_temp:	
  1101  0071                     ??_time_date_hex_terminator:	
  1102                           ; 1 bytes @ 0x1
  1103                           
  1104  0071                     ??___lbdiv:	
  1105                           ; 1 bytes @ 0x1
  1106                           
  1107  0071                     ??___lbmod:	
  1108                           ; 1 bytes @ 0x1
  1109                           
  1110  0071                     time_date_delimiter@limiter:	
  1111                           ; 1 bytes @ 0x1
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x1
  1115  0071                     	ds	1
  1116  0072                     ??_write_cmd:	
  1117  0072                     ??_write_char:	
  1118                           ; 1 bytes @ 0x2
  1119                           
  1120  0072                     ??_set_beep_threshhold:	
  1121                           ; 1 bytes @ 0x2
  1122                           
  1123  0072                     write_char@x:	
  1124                           ; 1 bytes @ 0x2
  1125                           
  1126  0072                     write_cmd@x:	
  1127                           ; 1 bytes @ 0x2
  1128                           
  1129  0072                     delay_temp@x:	
  1130                           ; 1 bytes @ 0x2
  1131                           
  1132  0072                     set_beep_threshhold@x:	
  1133                           ; 1 bytes @ 0x2
  1134                           
  1135  0072                     ___lbdiv@dividend:	
  1136                           ; 1 bytes @ 0x2
  1137                           
  1138  0072                     time_write_1@j:	
  1139                           ; 1 bytes @ 0x2
  1140                           
  1141  0072                     time_read_1@j:	
  1142                           ; 2 bytes @ 0x2
  1143                           
  1144  0072                     time_date_delimiter@type:	
  1145                           ; 2 bytes @ 0x2
  1146                           
  1147  0072                     ___awmod@dividend:	
  1148                           ; 2 bytes @ 0x2
  1149                           
  1150  0072                     ___lwmod@dividend:	
  1151                           ; 2 bytes @ 0x2
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x2
  1155  0072                     	ds	1
  1156  0073                     ??_lcd_init:	
  1157  0073                     ??_display_temp:	
  1158                           ; 1 bytes @ 0x3
  1159                           
  1160  0073                     ??_display_date:	
  1161                           ; 1 bytes @ 0x3
  1162                           
  1163  0073                     ??_display_clock:	
  1164                           ; 1 bytes @ 0x3
  1165                           
  1166  0073                     ?_set_lower_threshold:	
  1167                           ; 1 bytes @ 0x3
  1168                           
  1169  0073                     ?_set_upper_threshold:	
  1170                           ; 1 bytes @ 0x3
  1171                           
  1172  0073                     ?_cold_threshold:	
  1173                           ; 1 bytes @ 0x3
  1174                           
  1175  0073                     ??_reset_alarm:	
  1176                           ; 1 bytes @ 0x3
  1177                           
  1178  0073                     ?_display_day:	
  1179                           ; 1 bytes @ 0x3
  1180                           
  1181  0073                     delay_temp@z:	
  1182                           ; 1 bytes @ 0x3
  1183                           
  1184  0073                     time_date_hex_terminator@val:	
  1185                           ; 1 bytes @ 0x3
  1186                           
  1187  0073                     ___lbdiv@counter:	
  1188                           ; 1 bytes @ 0x3
  1189                           
  1190  0073                     set_upper_threshold@upper_val:	
  1191                           ; 1 bytes @ 0x3
  1192                           
  1193  0073                     cold_threshold@upper_val:	
  1194                           ; 2 bytes @ 0x3
  1195                           
  1196  0073                     set_lower_threshold@upper_val:	
  1197                           ; 2 bytes @ 0x3
  1198                           
  1199  0073                     display_day@num:	
  1200                           ; 2 bytes @ 0x3
  1201                           
  1202                           
  1203                           ; 2 bytes @ 0x3
  1204  0073                     	ds	1
  1205  0074                     ??_time_date_delimiter:	
  1206  0074                     ??_reset_temp:	
  1207                           ; 1 bytes @ 0x4
  1208                           
  1209  0074                     ??_write_byte:	
  1210                           ; 1 bytes @ 0x4
  1211                           
  1212  0074                     ??_read_byte:	
  1213                           ; 1 bytes @ 0x4
  1214                           
  1215  0074                     ??___awmod:	
  1216                           ; 1 bytes @ 0x4
  1217                           
  1218  0074                     ??___lwmod:	
  1219                           ; 1 bytes @ 0x4
  1220                           
  1221  0074                     time_write_1@time_tx:	
  1222                           ; 1 bytes @ 0x4
  1223                           
  1224  0074                     time_read_1@time_rx:	
  1225                           ; 1 bytes @ 0x4
  1226                           
  1227  0074                     ___lbdiv@quotient:	
  1228                           ; 1 bytes @ 0x4
  1229                           
  1230  0074                     ___lbmod@dividend:	
  1231                           ; 1 bytes @ 0x4
  1232                           
  1233                           
  1234                           ; 1 bytes @ 0x4
  1235  0074                     	ds	1
  1236  0075                     ??_set_time:	
  1237  0075                     ??_ds1302_init:	
  1238                           ; 1 bytes @ 0x5
  1239                           
  1240  0075                     ??_get_time:	
  1241                           ; 1 bytes @ 0x5
  1242                           
  1243  0075                     ??_display_day:	
  1244                           ; 1 bytes @ 0x5
  1245                           
  1246  0075                     reset_temp@presence:	
  1247                           ; 1 bytes @ 0x5
  1248                           
  1249  0075                     read_byte@value:	
  1250                           ; 1 bytes @ 0x5
  1251                           
  1252  0075                     ___awmod@counter:	
  1253                           ; 1 bytes @ 0x5
  1254                           
  1255  0075                     ___lbmod@counter:	
  1256                           ; 1 bytes @ 0x5
  1257                           
  1258  0075                     ___lwmod@counter:	
  1259                           ; 1 bytes @ 0x5
  1260                           
  1261  0075                     set_time@i:	
  1262                           ; 1 bytes @ 0x5
  1263                           
  1264  0075                     display_clock@i:	
  1265                           ; 2 bytes @ 0x5
  1266                           
  1267  0075                     display_date@i:	
  1268                           ; 2 bytes @ 0x5
  1269                           
  1270  0075                     set_upper_threshold@lower_val:	
  1271                           ; 2 bytes @ 0x5
  1272                           
  1273  0075                     cold_threshold@lower_val:	
  1274                           ; 2 bytes @ 0x5
  1275                           
  1276  0075                     set_lower_threshold@lower_val:	
  1277                           ; 2 bytes @ 0x5
  1278                           
  1279                           
  1280                           ; 2 bytes @ 0x5
  1281  0075                     	ds	1
  1282  0076                     ?___lwdiv:	
  1283  0076                     write_byte@temp:	
  1284                           ; 2 bytes @ 0x6
  1285                           
  1286  0076                     read_byte@i:	
  1287                           ; 1 bytes @ 0x6
  1288                           
  1289  0076                     time_date_delimiter@val:	
  1290                           ; 1 bytes @ 0x6
  1291                           
  1292  0076                     ___awmod@sign:	
  1293                           ; 1 bytes @ 0x6
  1294                           
  1295  0076                     ___lbmod@rem:	
  1296                           ; 1 bytes @ 0x6
  1297                           
  1298  0076                     get_time@i:	
  1299                           ; 1 bytes @ 0x6
  1300                           
  1301  0076                     ___lwdiv@divisor:	
  1302                           ; 2 bytes @ 0x6
  1303                           
  1304                           
  1305                           ; 2 bytes @ 0x6
  1306  0076                     	ds	1
  1307  0077                     ??_set_lower_threshold:	
  1308  0077                     ??_set_upper_threshold:	
  1309                           ; 1 bytes @ 0x7
  1310                           
  1311  0077                     ??_cold_threshold:	
  1312                           ; 1 bytes @ 0x7
  1313                           
  1314  0077                     ?_modulus_func:	
  1315                           ; 1 bytes @ 0x7
  1316                           
  1317  0077                     write_byte@val:	
  1318                           ; 2 bytes @ 0x7
  1319                           
  1320  0077                     modulus_func@x:	
  1321                           ; 1 bytes @ 0x7
  1322                           
  1323                           
  1324                           ; 2 bytes @ 0x7
  1325  0077                     	ds	1
  1326  0078                     write_byte@i:	
  1327  0078                     ___lwdiv@dividend:	
  1328                           ; 1 bytes @ 0x8
  1329                           
  1330                           
  1331                           ; 2 bytes @ 0x8
  1332  0078                     	ds	1
  1333  0079                     modulus_func@y:	
  1334                           
  1335                           ; 2 bytes @ 0x9
  1336  0079                     	ds	1
  1337  007A                     ??___lwdiv:	
  1338                           
  1339                           ; 1 bytes @ 0xA
  1340  007A                     	ds	1
  1341  007B                     ??_modulus_func:	
  1342  007B                     ??_incrementor:	
  1343                           ; 1 bytes @ 0xB
  1344                           
  1345  007B                     ___lwdiv@quotient:	
  1346                           ; 1 bytes @ 0xB
  1347                           
  1348                           
  1349                           ; 2 bytes @ 0xB
  1350  007B                     	ds	2
  1351  007D                     ___lwdiv@counter:	
  1352                           
  1353                           ; 1 bytes @ 0xD
  1354  007D                     	ds	1
  1355                           
  1356                           	psect	cstackBANK0
  1357  0060                     __pcstackBANK0:	
  1358  0060                     ??_get_temp:	
  1359  0060                     ?_incrementor:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0060                     incrementor@upper_val:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365                           
  1366                           ; 2 bytes @ 0x0
  1367  0060                     	ds	2
  1368  0062                     incrementor@lower_val:	
  1369                           
  1370                           ; 2 bytes @ 0x2
  1371  0062                     	ds	2
  1372  0064                     incrementor@z:	
  1373                           
  1374                           ; 1 bytes @ 0x4
  1375  0064                     	ds	1
  1376  0065                     ??_thermometer_threshhold_settings:	
  1377  0065                     ??_date_settings:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380  0065                     ??_time_settings:	
  1381                           ; 1 bytes @ 0x5
  1382                           
  1383                           
  1384                           ; 1 bytes @ 0x5
  1385  0065                     	ds	3
  1386  0068                     ??_main:	
  1387                           
  1388                           ; 1 bytes @ 0x8
  1389  0068                     	ds	5
  1390  006D                     main@i:	
  1391                           
  1392                           ; 2 bytes @ 0xD
  1393  006D                     	ds	2
  1394                           
  1395                           	psect	maintext
  1396  09F7                     __pmaintext:	
  1397 ;;
  1398 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1399 ;;
  1400 ;; *************** function _main *****************
  1401 ;; Defined at:
  1402 ;;		line 10 in file "mainLogic.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  i               2   13[BANK0 ] int 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : B00/0
  1413 ;;		On exit  : 200/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1416 ;;      Params:         0       0       0       0       0
  1417 ;;      Locals:         0       2       0       0       0
  1418 ;;      Temps:          0       5       0       0       0
  1419 ;;      Totals:         0       7       0       0       0
  1420 ;;Total ram usage:        7 bytes
  1421 ;; Hardware stack levels required when called:    4
  1422 ;; This function calls:
  1423 ;;		_cold_threshold
  1424 ;;		_date_settings
  1425 ;;		_display_clock
  1426 ;;		_display_date
  1427 ;;		_display_day
  1428 ;;		_display_temp
  1429 ;;		_ds1302_init
  1430 ;;		_get_temp
  1431 ;;		_get_time
  1432 ;;		_init
  1433 ;;		_init_temp
  1434 ;;		_initialise_buttons
  1435 ;;		_lcd_init
  1436 ;;		_modulus_func
  1437 ;;		_reset_alarm
  1438 ;;		_set_beep_threshhold
  1439 ;;		_set_lower_threshold
  1440 ;;		_set_time
  1441 ;;		_set_upper_threshold
  1442 ;;		_thermometer_threshhold_settings
  1443 ;;		_time_settings
  1444 ;;		_write_char
  1445 ;;		_write_cmd
  1446 ;; This function is called by:
  1447 ;;		Startup code after reset
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _main
  1453  09F7                     _main:	
  1454                           
  1455                           ;mainLogic.c: 11:     TRISB=0X02;
  1456                           
  1457                           ;incstack = 0
  1458                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1459  09F7  3002               	movlw	2
  1460  09F8  1683               	bsf	3,5	;RP0=1, select bank1
  1461  09F9  0086               	movwf	6	;volatile
  1462                           
  1463                           ;mainLogic.c: 12:     init_temp();
  1464  09FA  160A  118A  2176  120A  158A  	fcall	_init_temp
  1465                           
  1466                           ;mainLogic.c: 13:     set_time();
  1467  09FF  160A  118A  2345  120A  158A  	fcall	_set_time
  1468                           
  1469                           ;mainLogic.c: 14:     ds1302_init();
  1470  0A04  160A  118A  21A8  120A  158A  	fcall	_ds1302_init
  1471                           
  1472                           ;mainLogic.c: 16:     init();
  1473  0A09  160A  118A  217B  120A  158A  	fcall	_init
  1474                           
  1475                           ;mainLogic.c: 17:     lcd_init();
  1476  0A0E  160A  118A  22D8  120A  158A  	fcall	_lcd_init
  1477                           
  1478                           ;mainLogic.c: 18:     init_temp();
  1479  0A13  160A  118A  2176  120A  158A  	fcall	_init_temp
  1480                           
  1481                           ;mainLogic.c: 19:     initialise_buttons();
  1482  0A18  160A  118A  2214  120A  158A  	fcall	_initialise_buttons
  1483                           
  1484                           ;mainLogic.c: 20:     var1 = 3;
  1485  0A1D  3003               	movlw	3
  1486  0A1E  00E8               	movwf	??_main
  1487  0A1F  0868               	movf	??_main,w
  1488  0A20  00CF               	movwf	_var1
  1489                           
  1490                           ;mainLogic.c: 21:     var2 = 4;
  1491  0A21  3004               	movlw	4
  1492  0A22  00E8               	movwf	??_main
  1493  0A23  0868               	movf	??_main,w
  1494  0A24  00CE               	movwf	_var2
  1495                           
  1496                           ;mainLogic.c: 22:     var_night_low = 4;
  1497  0A25  3004               	movlw	4
  1498  0A26  00BA               	movwf	_var_night_low
  1499  0A27  3000               	movlw	0
  1500  0A28  00BB               	movwf	_var_night_low+1
  1501                           
  1502                           ;mainLogic.c: 23:     var_night_high = 2;
  1503  0A29  3002               	movlw	2
  1504  0A2A  00B8               	movwf	_var_night_high
  1505  0A2B  3000               	movlw	0
  1506  0A2C  00B9               	movwf	_var_night_high+1
  1507                           
  1508                           ;mainLogic.c: 24:     cold_high = 1;
  1509  0A2D  3001               	movlw	1
  1510  0A2E  00B6               	movwf	_cold_high
  1511  0A2F  3000               	movlw	0
  1512  0A30  00B7               	movwf	_cold_high+1
  1513                           
  1514                           ;mainLogic.c: 25:     cold_low = 9;
  1515  0A31  3009               	movlw	9
  1516  0A32  1683               	bsf	3,5	;RP0=1, select bank1
  1517  0A33  00B5               	movwf	_cold_low^(0+128)
  1518  0A34  3000               	movlw	0
  1519  0A35  00B6               	movwf	(_cold_low^(0+128)+1)
  1520  0A36                     l5155:	
  1521                           
  1522                           ;mainLogic.c: 28:     get_temp();
  1523  0A36  160A  118A  26F9  120A  158A  	fcall	_get_temp
  1524                           
  1525                           ;mainLogic.c: 29:     get_time();
  1526  0A3B  160A  118A  236D  120A  158A  	fcall	_get_time
  1527                           
  1528                           ;mainLogic.c: 30:     write_cmd(0x80);
  1529  0A40  3080               	movlw	128
  1530  0A41  160A  118A  223F  120A  158A  	fcall	_write_cmd
  1531                           
  1532                           ;mainLogic.c: 31:     write_char('T');
  1533  0A46  3054               	movlw	84
  1534  0A47  160A  118A  2228  120A  158A  	fcall	_write_char
  1535                           
  1536                           ;mainLogic.c: 32:     write_char('e');
  1537  0A4C  3065               	movlw	101
  1538  0A4D  160A  118A  2228  120A  158A  	fcall	_write_char
  1539                           
  1540                           ;mainLogic.c: 33:     write_char('m');
  1541  0A52  306D               	movlw	109
  1542  0A53  160A  118A  2228  120A  158A  	fcall	_write_char
  1543                           
  1544                           ;mainLogic.c: 34:     write_char('p');
  1545  0A58  3070               	movlw	112
  1546  0A59  160A  118A  2228  120A  158A  	fcall	_write_char
  1547                           
  1548                           ;mainLogic.c: 35:     write_char(':');
  1549  0A5E  303A               	movlw	58
  1550  0A5F  160A  118A  2228  120A  158A  	fcall	_write_char
  1551                           
  1552                           ;mainLogic.c: 36:     display_temp();
  1553  0A64  160A  118A  2273  120A  158A  	fcall	_display_temp
  1554                           
  1555                           ;mainLogic.c: 38:     write_cmd(0x90);
  1556  0A69  3090               	movlw	144
  1557  0A6A  160A  118A  223F  120A  158A  	fcall	_write_cmd
  1558                           
  1559                           ;mainLogic.c: 39:     write_char('D');
  1560  0A6F  3044               	movlw	68
  1561  0A70  160A  118A  2228  120A  158A  	fcall	_write_char
  1562                           
  1563                           ;mainLogic.c: 40:     write_char('a');
  1564  0A75  3061               	movlw	97
  1565  0A76  160A  118A  2228  120A  158A  	fcall	_write_char
  1566                           
  1567                           ;mainLogic.c: 41:     write_char('t');
  1568  0A7B  3074               	movlw	116
  1569  0A7C  160A  118A  2228  120A  158A  	fcall	_write_char
  1570                           
  1571                           ;mainLogic.c: 42:     write_char('e');
  1572  0A81  3065               	movlw	101
  1573  0A82  160A  118A  2228  120A  158A  	fcall	_write_char
  1574                           
  1575                           ;mainLogic.c: 43:     write_char(':');
  1576  0A87  303A               	movlw	58
  1577  0A88  160A  118A  2228  120A  158A  	fcall	_write_char
  1578                           
  1579                           ;mainLogic.c: 44:     write_char(' ');
  1580  0A8D  3020               	movlw	32
  1581  0A8E  160A  118A  2228  120A  158A  	fcall	_write_char
  1582                           
  1583                           ;mainLogic.c: 46:     display_date();
  1584  0A93  120A  158A  2003  120A  158A  	fcall	_display_date
  1585                           
  1586                           ;mainLogic.c: 48:     write_cmd(0x88);
  1587  0A98  3088               	movlw	136
  1588  0A99  160A  118A  223F  120A  158A  	fcall	_write_cmd
  1589                           
  1590                           ;mainLogic.c: 49:     write_char('T');
  1591  0A9E  3054               	movlw	84
  1592  0A9F  160A  118A  2228  120A  158A  	fcall	_write_char
  1593                           
  1594                           ;mainLogic.c: 50:     write_char('i');
  1595  0AA4  3069               	movlw	105
  1596  0AA5  160A  118A  2228  120A  158A  	fcall	_write_char
  1597                           
  1598                           ;mainLogic.c: 51:     write_char('m');
  1599  0AAA  306D               	movlw	109
  1600  0AAB  160A  118A  2228  120A  158A  	fcall	_write_char
  1601                           
  1602                           ;mainLogic.c: 52:     write_char('e');
  1603  0AB0  3065               	movlw	101
  1604  0AB1  160A  118A  2228  120A  158A  	fcall	_write_char
  1605                           
  1606                           ;mainLogic.c: 53:     write_char(':');
  1607  0AB6  303A               	movlw	58
  1608  0AB7  160A  118A  2228  120A  158A  	fcall	_write_char
  1609                           
  1610                           ;mainLogic.c: 54:     display_clock();
  1611  0ABC  160A  118A  2654  120A  158A  	fcall	_display_clock
  1612                           
  1613                           ;mainLogic.c: 55:     thermometer_threshhold_settings();
  1614  0AC1  120A  158A  23E5  120A  158A  	fcall	_thermometer_threshhold_settings
  1615                           
  1616                           ;mainLogic.c: 56:     date_settings();
  1617  0AC6  120A  118A  2385  120A  158A  	fcall	_date_settings
  1618                           
  1619                           ;mainLogic.c: 57:     time_settings();
  1620  0ACB  120A  118A  2086  120A  158A  	fcall	_time_settings
  1621                           
  1622                           ;mainLogic.c: 58:     write_cmd(0x98);
  1623  0AD0  3098               	movlw	152
  1624  0AD1  160A  118A  223F  120A  158A  	fcall	_write_cmd
  1625                           
  1626                           ;mainLogic.c: 60:      if((temp_high+'0')<= 1 && (temp_low + '0') < 8){
  1627  0AD6  084B               	movf	_temp_high,w
  1628  0AD7  3E30               	addlw	48
  1629  0AD8  00E8               	movwf	??_main
  1630  0AD9  3000               	movlw	0
  1631  0ADA  1803               	skipnc
  1632  0ADB  3001               	movlw	1
  1633  0ADC  00E9               	movwf	??_main+1
  1634  0ADD  3000               	movlw	0
  1635  0ADE  0269               	subwf	??_main+1,w
  1636  0ADF  3002               	movlw	2
  1637  0AE0  1903               	skipnz
  1638  0AE1  0268               	subwf	??_main,w
  1639  0AE2  1803               	skipnc
  1640  0AE3  2B2F               	goto	l5217
  1641  0AE4  084C               	movf	_temp_low,w
  1642  0AE5  3E30               	addlw	48
  1643  0AE6  00E8               	movwf	??_main
  1644  0AE7  3000               	movlw	0
  1645  0AE8  1803               	skipnc
  1646  0AE9  3001               	movlw	1
  1647  0AEA  00E9               	movwf	??_main+1
  1648  0AEB  3000               	movlw	0
  1649  0AEC  0269               	subwf	??_main+1,w
  1650  0AED  3008               	movlw	8
  1651  0AEE  1903               	skipnz
  1652  0AEF  0268               	subwf	??_main,w
  1653  0AF0  1803               	skipnc
  1654  0AF1  2B2F               	goto	l5217
  1655                           
  1656                           ;mainLogic.c: 61:     alarm__ = set_lower_threshold(var1,var2);
  1657  0AF2  084F               	movf	_var1,w
  1658  0AF3  00E8               	movwf	??_main
  1659  0AF4  01E9               	clrf	??_main+1
  1660  0AF5  0868               	movf	??_main,w
  1661  0AF6  00F3               	movwf	set_lower_threshold@upper_val
  1662  0AF7  0869               	movf	??_main+1,w
  1663  0AF8  00F4               	movwf	set_lower_threshold@upper_val+1
  1664  0AF9  084E               	movf	_var2,w
  1665  0AFA  00EA               	movwf	??_main+2
  1666  0AFB  01EB               	clrf	??_main+3
  1667  0AFC  086A               	movf	??_main+2,w
  1668  0AFD  00F5               	movwf	set_lower_threshold@lower_val
  1669  0AFE  086B               	movf	??_main+3,w
  1670  0AFF  00F6               	movwf	set_lower_threshold@lower_val+1
  1671  0B00  160A  118A  2502  120A  158A  	fcall	_set_lower_threshold
  1672  0B05  00EC               	movwf	??_main+4
  1673  0B06  086C               	movf	??_main+4,w
  1674  0B07  00CD               	movwf	_alarm__
  1675                           
  1676                           ;mainLogic.c: 62:     alarm__ = set_upper_threshold(var1,var2);
  1677  0B08  084F               	movf	_var1,w
  1678  0B09  00E8               	movwf	??_main
  1679  0B0A  01E9               	clrf	??_main+1
  1680  0B0B  0868               	movf	??_main,w
  1681  0B0C  00F3               	movwf	set_upper_threshold@upper_val
  1682  0B0D  0869               	movf	??_main+1,w
  1683  0B0E  00F4               	movwf	set_upper_threshold@upper_val+1
  1684  0B0F  084E               	movf	_var2,w
  1685  0B10  00EA               	movwf	??_main+2
  1686  0B11  01EB               	clrf	??_main+3
  1687  0B12  086A               	movf	??_main+2,w
  1688  0B13  00F5               	movwf	set_upper_threshold@lower_val
  1689  0B14  086B               	movf	??_main+3,w
  1690  0B15  00F6               	movwf	set_upper_threshold@lower_val+1
  1691  0B16  160A  118A  2596  120A  158A  	fcall	_set_upper_threshold
  1692  0B1B  00EC               	movwf	??_main+4
  1693  0B1C  086C               	movf	??_main+4,w
  1694  0B1D  00CD               	movwf	_alarm__
  1695                           
  1696                           ;mainLogic.c: 63:     alarm__ = cold_threshold(cold_high,cold_low);
  1697  0B1E  0837               	movf	_cold_high+1,w
  1698  0B1F  00F4               	movwf	cold_threshold@upper_val+1
  1699  0B20  0836               	movf	_cold_high,w
  1700  0B21  00F3               	movwf	cold_threshold@upper_val
  1701  0B22  1683               	bsf	3,5	;RP0=1, select bank1
  1702  0B23  0836               	movf	(_cold_low+1)^(0+128),w
  1703  0B24  00F6               	movwf	cold_threshold@lower_val+1
  1704  0B25  0835               	movf	_cold_low^(0+128),w
  1705  0B26  00F5               	movwf	cold_threshold@lower_val
  1706  0B27  160A  118A  25ED  120A  158A  	fcall	_cold_threshold
  1707  0B2C  00E8               	movwf	??_main
  1708  0B2D  0868               	movf	??_main,w
  1709  0B2E  00CD               	movwf	_alarm__
  1710  0B2F                     l5217:	
  1711                           
  1712                           ;mainLogic.c: 66:     if((temp_high+'0') >= 1 && (temp_low + '0') >= 8){
  1713  0B2F  084B               	movf	_temp_high,w
  1714  0B30  3E30               	addlw	48
  1715  0B31  00E8               	movwf	??_main
  1716  0B32  3000               	movlw	0
  1717  0B33  1803               	skipnc
  1718  0B34  3001               	movlw	1
  1719  0B35  00E9               	movwf	??_main+1
  1720  0B36  0868               	movf	??_main,w
  1721  0B37  0469               	iorwf	??_main+1,w
  1722  0B38  1903               	btfsc	3,2
  1723  0B39  2B76               	goto	l173
  1724  0B3A  084C               	movf	_temp_low,w
  1725  0B3B  3E30               	addlw	48
  1726  0B3C  00E8               	movwf	??_main
  1727  0B3D  3000               	movlw	0
  1728  0B3E  1803               	skipnc
  1729  0B3F  3001               	movlw	1
  1730  0B40  00E9               	movwf	??_main+1
  1731  0B41  3000               	movlw	0
  1732  0B42  0269               	subwf	??_main+1,w
  1733  0B43  3008               	movlw	8
  1734  0B44  1903               	skipnz
  1735  0B45  0268               	subwf	??_main,w
  1736  0B46  1C03               	skipc
  1737  0B47  2B76               	goto	l173
  1738                           
  1739                           ;mainLogic.c: 67:     alarm__ = set_lower_threshold(var_night_high,var_night_low);
  1740  0B48  0839               	movf	_var_night_high+1,w
  1741  0B49  00F4               	movwf	set_lower_threshold@upper_val+1
  1742  0B4A  0838               	movf	_var_night_high,w
  1743  0B4B  00F3               	movwf	set_lower_threshold@upper_val
  1744  0B4C  083B               	movf	_var_night_low+1,w
  1745  0B4D  00F6               	movwf	set_lower_threshold@lower_val+1
  1746  0B4E  083A               	movf	_var_night_low,w
  1747  0B4F  00F5               	movwf	set_lower_threshold@lower_val
  1748  0B50  160A  118A  2502  120A  158A  	fcall	_set_lower_threshold
  1749  0B55  00E8               	movwf	??_main
  1750  0B56  0868               	movf	??_main,w
  1751  0B57  00CD               	movwf	_alarm__
  1752                           
  1753                           ;mainLogic.c: 68:     alarm__ = set_upper_threshold(var_night_high,var_night_low);
  1754  0B58  0839               	movf	_var_night_high+1,w
  1755  0B59  00F4               	movwf	set_upper_threshold@upper_val+1
  1756  0B5A  0838               	movf	_var_night_high,w
  1757  0B5B  00F3               	movwf	set_upper_threshold@upper_val
  1758  0B5C  083B               	movf	_var_night_low+1,w
  1759  0B5D  00F6               	movwf	set_upper_threshold@lower_val+1
  1760  0B5E  083A               	movf	_var_night_low,w
  1761  0B5F  00F5               	movwf	set_upper_threshold@lower_val
  1762  0B60  160A  118A  2596  120A  158A  	fcall	_set_upper_threshold
  1763  0B65  00E8               	movwf	??_main
  1764  0B66  0868               	movf	??_main,w
  1765  0B67  00CD               	movwf	_alarm__
  1766                           
  1767                           ;mainLogic.c: 69:     alarm__ = cold_threshold(cold_high_night,cold_low_night);
  1768  0B68  3000               	movlw	0
  1769  0B69  00F3               	movwf	cold_threshold@upper_val
  1770  0B6A  00F4               	movwf	cold_threshold@upper_val+1
  1771  0B6B  3000               	movlw	0
  1772  0B6C  00F5               	movwf	cold_threshold@lower_val
  1773  0B6D  00F6               	movwf	cold_threshold@lower_val+1
  1774  0B6E  160A  118A  25ED  120A  158A  	fcall	_cold_threshold
  1775  0B73  00E8               	movwf	??_main
  1776  0B74  0868               	movf	??_main,w
  1777  0B75  00CD               	movwf	_alarm__
  1778  0B76                     l173:	
  1779                           ;mainLogic.c: 70:     }
  1780                           
  1781                           
  1782                           ;mainLogic.c: 71:     alarm__ = reset_alarm();
  1783  0B76  160A  118A  2399  120A  158A  	fcall	_reset_alarm
  1784  0B7B  00E8               	movwf	??_main
  1785  0B7C  0868               	movf	??_main,w
  1786  0B7D  00CD               	movwf	_alarm__
  1787                           
  1788                           ;mainLogic.c: 72:     set_beep_threshhold(alarm__);
  1789  0B7E  084D               	movf	_alarm__,w
  1790  0B7F  160A  118A  2256  120A  158A  	fcall	_set_beep_threshhold
  1791                           
  1792                           ;mainLogic.c: 73:     write_char(' ');
  1793  0B84  3020               	movlw	32
  1794  0B85  160A  118A  2228  120A  158A  	fcall	_write_char
  1795                           
  1796                           ;mainLogic.c: 74:     write_char('H');
  1797  0B8A  3048               	movlw	72
  1798  0B8B  160A  118A  2228  120A  158A  	fcall	_write_char
  1799                           
  1800                           ;mainLogic.c: 75:     write_char(':');
  1801  0B90  303A               	movlw	58
  1802  0B91  160A  118A  2228  120A  158A  	fcall	_write_char
  1803                           
  1804                           ;mainLogic.c: 76:     write_char(heater_state);
  1805  0B96  0851               	movf	_heater_state,w
  1806  0B97  160A  118A  2228  120A  158A  	fcall	_write_char
  1807                           
  1808                           ;mainLogic.c: 77:     write_char('C');
  1809  0B9C  3043               	movlw	67
  1810  0B9D  160A  118A  2228  120A  158A  	fcall	_write_char
  1811                           
  1812                           ;mainLogic.c: 78:     write_char(':');
  1813  0BA2  303A               	movlw	58
  1814  0BA3  160A  118A  2228  120A  158A  	fcall	_write_char
  1815                           
  1816                           ;mainLogic.c: 79:     write_char(cooler_state);
  1817  0BA8  0850               	movf	_cooler_state,w
  1818  0BA9  160A  118A  2228  120A  158A  	fcall	_write_char
  1819                           
  1820                           ;mainLogic.c: 80:     for(int i = 0; i < 3; i++)
  1821  0BAE  01ED               	clrf	main@i
  1822  0BAF  01EE               	clrf	main@i+1
  1823  0BB0                     l5229:	
  1824                           
  1825                           ;mainLogic.c: 81:     write_char(' ');
  1826  0BB0  3020               	movlw	32
  1827  0BB1  160A  118A  2228  120A  158A  	fcall	_write_char
  1828  0BB6  3001               	movlw	1
  1829  0BB7  07ED               	addwf	main@i,f
  1830  0BB8  1803               	skipnc
  1831  0BB9  0AEE               	incf	main@i+1,f
  1832  0BBA  3000               	movlw	0
  1833  0BBB  07EE               	addwf	main@i+1,f
  1834  0BBC  086E               	movf	main@i+1,w
  1835  0BBD  3A80               	xorlw	128
  1836  0BBE  00FF               	movwf	127
  1837  0BBF  3080               	movlw	128
  1838  0BC0  027F               	subwf	127,w
  1839  0BC1  1D03               	skipz
  1840  0BC2  2BC5               	goto	u4425
  1841  0BC3  3003               	movlw	3
  1842  0BC4  026D               	subwf	main@i,w
  1843  0BC5                     u4425:	
  1844  0BC5  1C03               	skipc
  1845  0BC6  2BB0               	goto	l5229
  1846                           
  1847                           ;mainLogic.c: 82:     day_counter = modulus_func(day_low,8);
  1848  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0BC9  082B               	movf	_day_low+1,w
  1851  0BCA  00F8               	movwf	modulus_func@x+1
  1852  0BCB  082A               	movf	_day_low,w
  1853  0BCC  00F7               	movwf	modulus_func@x
  1854  0BCD  3008               	movlw	8
  1855  0BCE  00F9               	movwf	modulus_func@y
  1856  0BCF  3000               	movlw	0
  1857  0BD0  00FA               	movwf	modulus_func@y+1
  1858  0BD1  160A  118A  21B7  120A  158A  	fcall	_modulus_func
  1859  0BD6  0878               	movf	?_modulus_func+1,w
  1860  0BD7  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0BD8  00A8               	movwf	(_day_counter+1)^(0+128)
  1862  0BD9  0877               	movf	?_modulus_func,w
  1863  0BDA  00A7               	movwf	_day_counter^(0+128)
  1864                           
  1865                           ;mainLogic.c: 83:     display_day(day_counter);
  1866  0BDB  0828               	movf	(_day_counter+1)^(0+128),w
  1867  0BDC  00F4               	movwf	display_day@num+1
  1868  0BDD  0827               	movf	_day_counter^(0+128),w
  1869  0BDE  00F3               	movwf	display_day@num
  1870  0BDF  120A  118A  200D  120A  158A  	fcall	_display_day
  1871  0BE4  2A36               	goto	l5155
  1872  0BE5                     __end_of_main:	
  1873                           
  1874                           	psect	text1
  1875  0086                     __ptext1:	
  1876 ;; *************** function _time_settings *****************
  1877 ;; Defined at:
  1878 ;;		line 316 in file "Button_src.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 300/0
  1889 ;;		On exit  : 300/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0
  1894 ;;      Temps:          0       3       0       0       0
  1895 ;;      Totals:         0       3       0       0       0
  1896 ;;Total ram usage:        3 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    3
  1899 ;; This function calls:
  1900 ;;		_button_delay
  1901 ;;		_incrementor
  1902 ;;		_modulus_func
  1903 ;;		_set_time
  1904 ;;		_time_date_delimiter
  1905 ;;		_time_date_hex_terminator
  1906 ;;		_write_char
  1907 ;;		_write_cmd
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           
  1914                           ;psect for function _time_settings
  1915  0086                     _time_settings:	
  1916                           
  1917                           ;Button_src.c: 317:  RC0 = 1;
  1918                           
  1919                           ;incstack = 0
  1920                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1921  0086  1407               	bsf	7,0	;volatile
  1922                           
  1923                           ;Button_src.c: 318:  RC1 = 1;
  1924  0087  1487               	bsf	7,1	;volatile
  1925                           
  1926                           ;Button_src.c: 319:  RC2 = 0;
  1927  0088  1107               	bcf	7,2	;volatile
  1928                           
  1929                           ;Button_src.c: 320:  RC3 = 1;
  1930  0089  1587               	bsf	7,3	;volatile
  1931                           
  1932                           ;Button_src.c: 321:   if (RC4 == 0){
  1933  008A  1A07               	btfsc	7,4	;volatile
  1934  008B  0008               	return
  1935                           
  1936                           ;Button_src.c: 322:       write_cmd(0x1);
  1937  008C  3001               	movlw	1
  1938  008D  160A  118A  223F  120A  118A  	fcall	_write_cmd
  1939  0092                     l785:	
  1940                           ;Button_src.c: 323:       for(;;){
  1941                           
  1942                           
  1943                           ;Button_src.c: 324:             write_cmd(0x80);
  1944  0092  3080               	movlw	128
  1945  0093  160A  118A  223F  120A  118A  	fcall	_write_cmd
  1946                           
  1947                           ;Button_src.c: 325:             write_char('T');
  1948  0098  3054               	movlw	84
  1949  0099  160A  118A  2228  120A  118A  	fcall	_write_char
  1950                           
  1951                           ;Button_src.c: 326:             write_char('i');
  1952  009E  3069               	movlw	105
  1953  009F  160A  118A  2228  120A  118A  	fcall	_write_char
  1954                           
  1955                           ;Button_src.c: 327:             write_char('m');
  1956  00A4  306D               	movlw	109
  1957  00A5  160A  118A  2228  120A  118A  	fcall	_write_char
  1958                           
  1959                           ;Button_src.c: 328:             write_char('e');
  1960  00AA  3065               	movlw	101
  1961  00AB  160A  118A  2228  120A  118A  	fcall	_write_char
  1962                           
  1963                           ;Button_src.c: 329:             write_char('_');
  1964  00B0  305F               	movlw	95
  1965  00B1  160A  118A  2228  120A  118A  	fcall	_write_char
  1966                           
  1967                           ;Button_src.c: 330:             write_char('S');
  1968  00B6  3053               	movlw	83
  1969  00B7  160A  118A  2228  120A  118A  	fcall	_write_char
  1970                           
  1971                           ;Button_src.c: 331:             write_char('e');
  1972  00BC  3065               	movlw	101
  1973  00BD  160A  118A  2228  120A  118A  	fcall	_write_char
  1974                           
  1975                           ;Button_src.c: 332:             write_char('t');
  1976  00C2  3074               	movlw	116
  1977  00C3  160A  118A  2228  120A  118A  	fcall	_write_char
  1978                           
  1979                           ;Button_src.c: 333:             write_char('t');
  1980  00C8  3074               	movlw	116
  1981  00C9  160A  118A  2228  120A  118A  	fcall	_write_char
  1982                           
  1983                           ;Button_src.c: 334:             write_char('i');
  1984  00CE  3069               	movlw	105
  1985  00CF  160A  118A  2228  120A  118A  	fcall	_write_char
  1986                           
  1987                           ;Button_src.c: 335:             write_char('n');
  1988  00D4  306E               	movlw	110
  1989  00D5  160A  118A  2228  120A  118A  	fcall	_write_char
  1990                           
  1991                           ;Button_src.c: 336:             write_char('g');
  1992  00DA  3067               	movlw	103
  1993  00DB  160A  118A  2228  120A  118A  	fcall	_write_char
  1994                           
  1995                           ;Button_src.c: 337:             write_char('s');
  1996  00E0  3073               	movlw	115
  1997  00E1  160A  118A  2228  120A  118A  	fcall	_write_char
  1998                           
  1999                           ;Button_src.c: 339:             RC0 = 1;
  2000  00E6  1407               	bsf	7,0	;volatile
  2001                           
  2002                           ;Button_src.c: 340:             RC1 = 0;
  2003  00E7  1087               	bcf	7,1	;volatile
  2004                           
  2005                           ;Button_src.c: 341:             RC2 = 1;
  2006  00E8  1507               	bsf	7,2	;volatile
  2007                           
  2008                           ;Button_src.c: 342:             RC3 = 1;
  2009  00E9  1587               	bsf	7,3	;volatile
  2010                           
  2011                           ;Button_src.c: 344:             if(RC7 == 0 && b =='x'){
  2012  00EA  1B87               	btfsc	7,7	;volatile
  2013  00EB  295D               	goto	l4845
  2014  00EC  3078               	movlw	120
  2015  00ED  0649               	xorwf	_b,w
  2016  00EE  1D03               	btfss	3,2
  2017  00EF  295D               	goto	l4845
  2018                           
  2019                           ;Button_src.c: 345:                 if(stats == 1)
  2020  00F0  0326               	decf	_stats,w
  2021  00F1  0427               	iorwf	_stats+1,w
  2022  00F2  1D03               	btfss	3,2
  2023  00F3  28F8               	goto	l787
  2024                           
  2025                           ;Button_src.c: 346:                    a++;
  2026  00F4  3001               	movlw	1
  2027  00F5  00E5               	movwf	??_time_settings
  2028  00F6  0865               	movf	??_time_settings,w
  2029  00F7  07CA               	addwf	_a,f
  2030  00F8                     l787:	
  2031                           
  2032                           ;Button_src.c: 347:                 if(stats == 0){
  2033  00F8  0826               	movf	_stats,w
  2034  00F9  0427               	iorwf	_stats+1,w
  2035  00FA  1D03               	btfss	3,2
  2036  00FB  2900               	goto	l788
  2037                           
  2038                           ;Button_src.c: 348:                    stats = 1;
  2039  00FC  3001               	movlw	1
  2040  00FD  00A6               	movwf	_stats
  2041  00FE  3000               	movlw	0
  2042  00FF  00A7               	movwf	_stats+1
  2043  0100                     l788:	
  2044                           ;Button_src.c: 349:                 }
  2045                           
  2046                           
  2047                           ;Button_src.c: 351:                     x++ ;
  2048  0100  3001               	movlw	1
  2049  0101  07B0               	addwf	_x,f
  2050  0102  1803               	skipnc
  2051  0103  0AB1               	incf	_x+1,f
  2052  0104  3000               	movlw	0
  2053  0105  07B1               	addwf	_x+1,f
  2054                           
  2055                           ;Button_src.c: 352:                     x = modulus_func(x,10);
  2056  0106  0831               	movf	_x+1,w
  2057  0107  00F8               	movwf	modulus_func@x+1
  2058  0108  0830               	movf	_x,w
  2059  0109  00F7               	movwf	modulus_func@x
  2060  010A  300A               	movlw	10
  2061  010B  00F9               	movwf	modulus_func@y
  2062  010C  3000               	movlw	0
  2063  010D  00FA               	movwf	modulus_func@y+1
  2064  010E  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  2065  0113  0878               	movf	?_modulus_func+1,w
  2066  0114  00B1               	movwf	_x+1
  2067  0115  0877               	movf	?_modulus_func,w
  2068  0116  00B0               	movwf	_x
  2069                           
  2070                           ;Button_src.c: 353:                     if (p == 1){
  2071  0117  0324               	decf	_p,w
  2072  0118  0425               	iorwf	_p+1,w
  2073  0119  1D03               	btfss	3,2
  2074  011A  2934               	goto	l4831
  2075                           
  2076                           ;Button_src.c: 354:                         y = incrementor(y,x,'0');
  2077  011B  082F               	movf	_y+1,w
  2078  011C  00E1               	movwf	incrementor@upper_val+1
  2079  011D  082E               	movf	_y,w
  2080  011E  00E0               	movwf	incrementor@upper_val
  2081  011F  0831               	movf	_x+1,w
  2082  0120  00E3               	movwf	incrementor@lower_val+1
  2083  0121  0830               	movf	_x,w
  2084  0122  00E2               	movwf	incrementor@lower_val
  2085  0123  3030               	movlw	48
  2086  0124  00E5               	movwf	??_time_settings
  2087  0125  0865               	movf	??_time_settings,w
  2088  0126  00E4               	movwf	incrementor@z
  2089  0127  160A  118A  22FB  120A  118A  	fcall	_incrementor
  2090  012C  00E6               	movwf	??_time_settings+1
  2091  012D  01E7               	clrf	??_time_settings+2
  2092  012E  0866               	movf	??_time_settings+1,w
  2093  012F  00AE               	movwf	_y
  2094  0130  0867               	movf	??_time_settings+2,w
  2095  0131  00AF               	movwf	_y+1
  2096                           
  2097                           ;Button_src.c: 355:                         p = 0;
  2098  0132  01A4               	clrf	_p
  2099  0133  01A5               	clrf	_p+1
  2100  0134                     l4831:	
  2101                           
  2102                           ;Button_src.c: 357:                     if (x == 9){
  2103  0134  3009               	movlw	9
  2104  0135  0630               	xorwf	_x,w
  2105  0136  0431               	iorwf	_x+1,w
  2106  0137  1D03               	btfss	3,2
  2107  0138  293D               	goto	l4835
  2108                           
  2109                           ;Button_src.c: 358:                         p = 1;
  2110  0139  3001               	movlw	1
  2111  013A  00A4               	movwf	_p
  2112  013B  3000               	movlw	0
  2113  013C  00A5               	movwf	_p+1
  2114  013D                     l4835:	
  2115                           
  2116                           ;Button_src.c: 362:                     a = time_date_hex_terminator(a,'T');
  2117  013D  3054               	movlw	84
  2118  013E  00E5               	movwf	??_time_settings
  2119  013F  0865               	movf	??_time_settings,w
  2120  0140  00F0               	movwf	time_date_hex_terminator@limiter
  2121  0141  084A               	movf	_a,w
  2122  0142  160A  118A  2199  120A  118A  	fcall	_time_date_hex_terminator
  2123  0147  00E6               	movwf	??_time_settings+1
  2124  0148  0866               	movf	??_time_settings+1,w
  2125  0149  00CA               	movwf	_a
  2126                           
  2127                           ;Button_src.c: 363:                     if(y == 2 && x == 4){
  2128  014A  3002               	movlw	2
  2129  014B  062E               	xorwf	_y,w
  2130  014C  042F               	iorwf	_y+1,w
  2131  014D  1D03               	btfss	3,2
  2132  014E  2958               	goto	l4843
  2133  014F  3004               	movlw	4
  2134  0150  0630               	xorwf	_x,w
  2135  0151  0431               	iorwf	_x+1,w
  2136  0152  1D03               	btfss	3,2
  2137  0153  2958               	goto	l4843
  2138                           
  2139                           ;Button_src.c: 364:                         x = 0;
  2140  0154  01B0               	clrf	_x
  2141  0155  01B1               	clrf	_x+1
  2142                           
  2143                           ;Button_src.c: 365:                         y = 0;
  2144  0156  01AE               	clrf	_y
  2145  0157  01AF               	clrf	_y+1
  2146  0158                     l4843:	
  2147                           
  2148                           ;Button_src.c: 367:                     button_delay();
  2149  0158  160A  118A  21EC  120A  118A  	fcall	_button_delay
  2150  015D                     l4845:	
  2151                           
  2152                           ;Button_src.c: 369:             if(RC7==0 && b == 'y'){
  2153  015D  1283               	bcf	3,5	;RP0=0, select bank0
  2154  015E  1303               	bcf	3,6	;RP1=0, select bank0
  2155  015F  1B87               	btfsc	7,7	;volatile
  2156  0160  29C4               	goto	l4877
  2157  0161  3079               	movlw	121
  2158  0162  0649               	xorwf	_b,w
  2159  0163  1D03               	btfss	3,2
  2160  0164  29C4               	goto	l4877
  2161                           
  2162                           ;Button_src.c: 370:                  if(stats == 1)
  2163  0165  0326               	decf	_stats,w
  2164  0166  0427               	iorwf	_stats+1,w
  2165  0167  1D03               	btfss	3,2
  2166  0168  296D               	goto	l793
  2167                           
  2168                           ;Button_src.c: 371:                    c++;
  2169  0169  3001               	movlw	1
  2170  016A  00E5               	movwf	??_time_settings
  2171  016B  0865               	movf	??_time_settings,w
  2172  016C  07C8               	addwf	_c,f
  2173  016D                     l793:	
  2174                           
  2175                           ;Button_src.c: 372:                 if(stats == 0){
  2176  016D  0826               	movf	_stats,w
  2177  016E  0427               	iorwf	_stats+1,w
  2178  016F  1D03               	btfss	3,2
  2179  0170  2975               	goto	l794
  2180                           
  2181                           ;Button_src.c: 373:                     stats = 1;
  2182  0171  3001               	movlw	1
  2183  0172  00A6               	movwf	_stats
  2184  0173  3000               	movlw	0
  2185  0174  00A7               	movwf	_stats+1
  2186  0175                     l794:	
  2187                           ;Button_src.c: 374:                 }
  2188                           
  2189                           
  2190                           ;Button_src.c: 376:                     t++;
  2191  0175  3001               	movlw	1
  2192  0176  07B4               	addwf	_t,f
  2193  0177  1803               	skipnc
  2194  0178  0AB5               	incf	_t+1,f
  2195  0179  3000               	movlw	0
  2196  017A  07B5               	addwf	_t+1,f
  2197                           
  2198                           ;Button_src.c: 377:                     t = modulus_func(t,10);
  2199  017B  0835               	movf	_t+1,w
  2200  017C  00F8               	movwf	modulus_func@x+1
  2201  017D  0834               	movf	_t,w
  2202  017E  00F7               	movwf	modulus_func@x
  2203  017F  300A               	movlw	10
  2204  0180  00F9               	movwf	modulus_func@y
  2205  0181  3000               	movlw	0
  2206  0182  00FA               	movwf	modulus_func@y+1
  2207  0183  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  2208  0188  0878               	movf	?_modulus_func+1,w
  2209  0189  00B5               	movwf	_t+1
  2210  018A  0877               	movf	?_modulus_func,w
  2211  018B  00B4               	movwf	_t
  2212                           
  2213                           ;Button_src.c: 378:                       if (p == 1){
  2214  018C  0324               	decf	_p,w
  2215  018D  0425               	iorwf	_p+1,w
  2216  018E  1D03               	btfss	3,2
  2217  018F  29A9               	goto	l4863
  2218                           
  2219                           ;Button_src.c: 379:                         w = incrementor(w,t,'0');
  2220  0190  0833               	movf	_w+1,w
  2221  0191  00E1               	movwf	incrementor@upper_val+1
  2222  0192  0832               	movf	_w,w
  2223  0193  00E0               	movwf	incrementor@upper_val
  2224  0194  0835               	movf	_t+1,w
  2225  0195  00E3               	movwf	incrementor@lower_val+1
  2226  0196  0834               	movf	_t,w
  2227  0197  00E2               	movwf	incrementor@lower_val
  2228  0198  3030               	movlw	48
  2229  0199  00E5               	movwf	??_time_settings
  2230  019A  0865               	movf	??_time_settings,w
  2231  019B  00E4               	movwf	incrementor@z
  2232  019C  160A  118A  22FB  120A  118A  	fcall	_incrementor
  2233  01A1  00E6               	movwf	??_time_settings+1
  2234  01A2  01E7               	clrf	??_time_settings+2
  2235  01A3  0866               	movf	??_time_settings+1,w
  2236  01A4  00B2               	movwf	_w
  2237  01A5  0867               	movf	??_time_settings+2,w
  2238  01A6  00B3               	movwf	_w+1
  2239                           
  2240                           ;Button_src.c: 380:                         p = 0;
  2241  01A7  01A4               	clrf	_p
  2242  01A8  01A5               	clrf	_p+1
  2243  01A9                     l4863:	
  2244                           
  2245                           ;Button_src.c: 382:                     if (t == 9){
  2246  01A9  3009               	movlw	9
  2247  01AA  0634               	xorwf	_t,w
  2248  01AB  0435               	iorwf	_t+1,w
  2249  01AC  1D03               	btfss	3,2
  2250  01AD  29B2               	goto	l4867
  2251                           
  2252                           ;Button_src.c: 383:                         p = 1;
  2253  01AE  3001               	movlw	1
  2254  01AF  00A4               	movwf	_p
  2255  01B0  3000               	movlw	0
  2256  01B1  00A5               	movwf	_p+1
  2257  01B2                     l4867:	
  2258                           
  2259                           ;Button_src.c: 386:                     if(c == (0x59 + 1)){
  2260  01B2  305A               	movlw	90
  2261  01B3  0648               	xorwf	_c,w
  2262  01B4  1903               	btfsc	3,2
  2263                           
  2264                           ;Button_src.c: 387:                         c = 0x00;
  2265  01B5  01C8               	clrf	_c
  2266                           
  2267                           ;Button_src.c: 389:                     if(w == 6){
  2268  01B6  3006               	movlw	6
  2269  01B7  0632               	xorwf	_w,w
  2270  01B8  0433               	iorwf	_w+1,w
  2271  01B9  1D03               	btfss	3,2
  2272  01BA  29BF               	goto	l4875
  2273                           
  2274                           ;Button_src.c: 390:                         w = 0;
  2275  01BB  01B2               	clrf	_w
  2276  01BC  01B3               	clrf	_w+1
  2277                           
  2278                           ;Button_src.c: 391:                         t = 0;
  2279  01BD  01B4               	clrf	_t
  2280  01BE  01B5               	clrf	_t+1
  2281  01BF                     l4875:	
  2282                           
  2283                           ;Button_src.c: 393:                     button_delay();
  2284  01BF  160A  118A  21EC  120A  118A  	fcall	_button_delay
  2285  01C4                     l4877:	
  2286                           
  2287                           ;Button_src.c: 396:              write_cmd(0x88);
  2288  01C4  3088               	movlw	136
  2289  01C5  160A  118A  223F  120A  118A  	fcall	_write_cmd
  2290                           
  2291                           ;Button_src.c: 397:               if(stats==0){
  2292  01CA  0826               	movf	_stats,w
  2293  01CB  0427               	iorwf	_stats+1,w
  2294  01CC  1D03               	btfss	3,2
  2295  01CD  29D6               	goto	l4883
  2296                           
  2297                           ;Button_src.c: 398:                   table[2] = prev_hex_hours;
  2298  01CE  0842               	movf	_prev_hex_hours,w
  2299  01CF  00E5               	movwf	??_time_settings
  2300  01D0  0865               	movf	??_time_settings,w
  2301  01D1  1683               	bsf	3,5	;RP0=1, select bank1
  2302  01D2  00BD               	movwf	(_table^(0+128)+2)
  2303                           
  2304                           ;Button_src.c: 399:                   table[1] = prev_hex_mins;
  2305  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  2306  01D4  0841               	movf	_prev_hex_mins,w
  2307  01D5  29E1               	goto	L1
  2308  01D6                     l4883:	
  2309                           ;Button_src.c: 400:               }
  2310                           
  2311  01D6  0326               	decf	_stats,w
  2312  01D7  0427               	iorwf	_stats+1,w
  2313  01D8  1D03               	btfss	3,2
  2314  01D9  29E5               	goto	l4887
  2315                           
  2316                           ;Button_src.c: 402:               {;Button_src.c: 403:                  table[2]= a;
  2317  01DA  084A               	movf	_a,w
  2318  01DB  00E5               	movwf	??_time_settings
  2319  01DC  0865               	movf	??_time_settings,w
  2320  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  2321  01DE  00BD               	movwf	(_table^(0+128)+2)
  2322                           
  2323                           ;Button_src.c: 404:                  table[1] = c;
  2324  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  2325  01E0  0848               	movf	_c,w
  2326  01E1                     L1:	
  2327  01E1  00E5               	movwf	??_time_settings
  2328  01E2  0865               	movf	??_time_settings,w
  2329  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  2330  01E4  00BC               	movwf	(_table^(0+128)+1)
  2331  01E5                     l4887:	
  2332                           
  2333                           ;Button_src.c: 408:                     a = time_date_delimiter(a,0x11,'9',4);
  2334  01E5  3011               	movlw	17
  2335  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  2336  01E7  00E5               	movwf	??_time_settings
  2337  01E8  0865               	movf	??_time_settings,w
  2338  01E9  00F0               	movwf	time_date_delimiter@hex
  2339  01EA  3039               	movlw	57
  2340  01EB  00E6               	movwf	??_time_settings+1
  2341  01EC  0866               	movf	??_time_settings+1,w
  2342  01ED  00F1               	movwf	time_date_delimiter@limiter
  2343  01EE  3004               	movlw	4
  2344  01EF  00F2               	movwf	time_date_delimiter@type
  2345  01F0  3000               	movlw	0
  2346  01F1  00F3               	movwf	time_date_delimiter@type+1
  2347  01F2  084A               	movf	_a,w
  2348  01F3  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2349  01F8  00E7               	movwf	??_time_settings+2
  2350  01F9  0867               	movf	??_time_settings+2,w
  2351  01FA  00CA               	movwf	_a
  2352                           
  2353                           ;Button_src.c: 409:                     a = time_date_delimiter(a,0x21,'J',4);
  2354  01FB  3021               	movlw	33
  2355  01FC  00E5               	movwf	??_time_settings
  2356  01FD  0865               	movf	??_time_settings,w
  2357  01FE  00F0               	movwf	time_date_delimiter@hex
  2358  01FF  304A               	movlw	74
  2359  0200  00E6               	movwf	??_time_settings+1
  2360  0201  0866               	movf	??_time_settings+1,w
  2361  0202  00F1               	movwf	time_date_delimiter@limiter
  2362  0203  3004               	movlw	4
  2363  0204  00F2               	movwf	time_date_delimiter@type
  2364  0205  3000               	movlw	0
  2365  0206  00F3               	movwf	time_date_delimiter@type+1
  2366  0207  084A               	movf	_a,w
  2367  0208  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2368  020D  00E7               	movwf	??_time_settings+2
  2369  020E  0867               	movf	??_time_settings+2,w
  2370  020F  00CA               	movwf	_a
  2371                           
  2372                           ;Button_src.c: 411:                     c = time_date_delimiter(c,0x11,'9',5);
  2373  0210  3011               	movlw	17
  2374  0211  00E5               	movwf	??_time_settings
  2375  0212  0865               	movf	??_time_settings,w
  2376  0213  00F0               	movwf	time_date_delimiter@hex
  2377  0214  3039               	movlw	57
  2378  0215  00E6               	movwf	??_time_settings+1
  2379  0216  0866               	movf	??_time_settings+1,w
  2380  0217  00F1               	movwf	time_date_delimiter@limiter
  2381  0218  3005               	movlw	5
  2382  0219  00F2               	movwf	time_date_delimiter@type
  2383  021A  3000               	movlw	0
  2384  021B  00F3               	movwf	time_date_delimiter@type+1
  2385  021C  0848               	movf	_c,w
  2386  021D  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2387  0222  00E7               	movwf	??_time_settings+2
  2388  0223  0867               	movf	??_time_settings+2,w
  2389  0224  00C8               	movwf	_c
  2390                           
  2391                           ;Button_src.c: 412:                     c = time_date_delimiter(c,0x21,'J',5);
  2392  0225  3021               	movlw	33
  2393  0226  00E5               	movwf	??_time_settings
  2394  0227  0865               	movf	??_time_settings,w
  2395  0228  00F0               	movwf	time_date_delimiter@hex
  2396  0229  304A               	movlw	74
  2397  022A  00E6               	movwf	??_time_settings+1
  2398  022B  0866               	movf	??_time_settings+1,w
  2399  022C  00F1               	movwf	time_date_delimiter@limiter
  2400  022D  3005               	movlw	5
  2401  022E  00F2               	movwf	time_date_delimiter@type
  2402  022F  3000               	movlw	0
  2403  0230  00F3               	movwf	time_date_delimiter@type+1
  2404  0231  0848               	movf	_c,w
  2405  0232  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2406  0237  00E7               	movwf	??_time_settings+2
  2407  0238  0867               	movf	??_time_settings+2,w
  2408  0239  00C8               	movwf	_c
  2409                           
  2410                           ;Button_src.c: 413:                     c = time_date_delimiter(c,0x31,'Y',5);
  2411  023A  3031               	movlw	49
  2412  023B  00E5               	movwf	??_time_settings
  2413  023C  0865               	movf	??_time_settings,w
  2414  023D  00F0               	movwf	time_date_delimiter@hex
  2415  023E  3059               	movlw	89
  2416  023F  00E6               	movwf	??_time_settings+1
  2417  0240  0866               	movf	??_time_settings+1,w
  2418  0241  00F1               	movwf	time_date_delimiter@limiter
  2419  0242  3005               	movlw	5
  2420  0243  00F2               	movwf	time_date_delimiter@type
  2421  0244  3000               	movlw	0
  2422  0245  00F3               	movwf	time_date_delimiter@type+1
  2423  0246  0848               	movf	_c,w
  2424  0247  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2425  024C  00E7               	movwf	??_time_settings+2
  2426  024D  0867               	movf	??_time_settings+2,w
  2427  024E  00C8               	movwf	_c
  2428                           
  2429                           ;Button_src.c: 414:                     c = time_date_delimiter(c,0x41,'j',5);
  2430  024F  3041               	movlw	65
  2431  0250  00E5               	movwf	??_time_settings
  2432  0251  0865               	movf	??_time_settings,w
  2433  0252  00F0               	movwf	time_date_delimiter@hex
  2434  0253  306A               	movlw	106
  2435  0254  00E6               	movwf	??_time_settings+1
  2436  0255  0866               	movf	??_time_settings+1,w
  2437  0256  00F1               	movwf	time_date_delimiter@limiter
  2438  0257  3005               	movlw	5
  2439  0258  00F2               	movwf	time_date_delimiter@type
  2440  0259  3000               	movlw	0
  2441  025A  00F3               	movwf	time_date_delimiter@type+1
  2442  025B  0848               	movf	_c,w
  2443  025C  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2444  0261  00E7               	movwf	??_time_settings+2
  2445  0262  0867               	movf	??_time_settings+2,w
  2446  0263  00C8               	movwf	_c
  2447                           
  2448                           ;Button_src.c: 415:                     c = time_date_delimiter(c,0x51,'z',5);
  2449  0264  3051               	movlw	81
  2450  0265  00E5               	movwf	??_time_settings
  2451  0266  0865               	movf	??_time_settings,w
  2452  0267  00F0               	movwf	time_date_delimiter@hex
  2453  0268  307A               	movlw	122
  2454  0269  00E6               	movwf	??_time_settings+1
  2455  026A  0866               	movf	??_time_settings+1,w
  2456  026B  00F1               	movwf	time_date_delimiter@limiter
  2457  026C  3005               	movlw	5
  2458  026D  00F2               	movwf	time_date_delimiter@type
  2459  026E  3000               	movlw	0
  2460  026F  00F3               	movwf	time_date_delimiter@type+1
  2461  0270  0848               	movf	_c,w
  2462  0271  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  2463  0276  00E7               	movwf	??_time_settings+2
  2464  0277  0867               	movf	??_time_settings+2,w
  2465  0278  00C8               	movwf	_c
  2466                           
  2467                           ;Button_src.c: 417:                   RC0 = 0;
  2468  0279  1007               	bcf	7,0	;volatile
  2469                           
  2470                           ;Button_src.c: 418:                   RC1 = 1;
  2471  027A  1487               	bsf	7,1	;volatile
  2472                           
  2473                           ;Button_src.c: 419:                   RC2 = 1;
  2474  027B  1507               	bsf	7,2	;volatile
  2475                           
  2476                           ;Button_src.c: 420:                   RC3 = 1;
  2477  027C  1587               	bsf	7,3	;volatile
  2478                           
  2479                           ;Button_src.c: 421:                     if (RC6 == 0 ){
  2480  027D  1B07               	btfsc	7,6	;volatile
  2481  027E  2A93               	goto	l802
  2482                           
  2483                           ;Button_src.c: 422:                           write_cmd(0x1);
  2484  027F  3001               	movlw	1
  2485  0280  160A  118A  223F  120A  118A  	fcall	_write_cmd
  2486                           
  2487                           ;Button_src.c: 423:                           set_time();
  2488  0285  160A  118A  2345   	fcall	_set_time
  2489                           
  2490                           ;Button_src.c: 424:                           a = 0x00;
  2491  0288  01CA               	clrf	_a
  2492                           
  2493                           ;Button_src.c: 425:                           c = 0x00;
  2494  0289  01C8               	clrf	_c
  2495                           
  2496                           ;Button_src.c: 426:                           x = 0;
  2497  028A  01B0               	clrf	_x
  2498  028B  01B1               	clrf	_x+1
  2499                           
  2500                           ;Button_src.c: 427:                           y = 0;
  2501  028C  01AE               	clrf	_y
  2502  028D  01AF               	clrf	_y+1
  2503                           
  2504                           ;Button_src.c: 428:                           w = 0;
  2505  028E  01B2               	clrf	_w
  2506  028F  01B3               	clrf	_w+1
  2507                           
  2508                           ;Button_src.c: 429:                           t = 0;
  2509  0290  01B4               	clrf	_t
  2510  0291  01B5               	clrf	_t+1
  2511  0292  0008               	return
  2512  0293                     l802:	
  2513                           ;Button_src.c: 432:                             }
  2514                           
  2515                           
  2516                           ;Button_src.c: 433:                   RC0 = 1;
  2517  0293  1407               	bsf	7,0	;volatile
  2518                           
  2519                           ;Button_src.c: 434:                   RC1 = 1;
  2520  0294  1487               	bsf	7,1	;volatile
  2521                           
  2522                           ;Button_src.c: 435:                   RC2 = 0;
  2523  0295  1107               	bcf	7,2	;volatile
  2524                           
  2525                           ;Button_src.c: 436:                   RC3 = 1;
  2526  0296  1587               	bsf	7,3	;volatile
  2527                           
  2528                           ;Button_src.c: 437:                   z = modulus_func(z,2);
  2529  0297  082D               	movf	_z+1,w
  2530  0298  00F8               	movwf	modulus_func@x+1
  2531  0299  082C               	movf	_z,w
  2532  029A  00F7               	movwf	modulus_func@x
  2533  029B  3002               	movlw	2
  2534  029C  00F9               	movwf	modulus_func@y
  2535  029D  3000               	movlw	0
  2536  029E  00FA               	movwf	modulus_func@y+1
  2537  029F  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  2538  02A4  0878               	movf	?_modulus_func+1,w
  2539  02A5  00AD               	movwf	_z+1
  2540  02A6  0877               	movf	?_modulus_func,w
  2541  02A7  00AC               	movwf	_z
  2542                           
  2543                           ;Button_src.c: 438:                   if(RC4 == 0 && z ==0){
  2544  02A8  1A07               	btfsc	7,4	;volatile
  2545  02A9  2AE3               	goto	l4941
  2546  02AA  082C               	movf	_z,w
  2547  02AB  042D               	iorwf	_z+1,w
  2548  02AC  1D03               	btfss	3,2
  2549  02AD  2AE3               	goto	l4941
  2550                           
  2551                           ;Button_src.c: 439:                       write_cmd(0x90);
  2552  02AE  3090               	movlw	144
  2553  02AF  160A  118A  223F  120A  118A  	fcall	_write_cmd
  2554                           
  2555                           ;Button_src.c: 440:                       write_char('H');
  2556  02B4  3048               	movlw	72
  2557  02B5  160A  118A  2228  120A  118A  	fcall	_write_char
  2558                           
  2559                           ;Button_src.c: 441:                       write_char('o');
  2560  02BA  306F               	movlw	111
  2561  02BB  160A  118A  2228  120A  118A  	fcall	_write_char
  2562                           
  2563                           ;Button_src.c: 442:                       write_char('u');
  2564  02C0  3075               	movlw	117
  2565  02C1  160A  118A  2228  120A  118A  	fcall	_write_char
  2566                           
  2567                           ;Button_src.c: 443:                       write_char('r');
  2568  02C6  3072               	movlw	114
  2569  02C7  160A  118A  2228  120A  118A  	fcall	_write_char
  2570                           
  2571                           ;Button_src.c: 444:                       write_char(':');
  2572  02CC  303A               	movlw	58
  2573  02CD  160A  118A  2228  120A  118A  	fcall	_write_char
  2574                           
  2575                           ;Button_src.c: 445:                       b = 'x';
  2576  02D2  3078               	movlw	120
  2577  02D3  00E5               	movwf	??_time_settings
  2578  02D4  0865               	movf	??_time_settings,w
  2579  02D5  00C9               	movwf	_b
  2580                           
  2581                           ;Button_src.c: 446:                       button_delay();
  2582  02D6  160A  118A  21EC  120A  118A  	fcall	_button_delay
  2583                           
  2584                           ;Button_src.c: 447:                       z++;
  2585  02DB  3001               	movlw	1
  2586  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2587  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2588  02DE  07AC               	addwf	_z,f
  2589  02DF  1803               	skipnc
  2590  02E0  0AAD               	incf	_z+1,f
  2591  02E1  3000               	movlw	0
  2592  02E2  07AD               	addwf	_z+1,f
  2593  02E3                     l4941:	
  2594                           
  2595                           ;Button_src.c: 449:                   RC0 = 1;
  2596  02E3  1407               	bsf	7,0	;volatile
  2597                           
  2598                           ;Button_src.c: 450:                   RC1 = 1;
  2599  02E4  1487               	bsf	7,1	;volatile
  2600                           
  2601                           ;Button_src.c: 451:                   RC2 = 0;
  2602  02E5  1107               	bcf	7,2	;volatile
  2603                           
  2604                           ;Button_src.c: 452:                   RC3 = 1;
  2605  02E6  1587               	bsf	7,3	;volatile
  2606                           
  2607                           ;Button_src.c: 454:                   if(RC4 == 0&& z ==1){
  2608  02E7  1A07               	btfsc	7,4	;volatile
  2609  02E8  2B20               	goto	l805
  2610  02E9  032C               	decf	_z,w
  2611  02EA  042D               	iorwf	_z+1,w
  2612  02EB  1D03               	btfss	3,2
  2613  02EC  2B20               	goto	l805
  2614                           
  2615                           ;Button_src.c: 455:                     z++;
  2616  02ED  3001               	movlw	1
  2617  02EE  07AC               	addwf	_z,f
  2618  02EF  1803               	skipnc
  2619  02F0  0AAD               	incf	_z+1,f
  2620  02F1  3000               	movlw	0
  2621  02F2  07AD               	addwf	_z+1,f
  2622                           
  2623                           ;Button_src.c: 456:                     button_delay();
  2624  02F3  160A  118A  21EC  120A  118A  	fcall	_button_delay
  2625                           
  2626                           ;Button_src.c: 457:                     write_cmd(0x90);
  2627  02F8  3090               	movlw	144
  2628  02F9  160A  118A  223F  120A  118A  	fcall	_write_cmd
  2629                           
  2630                           ;Button_src.c: 458:                     write_char('M');
  2631  02FE  304D               	movlw	77
  2632  02FF  160A  118A  2228  120A  118A  	fcall	_write_char
  2633                           
  2634                           ;Button_src.c: 459:                     write_char('i');
  2635  0304  3069               	movlw	105
  2636  0305  160A  118A  2228  120A  118A  	fcall	_write_char
  2637                           
  2638                           ;Button_src.c: 460:                     write_char('n');
  2639  030A  306E               	movlw	110
  2640  030B  160A  118A  2228  120A  118A  	fcall	_write_char
  2641                           
  2642                           ;Button_src.c: 461:                     write_char('s');
  2643  0310  3073               	movlw	115
  2644  0311  160A  118A  2228  120A  118A  	fcall	_write_char
  2645                           
  2646                           ;Button_src.c: 462:                     write_char(':');
  2647  0316  303A               	movlw	58
  2648  0317  160A  118A  2228  120A  118A  	fcall	_write_char
  2649                           
  2650                           ;Button_src.c: 463:                     b = 'y';
  2651  031C  3079               	movlw	121
  2652  031D  00E5               	movwf	??_time_settings
  2653  031E  0865               	movf	??_time_settings,w
  2654  031F  00C9               	movwf	_b
  2655  0320                     l805:	
  2656                           ;Button_src.c: 464:                   }
  2657                           
  2658                           
  2659                           ;Button_src.c: 465:                    write_cmd(0x88);
  2660  0320  3088               	movlw	136
  2661  0321  160A  118A  223F  120A  118A  	fcall	_write_cmd
  2662                           
  2663                           ;Button_src.c: 469:                   RC0 = 1;
  2664  0326  1407               	bsf	7,0	;volatile
  2665                           
  2666                           ;Button_src.c: 470:                   RC1 = 1;
  2667  0327  1487               	bsf	7,1	;volatile
  2668                           
  2669                           ;Button_src.c: 471:                   RC2 = 0;
  2670  0328  1107               	bcf	7,2	;volatile
  2671                           
  2672                           ;Button_src.c: 472:                   RC3 = 1;
  2673  0329  1587               	bsf	7,3	;volatile
  2674                           
  2675                           ;Button_src.c: 474:              write_cmd(0x88);
  2676  032A  3088               	movlw	136
  2677  032B  160A  118A  223F  120A  118A  	fcall	_write_cmd
  2678                           
  2679                           ;Button_src.c: 475:              write_char('T');
  2680  0330  3054               	movlw	84
  2681  0331  160A  118A  2228  120A  118A  	fcall	_write_char
  2682                           
  2683                           ;Button_src.c: 476:              write_char('i');
  2684  0336  3069               	movlw	105
  2685  0337  160A  118A  2228  120A  118A  	fcall	_write_char
  2686                           
  2687                           ;Button_src.c: 477:              write_char('m');
  2688  033C  306D               	movlw	109
  2689  033D  160A  118A  2228  120A  118A  	fcall	_write_char
  2690                           
  2691                           ;Button_src.c: 478:              write_char('e');
  2692  0342  3065               	movlw	101
  2693  0343  160A  118A  2228  120A  118A  	fcall	_write_char
  2694                           
  2695                           ;Button_src.c: 479:              write_char(':');
  2696  0348  303A               	movlw	58
  2697  0349  160A  118A  2228  120A  118A  	fcall	_write_char
  2698                           
  2699                           ;Button_src.c: 480:              write_char(y + '0');
  2700  034E  082E               	movf	_y,w
  2701  034F  3E30               	addlw	48
  2702  0350  160A  118A  2228  120A  118A  	fcall	_write_char
  2703                           
  2704                           ;Button_src.c: 481:              write_char(x + '0');
  2705  0355  0830               	movf	_x,w
  2706  0356  3E30               	addlw	48
  2707  0357  160A  118A  2228  120A  118A  	fcall	_write_char
  2708                           
  2709                           ;Button_src.c: 482:              write_char(':');
  2710  035C  303A               	movlw	58
  2711  035D  160A  118A  2228  120A  118A  	fcall	_write_char
  2712                           
  2713                           ;Button_src.c: 483:              write_char(w + '0');
  2714  0362  0832               	movf	_w,w
  2715  0363  3E30               	addlw	48
  2716  0364  160A  118A  2228  120A  118A  	fcall	_write_char
  2717                           
  2718                           ;Button_src.c: 484:              write_char(t + '0');
  2719  0369  0834               	movf	_t,w
  2720  036A  3E30               	addlw	48
  2721  036B  160A  118A  2228  120A  118A  	fcall	_write_char
  2722                           
  2723                           ;Button_src.c: 486:             RC0 = 0;
  2724  0370  1007               	bcf	7,0	;volatile
  2725                           
  2726                           ;Button_src.c: 487:             RC1 = 1;
  2727  0371  1487               	bsf	7,1	;volatile
  2728                           
  2729                           ;Button_src.c: 488:             RC2 = 1;
  2730  0372  1507               	bsf	7,2	;volatile
  2731                           
  2732                           ;Button_src.c: 489:             RC3 = 1;
  2733  0373  1587               	bsf	7,3	;volatile
  2734                           
  2735                           ;Button_src.c: 490:             if (RC7 == 0 ){
  2736  0374  1B87               	btfsc	7,7	;volatile
  2737  0375  2892               	goto	l785
  2738                           
  2739                           ;Button_src.c: 491:             a = 0x00;
  2740  0376  01CA               	clrf	_a
  2741                           
  2742                           ;Button_src.c: 492:             c = 0x00;
  2743  0377  01C8               	clrf	_c
  2744                           
  2745                           ;Button_src.c: 493:             x = 0;
  2746  0378  01B0               	clrf	_x
  2747  0379  01B1               	clrf	_x+1
  2748                           
  2749                           ;Button_src.c: 494:             y = 0;
  2750  037A  01AE               	clrf	_y
  2751  037B  01AF               	clrf	_y+1
  2752                           
  2753                           ;Button_src.c: 495:             w = 0;
  2754  037C  01B2               	clrf	_w
  2755  037D  01B3               	clrf	_w+1
  2756                           
  2757                           ;Button_src.c: 496:             t = 0;
  2758  037E  01B4               	clrf	_t
  2759  037F  01B5               	clrf	_t+1
  2760                           
  2761                           ;Button_src.c: 497:             write_cmd(0x1);
  2762  0380  3001               	movlw	1
  2763  0381  160A  118A  223F   	fcall	_write_cmd
  2764                           
  2765                           ;Button_src.c: 498:             break;
  2766  0384  0008               	return
  2767  0385                     __end_of_time_settings:	
  2768                           
  2769                           	psect	text2
  2770  0BE5                     __ptext2:	
  2771 ;; *************** function _thermometer_threshhold_settings *****************
  2772 ;; Defined at:
  2773 ;;		line 23 in file "Button_src.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 300/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2787 ;;      Params:         0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0
  2789 ;;      Temps:          0       3       0       0       0
  2790 ;;      Totals:         0       3       0       0       0
  2791 ;;Total ram usage:        3 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    3
  2794 ;; This function calls:
  2795 ;;		_button_delay
  2796 ;;		_incrementor
  2797 ;;		_modulus_func
  2798 ;;		_write_char
  2799 ;;		_write_cmd
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           
  2806                           ;psect for function _thermometer_threshhold_settings
  2807  0BE5                     _thermometer_threshhold_settings:	
  2808                           
  2809                           ;Button_src.c: 24:  RC0 = 1;
  2810                           
  2811                           ;incstack = 0
  2812                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2813  0BE5  1407               	bsf	7,0	;volatile
  2814                           
  2815                           ;Button_src.c: 25:  RC1 = 0;
  2816  0BE6  1087               	bcf	7,1	;volatile
  2817                           
  2818                           ;Button_src.c: 26:  RC2 = 1;
  2819  0BE7  1507               	bsf	7,2	;volatile
  2820                           
  2821                           ;Button_src.c: 27:  RC3 = 1;
  2822  0BE8  1587               	bsf	7,3	;volatile
  2823                           
  2824                           ;Button_src.c: 28:   if (RC4 == 0){
  2825  0BE9  1A07               	btfsc	7,4	;volatile
  2826  0BEA  0008               	return
  2827                           
  2828                           ;Button_src.c: 29:       write_cmd(0x1);
  2829  0BEB  3001               	movlw	1
  2830  0BEC  160A  118A  223F  120A  158A  	fcall	_write_cmd
  2831  0BF1                     l761:	
  2832                           ;Button_src.c: 30:       for(;;){
  2833                           
  2834                           
  2835                           ;Button_src.c: 31:             write_cmd(0x80);
  2836  0BF1  3080               	movlw	128
  2837  0BF2  160A  118A  223F  120A  158A  	fcall	_write_cmd
  2838                           
  2839                           ;Button_src.c: 32:             write_char('T');
  2840  0BF7  3054               	movlw	84
  2841  0BF8  160A  118A  2228  120A  158A  	fcall	_write_char
  2842                           
  2843                           ;Button_src.c: 33:             write_char('h');
  2844  0BFD  3068               	movlw	104
  2845  0BFE  160A  118A  2228  120A  158A  	fcall	_write_char
  2846                           
  2847                           ;Button_src.c: 34:             write_char('r');
  2848  0C03  3072               	movlw	114
  2849  0C04  160A  118A  2228  120A  158A  	fcall	_write_char
  2850                           
  2851                           ;Button_src.c: 35:             write_char('e');
  2852  0C09  3065               	movlw	101
  2853  0C0A  160A  118A  2228  120A  158A  	fcall	_write_char
  2854                           
  2855                           ;Button_src.c: 36:             write_char('s');
  2856  0C0F  3073               	movlw	115
  2857  0C10  160A  118A  2228  120A  158A  	fcall	_write_char
  2858                           
  2859                           ;Button_src.c: 37:             write_char('h');
  2860  0C15  3068               	movlw	104
  2861  0C16  160A  118A  2228  120A  158A  	fcall	_write_char
  2862                           
  2863                           ;Button_src.c: 38:             write_char('o');
  2864  0C1B  306F               	movlw	111
  2865  0C1C  160A  118A  2228  120A  158A  	fcall	_write_char
  2866                           
  2867                           ;Button_src.c: 39:             write_char('l');
  2868  0C21  306C               	movlw	108
  2869  0C22  160A  118A  2228  120A  158A  	fcall	_write_char
  2870                           
  2871                           ;Button_src.c: 40:             write_char('d');
  2872  0C27  3064               	movlw	100
  2873  0C28  160A  118A  2228  120A  158A  	fcall	_write_char
  2874                           
  2875                           ;Button_src.c: 41:             write_char('s');
  2876  0C2D  3073               	movlw	115
  2877  0C2E  160A  118A  2228  120A  158A  	fcall	_write_char
  2878                           
  2879                           ;Button_src.c: 42:             write_char(':');
  2880  0C33  303A               	movlw	58
  2881  0C34  160A  118A  2228  120A  158A  	fcall	_write_char
  2882                           
  2883                           ;Button_src.c: 48:             RC0 = 1;
  2884  0C39  1407               	bsf	7,0	;volatile
  2885                           
  2886                           ;Button_src.c: 49:             RC1 = 0;
  2887  0C3A  1087               	bcf	7,1	;volatile
  2888                           
  2889                           ;Button_src.c: 50:             RC2 = 1;
  2890  0C3B  1507               	bsf	7,2	;volatile
  2891                           
  2892                           ;Button_src.c: 51:             RC3 = 1;
  2893  0C3C  1587               	bsf	7,3	;volatile
  2894                           
  2895                           ;Button_src.c: 53:             if(RC7 == 0 && b =='x'){
  2896  0C3D  1B87               	btfsc	7,7	;volatile
  2897  0C3E  2C85               	goto	l4231
  2898  0C3F  3078               	movlw	120
  2899  0C40  0649               	xorwf	_b,w
  2900  0C41  1D03               	btfss	3,2
  2901  0C42  2C85               	goto	l4231
  2902                           
  2903                           ;Button_src.c: 54:                     x++ ;
  2904  0C43  3001               	movlw	1
  2905  0C44  07B0               	addwf	_x,f
  2906  0C45  1803               	skipnc
  2907  0C46  0AB1               	incf	_x+1,f
  2908  0C47  3000               	movlw	0
  2909  0C48  07B1               	addwf	_x+1,f
  2910                           
  2911                           ;Button_src.c: 55:                     x = modulus_func(x,10);
  2912  0C49  0831               	movf	_x+1,w
  2913  0C4A  00F8               	movwf	modulus_func@x+1
  2914  0C4B  0830               	movf	_x,w
  2915  0C4C  00F7               	movwf	modulus_func@x
  2916  0C4D  300A               	movlw	10
  2917  0C4E  00F9               	movwf	modulus_func@y
  2918  0C4F  3000               	movlw	0
  2919  0C50  00FA               	movwf	modulus_func@y+1
  2920  0C51  160A  118A  21B7  120A  158A  	fcall	_modulus_func
  2921  0C56  0878               	movf	?_modulus_func+1,w
  2922  0C57  00B1               	movwf	_x+1
  2923  0C58  0877               	movf	?_modulus_func,w
  2924  0C59  00B0               	movwf	_x
  2925                           
  2926                           ;Button_src.c: 56:                     if (p == 1){
  2927  0C5A  0324               	decf	_p,w
  2928  0C5B  0425               	iorwf	_p+1,w
  2929  0C5C  1D03               	btfss	3,2
  2930  0C5D  2C77               	goto	l4225
  2931                           
  2932                           ;Button_src.c: 57:                         y = incrementor(y,x,'0');
  2933  0C5E  082F               	movf	_y+1,w
  2934  0C5F  00E1               	movwf	incrementor@upper_val+1
  2935  0C60  082E               	movf	_y,w
  2936  0C61  00E0               	movwf	incrementor@upper_val
  2937  0C62  0831               	movf	_x+1,w
  2938  0C63  00E3               	movwf	incrementor@lower_val+1
  2939  0C64  0830               	movf	_x,w
  2940  0C65  00E2               	movwf	incrementor@lower_val
  2941  0C66  3030               	movlw	48
  2942  0C67  00E5               	movwf	??_thermometer_threshhold_settings
  2943  0C68  0865               	movf	??_thermometer_threshhold_settings,w
  2944  0C69  00E4               	movwf	incrementor@z
  2945  0C6A  160A  118A  22FB  120A  158A  	fcall	_incrementor
  2946  0C6F  00E6               	movwf	??_thermometer_threshhold_settings+1
  2947  0C70  01E7               	clrf	??_thermometer_threshhold_settings+2
  2948  0C71  0866               	movf	??_thermometer_threshhold_settings+1,w
  2949  0C72  00AE               	movwf	_y
  2950  0C73  0867               	movf	??_thermometer_threshhold_settings+2,w
  2951  0C74  00AF               	movwf	_y+1
  2952                           
  2953                           ;Button_src.c: 58:                         p = 0;
  2954  0C75  01A4               	clrf	_p
  2955  0C76  01A5               	clrf	_p+1
  2956  0C77                     l4225:	
  2957                           
  2958                           ;Button_src.c: 60:                     if (x == 9){
  2959  0C77  3009               	movlw	9
  2960  0C78  0630               	xorwf	_x,w
  2961  0C79  0431               	iorwf	_x+1,w
  2962  0C7A  1D03               	btfss	3,2
  2963  0C7B  2C80               	goto	l4229
  2964                           
  2965                           ;Button_src.c: 61:                         p = 1;
  2966  0C7C  3001               	movlw	1
  2967  0C7D  00A4               	movwf	_p
  2968  0C7E  3000               	movlw	0
  2969  0C7F  00A5               	movwf	_p+1
  2970  0C80                     l4229:	
  2971                           
  2972                           ;Button_src.c: 65:                     button_delay();
  2973  0C80  160A  118A  21EC  120A  158A  	fcall	_button_delay
  2974  0C85                     l4231:	
  2975                           
  2976                           ;Button_src.c: 67:              RC0 = 1;
  2977  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0C87  1407               	bsf	7,0	;volatile
  2980                           
  2981                           ;Button_src.c: 68:             RC1 = 0;
  2982  0C88  1087               	bcf	7,1	;volatile
  2983                           
  2984                           ;Button_src.c: 69:             RC2 = 1;
  2985  0C89  1507               	bsf	7,2	;volatile
  2986                           
  2987                           ;Button_src.c: 70:             RC3 = 1;
  2988  0C8A  1587               	bsf	7,3	;volatile
  2989                           
  2990                           ;Button_src.c: 71:             if(RC7==0 && b == 'y'){
  2991  0C8B  1B87               	btfsc	7,7	;volatile
  2992  0C8C  2CD3               	goto	l4259
  2993  0C8D  3079               	movlw	121
  2994  0C8E  0649               	xorwf	_b,w
  2995  0C8F  1D03               	btfss	3,2
  2996  0C90  2CD3               	goto	l4259
  2997                           
  2998                           ;Button_src.c: 72:                     t++;
  2999  0C91  3001               	movlw	1
  3000  0C92  07B4               	addwf	_t,f
  3001  0C93  1803               	skipnc
  3002  0C94  0AB5               	incf	_t+1,f
  3003  0C95  3000               	movlw	0
  3004  0C96  07B5               	addwf	_t+1,f
  3005                           
  3006                           ;Button_src.c: 73:                     t = modulus_func(t,10);
  3007  0C97  0835               	movf	_t+1,w
  3008  0C98  00F8               	movwf	modulus_func@x+1
  3009  0C99  0834               	movf	_t,w
  3010  0C9A  00F7               	movwf	modulus_func@x
  3011  0C9B  300A               	movlw	10
  3012  0C9C  00F9               	movwf	modulus_func@y
  3013  0C9D  3000               	movlw	0
  3014  0C9E  00FA               	movwf	modulus_func@y+1
  3015  0C9F  160A  118A  21B7  120A  158A  	fcall	_modulus_func
  3016  0CA4  0878               	movf	?_modulus_func+1,w
  3017  0CA5  00B5               	movwf	_t+1
  3018  0CA6  0877               	movf	?_modulus_func,w
  3019  0CA7  00B4               	movwf	_t
  3020                           
  3021                           ;Button_src.c: 74:                    if (p == 1){
  3022  0CA8  0324               	decf	_p,w
  3023  0CA9  0425               	iorwf	_p+1,w
  3024  0CAA  1D03               	btfss	3,2
  3025  0CAB  2CC5               	goto	l4253
  3026                           
  3027                           ;Button_src.c: 75:                         w = incrementor(w,t,'0');
  3028  0CAC  0833               	movf	_w+1,w
  3029  0CAD  00E1               	movwf	incrementor@upper_val+1
  3030  0CAE  0832               	movf	_w,w
  3031  0CAF  00E0               	movwf	incrementor@upper_val
  3032  0CB0  0835               	movf	_t+1,w
  3033  0CB1  00E3               	movwf	incrementor@lower_val+1
  3034  0CB2  0834               	movf	_t,w
  3035  0CB3  00E2               	movwf	incrementor@lower_val
  3036  0CB4  3030               	movlw	48
  3037  0CB5  00E5               	movwf	??_thermometer_threshhold_settings
  3038  0CB6  0865               	movf	??_thermometer_threshhold_settings,w
  3039  0CB7  00E4               	movwf	incrementor@z
  3040  0CB8  160A  118A  22FB  120A  158A  	fcall	_incrementor
  3041  0CBD  00E6               	movwf	??_thermometer_threshhold_settings+1
  3042  0CBE  01E7               	clrf	??_thermometer_threshhold_settings+2
  3043  0CBF  0866               	movf	??_thermometer_threshhold_settings+1,w
  3044  0CC0  00B2               	movwf	_w
  3045  0CC1  0867               	movf	??_thermometer_threshhold_settings+2,w
  3046  0CC2  00B3               	movwf	_w+1
  3047                           
  3048                           ;Button_src.c: 76:                         p = 0;
  3049  0CC3  01A4               	clrf	_p
  3050  0CC4  01A5               	clrf	_p+1
  3051  0CC5                     l4253:	
  3052                           
  3053                           ;Button_src.c: 78:                     if (t == 9){
  3054  0CC5  3009               	movlw	9
  3055  0CC6  0634               	xorwf	_t,w
  3056  0CC7  0435               	iorwf	_t+1,w
  3057  0CC8  1D03               	btfss	3,2
  3058  0CC9  2CCE               	goto	l4257
  3059                           
  3060                           ;Button_src.c: 79:                         p = 1;
  3061  0CCA  3001               	movlw	1
  3062  0CCB  00A4               	movwf	_p
  3063  0CCC  3000               	movlw	0
  3064  0CCD  00A5               	movwf	_p+1
  3065  0CCE                     l4257:	
  3066                           
  3067                           ;Button_src.c: 81:                     button_delay();
  3068  0CCE  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3069  0CD3                     l4259:	
  3070                           
  3071                           ;Button_src.c: 83:             RC0 = 1;
  3072  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0CD5  1407               	bsf	7,0	;volatile
  3075                           
  3076                           ;Button_src.c: 84:             RC1 = 0;
  3077  0CD6  1087               	bcf	7,1	;volatile
  3078                           
  3079                           ;Button_src.c: 85:             RC2 = 1;
  3080  0CD7  1507               	bsf	7,2	;volatile
  3081                           
  3082                           ;Button_src.c: 86:             RC3 = 1;
  3083  0CD8  1587               	bsf	7,3	;volatile
  3084                           
  3085                           ;Button_src.c: 87:             if(RC7==0 && b == 'z'){
  3086  0CD9  1B87               	btfsc	7,7	;volatile
  3087  0CDA  2D29               	goto	l4287
  3088  0CDB  307A               	movlw	122
  3089  0CDC  0649               	xorwf	_b,w
  3090  0CDD  1D03               	btfss	3,2
  3091  0CDE  2D29               	goto	l4287
  3092                           
  3093                           ;Button_src.c: 88:                     night_lower_lower++;
  3094  0CDF  3001               	movlw	1
  3095  0CE0  07A2               	addwf	_night_lower_lower,f
  3096  0CE1  1803               	skipnc
  3097  0CE2  0AA3               	incf	_night_lower_lower+1,f
  3098  0CE3  3000               	movlw	0
  3099  0CE4  07A3               	addwf	_night_lower_lower+1,f
  3100                           
  3101                           ;Button_src.c: 89:                     night_lower_lower = modulus_func(night_lower_lowe
      +                          r,10);
  3102  0CE5  0823               	movf	_night_lower_lower+1,w
  3103  0CE6  00F8               	movwf	modulus_func@x+1
  3104  0CE7  0822               	movf	_night_lower_lower,w
  3105  0CE8  00F7               	movwf	modulus_func@x
  3106  0CE9  300A               	movlw	10
  3107  0CEA  00F9               	movwf	modulus_func@y
  3108  0CEB  3000               	movlw	0
  3109  0CEC  00FA               	movwf	modulus_func@y+1
  3110  0CED  160A  118A  21B7  120A  158A  	fcall	_modulus_func
  3111  0CF2  0878               	movf	?_modulus_func+1,w
  3112  0CF3  00A3               	movwf	_night_lower_lower+1
  3113  0CF4  0877               	movf	?_modulus_func,w
  3114  0CF5  00A2               	movwf	_night_lower_lower
  3115                           
  3116                           ;Button_src.c: 90:                    if (p == 1){
  3117  0CF6  0324               	decf	_p,w
  3118  0CF7  0425               	iorwf	_p+1,w
  3119  0CF8  1D03               	btfss	3,2
  3120  0CF9  2D1B               	goto	l4281
  3121                           
  3122                           ;Button_src.c: 91:                         night_lower_upper = incrementor(night_lower_u
      +                          pper,night_lower_lower,'0');
  3123  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  3124  0CFB  082C               	movf	(_night_lower_upper+1)^(0+128),w
  3125  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0CFD  00E1               	movwf	incrementor@upper_val+1
  3127  0CFE  1683               	bsf	3,5	;RP0=1, select bank1
  3128  0CFF  082B               	movf	_night_lower_upper^(0+128),w
  3129  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  3130  0D01  00E0               	movwf	incrementor@upper_val
  3131  0D02  0823               	movf	_night_lower_lower+1,w
  3132  0D03  00E3               	movwf	incrementor@lower_val+1
  3133  0D04  0822               	movf	_night_lower_lower,w
  3134  0D05  00E2               	movwf	incrementor@lower_val
  3135  0D06  3030               	movlw	48
  3136  0D07  00E5               	movwf	??_thermometer_threshhold_settings
  3137  0D08  0865               	movf	??_thermometer_threshhold_settings,w
  3138  0D09  00E4               	movwf	incrementor@z
  3139  0D0A  160A  118A  22FB  120A  158A  	fcall	_incrementor
  3140  0D0F  00E6               	movwf	??_thermometer_threshhold_settings+1
  3141  0D10  01E7               	clrf	??_thermometer_threshhold_settings+2
  3142  0D11  0866               	movf	??_thermometer_threshhold_settings+1,w
  3143  0D12  1683               	bsf	3,5	;RP0=1, select bank1
  3144  0D13  00AB               	movwf	_night_lower_upper^(0+128)
  3145  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0D15  0867               	movf	??_thermometer_threshhold_settings+2,w
  3147  0D16  1683               	bsf	3,5	;RP0=1, select bank1
  3148  0D17  00AC               	movwf	(_night_lower_upper+1)^(0+128)
  3149                           
  3150                           ;Button_src.c: 92:                         p = 0;
  3151  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0D19  01A4               	clrf	_p
  3153  0D1A  01A5               	clrf	_p+1
  3154  0D1B                     l4281:	
  3155                           
  3156                           ;Button_src.c: 94:                     if (night_lower_lower == 9){
  3157  0D1B  3009               	movlw	9
  3158  0D1C  0622               	xorwf	_night_lower_lower,w
  3159  0D1D  0423               	iorwf	_night_lower_lower+1,w
  3160  0D1E  1D03               	btfss	3,2
  3161  0D1F  2D24               	goto	l4285
  3162                           
  3163                           ;Button_src.c: 95:                         p = 1;
  3164  0D20  3001               	movlw	1
  3165  0D21  00A4               	movwf	_p
  3166  0D22  3000               	movlw	0
  3167  0D23  00A5               	movwf	_p+1
  3168  0D24                     l4285:	
  3169                           
  3170                           ;Button_src.c: 97:                     button_delay();
  3171  0D24  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3172  0D29                     l4287:	
  3173                           
  3174                           ;Button_src.c: 99:             RC0 = 1;
  3175  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  3177  0D2B  1407               	bsf	7,0	;volatile
  3178                           
  3179                           ;Button_src.c: 100:             RC1 = 0;
  3180  0D2C  1087               	bcf	7,1	;volatile
  3181                           
  3182                           ;Button_src.c: 101:             RC2 = 1;
  3183  0D2D  1507               	bsf	7,2	;volatile
  3184                           
  3185                           ;Button_src.c: 102:             RC3 = 1;
  3186  0D2E  1587               	bsf	7,3	;volatile
  3187                           
  3188                           ;Button_src.c: 103:             if(RC7==0 && b == 'a'){
  3189  0D2F  1B87               	btfsc	7,7	;volatile
  3190  0D30  2D7F               	goto	l4315
  3191  0D31  3061               	movlw	97
  3192  0D32  0649               	xorwf	_b,w
  3193  0D33  1D03               	btfss	3,2
  3194  0D34  2D7F               	goto	l4315
  3195                           
  3196                           ;Button_src.c: 104:                     day_lower_lower++;
  3197  0D35  3001               	movlw	1
  3198  0D36  07A0               	addwf	_day_lower_lower,f
  3199  0D37  1803               	skipnc
  3200  0D38  0AA1               	incf	_day_lower_lower+1,f
  3201  0D39  3000               	movlw	0
  3202  0D3A  07A1               	addwf	_day_lower_lower+1,f
  3203                           
  3204                           ;Button_src.c: 105:                     day_lower_lower = modulus_func(day_lower_lower,1
      +                          0);
  3205  0D3B  0821               	movf	_day_lower_lower+1,w
  3206  0D3C  00F8               	movwf	modulus_func@x+1
  3207  0D3D  0820               	movf	_day_lower_lower,w
  3208  0D3E  00F7               	movwf	modulus_func@x
  3209  0D3F  300A               	movlw	10
  3210  0D40  00F9               	movwf	modulus_func@y
  3211  0D41  3000               	movlw	0
  3212  0D42  00FA               	movwf	modulus_func@y+1
  3213  0D43  160A  118A  21B7  120A  158A  	fcall	_modulus_func
  3214  0D48  0878               	movf	?_modulus_func+1,w
  3215  0D49  00A1               	movwf	_day_lower_lower+1
  3216  0D4A  0877               	movf	?_modulus_func,w
  3217  0D4B  00A0               	movwf	_day_lower_lower
  3218                           
  3219                           ;Button_src.c: 106:                    if (p == 1){
  3220  0D4C  0324               	decf	_p,w
  3221  0D4D  0425               	iorwf	_p+1,w
  3222  0D4E  1D03               	btfss	3,2
  3223  0D4F  2D71               	goto	l4309
  3224                           
  3225                           ;Button_src.c: 107:                         day_lower_upper = incrementor(day_lower_uppe
      +                          r,day_lower_lower,'0');
  3226  0D50  1683               	bsf	3,5	;RP0=1, select bank1
  3227  0D51  082A               	movf	(_day_lower_upper+1)^(0+128),w
  3228  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0D53  00E1               	movwf	incrementor@upper_val+1
  3230  0D54  1683               	bsf	3,5	;RP0=1, select bank1
  3231  0D55  0829               	movf	_day_lower_upper^(0+128),w
  3232  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0D57  00E0               	movwf	incrementor@upper_val
  3234  0D58  0821               	movf	_day_lower_lower+1,w
  3235  0D59  00E3               	movwf	incrementor@lower_val+1
  3236  0D5A  0820               	movf	_day_lower_lower,w
  3237  0D5B  00E2               	movwf	incrementor@lower_val
  3238  0D5C  3030               	movlw	48
  3239  0D5D  00E5               	movwf	??_thermometer_threshhold_settings
  3240  0D5E  0865               	movf	??_thermometer_threshhold_settings,w
  3241  0D5F  00E4               	movwf	incrementor@z
  3242  0D60  160A  118A  22FB  120A  158A  	fcall	_incrementor
  3243  0D65  00E6               	movwf	??_thermometer_threshhold_settings+1
  3244  0D66  01E7               	clrf	??_thermometer_threshhold_settings+2
  3245  0D67  0866               	movf	??_thermometer_threshhold_settings+1,w
  3246  0D68  1683               	bsf	3,5	;RP0=1, select bank1
  3247  0D69  00A9               	movwf	_day_lower_upper^(0+128)
  3248  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0D6B  0867               	movf	??_thermometer_threshhold_settings+2,w
  3250  0D6C  1683               	bsf	3,5	;RP0=1, select bank1
  3251  0D6D  00AA               	movwf	(_day_lower_upper+1)^(0+128)
  3252                           
  3253                           ;Button_src.c: 108:                         p = 0;
  3254  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0D6F  01A4               	clrf	_p
  3256  0D70  01A5               	clrf	_p+1
  3257  0D71                     l4309:	
  3258                           
  3259                           ;Button_src.c: 110:                     if (day_lower_lower == 9){
  3260  0D71  3009               	movlw	9
  3261  0D72  0620               	xorwf	_day_lower_lower,w
  3262  0D73  0421               	iorwf	_day_lower_lower+1,w
  3263  0D74  1D03               	btfss	3,2
  3264  0D75  2D7A               	goto	l4313
  3265                           
  3266                           ;Button_src.c: 111:                         p = 1;
  3267  0D76  3001               	movlw	1
  3268  0D77  00A4               	movwf	_p
  3269  0D78  3000               	movlw	0
  3270  0D79  00A5               	movwf	_p+1
  3271  0D7A                     l4313:	
  3272                           
  3273                           ;Button_src.c: 113:                     button_delay();
  3274  0D7A  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3275  0D7F                     l4315:	
  3276                           
  3277                           ;Button_src.c: 115:             RC0 = 1;
  3278  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0D81  1407               	bsf	7,0	;volatile
  3281                           
  3282                           ;Button_src.c: 116:             RC1 = 0;
  3283  0D82  1087               	bcf	7,1	;volatile
  3284                           
  3285                           ;Button_src.c: 117:             RC2 = 1;
  3286  0D83  1507               	bsf	7,2	;volatile
  3287                           
  3288                           ;Button_src.c: 118:             RC3 = 1;
  3289  0D84  1587               	bsf	7,3	;volatile
  3290                           
  3291                           ;Button_src.c: 119:             z = modulus_func(z,4);
  3292  0D85  082D               	movf	_z+1,w
  3293  0D86  00F8               	movwf	modulus_func@x+1
  3294  0D87  082C               	movf	_z,w
  3295  0D88  00F7               	movwf	modulus_func@x
  3296  0D89  3004               	movlw	4
  3297  0D8A  00F9               	movwf	modulus_func@y
  3298  0D8B  3000               	movlw	0
  3299  0D8C  00FA               	movwf	modulus_func@y+1
  3300  0D8D  160A  118A  21B7  120A  158A  	fcall	_modulus_func
  3301  0D92  0878               	movf	?_modulus_func+1,w
  3302  0D93  00AD               	movwf	_z+1
  3303  0D94  0877               	movf	?_modulus_func,w
  3304  0D95  00AC               	movwf	_z
  3305                           
  3306                           ;Button_src.c: 120:             if(RC4 == 0 && z ==0){
  3307  0D96  1A07               	btfsc	7,4	;volatile
  3308  0D97  2DF5               	goto	l4357
  3309  0D98  082C               	movf	_z,w
  3310  0D99  042D               	iorwf	_z+1,w
  3311  0D9A  1D03               	btfss	3,2
  3312  0D9B  2DF5               	goto	l4357
  3313                           
  3314                           ;Button_src.c: 121:             z++;
  3315  0D9C  3001               	movlw	1
  3316  0D9D  07AC               	addwf	_z,f
  3317  0D9E  1803               	skipnc
  3318  0D9F  0AAD               	incf	_z+1,f
  3319  0DA0  3000               	movlw	0
  3320  0DA1  07AD               	addwf	_z+1,f
  3321                           
  3322                           ;Button_src.c: 122:             write_cmd(0x90);
  3323  0DA2  3090               	movlw	144
  3324  0DA3  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3325                           
  3326                           ;Button_src.c: 123:             write_char('D');
  3327  0DA8  3044               	movlw	68
  3328  0DA9  160A  118A  2228  120A  158A  	fcall	_write_char
  3329                           
  3330                           ;Button_src.c: 124:             write_char('a');
  3331  0DAE  3061               	movlw	97
  3332  0DAF  160A  118A  2228  120A  158A  	fcall	_write_char
  3333                           
  3334                           ;Button_src.c: 125:             write_char('y');
  3335  0DB4  3079               	movlw	121
  3336  0DB5  160A  118A  2228  120A  158A  	fcall	_write_char
  3337                           
  3338                           ;Button_src.c: 126:             write_char('(');
  3339  0DBA  3028               	movlw	40
  3340  0DBB  160A  118A  2228  120A  158A  	fcall	_write_char
  3341                           
  3342                           ;Button_src.c: 127:             write_char('U');
  3343  0DC0  3055               	movlw	85
  3344  0DC1  160A  118A  2228  120A  158A  	fcall	_write_char
  3345                           
  3346                           ;Button_src.c: 128:             write_char(')');
  3347  0DC6  3029               	movlw	41
  3348  0DC7  160A  118A  2228  120A  158A  	fcall	_write_char
  3349                           
  3350                           ;Button_src.c: 129:             write_char(':');
  3351  0DCC  303A               	movlw	58
  3352  0DCD  160A  118A  2228  120A  158A  	fcall	_write_char
  3353                           
  3354                           ;Button_src.c: 130:             write_char(' ');
  3355  0DD2  3020               	movlw	32
  3356  0DD3  160A  118A  2228  120A  158A  	fcall	_write_char
  3357                           
  3358                           ;Button_src.c: 131:             write_char(' ');
  3359  0DD8  3020               	movlw	32
  3360  0DD9  160A  118A  2228  120A  158A  	fcall	_write_char
  3361                           
  3362                           ;Button_src.c: 132:            write_char(var1 + '0');
  3363  0DDE  084F               	movf	_var1,w
  3364  0DDF  3E30               	addlw	48
  3365  0DE0  160A  118A  2228  120A  158A  	fcall	_write_char
  3366                           
  3367                           ;Button_src.c: 133:            write_char(var2 + '0');
  3368  0DE5  084E               	movf	_var2,w
  3369  0DE6  3E30               	addlw	48
  3370  0DE7  160A  118A  2228  120A  158A  	fcall	_write_char
  3371                           
  3372                           ;Button_src.c: 134:             b = 'x';
  3373  0DEC  3078               	movlw	120
  3374  0DED  00E5               	movwf	??_thermometer_threshhold_settings
  3375  0DEE  0865               	movf	??_thermometer_threshhold_settings,w
  3376  0DEF  00C9               	movwf	_b
  3377                           
  3378                           ;Button_src.c: 135:             button_delay();
  3379  0DF0  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3380  0DF5                     l4357:	
  3381                           
  3382                           ;Button_src.c: 137:             RC0 = 1;
  3383  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0DF7  1407               	bsf	7,0	;volatile
  3386                           
  3387                           ;Button_src.c: 138:             RC1 = 0;
  3388  0DF8  1087               	bcf	7,1	;volatile
  3389                           
  3390                           ;Button_src.c: 139:             RC2 = 1;
  3391  0DF9  1507               	bsf	7,2	;volatile
  3392                           
  3393                           ;Button_src.c: 140:             RC3 = 1;
  3394  0DFA  1587               	bsf	7,3	;volatile
  3395                           
  3396                           ;Button_src.c: 141:             if(RC4 == 0 && z ==1){
  3397  0DFB  1A07               	btfsc	7,4	;volatile
  3398  0DFC  2E5B               	goto	l4375
  3399  0DFD  032C               	decf	_z,w
  3400  0DFE  042D               	iorwf	_z+1,w
  3401  0DFF  1D03               	btfss	3,2
  3402  0E00  2E5B               	goto	l4375
  3403                           
  3404                           ;Button_src.c: 142:             write_cmd(0x90);
  3405  0E01  3090               	movlw	144
  3406  0E02  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3407                           
  3408                           ;Button_src.c: 143:             write_char('N');
  3409  0E07  304E               	movlw	78
  3410  0E08  160A  118A  2228  120A  158A  	fcall	_write_char
  3411                           
  3412                           ;Button_src.c: 144:             write_char('i');
  3413  0E0D  3069               	movlw	105
  3414  0E0E  160A  118A  2228  120A  158A  	fcall	_write_char
  3415                           
  3416                           ;Button_src.c: 145:             write_char('g');
  3417  0E13  3067               	movlw	103
  3418  0E14  160A  118A  2228  120A  158A  	fcall	_write_char
  3419                           
  3420                           ;Button_src.c: 146:             write_char('h');
  3421  0E19  3068               	movlw	104
  3422  0E1A  160A  118A  2228  120A  158A  	fcall	_write_char
  3423                           
  3424                           ;Button_src.c: 147:             write_char('t');
  3425  0E1F  3074               	movlw	116
  3426  0E20  160A  118A  2228  120A  158A  	fcall	_write_char
  3427                           
  3428                           ;Button_src.c: 148:             write_char('(');
  3429  0E25  3028               	movlw	40
  3430  0E26  160A  118A  2228  120A  158A  	fcall	_write_char
  3431                           
  3432                           ;Button_src.c: 149:             write_char('U');
  3433  0E2B  3055               	movlw	85
  3434  0E2C  160A  118A  2228  120A  158A  	fcall	_write_char
  3435                           
  3436                           ;Button_src.c: 150:             write_char(')');
  3437  0E31  3029               	movlw	41
  3438  0E32  160A  118A  2228  120A  158A  	fcall	_write_char
  3439                           
  3440                           ;Button_src.c: 151:             write_char(':');
  3441  0E37  303A               	movlw	58
  3442  0E38  160A  118A  2228  120A  158A  	fcall	_write_char
  3443                           
  3444                           ;Button_src.c: 152:             write_char(cold_high + '0');
  3445  0E3D  0836               	movf	_cold_high,w
  3446  0E3E  3E30               	addlw	48
  3447  0E3F  160A  118A  2228  120A  158A  	fcall	_write_char
  3448                           
  3449                           ;Button_src.c: 153:             write_char(cold_low + '0');
  3450  0E44  1683               	bsf	3,5	;RP0=1, select bank1
  3451  0E45  0835               	movf	_cold_low^(0+128),w
  3452  0E46  3E30               	addlw	48
  3453  0E47  160A  118A  2228  120A  158A  	fcall	_write_char
  3454                           
  3455                           ;Button_src.c: 154:             b = 'y';
  3456  0E4C  3079               	movlw	121
  3457  0E4D  00E5               	movwf	??_thermometer_threshhold_settings
  3458  0E4E  0865               	movf	??_thermometer_threshhold_settings,w
  3459  0E4F  00C9               	movwf	_b
  3460                           
  3461                           ;Button_src.c: 155:             z++;
  3462  0E50  3001               	movlw	1
  3463  0E51  07AC               	addwf	_z,f
  3464  0E52  1803               	skipnc
  3465  0E53  0AAD               	incf	_z+1,f
  3466  0E54  3000               	movlw	0
  3467  0E55  07AD               	addwf	_z+1,f
  3468                           
  3469                           ;Button_src.c: 156:             button_delay();
  3470  0E56  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3471  0E5B                     l4375:	
  3472                           
  3473                           ;Button_src.c: 158:             RC0 = 1;
  3474  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0E5D  1407               	bsf	7,0	;volatile
  3477                           
  3478                           ;Button_src.c: 159:             RC1 = 0;
  3479  0E5E  1087               	bcf	7,1	;volatile
  3480                           
  3481                           ;Button_src.c: 160:             RC2 = 1;
  3482  0E5F  1507               	bsf	7,2	;volatile
  3483                           
  3484                           ;Button_src.c: 161:             RC3 = 1;
  3485  0E60  1587               	bsf	7,3	;volatile
  3486                           
  3487                           ;Button_src.c: 162:             if(RC4 == 0 && z ==2){
  3488  0E61  1A07               	btfsc	7,4	;volatile
  3489  0E62  2EBF               	goto	l4393
  3490  0E63  3002               	movlw	2
  3491  0E64  062C               	xorwf	_z,w
  3492  0E65  042D               	iorwf	_z+1,w
  3493  0E66  1D03               	btfss	3,2
  3494  0E67  2EBF               	goto	l4393
  3495                           
  3496                           ;Button_src.c: 163:             write_cmd(0x90);
  3497  0E68  3090               	movlw	144
  3498  0E69  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3499                           
  3500                           ;Button_src.c: 164:             write_char('N');
  3501  0E6E  304E               	movlw	78
  3502  0E6F  160A  118A  2228  120A  158A  	fcall	_write_char
  3503                           
  3504                           ;Button_src.c: 165:             write_char('i');
  3505  0E74  3069               	movlw	105
  3506  0E75  160A  118A  2228  120A  158A  	fcall	_write_char
  3507                           
  3508                           ;Button_src.c: 166:             write_char('g');
  3509  0E7A  3067               	movlw	103
  3510  0E7B  160A  118A  2228  120A  158A  	fcall	_write_char
  3511                           
  3512                           ;Button_src.c: 167:             write_char('h');
  3513  0E80  3068               	movlw	104
  3514  0E81  160A  118A  2228  120A  158A  	fcall	_write_char
  3515                           
  3516                           ;Button_src.c: 168:             write_char('t');
  3517  0E86  3074               	movlw	116
  3518  0E87  160A  118A  2228  120A  158A  	fcall	_write_char
  3519                           
  3520                           ;Button_src.c: 169:             write_char('(');
  3521  0E8C  3028               	movlw	40
  3522  0E8D  160A  118A  2228  120A  158A  	fcall	_write_char
  3523                           
  3524                           ;Button_src.c: 170:             write_char('L');
  3525  0E92  304C               	movlw	76
  3526  0E93  160A  118A  2228  120A  158A  	fcall	_write_char
  3527                           
  3528                           ;Button_src.c: 171:             write_char(')');
  3529  0E98  3029               	movlw	41
  3530  0E99  160A  118A  2228  120A  158A  	fcall	_write_char
  3531                           
  3532                           ;Button_src.c: 172:             write_char(':');
  3533  0E9E  303A               	movlw	58
  3534  0E9F  160A  118A  2228  120A  158A  	fcall	_write_char
  3535                           
  3536                           ;Button_src.c: 173:            write_char(cold_high_night + '0');
  3537  0EA4  3030               	movlw	48
  3538  0EA5  160A  118A  2228  120A  158A  	fcall	_write_char
  3539                           
  3540                           ;Button_src.c: 174:            write_char(cold_low_night + '0');
  3541  0EAA  3030               	movlw	48
  3542  0EAB  160A  118A  2228  120A  158A  	fcall	_write_char
  3543                           
  3544                           ;Button_src.c: 175:             b = 'z';
  3545  0EB0  307A               	movlw	122
  3546  0EB1  00E5               	movwf	??_thermometer_threshhold_settings
  3547  0EB2  0865               	movf	??_thermometer_threshhold_settings,w
  3548  0EB3  00C9               	movwf	_b
  3549                           
  3550                           ;Button_src.c: 176:             z++;
  3551  0EB4  3001               	movlw	1
  3552  0EB5  07AC               	addwf	_z,f
  3553  0EB6  1803               	skipnc
  3554  0EB7  0AAD               	incf	_z+1,f
  3555  0EB8  3000               	movlw	0
  3556  0EB9  07AD               	addwf	_z+1,f
  3557                           
  3558                           ;Button_src.c: 177:             button_delay();
  3559  0EBA  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3560  0EBF                     l4393:	
  3561                           
  3562                           ;Button_src.c: 179:             if(RC4 == 0 && z ==3){
  3563  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  3564  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  3565  0EC1  1A07               	btfsc	7,4	;volatile
  3566  0EC2  2F21               	goto	l4425
  3567  0EC3  3003               	movlw	3
  3568  0EC4  062C               	xorwf	_z,w
  3569  0EC5  042D               	iorwf	_z+1,w
  3570  0EC6  1D03               	btfss	3,2
  3571  0EC7  2F21               	goto	l4425
  3572                           
  3573                           ;Button_src.c: 180:             z++;
  3574  0EC8  3001               	movlw	1
  3575  0EC9  07AC               	addwf	_z,f
  3576  0ECA  1803               	skipnc
  3577  0ECB  0AAD               	incf	_z+1,f
  3578  0ECC  3000               	movlw	0
  3579  0ECD  07AD               	addwf	_z+1,f
  3580                           
  3581                           ;Button_src.c: 181:             write_cmd(0x90);
  3582  0ECE  3090               	movlw	144
  3583  0ECF  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3584                           
  3585                           ;Button_src.c: 182:             write_char('D');
  3586  0ED4  3044               	movlw	68
  3587  0ED5  160A  118A  2228  120A  158A  	fcall	_write_char
  3588                           
  3589                           ;Button_src.c: 183:             write_char('a');
  3590  0EDA  3061               	movlw	97
  3591  0EDB  160A  118A  2228  120A  158A  	fcall	_write_char
  3592                           
  3593                           ;Button_src.c: 184:             write_char('y');
  3594  0EE0  3079               	movlw	121
  3595  0EE1  160A  118A  2228  120A  158A  	fcall	_write_char
  3596                           
  3597                           ;Button_src.c: 185:             write_char('(');
  3598  0EE6  3028               	movlw	40
  3599  0EE7  160A  118A  2228  120A  158A  	fcall	_write_char
  3600                           
  3601                           ;Button_src.c: 186:             write_char('L');
  3602  0EEC  304C               	movlw	76
  3603  0EED  160A  118A  2228  120A  158A  	fcall	_write_char
  3604                           
  3605                           ;Button_src.c: 187:             write_char(')');
  3606  0EF2  3029               	movlw	41
  3607  0EF3  160A  118A  2228  120A  158A  	fcall	_write_char
  3608                           
  3609                           ;Button_src.c: 188:             write_char(':');
  3610  0EF8  303A               	movlw	58
  3611  0EF9  160A  118A  2228  120A  158A  	fcall	_write_char
  3612                           
  3613                           ;Button_src.c: 189:             write_char(' ');
  3614  0EFE  3020               	movlw	32
  3615  0EFF  160A  118A  2228  120A  158A  	fcall	_write_char
  3616                           
  3617                           ;Button_src.c: 190:             write_char(' ');
  3618  0F04  3020               	movlw	32
  3619  0F05  160A  118A  2228  120A  158A  	fcall	_write_char
  3620                           
  3621                           ;Button_src.c: 191:            write_char(var1 + '0');
  3622  0F0A  084F               	movf	_var1,w
  3623  0F0B  3E30               	addlw	48
  3624  0F0C  160A  118A  2228  120A  158A  	fcall	_write_char
  3625                           
  3626                           ;Button_src.c: 192:            write_char(var2 + '0');
  3627  0F11  084E               	movf	_var2,w
  3628  0F12  3E30               	addlw	48
  3629  0F13  160A  118A  2228  120A  158A  	fcall	_write_char
  3630                           
  3631                           ;Button_src.c: 193:             b = 'a';
  3632  0F18  3061               	movlw	97
  3633  0F19  00E5               	movwf	??_thermometer_threshhold_settings
  3634  0F1A  0865               	movf	??_thermometer_threshhold_settings,w
  3635  0F1B  00C9               	movwf	_b
  3636                           
  3637                           ;Button_src.c: 194:             button_delay();
  3638  0F1C  160A  118A  21EC  120A  158A  	fcall	_button_delay
  3639  0F21                     l4425:	
  3640                           
  3641                           ;Button_src.c: 196:             write_cmd(0x88);
  3642  0F21  3088               	movlw	136
  3643  0F22  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3644                           
  3645                           ;Button_src.c: 197:             write_char('T');
  3646  0F27  3054               	movlw	84
  3647  0F28  160A  118A  2228  120A  158A  	fcall	_write_char
  3648                           
  3649                           ;Button_src.c: 198:             write_char('1');
  3650  0F2D  3031               	movlw	49
  3651  0F2E  160A  118A  2228  120A  158A  	fcall	_write_char
  3652                           
  3653                           ;Button_src.c: 199:             write_char(':');
  3654  0F33  303A               	movlw	58
  3655  0F34  160A  118A  2228  120A  158A  	fcall	_write_char
  3656                           
  3657                           ;Button_src.c: 200:             write_char(y + '0');
  3658  0F39  082E               	movf	_y,w
  3659  0F3A  3E30               	addlw	48
  3660  0F3B  160A  118A  2228  120A  158A  	fcall	_write_char
  3661                           
  3662                           ;Button_src.c: 201:             write_char(x + '0');
  3663  0F40  0830               	movf	_x,w
  3664  0F41  3E30               	addlw	48
  3665  0F42  160A  118A  2228  120A  158A  	fcall	_write_char
  3666                           
  3667                           ;Button_src.c: 202:             write_char('T');
  3668  0F47  3054               	movlw	84
  3669  0F48  160A  118A  2228  120A  158A  	fcall	_write_char
  3670                           
  3671                           ;Button_src.c: 203:             write_char('2');
  3672  0F4D  3032               	movlw	50
  3673  0F4E  160A  118A  2228  120A  158A  	fcall	_write_char
  3674                           
  3675                           ;Button_src.c: 204:             write_char(':');
  3676  0F53  303A               	movlw	58
  3677  0F54  160A  118A  2228  120A  158A  	fcall	_write_char
  3678                           
  3679                           ;Button_src.c: 205:             write_char(w + '0');
  3680  0F59  0832               	movf	_w,w
  3681  0F5A  3E30               	addlw	48
  3682  0F5B  160A  118A  2228  120A  158A  	fcall	_write_char
  3683                           
  3684                           ;Button_src.c: 206:             write_char(t + '0');
  3685  0F60  0834               	movf	_t,w
  3686  0F61  3E30               	addlw	48
  3687  0F62  160A  118A  2228  120A  158A  	fcall	_write_char
  3688                           
  3689                           ;Button_src.c: 207:             write_char('T');
  3690  0F67  3054               	movlw	84
  3691  0F68  160A  118A  2228  120A  158A  	fcall	_write_char
  3692                           
  3693                           ;Button_src.c: 208:             write_char('3');
  3694  0F6D  3033               	movlw	51
  3695  0F6E  160A  118A  2228  120A  158A  	fcall	_write_char
  3696                           
  3697                           ;Button_src.c: 209:             write_char(':');
  3698  0F73  303A               	movlw	58
  3699  0F74  160A  118A  2228  120A  158A  	fcall	_write_char
  3700                           
  3701                           ;Button_src.c: 210:             write_char(night_lower_upper + '0');
  3702  0F79  1683               	bsf	3,5	;RP0=1, select bank1
  3703  0F7A  082B               	movf	_night_lower_upper^(0+128),w
  3704  0F7B  3E30               	addlw	48
  3705  0F7C  160A  118A  2228  120A  158A  	fcall	_write_char
  3706                           
  3707                           ;Button_src.c: 211:             write_char(night_lower_lower + '0');
  3708  0F81  0822               	movf	_night_lower_lower,w
  3709  0F82  3E30               	addlw	48
  3710  0F83  160A  118A  2228  120A  158A  	fcall	_write_char
  3711                           
  3712                           ;Button_src.c: 212:             write_cmd(0x98);
  3713  0F88  3098               	movlw	152
  3714  0F89  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3715                           
  3716                           ;Button_src.c: 213:             write_char('T');
  3717  0F8E  3054               	movlw	84
  3718  0F8F  160A  118A  2228  120A  158A  	fcall	_write_char
  3719                           
  3720                           ;Button_src.c: 214:             write_char('4');
  3721  0F94  3034               	movlw	52
  3722  0F95  160A  118A  2228  120A  158A  	fcall	_write_char
  3723                           
  3724                           ;Button_src.c: 215:             write_char(':');
  3725  0F9A  303A               	movlw	58
  3726  0F9B  160A  118A  2228  120A  158A  	fcall	_write_char
  3727                           
  3728                           ;Button_src.c: 216:             write_char(day_lower_upper + '0');
  3729  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  3730  0FA1  0829               	movf	_day_lower_upper^(0+128),w
  3731  0FA2  3E30               	addlw	48
  3732  0FA3  160A  118A  2228  120A  158A  	fcall	_write_char
  3733                           
  3734                           ;Button_src.c: 217:             write_char(day_lower_lower + '0');
  3735  0FA8  0820               	movf	_day_lower_lower,w
  3736  0FA9  3E30               	addlw	48
  3737  0FAA  160A  118A  2228  120A  158A  	fcall	_write_char
  3738                           
  3739                           ;Button_src.c: 279:                 RC0 = 0;
  3740  0FAF  1007               	bcf	7,0	;volatile
  3741                           
  3742                           ;Button_src.c: 280:                 RC1 = 1;
  3743  0FB0  1487               	bsf	7,1	;volatile
  3744                           
  3745                           ;Button_src.c: 281:                 RC2 = 1;
  3746  0FB1  1507               	bsf	7,2	;volatile
  3747                           
  3748                           ;Button_src.c: 282:                 RC3 = 1;
  3749  0FB2  1587               	bsf	7,3	;volatile
  3750                           
  3751                           ;Button_src.c: 283:                     if(RC6 == 0){
  3752  0FB3  1B07               	btfsc	7,6	;volatile
  3753  0FB4  2FED               	goto	l778
  3754                           
  3755                           ;Button_src.c: 284:                         var1 = w;
  3756  0FB5  0832               	movf	_w,w
  3757  0FB6  00E5               	movwf	??_thermometer_threshhold_settings
  3758  0FB7  0865               	movf	??_thermometer_threshhold_settings,w
  3759  0FB8  00CF               	movwf	_var1
  3760                           
  3761                           ;Button_src.c: 285:                         var2 = t;
  3762  0FB9  0834               	movf	_t,w
  3763  0FBA  00E5               	movwf	??_thermometer_threshhold_settings
  3764  0FBB  0865               	movf	??_thermometer_threshhold_settings,w
  3765  0FBC  00CE               	movwf	_var2
  3766                           
  3767                           ;Button_src.c: 286:                         w = 0;
  3768  0FBD  01B2               	clrf	_w
  3769  0FBE  01B3               	clrf	_w+1
  3770                           
  3771                           ;Button_src.c: 287:                         t = 0;
  3772  0FBF  01B4               	clrf	_t
  3773  0FC0  01B5               	clrf	_t+1
  3774                           
  3775                           ;Button_src.c: 288:                         x = 0;
  3776  0FC1  01B0               	clrf	_x
  3777  0FC2  01B1               	clrf	_x+1
  3778                           
  3779                           ;Button_src.c: 289:                         t = 0;
  3780  0FC3  01B4               	clrf	_t
  3781  0FC4  01B5               	clrf	_t+1
  3782                           
  3783                           ;Button_src.c: 291:                         write_cmd(0x1);
  3784  0FC5  3001               	movlw	1
  3785  0FC6  160A  118A  223F  120A  158A  	fcall	_write_cmd
  3786                           
  3787                           ;Button_src.c: 292:                         write_char('S');
  3788  0FCB  3053               	movlw	83
  3789  0FCC  160A  118A  2228  120A  158A  	fcall	_write_char
  3790                           
  3791                           ;Button_src.c: 293:                         write_char('A');
  3792  0FD1  3041               	movlw	65
  3793  0FD2  160A  118A  2228  120A  158A  	fcall	_write_char
  3794                           
  3795                           ;Button_src.c: 294:                         write_char('V');
  3796  0FD7  3056               	movlw	86
  3797  0FD8  160A  118A  2228  120A  158A  	fcall	_write_char
  3798                           
  3799                           ;Button_src.c: 295:                         write_char('E');
  3800  0FDD  3045               	movlw	69
  3801  0FDE  160A  118A  2228  120A  158A  	fcall	_write_char
  3802                           
  3803                           ;Button_src.c: 296:                         write_char('D');
  3804  0FE3  3044               	movlw	68
  3805  0FE4  160A  118A  2228  120A  158A  	fcall	_write_char
  3806                           
  3807                           ;Button_src.c: 297:                         button_delay();
  3808  0FE9  160A  118A  21EC   	fcall	_button_delay
  3809  0FEC  0008               	return
  3810  0FED                     l778:	
  3811                           ;Button_src.c: 299:                     }
  3812                           
  3813                           
  3814                           ;Button_src.c: 300:             RC0 = 0;
  3815  0FED  1007               	bcf	7,0	;volatile
  3816                           
  3817                           ;Button_src.c: 301:             RC1 = 1;
  3818  0FEE  1487               	bsf	7,1	;volatile
  3819                           
  3820                           ;Button_src.c: 302:             RC2 = 1;
  3821  0FEF  1507               	bsf	7,2	;volatile
  3822                           
  3823                           ;Button_src.c: 303:             RC3 = 1;
  3824  0FF0  1587               	bsf	7,3	;volatile
  3825                           
  3826                           ;Button_src.c: 304:             if (RC7 == 0 ){
  3827  0FF1  1B87               	btfsc	7,7	;volatile
  3828  0FF2  2BF1               	goto	l761
  3829                           
  3830                           ;Button_src.c: 305:             write_cmd(0x1);
  3831  0FF3  3001               	movlw	1
  3832  0FF4  160A  118A  223F   	fcall	_write_cmd
  3833                           
  3834                           ;Button_src.c: 306:              w = 0;
  3835  0FF7  01B2               	clrf	_w
  3836  0FF8  01B3               	clrf	_w+1
  3837                           
  3838                           ;Button_src.c: 307:                         t = 0;
  3839  0FF9  01B4               	clrf	_t
  3840  0FFA  01B5               	clrf	_t+1
  3841                           
  3842                           ;Button_src.c: 308:                         x = 0;
  3843  0FFB  01B0               	clrf	_x
  3844  0FFC  01B1               	clrf	_x+1
  3845                           
  3846                           ;Button_src.c: 309:                         t = 0;
  3847  0FFD  01B4               	clrf	_t
  3848  0FFE  01B5               	clrf	_t+1
  3849  0FFF  0008               	return
  3850  1000                     __end_of_thermometer_threshhold_settings:	
  3851                           
  3852                           	psect	text3
  3853  1596                     __ptext3:	
  3854 ;; *************** function _set_upper_threshold *****************
  3855 ;; Defined at:
  3856 ;;		line 4 in file "threshold_src.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  upper_val       2    3[COMMON] int 
  3859 ;;  lower_val       2    5[COMMON] int 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      unsigned char 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 300/0
  3868 ;;		On exit  : 300/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3871 ;;      Params:         4       0       0       0       0
  3872 ;;      Locals:         0       0       0       0       0
  3873 ;;      Temps:          1       0       0       0       0
  3874 ;;      Totals:         5       0       0       0       0
  3875 ;;Total ram usage:        5 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    2
  3878 ;; This function calls:
  3879 ;;		_write_char
  3880 ;; This function is called by:
  3881 ;;		_main
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           
  3886                           ;psect for function _set_upper_threshold
  3887  1596                     _set_upper_threshold:	
  3888                           
  3889                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3893  1596  0874               	movf	set_upper_threshold@upper_val+1,w
  3894  1597  3A80               	xorlw	128
  3895  1598  3C80               	sublw	128
  3896  1599  1D03               	skipz
  3897  159A  2D9D               	goto	u4195
  3898  159B  0873               	movf	set_upper_threshold@upper_val,w
  3899  159C  025B               	subwf	_shi,w
  3900  159D                     u4195:	
  3901  159D  1C03               	skipc
  3902  159E  2DE9               	goto	l994
  3903  159F  0876               	movf	set_upper_threshold@lower_val+1,w
  3904  15A0  3A80               	xorlw	128
  3905  15A1  3C80               	sublw	128
  3906  15A2  1D03               	skipz
  3907  15A3  2DA8               	goto	u4205
  3908  15A4  0875               	movf	set_upper_threshold@lower_val,w
  3909  15A5  1283               	bcf	3,5	;RP0=0, select bank0
  3910  15A6  1303               	bcf	3,6	;RP1=0, select bank0
  3911  15A7  025A               	subwf	_ge,w
  3912  15A8                     u4205:	
  3913  15A8  1C03               	skipc
  3914  15A9  2DE9               	goto	l994
  3915                           
  3916                           ;threshold_src.c: 6:     heat_counter ++;
  3917  15AA  3001               	movlw	1
  3918  15AB  1683               	bsf	3,5	;RP0=1, select bank1
  3919  15AC  1303               	bcf	3,6	;RP1=0, select bank1
  3920  15AD  07B9               	addwf	_heat_counter^(0+128),f
  3921  15AE  1803               	skipnc
  3922  15AF  0ABA               	incf	(_heat_counter+1)^(0+128),f
  3923  15B0  3000               	movlw	0
  3924  15B1  07BA               	addwf	(_heat_counter+1)^(0+128),f
  3925                           
  3926                           ;threshold_src.c: 7:     heater_state = '0';
  3927  15B2  3030               	movlw	48
  3928  15B3  00F7               	movwf	??_set_upper_threshold
  3929  15B4  0877               	movf	??_set_upper_threshold,w
  3930  15B5  1283               	bcf	3,5	;RP0=0, select bank0
  3931  15B6  00D1               	movwf	_heater_state
  3932                           
  3933                           ;threshold_src.c: 8:     cooler_state = '1';
  3934  15B7  3031               	movlw	49
  3935  15B8  00F7               	movwf	??_set_upper_threshold
  3936  15B9  0877               	movf	??_set_upper_threshold,w
  3937  15BA  00D0               	movwf	_cooler_state
  3938                           
  3939                           ;threshold_src.c: 9:     write_char('W');
  3940  15BB  3057               	movlw	87
  3941  15BC  160A  118A  2228  160A  118A  	fcall	_write_char
  3942                           
  3943                           ;threshold_src.c: 10:     write_char('A');
  3944  15C1  3041               	movlw	65
  3945  15C2  160A  118A  2228  160A  118A  	fcall	_write_char
  3946                           
  3947                           ;threshold_src.c: 11:     write_char('R');
  3948  15C7  3052               	movlw	82
  3949  15C8  160A  118A  2228  160A  118A  	fcall	_write_char
  3950                           
  3951                           ;threshold_src.c: 12:     write_char('M');
  3952  15CD  304D               	movlw	77
  3953  15CE  160A  118A  2228  160A  118A  	fcall	_write_char
  3954                           
  3955                           ;threshold_src.c: 13:     if(heat_counter > 100){
  3956  15D3  3000               	movlw	0
  3957  15D4  1683               	bsf	3,5	;RP0=1, select bank1
  3958  15D5  023A               	subwf	(_heat_counter+1)^(0+128),w
  3959  15D6  3065               	movlw	101
  3960  15D7  1903               	skipnz
  3961  15D8  0239               	subwf	_heat_counter^(0+128),w
  3962  15D9  1C03               	skipc
  3963  15DA  2DE9               	goto	l994
  3964                           
  3965                           ;threshold_src.c: 14:         cooler_state = '-';
  3966  15DB  302D               	movlw	45
  3967  15DC  00F7               	movwf	??_set_upper_threshold
  3968  15DD  0877               	movf	??_set_upper_threshold,w
  3969  15DE  1283               	bcf	3,5	;RP0=0, select bank0
  3970  15DF  00D0               	movwf	_cooler_state
  3971                           
  3972                           ;threshold_src.c: 15:         if(count == 2)
  3973  15E0  3002               	movlw	2
  3974  15E1  063C               	xorwf	_count,w
  3975  15E2  043D               	iorwf	_count+1,w
  3976  15E3  1D03               	btfss	3,2
  3977  15E4  2DE9               	goto	l994
  3978                           
  3979                           ;threshold_src.c: 16:         buzzer_watcher = 'w';
  3980  15E5  3077               	movlw	119
  3981  15E6  00F7               	movwf	??_set_upper_threshold
  3982  15E7  0877               	movf	??_set_upper_threshold,w
  3983  15E8  00D3               	movwf	_buzzer_watcher
  3984  15E9                     l994:	
  3985                           ;threshold_src.c: 18:     }
  3986                           
  3987                           
  3988                           ;threshold_src.c: 19:     return buzzer_watcher;
  3989  15E9  1283               	bcf	3,5	;RP0=0, select bank0
  3990  15EA  1303               	bcf	3,6	;RP1=0, select bank0
  3991  15EB  0853               	movf	_buzzer_watcher,w
  3992  15EC  0008               	return
  3993  15ED                     __end_of_set_upper_threshold:	
  3994                           
  3995                           	psect	text4
  3996  1502                     __ptext4:	
  3997 ;; *************** function _set_lower_threshold *****************
  3998 ;; Defined at:
  3999 ;;		line 41 in file "threshold_src.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  upper_val       2    3[COMMON] int 
  4002 ;;  lower_val       2    5[COMMON] int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      unsigned char 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 300/0
  4011 ;;		On exit  : 300/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4014 ;;      Params:         4       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0
  4016 ;;      Temps:          1       0       0       0       0
  4017 ;;      Totals:         5       0       0       0       0
  4018 ;;Total ram usage:        5 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    2
  4021 ;; This function calls:
  4022 ;;		_write_char
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _set_lower_threshold
  4030  1502                     _set_lower_threshold:	
  4031                           
  4032                           ;threshold_src.c: 42:     if((shi <= upper_val && ge <= lower_val))
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4036  1502  0874               	movf	set_lower_threshold@upper_val+1,w
  4037  1503  3A80               	xorlw	128
  4038  1504  00F7               	movwf	??_set_lower_threshold
  4039  1505  3080               	movlw	128
  4040  1506  0277               	subwf	??_set_lower_threshold,w
  4041  1507  1D03               	skipz
  4042  1508  2D0B               	goto	u4175
  4043  1509  085B               	movf	_shi,w
  4044  150A  0273               	subwf	set_lower_threshold@upper_val,w
  4045  150B                     u4175:	
  4046  150B  1C03               	skipc
  4047  150C  2D47               	goto	l1008
  4048  150D  0876               	movf	set_lower_threshold@lower_val+1,w
  4049  150E  3A80               	xorlw	128
  4050  150F  00F7               	movwf	??_set_lower_threshold
  4051  1510  3080               	movlw	128
  4052  1511  0277               	subwf	??_set_lower_threshold,w
  4053  1512  1D03               	skipz
  4054  1513  2D18               	goto	u4185
  4055  1514  1283               	bcf	3,5	;RP0=0, select bank0
  4056  1515  1303               	bcf	3,6	;RP1=0, select bank0
  4057  1516  085A               	movf	_ge,w
  4058  1517  0275               	subwf	set_lower_threshold@lower_val,w
  4059  1518                     u4185:	
  4060  1518  1C03               	skipc
  4061  1519  2D47               	goto	l1008
  4062                           
  4063                           ;threshold_src.c: 43:     {;threshold_src.c: 44:     count = 2;
  4064  151A  3002               	movlw	2
  4065  151B  1283               	bcf	3,5	;RP0=0, select bank0
  4066  151C  1303               	bcf	3,6	;RP1=0, select bank0
  4067  151D  00BC               	movwf	_count
  4068  151E  3000               	movlw	0
  4069  151F  00BD               	movwf	_count+1
  4070                           
  4071                           ;threshold_src.c: 45:     buzzer_watcher = 'x';
  4072  1520  3078               	movlw	120
  4073  1521  00F7               	movwf	??_set_lower_threshold
  4074  1522  0877               	movf	??_set_lower_threshold,w
  4075  1523  00D3               	movwf	_buzzer_watcher
  4076                           
  4077                           ;threshold_src.c: 46:     heater_state = '0';
  4078  1524  3030               	movlw	48
  4079  1525  00F7               	movwf	??_set_lower_threshold
  4080  1526  0877               	movf	??_set_lower_threshold,w
  4081  1527  00D1               	movwf	_heater_state
  4082                           
  4083                           ;threshold_src.c: 47:     cooler_state = '0';
  4084  1528  3030               	movlw	48
  4085  1529  00F7               	movwf	??_set_lower_threshold
  4086  152A  0877               	movf	??_set_lower_threshold,w
  4087  152B  00D0               	movwf	_cooler_state
  4088                           
  4089                           ;threshold_src.c: 48:     heat_counter = 0;
  4090  152C  1683               	bsf	3,5	;RP0=1, select bank1
  4091  152D  01B9               	clrf	_heat_counter^(0+128)
  4092  152E  01BA               	clrf	(_heat_counter+1)^(0+128)
  4093                           
  4094                           ;threshold_src.c: 49:     cold_counter = 0;
  4095  152F  01B7               	clrf	_cold_counter^(0+128)
  4096  1530  01B8               	clrf	(_cold_counter+1)^(0+128)
  4097                           
  4098                           ;threshold_src.c: 50:     write_char('O');
  4099  1531  304F               	movlw	79
  4100  1532  160A  118A  2228  160A  118A  	fcall	_write_char
  4101                           
  4102                           ;threshold_src.c: 51:     write_char('K');
  4103  1537  304B               	movlw	75
  4104  1538  160A  118A  2228  160A  118A  	fcall	_write_char
  4105                           
  4106                           ;threshold_src.c: 52:     write_char(' ');
  4107  153D  3020               	movlw	32
  4108  153E  160A  118A  2228  160A  118A  	fcall	_write_char
  4109                           
  4110                           ;threshold_src.c: 53:     write_char(' ');
  4111  1543  3020               	movlw	32
  4112  1544  160A  118A  2228   	fcall	_write_char
  4113  1547                     l1008:	
  4114                           ;threshold_src.c: 54:     }
  4115                           
  4116                           
  4117                           ;threshold_src.c: 55:     return buzzer_watcher;
  4118  1547  1283               	bcf	3,5	;RP0=0, select bank0
  4119  1548  1303               	bcf	3,6	;RP1=0, select bank0
  4120  1549  0853               	movf	_buzzer_watcher,w
  4121  154A  0008               	return
  4122  154B                     __end_of_set_lower_threshold:	
  4123                           
  4124                           	psect	text5
  4125  1256                     __ptext5:	
  4126 ;; *************** function _set_beep_threshhold *****************
  4127 ;; Defined at:
  4128 ;;		line 5 in file "buzzer_src.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  x               1    wreg     unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  x               1    2[COMMON] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 300/0
  4139 ;;		On exit  : 300/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4142 ;;      Params:         0       0       0       0       0
  4143 ;;      Locals:         1       0       0       0       0
  4144 ;;      Temps:          0       0       0       0       0
  4145 ;;      Totals:         1       0       0       0       0
  4146 ;;Total ram usage:        1 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    1
  4149 ;; This function calls:
  4150 ;;		_button_delay
  4151 ;; This function is called by:
  4152 ;;		_main
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _set_beep_threshhold
  4158  1256                     _set_beep_threshhold:	
  4159                           
  4160                           ;incstack = 0
  4161                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4162                           ;set_beep_threshhold@x stored from wreg
  4163  1256  00F2               	movwf	set_beep_threshhold@x
  4164                           
  4165                           ;buzzer_src.c: 6:     if (x == 'w'){
  4166  1257  3077               	movlw	119
  4167  1258  0672               	xorwf	set_beep_threshhold@x,w
  4168  1259  1D03               	btfss	3,2
  4169  125A  2A6F               	goto	l5091
  4170                           
  4171                           ;buzzer_src.c: 7:         RE2 = 1;
  4172  125B  1509               	bsf	9,2	;volatile
  4173                           
  4174                           ;buzzer_src.c: 8:         button_delay();
  4175  125C  160A  118A  21EC  160A  118A  	fcall	_button_delay
  4176                           
  4177                           ;buzzer_src.c: 9:         RE2 = 0;
  4178  1261  1283               	bcf	3,5	;RP0=0, select bank0
  4179  1262  1303               	bcf	3,6	;RP1=0, select bank0
  4180  1263  1109               	bcf	9,2	;volatile
  4181                           
  4182                           ;buzzer_src.c: 10:         button_delay();
  4183  1264  160A  118A  21EC  160A  118A  	fcall	_button_delay
  4184                           
  4185                           ;buzzer_src.c: 11:         RE2 = 1;
  4186  1269  1283               	bcf	3,5	;RP0=0, select bank0
  4187  126A  1303               	bcf	3,6	;RP1=0, select bank0
  4188  126B  1509               	bsf	9,2	;volatile
  4189                           
  4190                           ;buzzer_src.c: 12:         button_delay();
  4191  126C  160A  118A  21EC   	fcall	_button_delay
  4192  126F                     l5091:	
  4193                           
  4194                           ;buzzer_src.c: 13:         RE2 = 0;
  4195  126F  1283               	bcf	3,5	;RP0=0, select bank0
  4196  1270  1303               	bcf	3,6	;RP1=0, select bank0
  4197  1271  1109               	bcf	9,2	;volatile
  4198  1272  0008               	return
  4199  1273                     __end_of_set_beep_threshhold:	
  4200                           
  4201                           	psect	text6
  4202  1399                     __ptext6:	
  4203 ;; *************** function _reset_alarm *****************
  4204 ;; Defined at:
  4205 ;;		line 58 in file "threshold_src.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;		None
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      unsigned char 
  4212 ;; Registers used:
  4213 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 300/0
  4216 ;;		On exit  : 300/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4219 ;;      Params:         0       0       0       0       0
  4220 ;;      Locals:         0       0       0       0       0
  4221 ;;      Temps:          1       0       0       0       0
  4222 ;;      Totals:         1       0       0       0       0
  4223 ;;Total ram usage:        1 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    2
  4226 ;; This function calls:
  4227 ;;		_write_char
  4228 ;; This function is called by:
  4229 ;;		_main
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           
  4234                           ;psect for function _reset_alarm
  4235  1399                     _reset_alarm:	
  4236                           
  4237                           ;threshold_src.c: 59:     RC0 = 1;
  4238                           
  4239                           ;incstack = 0
  4240                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4241  1399  1407               	bsf	7,0	;volatile
  4242                           
  4243                           ;threshold_src.c: 60:     RC1 = 1;
  4244  139A  1487               	bsf	7,1	;volatile
  4245                           
  4246                           ;threshold_src.c: 61:     RC2 = 1;
  4247  139B  1507               	bsf	7,2	;volatile
  4248                           
  4249                           ;threshold_src.c: 62:     RC3 = 0;
  4250  139C  1187               	bcf	7,3	;volatile
  4251                           
  4252                           ;threshold_src.c: 63:     if(RC4 == 0){
  4253  139D  1A07               	btfsc	7,4	;volatile
  4254  139E  2BC4               	goto	l5077
  4255                           
  4256                           ;threshold_src.c: 64:         count = 0;
  4257  139F  01BC               	clrf	_count
  4258  13A0  01BD               	clrf	_count+1
  4259                           
  4260                           ;threshold_src.c: 65:         buzzer_watcher = 'x';
  4261  13A1  3078               	movlw	120
  4262  13A2  00F3               	movwf	??_reset_alarm
  4263  13A3  0873               	movf	??_reset_alarm,w
  4264  13A4  00D3               	movwf	_buzzer_watcher
  4265                           
  4266                           ;threshold_src.c: 66:         heat_counter = 0;
  4267  13A5  1683               	bsf	3,5	;RP0=1, select bank1
  4268  13A6  01B9               	clrf	_heat_counter^(0+128)
  4269  13A7  01BA               	clrf	(_heat_counter+1)^(0+128)
  4270                           
  4271                           ;threshold_src.c: 67:         write_char('R');
  4272  13A8  3052               	movlw	82
  4273  13A9  160A  118A  2228  160A  118A  	fcall	_write_char
  4274                           
  4275                           ;threshold_src.c: 68:         write_char('E');
  4276  13AE  3045               	movlw	69
  4277  13AF  160A  118A  2228  160A  118A  	fcall	_write_char
  4278                           
  4279                           ;threshold_src.c: 69:         write_char('S');
  4280  13B4  3053               	movlw	83
  4281  13B5  160A  118A  2228  160A  118A  	fcall	_write_char
  4282                           
  4283                           ;threshold_src.c: 70:         write_char('E');
  4284  13BA  3045               	movlw	69
  4285  13BB  160A  118A  2228  160A  118A  	fcall	_write_char
  4286                           
  4287                           ;threshold_src.c: 71:         write_char('T');
  4288  13C0  3054               	movlw	84
  4289  13C1  160A  118A  2228   	fcall	_write_char
  4290  13C4                     l5077:	
  4291                           
  4292                           ;threshold_src.c: 73:     return buzzer_watcher;
  4293  13C4  0853               	movf	_buzzer_watcher,w
  4294  13C5  0008               	return
  4295  13C6                     __end_of_reset_alarm:	
  4296                           
  4297                           	psect	text7
  4298  12D8                     __ptext7:	
  4299 ;; *************** function _lcd_init *****************
  4300 ;; Defined at:
  4301 ;;		line 14 in file "LCD_src.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  i               2    0        int 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 300/100
  4312 ;;		On exit  : 300/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4315 ;;      Params:         0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    2
  4322 ;; This function calls:
  4323 ;;		_delay_screen
  4324 ;;		_write_cmd
  4325 ;; This function is called by:
  4326 ;;		_main
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _lcd_init
  4332  12D8                     _lcd_init:	
  4333                           
  4334                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4338  12D8  0185               	clrf	5	;volatile
  4339                           
  4340                           ;LCD_src.c: 18:  RA0=0;
  4341  12D9  1283               	bcf	3,5	;RP0=0, select bank0
  4342  12DA  1005               	bcf	5,0	;volatile
  4343                           
  4344                           ;LCD_src.c: 19:  delay_screen();
  4345  12DB  160A  118A  21D8  160A  118A  	fcall	_delay_screen
  4346                           
  4347                           ;LCD_src.c: 20:  RA0=1;
  4348  12E0  1283               	bcf	3,5	;RP0=0, select bank0
  4349  12E1  1303               	bcf	3,6	;RP1=0, select bank0
  4350  12E2  1405               	bsf	5,0	;volatile
  4351                           
  4352                           ;LCD_src.c: 21:  RA2=1;
  4353  12E3  1505               	bsf	5,2	;volatile
  4354                           
  4355                           ;LCD_src.c: 22:  write_cmd(0x30);
  4356  12E4  3030               	movlw	48
  4357  12E5  160A  118A  223F  160A  118A  	fcall	_write_cmd
  4358                           
  4359                           ;LCD_src.c: 23:  write_cmd(0x01);
  4360  12EA  3001               	movlw	1
  4361  12EB  160A  118A  223F  160A  118A  	fcall	_write_cmd
  4362                           
  4363                           ;LCD_src.c: 24:  write_cmd(0x06);
  4364  12F0  3006               	movlw	6
  4365  12F1  160A  118A  223F  160A  118A  	fcall	_write_cmd
  4366                           
  4367                           ;LCD_src.c: 25:  write_cmd(0x0c);
  4368  12F6  300C               	movlw	12
  4369  12F7  160A  118A  223F   	fcall	_write_cmd
  4370  12FA  0008               	return
  4371  12FB                     __end_of_lcd_init:	
  4372                           
  4373                           	psect	text8
  4374  1214                     __ptext8:	
  4375 ;; *************** function _initialise_buttons *****************
  4376 ;; Defined at:
  4377 ;;		line 11 in file "Button_src.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;		None
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      void 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2
  4386 ;; Tracked objects:
  4387 ;;		On entry : 300/0
  4388 ;;		On exit  : 300/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4391 ;;      Params:         0       0       0       0       0
  4392 ;;      Locals:         0       0       0       0       0
  4393 ;;      Temps:          0       0       0       0       0
  4394 ;;      Totals:         0       0       0       0       0
  4395 ;;Total ram usage:        0 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; This function calls:
  4398 ;;		Nothing
  4399 ;; This function is called by:
  4400 ;;		_main
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function _initialise_buttons
  4406  1214                     _initialise_buttons:	
  4407                           
  4408                           ;Button_src.c: 12:     ADCON1 = 0x06;
  4409                           
  4410                           ;incstack = 0
  4411                           ; Regs used in _initialise_buttons: [wreg+status,2]
  4412  1214  3006               	movlw	6
  4413  1215  1683               	bsf	3,5	;RP0=1, select bank1
  4414  1216  009F               	movwf	31	;volatile
  4415                           
  4416                           ;Button_src.c: 13:     TRISC = 0xf0;
  4417  1217  30F0               	movlw	240
  4418  1218  0087               	movwf	7	;volatile
  4419                           
  4420                           ;Button_src.c: 14:     a = 0x00;
  4421  1219  1283               	bcf	3,5	;RP0=0, select bank0
  4422  121A  01CA               	clrf	_a
  4423                           
  4424                           ;Button_src.c: 15:     b = 0x00;
  4425  121B  01C9               	clrf	_b
  4426                           
  4427                           ;Button_src.c: 16:     c = 0x00;
  4428  121C  01C8               	clrf	_c
  4429                           
  4430                           ;Button_src.c: 17:     z = 0;
  4431  121D  01AC               	clrf	_z
  4432  121E  01AD               	clrf	_z+1
  4433                           
  4434                           ;Button_src.c: 18:     day_low = 0;
  4435  121F  01AA               	clrf	_day_low
  4436  1220  01AB               	clrf	_day_low+1
  4437                           
  4438                           ;Button_src.c: 19:     stats = 1;
  4439  1221  3001               	movlw	1
  4440  1222  00A6               	movwf	_stats
  4441  1223  3000               	movlw	0
  4442  1224  00A7               	movwf	_stats+1
  4443                           
  4444                           ;Button_src.c: 20:     p = 0;
  4445  1225  01A4               	clrf	_p
  4446  1226  01A5               	clrf	_p+1
  4447  1227  0008               	return
  4448  1228                     __end_of_initialise_buttons:	
  4449                           
  4450                           	psect	text9
  4451  1176                     __ptext9:	
  4452 ;; *************** function _init_temp *****************
  4453 ;; Defined at:
  4454 ;;		line 6 in file "Thermometer_src.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		status,2
  4463 ;; Tracked objects:
  4464 ;;		On entry : 200/100
  4465 ;;		On exit  : 300/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4468 ;;      Params:         0       0       0       0       0
  4469 ;;      Locals:         0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0
  4471 ;;      Totals:         0       0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           
  4482                           ;psect for function _init_temp
  4483  1176                     _init_temp:	
  4484                           
  4485                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4486                           
  4487                           ;incstack = 0
  4488                           ; Regs used in _init_temp: [status,2]
  4489  1176  1683               	bsf	3,5	;RP0=1, select bank1
  4490  1177  0189               	clrf	9	;volatile
  4491                           
  4492                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4493  1178  1283               	bcf	3,5	;RP0=0, select bank0
  4494  1179  0189               	clrf	9	;volatile
  4495  117A  0008               	return
  4496  117B                     __end_of_init_temp:	
  4497                           
  4498                           	psect	text10
  4499  117B                     __ptext10:	
  4500 ;; *************** function _init *****************
  4501 ;; Defined at:
  4502 ;;		line 5 in file "LCD_src.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;		None
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2
  4511 ;; Tracked objects:
  4512 ;;		On entry : 300/0
  4513 ;;		On exit  : 300/100
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4516 ;;      Params:         0       0       0       0       0
  4517 ;;      Locals:         0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0
  4519 ;;      Totals:         0       0       0       0       0
  4520 ;;Total ram usage:        0 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_main
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _init
  4531  117B                     _init:	
  4532                           
  4533                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4534                           
  4535                           ;incstack = 0
  4536                           ; Regs used in _init: [wreg+status,2]
  4537  117B  3007               	movlw	7
  4538  117C  1683               	bsf	3,5	;RP0=1, select bank1
  4539  117D  009F               	movwf	31	;volatile
  4540                           
  4541                           ;LCD_src.c: 8:  TRISA0=1;
  4542  117E  1405               	bsf	5,0	;volatile
  4543                           
  4544                           ;LCD_src.c: 9:  TRISD=0X00;
  4545  117F  0188               	clrf	8	;volatile
  4546                           
  4547                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4548  1180  0181               	clrf	1	;volatile
  4549                           
  4550                           ;LCD_src.c: 11:  TRISE = 0X00;
  4551  1181  0189               	clrf	9	;volatile
  4552  1182  0008               	return
  4553  1183                     __end_of_init:	
  4554                           
  4555                           	psect	text11
  4556  136D                     __ptext11:	
  4557 ;; *************** function _get_time *****************
  4558 ;; Defined at:
  4559 ;;		line 23 in file "clock_src.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  i               2    6[COMMON] int 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/100
  4570 ;;		On exit  : 300/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4573 ;;      Params:         0       0       0       0       0
  4574 ;;      Locals:         2       0       0       0       0
  4575 ;;      Temps:          1       0       0       0       0
  4576 ;;      Totals:         3       0       0       0       0
  4577 ;;Total ram usage:        3 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    1
  4580 ;; This function calls:
  4581 ;;		_time_read_1
  4582 ;;		_time_write_1
  4583 ;; This function is called by:
  4584 ;;		_main
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           
  4589                           ;psect for function _get_time
  4590  136D                     _get_time:	
  4591                           
  4592                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4596  136D  1283               	bcf	3,5	;RP0=0, select bank0
  4597  136E  1303               	bcf	3,6	;RP1=0, select bank0
  4598  136F  1686               	bsf	6,5	;volatile
  4599                           
  4600                           ;clock_src.c: 27:    time_write_1(0xbf);
  4601  1370  30BF               	movlw	191
  4602  1371  160A  118A  231F  160A  118A  	fcall	_time_write_1
  4603                           
  4604                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4605  1376  01F6               	clrf	get_time@i
  4606  1377  01F7               	clrf	get_time@i+1
  4607  1378                     l4111:	
  4608                           
  4609                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4610  1378  160A  118A  23C6  160A  118A  	fcall	_time_read_1
  4611  137D  00F5               	movwf	??_get_time
  4612  137E  0876               	movf	get_time@i,w
  4613  137F  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4614  1380  0084               	movwf	4
  4615  1381  0875               	movf	??_get_time,w
  4616  1382  1383               	bcf	3,7	;select IRP bank1
  4617  1383  0080               	movwf	0
  4618                           
  4619                           ;clock_src.c: 31:      }
  4620  1384  3001               	movlw	1
  4621  1385  07F6               	addwf	get_time@i,f
  4622  1386  1803               	skipnc
  4623  1387  0AF7               	incf	get_time@i+1,f
  4624  1388  3000               	movlw	0
  4625  1389  07F7               	addwf	get_time@i+1,f
  4626  138A  0877               	movf	get_time@i+1,w
  4627  138B  3A80               	xorlw	128
  4628  138C  00FF               	movwf	127
  4629  138D  3080               	movlw	128
  4630  138E  027F               	subwf	127,w
  4631  138F  1D03               	skipz
  4632  1390  2B93               	goto	u3275
  4633  1391  3007               	movlw	7
  4634  1392  0276               	subwf	get_time@i,w
  4635  1393                     u3275:	
  4636  1393  1C03               	skipc
  4637  1394  2B78               	goto	l4111
  4638                           
  4639                           ;clock_src.c: 32:    RB5=0;
  4640  1395  1283               	bcf	3,5	;RP0=0, select bank0
  4641  1396  1303               	bcf	3,6	;RP1=0, select bank0
  4642  1397  1286               	bcf	6,5	;volatile
  4643  1398  0008               	return
  4644  1399                     __end_of_get_time:	
  4645                           
  4646                           	psect	text12
  4647  13C6                     __ptext12:	
  4648 ;; *************** function _time_read_1 *****************
  4649 ;; Defined at:
  4650 ;;		line 130 in file "clock_src.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  j               2    2[COMMON] int 
  4655 ;;  time_rx         1    4[COMMON] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      unsigned char 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0, btemp+1
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 300/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4665 ;;      Params:         0       0       0       0       0
  4666 ;;      Locals:         3       0       0       0       0
  4667 ;;      Temps:          2       0       0       0       0
  4668 ;;      Totals:         5       0       0       0       0
  4669 ;;Total ram usage:        5 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_get_time
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _time_read_1
  4680  13C6                     _time_read_1:	
  4681                           
  4682                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4683                           
  4684                           ;incstack = 0
  4685                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4686  13C6  01F4               	clrf	time_read_1@time_rx
  4687                           
  4688                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4689  13C7  1683               	bsf	3,5	;RP0=1, select bank1
  4690  13C8  1303               	bcf	3,6	;RP1=0, select bank1
  4691  13C9  1606               	bsf	6,4	;volatile
  4692                           
  4693                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4694  13CA  01F2               	clrf	time_read_1@j
  4695  13CB  01F3               	clrf	time_read_1@j+1
  4696  13CC                     l494:	
  4697                           
  4698                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4699  13CC  1283               	bcf	3,5	;RP0=0, select bank0
  4700  13CD  1303               	bcf	3,6	;RP1=0, select bank0
  4701  13CE  1006               	bcf	6,0	;volatile
  4702                           
  4703                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4704  13CF  0874               	movf	time_read_1@time_rx,w
  4705  13D0  00F0               	movwf	??_time_read_1
  4706  13D1  1003               	clrc
  4707  13D2  0C70               	rrf	??_time_read_1,w
  4708  13D3  00F1               	movwf	??_time_read_1+1
  4709  13D4  0871               	movf	??_time_read_1+1,w
  4710  13D5  00F4               	movwf	time_read_1@time_rx
  4711                           
  4712                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4713  13D6  1E06               	btfss	6,4	;volatile
  4714  13D7  2BDD               	goto	l3705
  4715  13D8  0874               	movf	time_read_1@time_rx,w
  4716  13D9  3880               	iorlw	128
  4717  13DA  00F0               	movwf	??_time_read_1
  4718  13DB  0870               	movf	??_time_read_1,w
  4719  13DC  00F4               	movwf	time_read_1@time_rx
  4720  13DD                     l3705:	
  4721                           
  4722                           ;clock_src.c: 141:        RB0=1;
  4723  13DD  1406               	bsf	6,0	;volatile
  4724                           
  4725                           ;clock_src.c: 142:       }
  4726  13DE  3001               	movlw	1
  4727  13DF  07F2               	addwf	time_read_1@j,f
  4728  13E0  1803               	skipnc
  4729  13E1  0AF3               	incf	time_read_1@j+1,f
  4730  13E2  3000               	movlw	0
  4731  13E3  07F3               	addwf	time_read_1@j+1,f
  4732  13E4  0873               	movf	time_read_1@j+1,w
  4733  13E5  3A80               	xorlw	128
  4734  13E6  00FF               	movwf	127
  4735  13E7  3080               	movlw	128
  4736  13E8  027F               	subwf	127,w
  4737  13E9  1D03               	skipz
  4738  13EA  2BED               	goto	u2455
  4739  13EB  3008               	movlw	8
  4740  13EC  0272               	subwf	time_read_1@j,w
  4741  13ED                     u2455:	
  4742  13ED  1C03               	skipc
  4743  13EE  2BCC               	goto	l494
  4744                           
  4745                           ;clock_src.c: 143:     TRISB4=0;
  4746  13EF  1683               	bsf	3,5	;RP0=1, select bank1
  4747  13F0  1303               	bcf	3,6	;RP1=0, select bank1
  4748  13F1  1206               	bcf	6,4	;volatile
  4749                           
  4750                           ;clock_src.c: 144:     RB0=0;
  4751  13F2  1283               	bcf	3,5	;RP0=0, select bank0
  4752  13F3  1006               	bcf	6,0	;volatile
  4753                           
  4754                           ;clock_src.c: 145:     return(time_rx);
  4755  13F4  0874               	movf	time_read_1@time_rx,w
  4756  13F5  0008               	return
  4757  13F6                     __end_of_time_read_1:	
  4758                           
  4759                           	psect	text13
  4760  16F9                     __ptext13:	
  4761 ;; *************** function _get_temp *****************
  4762 ;; Defined at:
  4763 ;;		line 89 in file "Thermometer_src.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  i               2    0        int 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 200/100
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4777 ;;      Params:         0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0
  4779 ;;      Temps:          0       4       0       0       0
  4780 ;;      Totals:         0       4       0       0       0
  4781 ;;Total ram usage:        4 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    2
  4784 ;; This function calls:
  4785 ;;		___lbdiv
  4786 ;;		___lbmod
  4787 ;;		___lwdiv
  4788 ;;		___lwmod
  4789 ;;		_delay2
  4790 ;;		_read_byte
  4791 ;;		_reset_temp
  4792 ;;		_write_byte
  4793 ;; This function is called by:
  4794 ;;		_main
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _get_temp
  4800  16F9                     _get_temp:	
  4801                           
  4802                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4806  16F9  1683               	bsf	3,5	;RP0=1, select bank1
  4807  16FA  1409               	bsf	9,0	;volatile
  4808                           
  4809                           ;Thermometer_src.c: 93: reset_temp();
  4810  16FB  160A  118A  245C  160A  118A  	fcall	_reset_temp
  4811                           
  4812                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4813  1700  30CC               	movlw	204
  4814  1701  160A  118A  2490  160A  118A  	fcall	_write_byte
  4815                           
  4816                           ;Thermometer_src.c: 95: delay2();
  4817  1706  160A  118A  2200  160A  118A  	fcall	_delay2
  4818                           
  4819                           ;Thermometer_src.c: 96: write_byte(0X44);
  4820  170B  3044               	movlw	68
  4821  170C  160A  118A  2490  160A  118A  	fcall	_write_byte
  4822                           
  4823                           ;Thermometer_src.c: 98: reset_temp();
  4824  1711  160A  118A  245C  160A  118A  	fcall	_reset_temp
  4825                           
  4826                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4827  1716  30CC               	movlw	204
  4828  1717  160A  118A  2490  160A  118A  	fcall	_write_byte
  4829                           
  4830                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4831  171C  30BE               	movlw	190
  4832  171D  160A  118A  2490  160A  118A  	fcall	_write_byte
  4833                           
  4834                           ;Thermometer_src.c: 101: TLV=read_byte();
  4835  1722  160A  118A  2428  160A  118A  	fcall	_read_byte
  4836  1727  1283               	bcf	3,5	;RP0=0, select bank0
  4837  1728  1303               	bcf	3,6	;RP1=0, select bank0
  4838  1729  00E0               	movwf	??_get_temp
  4839  172A  0860               	movf	??_get_temp,w
  4840  172B  00DF               	movwf	_TLV
  4841                           
  4842                           ;Thermometer_src.c: 102: THV=read_byte();
  4843  172C  160A  118A  2428  160A  118A  	fcall	_read_byte
  4844  1731  1283               	bcf	3,5	;RP0=0, select bank0
  4845  1732  1303               	bcf	3,6	;RP1=0, select bank0
  4846  1733  00E0               	movwf	??_get_temp
  4847  1734  0860               	movf	??_get_temp,w
  4848  1735  00DE               	movwf	_THV
  4849                           
  4850                           ;Thermometer_src.c: 103: TRISE0 =1;
  4851  1736  1683               	bsf	3,5	;RP0=1, select bank1
  4852  1737  1409               	bsf	9,0	;volatile
  4853                           
  4854                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4855  1738  1283               	bcf	3,5	;RP0=0, select bank0
  4856  1739  085E               	movf	_THV,w
  4857  173A  00E0               	movwf	??_get_temp
  4858  173B  3004               	movlw	4
  4859  173C                     u3205:	
  4860  173C  1003               	clrc
  4861  173D  0DE0               	rlf	??_get_temp,f
  4862  173E  3EFF               	addlw	-1
  4863  173F  1D03               	skipz
  4864  1740  2F3C               	goto	u3205
  4865  1741  303F               	movlw	63
  4866  1742  0560               	andwf	??_get_temp,w
  4867  1743  00E1               	movwf	??_get_temp+1
  4868  1744  085F               	movf	_TLV,w
  4869  1745  00E2               	movwf	??_get_temp+2
  4870  1746  3004               	movlw	4
  4871  1747                     u3215:	
  4872  1747  1003               	clrc
  4873  1748  0CE2               	rrf	??_get_temp+2,f
  4874  1749  3EFF               	addlw	-1
  4875  174A  1D03               	skipz
  4876  174B  2F47               	goto	u3215
  4877  174C  0862               	movf	??_get_temp+2,w
  4878  174D  0461               	iorwf	??_get_temp+1,w
  4879  174E  00E3               	movwf	??_get_temp+3
  4880  174F  0863               	movf	??_get_temp+3,w
  4881  1750  00DD               	movwf	_TZ
  4882                           
  4883                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4884  1751  085F               	movf	_TLV,w
  4885  1752  00E0               	movwf	??_get_temp
  4886  1753  3003               	movlw	3
  4887  1754                     u3225:	
  4888  1754  1003               	clrc
  4889  1755  0DE0               	rlf	??_get_temp,f
  4890  1756  3EFF               	addlw	-1
  4891  1757  1D03               	skipz
  4892  1758  2F54               	goto	u3225
  4893  1759  1003               	clrc
  4894  175A  0D60               	rlf	??_get_temp,w
  4895  175B  00E1               	movwf	??_get_temp+1
  4896  175C  0861               	movf	??_get_temp+1,w
  4897  175D  00DC               	movwf	_TX
  4898                           
  4899                           ;Thermometer_src.c: 107: ge=TZ%10;
  4900  175E  300A               	movlw	10
  4901  175F  00E0               	movwf	??_get_temp
  4902  1760  0860               	movf	??_get_temp,w
  4903  1761  00F0               	movwf	___lbmod@divisor
  4904  1762  085D               	movf	_TZ,w
  4905  1763  160A  118A  22B5  160A  118A  	fcall	___lbmod
  4906  1768  00E1               	movwf	??_get_temp+1
  4907  1769  0861               	movf	??_get_temp+1,w
  4908  176A  00DA               	movwf	_ge
  4909                           
  4910                           ;Thermometer_src.c: 108: shi=TZ/10;
  4911  176B  300A               	movlw	10
  4912  176C  00E0               	movwf	??_get_temp
  4913  176D  0860               	movf	??_get_temp,w
  4914  176E  00F0               	movwf	___lbdiv@divisor
  4915  176F  085D               	movf	_TZ,w
  4916  1770  160A  118A  2294  160A  118A  	fcall	___lbdiv
  4917  1775  00E1               	movwf	??_get_temp+1
  4918  1776  0861               	movf	??_get_temp+1,w
  4919  1777  00DB               	movwf	_shi
  4920                           
  4921                           ;Thermometer_src.c: 109: wd=0;
  4922  1778  01BE               	clrf	_wd
  4923  1779  01BF               	clrf	_wd+1
  4924                           
  4925                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4926  177A  1FDC               	btfss	_TX,7
  4927  177B  2F84               	goto	l4079
  4928  177C  083E               	movf	_wd,w
  4929  177D  3E88               	addlw	136
  4930  177E  00BE               	movwf	_wd
  4931  177F  083F               	movf	_wd+1,w
  4932  1780  1803               	skipnc
  4933  1781  3E01               	addlw	1
  4934  1782  3E13               	addlw	19
  4935  1783  00BF               	movwf	_wd+1
  4936  1784                     l4079:	
  4937                           
  4938                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4939  1784  1F5C               	btfss	_TX,6
  4940  1785  2F8E               	goto	l4083
  4941  1786  083E               	movf	_wd,w
  4942  1787  3EC4               	addlw	196
  4943  1788  00BE               	movwf	_wd
  4944  1789  083F               	movf	_wd+1,w
  4945  178A  1803               	skipnc
  4946  178B  3E01               	addlw	1
  4947  178C  3E09               	addlw	9
  4948  178D  00BF               	movwf	_wd+1
  4949  178E                     l4083:	
  4950                           
  4951                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4952  178E  1EDC               	btfss	_TX,5
  4953  178F  2F98               	goto	l4087
  4954  1790  083E               	movf	_wd,w
  4955  1791  3EE2               	addlw	226
  4956  1792  00BE               	movwf	_wd
  4957  1793  083F               	movf	_wd+1,w
  4958  1794  1803               	skipnc
  4959  1795  3E01               	addlw	1
  4960  1796  3E04               	addlw	4
  4961  1797  00BF               	movwf	_wd+1
  4962  1798                     l4087:	
  4963                           
  4964                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4965  1798  1E5C               	btfss	_TX,4
  4966  1799  2FA2               	goto	l4091
  4967  179A  083E               	movf	_wd,w
  4968  179B  3E71               	addlw	113
  4969  179C  00BE               	movwf	_wd
  4970  179D  083F               	movf	_wd+1,w
  4971  179E  1803               	skipnc
  4972  179F  3E01               	addlw	1
  4973  17A0  3E02               	addlw	2
  4974  17A1  00BF               	movwf	_wd+1
  4975  17A2                     l4091:	
  4976                           
  4977                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4978  17A2  30E8               	movlw	232
  4979  17A3  00F6               	movwf	___lwdiv@divisor
  4980  17A4  3003               	movlw	3
  4981  17A5  00F7               	movwf	___lwdiv@divisor+1
  4982  17A6  083F               	movf	_wd+1,w
  4983  17A7  00F9               	movwf	___lwdiv@dividend+1
  4984  17A8  083E               	movf	_wd,w
  4985  17A9  00F8               	movwf	___lwdiv@dividend
  4986  17AA  160A  118A  24C6  160A  118A  	fcall	___lwdiv
  4987  17AF  0876               	movf	?___lwdiv,w
  4988  17B0  00E0               	movwf	??_get_temp
  4989  17B1  0860               	movf	??_get_temp,w
  4990  17B2  00D9               	movwf	_shifen
  4991                           
  4992                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4993  17B3  3064               	movlw	100
  4994  17B4  00F6               	movwf	___lwdiv@divisor
  4995  17B5  3000               	movlw	0
  4996  17B6  00F7               	movwf	___lwdiv@divisor+1
  4997  17B7  083F               	movf	_wd+1,w
  4998  17B8  00F3               	movwf	___lwmod@dividend+1
  4999  17B9  083E               	movf	_wd,w
  5000  17BA  00F2               	movwf	___lwmod@dividend
  5001  17BB  30E8               	movlw	232
  5002  17BC  00F0               	movwf	___lwmod@divisor
  5003  17BD  3003               	movlw	3
  5004  17BE  00F1               	movwf	___lwmod@divisor+1
  5005  17BF  160A  118A  23F6  160A  118A  	fcall	___lwmod
  5006  17C4  0871               	movf	?___lwmod+1,w
  5007  17C5  00F9               	movwf	___lwdiv@dividend+1
  5008  17C6  0870               	movf	?___lwmod,w
  5009  17C7  00F8               	movwf	___lwdiv@dividend
  5010  17C8  160A  118A  24C6  160A  118A  	fcall	___lwdiv
  5011  17CD  0876               	movf	?___lwdiv,w
  5012  17CE  00E0               	movwf	??_get_temp
  5013  17CF  0860               	movf	??_get_temp,w
  5014  17D0  00D8               	movwf	_baifen
  5015                           
  5016                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  5017  17D1  300A               	movlw	10
  5018  17D2  00F6               	movwf	___lwdiv@divisor
  5019  17D3  3000               	movlw	0
  5020  17D4  00F7               	movwf	___lwdiv@divisor+1
  5021  17D5  083F               	movf	_wd+1,w
  5022  17D6  00F3               	movwf	___lwmod@dividend+1
  5023  17D7  083E               	movf	_wd,w
  5024  17D8  00F2               	movwf	___lwmod@dividend
  5025  17D9  3064               	movlw	100
  5026  17DA  00F0               	movwf	___lwmod@divisor
  5027  17DB  3000               	movlw	0
  5028  17DC  00F1               	movwf	___lwmod@divisor+1
  5029  17DD  160A  118A  23F6  160A  118A  	fcall	___lwmod
  5030  17E2  0871               	movf	?___lwmod+1,w
  5031  17E3  00F9               	movwf	___lwdiv@dividend+1
  5032  17E4  0870               	movf	?___lwmod,w
  5033  17E5  00F8               	movwf	___lwdiv@dividend
  5034  17E6  160A  118A  24C6  160A  118A  	fcall	___lwdiv
  5035  17EB  0876               	movf	?___lwdiv,w
  5036  17EC  00E0               	movwf	??_get_temp
  5037  17ED  0860               	movf	??_get_temp,w
  5038  17EE  00D7               	movwf	_qianfen
  5039                           
  5040                           ;Thermometer_src.c: 117: wanfen=wd%10;
  5041  17EF  300A               	movlw	10
  5042  17F0  00F0               	movwf	___lwmod@divisor
  5043  17F1  3000               	movlw	0
  5044  17F2  00F1               	movwf	___lwmod@divisor+1
  5045  17F3  083F               	movf	_wd+1,w
  5046  17F4  00F3               	movwf	___lwmod@dividend+1
  5047  17F5  083E               	movf	_wd,w
  5048  17F6  00F2               	movwf	___lwmod@dividend
  5049  17F7  160A  118A  23F6   	fcall	___lwmod
  5050  17FA  0870               	movf	?___lwmod,w
  5051  17FB  00E0               	movwf	??_get_temp
  5052  17FC  0860               	movf	??_get_temp,w
  5053  17FD  00D6               	movwf	_wanfen
  5054                           
  5055                           ;Thermometer_src.c: 118: __nop();
  5056  17FE  0000               	nop
  5057  17FF  0008               	return
  5058  1800                     __end_of_get_temp:	
  5059                           
  5060                           	psect	text14
  5061  1490                     __ptext14:	
  5062 ;; *************** function _write_byte *****************
  5063 ;; Defined at:
  5064 ;;		line 40 in file "Thermometer_src.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  val             1    wreg     unsigned char 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  val             1    7[COMMON] unsigned char 
  5069 ;;  i               1    8[COMMON] unsigned char 
  5070 ;;  temp            1    6[COMMON] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0, pclath, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/100
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5080 ;;      Params:         0       0       0       0       0
  5081 ;;      Locals:         3       0       0       0       0
  5082 ;;      Temps:          2       0       0       0       0
  5083 ;;      Totals:         5       0       0       0       0
  5084 ;;Total ram usage:        5 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    1
  5087 ;; This function calls:
  5088 ;;		_delay_temp
  5089 ;; This function is called by:
  5090 ;;		_get_temp
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _write_byte
  5096  1490                     _write_byte:	
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  5100                           ;write_byte@val stored from wreg
  5101  1490  00F7               	movwf	write_byte@val
  5102                           
  5103                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  5104  1491  3008               	movlw	8
  5105  1492  00F4               	movwf	??_write_byte
  5106  1493  0874               	movf	??_write_byte,w
  5107  1494  00F8               	movwf	write_byte@i
  5108  1495                     l3593:	
  5109                           
  5110                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  5111  1495  0877               	movf	write_byte@val,w
  5112  1496  3901               	andlw	1
  5113  1497  00F4               	movwf	??_write_byte
  5114  1498  0874               	movf	??_write_byte,w
  5115  1499  00F6               	movwf	write_byte@temp
  5116                           
  5117                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  5118  149A  1283               	bcf	3,5	;RP0=0, select bank0
  5119  149B  1303               	bcf	3,6	;RP1=0, select bank0
  5120  149C  1009               	bcf	9,0	;volatile
  5121  149D  1683               	bsf	3,5	;RP0=1, select bank1
  5122  149E  1009               	bcf	9,0	;volatile
  5123                           
  5124                           ;Thermometer_src.c: 48:    __nop();
  5125  149F  0000               	nop
  5126                           
  5127                           ;Thermometer_src.c: 49:    __nop();
  5128  14A0  0000               	nop
  5129                           
  5130                           ;Thermometer_src.c: 50:    __nop();
  5131  14A1  0000               	nop
  5132                           
  5133                           ;Thermometer_src.c: 51:    __nop();
  5134  14A2  0000               	nop
  5135                           
  5136                           ;Thermometer_src.c: 52:    __nop();
  5137  14A3  0000               	nop
  5138                           
  5139                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  5140  14A4  0376               	decf	write_byte@temp,w
  5141  14A5  1D03               	btfss	3,2
  5142  14A6  2CAA               	goto	l3613
  5143  14A7  1683               	bsf	3,5	;RP0=1, select bank1
  5144  14A8  1303               	bcf	3,6	;RP1=0, select bank1
  5145  14A9  1409               	bsf	9,0	;volatile
  5146  14AA                     l3613:	
  5147                           
  5148                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  5149  14AA  3007               	movlw	7
  5150  14AB  00F4               	movwf	??_write_byte
  5151  14AC  0874               	movf	??_write_byte,w
  5152  14AD  00F0               	movwf	delay_temp@y
  5153  14AE  3002               	movlw	2
  5154  14AF  160A  118A  218B  160A  118A  	fcall	_delay_temp
  5155                           
  5156                           ;Thermometer_src.c: 55:    TRISE0 =1;
  5157  14B4  1683               	bsf	3,5	;RP0=1, select bank1
  5158  14B5  1303               	bcf	3,6	;RP1=0, select bank1
  5159  14B6  1409               	bsf	9,0	;volatile
  5160                           
  5161                           ;Thermometer_src.c: 56:    __nop();
  5162  14B7  0000               	nop
  5163                           
  5164                           ;Thermometer_src.c: 57:    __nop();
  5165  14B8  0000               	nop
  5166                           
  5167                           ;Thermometer_src.c: 58:    val=val>>1;
  5168  14B9  0877               	movf	write_byte@val,w
  5169  14BA  00F4               	movwf	??_write_byte
  5170  14BB  1003               	clrc
  5171  14BC  0C74               	rrf	??_write_byte,w
  5172  14BD  00F5               	movwf	??_write_byte+1
  5173  14BE  0875               	movf	??_write_byte+1,w
  5174  14BF  00F7               	movwf	write_byte@val
  5175                           
  5176                           ;Thermometer_src.c: 59:   }
  5177  14C0  3001               	movlw	1
  5178  14C1  02F8               	subwf	write_byte@i,f
  5179  14C2  0878               	movf	write_byte@i,w
  5180  14C3  1903               	btfsc	3,2
  5181  14C4  0008               	return
  5182  14C5  2C95               	goto	l3593
  5183  14C6                     __end_of_write_byte:	
  5184                           
  5185                           	psect	text15
  5186  145C                     __ptext15:	
  5187 ;; *************** function _reset_temp *****************
  5188 ;; Defined at:
  5189 ;;		line 25 in file "Thermometer_src.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  presence        1    5[COMMON] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0, pclath, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/100
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5203 ;;      Params:         0       0       0       0       0
  5204 ;;      Locals:         1       0       0       0       0
  5205 ;;      Temps:          1       0       0       0       0
  5206 ;;      Totals:         2       0       0       0       0
  5207 ;;Total ram usage:        2 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    1
  5210 ;; This function calls:
  5211 ;;		_delay_temp
  5212 ;; This function is called by:
  5213 ;;		_get_temp
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _reset_temp
  5219  145C                     _reset_temp:	
  5220                           
  5221                           ;Thermometer_src.c: 27:   char presence=1;
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  5225  145C  01F5               	clrf	reset_temp@presence
  5226  145D  0AF5               	incf	reset_temp@presence,f
  5227  145E                     l3585:	
  5228                           ;Thermometer_src.c: 28:   while(presence)
  5229                           
  5230                           
  5231                           ;Thermometer_src.c: 28:   while(presence)
  5232  145E  0875               	movf	reset_temp@presence,w
  5233  145F  1903               	btfsc	3,2
  5234  1460  0008               	return
  5235                           
  5236                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  5237  1461  1283               	bcf	3,5	;RP0=0, select bank0
  5238  1462  1303               	bcf	3,6	;RP1=0, select bank0
  5239  1463  1009               	bcf	9,0	;volatile
  5240  1464  1683               	bsf	3,5	;RP0=1, select bank1
  5241  1465  1009               	bcf	9,0	;volatile
  5242                           
  5243                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  5244  1466  3046               	movlw	70
  5245  1467  00F4               	movwf	??_reset_temp
  5246  1468  0874               	movf	??_reset_temp,w
  5247  1469  00F0               	movwf	delay_temp@y
  5248  146A  3002               	movlw	2
  5249  146B  160A  118A  218B  160A  118A  	fcall	_delay_temp
  5250                           
  5251                           ;Thermometer_src.c: 32:     TRISE0 =1;
  5252  1470  1683               	bsf	3,5	;RP0=1, select bank1
  5253  1471  1303               	bcf	3,6	;RP1=0, select bank1
  5254  1472  1409               	bsf	9,0	;volatile
  5255                           
  5256                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  5257  1473  3008               	movlw	8
  5258  1474  00F4               	movwf	??_reset_temp
  5259  1475  0874               	movf	??_reset_temp,w
  5260  1476  00F0               	movwf	delay_temp@y
  5261  1477  3002               	movlw	2
  5262  1478  160A  118A  218B  160A  118A  	fcall	_delay_temp
  5263                           
  5264                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  5265  147D  1283               	bcf	3,5	;RP0=0, select bank0
  5266  147E  1303               	bcf	3,6	;RP1=0, select bank0
  5267  147F  1C09               	btfss	9,0	;volatile
  5268  1480  2C84               	goto	l3581
  5269  1481  01F5               	clrf	reset_temp@presence
  5270  1482  0AF5               	incf	reset_temp@presence,f
  5271  1483  2C85               	goto	l3583
  5272  1484                     l3581:	
  5273  1484  01F5               	clrf	reset_temp@presence
  5274  1485                     l3583:	
  5275                           
  5276                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  5277  1485  303C               	movlw	60
  5278  1486  00F4               	movwf	??_reset_temp
  5279  1487  0874               	movf	??_reset_temp,w
  5280  1488  00F0               	movwf	delay_temp@y
  5281  1489  3002               	movlw	2
  5282  148A  160A  118A  218B  160A  118A  	fcall	_delay_temp
  5283  148F  2C5E               	goto	l3585
  5284  1490                     __end_of_reset_temp:	
  5285                           
  5286                           	psect	text16
  5287  1428                     __ptext16:	
  5288 ;; *************** function _read_byte *****************
  5289 ;; Defined at:
  5290 ;;		line 62 in file "Thermometer_src.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;		None
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  i               1    6[COMMON] unsigned char 
  5295 ;;  value           1    5[COMMON] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      unsigned char 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, pclath, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/100
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5305 ;;      Params:         0       0       0       0       0
  5306 ;;      Locals:         2       0       0       0       0
  5307 ;;      Temps:          1       0       0       0       0
  5308 ;;      Totals:         3       0       0       0       0
  5309 ;;Total ram usage:        3 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    1
  5312 ;; This function calls:
  5313 ;;		_delay_temp
  5314 ;; This function is called by:
  5315 ;;		_get_temp
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           
  5320                           ;psect for function _read_byte
  5321  1428                     _read_byte:	
  5322                           
  5323                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  5324                           
  5325                           ;incstack = 0
  5326                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5327  1428  01F5               	clrf	read_byte@value
  5328                           
  5329                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  5330  1429  3008               	movlw	8
  5331  142A  00F4               	movwf	??_read_byte
  5332  142B  0874               	movf	??_read_byte,w
  5333  142C  00F6               	movwf	read_byte@i
  5334  142D                     l3635:	
  5335                           
  5336                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  5337  142D  1003               	clrc
  5338  142E  0CF5               	rrf	read_byte@value,f
  5339                           
  5340                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  5341  142F  1283               	bcf	3,5	;RP0=0, select bank0
  5342  1430  1303               	bcf	3,6	;RP1=0, select bank0
  5343  1431  1009               	bcf	9,0	;volatile
  5344  1432  1683               	bsf	3,5	;RP0=1, select bank1
  5345  1433  1009               	bcf	9,0	;volatile
  5346                           
  5347                           ;Thermometer_src.c: 71:    __nop();
  5348  1434  0000               	nop
  5349                           
  5350                           ;Thermometer_src.c: 72:    __nop();
  5351  1435  0000               	nop
  5352                           
  5353                           ;Thermometer_src.c: 73:    __nop();
  5354  1436  0000               	nop
  5355                           
  5356                           ;Thermometer_src.c: 74:    __nop();
  5357  1437  0000               	nop
  5358                           
  5359                           ;Thermometer_src.c: 75:    __nop();
  5360  1438  0000               	nop
  5361                           
  5362                           ;Thermometer_src.c: 76:    __nop();
  5363  1439  0000               	nop
  5364                           
  5365                           ;Thermometer_src.c: 77:    TRISE0 =1;
  5366  143A  1683               	bsf	3,5	;RP0=1, select bank1
  5367  143B  1303               	bcf	3,6	;RP1=0, select bank1
  5368  143C  1409               	bsf	9,0	;volatile
  5369                           
  5370                           ;Thermometer_src.c: 78:    __nop();
  5371  143D  0000               	nop
  5372                           
  5373                           ;Thermometer_src.c: 79:    __nop();
  5374  143E  0000               	nop
  5375                           
  5376                           ;Thermometer_src.c: 80:    __nop();
  5377  143F  0000               	nop
  5378                           
  5379                           ;Thermometer_src.c: 81:    __nop();
  5380  1440  0000               	nop
  5381                           
  5382                           ;Thermometer_src.c: 82:    __nop();
  5383  1441  0000               	nop
  5384                           
  5385                           ;Thermometer_src.c: 83:    j=RE0;
  5386  1442  3000               	movlw	0
  5387  1443  1283               	bcf	3,5	;RP0=0, select bank0
  5388  1444  1303               	bcf	3,6	;RP1=0, select bank0
  5389  1445  1809               	btfsc	9,0	;volatile
  5390  1446  3001               	movlw	1
  5391  1447  00C0               	movwf	read_byte@j
  5392                           
  5393                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  5394  1448  0840               	movf	read_byte@j,w
  5395  1449  1D03               	btfss	3,2
  5396  144A  17F5               	bsf	read_byte@value,7
  5397                           
  5398                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  5399  144B  3007               	movlw	7
  5400  144C  00F4               	movwf	??_read_byte
  5401  144D  0874               	movf	??_read_byte,w
  5402  144E  00F0               	movwf	delay_temp@y
  5403  144F  3002               	movlw	2
  5404  1450  160A  118A  218B  160A  118A  	fcall	_delay_temp
  5405                           
  5406                           ;Thermometer_src.c: 86:   }
  5407  1455  3001               	movlw	1
  5408  1456  02F6               	subwf	read_byte@i,f
  5409  1457  0876               	movf	read_byte@i,w
  5410  1458  1D03               	btfss	3,2
  5411  1459  2C2D               	goto	l3635
  5412                           
  5413                           ;Thermometer_src.c: 87:   return(value);
  5414  145A  0875               	movf	read_byte@value,w
  5415  145B  0008               	return
  5416  145C                     __end_of_read_byte:	
  5417                           
  5418                           	psect	text17
  5419  118B                     __ptext17:	
  5420 ;; *************** function _delay_temp *****************
  5421 ;; Defined at:
  5422 ;;		line 121 in file "Thermometer_src.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  x               1    wreg     unsigned char 
  5425 ;;  y               1    0[COMMON] unsigned char 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  x               1    2[COMMON] unsigned char 
  5428 ;;  z               1    3[COMMON] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/100
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5438 ;;      Params:         1       0       0       0       0
  5439 ;;      Locals:         2       0       0       0       0
  5440 ;;      Temps:          1       0       0       0       0
  5441 ;;      Totals:         4       0       0       0       0
  5442 ;;Total ram usage:        4 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_reset_temp
  5448 ;;		_write_byte
  5449 ;;		_read_byte
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _delay_temp
  5455  118B                     _delay_temp:	
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5459                           ;delay_temp@x stored from wreg
  5460  118B  00F2               	movwf	delay_temp@x
  5461  118C                     l373:	
  5462                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5463                           
  5464                           
  5465                           ;Thermometer_src.c: 125:  z=y;
  5466  118C  0870               	movf	delay_temp@y,w
  5467  118D  00F1               	movwf	??_delay_temp
  5468  118E  0871               	movf	??_delay_temp,w
  5469  118F  00F3               	movwf	delay_temp@z
  5470  1190                     l3511:	
  5471  1190  3001               	movlw	1
  5472  1191  02F3               	subwf	delay_temp@z,f
  5473  1192  1D03               	btfss	3,2
  5474  1193  2990               	goto	l3511
  5475                           
  5476                           ;Thermometer_src.c: 127:  }while(--x);
  5477  1194  3001               	movlw	1
  5478  1195  02F2               	subwf	delay_temp@x,f
  5479  1196  1903               	btfsc	3,2
  5480  1197  0008               	return
  5481  1198  298C               	goto	l373
  5482  1199                     __end_of_delay_temp:	
  5483                           
  5484                           	psect	text18
  5485  1200                     __ptext18:	
  5486 ;; *************** function _delay2 *****************
  5487 ;; Defined at:
  5488 ;;		line 130 in file "Thermometer_src.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  i               2    0[COMMON] int 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, btemp+1
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/100
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5502 ;;      Params:         0       0       0       0       0
  5503 ;;      Locals:         2       0       0       0       0
  5504 ;;      Temps:          0       0       0       0       0
  5505 ;;      Totals:         2       0       0       0       0
  5506 ;;Total ram usage:        2 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_get_temp
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _delay2
  5517  1200                     _delay2:	
  5518                           
  5519                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5523  1200  01F0               	clrf	delay2@i
  5524  1201  01F1               	clrf	delay2@i+1
  5525  1202                     l3687:	
  5526                           
  5527                           ;Thermometer_src.c: 132:  }
  5528  1202  3001               	movlw	1
  5529  1203  07F0               	addwf	delay2@i,f
  5530  1204  1803               	skipnc
  5531  1205  0AF1               	incf	delay2@i+1,f
  5532  1206  3000               	movlw	0
  5533  1207  07F1               	addwf	delay2@i+1,f
  5534  1208  0871               	movf	delay2@i+1,w
  5535  1209  3A80               	xorlw	128
  5536  120A  00FF               	movwf	127
  5537  120B  3080               	movlw	128
  5538  120C  027F               	subwf	127,w
  5539  120D  1D03               	skipz
  5540  120E  2A11               	goto	u2435
  5541  120F  3032               	movlw	50
  5542  1210  0270               	subwf	delay2@i,w
  5543  1211                     u2435:	
  5544  1211  1803               	btfsc	3,0
  5545  1212  0008               	return
  5546  1213  2A02               	goto	l3687
  5547  1214                     __end_of_delay2:	
  5548                           
  5549                           	psect	text19
  5550  13F6                     __ptext19:	
  5551 ;; *************** function ___lwmod *****************
  5552 ;; Defined at:
  5553 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  divisor         2    0[COMMON] unsigned int 
  5556 ;;  dividend        2    2[COMMON] unsigned int 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  counter         1    5[COMMON] unsigned char 
  5559 ;; Return value:  Size  Location     Type
  5560 ;;                  2    0[COMMON] unsigned int 
  5561 ;; Registers used:
  5562 ;;		wreg, status,2, status,0
  5563 ;; Tracked objects:
  5564 ;;		On entry : 300/0
  5565 ;;		On exit  : 300/0
  5566 ;;		Unchanged: 300/0
  5567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5568 ;;      Params:         4       0       0       0       0
  5569 ;;      Locals:         1       0       0       0       0
  5570 ;;      Temps:          1       0       0       0       0
  5571 ;;      Totals:         6       0       0       0       0
  5572 ;;Total ram usage:        6 bytes
  5573 ;; Hardware stack levels used:    1
  5574 ;; This function calls:
  5575 ;;		Nothing
  5576 ;; This function is called by:
  5577 ;;		_get_temp
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function ___lwmod
  5583  13F6                     ___lwmod:	
  5584                           
  5585                           ;incstack = 0
  5586                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5587  13F6  0870               	movf	___lwmod@divisor,w
  5588  13F7  0471               	iorwf	___lwmod@divisor+1,w
  5589  13F8  1903               	btfsc	3,2
  5590  13F9  2C23               	goto	l3991
  5591  13FA  01F5               	clrf	___lwmod@counter
  5592  13FB  0AF5               	incf	___lwmod@counter,f
  5593  13FC                     l3981:	
  5594  13FC  1BF1               	btfsc	___lwmod@divisor+1,7
  5595  13FD  2C0A               	goto	l3983
  5596  13FE  3001               	movlw	1
  5597  13FF                     u3155:	
  5598  13FF  1003               	clrc
  5599  1400  0DF0               	rlf	___lwmod@divisor,f
  5600  1401  0DF1               	rlf	___lwmod@divisor+1,f
  5601  1402  3EFF               	addlw	-1
  5602  1403  1D03               	skipz
  5603  1404  2BFF               	goto	u3155
  5604  1405  3001               	movlw	1
  5605  1406  00F4               	movwf	??___lwmod
  5606  1407  0874               	movf	??___lwmod,w
  5607  1408  07F5               	addwf	___lwmod@counter,f
  5608  1409  2BFC               	goto	l3981
  5609  140A                     l3983:	
  5610  140A  0871               	movf	___lwmod@divisor+1,w
  5611  140B  0273               	subwf	___lwmod@dividend+1,w
  5612  140C  1D03               	skipz
  5613  140D  2C10               	goto	u3175
  5614  140E  0870               	movf	___lwmod@divisor,w
  5615  140F  0272               	subwf	___lwmod@dividend,w
  5616  1410                     u3175:	
  5617  1410  1C03               	skipc
  5618  1411  2C18               	goto	l3987
  5619  1412  0870               	movf	___lwmod@divisor,w
  5620  1413  02F2               	subwf	___lwmod@dividend,f
  5621  1414  0871               	movf	___lwmod@divisor+1,w
  5622  1415  1C03               	skipc
  5623  1416  03F3               	decf	___lwmod@dividend+1,f
  5624  1417  02F3               	subwf	___lwmod@dividend+1,f
  5625  1418                     l3987:	
  5626  1418  3001               	movlw	1
  5627  1419                     u3185:	
  5628  1419  1003               	clrc
  5629  141A  0CF1               	rrf	___lwmod@divisor+1,f
  5630  141B  0CF0               	rrf	___lwmod@divisor,f
  5631  141C  3EFF               	addlw	-1
  5632  141D  1D03               	skipz
  5633  141E  2C19               	goto	u3185
  5634  141F  3001               	movlw	1
  5635  1420  02F5               	subwf	___lwmod@counter,f
  5636  1421  1D03               	btfss	3,2
  5637  1422  2C0A               	goto	l3983
  5638  1423                     l3991:	
  5639  1423  0873               	movf	___lwmod@dividend+1,w
  5640  1424  00F1               	movwf	?___lwmod+1
  5641  1425  0872               	movf	___lwmod@dividend,w
  5642  1426  00F0               	movwf	?___lwmod
  5643  1427  0008               	return
  5644  1428                     __end_of___lwmod:	
  5645                           
  5646                           	psect	text20
  5647  14C6                     __ptext20:	
  5648 ;; *************** function ___lwdiv *****************
  5649 ;; Defined at:
  5650 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  divisor         2    6[COMMON] unsigned int 
  5653 ;;  dividend        2    8[COMMON] unsigned int 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  quotient        2   11[COMMON] unsigned int 
  5656 ;;  counter         1   13[COMMON] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  2    6[COMMON] unsigned int 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0
  5661 ;; Tracked objects:
  5662 ;;		On entry : 300/0
  5663 ;;		On exit  : 300/0
  5664 ;;		Unchanged: 300/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5666 ;;      Params:         4       0       0       0       0
  5667 ;;      Locals:         3       0       0       0       0
  5668 ;;      Temps:          1       0       0       0       0
  5669 ;;      Totals:         8       0       0       0       0
  5670 ;;Total ram usage:        8 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_get_temp
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           
  5680                           ;psect for function ___lwdiv
  5681  14C6                     ___lwdiv:	
  5682                           
  5683                           ;incstack = 0
  5684                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5685  14C6  01FB               	clrf	___lwdiv@quotient
  5686  14C7  01FC               	clrf	___lwdiv@quotient+1
  5687  14C8  0876               	movf	___lwdiv@divisor,w
  5688  14C9  0477               	iorwf	___lwdiv@divisor+1,w
  5689  14CA  1903               	btfsc	3,2
  5690  14CB  2CFD               	goto	l3969
  5691  14CC  01FD               	clrf	___lwdiv@counter
  5692  14CD  0AFD               	incf	___lwdiv@counter,f
  5693  14CE                     l3957:	
  5694  14CE  1BF7               	btfsc	___lwdiv@divisor+1,7
  5695  14CF  2CDC               	goto	l3959
  5696  14D0  3001               	movlw	1
  5697  14D1                     u3085:	
  5698  14D1  1003               	clrc
  5699  14D2  0DF6               	rlf	___lwdiv@divisor,f
  5700  14D3  0DF7               	rlf	___lwdiv@divisor+1,f
  5701  14D4  3EFF               	addlw	-1
  5702  14D5  1D03               	skipz
  5703  14D6  2CD1               	goto	u3085
  5704  14D7  3001               	movlw	1
  5705  14D8  00FA               	movwf	??___lwdiv
  5706  14D9  087A               	movf	??___lwdiv,w
  5707  14DA  07FD               	addwf	___lwdiv@counter,f
  5708  14DB  2CCE               	goto	l3957
  5709  14DC                     l3959:	
  5710  14DC  3001               	movlw	1
  5711  14DD                     u3105:	
  5712  14DD  1003               	clrc
  5713  14DE  0DFB               	rlf	___lwdiv@quotient,f
  5714  14DF  0DFC               	rlf	___lwdiv@quotient+1,f
  5715  14E0  3EFF               	addlw	-1
  5716  14E1  1D03               	skipz
  5717  14E2  2CDD               	goto	u3105
  5718  14E3  0877               	movf	___lwdiv@divisor+1,w
  5719  14E4  0279               	subwf	___lwdiv@dividend+1,w
  5720  14E5  1D03               	skipz
  5721  14E6  2CE9               	goto	u3115
  5722  14E7  0876               	movf	___lwdiv@divisor,w
  5723  14E8  0278               	subwf	___lwdiv@dividend,w
  5724  14E9                     u3115:	
  5725  14E9  1C03               	skipc
  5726  14EA  2CF2               	goto	l3965
  5727  14EB  0876               	movf	___lwdiv@divisor,w
  5728  14EC  02F8               	subwf	___lwdiv@dividend,f
  5729  14ED  0877               	movf	___lwdiv@divisor+1,w
  5730  14EE  1C03               	skipc
  5731  14EF  03F9               	decf	___lwdiv@dividend+1,f
  5732  14F0  02F9               	subwf	___lwdiv@dividend+1,f
  5733  14F1  147B               	bsf	___lwdiv@quotient,0
  5734  14F2                     l3965:	
  5735  14F2  3001               	movlw	1
  5736  14F3                     u3125:	
  5737  14F3  1003               	clrc
  5738  14F4  0CF7               	rrf	___lwdiv@divisor+1,f
  5739  14F5  0CF6               	rrf	___lwdiv@divisor,f
  5740  14F6  3EFF               	addlw	-1
  5741  14F7  1D03               	skipz
  5742  14F8  2CF3               	goto	u3125
  5743  14F9  3001               	movlw	1
  5744  14FA  02FD               	subwf	___lwdiv@counter,f
  5745  14FB  1D03               	btfss	3,2
  5746  14FC  2CDC               	goto	l3959
  5747  14FD                     l3969:	
  5748  14FD  087C               	movf	___lwdiv@quotient+1,w
  5749  14FE  00F7               	movwf	?___lwdiv+1
  5750  14FF  087B               	movf	___lwdiv@quotient,w
  5751  1500  00F6               	movwf	?___lwdiv
  5752  1501  0008               	return
  5753  1502                     __end_of___lwdiv:	
  5754                           
  5755                           	psect	text21
  5756  12B5                     __ptext21:	
  5757 ;; *************** function ___lbmod *****************
  5758 ;; Defined at:
  5759 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  dividend        1    wreg     unsigned char 
  5762 ;;  divisor         1    0[COMMON] unsigned char 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  dividend        1    4[COMMON] unsigned char 
  5765 ;;  rem             1    6[COMMON] unsigned char 
  5766 ;;  counter         1    5[COMMON] unsigned char 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      unsigned char 
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0
  5771 ;; Tracked objects:
  5772 ;;		On entry : 300/0
  5773 ;;		On exit  : 300/0
  5774 ;;		Unchanged: 300/0
  5775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5776 ;;      Params:         1       0       0       0       0
  5777 ;;      Locals:         3       0       0       0       0
  5778 ;;      Temps:          3       0       0       0       0
  5779 ;;      Totals:         7       0       0       0       0
  5780 ;;Total ram usage:        7 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_get_temp
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function ___lbmod
  5791  12B5                     ___lbmod:	
  5792                           
  5793                           ;incstack = 0
  5794                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5795                           ;___lbmod@dividend stored from wreg
  5796  12B5  00F4               	movwf	___lbmod@dividend
  5797  12B6  3008               	movlw	8
  5798  12B7  00F1               	movwf	??___lbmod
  5799  12B8  0871               	movf	??___lbmod,w
  5800  12B9  00F5               	movwf	___lbmod@counter
  5801  12BA  01F6               	clrf	___lbmod@rem
  5802  12BB                     l3935:	
  5803  12BB  0874               	movf	___lbmod@dividend,w
  5804  12BC  00F1               	movwf	??___lbmod
  5805  12BD  3007               	movlw	7
  5806  12BE                     u3045:	
  5807  12BE  1003               	clrc
  5808  12BF  0CF1               	rrf	??___lbmod,f
  5809  12C0  3EFF               	addlw	-1
  5810  12C1  1D03               	skipz
  5811  12C2  2ABE               	goto	u3045
  5812  12C3  0876               	movf	___lbmod@rem,w
  5813  12C4  00F2               	movwf	??___lbmod+1
  5814  12C5  0772               	addwf	??___lbmod+1,w
  5815  12C6  0471               	iorwf	??___lbmod,w
  5816  12C7  00F3               	movwf	??___lbmod+2
  5817  12C8  0873               	movf	??___lbmod+2,w
  5818  12C9  00F6               	movwf	___lbmod@rem
  5819  12CA  1003               	clrc
  5820  12CB  0DF4               	rlf	___lbmod@dividend,f
  5821  12CC  0870               	movf	___lbmod@divisor,w
  5822  12CD  0276               	subwf	___lbmod@rem,w
  5823  12CE  1C03               	skipc
  5824  12CF  2AD2               	goto	l1375
  5825  12D0  0870               	movf	___lbmod@divisor,w
  5826  12D1  02F6               	subwf	___lbmod@rem,f
  5827  12D2                     l1375:	
  5828  12D2  3001               	movlw	1
  5829  12D3  02F5               	subwf	___lbmod@counter,f
  5830  12D4  1D03               	btfss	3,2
  5831  12D5  2ABB               	goto	l3935
  5832  12D6  0876               	movf	___lbmod@rem,w
  5833  12D7  0008               	return
  5834  12D8                     __end_of___lbmod:	
  5835                           
  5836                           	psect	text22
  5837  1294                     __ptext22:	
  5838 ;; *************** function ___lbdiv *****************
  5839 ;; Defined at:
  5840 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  dividend        1    wreg     unsigned char 
  5843 ;;  divisor         1    0[COMMON] unsigned char 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  dividend        1    2[COMMON] unsigned char 
  5846 ;;  quotient        1    4[COMMON] unsigned char 
  5847 ;;  counter         1    3[COMMON] unsigned char 
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      unsigned char 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0
  5852 ;; Tracked objects:
  5853 ;;		On entry : 300/0
  5854 ;;		On exit  : 300/0
  5855 ;;		Unchanged: 300/0
  5856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5857 ;;      Params:         1       0       0       0       0
  5858 ;;      Locals:         3       0       0       0       0
  5859 ;;      Temps:          1       0       0       0       0
  5860 ;;      Totals:         5       0       0       0       0
  5861 ;;Total ram usage:        5 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; This function calls:
  5864 ;;		Nothing
  5865 ;; This function is called by:
  5866 ;;		_get_temp
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           
  5871                           ;psect for function ___lbdiv
  5872  1294                     ___lbdiv:	
  5873                           
  5874                           ;incstack = 0
  5875                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5876                           ;___lbdiv@dividend stored from wreg
  5877  1294  00F2               	movwf	___lbdiv@dividend
  5878  1295  01F4               	clrf	___lbdiv@quotient
  5879  1296  0870               	movf	___lbdiv@divisor,w
  5880  1297  1903               	btfsc	3,2
  5881  1298  2AB3               	goto	l3927
  5882  1299  01F3               	clrf	___lbdiv@counter
  5883  129A  0AF3               	incf	___lbdiv@counter,f
  5884  129B                     l3915:	
  5885  129B  1BF0               	btfsc	___lbdiv@divisor,7
  5886  129C  2AA4               	goto	l3917
  5887  129D  1003               	clrc
  5888  129E  0DF0               	rlf	___lbdiv@divisor,f
  5889  129F  3001               	movlw	1
  5890  12A0  00F1               	movwf	??___lbdiv
  5891  12A1  0871               	movf	??___lbdiv,w
  5892  12A2  07F3               	addwf	___lbdiv@counter,f
  5893  12A3  2A9B               	goto	l3915
  5894  12A4                     l3917:	
  5895  12A4  1003               	clrc
  5896  12A5  0DF4               	rlf	___lbdiv@quotient,f
  5897  12A6  0870               	movf	___lbdiv@divisor,w
  5898  12A7  0272               	subwf	___lbdiv@dividend,w
  5899  12A8  1C03               	skipc
  5900  12A9  2AAE               	goto	L2
  5901  12AA  0870               	movf	___lbdiv@divisor,w
  5902  12AB  02F2               	subwf	___lbdiv@dividend,f
  5903  12AC  1474               	bsf	___lbdiv@quotient,0
  5904  12AD  1003               	clrc
  5905  12AE                     L2:	
  5906  12AE  0CF0               	rrf	___lbdiv@divisor,f
  5907  12AF  3001               	movlw	1
  5908  12B0  02F3               	subwf	___lbdiv@counter,f
  5909  12B1  1D03               	btfss	3,2
  5910  12B2  2AA4               	goto	l3917
  5911  12B3                     l3927:	
  5912  12B3  0874               	movf	___lbdiv@quotient,w
  5913  12B4  0008               	return
  5914  12B5                     __end_of___lbdiv:	
  5915                           
  5916                           	psect	text23
  5917  11A8                     __ptext23:	
  5918 ;; *************** function _ds1302_init *****************
  5919 ;; Defined at:
  5920 ;;		line 3 in file "clock_src.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 300/0
  5931 ;;		On exit  : 300/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5934 ;;      Params:         0       0       0       0       0
  5935 ;;      Locals:         0       0       0       0       0
  5936 ;;      Temps:          0       0       0       0       0
  5937 ;;      Totals:         0       0       0       0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    1
  5941 ;; This function calls:
  5942 ;;		_time_write_1
  5943 ;; This function is called by:
  5944 ;;		_main
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           
  5949                           ;psect for function _ds1302_init
  5950  11A8                     _ds1302_init:	
  5951                           
  5952                           ;clock_src.c: 5:    RB0=0;
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5956  11A8  1006               	bcf	6,0	;volatile
  5957                           
  5958                           ;clock_src.c: 6:    RB5 =0;
  5959  11A9  1286               	bcf	6,5	;volatile
  5960                           
  5961                           ;clock_src.c: 7:    RB5=1;
  5962  11AA  1686               	bsf	6,5	;volatile
  5963                           
  5964                           ;clock_src.c: 8:    time_write_1(0x8e);
  5965  11AB  308E               	movlw	142
  5966  11AC  160A  118A  231F  160A  118A  	fcall	_time_write_1
  5967                           
  5968                           ;clock_src.c: 9:    time_write_1(0);
  5969  11B1  3000               	movlw	0
  5970  11B2  160A  118A  231F   	fcall	_time_write_1
  5971                           
  5972                           ;clock_src.c: 10:    RB5=0;
  5973  11B5  1286               	bcf	6,5	;volatile
  5974  11B6  0008               	return
  5975  11B7                     __end_of_ds1302_init:	
  5976                           
  5977                           	psect	text24
  5978  1273                     __ptext24:	
  5979 ;; *************** function _display_temp *****************
  5980 ;; Defined at:
  5981 ;;		line 12 in file "Thermometer_src.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;		None
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 300/0
  5992 ;;		On exit  : 300/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5995 ;;      Params:         0       0       0       0       0
  5996 ;;      Locals:         0       0       0       0       0
  5997 ;;      Temps:          0       0       0       0       0
  5998 ;;      Totals:         0       0       0       0       0
  5999 ;;Total ram usage:        0 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    2
  6002 ;; This function calls:
  6003 ;;		_write_char
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _display_temp
  6011  1273                     _display_temp:	
  6012                           
  6013                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6017  1273  085B               	movf	_shi,w
  6018  1274  3E30               	addlw	48
  6019  1275  160A  118A  2228  160A  118A  	fcall	_write_char
  6020                           
  6021                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  6022  127A  085A               	movf	_ge,w
  6023  127B  3E30               	addlw	48
  6024  127C  160A  118A  2228  160A  118A  	fcall	_write_char
  6025                           
  6026                           ;Thermometer_src.c: 17:  write_char('.');
  6027  1281  302E               	movlw	46
  6028  1282  160A  118A  2228  160A  118A  	fcall	_write_char
  6029                           
  6030                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  6031  1287  0859               	movf	_shifen,w
  6032  1288  3E30               	addlw	48
  6033  1289  160A  118A  2228  160A  118A  	fcall	_write_char
  6034                           
  6035                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  6036  128E  0858               	movf	_baifen,w
  6037  128F  3E30               	addlw	48
  6038  1290  160A  118A  2228   	fcall	_write_char
  6039  1293  0008               	return
  6040  1294                     __end_of_display_temp:	
  6041                           
  6042                           	psect	text25
  6043  000D                     __ptext25:	
  6044 ;; *************** function _display_day *****************
  6045 ;; Defined at:
  6046 ;;		line 4 in file "Day_of_week_src.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  num             2    3[COMMON] int 
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;		None
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  1    wreg      void 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 300/100
  6057 ;;		On exit  : 200/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6060 ;;      Params:         2       0       0       0       0
  6061 ;;      Locals:         0       0       0       0       0
  6062 ;;      Temps:          0       0       0       0       0
  6063 ;;      Totals:         2       0       0       0       0
  6064 ;;Total ram usage:        2 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    2
  6067 ;; This function calls:
  6068 ;;		_write_char
  6069 ;; This function is called by:
  6070 ;;		_main
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _display_day
  6076  000D                     _display_day:	
  6077                           
  6078                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  6079                           
  6080                           ;incstack = 0
  6081                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6082  000D  0373               	decf	display_day@num,w
  6083  000E  0474               	iorwf	display_day@num+1,w
  6084  000F  1903               	btfsc	3,2
  6085  0010  2815               	goto	l5101
  6086  0011  0873               	movf	display_day@num,w
  6087  0012  0474               	iorwf	display_day@num+1,w
  6088  0013  1D03               	btfss	3,2
  6089  0014  2821               	goto	l5103
  6090  0015                     l5101:	
  6091                           
  6092                           ;Day_of_week_src.c: 6:     write_char('M');
  6093  0015  304D               	movlw	77
  6094  0016  160A  118A  2228  120A  118A  	fcall	_write_char
  6095                           
  6096                           ;Day_of_week_src.c: 7:     write_char('o');
  6097  001B  306F               	movlw	111
  6098  001C  160A  118A  2228  120A  118A  	fcall	_write_char
  6099  0021                     l5103:	
  6100                           
  6101                           ;Day_of_week_src.c: 10:     if(num == 2){
  6102  0021  3002               	movlw	2
  6103  0022  0673               	xorwf	display_day@num,w
  6104  0023  0474               	iorwf	display_day@num+1,w
  6105  0024  1D03               	btfss	3,2
  6106  0025  2832               	goto	l5107
  6107                           
  6108                           ;Day_of_week_src.c: 11:     write_char('T');
  6109  0026  3054               	movlw	84
  6110  0027  160A  118A  2228  120A  118A  	fcall	_write_char
  6111                           
  6112                           ;Day_of_week_src.c: 12:     write_char('u');
  6113  002C  3075               	movlw	117
  6114  002D  160A  118A  2228  120A  118A  	fcall	_write_char
  6115  0032                     l5107:	
  6116                           
  6117                           ;Day_of_week_src.c: 15:     if(num == 3){
  6118  0032  3003               	movlw	3
  6119  0033  0673               	xorwf	display_day@num,w
  6120  0034  0474               	iorwf	display_day@num+1,w
  6121  0035  1D03               	btfss	3,2
  6122  0036  2843               	goto	l5111
  6123                           
  6124                           ;Day_of_week_src.c: 16:     write_char('W');
  6125  0037  3057               	movlw	87
  6126  0038  160A  118A  2228  120A  118A  	fcall	_write_char
  6127                           
  6128                           ;Day_of_week_src.c: 17:     write_char('e');
  6129  003D  3065               	movlw	101
  6130  003E  160A  118A  2228  120A  118A  	fcall	_write_char
  6131  0043                     l5111:	
  6132                           
  6133                           ;Day_of_week_src.c: 20:     if(num == 4){
  6134  0043  3004               	movlw	4
  6135  0044  0673               	xorwf	display_day@num,w
  6136  0045  0474               	iorwf	display_day@num+1,w
  6137  0046  1D03               	btfss	3,2
  6138  0047  2854               	goto	l5115
  6139                           
  6140                           ;Day_of_week_src.c: 21:     write_char('T');
  6141  0048  3054               	movlw	84
  6142  0049  160A  118A  2228  120A  118A  	fcall	_write_char
  6143                           
  6144                           ;Day_of_week_src.c: 22:     write_char('h');
  6145  004E  3068               	movlw	104
  6146  004F  160A  118A  2228  120A  118A  	fcall	_write_char
  6147  0054                     l5115:	
  6148                           
  6149                           ;Day_of_week_src.c: 25:     if(num == 5){
  6150  0054  3005               	movlw	5
  6151  0055  0673               	xorwf	display_day@num,w
  6152  0056  0474               	iorwf	display_day@num+1,w
  6153  0057  1D03               	btfss	3,2
  6154  0058  2865               	goto	l5119
  6155                           
  6156                           ;Day_of_week_src.c: 26:     write_char('F');
  6157  0059  3046               	movlw	70
  6158  005A  160A  118A  2228  120A  118A  	fcall	_write_char
  6159                           
  6160                           ;Day_of_week_src.c: 27:     write_char('r');
  6161  005F  3072               	movlw	114
  6162  0060  160A  118A  2228  120A  118A  	fcall	_write_char
  6163  0065                     l5119:	
  6164                           
  6165                           ;Day_of_week_src.c: 30:     if(num == 6){
  6166  0065  3006               	movlw	6
  6167  0066  0673               	xorwf	display_day@num,w
  6168  0067  0474               	iorwf	display_day@num+1,w
  6169  0068  1D03               	btfss	3,2
  6170  0069  2876               	goto	l5123
  6171                           
  6172                           ;Day_of_week_src.c: 31:     write_char('S');
  6173  006A  3053               	movlw	83
  6174  006B  160A  118A  2228  120A  118A  	fcall	_write_char
  6175                           
  6176                           ;Day_of_week_src.c: 32:     write_char('a');
  6177  0070  3061               	movlw	97
  6178  0071  160A  118A  2228  120A  118A  	fcall	_write_char
  6179  0076                     l5123:	
  6180                           
  6181                           ;Day_of_week_src.c: 35:     if(num == 7){
  6182  0076  3007               	movlw	7
  6183  0077  0673               	xorwf	display_day@num,w
  6184  0078  0474               	iorwf	display_day@num+1,w
  6185  0079  1D03               	btfss	3,2
  6186  007A  0008               	return
  6187                           
  6188                           ;Day_of_week_src.c: 36:     write_char('S');
  6189  007B  3053               	movlw	83
  6190  007C  160A  118A  2228  120A  118A  	fcall	_write_char
  6191                           
  6192                           ;Day_of_week_src.c: 37:     write_char('u');
  6193  0081  3075               	movlw	117
  6194  0082  160A  118A  2228   	fcall	_write_char
  6195  0085  0008               	return
  6196  0086                     __end_of_display_day:	
  6197                           
  6198                           	psect	text26
  6199  0803                     __ptext26:	
  6200 ;; *************** function _display_date *****************
  6201 ;; Defined at:
  6202 ;;		line 77 in file "clock_src.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  i               2    5[COMMON] int 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 300/0
  6213 ;;		On exit  : 300/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6216 ;;      Params:         0       0       0       0       0
  6217 ;;      Locals:         2       0       0       0       0
  6218 ;;      Temps:          2       0       0       0       0
  6219 ;;      Totals:         4       0       0       0       0
  6220 ;;Total ram usage:        4 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    2
  6223 ;; This function calls:
  6224 ;;		_write_char
  6225 ;; This function is called by:
  6226 ;;		_main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _display_date
  6232  0803                     _display_date:	
  6233                           
  6234                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6238  0803  1886               	btfsc	6,1	;volatile
  6239  0804  280E               	goto	l4123
  6240                           
  6241                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  6242  0805  1683               	bsf	3,5	;RP0=1, select bank1
  6243  0806  0823               	movf	(_table1^(0+128)+3),w
  6244  0807  00F3               	movwf	??_display_date
  6245  0808  0873               	movf	??_display_date,w
  6246  0809  00A0               	movwf	_table1^(0+128)
  6247                           
  6248                           ;clock_src.c: 83:           table1[1]=table1[4];
  6249  080A  0824               	movf	(_table1^(0+128)+4),w
  6250  080B  00F3               	movwf	??_display_date
  6251  080C  0873               	movf	??_display_date,w
  6252  080D  00A1               	movwf	(_table1^(0+128)+1)
  6253  080E                     l4123:	
  6254                           
  6255                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  6256  080E  1683               	bsf	3,5	;RP0=1, select bank1
  6257  080F  0823               	movf	(_table1^(0+128)+3),w
  6258  0810  39F0               	andlw	240
  6259  0811  00F3               	movwf	??_display_date
  6260  0812  01F4               	clrf	??_display_date+1
  6261  0813  0873               	movf	??_display_date,w
  6262  0814  00F5               	movwf	display_date@i
  6263  0815  0874               	movf	??_display_date+1,w
  6264  0816  00F6               	movwf	display_date@i+1
  6265                           
  6266                           ;clock_src.c: 86:      i=i>>4;
  6267  0817  0E75               	swapf	display_date@i,w
  6268  0818  390F               	andlw	15
  6269  0819  00F5               	movwf	display_date@i
  6270  081A  0E76               	swapf	display_date@i+1,w
  6271  081B  39F0               	andlw	240
  6272  081C  04F5               	iorwf	display_date@i,f
  6273  081D  0E76               	swapf	display_date@i+1,w
  6274  081E  390F               	andlw	15
  6275  081F  00F6               	movwf	display_date@i+1
  6276  0820  30F0               	movlw	240
  6277  0821  1DF6               	btfss	display_date@i+1,3
  6278  0822  3000               	movlw	0
  6279  0823  04F6               	iorwf	display_date@i+1,f
  6280                           
  6281                           ;clock_src.c: 87:      write_char(i + '0');
  6282  0824  0875               	movf	display_date@i,w
  6283  0825  3E30               	addlw	48
  6284  0826  160A  118A  2228  120A  158A  	fcall	_write_char
  6285                           
  6286                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  6287  082B  1683               	bsf	3,5	;RP0=1, select bank1
  6288  082C  0823               	movf	(_table1^(0+128)+3),w
  6289  082D  390F               	andlw	15
  6290  082E  00F3               	movwf	??_display_date
  6291  082F  01F4               	clrf	??_display_date+1
  6292  0830  0873               	movf	??_display_date,w
  6293  0831  00F5               	movwf	display_date@i
  6294  0832  0874               	movf	??_display_date+1,w
  6295  0833  00F6               	movwf	display_date@i+1
  6296                           
  6297                           ;clock_src.c: 90:      write_char(i + '0');
  6298  0834  0875               	movf	display_date@i,w
  6299  0835  3E30               	addlw	48
  6300  0836  160A  118A  2228  120A  158A  	fcall	_write_char
  6301                           
  6302                           ;clock_src.c: 91:      write_char('/');
  6303  083B  302F               	movlw	47
  6304  083C  160A  118A  2228  120A  158A  	fcall	_write_char
  6305                           
  6306                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  6307  0841  1683               	bsf	3,5	;RP0=1, select bank1
  6308  0842  0824               	movf	(_table1^(0+128)+4),w
  6309  0843  39F0               	andlw	240
  6310  0844  00F3               	movwf	??_display_date
  6311  0845  01F4               	clrf	??_display_date+1
  6312  0846  0873               	movf	??_display_date,w
  6313  0847  00F5               	movwf	display_date@i
  6314  0848  0874               	movf	??_display_date+1,w
  6315  0849  00F6               	movwf	display_date@i+1
  6316                           
  6317                           ;clock_src.c: 96:      i=i>>4;
  6318  084A  0E75               	swapf	display_date@i,w
  6319  084B  390F               	andlw	15
  6320  084C  00F5               	movwf	display_date@i
  6321  084D  0E76               	swapf	display_date@i+1,w
  6322  084E  39F0               	andlw	240
  6323  084F  04F5               	iorwf	display_date@i,f
  6324  0850  0E76               	swapf	display_date@i+1,w
  6325  0851  390F               	andlw	15
  6326  0852  00F6               	movwf	display_date@i+1
  6327  0853  30F0               	movlw	240
  6328  0854  1DF6               	btfss	display_date@i+1,3
  6329  0855  3000               	movlw	0
  6330  0856  04F6               	iorwf	display_date@i+1,f
  6331                           
  6332                           ;clock_src.c: 97:      write_char(i + '0');
  6333  0857  0875               	movf	display_date@i,w
  6334  0858  3E30               	addlw	48
  6335  0859  160A  118A  2228  120A  158A  	fcall	_write_char
  6336                           
  6337                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  6338  085E  1683               	bsf	3,5	;RP0=1, select bank1
  6339  085F  0824               	movf	(_table1^(0+128)+4),w
  6340  0860  390F               	andlw	15
  6341  0861  00F3               	movwf	??_display_date
  6342  0862  01F4               	clrf	??_display_date+1
  6343  0863  0873               	movf	??_display_date,w
  6344  0864  00F5               	movwf	display_date@i
  6345  0865  0874               	movf	??_display_date+1,w
  6346  0866  00F6               	movwf	display_date@i+1
  6347                           
  6348                           ;clock_src.c: 100:      write_char(i + '0');
  6349  0867  0875               	movf	display_date@i,w
  6350  0868  3E30               	addlw	48
  6351  0869  160A  118A  2228  120A  158A  	fcall	_write_char
  6352                           
  6353                           ;clock_src.c: 101:      write_char('/');
  6354  086E  302F               	movlw	47
  6355  086F  160A  118A  2228  120A  158A  	fcall	_write_char
  6356                           
  6357                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  6358  0874  1683               	bsf	3,5	;RP0=1, select bank1
  6359  0875  0826               	movf	(_table1^(0+128)+6),w
  6360  0876  39F0               	andlw	240
  6361  0877  00F3               	movwf	??_display_date
  6362  0878  01F4               	clrf	??_display_date+1
  6363  0879  0873               	movf	??_display_date,w
  6364  087A  00F5               	movwf	display_date@i
  6365  087B  0874               	movf	??_display_date+1,w
  6366  087C  00F6               	movwf	display_date@i+1
  6367                           
  6368                           ;clock_src.c: 106:      i=i>>4;
  6369  087D  0E75               	swapf	display_date@i,w
  6370  087E  390F               	andlw	15
  6371  087F  00F5               	movwf	display_date@i
  6372  0880  0E76               	swapf	display_date@i+1,w
  6373  0881  39F0               	andlw	240
  6374  0882  04F5               	iorwf	display_date@i,f
  6375  0883  0E76               	swapf	display_date@i+1,w
  6376  0884  390F               	andlw	15
  6377  0885  00F6               	movwf	display_date@i+1
  6378  0886  30F0               	movlw	240
  6379  0887  1DF6               	btfss	display_date@i+1,3
  6380  0888  3000               	movlw	0
  6381  0889  04F6               	iorwf	display_date@i+1,f
  6382                           
  6383                           ;clock_src.c: 107:      write_char(i + '0');
  6384  088A  0875               	movf	display_date@i,w
  6385  088B  3E30               	addlw	48
  6386  088C  160A  118A  2228  120A  158A  	fcall	_write_char
  6387                           
  6388                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  6389  0891  1683               	bsf	3,5	;RP0=1, select bank1
  6390  0892  0826               	movf	(_table1^(0+128)+6),w
  6391  0893  390F               	andlw	15
  6392  0894  00F3               	movwf	??_display_date
  6393  0895  01F4               	clrf	??_display_date+1
  6394  0896  0873               	movf	??_display_date,w
  6395  0897  00F5               	movwf	display_date@i
  6396  0898  0874               	movf	??_display_date+1,w
  6397  0899  00F6               	movwf	display_date@i+1
  6398                           
  6399                           ;clock_src.c: 110:      write_char(i + '0');
  6400  089A  0875               	movf	display_date@i,w
  6401  089B  3E30               	addlw	48
  6402  089C  160A  118A  2228   	fcall	_write_char
  6403  089F  0008               	return
  6404  08A0                     __end_of_display_date:	
  6405                           
  6406                           	psect	text27
  6407  1654                     __ptext27:	
  6408 ;; *************** function _display_clock *****************
  6409 ;; Defined at:
  6410 ;;		line 34 in file "clock_src.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  i               2    5[COMMON] int 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      void 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 300/0
  6421 ;;		On exit  : 300/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6424 ;;      Params:         0       0       0       0       0
  6425 ;;      Locals:         2       0       0       0       0
  6426 ;;      Temps:          2       0       0       0       0
  6427 ;;      Totals:         4       0       0       0       0
  6428 ;;Total ram usage:        4 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    2
  6431 ;; This function calls:
  6432 ;;		_write_char
  6433 ;; This function is called by:
  6434 ;;		_main
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _display_clock
  6440  1654                     _display_clock:	
  6441                           
  6442                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6446  1654  1886               	btfsc	6,1	;volatile
  6447  1655  2E5F               	goto	l4161
  6448                           
  6449                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6450  1656  1683               	bsf	3,5	;RP0=1, select bank1
  6451  1657  0823               	movf	(_table1^(0+128)+3),w
  6452  1658  00F3               	movwf	??_display_clock
  6453  1659  0873               	movf	??_display_clock,w
  6454  165A  00A0               	movwf	_table1^(0+128)
  6455                           
  6456                           ;clock_src.c: 40:           table1[1]=table1[4];
  6457  165B  0824               	movf	(_table1^(0+128)+4),w
  6458  165C  00F3               	movwf	??_display_clock
  6459  165D  0873               	movf	??_display_clock,w
  6460  165E  00A1               	movwf	(_table1^(0+128)+1)
  6461  165F                     l4161:	
  6462                           
  6463                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6464  165F  1683               	bsf	3,5	;RP0=1, select bank1
  6465  1660  0822               	movf	(_table1^(0+128)+2),w
  6466  1661  39F0               	andlw	240
  6467  1662  00F3               	movwf	??_display_clock
  6468  1663  01F4               	clrf	??_display_clock+1
  6469  1664  0873               	movf	??_display_clock,w
  6470  1665  00F5               	movwf	display_clock@i
  6471  1666  0874               	movf	??_display_clock+1,w
  6472  1667  00F6               	movwf	display_clock@i+1
  6473                           
  6474                           ;clock_src.c: 44:      i=i>>4;
  6475  1668  0E75               	swapf	display_clock@i,w
  6476  1669  390F               	andlw	15
  6477  166A  00F5               	movwf	display_clock@i
  6478  166B  0E76               	swapf	display_clock@i+1,w
  6479  166C  39F0               	andlw	240
  6480  166D  04F5               	iorwf	display_clock@i,f
  6481  166E  0E76               	swapf	display_clock@i+1,w
  6482  166F  390F               	andlw	15
  6483  1670  00F6               	movwf	display_clock@i+1
  6484  1671  30F0               	movlw	240
  6485  1672  1DF6               	btfss	display_clock@i+1,3
  6486  1673  3000               	movlw	0
  6487  1674  04F6               	iorwf	display_clock@i+1,f
  6488                           
  6489                           ;clock_src.c: 45:      write_char(i + '0');
  6490  1675  0875               	movf	display_clock@i,w
  6491  1676  3E30               	addlw	48
  6492  1677  160A  118A  2228  160A  118A  	fcall	_write_char
  6493                           
  6494                           ;clock_src.c: 46:      temp_high = i;
  6495  167C  0875               	movf	display_clock@i,w
  6496  167D  00F3               	movwf	??_display_clock
  6497  167E  0873               	movf	??_display_clock,w
  6498  167F  00CB               	movwf	_temp_high
  6499                           
  6500                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6501  1680  1683               	bsf	3,5	;RP0=1, select bank1
  6502  1681  0822               	movf	(_table1^(0+128)+2),w
  6503  1682  390F               	andlw	15
  6504  1683  00F3               	movwf	??_display_clock
  6505  1684  01F4               	clrf	??_display_clock+1
  6506  1685  0873               	movf	??_display_clock,w
  6507  1686  00F5               	movwf	display_clock@i
  6508  1687  0874               	movf	??_display_clock+1,w
  6509  1688  00F6               	movwf	display_clock@i+1
  6510                           
  6511                           ;clock_src.c: 50:      write_char(i + '0');
  6512  1689  0875               	movf	display_clock@i,w
  6513  168A  3E30               	addlw	48
  6514  168B  160A  118A  2228  160A  118A  	fcall	_write_char
  6515                           
  6516                           ;clock_src.c: 51:      write_char(':');
  6517  1690  303A               	movlw	58
  6518  1691  160A  118A  2228  160A  118A  	fcall	_write_char
  6519                           
  6520                           ;clock_src.c: 52:      temp_low = i;
  6521  1696  0875               	movf	display_clock@i,w
  6522  1697  00F3               	movwf	??_display_clock
  6523  1698  0873               	movf	??_display_clock,w
  6524  1699  00CC               	movwf	_temp_low
  6525                           
  6526                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6527  169A  1683               	bsf	3,5	;RP0=1, select bank1
  6528  169B  0821               	movf	(_table1^(0+128)+1),w
  6529  169C  39F0               	andlw	240
  6530  169D  00F3               	movwf	??_display_clock
  6531  169E  01F4               	clrf	??_display_clock+1
  6532  169F  0873               	movf	??_display_clock,w
  6533  16A0  00F5               	movwf	display_clock@i
  6534  16A1  0874               	movf	??_display_clock+1,w
  6535  16A2  00F6               	movwf	display_clock@i+1
  6536                           
  6537                           ;clock_src.c: 56:      i=i>>4;
  6538  16A3  0E75               	swapf	display_clock@i,w
  6539  16A4  390F               	andlw	15
  6540  16A5  00F5               	movwf	display_clock@i
  6541  16A6  0E76               	swapf	display_clock@i+1,w
  6542  16A7  39F0               	andlw	240
  6543  16A8  04F5               	iorwf	display_clock@i,f
  6544  16A9  0E76               	swapf	display_clock@i+1,w
  6545  16AA  390F               	andlw	15
  6546  16AB  00F6               	movwf	display_clock@i+1
  6547  16AC  30F0               	movlw	240
  6548  16AD  1DF6               	btfss	display_clock@i+1,3
  6549  16AE  3000               	movlw	0
  6550  16AF  04F6               	iorwf	display_clock@i+1,f
  6551                           
  6552                           ;clock_src.c: 57:      write_char(i + '0');
  6553  16B0  0875               	movf	display_clock@i,w
  6554  16B1  3E30               	addlw	48
  6555  16B2  160A  118A  2228  160A  118A  	fcall	_write_char
  6556                           
  6557                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6558  16B7  1683               	bsf	3,5	;RP0=1, select bank1
  6559  16B8  0821               	movf	(_table1^(0+128)+1),w
  6560  16B9  390F               	andlw	15
  6561  16BA  00F3               	movwf	??_display_clock
  6562  16BB  01F4               	clrf	??_display_clock+1
  6563  16BC  0873               	movf	??_display_clock,w
  6564  16BD  00F5               	movwf	display_clock@i
  6565  16BE  0874               	movf	??_display_clock+1,w
  6566  16BF  00F6               	movwf	display_clock@i+1
  6567                           
  6568                           ;clock_src.c: 61:      write_char(i + '0');
  6569  16C0  0875               	movf	display_clock@i,w
  6570  16C1  3E30               	addlw	48
  6571  16C2  160A  118A  2228  160A  118A  	fcall	_write_char
  6572                           
  6573                           ;clock_src.c: 62:      write_char(':');
  6574  16C7  303A               	movlw	58
  6575  16C8  160A  118A  2228  160A  118A  	fcall	_write_char
  6576                           
  6577                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6578  16CD  1683               	bsf	3,5	;RP0=1, select bank1
  6579  16CE  0820               	movf	_table1^(0+128),w
  6580  16CF  39F0               	andlw	240
  6581  16D0  00F3               	movwf	??_display_clock
  6582  16D1  01F4               	clrf	??_display_clock+1
  6583  16D2  0873               	movf	??_display_clock,w
  6584  16D3  00F5               	movwf	display_clock@i
  6585  16D4  0874               	movf	??_display_clock+1,w
  6586  16D5  00F6               	movwf	display_clock@i+1
  6587                           
  6588                           ;clock_src.c: 66:      i=i>>4;
  6589  16D6  0E75               	swapf	display_clock@i,w
  6590  16D7  390F               	andlw	15
  6591  16D8  00F5               	movwf	display_clock@i
  6592  16D9  0E76               	swapf	display_clock@i+1,w
  6593  16DA  39F0               	andlw	240
  6594  16DB  04F5               	iorwf	display_clock@i,f
  6595  16DC  0E76               	swapf	display_clock@i+1,w
  6596  16DD  390F               	andlw	15
  6597  16DE  00F6               	movwf	display_clock@i+1
  6598  16DF  30F0               	movlw	240
  6599  16E0  1DF6               	btfss	display_clock@i+1,3
  6600  16E1  3000               	movlw	0
  6601  16E2  04F6               	iorwf	display_clock@i+1,f
  6602                           
  6603                           ;clock_src.c: 67:      write_char(i + '0');
  6604  16E3  0875               	movf	display_clock@i,w
  6605  16E4  3E30               	addlw	48
  6606  16E5  160A  118A  2228  160A  118A  	fcall	_write_char
  6607                           
  6608                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6609  16EA  1683               	bsf	3,5	;RP0=1, select bank1
  6610  16EB  0820               	movf	_table1^(0+128),w
  6611  16EC  390F               	andlw	15
  6612  16ED  00F3               	movwf	??_display_clock
  6613  16EE  01F4               	clrf	??_display_clock+1
  6614  16EF  0873               	movf	??_display_clock,w
  6615  16F0  00F5               	movwf	display_clock@i
  6616  16F1  0874               	movf	??_display_clock+1,w
  6617  16F2  00F6               	movwf	display_clock@i+1
  6618                           
  6619                           ;clock_src.c: 71:      write_char(i + '0');
  6620  16F3  0875               	movf	display_clock@i,w
  6621  16F4  3E30               	addlw	48
  6622  16F5  160A  118A  2228   	fcall	_write_char
  6623  16F8  0008               	return
  6624  16F9                     __end_of_display_clock:	
  6625                           
  6626                           	psect	text28
  6627  0385                     __ptext28:	
  6628 ;; *************** function _date_settings *****************
  6629 ;; Defined at:
  6630 ;;		line 504 in file "Button_src.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      void 
  6637 ;; Registers used:
  6638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 300/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6644 ;;      Params:         0       0       0       0       0
  6645 ;;      Locals:         0       0       0       0       0
  6646 ;;      Temps:          0       3       0       0       0
  6647 ;;      Totals:         0       3       0       0       0
  6648 ;;Total ram usage:        3 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    3
  6651 ;; This function calls:
  6652 ;;		_button_delay
  6653 ;;		_incrementor
  6654 ;;		_modulus_func
  6655 ;;		_set_time
  6656 ;;		_time_date_delimiter
  6657 ;;		_time_date_hex_terminator
  6658 ;;		_write_char
  6659 ;;		_write_cmd
  6660 ;; This function is called by:
  6661 ;;		_main
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _date_settings
  6667  0385                     _date_settings:	
  6668                           
  6669                           ;Button_src.c: 505:  RC0 = 0;
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6673  0385  1283               	bcf	3,5	;RP0=0, select bank0
  6674  0386  1303               	bcf	3,6	;RP1=0, select bank0
  6675  0387  1007               	bcf	7,0	;volatile
  6676                           
  6677                           ;Button_src.c: 506:  RC1 = 1;
  6678  0388  1487               	bsf	7,1	;volatile
  6679                           
  6680                           ;Button_src.c: 507:  RC2 = 1;
  6681  0389  1507               	bsf	7,2	;volatile
  6682                           
  6683                           ;Button_src.c: 508:  RC3 = 1;
  6684  038A  1587               	bsf	7,3	;volatile
  6685                           
  6686                           ;Button_src.c: 509:   if (RC4 == 0){
  6687  038B  1A07               	btfsc	7,4	;volatile
  6688  038C  0008               	return
  6689                           
  6690                           ;Button_src.c: 510:       write_cmd(0x1);
  6691  038D  3001               	movlw	1
  6692  038E  160A  118A  223F  120A  118A  	fcall	_write_cmd
  6693  0393                     l811:	
  6694                           ;Button_src.c: 511:       for(;;){
  6695                           
  6696                           
  6697                           ;Button_src.c: 512:             write_cmd(0x80);
  6698  0393  3080               	movlw	128
  6699  0394  160A  118A  223F  120A  118A  	fcall	_write_cmd
  6700                           
  6701                           ;Button_src.c: 513:             write_char('D');
  6702  0399  3044               	movlw	68
  6703  039A  160A  118A  2228  120A  118A  	fcall	_write_char
  6704                           
  6705                           ;Button_src.c: 514:             write_char('a');
  6706  039F  3061               	movlw	97
  6707  03A0  160A  118A  2228  120A  118A  	fcall	_write_char
  6708                           
  6709                           ;Button_src.c: 515:             write_char('t');
  6710  03A5  3074               	movlw	116
  6711  03A6  160A  118A  2228  120A  118A  	fcall	_write_char
  6712                           
  6713                           ;Button_src.c: 516:             write_char('e');
  6714  03AB  3065               	movlw	101
  6715  03AC  160A  118A  2228  120A  118A  	fcall	_write_char
  6716                           
  6717                           ;Button_src.c: 517:             write_char('_');
  6718  03B1  305F               	movlw	95
  6719  03B2  160A  118A  2228  120A  118A  	fcall	_write_char
  6720                           
  6721                           ;Button_src.c: 518:             write_char('S');
  6722  03B7  3053               	movlw	83
  6723  03B8  160A  118A  2228  120A  118A  	fcall	_write_char
  6724                           
  6725                           ;Button_src.c: 519:             write_char('e');
  6726  03BD  3065               	movlw	101
  6727  03BE  160A  118A  2228  120A  118A  	fcall	_write_char
  6728                           
  6729                           ;Button_src.c: 520:             write_char('t');
  6730  03C3  3074               	movlw	116
  6731  03C4  160A  118A  2228  120A  118A  	fcall	_write_char
  6732                           
  6733                           ;Button_src.c: 521:             write_char('t');
  6734  03C9  3074               	movlw	116
  6735  03CA  160A  118A  2228  120A  118A  	fcall	_write_char
  6736                           
  6737                           ;Button_src.c: 522:             write_char('i');
  6738  03CF  3069               	movlw	105
  6739  03D0  160A  118A  2228  120A  118A  	fcall	_write_char
  6740                           
  6741                           ;Button_src.c: 523:             write_char('n');
  6742  03D5  306E               	movlw	110
  6743  03D6  160A  118A  2228  120A  118A  	fcall	_write_char
  6744                           
  6745                           ;Button_src.c: 524:             write_char('g');
  6746  03DB  3067               	movlw	103
  6747  03DC  160A  118A  2228  120A  118A  	fcall	_write_char
  6748                           
  6749                           ;Button_src.c: 525:             write_char('s');
  6750  03E1  3073               	movlw	115
  6751  03E2  160A  118A  2228  120A  118A  	fcall	_write_char
  6752                           
  6753                           ;Button_src.c: 526:             RC0 = 1;
  6754  03E7  1407               	bsf	7,0	;volatile
  6755                           
  6756                           ;Button_src.c: 527:             RC1 = 0;
  6757  03E8  1087               	bcf	7,1	;volatile
  6758                           
  6759                           ;Button_src.c: 528:             RC2 = 1;
  6760  03E9  1507               	bsf	7,2	;volatile
  6761                           
  6762                           ;Button_src.c: 529:             RC3 = 1;
  6763  03EA  1587               	bsf	7,3	;volatile
  6764                           
  6765                           ;Button_src.c: 530:             if(RC7 == 0 && b =='x'){
  6766  03EB  1B87               	btfsc	7,7	;volatile
  6767  03EC  2C5D               	goto	l4561
  6768  03ED  3078               	movlw	120
  6769  03EE  0649               	xorwf	_b,w
  6770  03EF  1D03               	btfss	3,2
  6771  03F0  2C5D               	goto	l4561
  6772                           
  6773                           ;Button_src.c: 531:                 if(stats == 1)
  6774  03F1  0326               	decf	_stats,w
  6775  03F2  0427               	iorwf	_stats+1,w
  6776  03F3  1D03               	btfss	3,2
  6777  03F4  2BF9               	goto	l813
  6778                           
  6779                           ;Button_src.c: 532:                     a++;
  6780  03F5  3001               	movlw	1
  6781  03F6  00E5               	movwf	??_date_settings
  6782  03F7  0865               	movf	??_date_settings,w
  6783  03F8  07CA               	addwf	_a,f
  6784  03F9                     l813:	
  6785                           
  6786                           ;Button_src.c: 533:                 if(stats == 0){
  6787  03F9  0826               	movf	_stats,w
  6788  03FA  0427               	iorwf	_stats+1,w
  6789  03FB  1D03               	btfss	3,2
  6790  03FC  2C01               	goto	l814
  6791                           
  6792                           ;Button_src.c: 534:                     stats = 1;
  6793  03FD  3001               	movlw	1
  6794  03FE  00A6               	movwf	_stats
  6795  03FF  3000               	movlw	0
  6796  0400  00A7               	movwf	_stats+1
  6797  0401                     l814:	
  6798                           ;Button_src.c: 535:                 }
  6799                           
  6800                           
  6801                           ;Button_src.c: 537:                     x++ ;
  6802  0401  3001               	movlw	1
  6803  0402  07B0               	addwf	_x,f
  6804  0403  1803               	skipnc
  6805  0404  0AB1               	incf	_x+1,f
  6806  0405  3000               	movlw	0
  6807  0406  07B1               	addwf	_x+1,f
  6808                           
  6809                           ;Button_src.c: 538:                     x = modulus_func(x,10);
  6810  0407  0831               	movf	_x+1,w
  6811  0408  00F8               	movwf	modulus_func@x+1
  6812  0409  0830               	movf	_x,w
  6813  040A  00F7               	movwf	modulus_func@x
  6814  040B  300A               	movlw	10
  6815  040C  00F9               	movwf	modulus_func@y
  6816  040D  3000               	movlw	0
  6817  040E  00FA               	movwf	modulus_func@y+1
  6818  040F  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  6819  0414  0878               	movf	?_modulus_func+1,w
  6820  0415  00B1               	movwf	_x+1
  6821  0416  0877               	movf	?_modulus_func,w
  6822  0417  00B0               	movwf	_x
  6823                           
  6824                           ;Button_src.c: 539:                      if (p == 1){
  6825  0418  0324               	decf	_p,w
  6826  0419  0425               	iorwf	_p+1,w
  6827  041A  1D03               	btfss	3,2
  6828  041B  2C35               	goto	l4547
  6829                           
  6830                           ;Button_src.c: 540:                         y = incrementor(y,x,'0');
  6831  041C  082F               	movf	_y+1,w
  6832  041D  00E1               	movwf	incrementor@upper_val+1
  6833  041E  082E               	movf	_y,w
  6834  041F  00E0               	movwf	incrementor@upper_val
  6835  0420  0831               	movf	_x+1,w
  6836  0421  00E3               	movwf	incrementor@lower_val+1
  6837  0422  0830               	movf	_x,w
  6838  0423  00E2               	movwf	incrementor@lower_val
  6839  0424  3030               	movlw	48
  6840  0425  00E5               	movwf	??_date_settings
  6841  0426  0865               	movf	??_date_settings,w
  6842  0427  00E4               	movwf	incrementor@z
  6843  0428  160A  118A  22FB  120A  118A  	fcall	_incrementor
  6844  042D  00E6               	movwf	??_date_settings+1
  6845  042E  01E7               	clrf	??_date_settings+2
  6846  042F  0866               	movf	??_date_settings+1,w
  6847  0430  00AE               	movwf	_y
  6848  0431  0867               	movf	??_date_settings+2,w
  6849  0432  00AF               	movwf	_y+1
  6850                           
  6851                           ;Button_src.c: 541:                         p = 0;
  6852  0433  01A4               	clrf	_p
  6853  0434  01A5               	clrf	_p+1
  6854  0435                     l4547:	
  6855                           
  6856                           ;Button_src.c: 543:                     if (x == 9){
  6857  0435  3009               	movlw	9
  6858  0436  0630               	xorwf	_x,w
  6859  0437  0431               	iorwf	_x+1,w
  6860  0438  1D03               	btfss	3,2
  6861  0439  2C3E               	goto	l4551
  6862                           
  6863                           ;Button_src.c: 544:                         p = 1;
  6864  043A  3001               	movlw	1
  6865  043B  00A4               	movwf	_p
  6866  043C  3000               	movlw	0
  6867  043D  00A5               	movwf	_p+1
  6868  043E                     l4551:	
  6869                           
  6870                           ;Button_src.c: 546:                     a = time_date_hex_terminator(a,'C');
  6871  043E  3043               	movlw	67
  6872  043F  00E5               	movwf	??_date_settings
  6873  0440  0865               	movf	??_date_settings,w
  6874  0441  00F0               	movwf	time_date_hex_terminator@limiter
  6875  0442  084A               	movf	_a,w
  6876  0443  160A  118A  2199  120A  118A  	fcall	_time_date_hex_terminator
  6877  0448  00E6               	movwf	??_date_settings+1
  6878  0449  0866               	movf	??_date_settings+1,w
  6879  044A  00CA               	movwf	_a
  6880                           
  6881                           ;Button_src.c: 548:                     if(y == 1 && x == 3){
  6882  044B  032E               	decf	_y,w
  6883  044C  042F               	iorwf	_y+1,w
  6884  044D  1D03               	btfss	3,2
  6885  044E  2C58               	goto	l4559
  6886  044F  3003               	movlw	3
  6887  0450  0630               	xorwf	_x,w
  6888  0451  0431               	iorwf	_x+1,w
  6889  0452  1D03               	btfss	3,2
  6890  0453  2C58               	goto	l4559
  6891                           
  6892                           ;Button_src.c: 549:                         x = 0;
  6893  0454  01B0               	clrf	_x
  6894  0455  01B1               	clrf	_x+1
  6895                           
  6896                           ;Button_src.c: 550:                         y = 0;
  6897  0456  01AE               	clrf	_y
  6898  0457  01AF               	clrf	_y+1
  6899  0458                     l4559:	
  6900                           
  6901                           ;Button_src.c: 552:                     button_delay();
  6902  0458  160A  118A  21EC  120A  118A  	fcall	_button_delay
  6903  045D                     l4561:	
  6904                           
  6905                           ;Button_src.c: 554:             if(RC7==0 && b == 'y'){
  6906  045D  1283               	bcf	3,5	;RP0=0, select bank0
  6907  045E  1303               	bcf	3,6	;RP1=0, select bank0
  6908  045F  1B87               	btfsc	7,7	;volatile
  6909  0460  2CE5               	goto	l4595
  6910  0461  3079               	movlw	121
  6911  0462  0649               	xorwf	_b,w
  6912  0463  1D03               	btfss	3,2
  6913  0464  2CE5               	goto	l4595
  6914                           
  6915                           ;Button_src.c: 555:                  if(stats == 1)
  6916  0465  0326               	decf	_stats,w
  6917  0466  0427               	iorwf	_stats+1,w
  6918  0467  1D03               	btfss	3,2
  6919  0468  2C6D               	goto	l819
  6920                           
  6921                           ;Button_src.c: 556:                     day_hex++;
  6922  0469  3001               	movlw	1
  6923  046A  00E5               	movwf	??_date_settings
  6924  046B  0865               	movf	??_date_settings,w
  6925  046C  07C7               	addwf	_day_hex,f
  6926  046D                     l819:	
  6927                           
  6928                           ;Button_src.c: 557:                 if(stats == 0){
  6929  046D  0826               	movf	_stats,w
  6930  046E  0427               	iorwf	_stats+1,w
  6931  046F  1D03               	btfss	3,2
  6932  0470  2C75               	goto	l820
  6933                           
  6934                           ;Button_src.c: 558:                     stats = 1;
  6935  0471  3001               	movlw	1
  6936  0472  00A6               	movwf	_stats
  6937  0473  3000               	movlw	0
  6938  0474  00A7               	movwf	_stats+1
  6939  0475                     l820:	
  6940                           ;Button_src.c: 559:                 }
  6941                           
  6942                           
  6943                           ;Button_src.c: 561:                     day_low++;
  6944  0475  3001               	movlw	1
  6945  0476  07AA               	addwf	_day_low,f
  6946  0477  1803               	skipnc
  6947  0478  0AAB               	incf	_day_low+1,f
  6948  0479  3000               	movlw	0
  6949  047A  07AB               	addwf	_day_low+1,f
  6950                           
  6951                           ;Button_src.c: 562:                     day_low = modulus_func(day_low,10);
  6952  047B  082B               	movf	_day_low+1,w
  6953  047C  00F8               	movwf	modulus_func@x+1
  6954  047D  082A               	movf	_day_low,w
  6955  047E  00F7               	movwf	modulus_func@x
  6956  047F  300A               	movlw	10
  6957  0480  00F9               	movwf	modulus_func@y
  6958  0481  3000               	movlw	0
  6959  0482  00FA               	movwf	modulus_func@y+1
  6960  0483  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  6961  0488  0878               	movf	?_modulus_func+1,w
  6962  0489  00AB               	movwf	_day_low+1
  6963  048A  0877               	movf	?_modulus_func,w
  6964  048B  00AA               	movwf	_day_low
  6965                           
  6966                           ;Button_src.c: 563:                     day_counter = modulus_func(day_low,8);
  6967  048C  082B               	movf	_day_low+1,w
  6968  048D  00F8               	movwf	modulus_func@x+1
  6969  048E  082A               	movf	_day_low,w
  6970  048F  00F7               	movwf	modulus_func@x
  6971  0490  3008               	movlw	8
  6972  0491  00F9               	movwf	modulus_func@y
  6973  0492  3000               	movlw	0
  6974  0493  00FA               	movwf	modulus_func@y+1
  6975  0494  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  6976  0499  0878               	movf	?_modulus_func+1,w
  6977  049A  1683               	bsf	3,5	;RP0=1, select bank1
  6978  049B  00A8               	movwf	(_day_counter+1)^(0+128)
  6979  049C  0877               	movf	?_modulus_func,w
  6980  049D  00A7               	movwf	_day_counter^(0+128)
  6981                           
  6982                           ;Button_src.c: 564:                     if (p == 1){
  6983  049E  1283               	bcf	3,5	;RP0=0, select bank0
  6984  049F  0324               	decf	_p,w
  6985  04A0  0425               	iorwf	_p+1,w
  6986  04A1  1D03               	btfss	3,2
  6987  04A2  2CBC               	goto	l4581
  6988                           
  6989                           ;Button_src.c: 565:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6990  04A3  0829               	movf	_day_high+1,w
  6991  04A4  00E1               	movwf	incrementor@upper_val+1
  6992  04A5  0828               	movf	_day_high,w
  6993  04A6  00E0               	movwf	incrementor@upper_val
  6994  04A7  082B               	movf	_day_low+1,w
  6995  04A8  00E3               	movwf	incrementor@lower_val+1
  6996  04A9  082A               	movf	_day_low,w
  6997  04AA  00E2               	movwf	incrementor@lower_val
  6998  04AB  3030               	movlw	48
  6999  04AC  00E5               	movwf	??_date_settings
  7000  04AD  0865               	movf	??_date_settings,w
  7001  04AE  00E4               	movwf	incrementor@z
  7002  04AF  160A  118A  22FB  120A  118A  	fcall	_incrementor
  7003  04B4  00E6               	movwf	??_date_settings+1
  7004  04B5  01E7               	clrf	??_date_settings+2
  7005  04B6  0866               	movf	??_date_settings+1,w
  7006  04B7  00A8               	movwf	_day_high
  7007  04B8  0867               	movf	??_date_settings+2,w
  7008  04B9  00A9               	movwf	_day_high+1
  7009                           
  7010                           ;Button_src.c: 566:                         p = 0;
  7011  04BA  01A4               	clrf	_p
  7012  04BB  01A5               	clrf	_p+1
  7013  04BC                     l4581:	
  7014                           
  7015                           ;Button_src.c: 568:                     if (day_low == 9){
  7016  04BC  3009               	movlw	9
  7017  04BD  062A               	xorwf	_day_low,w
  7018  04BE  042B               	iorwf	_day_low+1,w
  7019  04BF  1D03               	btfss	3,2
  7020  04C0  2CC5               	goto	l4585
  7021                           
  7022                           ;Button_src.c: 569:                         p = 1;
  7023  04C1  3001               	movlw	1
  7024  04C2  00A4               	movwf	_p
  7025  04C3  3000               	movlw	0
  7026  04C4  00A5               	movwf	_p+1
  7027  04C5                     l4585:	
  7028                           
  7029                           ;Button_src.c: 571:                     day_hex = time_date_hex_terminator(day_hex,'c');
  7030  04C5  3063               	movlw	99
  7031  04C6  00E5               	movwf	??_date_settings
  7032  04C7  0865               	movf	??_date_settings,w
  7033  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  7034  04C9  0847               	movf	_day_hex,w
  7035  04CA  160A  118A  2199  120A  118A  	fcall	_time_date_hex_terminator
  7036  04CF  00E6               	movwf	??_date_settings+1
  7037  04D0  0866               	movf	??_date_settings+1,w
  7038  04D1  00C7               	movwf	_day_hex
  7039                           
  7040                           ;Button_src.c: 572:                     if(day_high == 3 && day_low==2 ){
  7041  04D2  3003               	movlw	3
  7042  04D3  0628               	xorwf	_day_high,w
  7043  04D4  0429               	iorwf	_day_high+1,w
  7044  04D5  1D03               	btfss	3,2
  7045  04D6  2CE0               	goto	l4593
  7046  04D7  3002               	movlw	2
  7047  04D8  062A               	xorwf	_day_low,w
  7048  04D9  042B               	iorwf	_day_low+1,w
  7049  04DA  1D03               	btfss	3,2
  7050  04DB  2CE0               	goto	l4593
  7051                           
  7052                           ;Button_src.c: 573:                         day_high = 0;
  7053  04DC  01A8               	clrf	_day_high
  7054  04DD  01A9               	clrf	_day_high+1
  7055                           
  7056                           ;Button_src.c: 574:                         day_low = 0;
  7057  04DE  01AA               	clrf	_day_low
  7058  04DF  01AB               	clrf	_day_low+1
  7059  04E0                     l4593:	
  7060                           
  7061                           ;Button_src.c: 576:                     button_delay();
  7062  04E0  160A  118A  21EC  120A  118A  	fcall	_button_delay
  7063  04E5                     l4595:	
  7064                           
  7065                           ;Button_src.c: 578:             if(RC7==0 && b == 'z'){
  7066  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  7067  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  7068  04E7  1B87               	btfsc	7,7	;volatile
  7069  04E8  2D4C               	goto	l4627
  7070  04E9  307A               	movlw	122
  7071  04EA  0649               	xorwf	_b,w
  7072  04EB  1D03               	btfss	3,2
  7073  04EC  2D4C               	goto	l4627
  7074                           
  7075                           ;Button_src.c: 579:                 if(stats == 1)
  7076  04ED  0326               	decf	_stats,w
  7077  04EE  0427               	iorwf	_stats+1,w
  7078  04EF  1D03               	btfss	3,2
  7079  04F0  2CF5               	goto	l825
  7080                           
  7081                           ;Button_src.c: 580:                    c++;
  7082  04F1  3001               	movlw	1
  7083  04F2  00E5               	movwf	??_date_settings
  7084  04F3  0865               	movf	??_date_settings,w
  7085  04F4  07C8               	addwf	_c,f
  7086  04F5                     l825:	
  7087                           
  7088                           ;Button_src.c: 581:                 if(stats == 0){
  7089  04F5  0826               	movf	_stats,w
  7090  04F6  0427               	iorwf	_stats+1,w
  7091  04F7  1D03               	btfss	3,2
  7092  04F8  2CFD               	goto	l826
  7093                           
  7094                           ;Button_src.c: 582:                     stats = 1;
  7095  04F9  3001               	movlw	1
  7096  04FA  00A6               	movwf	_stats
  7097  04FB  3000               	movlw	0
  7098  04FC  00A7               	movwf	_stats+1
  7099  04FD                     l826:	
  7100                           ;Button_src.c: 583:                 }
  7101                           
  7102                           
  7103                           ;Button_src.c: 585:                     t++;
  7104  04FD  3001               	movlw	1
  7105  04FE  07B4               	addwf	_t,f
  7106  04FF  1803               	skipnc
  7107  0500  0AB5               	incf	_t+1,f
  7108  0501  3000               	movlw	0
  7109  0502  07B5               	addwf	_t+1,f
  7110                           
  7111                           ;Button_src.c: 586:                     t = modulus_func(t,10);
  7112  0503  0835               	movf	_t+1,w
  7113  0504  00F8               	movwf	modulus_func@x+1
  7114  0505  0834               	movf	_t,w
  7115  0506  00F7               	movwf	modulus_func@x
  7116  0507  300A               	movlw	10
  7117  0508  00F9               	movwf	modulus_func@y
  7118  0509  3000               	movlw	0
  7119  050A  00FA               	movwf	modulus_func@y+1
  7120  050B  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  7121  0510  0878               	movf	?_modulus_func+1,w
  7122  0511  00B5               	movwf	_t+1
  7123  0512  0877               	movf	?_modulus_func,w
  7124  0513  00B4               	movwf	_t
  7125                           
  7126                           ;Button_src.c: 587:                      if (p == 1){
  7127  0514  0324               	decf	_p,w
  7128  0515  0425               	iorwf	_p+1,w
  7129  0516  1D03               	btfss	3,2
  7130  0517  2D31               	goto	l4613
  7131                           
  7132                           ;Button_src.c: 588:                         w = incrementor(w,t,'0');
  7133  0518  0833               	movf	_w+1,w
  7134  0519  00E1               	movwf	incrementor@upper_val+1
  7135  051A  0832               	movf	_w,w
  7136  051B  00E0               	movwf	incrementor@upper_val
  7137  051C  0835               	movf	_t+1,w
  7138  051D  00E3               	movwf	incrementor@lower_val+1
  7139  051E  0834               	movf	_t,w
  7140  051F  00E2               	movwf	incrementor@lower_val
  7141  0520  3030               	movlw	48
  7142  0521  00E5               	movwf	??_date_settings
  7143  0522  0865               	movf	??_date_settings,w
  7144  0523  00E4               	movwf	incrementor@z
  7145  0524  160A  118A  22FB  120A  118A  	fcall	_incrementor
  7146  0529  00E6               	movwf	??_date_settings+1
  7147  052A  01E7               	clrf	??_date_settings+2
  7148  052B  0866               	movf	??_date_settings+1,w
  7149  052C  00B2               	movwf	_w
  7150  052D  0867               	movf	??_date_settings+2,w
  7151  052E  00B3               	movwf	_w+1
  7152                           
  7153                           ;Button_src.c: 589:                         p = 0;
  7154  052F  01A4               	clrf	_p
  7155  0530  01A5               	clrf	_p+1
  7156  0531                     l4613:	
  7157                           
  7158                           ;Button_src.c: 591:                     if (t == 9){
  7159  0531  3009               	movlw	9
  7160  0532  0634               	xorwf	_t,w
  7161  0533  0435               	iorwf	_t+1,w
  7162  0534  1D03               	btfss	3,2
  7163  0535  2D3A               	goto	l4617
  7164                           
  7165                           ;Button_src.c: 592:                         p = 1;
  7166  0536  3001               	movlw	1
  7167  0537  00A4               	movwf	_p
  7168  0538  3000               	movlw	0
  7169  0539  00A5               	movwf	_p+1
  7170  053A                     l4617:	
  7171                           
  7172                           ;Button_src.c: 595:                      if(c == (0x59 + 1)){
  7173  053A  305A               	movlw	90
  7174  053B  0648               	xorwf	_c,w
  7175  053C  1903               	btfsc	3,2
  7176                           
  7177                           ;Button_src.c: 596:                         c = 0x00;
  7178  053D  01C8               	clrf	_c
  7179                           
  7180                           ;Button_src.c: 598:                     if(w == 6){
  7181  053E  3006               	movlw	6
  7182  053F  0632               	xorwf	_w,w
  7183  0540  0433               	iorwf	_w+1,w
  7184  0541  1D03               	btfss	3,2
  7185  0542  2D47               	goto	l4625
  7186                           
  7187                           ;Button_src.c: 599:                         w = 0;
  7188  0543  01B2               	clrf	_w
  7189  0544  01B3               	clrf	_w+1
  7190                           
  7191                           ;Button_src.c: 600:                         t = 0;
  7192  0545  01B4               	clrf	_t
  7193  0546  01B5               	clrf	_t+1
  7194  0547                     l4625:	
  7195                           
  7196                           ;Button_src.c: 602:                     button_delay();
  7197  0547  160A  118A  21EC  120A  118A  	fcall	_button_delay
  7198  054C                     l4627:	
  7199                           
  7200                           ;Button_src.c: 609:                     a = time_date_delimiter(a,0x11,'9',1);
  7201  054C  3011               	movlw	17
  7202  054D  1283               	bcf	3,5	;RP0=0, select bank0
  7203  054E  1303               	bcf	3,6	;RP1=0, select bank0
  7204  054F  00E5               	movwf	??_date_settings
  7205  0550  0865               	movf	??_date_settings,w
  7206  0551  00F0               	movwf	time_date_delimiter@hex
  7207  0552  3039               	movlw	57
  7208  0553  00E6               	movwf	??_date_settings+1
  7209  0554  0866               	movf	??_date_settings+1,w
  7210  0555  00F1               	movwf	time_date_delimiter@limiter
  7211  0556  3001               	movlw	1
  7212  0557  00F2               	movwf	time_date_delimiter@type
  7213  0558  3000               	movlw	0
  7214  0559  00F3               	movwf	time_date_delimiter@type+1
  7215  055A  084A               	movf	_a,w
  7216  055B  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7217  0560  00E7               	movwf	??_date_settings+2
  7218  0561  0867               	movf	??_date_settings+2,w
  7219  0562  00CA               	movwf	_a
  7220                           
  7221                           ;Button_src.c: 611:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  7222  0563  3011               	movlw	17
  7223  0564  00E5               	movwf	??_date_settings
  7224  0565  0865               	movf	??_date_settings,w
  7225  0566  00F0               	movwf	time_date_delimiter@hex
  7226  0567  3039               	movlw	57
  7227  0568  00E6               	movwf	??_date_settings+1
  7228  0569  0866               	movf	??_date_settings+1,w
  7229  056A  00F1               	movwf	time_date_delimiter@limiter
  7230  056B  3002               	movlw	2
  7231  056C  00F2               	movwf	time_date_delimiter@type
  7232  056D  3000               	movlw	0
  7233  056E  00F3               	movwf	time_date_delimiter@type+1
  7234  056F  0847               	movf	_day_hex,w
  7235  0570  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7236  0575  00E7               	movwf	??_date_settings+2
  7237  0576  0867               	movf	??_date_settings+2,w
  7238  0577  00C7               	movwf	_day_hex
  7239                           
  7240                           ;Button_src.c: 612:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  7241  0578  3021               	movlw	33
  7242  0579  00E5               	movwf	??_date_settings
  7243  057A  0865               	movf	??_date_settings,w
  7244  057B  00F0               	movwf	time_date_delimiter@hex
  7245  057C  304A               	movlw	74
  7246  057D  00E6               	movwf	??_date_settings+1
  7247  057E  0866               	movf	??_date_settings+1,w
  7248  057F  00F1               	movwf	time_date_delimiter@limiter
  7249  0580  3002               	movlw	2
  7250  0581  00F2               	movwf	time_date_delimiter@type
  7251  0582  3000               	movlw	0
  7252  0583  00F3               	movwf	time_date_delimiter@type+1
  7253  0584  0847               	movf	_day_hex,w
  7254  0585  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7255  058A  00E7               	movwf	??_date_settings+2
  7256  058B  0867               	movf	??_date_settings+2,w
  7257  058C  00C7               	movwf	_day_hex
  7258                           
  7259                           ;Button_src.c: 613:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  7260  058D  3011               	movlw	17
  7261  058E  00E5               	movwf	??_date_settings
  7262  058F  0865               	movf	??_date_settings,w
  7263  0590  00F0               	movwf	time_date_delimiter@hex
  7264  0591  3039               	movlw	57
  7265  0592  00E6               	movwf	??_date_settings+1
  7266  0593  0866               	movf	??_date_settings+1,w
  7267  0594  00F1               	movwf	time_date_delimiter@limiter
  7268  0595  3002               	movlw	2
  7269  0596  00F2               	movwf	time_date_delimiter@type
  7270  0597  3000               	movlw	0
  7271  0598  00F3               	movwf	time_date_delimiter@type+1
  7272  0599  0847               	movf	_day_hex,w
  7273  059A  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7274  059F  00E7               	movwf	??_date_settings+2
  7275  05A0  0867               	movf	??_date_settings+2,w
  7276  05A1  00C7               	movwf	_day_hex
  7277                           
  7278                           ;Button_src.c: 614:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  7279  05A2  3021               	movlw	33
  7280  05A3  00E5               	movwf	??_date_settings
  7281  05A4  0865               	movf	??_date_settings,w
  7282  05A5  00F0               	movwf	time_date_delimiter@hex
  7283  05A6  304A               	movlw	74
  7284  05A7  00E6               	movwf	??_date_settings+1
  7285  05A8  0866               	movf	??_date_settings+1,w
  7286  05A9  00F1               	movwf	time_date_delimiter@limiter
  7287  05AA  3002               	movlw	2
  7288  05AB  00F2               	movwf	time_date_delimiter@type
  7289  05AC  3000               	movlw	0
  7290  05AD  00F3               	movwf	time_date_delimiter@type+1
  7291  05AE  0847               	movf	_day_hex,w
  7292  05AF  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7293  05B4  00E7               	movwf	??_date_settings+2
  7294  05B5  0867               	movf	??_date_settings+2,w
  7295  05B6  00C7               	movwf	_day_hex
  7296                           
  7297                           ;Button_src.c: 615:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  7298  05B7  3031               	movlw	49
  7299  05B8  00E5               	movwf	??_date_settings
  7300  05B9  0865               	movf	??_date_settings,w
  7301  05BA  00F0               	movwf	time_date_delimiter@hex
  7302  05BB  3059               	movlw	89
  7303  05BC  00E6               	movwf	??_date_settings+1
  7304  05BD  0866               	movf	??_date_settings+1,w
  7305  05BE  00F1               	movwf	time_date_delimiter@limiter
  7306  05BF  3002               	movlw	2
  7307  05C0  00F2               	movwf	time_date_delimiter@type
  7308  05C1  3000               	movlw	0
  7309  05C2  00F3               	movwf	time_date_delimiter@type+1
  7310  05C3  0847               	movf	_day_hex,w
  7311  05C4  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7312  05C9  00E7               	movwf	??_date_settings+2
  7313  05CA  0867               	movf	??_date_settings+2,w
  7314  05CB  00C7               	movwf	_day_hex
  7315                           
  7316                           ;Button_src.c: 617:                     c = time_date_delimiter(c,0x11,'9',3);
  7317  05CC  3011               	movlw	17
  7318  05CD  00E5               	movwf	??_date_settings
  7319  05CE  0865               	movf	??_date_settings,w
  7320  05CF  00F0               	movwf	time_date_delimiter@hex
  7321  05D0  3039               	movlw	57
  7322  05D1  00E6               	movwf	??_date_settings+1
  7323  05D2  0866               	movf	??_date_settings+1,w
  7324  05D3  00F1               	movwf	time_date_delimiter@limiter
  7325  05D4  3003               	movlw	3
  7326  05D5  00F2               	movwf	time_date_delimiter@type
  7327  05D6  3000               	movlw	0
  7328  05D7  00F3               	movwf	time_date_delimiter@type+1
  7329  05D8  0848               	movf	_c,w
  7330  05D9  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7331  05DE  00E7               	movwf	??_date_settings+2
  7332  05DF  0867               	movf	??_date_settings+2,w
  7333  05E0  00C8               	movwf	_c
  7334                           
  7335                           ;Button_src.c: 618:                     c = time_date_delimiter(c,0x21,'J',3);
  7336  05E1  3021               	movlw	33
  7337  05E2  00E5               	movwf	??_date_settings
  7338  05E3  0865               	movf	??_date_settings,w
  7339  05E4  00F0               	movwf	time_date_delimiter@hex
  7340  05E5  304A               	movlw	74
  7341  05E6  00E6               	movwf	??_date_settings+1
  7342  05E7  0866               	movf	??_date_settings+1,w
  7343  05E8  00F1               	movwf	time_date_delimiter@limiter
  7344  05E9  3003               	movlw	3
  7345  05EA  00F2               	movwf	time_date_delimiter@type
  7346  05EB  3000               	movlw	0
  7347  05EC  00F3               	movwf	time_date_delimiter@type+1
  7348  05ED  0848               	movf	_c,w
  7349  05EE  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7350  05F3  00E7               	movwf	??_date_settings+2
  7351  05F4  0867               	movf	??_date_settings+2,w
  7352  05F5  00C8               	movwf	_c
  7353                           
  7354                           ;Button_src.c: 619:                     c = time_date_delimiter(c,0x11,'9',3);
  7355  05F6  3011               	movlw	17
  7356  05F7  00E5               	movwf	??_date_settings
  7357  05F8  0865               	movf	??_date_settings,w
  7358  05F9  00F0               	movwf	time_date_delimiter@hex
  7359  05FA  3039               	movlw	57
  7360  05FB  00E6               	movwf	??_date_settings+1
  7361  05FC  0866               	movf	??_date_settings+1,w
  7362  05FD  00F1               	movwf	time_date_delimiter@limiter
  7363  05FE  3003               	movlw	3
  7364  05FF  00F2               	movwf	time_date_delimiter@type
  7365  0600  3000               	movlw	0
  7366  0601  00F3               	movwf	time_date_delimiter@type+1
  7367  0602  0848               	movf	_c,w
  7368  0603  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7369  0608  00E7               	movwf	??_date_settings+2
  7370  0609  0867               	movf	??_date_settings+2,w
  7371  060A  00C8               	movwf	_c
  7372                           
  7373                           ;Button_src.c: 620:                     c = time_date_delimiter(c,0x21,'J',3);
  7374  060B  3021               	movlw	33
  7375  060C  00E5               	movwf	??_date_settings
  7376  060D  0865               	movf	??_date_settings,w
  7377  060E  00F0               	movwf	time_date_delimiter@hex
  7378  060F  304A               	movlw	74
  7379  0610  00E6               	movwf	??_date_settings+1
  7380  0611  0866               	movf	??_date_settings+1,w
  7381  0612  00F1               	movwf	time_date_delimiter@limiter
  7382  0613  3003               	movlw	3
  7383  0614  00F2               	movwf	time_date_delimiter@type
  7384  0615  3000               	movlw	0
  7385  0616  00F3               	movwf	time_date_delimiter@type+1
  7386  0617  0848               	movf	_c,w
  7387  0618  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7388  061D  00E7               	movwf	??_date_settings+2
  7389  061E  0867               	movf	??_date_settings+2,w
  7390  061F  00C8               	movwf	_c
  7391                           
  7392                           ;Button_src.c: 621:                     c = time_date_delimiter(c,0x31,'Y',3);
  7393  0620  3031               	movlw	49
  7394  0621  00E5               	movwf	??_date_settings
  7395  0622  0865               	movf	??_date_settings,w
  7396  0623  00F0               	movwf	time_date_delimiter@hex
  7397  0624  3059               	movlw	89
  7398  0625  00E6               	movwf	??_date_settings+1
  7399  0626  0866               	movf	??_date_settings+1,w
  7400  0627  00F1               	movwf	time_date_delimiter@limiter
  7401  0628  3003               	movlw	3
  7402  0629  00F2               	movwf	time_date_delimiter@type
  7403  062A  3000               	movlw	0
  7404  062B  00F3               	movwf	time_date_delimiter@type+1
  7405  062C  0848               	movf	_c,w
  7406  062D  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7407  0632  00E7               	movwf	??_date_settings+2
  7408  0633  0867               	movf	??_date_settings+2,w
  7409  0634  00C8               	movwf	_c
  7410                           
  7411                           ;Button_src.c: 622:                     c = time_date_delimiter(c,0x41,'j',3);
  7412  0635  3041               	movlw	65
  7413  0636  00E5               	movwf	??_date_settings
  7414  0637  0865               	movf	??_date_settings,w
  7415  0638  00F0               	movwf	time_date_delimiter@hex
  7416  0639  306A               	movlw	106
  7417  063A  00E6               	movwf	??_date_settings+1
  7418  063B  0866               	movf	??_date_settings+1,w
  7419  063C  00F1               	movwf	time_date_delimiter@limiter
  7420  063D  3003               	movlw	3
  7421  063E  00F2               	movwf	time_date_delimiter@type
  7422  063F  3000               	movlw	0
  7423  0640  00F3               	movwf	time_date_delimiter@type+1
  7424  0641  0848               	movf	_c,w
  7425  0642  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7426  0647  00E7               	movwf	??_date_settings+2
  7427  0648  0867               	movf	??_date_settings+2,w
  7428  0649  00C8               	movwf	_c
  7429                           
  7430                           ;Button_src.c: 623:                     c = time_date_delimiter(c,0x51,'z',3);
  7431  064A  3051               	movlw	81
  7432  064B  00E5               	movwf	??_date_settings
  7433  064C  0865               	movf	??_date_settings,w
  7434  064D  00F0               	movwf	time_date_delimiter@hex
  7435  064E  307A               	movlw	122
  7436  064F  00E6               	movwf	??_date_settings+1
  7437  0650  0866               	movf	??_date_settings+1,w
  7438  0651  00F1               	movwf	time_date_delimiter@limiter
  7439  0652  3003               	movlw	3
  7440  0653  00F2               	movwf	time_date_delimiter@type
  7441  0654  3000               	movlw	0
  7442  0655  00F3               	movwf	time_date_delimiter@type+1
  7443  0656  0848               	movf	_c,w
  7444  0657  120A  158A  20A0  120A  118A  	fcall	_time_date_delimiter
  7445  065C  00E7               	movwf	??_date_settings+2
  7446  065D  0867               	movf	??_date_settings+2,w
  7447  065E  00C8               	movwf	_c
  7448                           
  7449                           ;Button_src.c: 625:               if(stats==0){
  7450  065F  0826               	movf	_stats,w
  7451  0660  0427               	iorwf	_stats+1,w
  7452  0661  1D03               	btfss	3,2
  7453  0662  2E71               	goto	l4657
  7454                           
  7455                           ;Button_src.c: 626:                   table[4] = prev_hex;
  7456  0663  0845               	movf	_prev_hex,w
  7457  0664  00E5               	movwf	??_date_settings
  7458  0665  0865               	movf	??_date_settings,w
  7459  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7460  0667  00BF               	movwf	(_table^(0+128)+4)
  7461                           
  7462                           ;Button_src.c: 627:                   table[6] = prev_hex_year;
  7463  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7464  0669  0843               	movf	_prev_hex_year,w
  7465  066A  00E5               	movwf	??_date_settings
  7466  066B  0865               	movf	??_date_settings,w
  7467  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7468  066D  00C1               	movwf	(_table^(0+128)+6)
  7469                           
  7470                           ;Button_src.c: 628:                   table[3] = prev_hex_day;
  7471  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7472  066F  0844               	movf	_prev_hex_day,w
  7473  0670  2E82               	goto	L3
  7474  0671                     l4657:	
  7475                           ;Button_src.c: 629:               }
  7476                           
  7477  0671  0326               	decf	_stats,w
  7478  0672  0427               	iorwf	_stats+1,w
  7479  0673  1D03               	btfss	3,2
  7480  0674  2E86               	goto	l4661
  7481                           
  7482                           ;Button_src.c: 631:               {;Button_src.c: 632:                  table[4]= a;
  7483  0675  084A               	movf	_a,w
  7484  0676  00E5               	movwf	??_date_settings
  7485  0677  0865               	movf	??_date_settings,w
  7486  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7487  0679  00BF               	movwf	(_table^(0+128)+4)
  7488                           
  7489                           ;Button_src.c: 633:                  table[6] = c;
  7490  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7491  067B  0848               	movf	_c,w
  7492  067C  00E5               	movwf	??_date_settings
  7493  067D  0865               	movf	??_date_settings,w
  7494  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7495  067F  00C1               	movwf	(_table^(0+128)+6)
  7496                           
  7497                           ;Button_src.c: 634:                  table[3] = day_hex;
  7498  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7499  0681  0847               	movf	_day_hex,w
  7500  0682                     L3:	
  7501  0682  00E5               	movwf	??_date_settings
  7502  0683  0865               	movf	??_date_settings,w
  7503  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7504  0685  00BE               	movwf	(_table^(0+128)+3)
  7505  0686                     l4661:	
  7506                           
  7507                           ;Button_src.c: 637:              write_cmd(0x88);
  7508  0686  3088               	movlw	136
  7509  0687  160A  118A  223F  120A  118A  	fcall	_write_cmd
  7510                           
  7511                           ;Button_src.c: 639:                   RC0 = 0;
  7512  068C  1007               	bcf	7,0	;volatile
  7513                           
  7514                           ;Button_src.c: 640:                   RC1 = 1;
  7515  068D  1487               	bsf	7,1	;volatile
  7516                           
  7517                           ;Button_src.c: 641:                   RC2 = 1;
  7518  068E  1507               	bsf	7,2	;volatile
  7519                           
  7520                           ;Button_src.c: 642:                   RC3 = 1;
  7521  068F  1587               	bsf	7,3	;volatile
  7522                           
  7523                           ;Button_src.c: 644:                     if (RC6 == 0 ){
  7524  0690  1B07               	btfsc	7,6	;volatile
  7525  0691  2EAB               	goto	l834
  7526                           
  7527                           ;Button_src.c: 645:                           set_time();
  7528  0692  160A  118A  2345  120A  118A  	fcall	_set_time
  7529                           
  7530                           ;Button_src.c: 646:                           a = 0x00;
  7531  0697  01CA               	clrf	_a
  7532                           
  7533                           ;Button_src.c: 647:                           c = 0x00;
  7534  0698  01C8               	clrf	_c
  7535                           
  7536                           ;Button_src.c: 648:                           day_hex = 0x00;
  7537  0699  01C7               	clrf	_day_hex
  7538                           
  7539                           ;Button_src.c: 649:                           day_high = 0;
  7540  069A  01A8               	clrf	_day_high
  7541  069B  01A9               	clrf	_day_high+1
  7542                           
  7543                           ;Button_src.c: 650:                           day_low = 0;
  7544  069C  01AA               	clrf	_day_low
  7545  069D  01AB               	clrf	_day_low+1
  7546                           
  7547                           ;Button_src.c: 651:                           x = 0;
  7548  069E  01B0               	clrf	_x
  7549  069F  01B1               	clrf	_x+1
  7550                           
  7551                           ;Button_src.c: 652:                           y = 0;
  7552  06A0  01AE               	clrf	_y
  7553  06A1  01AF               	clrf	_y+1
  7554                           
  7555                           ;Button_src.c: 653:                           w = 0;
  7556  06A2  01B2               	clrf	_w
  7557  06A3  01B3               	clrf	_w+1
  7558                           
  7559                           ;Button_src.c: 654:                           t = 0;
  7560  06A4  01B4               	clrf	_t
  7561  06A5  01B5               	clrf	_t+1
  7562                           
  7563                           ;Button_src.c: 655:                           write_cmd(0x1);
  7564  06A6  3001               	movlw	1
  7565  06A7  160A  118A  223F   	fcall	_write_cmd
  7566  06AA  0008               	return
  7567  06AB                     l834:	
  7568                           ;Button_src.c: 657:                             }
  7569                           
  7570                           
  7571                           ;Button_src.c: 658:                   RC0 = 0;
  7572  06AB  1007               	bcf	7,0	;volatile
  7573                           
  7574                           ;Button_src.c: 659:                   RC1 = 1;
  7575  06AC  1487               	bsf	7,1	;volatile
  7576                           
  7577                           ;Button_src.c: 660:                   RC2 = 1;
  7578  06AD  1507               	bsf	7,2	;volatile
  7579                           
  7580                           ;Button_src.c: 661:                   RC3 = 1;
  7581  06AE  1587               	bsf	7,3	;volatile
  7582                           
  7583                           ;Button_src.c: 662:                   z = modulus_func(z,3);
  7584  06AF  082D               	movf	_z+1,w
  7585  06B0  00F8               	movwf	modulus_func@x+1
  7586  06B1  082C               	movf	_z,w
  7587  06B2  00F7               	movwf	modulus_func@x
  7588  06B3  3003               	movlw	3
  7589  06B4  00F9               	movwf	modulus_func@y
  7590  06B5  3000               	movlw	0
  7591  06B6  00FA               	movwf	modulus_func@y+1
  7592  06B7  160A  118A  21B7  120A  118A  	fcall	_modulus_func
  7593  06BC  0878               	movf	?_modulus_func+1,w
  7594  06BD  00AD               	movwf	_z+1
  7595  06BE  0877               	movf	?_modulus_func,w
  7596  06BF  00AC               	movwf	_z
  7597                           
  7598                           ;Button_src.c: 663:                   if(RC4 == 0 && z ==0){
  7599  06C0  1A07               	btfsc	7,4	;volatile
  7600  06C1  2F01               	goto	l4709
  7601  06C2  082C               	movf	_z,w
  7602  06C3  042D               	iorwf	_z+1,w
  7603  06C4  1D03               	btfss	3,2
  7604  06C5  2F01               	goto	l4709
  7605                           
  7606                           ;Button_src.c: 664:                       write_cmd(0x90);
  7607  06C6  3090               	movlw	144
  7608  06C7  160A  118A  223F  120A  118A  	fcall	_write_cmd
  7609                           
  7610                           ;Button_src.c: 665:                       write_char('D');
  7611  06CC  3044               	movlw	68
  7612  06CD  160A  118A  2228  120A  118A  	fcall	_write_char
  7613                           
  7614                           ;Button_src.c: 666:                       write_char('a');
  7615  06D2  3061               	movlw	97
  7616  06D3  160A  118A  2228  120A  118A  	fcall	_write_char
  7617                           
  7618                           ;Button_src.c: 667:                       write_char('y');
  7619  06D8  3079               	movlw	121
  7620  06D9  160A  118A  2228  120A  118A  	fcall	_write_char
  7621                           
  7622                           ;Button_src.c: 668:                       write_char(':');
  7623  06DE  303A               	movlw	58
  7624  06DF  160A  118A  2228  120A  118A  	fcall	_write_char
  7625                           
  7626                           ;Button_src.c: 669:                       write_char(' ');
  7627  06E4  3020               	movlw	32
  7628  06E5  160A  118A  2228  120A  118A  	fcall	_write_char
  7629                           
  7630                           ;Button_src.c: 670:                       write_char(' ');
  7631  06EA  3020               	movlw	32
  7632  06EB  160A  118A  2228  120A  118A  	fcall	_write_char
  7633                           
  7634                           ;Button_src.c: 671:                       b = 'y';
  7635  06F0  3079               	movlw	121
  7636  06F1  00E5               	movwf	??_date_settings
  7637  06F2  0865               	movf	??_date_settings,w
  7638  06F3  00C9               	movwf	_b
  7639                           
  7640                           ;Button_src.c: 673:                       button_delay();
  7641  06F4  160A  118A  21EC  120A  118A  	fcall	_button_delay
  7642                           
  7643                           ;Button_src.c: 674:                       z++;
  7644  06F9  3001               	movlw	1
  7645  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7646  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7647  06FC  07AC               	addwf	_z,f
  7648  06FD  1803               	skipnc
  7649  06FE  0AAD               	incf	_z+1,f
  7650  06FF  3000               	movlw	0
  7651  0700  07AD               	addwf	_z+1,f
  7652  0701                     l4709:	
  7653                           
  7654                           ;Button_src.c: 676:                   RC0 = 0;
  7655  0701  1007               	bcf	7,0	;volatile
  7656                           
  7657                           ;Button_src.c: 677:                   RC1 = 1;
  7658  0702  1487               	bsf	7,1	;volatile
  7659                           
  7660                           ;Button_src.c: 678:                   RC2 = 1;
  7661  0703  1507               	bsf	7,2	;volatile
  7662                           
  7663                           ;Button_src.c: 679:                   RC3 = 1;
  7664  0704  1587               	bsf	7,3	;volatile
  7665                           
  7666                           ;Button_src.c: 680:                   if(RC4 == 0&& z ==1){
  7667  0705  1A07               	btfsc	7,4	;volatile
  7668  0706  2F44               	goto	l4739
  7669  0707  032C               	decf	_z,w
  7670  0708  042D               	iorwf	_z+1,w
  7671  0709  1D03               	btfss	3,2
  7672  070A  2F44               	goto	l4739
  7673                           
  7674                           ;Button_src.c: 681:                       z++;
  7675  070B  3001               	movlw	1
  7676  070C  07AC               	addwf	_z,f
  7677  070D  1803               	skipnc
  7678  070E  0AAD               	incf	_z+1,f
  7679  070F  3000               	movlw	0
  7680  0710  07AD               	addwf	_z+1,f
  7681                           
  7682                           ;Button_src.c: 682:                       button_delay();
  7683  0711  160A  118A  21EC  120A  118A  	fcall	_button_delay
  7684                           
  7685                           ;Button_src.c: 684:                       write_cmd(0x90);
  7686  0716  3090               	movlw	144
  7687  0717  160A  118A  223F  120A  118A  	fcall	_write_cmd
  7688                           
  7689                           ;Button_src.c: 685:                       write_char('M');
  7690  071C  304D               	movlw	77
  7691  071D  160A  118A  2228  120A  118A  	fcall	_write_char
  7692                           
  7693                           ;Button_src.c: 686:                       write_char('o');
  7694  0722  306F               	movlw	111
  7695  0723  160A  118A  2228  120A  118A  	fcall	_write_char
  7696                           
  7697                           ;Button_src.c: 687:                       write_char('n');
  7698  0728  306E               	movlw	110
  7699  0729  160A  118A  2228  120A  118A  	fcall	_write_char
  7700                           
  7701                           ;Button_src.c: 688:                       write_char('t');
  7702  072E  3074               	movlw	116
  7703  072F  160A  118A  2228  120A  118A  	fcall	_write_char
  7704                           
  7705                           ;Button_src.c: 689:                       write_char('h');
  7706  0734  3068               	movlw	104
  7707  0735  160A  118A  2228  120A  118A  	fcall	_write_char
  7708                           
  7709                           ;Button_src.c: 690:                       write_char(':');
  7710  073A  303A               	movlw	58
  7711  073B  160A  118A  2228  120A  118A  	fcall	_write_char
  7712                           
  7713                           ;Button_src.c: 691:                       b = 'x';
  7714  0740  3078               	movlw	120
  7715  0741  00E5               	movwf	??_date_settings
  7716  0742  0865               	movf	??_date_settings,w
  7717  0743  00C9               	movwf	_b
  7718  0744                     l4739:	
  7719                           
  7720                           ;Button_src.c: 694:                   RC0 = 0;
  7721  0744  1007               	bcf	7,0	;volatile
  7722                           
  7723                           ;Button_src.c: 695:                   RC1 = 1;
  7724  0745  1487               	bsf	7,1	;volatile
  7725                           
  7726                           ;Button_src.c: 696:                   RC2 = 1;
  7727  0746  1507               	bsf	7,2	;volatile
  7728                           
  7729                           ;Button_src.c: 697:                   RC3 = 1;
  7730  0747  1587               	bsf	7,3	;volatile
  7731                           
  7732                           ;Button_src.c: 698:                   if(RC4 == 0&& z ==2){
  7733  0748  1A07               	btfsc	7,4	;volatile
  7734  0749  2F8A               	goto	l4769
  7735  074A  3002               	movlw	2
  7736  074B  062C               	xorwf	_z,w
  7737  074C  042D               	iorwf	_z+1,w
  7738  074D  1D03               	btfss	3,2
  7739  074E  2F8A               	goto	l4769
  7740                           
  7741                           ;Button_src.c: 699:                       button_delay();
  7742  074F  160A  118A  21EC  120A  118A  	fcall	_button_delay
  7743                           
  7744                           ;Button_src.c: 700:                       z++;
  7745  0754  3001               	movlw	1
  7746  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7747  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7748  0757  07AC               	addwf	_z,f
  7749  0758  1803               	skipnc
  7750  0759  0AAD               	incf	_z+1,f
  7751  075A  3000               	movlw	0
  7752  075B  07AD               	addwf	_z+1,f
  7753                           
  7754                           ;Button_src.c: 702:                       write_cmd(0x90);
  7755  075C  3090               	movlw	144
  7756  075D  160A  118A  223F  120A  118A  	fcall	_write_cmd
  7757                           
  7758                           ;Button_src.c: 703:                       write_char('Y');
  7759  0762  3059               	movlw	89
  7760  0763  160A  118A  2228  120A  118A  	fcall	_write_char
  7761                           
  7762                           ;Button_src.c: 704:                       write_char('e');
  7763  0768  3065               	movlw	101
  7764  0769  160A  118A  2228  120A  118A  	fcall	_write_char
  7765                           
  7766                           ;Button_src.c: 705:                       write_char('a');
  7767  076E  3061               	movlw	97
  7768  076F  160A  118A  2228  120A  118A  	fcall	_write_char
  7769                           
  7770                           ;Button_src.c: 706:                       write_char('r');
  7771  0774  3072               	movlw	114
  7772  0775  160A  118A  2228  120A  118A  	fcall	_write_char
  7773                           
  7774                           ;Button_src.c: 707:                       write_char(':');
  7775  077A  303A               	movlw	58
  7776  077B  160A  118A  2228  120A  118A  	fcall	_write_char
  7777                           
  7778                           ;Button_src.c: 708:                       write_char(' ');
  7779  0780  3020               	movlw	32
  7780  0781  160A  118A  2228  120A  118A  	fcall	_write_char
  7781                           
  7782                           ;Button_src.c: 709:                       b = 'z';
  7783  0786  307A               	movlw	122
  7784  0787  00E5               	movwf	??_date_settings
  7785  0788  0865               	movf	??_date_settings,w
  7786  0789  00C9               	movwf	_b
  7787  078A                     l4769:	
  7788                           
  7789                           ;Button_src.c: 712:               write_cmd(0x88);
  7790  078A  3088               	movlw	136
  7791  078B  160A  118A  223F  120A  118A  	fcall	_write_cmd
  7792                           
  7793                           ;Button_src.c: 713:               write_char(day_high + '0');
  7794  0790  0828               	movf	_day_high,w
  7795  0791  3E30               	addlw	48
  7796  0792  160A  118A  2228  120A  118A  	fcall	_write_char
  7797                           
  7798                           ;Button_src.c: 714:               write_char(day_low + '0');
  7799  0797  082A               	movf	_day_low,w
  7800  0798  3E30               	addlw	48
  7801  0799  160A  118A  2228  120A  118A  	fcall	_write_char
  7802                           
  7803                           ;Button_src.c: 715:               write_char('/');
  7804  079E  302F               	movlw	47
  7805  079F  160A  118A  2228  120A  118A  	fcall	_write_char
  7806                           
  7807                           ;Button_src.c: 716:               write_char(y + '0');
  7808  07A4  082E               	movf	_y,w
  7809  07A5  3E30               	addlw	48
  7810  07A6  160A  118A  2228  120A  118A  	fcall	_write_char
  7811                           
  7812                           ;Button_src.c: 717:               write_char(x + '0');
  7813  07AB  0830               	movf	_x,w
  7814  07AC  3E30               	addlw	48
  7815  07AD  160A  118A  2228  120A  118A  	fcall	_write_char
  7816                           
  7817                           ;Button_src.c: 718:               write_char('/');
  7818  07B2  302F               	movlw	47
  7819  07B3  160A  118A  2228  120A  118A  	fcall	_write_char
  7820                           
  7821                           ;Button_src.c: 719:               write_char(w+ '0');
  7822  07B8  0832               	movf	_w,w
  7823  07B9  3E30               	addlw	48
  7824  07BA  160A  118A  2228  120A  118A  	fcall	_write_char
  7825                           
  7826                           ;Button_src.c: 720:               write_char(t+ '0');
  7827  07BF  0834               	movf	_t,w
  7828  07C0  3E30               	addlw	48
  7829  07C1  160A  118A  2228  120A  118A  	fcall	_write_char
  7830                           
  7831                           ;Button_src.c: 723:             RC0 = 0;
  7832  07C6  1007               	bcf	7,0	;volatile
  7833                           
  7834                           ;Button_src.c: 724:             RC1 = 1;
  7835  07C7  1487               	bsf	7,1	;volatile
  7836                           
  7837                           ;Button_src.c: 725:             RC2 = 1;
  7838  07C8  1507               	bsf	7,2	;volatile
  7839                           
  7840                           ;Button_src.c: 726:             RC3 = 1;
  7841  07C9  1587               	bsf	7,3	;volatile
  7842                           
  7843                           ;Button_src.c: 727:             if (RC7 == 0 ){
  7844  07CA  1B87               	btfsc	7,7	;volatile
  7845  07CB  2B93               	goto	l811
  7846                           
  7847                           ;Button_src.c: 728:             a = 0x00;
  7848  07CC  01CA               	clrf	_a
  7849                           
  7850                           ;Button_src.c: 729:             c = 0x00;
  7851  07CD  01C8               	clrf	_c
  7852                           
  7853                           ;Button_src.c: 730:             day_hex = 0x00;
  7854  07CE  01C7               	clrf	_day_hex
  7855                           
  7856                           ;Button_src.c: 731:             x = 0;
  7857  07CF  01B0               	clrf	_x
  7858  07D0  01B1               	clrf	_x+1
  7859                           
  7860                           ;Button_src.c: 732:             y = 0;
  7861  07D1  01AE               	clrf	_y
  7862  07D2  01AF               	clrf	_y+1
  7863                           
  7864                           ;Button_src.c: 733:             w = 0;
  7865  07D3  01B2               	clrf	_w
  7866  07D4  01B3               	clrf	_w+1
  7867                           
  7868                           ;Button_src.c: 734:             t = 0;
  7869  07D5  01B4               	clrf	_t
  7870  07D6  01B5               	clrf	_t+1
  7871                           
  7872                           ;Button_src.c: 735:             day_high = 0;
  7873  07D7  01A8               	clrf	_day_high
  7874  07D8  01A9               	clrf	_day_high+1
  7875                           
  7876                           ;Button_src.c: 736:             day_low = 0;
  7877  07D9  01AA               	clrf	_day_low
  7878  07DA  01AB               	clrf	_day_low+1
  7879                           
  7880                           ;Button_src.c: 737:             write_cmd(0x1);
  7881  07DB  3001               	movlw	1
  7882  07DC  160A  118A  223F   	fcall	_write_cmd
  7883                           
  7884                           ;Button_src.c: 738:             break;
  7885  07DF  0008               	return
  7886  07E0                     __end_of_date_settings:	
  7887                           
  7888                           	psect	text29
  7889  123F                     __ptext29:	
  7890 ;; *************** function _write_cmd *****************
  7891 ;; Defined at:
  7892 ;;		line 41 in file "LCD_src.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  x               1    wreg     unsigned char 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  x               1    2[COMMON] unsigned char 
  7897 ;;  i               2    0        int 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 300/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7907 ;;      Params:         0       0       0       0       0
  7908 ;;      Locals:         1       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0
  7910 ;;      Totals:         1       0       0       0       0
  7911 ;;Total ram usage:        1 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    1
  7914 ;; This function calls:
  7915 ;;		_delay_screen
  7916 ;; This function is called by:
  7917 ;;		_main
  7918 ;;		_lcd_init
  7919 ;;		_thermometer_threshhold_settings
  7920 ;;		_time_settings
  7921 ;;		_date_settings
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           
  7926                           ;psect for function _write_cmd
  7927  123F                     _write_cmd:	
  7928                           
  7929                           ;incstack = 0
  7930                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7931                           ;write_cmd@x stored from wreg
  7932  123F  00F2               	movwf	write_cmd@x
  7933                           
  7934                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7935  1240  1283               	bcf	3,5	;RP0=0, select bank0
  7936  1241  1303               	bcf	3,6	;RP1=0, select bank0
  7937  1242  1285               	bcf	5,5	;volatile
  7938                           
  7939                           ;LCD_src.c: 45:  RA4=0;
  7940  1243  1205               	bcf	5,4	;volatile
  7941                           
  7942                           ;LCD_src.c: 46:  RA3=0;
  7943  1244  1185               	bcf	5,3	;volatile
  7944                           
  7945                           ;LCD_src.c: 47:  delay_screen();
  7946  1245  160A  118A  21D8  160A  118A  	fcall	_delay_screen
  7947                           
  7948                           ;LCD_src.c: 48:  RA3=1;
  7949  124A  1283               	bcf	3,5	;RP0=0, select bank0
  7950  124B  1303               	bcf	3,6	;RP1=0, select bank0
  7951  124C  1585               	bsf	5,3	;volatile
  7952                           
  7953                           ;LCD_src.c: 49:  PORTD=x;
  7954  124D  0872               	movf	write_cmd@x,w
  7955  124E  0088               	movwf	8	;volatile
  7956                           
  7957                           ;LCD_src.c: 50:  delay_screen();
  7958  124F  160A  118A  21D8   	fcall	_delay_screen
  7959                           
  7960                           ;LCD_src.c: 51:  RA3=0;
  7961  1252  1283               	bcf	3,5	;RP0=0, select bank0
  7962  1253  1303               	bcf	3,6	;RP1=0, select bank0
  7963  1254  1185               	bcf	5,3	;volatile
  7964  1255  0008               	return
  7965  1256                     __end_of_write_cmd:	
  7966                           
  7967                           	psect	text30
  7968  1199                     __ptext30:	
  7969 ;; *************** function _time_date_hex_terminator *****************
  7970 ;; Defined at:
  7971 ;;		line 87 in file "math_src.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  val             1    wreg     unsigned char 
  7974 ;;  limiter         1    0[COMMON] unsigned char 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  val             1    3[COMMON] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      unsigned char 
  7979 ;; Registers used:
  7980 ;;		wreg, status,2
  7981 ;; Tracked objects:
  7982 ;;		On entry : 300/0
  7983 ;;		On exit  : 300/0
  7984 ;;		Unchanged: 300/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7986 ;;      Params:         1       0       0       0       0
  7987 ;;      Locals:         1       0       0       0       0
  7988 ;;      Temps:          2       0       0       0       0
  7989 ;;      Totals:         4       0       0       0       0
  7990 ;;Total ram usage:        4 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; This function calls:
  7993 ;;		Nothing
  7994 ;; This function is called by:
  7995 ;;		_time_settings
  7996 ;;		_date_settings
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function _time_date_hex_terminator
  8002  1199                     _time_date_hex_terminator:	
  8003                           
  8004                           ;incstack = 0
  8005                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  8006                           ;time_date_hex_terminator@val stored from wreg
  8007  1199  00F3               	movwf	time_date_hex_terminator@val
  8008                           
  8009                           ;math_src.c: 88:     if((val + '0') == limiter){
  8010  119A  0873               	movf	time_date_hex_terminator@val,w
  8011  119B  3E30               	addlw	48
  8012  119C  00F1               	movwf	??_time_date_hex_terminator
  8013  119D  3000               	movlw	0
  8014  119E  1803               	skipnc
  8015  119F  3001               	movlw	1
  8016  11A0  00F2               	movwf	??_time_date_hex_terminator+1
  8017  11A1  0870               	movf	time_date_hex_terminator@limiter,w
  8018  11A2  0671               	xorwf	??_time_date_hex_terminator,w
  8019  11A3  0472               	iorwf	??_time_date_hex_terminator+1,w
  8020  11A4  1903               	btfsc	3,2
  8021                           
  8022                           ;math_src.c: 89:     val = 0x00;
  8023  11A5  01F3               	clrf	time_date_hex_terminator@val
  8024                           
  8025                           ;math_src.c: 91:     return val;
  8026  11A6  0873               	movf	time_date_hex_terminator@val,w
  8027  11A7  0008               	return
  8028  11A8                     __end_of_time_date_hex_terminator:	
  8029                           
  8030                           	psect	text31
  8031  08A0                     __ptext31:	
  8032 ;; *************** function _time_date_delimiter *****************
  8033 ;; Defined at:
  8034 ;;		line 28 in file "math_src.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  val             1    wreg     unsigned char 
  8037 ;;  hex             1    0[COMMON] unsigned char 
  8038 ;;  limiter         1    1[COMMON] unsigned char 
  8039 ;;  type            2    2[COMMON] int 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  val             1    6[COMMON] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  1    wreg      unsigned char 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0
  8046 ;; Tracked objects:
  8047 ;;		On entry : 300/0
  8048 ;;		On exit  : 300/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8051 ;;      Params:         4       0       0       0       0
  8052 ;;      Locals:         1       0       0       0       0
  8053 ;;      Temps:          2       0       0       0       0
  8054 ;;      Totals:         7       0       0       0       0
  8055 ;;Total ram usage:        7 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; This function calls:
  8058 ;;		Nothing
  8059 ;; This function is called by:
  8060 ;;		_time_settings
  8061 ;;		_date_settings
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           
  8066                           ;psect for function _time_date_delimiter
  8067  08A0                     _time_date_delimiter:	
  8068                           
  8069                           ;incstack = 0
  8070                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  8071                           ;time_date_delimiter@val stored from wreg
  8072  08A0  00F6               	movwf	time_date_delimiter@val
  8073                           
  8074                           ;math_src.c: 29:     if((val + '0') == limiter){
  8075  08A1  0876               	movf	time_date_delimiter@val,w
  8076  08A2  3E30               	addlw	48
  8077  08A3  00F4               	movwf	??_time_date_delimiter
  8078  08A4  3000               	movlw	0
  8079  08A5  1803               	skipnc
  8080  08A6  3001               	movlw	1
  8081  08A7  00F5               	movwf	??_time_date_delimiter+1
  8082  08A8  0871               	movf	time_date_delimiter@limiter,w
  8083  08A9  0674               	xorwf	??_time_date_delimiter,w
  8084  08AA  0475               	iorwf	??_time_date_delimiter+1,w
  8085  08AB  1D03               	skipz
  8086  08AC  29F5               	goto	l3901
  8087                           
  8088                           ;math_src.c: 30:     val = hex;
  8089  08AD  0870               	movf	time_date_delimiter@hex,w
  8090  08AE  00F4               	movwf	??_time_date_delimiter
  8091  08AF  0874               	movf	??_time_date_delimiter,w
  8092  08B0  00F6               	movwf	time_date_delimiter@val
  8093                           
  8094                           ;math_src.c: 31:     stats=0;
  8095  08B1  01A6               	clrf	_stats
  8096  08B2  01A7               	clrf	_stats+1
  8097                           
  8098                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  8099  08B3  3039               	movlw	57
  8100  08B4  0671               	xorwf	time_date_delimiter@limiter,w
  8101  08B5  1D03               	btfss	3,2
  8102  08B6  28BF               	goto	l3755
  8103  08B7  0372               	decf	time_date_delimiter@type,w
  8104  08B8  0473               	iorwf	time_date_delimiter@type+1,w
  8105  08B9  1D03               	btfss	3,2
  8106  08BA  28BF               	goto	l3755
  8107                           
  8108                           ;math_src.c: 33:         prev_hex= 0x09;
  8109  08BB  3009               	movlw	9
  8110  08BC  00F4               	movwf	??_time_date_delimiter
  8111  08BD  0874               	movf	??_time_date_delimiter,w
  8112  08BE  00C5               	movwf	_prev_hex
  8113  08BF                     l3755:	
  8114                           
  8115                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  8116  08BF  304A               	movlw	74
  8117  08C0  0671               	xorwf	time_date_delimiter@limiter,w
  8118  08C1  1D03               	btfss	3,2
  8119  08C2  28CB               	goto	l3761
  8120  08C3  0372               	decf	time_date_delimiter@type,w
  8121  08C4  0473               	iorwf	time_date_delimiter@type+1,w
  8122  08C5  1D03               	btfss	3,2
  8123  08C6  28CB               	goto	l3761
  8124                           
  8125                           ;math_src.c: 35:         prev_hex = 0x19;
  8126  08C7  3019               	movlw	25
  8127  08C8  00F4               	movwf	??_time_date_delimiter
  8128  08C9  0874               	movf	??_time_date_delimiter,w
  8129  08CA  00C5               	movwf	_prev_hex
  8130  08CB                     l3761:	
  8131                           
  8132                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  8133  08CB  3059               	movlw	89
  8134  08CC  0671               	xorwf	time_date_delimiter@limiter,w
  8135  08CD  1D03               	btfss	3,2
  8136  08CE  28D7               	goto	l3767
  8137  08CF  0372               	decf	time_date_delimiter@type,w
  8138  08D0  0473               	iorwf	time_date_delimiter@type+1,w
  8139  08D1  1D03               	btfss	3,2
  8140  08D2  28D7               	goto	l3767
  8141                           
  8142                           ;math_src.c: 37:         prev_hex = 0x29;
  8143  08D3  3029               	movlw	41
  8144  08D4  00F4               	movwf	??_time_date_delimiter
  8145  08D5  0874               	movf	??_time_date_delimiter,w
  8146  08D6  00C5               	movwf	_prev_hex
  8147  08D7                     l3767:	
  8148                           
  8149                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  8150  08D7  306A               	movlw	106
  8151  08D8  0671               	xorwf	time_date_delimiter@limiter,w
  8152  08D9  1D03               	btfss	3,2
  8153  08DA  28E3               	goto	l3773
  8154  08DB  0372               	decf	time_date_delimiter@type,w
  8155  08DC  0473               	iorwf	time_date_delimiter@type+1,w
  8156  08DD  1D03               	btfss	3,2
  8157  08DE  28E3               	goto	l3773
  8158                           
  8159                           ;math_src.c: 39:         prev_hex =0x39;
  8160  08DF  3039               	movlw	57
  8161  08E0  00F4               	movwf	??_time_date_delimiter
  8162  08E1  0874               	movf	??_time_date_delimiter,w
  8163  08E2  00C5               	movwf	_prev_hex
  8164  08E3                     l3773:	
  8165                           
  8166                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  8167  08E3  307A               	movlw	122
  8168  08E4  0671               	xorwf	time_date_delimiter@limiter,w
  8169  08E5  1D03               	btfss	3,2
  8170  08E6  28EF               	goto	l3779
  8171  08E7  0372               	decf	time_date_delimiter@type,w
  8172  08E8  0473               	iorwf	time_date_delimiter@type+1,w
  8173  08E9  1D03               	btfss	3,2
  8174  08EA  28EF               	goto	l3779
  8175                           
  8176                           ;math_src.c: 41:         prev_hex = 0x49;
  8177  08EB  3049               	movlw	73
  8178  08EC  00F4               	movwf	??_time_date_delimiter
  8179  08ED  0874               	movf	??_time_date_delimiter,w
  8180  08EE  00C5               	movwf	_prev_hex
  8181  08EF                     l3779:	
  8182                           
  8183                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  8184  08EF  3039               	movlw	57
  8185  08F0  0671               	xorwf	time_date_delimiter@limiter,w
  8186  08F1  1D03               	btfss	3,2
  8187  08F2  28FC               	goto	l3785
  8188  08F3  3002               	movlw	2
  8189  08F4  0672               	xorwf	time_date_delimiter@type,w
  8190  08F5  0473               	iorwf	time_date_delimiter@type+1,w
  8191  08F6  1D03               	btfss	3,2
  8192  08F7  28FC               	goto	l3785
  8193                           
  8194                           ;math_src.c: 43:         prev_hex_day= 0x09;
  8195  08F8  3009               	movlw	9
  8196  08F9  00F4               	movwf	??_time_date_delimiter
  8197  08FA  0874               	movf	??_time_date_delimiter,w
  8198  08FB  00C4               	movwf	_prev_hex_day
  8199  08FC                     l3785:	
  8200                           
  8201                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  8202  08FC  304A               	movlw	74
  8203  08FD  0671               	xorwf	time_date_delimiter@limiter,w
  8204  08FE  1D03               	btfss	3,2
  8205  08FF  2909               	goto	l3791
  8206  0900  3002               	movlw	2
  8207  0901  0672               	xorwf	time_date_delimiter@type,w
  8208  0902  0473               	iorwf	time_date_delimiter@type+1,w
  8209  0903  1D03               	btfss	3,2
  8210  0904  2909               	goto	l3791
  8211                           
  8212                           ;math_src.c: 45:         prev_hex_day = 0x19;
  8213  0905  3019               	movlw	25
  8214  0906  00F4               	movwf	??_time_date_delimiter
  8215  0907  0874               	movf	??_time_date_delimiter,w
  8216  0908  00C4               	movwf	_prev_hex_day
  8217  0909                     l3791:	
  8218                           
  8219                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  8220  0909  3059               	movlw	89
  8221  090A  0671               	xorwf	time_date_delimiter@limiter,w
  8222  090B  1D03               	btfss	3,2
  8223  090C  2916               	goto	l3797
  8224  090D  3002               	movlw	2
  8225  090E  0672               	xorwf	time_date_delimiter@type,w
  8226  090F  0473               	iorwf	time_date_delimiter@type+1,w
  8227  0910  1D03               	btfss	3,2
  8228  0911  2916               	goto	l3797
  8229                           
  8230                           ;math_src.c: 47:         prev_hex_day = 0x29;
  8231  0912  3029               	movlw	41
  8232  0913  00F4               	movwf	??_time_date_delimiter
  8233  0914  0874               	movf	??_time_date_delimiter,w
  8234  0915  00C4               	movwf	_prev_hex_day
  8235  0916                     l3797:	
  8236                           
  8237                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  8238  0916  306A               	movlw	106
  8239  0917  0671               	xorwf	time_date_delimiter@limiter,w
  8240  0918  1D03               	btfss	3,2
  8241  0919  2923               	goto	l3803
  8242  091A  3002               	movlw	2
  8243  091B  0672               	xorwf	time_date_delimiter@type,w
  8244  091C  0473               	iorwf	time_date_delimiter@type+1,w
  8245  091D  1D03               	btfss	3,2
  8246  091E  2923               	goto	l3803
  8247                           
  8248                           ;math_src.c: 49:         prev_hex_day =0x39;
  8249  091F  3039               	movlw	57
  8250  0920  00F4               	movwf	??_time_date_delimiter
  8251  0921  0874               	movf	??_time_date_delimiter,w
  8252  0922  00C4               	movwf	_prev_hex_day
  8253  0923                     l3803:	
  8254                           
  8255                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  8256  0923  307A               	movlw	122
  8257  0924  0671               	xorwf	time_date_delimiter@limiter,w
  8258  0925  1D03               	btfss	3,2
  8259  0926  2930               	goto	l3809
  8260  0927  3002               	movlw	2
  8261  0928  0672               	xorwf	time_date_delimiter@type,w
  8262  0929  0473               	iorwf	time_date_delimiter@type+1,w
  8263  092A  1D03               	btfss	3,2
  8264  092B  2930               	goto	l3809
  8265                           
  8266                           ;math_src.c: 51:         prev_hex_day = 0x49;
  8267  092C  3049               	movlw	73
  8268  092D  00F4               	movwf	??_time_date_delimiter
  8269  092E  0874               	movf	??_time_date_delimiter,w
  8270  092F  00C4               	movwf	_prev_hex_day
  8271  0930                     l3809:	
  8272                           
  8273                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  8274  0930  3039               	movlw	57
  8275  0931  0671               	xorwf	time_date_delimiter@limiter,w
  8276  0932  1D03               	btfss	3,2
  8277  0933  293D               	goto	l3815
  8278  0934  3003               	movlw	3
  8279  0935  0672               	xorwf	time_date_delimiter@type,w
  8280  0936  0473               	iorwf	time_date_delimiter@type+1,w
  8281  0937  1D03               	btfss	3,2
  8282  0938  293D               	goto	l3815
  8283                           
  8284                           ;math_src.c: 53:         prev_hex_year= 0x09;
  8285  0939  3009               	movlw	9
  8286  093A  00F4               	movwf	??_time_date_delimiter
  8287  093B  0874               	movf	??_time_date_delimiter,w
  8288  093C  00C3               	movwf	_prev_hex_year
  8289  093D                     l3815:	
  8290                           
  8291                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  8292  093D  304A               	movlw	74
  8293  093E  0671               	xorwf	time_date_delimiter@limiter,w
  8294  093F  1D03               	btfss	3,2
  8295  0940  294A               	goto	l3821
  8296  0941  3003               	movlw	3
  8297  0942  0672               	xorwf	time_date_delimiter@type,w
  8298  0943  0473               	iorwf	time_date_delimiter@type+1,w
  8299  0944  1D03               	btfss	3,2
  8300  0945  294A               	goto	l3821
  8301                           
  8302                           ;math_src.c: 55:         prev_hex_year = 0x19;
  8303  0946  3019               	movlw	25
  8304  0947  00F4               	movwf	??_time_date_delimiter
  8305  0948  0874               	movf	??_time_date_delimiter,w
  8306  0949  00C3               	movwf	_prev_hex_year
  8307  094A                     l3821:	
  8308                           
  8309                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  8310  094A  3059               	movlw	89
  8311  094B  0671               	xorwf	time_date_delimiter@limiter,w
  8312  094C  1D03               	btfss	3,2
  8313  094D  2957               	goto	l3827
  8314  094E  3003               	movlw	3
  8315  094F  0672               	xorwf	time_date_delimiter@type,w
  8316  0950  0473               	iorwf	time_date_delimiter@type+1,w
  8317  0951  1D03               	btfss	3,2
  8318  0952  2957               	goto	l3827
  8319                           
  8320                           ;math_src.c: 57:         prev_hex_year = 0x29;
  8321  0953  3029               	movlw	41
  8322  0954  00F4               	movwf	??_time_date_delimiter
  8323  0955  0874               	movf	??_time_date_delimiter,w
  8324  0956  00C3               	movwf	_prev_hex_year
  8325  0957                     l3827:	
  8326                           
  8327                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  8328  0957  306A               	movlw	106
  8329  0958  0671               	xorwf	time_date_delimiter@limiter,w
  8330  0959  1D03               	btfss	3,2
  8331  095A  2964               	goto	l3833
  8332  095B  3003               	movlw	3
  8333  095C  0672               	xorwf	time_date_delimiter@type,w
  8334  095D  0473               	iorwf	time_date_delimiter@type+1,w
  8335  095E  1D03               	btfss	3,2
  8336  095F  2964               	goto	l3833
  8337                           
  8338                           ;math_src.c: 59:         prev_hex_year =0x39;
  8339  0960  3039               	movlw	57
  8340  0961  00F4               	movwf	??_time_date_delimiter
  8341  0962  0874               	movf	??_time_date_delimiter,w
  8342  0963  00C3               	movwf	_prev_hex_year
  8343  0964                     l3833:	
  8344                           
  8345                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8346  0964  307A               	movlw	122
  8347  0965  0671               	xorwf	time_date_delimiter@limiter,w
  8348  0966  1D03               	btfss	3,2
  8349  0967  2971               	goto	l3839
  8350  0968  3003               	movlw	3
  8351  0969  0672               	xorwf	time_date_delimiter@type,w
  8352  096A  0473               	iorwf	time_date_delimiter@type+1,w
  8353  096B  1D03               	btfss	3,2
  8354  096C  2971               	goto	l3839
  8355                           
  8356                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8357  096D  3049               	movlw	73
  8358  096E  00F4               	movwf	??_time_date_delimiter
  8359  096F  0874               	movf	??_time_date_delimiter,w
  8360  0970  00C3               	movwf	_prev_hex_year
  8361  0971                     l3839:	
  8362                           
  8363                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8364  0971  3039               	movlw	57
  8365  0972  0671               	xorwf	time_date_delimiter@limiter,w
  8366  0973  1D03               	btfss	3,2
  8367  0974  297E               	goto	l3845
  8368  0975  3004               	movlw	4
  8369  0976  0672               	xorwf	time_date_delimiter@type,w
  8370  0977  0473               	iorwf	time_date_delimiter@type+1,w
  8371  0978  1D03               	btfss	3,2
  8372  0979  297E               	goto	l3845
  8373                           
  8374                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8375  097A  3009               	movlw	9
  8376  097B  00F4               	movwf	??_time_date_delimiter
  8377  097C  0874               	movf	??_time_date_delimiter,w
  8378  097D  00C2               	movwf	_prev_hex_hours
  8379  097E                     l3845:	
  8380                           
  8381                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8382  097E  304A               	movlw	74
  8383  097F  0671               	xorwf	time_date_delimiter@limiter,w
  8384  0980  1D03               	btfss	3,2
  8385  0981  298B               	goto	l3851
  8386  0982  3004               	movlw	4
  8387  0983  0672               	xorwf	time_date_delimiter@type,w
  8388  0984  0473               	iorwf	time_date_delimiter@type+1,w
  8389  0985  1D03               	btfss	3,2
  8390  0986  298B               	goto	l3851
  8391                           
  8392                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8393  0987  3019               	movlw	25
  8394  0988  00F4               	movwf	??_time_date_delimiter
  8395  0989  0874               	movf	??_time_date_delimiter,w
  8396  098A  00C2               	movwf	_prev_hex_hours
  8397  098B                     l3851:	
  8398                           
  8399                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8400  098B  3059               	movlw	89
  8401  098C  0671               	xorwf	time_date_delimiter@limiter,w
  8402  098D  1D03               	btfss	3,2
  8403  098E  2998               	goto	l3857
  8404  098F  3004               	movlw	4
  8405  0990  0672               	xorwf	time_date_delimiter@type,w
  8406  0991  0473               	iorwf	time_date_delimiter@type+1,w
  8407  0992  1D03               	btfss	3,2
  8408  0993  2998               	goto	l3857
  8409                           
  8410                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8411  0994  3029               	movlw	41
  8412  0995  00F4               	movwf	??_time_date_delimiter
  8413  0996  0874               	movf	??_time_date_delimiter,w
  8414  0997  00C2               	movwf	_prev_hex_hours
  8415  0998                     l3857:	
  8416                           
  8417                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8418  0998  306A               	movlw	106
  8419  0999  0671               	xorwf	time_date_delimiter@limiter,w
  8420  099A  1D03               	btfss	3,2
  8421  099B  29A5               	goto	l3863
  8422  099C  3004               	movlw	4
  8423  099D  0672               	xorwf	time_date_delimiter@type,w
  8424  099E  0473               	iorwf	time_date_delimiter@type+1,w
  8425  099F  1D03               	btfss	3,2
  8426  09A0  29A5               	goto	l3863
  8427                           
  8428                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8429  09A1  3039               	movlw	57
  8430  09A2  00F4               	movwf	??_time_date_delimiter
  8431  09A3  0874               	movf	??_time_date_delimiter,w
  8432  09A4  00C2               	movwf	_prev_hex_hours
  8433  09A5                     l3863:	
  8434                           
  8435                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8436  09A5  307A               	movlw	122
  8437  09A6  0671               	xorwf	time_date_delimiter@limiter,w
  8438  09A7  1D03               	btfss	3,2
  8439  09A8  29B2               	goto	l3869
  8440  09A9  3004               	movlw	4
  8441  09AA  0672               	xorwf	time_date_delimiter@type,w
  8442  09AB  0473               	iorwf	time_date_delimiter@type+1,w
  8443  09AC  1D03               	btfss	3,2
  8444  09AD  29B2               	goto	l3869
  8445                           
  8446                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8447  09AE  3049               	movlw	73
  8448  09AF  00F4               	movwf	??_time_date_delimiter
  8449  09B0  0874               	movf	??_time_date_delimiter,w
  8450  09B1  00C2               	movwf	_prev_hex_hours
  8451  09B2                     l3869:	
  8452                           
  8453                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8454  09B2  3039               	movlw	57
  8455  09B3  0671               	xorwf	time_date_delimiter@limiter,w
  8456  09B4  1D03               	btfss	3,2
  8457  09B5  29BF               	goto	l3875
  8458  09B6  3005               	movlw	5
  8459  09B7  0672               	xorwf	time_date_delimiter@type,w
  8460  09B8  0473               	iorwf	time_date_delimiter@type+1,w
  8461  09B9  1D03               	btfss	3,2
  8462  09BA  29BF               	goto	l3875
  8463                           
  8464                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8465  09BB  3009               	movlw	9
  8466  09BC  00F4               	movwf	??_time_date_delimiter
  8467  09BD  0874               	movf	??_time_date_delimiter,w
  8468  09BE  00C1               	movwf	_prev_hex_mins
  8469  09BF                     l3875:	
  8470                           
  8471                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8472  09BF  304A               	movlw	74
  8473  09C0  0671               	xorwf	time_date_delimiter@limiter,w
  8474  09C1  1D03               	btfss	3,2
  8475  09C2  29CC               	goto	l3881
  8476  09C3  3005               	movlw	5
  8477  09C4  0672               	xorwf	time_date_delimiter@type,w
  8478  09C5  0473               	iorwf	time_date_delimiter@type+1,w
  8479  09C6  1D03               	btfss	3,2
  8480  09C7  29CC               	goto	l3881
  8481                           
  8482                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8483  09C8  3019               	movlw	25
  8484  09C9  00F4               	movwf	??_time_date_delimiter
  8485  09CA  0874               	movf	??_time_date_delimiter,w
  8486  09CB  00C1               	movwf	_prev_hex_mins
  8487  09CC                     l3881:	
  8488                           
  8489                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8490  09CC  3059               	movlw	89
  8491  09CD  0671               	xorwf	time_date_delimiter@limiter,w
  8492  09CE  1D03               	btfss	3,2
  8493  09CF  29D9               	goto	l3887
  8494  09D0  3005               	movlw	5
  8495  09D1  0672               	xorwf	time_date_delimiter@type,w
  8496  09D2  0473               	iorwf	time_date_delimiter@type+1,w
  8497  09D3  1D03               	btfss	3,2
  8498  09D4  29D9               	goto	l3887
  8499                           
  8500                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8501  09D5  3029               	movlw	41
  8502  09D6  00F4               	movwf	??_time_date_delimiter
  8503  09D7  0874               	movf	??_time_date_delimiter,w
  8504  09D8  00C1               	movwf	_prev_hex_mins
  8505  09D9                     l3887:	
  8506                           
  8507                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8508  09D9  306A               	movlw	106
  8509  09DA  0671               	xorwf	time_date_delimiter@limiter,w
  8510  09DB  1D03               	btfss	3,2
  8511  09DC  29E6               	goto	l3893
  8512  09DD  3005               	movlw	5
  8513  09DE  0672               	xorwf	time_date_delimiter@type,w
  8514  09DF  0473               	iorwf	time_date_delimiter@type+1,w
  8515  09E0  1D03               	btfss	3,2
  8516  09E1  29E6               	goto	l3893
  8517                           
  8518                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8519  09E2  3039               	movlw	57
  8520  09E3  00F4               	movwf	??_time_date_delimiter
  8521  09E4  0874               	movf	??_time_date_delimiter,w
  8522  09E5  00C1               	movwf	_prev_hex_mins
  8523  09E6                     l3893:	
  8524                           
  8525                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8526  09E6  307A               	movlw	122
  8527  09E7  0671               	xorwf	time_date_delimiter@limiter,w
  8528  09E8  1D03               	btfss	3,2
  8529  09E9  29F3               	goto	l3899
  8530  09EA  3005               	movlw	5
  8531  09EB  0672               	xorwf	time_date_delimiter@type,w
  8532  09EC  0473               	iorwf	time_date_delimiter@type+1,w
  8533  09ED  1D03               	btfss	3,2
  8534  09EE  29F3               	goto	l3899
  8535                           
  8536                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8537  09EF  3049               	movlw	73
  8538  09F0  00F4               	movwf	??_time_date_delimiter
  8539  09F1  0874               	movf	??_time_date_delimiter,w
  8540  09F2  00C1               	movwf	_prev_hex_mins
  8541  09F3                     l3899:	
  8542                           
  8543                           ;math_src.c: 82:     val--;
  8544  09F3  3001               	movlw	1
  8545  09F4  02F6               	subwf	time_date_delimiter@val,f
  8546  09F5                     l3901:	
  8547                           
  8548                           ;math_src.c: 84:     return val;
  8549  09F5  0876               	movf	time_date_delimiter@val,w
  8550  09F6  0008               	return
  8551  09F7                     __end_of_time_date_delimiter:	
  8552                           
  8553                           	psect	text32
  8554  1345                     __ptext32:	
  8555 ;; *************** function _set_time *****************
  8556 ;; Defined at:
  8557 ;;		line 12 in file "clock_src.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;		None
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;  i               2    5[COMMON] int 
  8562 ;; Return value:  Size  Location     Type
  8563 ;;                  1    wreg      void 
  8564 ;; Registers used:
  8565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8566 ;; Tracked objects:
  8567 ;;		On entry : 300/0
  8568 ;;		On exit  : 300/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8571 ;;      Params:         0       0       0       0       0
  8572 ;;      Locals:         2       0       0       0       0
  8573 ;;      Temps:          0       0       0       0       0
  8574 ;;      Totals:         2       0       0       0       0
  8575 ;;Total ram usage:        2 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    1
  8578 ;; This function calls:
  8579 ;;		_time_write_1
  8580 ;; This function is called by:
  8581 ;;		_main
  8582 ;;		_time_settings
  8583 ;;		_date_settings
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           
  8588                           ;psect for function _set_time
  8589  1345                     _set_time:	
  8590                           
  8591                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8592                           
  8593                           ;incstack = 0
  8594                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8595  1345  1686               	bsf	6,5	;volatile
  8596                           
  8597                           ;clock_src.c: 16:    time_write_1(0xbe);
  8598  1346  30BE               	movlw	190
  8599  1347  160A  118A  231F  160A  118A  	fcall	_time_write_1
  8600                           
  8601                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8602  134C  01F5               	clrf	set_time@i
  8603  134D  01F6               	clrf	set_time@i+1
  8604  134E                     l3541:	
  8605                           
  8606                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8607  134E  0875               	movf	set_time@i,w
  8608  134F  3EBB               	addlw	(low (_table| 0))& (0+255)
  8609  1350  0084               	movwf	4
  8610  1351  1383               	bcf	3,7	;select IRP bank1
  8611  1352  0800               	movf	0,w
  8612  1353  160A  118A  231F  160A  118A  	fcall	_time_write_1
  8613                           
  8614                           ;clock_src.c: 20:      }
  8615  1358  3001               	movlw	1
  8616  1359  07F5               	addwf	set_time@i,f
  8617  135A  1803               	skipnc
  8618  135B  0AF6               	incf	set_time@i+1,f
  8619  135C  3000               	movlw	0
  8620  135D  07F6               	addwf	set_time@i+1,f
  8621  135E  0876               	movf	set_time@i+1,w
  8622  135F  3A80               	xorlw	128
  8623  1360  00FF               	movwf	127
  8624  1361  3080               	movlw	128
  8625  1362  027F               	subwf	127,w
  8626  1363  1D03               	skipz
  8627  1364  2B67               	goto	u2365
  8628  1365  3008               	movlw	8
  8629  1366  0275               	subwf	set_time@i,w
  8630  1367                     u2365:	
  8631  1367  1C03               	skipc
  8632  1368  2B4E               	goto	l3541
  8633                           
  8634                           ;clock_src.c: 21:    RB5=0;
  8635  1369  1283               	bcf	3,5	;RP0=0, select bank0
  8636  136A  1303               	bcf	3,6	;RP1=0, select bank0
  8637  136B  1286               	bcf	6,5	;volatile
  8638  136C  0008               	return
  8639  136D                     __end_of_set_time:	
  8640                           
  8641                           	psect	text33
  8642  131F                     __ptext33:	
  8643 ;; *************** function _time_write_1 *****************
  8644 ;; Defined at:
  8645 ;;		line 114 in file "clock_src.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  time_tx         1    wreg     unsigned char 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;  time_tx         1    4[COMMON] unsigned char 
  8650 ;;  j               2    2[COMMON] int 
  8651 ;; Return value:  Size  Location     Type
  8652 ;;                  1    wreg      void 
  8653 ;; Registers used:
  8654 ;;		wreg, status,2, status,0, btemp+1
  8655 ;; Tracked objects:
  8656 ;;		On entry : 0/0
  8657 ;;		On exit  : 300/0
  8658 ;;		Unchanged: 0/0
  8659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8660 ;;      Params:         0       0       0       0       0
  8661 ;;      Locals:         3       0       0       0       0
  8662 ;;      Temps:          2       0       0       0       0
  8663 ;;      Totals:         5       0       0       0       0
  8664 ;;Total ram usage:        5 bytes
  8665 ;; Hardware stack levels used:    1
  8666 ;; This function calls:
  8667 ;;		Nothing
  8668 ;; This function is called by:
  8669 ;;		_ds1302_init
  8670 ;;		_set_time
  8671 ;;		_get_time
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _time_write_1
  8677  131F                     _time_write_1:	
  8678                           
  8679                           ;incstack = 0
  8680                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8681                           ;time_write_1@time_tx stored from wreg
  8682  131F  00F4               	movwf	time_write_1@time_tx
  8683                           
  8684                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8685  1320  01F2               	clrf	time_write_1@j
  8686  1321  01F3               	clrf	time_write_1@j+1
  8687  1322                     l488:	
  8688                           
  8689                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8690  1322  1283               	bcf	3,5	;RP0=0, select bank0
  8691  1323  1303               	bcf	3,6	;RP1=0, select bank0
  8692  1324  1206               	bcf	6,4	;volatile
  8693                           
  8694                           ;clock_src.c: 120:         RB0=0;
  8695  1325  1006               	bcf	6,0	;volatile
  8696                           
  8697                           ;clock_src.c: 121:         if(time_tx&0x01)
  8698  1326  1874               	btfsc	time_write_1@time_tx,0
  8699                           
  8700                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8701  1327  1606               	bsf	6,4	;volatile
  8702                           
  8703                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8704  1328  0874               	movf	time_write_1@time_tx,w
  8705  1329  00F0               	movwf	??_time_write_1
  8706  132A  1003               	clrc
  8707  132B  0C70               	rrf	??_time_write_1,w
  8708  132C  00F1               	movwf	??_time_write_1+1
  8709  132D  0871               	movf	??_time_write_1+1,w
  8710  132E  00F4               	movwf	time_write_1@time_tx
  8711                           
  8712                           ;clock_src.c: 126:         RB0=1;
  8713  132F  1406               	bsf	6,0	;volatile
  8714                           
  8715                           ;clock_src.c: 127:     }
  8716  1330  3001               	movlw	1
  8717  1331  07F2               	addwf	time_write_1@j,f
  8718  1332  1803               	skipnc
  8719  1333  0AF3               	incf	time_write_1@j+1,f
  8720  1334  3000               	movlw	0
  8721  1335  07F3               	addwf	time_write_1@j+1,f
  8722  1336  0873               	movf	time_write_1@j+1,w
  8723  1337  3A80               	xorlw	128
  8724  1338  00FF               	movwf	127
  8725  1339  3080               	movlw	128
  8726  133A  027F               	subwf	127,w
  8727  133B  1D03               	skipz
  8728  133C  2B3F               	goto	u2355
  8729  133D  3008               	movlw	8
  8730  133E  0272               	subwf	time_write_1@j,w
  8731  133F                     u2355:	
  8732  133F  1C03               	skipc
  8733  1340  2B22               	goto	l488
  8734                           
  8735                           ;clock_src.c: 128:       RB0=0;
  8736  1341  1283               	bcf	3,5	;RP0=0, select bank0
  8737  1342  1303               	bcf	3,6	;RP1=0, select bank0
  8738  1343  1006               	bcf	6,0	;volatile
  8739  1344  0008               	return
  8740  1345                     __end_of_time_write_1:	
  8741                           
  8742                           	psect	text34
  8743  12FB                     __ptext34:	
  8744 ;; *************** function _incrementor *****************
  8745 ;; Defined at:
  8746 ;;		line 10 in file "math_src.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;  upper_val       2    0[BANK0 ] int 
  8749 ;;  lower_val       2    2[BANK0 ] int 
  8750 ;;  z               1    4[BANK0 ] unsigned char 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;		None
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  1    wreg      unsigned char 
  8755 ;; Registers used:
  8756 ;;		wreg, status,2, status,0, pclath, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 300/0
  8759 ;;		On exit  : 300/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8762 ;;      Params:         0       5       0       0       0
  8763 ;;      Locals:         0       0       0       0       0
  8764 ;;      Temps:          2       0       0       0       0
  8765 ;;      Totals:         2       5       0       0       0
  8766 ;;Total ram usage:        7 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    2
  8769 ;; This function calls:
  8770 ;;		_modulus_func
  8771 ;; This function is called by:
  8772 ;;		_thermometer_threshhold_settings
  8773 ;;		_time_settings
  8774 ;;		_date_settings
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           
  8779                           ;psect for function _incrementor
  8780  12FB                     _incrementor:	
  8781                           
  8782                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8783                           
  8784                           ;incstack = 0
  8785                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8786  12FB  0862               	movf	incrementor@lower_val,w
  8787  12FC  3E30               	addlw	48
  8788  12FD  00FB               	movwf	??_incrementor
  8789  12FE  0863               	movf	incrementor@lower_val+1,w
  8790  12FF  1803               	skipnc
  8791  1300  3E01               	addlw	1
  8792  1301  3E00               	addlw	0
  8793  1302  00FC               	movwf	??_incrementor+1
  8794  1303  0864               	movf	incrementor@z,w
  8795  1304  067B               	xorwf	??_incrementor,w
  8796  1305  047C               	iorwf	??_incrementor+1,w
  8797  1306  1D03               	skipz
  8798  1307  2B1D               	goto	l3731
  8799                           
  8800                           ;math_src.c: 12:      upper_val++;
  8801  1308  3001               	movlw	1
  8802  1309  07E0               	addwf	incrementor@upper_val,f
  8803  130A  1803               	skipnc
  8804  130B  0AE1               	incf	incrementor@upper_val+1,f
  8805  130C  3000               	movlw	0
  8806  130D  07E1               	addwf	incrementor@upper_val+1,f
  8807                           
  8808                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8809  130E  0861               	movf	incrementor@upper_val+1,w
  8810  130F  00F8               	movwf	modulus_func@x+1
  8811  1310  0860               	movf	incrementor@upper_val,w
  8812  1311  00F7               	movwf	modulus_func@x
  8813  1312  300A               	movlw	10
  8814  1313  00F9               	movwf	modulus_func@y
  8815  1314  3000               	movlw	0
  8816  1315  00FA               	movwf	modulus_func@y+1
  8817  1316  160A  118A  21B7   	fcall	_modulus_func
  8818  1319  0878               	movf	?_modulus_func+1,w
  8819  131A  00E1               	movwf	incrementor@upper_val+1
  8820  131B  0877               	movf	?_modulus_func,w
  8821  131C  00E0               	movwf	incrementor@upper_val
  8822  131D                     l3731:	
  8823                           
  8824                           ;math_src.c: 15:      return upper_val;
  8825  131D  0860               	movf	incrementor@upper_val,w
  8826  131E  0008               	return
  8827  131F                     __end_of_incrementor:	
  8828                           
  8829                           	psect	text35
  8830  11B7                     __ptext35:	
  8831 ;; *************** function _modulus_func *****************
  8832 ;; Defined at:
  8833 ;;		line 5 in file "math_src.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  x               2    7[COMMON] int 
  8836 ;;  y               2    9[COMMON] int 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;		None
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  2    7[COMMON] int 
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0, pclath, cstack
  8843 ;; Tracked objects:
  8844 ;;		On entry : 300/0
  8845 ;;		On exit  : 300/0
  8846 ;;		Unchanged: 300/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8848 ;;      Params:         4       0       0       0       0
  8849 ;;      Locals:         0       0       0       0       0
  8850 ;;      Temps:          0       0       0       0       0
  8851 ;;      Totals:         4       0       0       0       0
  8852 ;;Total ram usage:        4 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    1
  8855 ;; This function calls:
  8856 ;;		___awmod
  8857 ;; This function is called by:
  8858 ;;		_main
  8859 ;;		_thermometer_threshhold_settings
  8860 ;;		_time_settings
  8861 ;;		_date_settings
  8862 ;;		_incrementor
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           
  8867                           ;psect for function _modulus_func
  8868  11B7                     _modulus_func:	
  8869                           
  8870                           ;math_src.c: 6:     x = x % y;
  8871                           
  8872                           ;incstack = 0
  8873                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8874  11B7  087A               	movf	modulus_func@y+1,w
  8875  11B8  00F1               	movwf	___awmod@divisor+1
  8876  11B9  0879               	movf	modulus_func@y,w
  8877  11BA  00F0               	movwf	___awmod@divisor
  8878  11BB  0878               	movf	modulus_func@x+1,w
  8879  11BC  00F3               	movwf	___awmod@dividend+1
  8880  11BD  0877               	movf	modulus_func@x,w
  8881  11BE  00F2               	movwf	___awmod@dividend
  8882  11BF  160A  118A  254B   	fcall	___awmod
  8883  11C2  0871               	movf	?___awmod+1,w
  8884  11C3  00F8               	movwf	modulus_func@x+1
  8885  11C4  0870               	movf	?___awmod,w
  8886  11C5  00F7               	movwf	modulus_func@x
  8887                           
  8888                           ;math_src.c: 7:     return x;
  8889  11C6  0008               	return
  8890  11C7                     __end_of_modulus_func:	
  8891                           
  8892                           	psect	text36
  8893  154B                     __ptext36:	
  8894 ;; *************** function ___awmod *****************
  8895 ;; Defined at:
  8896 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  divisor         2    0[COMMON] int 
  8899 ;;  dividend        2    2[COMMON] int 
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;  sign            1    6[COMMON] unsigned char 
  8902 ;;  counter         1    5[COMMON] unsigned char 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  2    0[COMMON] int 
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0
  8907 ;; Tracked objects:
  8908 ;;		On entry : 300/0
  8909 ;;		On exit  : 300/0
  8910 ;;		Unchanged: 300/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8912 ;;      Params:         4       0       0       0       0
  8913 ;;      Locals:         2       0       0       0       0
  8914 ;;      Temps:          1       0       0       0       0
  8915 ;;      Totals:         7       0       0       0       0
  8916 ;;Total ram usage:        7 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; This function calls:
  8919 ;;		Nothing
  8920 ;; This function is called by:
  8921 ;;		_modulus_func
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function ___awmod
  8927  154B                     ___awmod:	
  8928                           
  8929                           ;incstack = 0
  8930                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8931  154B  01F6               	clrf	___awmod@sign
  8932  154C  1FF3               	btfss	___awmod@dividend+1,7
  8933  154D  2D55               	goto	l3463
  8934  154E  09F2               	comf	___awmod@dividend,f
  8935  154F  09F3               	comf	___awmod@dividend+1,f
  8936  1550  0AF2               	incf	___awmod@dividend,f
  8937  1551  1903               	skipnz
  8938  1552  0AF3               	incf	___awmod@dividend+1,f
  8939  1553  01F6               	clrf	___awmod@sign
  8940  1554  0AF6               	incf	___awmod@sign,f
  8941  1555                     l3463:	
  8942  1555  1FF1               	btfss	___awmod@divisor+1,7
  8943  1556  2D5C               	goto	l3467
  8944  1557  09F0               	comf	___awmod@divisor,f
  8945  1558  09F1               	comf	___awmod@divisor+1,f
  8946  1559  0AF0               	incf	___awmod@divisor,f
  8947  155A  1903               	skipnz
  8948  155B  0AF1               	incf	___awmod@divisor+1,f
  8949  155C                     l3467:	
  8950  155C  0870               	movf	___awmod@divisor,w
  8951  155D  0471               	iorwf	___awmod@divisor+1,w
  8952  155E  1903               	btfsc	3,2
  8953  155F  2D89               	goto	l3485
  8954  1560  01F5               	clrf	___awmod@counter
  8955  1561  0AF5               	incf	___awmod@counter,f
  8956  1562                     l3475:	
  8957  1562  1BF1               	btfsc	___awmod@divisor+1,7
  8958  1563  2D70               	goto	l3477
  8959  1564  3001               	movlw	1
  8960  1565                     u2255:	
  8961  1565  1003               	clrc
  8962  1566  0DF0               	rlf	___awmod@divisor,f
  8963  1567  0DF1               	rlf	___awmod@divisor+1,f
  8964  1568  3EFF               	addlw	-1
  8965  1569  1D03               	skipz
  8966  156A  2D65               	goto	u2255
  8967  156B  3001               	movlw	1
  8968  156C  00F4               	movwf	??___awmod
  8969  156D  0874               	movf	??___awmod,w
  8970  156E  07F5               	addwf	___awmod@counter,f
  8971  156F  2D62               	goto	l3475
  8972  1570                     l3477:	
  8973  1570  0871               	movf	___awmod@divisor+1,w
  8974  1571  0273               	subwf	___awmod@dividend+1,w
  8975  1572  1D03               	skipz
  8976  1573  2D76               	goto	u2275
  8977  1574  0870               	movf	___awmod@divisor,w
  8978  1575  0272               	subwf	___awmod@dividend,w
  8979  1576                     u2275:	
  8980  1576  1C03               	skipc
  8981  1577  2D7E               	goto	l3481
  8982  1578  0870               	movf	___awmod@divisor,w
  8983  1579  02F2               	subwf	___awmod@dividend,f
  8984  157A  0871               	movf	___awmod@divisor+1,w
  8985  157B  1C03               	skipc
  8986  157C  03F3               	decf	___awmod@dividend+1,f
  8987  157D  02F3               	subwf	___awmod@dividend+1,f
  8988  157E                     l3481:	
  8989  157E  3001               	movlw	1
  8990  157F                     u2285:	
  8991  157F  1003               	clrc
  8992  1580  0CF1               	rrf	___awmod@divisor+1,f
  8993  1581  0CF0               	rrf	___awmod@divisor,f
  8994  1582  3EFF               	addlw	-1
  8995  1583  1D03               	skipz
  8996  1584  2D7F               	goto	u2285
  8997  1585  3001               	movlw	1
  8998  1586  02F5               	subwf	___awmod@counter,f
  8999  1587  1D03               	btfss	3,2
  9000  1588  2D70               	goto	l3477
  9001  1589                     l3485:	
  9002  1589  0876               	movf	___awmod@sign,w
  9003  158A  1903               	btfsc	3,2
  9004  158B  2D91               	goto	l3489
  9005  158C  09F2               	comf	___awmod@dividend,f
  9006  158D  09F3               	comf	___awmod@dividend+1,f
  9007  158E  0AF2               	incf	___awmod@dividend,f
  9008  158F  1903               	skipnz
  9009  1590  0AF3               	incf	___awmod@dividend+1,f
  9010  1591                     l3489:	
  9011  1591  0873               	movf	___awmod@dividend+1,w
  9012  1592  00F1               	movwf	?___awmod+1
  9013  1593  0872               	movf	___awmod@dividend,w
  9014  1594  00F0               	movwf	?___awmod
  9015  1595  0008               	return
  9016  1596                     __end_of___awmod:	
  9017                           
  9018                           	psect	text37
  9019  11EC                     __ptext37:	
  9020 ;; *************** function _button_delay *****************
  9021 ;; Defined at:
  9022 ;;		line 744 in file "Button_src.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  i               2    0[COMMON] int 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      void 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, btemp+1
  9031 ;; Tracked objects:
  9032 ;;		On entry : 300/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9036 ;;      Params:         0       0       0       0       0
  9037 ;;      Locals:         2       0       0       0       0
  9038 ;;      Temps:          0       0       0       0       0
  9039 ;;      Totals:         2       0       0       0       0
  9040 ;;Total ram usage:        2 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; This function calls:
  9043 ;;		Nothing
  9044 ;; This function is called by:
  9045 ;;		_set_beep_threshhold
  9046 ;;		_thermometer_threshhold_settings
  9047 ;;		_time_settings
  9048 ;;		_date_settings
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function _button_delay
  9054  11EC                     _button_delay:	
  9055                           
  9056                           ;Button_src.c: 745:     for(int i=0;i<10000;i++);
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  9060  11EC  01F0               	clrf	button_delay@i
  9061  11ED  01F1               	clrf	button_delay@i+1
  9062  11EE                     l3721:	
  9063  11EE  3001               	movlw	1
  9064  11EF  07F0               	addwf	button_delay@i,f
  9065  11F0  1803               	skipnc
  9066  11F1  0AF1               	incf	button_delay@i+1,f
  9067  11F2  3000               	movlw	0
  9068  11F3  07F1               	addwf	button_delay@i+1,f
  9069  11F4  0871               	movf	button_delay@i+1,w
  9070  11F5  3A80               	xorlw	128
  9071  11F6  00FF               	movwf	127
  9072  11F7  30A7               	movlw	167
  9073  11F8  027F               	subwf	127,w
  9074  11F9  1D03               	skipz
  9075  11FA  29FD               	goto	u2465
  9076  11FB  3010               	movlw	16
  9077  11FC  0270               	subwf	button_delay@i,w
  9078  11FD                     u2465:	
  9079  11FD  1803               	btfsc	3,0
  9080  11FE  0008               	return
  9081  11FF  29EE               	goto	l3721
  9082  1200                     __end_of_button_delay:	
  9083                           
  9084                           	psect	text38
  9085  15ED                     __ptext38:	
  9086 ;; *************** function _cold_threshold *****************
  9087 ;; Defined at:
  9088 ;;		line 22 in file "threshold_src.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  upper_val       2    3[COMMON] int 
  9091 ;;  lower_val       2    5[COMMON] int 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  1    wreg      unsigned char 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 200/100
  9100 ;;		On exit  : 300/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9103 ;;      Params:         4       0       0       0       0
  9104 ;;      Locals:         0       0       0       0       0
  9105 ;;      Temps:          1       0       0       0       0
  9106 ;;      Totals:         5       0       0       0       0
  9107 ;;Total ram usage:        5 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    2
  9110 ;; This function calls:
  9111 ;;		_write_char
  9112 ;; This function is called by:
  9113 ;;		_main
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           
  9118                           ;psect for function _cold_threshold
  9119  15ED                     _cold_threshold:	
  9120                           
  9121                           ;threshold_src.c: 23:      if(shi <= upper_val && (ge <= lower_val || ge >= lower_val)){
  9122                           
  9123                           ;incstack = 0
  9124                           ; Regs used in _cold_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9125  15ED  0874               	movf	cold_threshold@upper_val+1,w
  9126  15EE  3A80               	xorlw	128
  9127  15EF  00F7               	movwf	??_cold_threshold
  9128  15F0  3080               	movlw	128
  9129  15F1  0277               	subwf	??_cold_threshold,w
  9130  15F2  1D03               	skipz
  9131  15F3  2DF7               	goto	u4235
  9132  15F4  1283               	bcf	3,5	;RP0=0, select bank0
  9133  15F5  085B               	movf	_shi,w
  9134  15F6  0273               	subwf	cold_threshold@upper_val,w
  9135  15F7                     u4235:	
  9136  15F7  1C03               	skipc
  9137  15F8  2E50               	goto	l1000
  9138  15F9  0876               	movf	cold_threshold@lower_val+1,w
  9139  15FA  3A80               	xorlw	128
  9140  15FB  00F7               	movwf	??_cold_threshold
  9141  15FC  3080               	movlw	128
  9142  15FD  0277               	subwf	??_cold_threshold,w
  9143  15FE  1D03               	skipz
  9144  15FF  2E04               	goto	u4245
  9145  1600  1283               	bcf	3,5	;RP0=0, select bank0
  9146  1601  1303               	bcf	3,6	;RP1=0, select bank0
  9147  1602  085A               	movf	_ge,w
  9148  1603  0275               	subwf	cold_threshold@lower_val,w
  9149  1604                     u4245:	
  9150  1604  1803               	skipnc
  9151  1605  2E11               	goto	l5041
  9152  1606  0876               	movf	cold_threshold@lower_val+1,w
  9153  1607  3A80               	xorlw	128
  9154  1608  3C80               	sublw	128
  9155  1609  1D03               	skipz
  9156  160A  2E0F               	goto	u4255
  9157  160B  0875               	movf	cold_threshold@lower_val,w
  9158  160C  1283               	bcf	3,5	;RP0=0, select bank0
  9159  160D  1303               	bcf	3,6	;RP1=0, select bank0
  9160  160E  025A               	subwf	_ge,w
  9161  160F                     u4255:	
  9162  160F  1C03               	skipc
  9163  1610  2E50               	goto	l1000
  9164  1611                     l5041:	
  9165                           
  9166                           ;threshold_src.c: 24:     cold_counter ++;
  9167  1611  3001               	movlw	1
  9168  1612  1683               	bsf	3,5	;RP0=1, select bank1
  9169  1613  1303               	bcf	3,6	;RP1=0, select bank1
  9170  1614  07B7               	addwf	_cold_counter^(0+128),f
  9171  1615  1803               	skipnc
  9172  1616  0AB8               	incf	(_cold_counter+1)^(0+128),f
  9173  1617  3000               	movlw	0
  9174  1618  07B8               	addwf	(_cold_counter+1)^(0+128),f
  9175                           
  9176                           ;threshold_src.c: 25:     heater_state = '1';
  9177  1619  3031               	movlw	49
  9178  161A  00F7               	movwf	??_cold_threshold
  9179  161B  0877               	movf	??_cold_threshold,w
  9180  161C  1283               	bcf	3,5	;RP0=0, select bank0
  9181  161D  00D1               	movwf	_heater_state
  9182                           
  9183                           ;threshold_src.c: 26:     cooler_state = '0';
  9184  161E  3030               	movlw	48
  9185  161F  00F7               	movwf	??_cold_threshold
  9186  1620  0877               	movf	??_cold_threshold,w
  9187  1621  00D0               	movwf	_cooler_state
  9188                           
  9189                           ;threshold_src.c: 27:     write_char('C');
  9190  1622  3043               	movlw	67
  9191  1623  160A  118A  2228  160A  118A  	fcall	_write_char
  9192                           
  9193                           ;threshold_src.c: 28:     write_char('O');
  9194  1628  304F               	movlw	79
  9195  1629  160A  118A  2228  160A  118A  	fcall	_write_char
  9196                           
  9197                           ;threshold_src.c: 29:     write_char('L');
  9198  162E  304C               	movlw	76
  9199  162F  160A  118A  2228  160A  118A  	fcall	_write_char
  9200                           
  9201                           ;threshold_src.c: 30:     write_char('D');
  9202  1634  3044               	movlw	68
  9203  1635  160A  118A  2228  160A  118A  	fcall	_write_char
  9204                           
  9205                           ;threshold_src.c: 31:     if(cold_counter > 1000){
  9206  163A  3003               	movlw	3
  9207  163B  1683               	bsf	3,5	;RP0=1, select bank1
  9208  163C  0238               	subwf	(_cold_counter+1)^(0+128),w
  9209  163D  30E9               	movlw	233
  9210  163E  1903               	skipnz
  9211  163F  0237               	subwf	_cold_counter^(0+128),w
  9212  1640  1C03               	skipc
  9213  1641  2E50               	goto	l1000
  9214                           
  9215                           ;threshold_src.c: 32:         heater_state = '-';
  9216  1642  302D               	movlw	45
  9217  1643  00F7               	movwf	??_cold_threshold
  9218  1644  0877               	movf	??_cold_threshold,w
  9219  1645  1283               	bcf	3,5	;RP0=0, select bank0
  9220  1646  00D1               	movwf	_heater_state
  9221                           
  9222                           ;threshold_src.c: 33:         if(count == 2)
  9223  1647  3002               	movlw	2
  9224  1648  063C               	xorwf	_count,w
  9225  1649  043D               	iorwf	_count+1,w
  9226  164A  1D03               	btfss	3,2
  9227  164B  2E50               	goto	l1000
  9228                           
  9229                           ;threshold_src.c: 34:         buzzer_watcher = 'w';
  9230  164C  3077               	movlw	119
  9231  164D  00F7               	movwf	??_cold_threshold
  9232  164E  0877               	movf	??_cold_threshold,w
  9233  164F  00D3               	movwf	_buzzer_watcher
  9234  1650                     l1000:	
  9235                           ;threshold_src.c: 36:     }
  9236                           
  9237                           
  9238                           ;threshold_src.c: 37:     return buzzer_watcher;
  9239  1650  1283               	bcf	3,5	;RP0=0, select bank0
  9240  1651  1303               	bcf	3,6	;RP1=0, select bank0
  9241  1652  0853               	movf	_buzzer_watcher,w
  9242  1653  0008               	return
  9243  1654                     __end_of_cold_threshold:	
  9244                           
  9245                           	psect	text39
  9246  1228                     __ptext39:	
  9247 ;; *************** function _write_char *****************
  9248 ;; Defined at:
  9249 ;;		line 28 in file "LCD_src.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;  x               1    wreg     unsigned char 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  x               1    2[COMMON] unsigned char 
  9254 ;;  i               2    0        int 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  1    wreg      void 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 300/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9264 ;;      Params:         0       0       0       0       0
  9265 ;;      Locals:         1       0       0       0       0
  9266 ;;      Temps:          0       0       0       0       0
  9267 ;;      Totals:         1       0       0       0       0
  9268 ;;Total ram usage:        1 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    1
  9271 ;; This function calls:
  9272 ;;		_delay_screen
  9273 ;; This function is called by:
  9274 ;;		_main
  9275 ;;		_display_temp
  9276 ;;		_display_clock
  9277 ;;		_display_date
  9278 ;;		_thermometer_threshhold_settings
  9279 ;;		_time_settings
  9280 ;;		_date_settings
  9281 ;;		_set_upper_threshold
  9282 ;;		_cold_threshold
  9283 ;;		_set_lower_threshold
  9284 ;;		_reset_alarm
  9285 ;;		_display_day
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           
  9290                           ;psect for function _write_char
  9291  1228                     _write_char:	
  9292                           
  9293                           ;incstack = 0
  9294                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9295                           ;write_char@x stored from wreg
  9296  1228  00F2               	movwf	write_char@x
  9297                           
  9298                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  9299  1229  1283               	bcf	3,5	;RP0=0, select bank0
  9300  122A  1303               	bcf	3,6	;RP1=0, select bank0
  9301  122B  1685               	bsf	5,5	;volatile
  9302                           
  9303                           ;LCD_src.c: 32:  RA4=0;
  9304  122C  1205               	bcf	5,4	;volatile
  9305                           
  9306                           ;LCD_src.c: 33:  RA3=0;
  9307  122D  1185               	bcf	5,3	;volatile
  9308                           
  9309                           ;LCD_src.c: 34:  delay_screen();
  9310  122E  160A  118A  21D8  160A  118A  	fcall	_delay_screen
  9311                           
  9312                           ;LCD_src.c: 35:  RA3=1;
  9313  1233  1283               	bcf	3,5	;RP0=0, select bank0
  9314  1234  1303               	bcf	3,6	;RP1=0, select bank0
  9315  1235  1585               	bsf	5,3	;volatile
  9316                           
  9317                           ;LCD_src.c: 36:  PORTD= x;
  9318  1236  0872               	movf	write_char@x,w
  9319  1237  0088               	movwf	8	;volatile
  9320                           
  9321                           ;LCD_src.c: 37:  delay_screen();
  9322  1238  160A  118A  21D8   	fcall	_delay_screen
  9323                           
  9324                           ;LCD_src.c: 38:  RA3=0;
  9325  123B  1283               	bcf	3,5	;RP0=0, select bank0
  9326  123C  1303               	bcf	3,6	;RP1=0, select bank0
  9327  123D  1185               	bcf	5,3	;volatile
  9328  123E  0008               	return
  9329  123F                     __end_of_write_char:	
  9330                           
  9331                           	psect	text40
  9332  11D8                     __ptext40:	
  9333 ;; *************** function _delay_screen *****************
  9334 ;; Defined at:
  9335 ;;		line 70 in file "LCD_src.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  i               2    0[COMMON] int 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, btemp+1
  9344 ;; Tracked objects:
  9345 ;;		On entry : 300/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9349 ;;      Params:         0       0       0       0       0
  9350 ;;      Locals:         2       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0
  9352 ;;      Totals:         2       0       0       0       0
  9353 ;;Total ram usage:        2 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; This function calls:
  9356 ;;		Nothing
  9357 ;; This function is called by:
  9358 ;;		_lcd_init
  9359 ;;		_write_char
  9360 ;;		_write_cmd
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _delay_screen
  9366  11D8                     _delay_screen:	
  9367                           
  9368                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  9372  11D8  01F0               	clrf	delay_screen@i
  9373  11D9  01F1               	clrf	delay_screen@i+1
  9374  11DA                     l3505:	
  9375  11DA  3001               	movlw	1
  9376  11DB  07F0               	addwf	delay_screen@i,f
  9377  11DC  1803               	skipnc
  9378  11DD  0AF1               	incf	delay_screen@i+1,f
  9379  11DE  3000               	movlw	0
  9380  11DF  07F1               	addwf	delay_screen@i+1,f
  9381  11E0  0871               	movf	delay_screen@i+1,w
  9382  11E1  3A80               	xorlw	128
  9383  11E2  00FF               	movwf	127
  9384  11E3  3080               	movlw	128
  9385  11E4  027F               	subwf	127,w
  9386  11E5  1D03               	skipz
  9387  11E6  29E9               	goto	u2315
  9388  11E7  3005               	movlw	5
  9389  11E8  0270               	subwf	delay_screen@i,w
  9390  11E9                     u2315:	
  9391  11E9  1803               	btfsc	3,0
  9392  11EA  0008               	return
  9393  11EB  29DA               	goto	l3505
  9394  11EC                     __end_of_delay_screen:	
  9395  007E                     btemp	set	126	;btemp
  9396  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      79
    BANK1            80      0      35
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod
    _cold_threshold->_write_char
    _write_char->_delay_screen

Critical Paths under _main in BANK0

    _main->_date_settings
    _main->_thermometer_threshhold_settings
    _main->_time_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   46338
                                              8 BANK0      7     7      0
                     _cold_threshold
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   14370
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      3     3      0    8166
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   14370
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    5063
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2921
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _cold_threshold                                       5     1      4     438
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cold_threshold
     _write_char
       _delay_screen
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      23       7       43.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      80      12        0.0%
ABS                  0      0      80       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Dec 12 20:37:08 2019

                                       _a 004A                                         _b 0049  
                                       _c 0048                                         _p 0024  
                                       _t 0034                                         _w 0032  
                                       _x 0030                                         _y 002E  
                                       _z 002C                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005C                                        _TZ 005D  
                                      _ge 005A                                        _wd 003E  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 1256  
                           ?_display_date 0070                                       l173 0B76  
                                     l373 118C                                       l802 0293  
                                     l811 0393                                       l820 0475  
                                     l813 03F9                                       l805 0320  
                                     l814 0401                                       l494 13CC  
                                     l488 1322                                       l825 04F5  
                                     l761 0BF1                                       l834 06AB  
                                     l826 04FD                                       l819 046D  
                                     l793 016D                                       l785 0092  
                                     l778 0FED                                       l794 0175  
                                     l787 00F8                                       l788 0100  
                                     l994 15E9                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005E  
                           ?_display_temp 0070                                       _TLV 005F  
                                     _shi 005B                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0065  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1000 1650                                      l1008 1547  
                                    l1375 12D2                                      l4111 1378  
                                    l4123 080E                                      l5101 0015  
                                    l5111 0043                                      l5103 0021  
                                    l3511 1190                                      l4231 0C85  
                                    l3505 11DA                                      l5041 1611  
                                    l4161 165F                                      l4313 0D7A  
                                    l4225 0C77                                      l5123 0076  
                                    l5115 0054                                      l5107 0032  
                                    l4091 17A2                                      l4083 178E  
                                    l4315 0D7F                                      l3541 134E  
                                    l3613 14AA                                      l4309 0D71  
                                    l4253 0CC5                                      l4229 0C80  
                                    l3463 1555                                      l5119 0065  
                                    l4087 1798                                      l4079 1784  
                                    l3721 11EE                                      l3481 157E  
                                    l3705 13DD                                      l4425 0F21  
                                    l4281 0D1B                                      l4257 0CCE  
                                    l5217 0B2F                                      l3475 1562  
                                    l3467 155C                                      l3731 131D  
                                    l3803 0923                                      l3635 142D  
                                    l5091 126F                                      l4259 0CD3  
                                    l5155 0A36                                      l3477 1570  
                                    l3485 1589                                      l3821 094A  
                                    l3901 09F5                                      l4613 0531  
                                    l3581 1484                                      l5077 13C4  
                                    l4357 0DF5                                      l4285 0D24  
                                    l5229 0BB0                                      l3815 093D  
                                    l4551 043E                                      l3583 1485  
                                    l4375 0E5B                                      l4287 0D29  
                                    l3489 1591                                      l3833 0964  
                                    l3809 0930                                      l3761 08CB  
                                    l4625 0547                                      l4617 053A  
                                    l4561 045D                                      l3585 145E  
                                    l3593 1495                                      l4393 0EBF  
                                    l3851 098B                                      l3827 0957  
                                    l3755 08BF                                      l4627 054C  
                                    l4547 0435                                      l3915 129B  
                                    l3845 097E                                      l3773 08E3  
                                    l4709 0701                                      l4661 0686  
                                    l4581 04BC                                      l3917 12A4  
                                    l3863 09A5                                      l3839 0971  
                                    l3791 0909                                      l3767 08D7  
                                    l4559 0458                                      l3927 12B3  
                                    l3935 12BB                                      l3687 1202  
                                    l4831 0134                                      l3881 09CC  
                                    l3857 0998                                      l3785 08FC  
                                    l4657 0671                                      l4593 04E0  
                                    l4585 04C5                                      l3875 09BF  
                                    l3779 08EF                                      l4739 0744  
                                    l4595 04E5                                      l4843 0158  
                                    l4835 013D                                      l3893 09E6  
                                    l3869 09B2                                      l3797 0916  
                                    l3965 14F2                                      l3957 14CE  
                                    l3981 13FC                                      l4941 02E3  
                                    l4845 015D                                      l3887 09D9  
                                    l3959 14DC                                      l3983 140A  
                                    l3991 1423                                      l4863 01A9  
                                    l4769 078A                                      l3969 14FD  
                          ?_display_clock 0070                                      l3899 09F3  
                                    l3987 1418                                      l4883 01D6  
                                    l4875 01BF                                      l4867 01B2  
                                    l4877 01C4                                      l4887 01E5  
                                    u3105 14DD                                      u2315 11E9  
                                    u3115 14E9                                      u3045 12BE  
                                    u3125 14F3                                      u3205 173C  
                                    u2255 1565                                      u3215 1747  
                                    u3225 1754                                      u2275 1576  
                                    u2355 133F                                      u3155 13FF  
                                    u2435 1211                                      u2285 157F  
                                    u2365 1367                                      u3085 14D1  
                                    u4205 15A8                                      u3175 1410  
                                    u2455 13ED                                      u2465 11FD  
                                    u3185 1419                                      u4235 15F7  
                                    u3275 1393                                      u4245 1604  
                                    u4255 160F                                      u4175 150B  
                                    u4185 1518                                      u4425 0BC5  
                                    u4195 159D               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 09F7  
                                    _init 117B                                      _var1 004F  
                                    _var2 004E                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 0060  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 12B5  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1596  
                         __end_of___lbmod 12D8                      __end_of_delay_screen 11EC  
                         __end_of___lwdiv 1502                           __end_of___lwmod 1428  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 003C                                     _table 00BB  
                                   _stats 0026                                     main@i 006D  
                          write_byte@temp 0076                       _set_lower_threshold 1502  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                        ??_cold_threshold 0077                           __initialization 07E0  
                            __end_of_main 0BE5                              __end_of_init 1183  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0068  
                                  ??_init 0070                      incrementor@lower_val 0062  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0060  
                        __end_of_lcd_init 12FB                          __end_of_get_temp 1800  
                        __end_of_get_time 1399                                    _baifen 0058  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 1200                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00AD  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 11B7                       _set_upper_threshold 1596  
                                  _table1 00A0                           ___awmod@divisor 0070  
                                  _shifen 0059                                    _wanfen 0056  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 136D  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 08A0                      __end_of_display_temp 1294  
                          __pcstackCOMMON 0070                              __pidataBANK1 0005  
                   __size_of_delay_screen 0014                   cold_threshold@lower_val 0075  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                   cold_threshold@upper_val 0073  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 11D8                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 11A8  
                              _delay_temp 118B                                __pmaintext 09F7  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0064  
                         _cold_high_night 00B3                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 0385  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                            _heat_counter 00B9                                 ?_set_time 0070  
                    __size_of_reset_alarm 002D                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 1228  
                _time_date_hex_terminator 1199                                   ___lbdiv 1294  
                                 ___awmod 154B                                   ___lbmod 12B5  
                         __size_of_delay2 0014                                   ___lwdiv 14C6  
                                 ___lwmod 13F6                                   _alarm__ 004D  
                                 _day_hex 0047                                   _day_low 002A  
                            _heater_state 0051                                   __ptext1 0086  
                                 __ptext2 0BE5                                   __ptext3 1596  
                                 __ptext4 1502                                   __ptext5 1256  
                                 __ptext6 1399                                   __ptext7 12D8  
                                 __ptext8 1214                                   __ptext9 1176  
                    __end_of_button_delay 1200                              _cold_counter 00B7  
                                 delay2@i 0070                         __end_of_init_temp 117B  
                        ___awmod@dividend 0072                         __end_of_read_byte 145C  
                                 _qianfen 0057                      __size_of_time_read_1 0030  
                                 _lower_t 0054               __end_of_set_beep_threshhold 1273  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 009D  
                                 clrloop0 1184                                ??_lcd_init 0073  
                                 _upper_t 0055                                ??_get_temp 0060  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 145C  
                              ??_set_time 0075                       _time_date_delimiter 08A0  
                            _display_date 0803                              _display_temp 1273  
                       __end_of_write_cmd 1256                          ___lbmod@dividend 0074  
                            _cooler_state 0050                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 16F9  
                  __size_of_date_settings 045B                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 154B                             ??_display_day 0075  
                          __end_of_delay2 1214                                _write_char 1228  
                              _write_byte 1490                   __size_of_cold_threshold 0067  
                          _var_night_high 0038                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 11C7                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 11C7  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0385                               __pdataBANK1 00BB  
                              read_byte@i 0076                                read_byte@j 0040  
             __end_of_set_upper_threshold 15ED                       __end_of_display_day 0086  
                               ___latbits 0002                             __pcstackBANK0 0060  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       _night_lower_lower 0022                         __size_of_get_temp 0107  
                       __size_of_get_time 002C                         _night_lower_upper 00AB  
              ??_time_date_hex_terminator 0071                              _button_delay 11EC  
                        ___lwdiv@dividend 0078                               _day_counter 00A7  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                                 _cold_high 0036  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 131F                      __end_of_time_write_1 1345  
                      _initialise_buttons 1214                           _day_of_week_var 00AF  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 1176                                 _read_byte 1428  
                     ?_initialise_buttons 0070                                 clear_ram0 1183  
                           ??_reset_alarm 0073                            _prev_hex_hours 0042  
                            ??_delay_temp 0071                            _cold_low_night 00B1  
                               _temp_high 004B                               _display_day 000D  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 041B  
       ??_thermometer_threshhold_settings 0065          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0BE5                      ??_initialise_buttons 0070  
                  __size_of_time_settings 02FF                            _cold_threshold 15ED  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 1199  
                               _write_cmd 123F                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 003A  
                         _buzzer_watcher1 0052                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0065                           _day_lower_lower 0020  
                    __size_of_ds1302_init 000F                           _day_lower_upper 00A9  
                             _incrementor 12FB                    __end_of_cold_threshold 1654  
                            _modulus_func 11B7                       __end_of_reset_alarm 13C6  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0028  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 117B                                  __ptext11 136D  
                                __ptext20 14C6                                  __ptext12 13C6  
                                __ptext21 12B5                                  __ptext13 16F9  
                                __ptext30 1199                                  __ptext22 1294  
                                __ptext14 1490                                  __ptext31 08A0  
                                __ptext23 11A8                                  __ptext15 145C  
                                __ptext40 11D8                                  __ptext32 1345  
                                __ptext24 1273                                  __ptext16 1428  
                                __ptext33 131F                                  __ptext25 000D  
                                __ptext17 118B                                  __ptext34 12FB  
                                __ptext26 0803                                  __ptext18 1200  
                                __ptext35 11B7                                  __ptext27 1654  
                                __ptext19 13F6                                  __ptext36 154B  
                                __ptext28 0385                                  __ptext37 11EC  
                                __ptext29 123F                                  __ptext38 15ED  
                                __ptext39 1228                       __end_of_time_read_1 13F6  
                                _cold_low 00B5                                ?_write_cmd 0070  
                                _lcd_init 12D8                                  _get_temp 16F9  
                                _get_time 136D                             _time_settings 0086  
        __end_of_time_date_hex_terminator 11A8                             __size_of_main 01EE  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0046                                 set_time@i 0075  
                           _prev_hex_mins 0041                             _prev_hex_year 0043  
                            ??_reset_temp 0074                                  _set_time 1345  
                                _temp_low 004C                                  _prev_hex 0045  
              time_date_delimiter@limiter 0071                           ?_cold_threshold 0073  
            __size_of_set_lower_threshold 0049                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 00A5  
                          _buzzer_watcher 0053                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 09F7  
                                init_ram0 11CB                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 1490  
                             ??_read_byte 0074                            ?_time_settings 0070  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 1399                              _time_write_1 131F  
                            _prev_hex_day 0044                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 13C6                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0057  
                           _display_clock 1654                             time_write_1@j 0072  
                      __end_of_write_char 123F                        __end_of_write_byte 14C6  
