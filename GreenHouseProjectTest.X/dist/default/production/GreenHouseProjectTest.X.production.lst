

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Dec 12 16:53:57 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  0005                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  0005  3400               	retlw	0
   696  0006  3418               	retlw	24
   697  0007  3400               	retlw	0
   698  0008  3412               	retlw	18
   699  0009  3412               	retlw	18
   700  000A  3406               	retlw	6
   701  000B  3419               	retlw	25
   702  000C  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003F                     _RC7	set	63
   706  003E                     _RC6	set	62
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30BB               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3000               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  3005               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30B3               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  238C  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30B3               	movlw	low (__pbssBANK1+19)
   756  07F1  160A  118A  2344  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  3060               	movlw	low (__pbssBANK0+64)
   762  07F9  160A  118A  2344   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2B93   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _p:	
   773  0020                     	ds	2
   774  0022                     _stats:	
   775  0022                     	ds	2
   776  0024                     _day_high:	
   777  0024                     	ds	2
   778  0026                     _day_low:	
   779  0026                     	ds	2
   780  0028                     _z:	
   781  0028                     	ds	2
   782  002A                     _y:	
   783  002A                     	ds	2
   784  002C                     _x:	
   785  002C                     	ds	2
   786  002E                     _w:	
   787  002E                     	ds	2
   788  0030                     _t:	
   789  0030                     	ds	2
   790  0032                     _cold_low:	
   791  0032                     	ds	2
   792  0034                     _cold_high:	
   793  0034                     	ds	2
   794  0036                     _var_night_high:	
   795  0036                     	ds	2
   796  0038                     _var_night_low:	
   797  0038                     	ds	2
   798  003A                     _count:	
   799  003A                     	ds	2
   800  003C                     _heat_counter:	
   801  003C                     	ds	2
   802  003E                     _wd:	
   803  003E                     	ds	2
   804  0040                     read_byte@j:	
   805  0040                     	ds	1
   806  0041                     _prev_hex_mins:	
   807  0041                     	ds	1
   808  0042                     _prev_hex_hours:	
   809  0042                     	ds	1
   810  0043                     _prev_hex_year:	
   811  0043                     	ds	1
   812  0044                     _prev_hex_day:	
   813  0044                     	ds	1
   814  0045                     _prev_hex:	
   815  0045                     	ds	1
   816  0046                     _hrs_limiter:	
   817  0046                     	ds	1
   818  0047                     _day_hex:	
   819  0047                     	ds	1
   820  0048                     _c:	
   821  0048                     	ds	1
   822  0049                     _b:	
   823  0049                     	ds	1
   824  004A                     _a:	
   825  004A                     	ds	1
   826  004B                     _temp_high:	
   827  004B                     	ds	1
   828  004C                     _temp_low:	
   829  004C                     	ds	1
   830  004D                     _alarm__:	
   831  004D                     	ds	1
   832  004E                     _var2:	
   833  004E                     	ds	1
   834  004F                     _var1:	
   835  004F                     	ds	1
   836  0050                     _cooler_state:	
   837  0050                     	ds	1
   838  0051                     _heater_state:	
   839  0051                     	ds	1
   840  0052                     _buzzer_watcher1:	
   841  0052                     	ds	1
   842  0053                     _buzzer_watcher:	
   843  0053                     	ds	1
   844  0054                     _lower_t:	
   845  0054                     	ds	1
   846  0055                     _upper_t:	
   847  0055                     	ds	1
   848  0056                     _wanfen:	
   849  0056                     	ds	1
   850  0057                     _qianfen:	
   851  0057                     	ds	1
   852  0058                     _baifen:	
   853  0058                     	ds	1
   854  0059                     _shifen:	
   855  0059                     	ds	1
   856  005A                     _ge:	
   857  005A                     	ds	1
   858  005B                     _shi:	
   859  005B                     	ds	1
   860  005C                     _TX:	
   861  005C                     	ds	1
   862  005D                     _TZ:	
   863  005D                     	ds	1
   864  005E                     _THV:	
   865  005E                     	ds	1
   866  005F                     _TLV:	
   867  005F                     	ds	1
   868                           
   869                           	psect	bssBANK1
   870  00A0                     __pbssBANK1:	
   871  00A0                     _table1:	
   872  00A0                     	ds	7
   873  00A7                     _day_counter:	
   874  00A7                     	ds	2
   875  00A9                     _d_type:	
   876  00A9                     	ds	2
   877  00AB                     _day_of_week_var:	
   878  00AB                     	ds	2
   879  00AD                     _cold_low_night:	
   880  00AD                     	ds	2
   881  00AF                     _cold_high_night:	
   882  00AF                     	ds	2
   883  00B1                     _cold_counter:	
   884  00B1                     	ds	2
   885                           
   886                           	psect	dataBANK1
   887  00B3                     __pdataBANK1:	
   888  00B3                     _table:	
   889  00B3                     	ds	8
   890                           
   891                           	psect	inittext
   892  1388                     init_fetch0:	
   893                           ;	Called with low address in FSR and high address in W
   894                           
   895  1388  087E               	movf	126,w
   896  1389  008A               	movwf	10
   897  138A  087F               	movf	127,w
   898  138B  0082               	movwf	2
   899  138C                     init_ram0:	
   900                           ;Called with:
   901                           ;	high address of idata address in btemp 
   902                           ;	low address of idata address in btemp+1 
   903                           ;	low address of data in FSR
   904                           ;	high address + 1 of data in btemp-1
   905                           
   906  138C  2388  160A  118A   	fcall	init_fetch0
   907  138F  0080               	movwf	0
   908  1390  0A84               	incf	4,f
   909  1391  0804               	movf	4,w
   910  1392  067D               	xorwf	125,w
   911  1393  1903               	btfsc	3,2
   912  1394  3400               	retlw	0
   913  1395  0AFF               	incf	127,f
   914  1396  1903               	btfsc	3,2
   915  1397  0AFE               	incf	126,f
   916  1398  2B8C               	goto	init_ram0
   917                           
   918                           	psect	clrtext
   919  1344                     clear_ram0:	
   920                           ;	Called with FSR containing the base address, and
   921                           ;	W with the last address+1
   922                           
   923  1344  0064               	clrwdt	;clear the watchdog before getting into this loop
   924  1345                     clrloop0:	
   925  1345  0180               	clrf	0	;clear RAM location pointed to by FSR
   926  1346  0A84               	incf	4,f	;increment pointer
   927  1347  0604               	xorwf	4,w	;XOR with final address
   928  1348  1903               	btfsc	3,2	;have we reached the end yet?
   929  1349  3400               	retlw	0	;all done for this memory range, return
   930  134A  0604               	xorwf	4,w	;XOR again to restore value
   931  134B  2B45               	goto	clrloop0	;do the next byte
   932                           
   933                           	psect	cstackCOMMON
   934  0070                     __pcstackCOMMON:	
   935  0070                     ?_init_temp:	
   936  0070                     ??_init_temp:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_set_time:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_ds1302_init:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_init:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ??_init:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_lcd_init:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_initialise_buttons:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ??_initialise_buttons:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_get_temp:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_get_time:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_write_cmd:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_write_char:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_display_temp:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_display_date:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_display_clock:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_thermometer_threshhold_settings:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?_date_settings:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ?_time_settings:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_reset_alarm:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_set_beep_threshhold:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_delay_screen:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ??_delay_screen:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ?_delay_temp:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?_delay2:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ??_delay2:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_time_write_1:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ??_time_write_1:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_time_read_1:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ??_time_read_1:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_button_delay:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ??_button_delay:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_time_date_hex_terminator:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_time_date_delimiter:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_main:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_reset_temp:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_write_byte:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_read_byte:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?___lbdiv:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?___lbmod:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?___awmod:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?___lwmod:	
  1057                           ; 2 bytes @ 0x0
  1058                           
  1059  0070                     delay_temp@y:	
  1060                           ; 2 bytes @ 0x0
  1061                           
  1062  0070                     time_date_delimiter@hex:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     time_date_hex_terminator@limiter:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ___lbdiv@divisor:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ___lbmod@divisor:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     delay_screen@i:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     delay2@i:	
  1078                           ; 2 bytes @ 0x0
  1079                           
  1080  0070                     button_delay@i:	
  1081                           ; 2 bytes @ 0x0
  1082                           
  1083  0070                     ___awmod@divisor:	
  1084                           ; 2 bytes @ 0x0
  1085                           
  1086  0070                     ___lwmod@divisor:	
  1087                           ; 2 bytes @ 0x0
  1088                           
  1089                           
  1090                           ; 2 bytes @ 0x0
  1091  0070                     	ds	1
  1092  0071                     ??_delay_temp:	
  1093  0071                     ??_time_date_hex_terminator:	
  1094                           ; 1 bytes @ 0x1
  1095                           
  1096  0071                     ??___lbdiv:	
  1097                           ; 1 bytes @ 0x1
  1098                           
  1099  0071                     ??___lbmod:	
  1100                           ; 1 bytes @ 0x1
  1101                           
  1102  0071                     time_date_delimiter@limiter:	
  1103                           ; 1 bytes @ 0x1
  1104                           
  1105                           
  1106                           ; 1 bytes @ 0x1
  1107  0071                     	ds	1
  1108  0072                     ??_write_cmd:	
  1109  0072                     ??_write_char:	
  1110                           ; 1 bytes @ 0x2
  1111                           
  1112  0072                     ??_set_beep_threshhold:	
  1113                           ; 1 bytes @ 0x2
  1114                           
  1115  0072                     write_char@x:	
  1116                           ; 1 bytes @ 0x2
  1117                           
  1118  0072                     write_cmd@x:	
  1119                           ; 1 bytes @ 0x2
  1120                           
  1121  0072                     delay_temp@x:	
  1122                           ; 1 bytes @ 0x2
  1123                           
  1124  0072                     set_beep_threshhold@x:	
  1125                           ; 1 bytes @ 0x2
  1126                           
  1127  0072                     ___lbdiv@dividend:	
  1128                           ; 1 bytes @ 0x2
  1129                           
  1130  0072                     time_write_1@j:	
  1131                           ; 1 bytes @ 0x2
  1132                           
  1133  0072                     time_read_1@j:	
  1134                           ; 2 bytes @ 0x2
  1135                           
  1136  0072                     time_date_delimiter@type:	
  1137                           ; 2 bytes @ 0x2
  1138                           
  1139  0072                     ___awmod@dividend:	
  1140                           ; 2 bytes @ 0x2
  1141                           
  1142  0072                     ___lwmod@dividend:	
  1143                           ; 2 bytes @ 0x2
  1144                           
  1145                           
  1146                           ; 2 bytes @ 0x2
  1147  0072                     	ds	1
  1148  0073                     ??_lcd_init:	
  1149  0073                     ??_display_temp:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     ??_display_date:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155  0073                     ??_display_clock:	
  1156                           ; 1 bytes @ 0x3
  1157                           
  1158  0073                     ?_set_lower_threshold:	
  1159                           ; 1 bytes @ 0x3
  1160                           
  1161  0073                     ?_set_upper_threshold:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164  0073                     ?_cold_threshold:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167  0073                     ??_reset_alarm:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0073                     ?_display_day:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0073                     delay_temp@z:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176  0073                     time_date_hex_terminator@val:	
  1177                           ; 1 bytes @ 0x3
  1178                           
  1179  0073                     ___lbdiv@counter:	
  1180                           ; 1 bytes @ 0x3
  1181                           
  1182  0073                     set_upper_threshold@upper_val:	
  1183                           ; 1 bytes @ 0x3
  1184                           
  1185  0073                     cold_threshold@upper_val:	
  1186                           ; 2 bytes @ 0x3
  1187                           
  1188  0073                     set_lower_threshold@upper_val:	
  1189                           ; 2 bytes @ 0x3
  1190                           
  1191  0073                     display_day@num:	
  1192                           ; 2 bytes @ 0x3
  1193                           
  1194                           
  1195                           ; 2 bytes @ 0x3
  1196  0073                     	ds	1
  1197  0074                     ??_time_date_delimiter:	
  1198  0074                     ??_reset_temp:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     ??_write_byte:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     ??_read_byte:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207  0074                     ??___awmod:	
  1208                           ; 1 bytes @ 0x4
  1209                           
  1210  0074                     ??___lwmod:	
  1211                           ; 1 bytes @ 0x4
  1212                           
  1213  0074                     time_write_1@time_tx:	
  1214                           ; 1 bytes @ 0x4
  1215                           
  1216  0074                     time_read_1@time_rx:	
  1217                           ; 1 bytes @ 0x4
  1218                           
  1219  0074                     ___lbdiv@quotient:	
  1220                           ; 1 bytes @ 0x4
  1221                           
  1222  0074                     ___lbmod@dividend:	
  1223                           ; 1 bytes @ 0x4
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0x4
  1227  0074                     	ds	1
  1228  0075                     ??_set_time:	
  1229  0075                     ??_ds1302_init:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0075                     ??_get_time:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0075                     ??_display_day:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0075                     reset_temp@presence:	
  1239                           ; 1 bytes @ 0x5
  1240                           
  1241  0075                     read_byte@value:	
  1242                           ; 1 bytes @ 0x5
  1243                           
  1244  0075                     ___awmod@counter:	
  1245                           ; 1 bytes @ 0x5
  1246                           
  1247  0075                     ___lbmod@counter:	
  1248                           ; 1 bytes @ 0x5
  1249                           
  1250  0075                     ___lwmod@counter:	
  1251                           ; 1 bytes @ 0x5
  1252                           
  1253  0075                     set_time@i:	
  1254                           ; 1 bytes @ 0x5
  1255                           
  1256  0075                     display_clock@i:	
  1257                           ; 2 bytes @ 0x5
  1258                           
  1259  0075                     display_date@i:	
  1260                           ; 2 bytes @ 0x5
  1261                           
  1262  0075                     set_upper_threshold@lower_val:	
  1263                           ; 2 bytes @ 0x5
  1264                           
  1265  0075                     cold_threshold@lower_val:	
  1266                           ; 2 bytes @ 0x5
  1267                           
  1268  0075                     set_lower_threshold@lower_val:	
  1269                           ; 2 bytes @ 0x5
  1270                           
  1271                           
  1272                           ; 2 bytes @ 0x5
  1273  0075                     	ds	1
  1274  0076                     ?___lwdiv:	
  1275  0076                     write_byte@temp:	
  1276                           ; 2 bytes @ 0x6
  1277                           
  1278  0076                     read_byte@i:	
  1279                           ; 1 bytes @ 0x6
  1280                           
  1281  0076                     time_date_delimiter@val:	
  1282                           ; 1 bytes @ 0x6
  1283                           
  1284  0076                     ___awmod@sign:	
  1285                           ; 1 bytes @ 0x6
  1286                           
  1287  0076                     ___lbmod@rem:	
  1288                           ; 1 bytes @ 0x6
  1289                           
  1290  0076                     get_time@i:	
  1291                           ; 1 bytes @ 0x6
  1292                           
  1293  0076                     ___lwdiv@divisor:	
  1294                           ; 2 bytes @ 0x6
  1295                           
  1296                           
  1297                           ; 2 bytes @ 0x6
  1298  0076                     	ds	1
  1299  0077                     ??_set_lower_threshold:	
  1300  0077                     ??_set_upper_threshold:	
  1301                           ; 1 bytes @ 0x7
  1302                           
  1303  0077                     ??_cold_threshold:	
  1304                           ; 1 bytes @ 0x7
  1305                           
  1306  0077                     ?_modulus_func:	
  1307                           ; 1 bytes @ 0x7
  1308                           
  1309  0077                     write_byte@val:	
  1310                           ; 2 bytes @ 0x7
  1311                           
  1312  0077                     modulus_func@x:	
  1313                           ; 1 bytes @ 0x7
  1314                           
  1315                           
  1316                           ; 2 bytes @ 0x7
  1317  0077                     	ds	1
  1318  0078                     write_byte@i:	
  1319  0078                     ___lwdiv@dividend:	
  1320                           ; 1 bytes @ 0x8
  1321                           
  1322                           
  1323                           ; 2 bytes @ 0x8
  1324  0078                     	ds	1
  1325  0079                     modulus_func@y:	
  1326                           
  1327                           ; 2 bytes @ 0x9
  1328  0079                     	ds	1
  1329  007A                     ??___lwdiv:	
  1330                           
  1331                           ; 1 bytes @ 0xA
  1332  007A                     	ds	1
  1333  007B                     ??_modulus_func:	
  1334  007B                     ??_incrementor:	
  1335                           ; 1 bytes @ 0xB
  1336                           
  1337  007B                     ___lwdiv@quotient:	
  1338                           ; 1 bytes @ 0xB
  1339                           
  1340                           
  1341                           ; 2 bytes @ 0xB
  1342  007B                     	ds	2
  1343  007D                     ___lwdiv@counter:	
  1344                           
  1345                           ; 1 bytes @ 0xD
  1346  007D                     	ds	1
  1347                           
  1348                           	psect	cstackBANK0
  1349  0060                     __pcstackBANK0:	
  1350  0060                     ??_get_temp:	
  1351  0060                     ?_incrementor:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0060                     incrementor@upper_val:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357                           
  1358                           ; 2 bytes @ 0x0
  1359  0060                     	ds	2
  1360  0062                     incrementor@lower_val:	
  1361                           
  1362                           ; 2 bytes @ 0x2
  1363  0062                     	ds	2
  1364  0064                     incrementor@z:	
  1365                           
  1366                           ; 1 bytes @ 0x4
  1367  0064                     	ds	1
  1368  0065                     ??_thermometer_threshhold_settings:	
  1369  0065                     ??_date_settings:	
  1370                           ; 1 bytes @ 0x5
  1371                           
  1372  0065                     ??_time_settings:	
  1373                           ; 1 bytes @ 0x5
  1374                           
  1375                           
  1376                           ; 1 bytes @ 0x5
  1377  0065                     	ds	3
  1378  0068                     ??_main:	
  1379                           
  1380                           ; 1 bytes @ 0x8
  1381  0068                     	ds	5
  1382  006D                     main@i:	
  1383                           
  1384                           ; 2 bytes @ 0xD
  1385  006D                     	ds	2
  1386                           
  1387                           	psect	maintext
  1388  0B93                     __pmaintext:	
  1389 ;;
  1390 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1391 ;;
  1392 ;; *************** function _main *****************
  1393 ;; Defined at:
  1394 ;;		line 10 in file "mainLogic.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;		None
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  i               2   13[BANK0 ] int 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  1    wreg      void 
  1401 ;; Registers used:
  1402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : B00/0
  1405 ;;		On exit  : 200/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1408 ;;      Params:         0       0       0       0       0
  1409 ;;      Locals:         0       2       0       0       0
  1410 ;;      Temps:          0       5       0       0       0
  1411 ;;      Totals:         0       7       0       0       0
  1412 ;;Total ram usage:        7 bytes
  1413 ;; Hardware stack levels required when called:    4
  1414 ;; This function calls:
  1415 ;;		_cold_threshold
  1416 ;;		_date_settings
  1417 ;;		_display_clock
  1418 ;;		_display_date
  1419 ;;		_display_day
  1420 ;;		_display_temp
  1421 ;;		_ds1302_init
  1422 ;;		_get_temp
  1423 ;;		_get_time
  1424 ;;		_init
  1425 ;;		_init_temp
  1426 ;;		_initialise_buttons
  1427 ;;		_lcd_init
  1428 ;;		_modulus_func
  1429 ;;		_reset_alarm
  1430 ;;		_set_beep_threshhold
  1431 ;;		_set_lower_threshold
  1432 ;;		_set_time
  1433 ;;		_set_upper_threshold
  1434 ;;		_thermometer_threshhold_settings
  1435 ;;		_time_settings
  1436 ;;		_write_char
  1437 ;;		_write_cmd
  1438 ;; This function is called by:
  1439 ;;		Startup code after reset
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _main
  1445  0B93                     _main:	
  1446                           
  1447                           ;mainLogic.c: 11:     TRISB=0X02;
  1448                           
  1449                           ;incstack = 0
  1450                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1451  0B93  3002               	movlw	2
  1452  0B94  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0B95  0086               	movwf	6	;volatile
  1454                           
  1455                           ;mainLogic.c: 12:     init_temp();
  1456  0B96  160A  118A  2337  120A  158A  	fcall	_init_temp
  1457                           
  1458                           ;mainLogic.c: 13:     set_time();
  1459  0B9B  160A  118A  2506  120A  158A  	fcall	_set_time
  1460                           
  1461                           ;mainLogic.c: 14:     ds1302_init();
  1462  0BA0  160A  118A  2369  120A  158A  	fcall	_ds1302_init
  1463                           
  1464                           ;mainLogic.c: 16:     init();
  1465  0BA5  160A  118A  233C  120A  158A  	fcall	_init
  1466                           
  1467                           ;mainLogic.c: 17:     lcd_init();
  1468  0BAA  160A  118A  2499  120A  158A  	fcall	_lcd_init
  1469                           
  1470                           ;mainLogic.c: 18:     init_temp();
  1471  0BAF  160A  118A  2337  120A  158A  	fcall	_init_temp
  1472                           
  1473                           ;mainLogic.c: 19:     initialise_buttons();
  1474  0BB4  160A  118A  23D5  120A  158A  	fcall	_initialise_buttons
  1475                           
  1476                           ;mainLogic.c: 20:     var1 = 3;
  1477  0BB9  3003               	movlw	3
  1478  0BBA  00E8               	movwf	??_main
  1479  0BBB  0868               	movf	??_main,w
  1480  0BBC  00CF               	movwf	_var1
  1481                           
  1482                           ;mainLogic.c: 21:     var2 = 4;
  1483  0BBD  3004               	movlw	4
  1484  0BBE  00E8               	movwf	??_main
  1485  0BBF  0868               	movf	??_main,w
  1486  0BC0  00CE               	movwf	_var2
  1487                           
  1488                           ;mainLogic.c: 22:     var_night_low = 4;
  1489  0BC1  3004               	movlw	4
  1490  0BC2  00B8               	movwf	_var_night_low
  1491  0BC3  3000               	movlw	0
  1492  0BC4  00B9               	movwf	_var_night_low+1
  1493                           
  1494                           ;mainLogic.c: 23:     var_night_high = 2;
  1495  0BC5  3002               	movlw	2
  1496  0BC6  00B6               	movwf	_var_night_high
  1497  0BC7  3000               	movlw	0
  1498  0BC8  00B7               	movwf	_var_night_high+1
  1499                           
  1500                           ;mainLogic.c: 24:     cold_high = 1;
  1501  0BC9  3001               	movlw	1
  1502  0BCA  00B4               	movwf	_cold_high
  1503  0BCB  3000               	movlw	0
  1504  0BCC  00B5               	movwf	_cold_high+1
  1505                           
  1506                           ;mainLogic.c: 25:     cold_low = 9;
  1507  0BCD  3009               	movlw	9
  1508  0BCE  00B2               	movwf	_cold_low
  1509  0BCF  3000               	movlw	0
  1510  0BD0  00B3               	movwf	_cold_low+1
  1511  0BD1                     l4787:	
  1512                           
  1513                           ;mainLogic.c: 28:     get_temp();
  1514  0BD1  120A  158A  2135  120A  158A  	fcall	_get_temp
  1515                           
  1516                           ;mainLogic.c: 29:     get_time();
  1517  0BD6  160A  118A  252E  120A  158A  	fcall	_get_time
  1518                           
  1519                           ;mainLogic.c: 30:     write_cmd(0x80);
  1520  0BDB  3080               	movlw	128
  1521  0BDC  160A  118A  2400  120A  158A  	fcall	_write_cmd
  1522                           
  1523                           ;mainLogic.c: 31:     write_char('T');
  1524  0BE1  3054               	movlw	84
  1525  0BE2  160A  118A  23E9  120A  158A  	fcall	_write_char
  1526                           
  1527                           ;mainLogic.c: 32:     write_char('e');
  1528  0BE7  3065               	movlw	101
  1529  0BE8  160A  118A  23E9  120A  158A  	fcall	_write_char
  1530                           
  1531                           ;mainLogic.c: 33:     write_char('m');
  1532  0BED  306D               	movlw	109
  1533  0BEE  160A  118A  23E9  120A  158A  	fcall	_write_char
  1534                           
  1535                           ;mainLogic.c: 34:     write_char('p');
  1536  0BF3  3070               	movlw	112
  1537  0BF4  160A  118A  23E9  120A  158A  	fcall	_write_char
  1538                           
  1539                           ;mainLogic.c: 35:     write_char(':');
  1540  0BF9  303A               	movlw	58
  1541  0BFA  160A  118A  23E9  120A  158A  	fcall	_write_char
  1542                           
  1543                           ;mainLogic.c: 36:     display_temp();
  1544  0BFF  160A  118A  2434  120A  158A  	fcall	_display_temp
  1545                           
  1546                           ;mainLogic.c: 38:     write_cmd(0x90);
  1547  0C04  3090               	movlw	144
  1548  0C05  160A  118A  2400  120A  158A  	fcall	_write_cmd
  1549                           
  1550                           ;mainLogic.c: 39:     write_char('D');
  1551  0C0A  3044               	movlw	68
  1552  0C0B  160A  118A  23E9  120A  158A  	fcall	_write_char
  1553                           
  1554                           ;mainLogic.c: 40:     write_char('a');
  1555  0C10  3061               	movlw	97
  1556  0C11  160A  118A  23E9  120A  158A  	fcall	_write_char
  1557                           
  1558                           ;mainLogic.c: 41:     write_char('t');
  1559  0C16  3074               	movlw	116
  1560  0C17  160A  118A  23E9  120A  158A  	fcall	_write_char
  1561                           
  1562                           ;mainLogic.c: 42:     write_char('e');
  1563  0C1C  3065               	movlw	101
  1564  0C1D  160A  118A  23E9  120A  158A  	fcall	_write_char
  1565                           
  1566                           ;mainLogic.c: 43:     write_char(':');
  1567  0C22  303A               	movlw	58
  1568  0C23  160A  118A  23E9  120A  158A  	fcall	_write_char
  1569                           
  1570                           ;mainLogic.c: 44:     write_char(' ');
  1571  0C28  3020               	movlw	32
  1572  0C29  160A  118A  23E9  120A  158A  	fcall	_write_char
  1573                           
  1574                           ;mainLogic.c: 46:     display_date();
  1575  0C2E  160A  118A  2763  120A  158A  	fcall	_display_date
  1576                           
  1577                           ;mainLogic.c: 48:     write_cmd(0x88);
  1578  0C33  3088               	movlw	136
  1579  0C34  160A  118A  2400  120A  158A  	fcall	_write_cmd
  1580                           
  1581                           ;mainLogic.c: 49:     write_char('T');
  1582  0C39  3054               	movlw	84
  1583  0C3A  160A  118A  23E9  120A  158A  	fcall	_write_char
  1584                           
  1585                           ;mainLogic.c: 50:     write_char('i');
  1586  0C3F  3069               	movlw	105
  1587  0C40  160A  118A  23E9  120A  158A  	fcall	_write_char
  1588                           
  1589                           ;mainLogic.c: 51:     write_char('m');
  1590  0C45  306D               	movlw	109
  1591  0C46  160A  118A  23E9  120A  158A  	fcall	_write_char
  1592                           
  1593                           ;mainLogic.c: 52:     write_char('e');
  1594  0C4B  3065               	movlw	101
  1595  0C4C  160A  118A  23E9  120A  158A  	fcall	_write_char
  1596                           
  1597                           ;mainLogic.c: 53:     write_char(':');
  1598  0C51  303A               	movlw	58
  1599  0C52  160A  118A  23E9  120A  158A  	fcall	_write_char
  1600                           
  1601                           ;mainLogic.c: 54:     display_clock();
  1602  0C57  120A  158A  2090  120A  158A  	fcall	_display_clock
  1603                           
  1604                           ;mainLogic.c: 55:     thermometer_threshhold_settings();
  1605  0C5C  120A  158A  257F  120A  158A  	fcall	_thermometer_threshhold_settings
  1606                           
  1607                           ;mainLogic.c: 56:     date_settings();
  1608  0C61  120A  118A  2385  120A  158A  	fcall	_date_settings
  1609                           
  1610                           ;mainLogic.c: 57:     time_settings();
  1611  0C66  120A  118A  2086  120A  158A  	fcall	_time_settings
  1612                           
  1613                           ;mainLogic.c: 58:     write_cmd(0x98);
  1614  0C6B  3098               	movlw	152
  1615  0C6C  160A  118A  2400  120A  158A  	fcall	_write_cmd
  1616                           
  1617                           ;mainLogic.c: 60:      if((temp_high+'0')<= 1 && (temp_low + '0') < 8){
  1618  0C71  084B               	movf	_temp_high,w
  1619  0C72  3E30               	addlw	48
  1620  0C73  00E8               	movwf	??_main
  1621  0C74  3000               	movlw	0
  1622  0C75  1803               	skipnc
  1623  0C76  3001               	movlw	1
  1624  0C77  00E9               	movwf	??_main+1
  1625  0C78  3000               	movlw	0
  1626  0C79  0269               	subwf	??_main+1,w
  1627  0C7A  3002               	movlw	2
  1628  0C7B  1903               	skipnz
  1629  0C7C  0268               	subwf	??_main,w
  1630  0C7D  1803               	skipnc
  1631  0C7E  2CC9               	goto	l4849
  1632  0C7F  084C               	movf	_temp_low,w
  1633  0C80  3E30               	addlw	48
  1634  0C81  00E8               	movwf	??_main
  1635  0C82  3000               	movlw	0
  1636  0C83  1803               	skipnc
  1637  0C84  3001               	movlw	1
  1638  0C85  00E9               	movwf	??_main+1
  1639  0C86  3000               	movlw	0
  1640  0C87  0269               	subwf	??_main+1,w
  1641  0C88  3008               	movlw	8
  1642  0C89  1903               	skipnz
  1643  0C8A  0268               	subwf	??_main,w
  1644  0C8B  1803               	skipnc
  1645  0C8C  2CC9               	goto	l4849
  1646                           
  1647                           ;mainLogic.c: 61:     alarm__ = set_lower_threshold(var1,var2);
  1648  0C8D  084F               	movf	_var1,w
  1649  0C8E  00E8               	movwf	??_main
  1650  0C8F  01E9               	clrf	??_main+1
  1651  0C90  0868               	movf	??_main,w
  1652  0C91  00F3               	movwf	set_lower_threshold@upper_val
  1653  0C92  0869               	movf	??_main+1,w
  1654  0C93  00F4               	movwf	set_lower_threshold@upper_val+1
  1655  0C94  084E               	movf	_var2,w
  1656  0C95  00EA               	movwf	??_main+2
  1657  0C96  01EB               	clrf	??_main+3
  1658  0C97  086A               	movf	??_main+2,w
  1659  0C98  00F5               	movwf	set_lower_threshold@lower_val
  1660  0C99  086B               	movf	??_main+3,w
  1661  0C9A  00F6               	movwf	set_lower_threshold@lower_val+1
  1662  0C9B  160A  118A  2686  120A  158A  	fcall	_set_lower_threshold
  1663  0CA0  00EC               	movwf	??_main+4
  1664  0CA1  086C               	movf	??_main+4,w
  1665  0CA2  00CD               	movwf	_alarm__
  1666                           
  1667                           ;mainLogic.c: 62:     alarm__ = set_upper_threshold(var1,var2);
  1668  0CA3  084F               	movf	_var1,w
  1669  0CA4  00E8               	movwf	??_main
  1670  0CA5  01E9               	clrf	??_main+1
  1671  0CA6  0868               	movf	??_main,w
  1672  0CA7  00F3               	movwf	set_upper_threshold@upper_val
  1673  0CA8  0869               	movf	??_main+1,w
  1674  0CA9  00F4               	movwf	set_upper_threshold@upper_val+1
  1675  0CAA  084E               	movf	_var2,w
  1676  0CAB  00EA               	movwf	??_main+2
  1677  0CAC  01EB               	clrf	??_main+3
  1678  0CAD  086A               	movf	??_main+2,w
  1679  0CAE  00F5               	movwf	set_upper_threshold@lower_val
  1680  0CAF  086B               	movf	??_main+3,w
  1681  0CB0  00F6               	movwf	set_upper_threshold@lower_val+1
  1682  0CB1  120A  158A  203C  120A  158A  	fcall	_set_upper_threshold
  1683  0CB6  00EC               	movwf	??_main+4
  1684  0CB7  086C               	movf	??_main+4,w
  1685  0CB8  00CD               	movwf	_alarm__
  1686                           
  1687                           ;mainLogic.c: 63:     alarm__ = cold_threshold(cold_high,cold_low);
  1688  0CB9  0835               	movf	_cold_high+1,w
  1689  0CBA  00F4               	movwf	cold_threshold@upper_val+1
  1690  0CBB  0834               	movf	_cold_high,w
  1691  0CBC  00F3               	movwf	cold_threshold@upper_val
  1692  0CBD  0833               	movf	_cold_low+1,w
  1693  0CBE  00F6               	movwf	cold_threshold@lower_val+1
  1694  0CBF  0832               	movf	_cold_low,w
  1695  0CC0  00F5               	movwf	cold_threshold@lower_val
  1696  0CC1  160A  118A  2715  120A  158A  	fcall	_cold_threshold
  1697  0CC6  00E8               	movwf	??_main
  1698  0CC7  0868               	movf	??_main,w
  1699  0CC8  00CD               	movwf	_alarm__
  1700  0CC9                     l4849:	
  1701                           
  1702                           ;mainLogic.c: 66:     if((temp_high+'0') >= 1 && (temp_low + '0') >= 8){
  1703  0CC9  084B               	movf	_temp_high,w
  1704  0CCA  3E30               	addlw	48
  1705  0CCB  00E8               	movwf	??_main
  1706  0CCC  3000               	movlw	0
  1707  0CCD  1803               	skipnc
  1708  0CCE  3001               	movlw	1
  1709  0CCF  00E9               	movwf	??_main+1
  1710  0CD0  0868               	movf	??_main,w
  1711  0CD1  0469               	iorwf	??_main+1,w
  1712  0CD2  1903               	btfsc	3,2
  1713  0CD3  2D10               	goto	l165
  1714  0CD4  084C               	movf	_temp_low,w
  1715  0CD5  3E30               	addlw	48
  1716  0CD6  00E8               	movwf	??_main
  1717  0CD7  3000               	movlw	0
  1718  0CD8  1803               	skipnc
  1719  0CD9  3001               	movlw	1
  1720  0CDA  00E9               	movwf	??_main+1
  1721  0CDB  3000               	movlw	0
  1722  0CDC  0269               	subwf	??_main+1,w
  1723  0CDD  3008               	movlw	8
  1724  0CDE  1903               	skipnz
  1725  0CDF  0268               	subwf	??_main,w
  1726  0CE0  1C03               	skipc
  1727  0CE1  2D10               	goto	l165
  1728                           
  1729                           ;mainLogic.c: 67:     alarm__ = set_lower_threshold(var_night_high,var_night_low);
  1730  0CE2  0837               	movf	_var_night_high+1,w
  1731  0CE3  00F4               	movwf	set_lower_threshold@upper_val+1
  1732  0CE4  0836               	movf	_var_night_high,w
  1733  0CE5  00F3               	movwf	set_lower_threshold@upper_val
  1734  0CE6  0839               	movf	_var_night_low+1,w
  1735  0CE7  00F6               	movwf	set_lower_threshold@lower_val+1
  1736  0CE8  0838               	movf	_var_night_low,w
  1737  0CE9  00F5               	movwf	set_lower_threshold@lower_val
  1738  0CEA  160A  118A  2686  120A  158A  	fcall	_set_lower_threshold
  1739  0CEF  00E8               	movwf	??_main
  1740  0CF0  0868               	movf	??_main,w
  1741  0CF1  00CD               	movwf	_alarm__
  1742                           
  1743                           ;mainLogic.c: 68:     alarm__ = set_upper_threshold(var_night_high,var_night_low);
  1744  0CF2  0837               	movf	_var_night_high+1,w
  1745  0CF3  00F4               	movwf	set_upper_threshold@upper_val+1
  1746  0CF4  0836               	movf	_var_night_high,w
  1747  0CF5  00F3               	movwf	set_upper_threshold@upper_val
  1748  0CF6  0839               	movf	_var_night_low+1,w
  1749  0CF7  00F6               	movwf	set_upper_threshold@lower_val+1
  1750  0CF8  0838               	movf	_var_night_low,w
  1751  0CF9  00F5               	movwf	set_upper_threshold@lower_val
  1752  0CFA  120A  158A  203C  120A  158A  	fcall	_set_upper_threshold
  1753  0CFF  00E8               	movwf	??_main
  1754  0D00  0868               	movf	??_main,w
  1755  0D01  00CD               	movwf	_alarm__
  1756                           
  1757                           ;mainLogic.c: 69:     alarm__ = cold_threshold(cold_high_night,cold_low_night);
  1758  0D02  3000               	movlw	0
  1759  0D03  00F3               	movwf	cold_threshold@upper_val
  1760  0D04  00F4               	movwf	cold_threshold@upper_val+1
  1761  0D05  3000               	movlw	0
  1762  0D06  00F5               	movwf	cold_threshold@lower_val
  1763  0D07  00F6               	movwf	cold_threshold@lower_val+1
  1764  0D08  160A  118A  2715  120A  158A  	fcall	_cold_threshold
  1765  0D0D  00E8               	movwf	??_main
  1766  0D0E  0868               	movf	??_main,w
  1767  0D0F  00CD               	movwf	_alarm__
  1768  0D10                     l165:	
  1769                           ;mainLogic.c: 70:     }
  1770                           
  1771                           
  1772                           ;mainLogic.c: 71:     alarm__ = reset_alarm();
  1773  0D10  160A  118A  255A  120A  158A  	fcall	_reset_alarm
  1774  0D15  00E8               	movwf	??_main
  1775  0D16  0868               	movf	??_main,w
  1776  0D17  00CD               	movwf	_alarm__
  1777                           
  1778                           ;mainLogic.c: 72:     set_beep_threshhold(alarm__);
  1779  0D18  084D               	movf	_alarm__,w
  1780  0D19  160A  118A  2417  120A  158A  	fcall	_set_beep_threshhold
  1781                           
  1782                           ;mainLogic.c: 73:     write_char(' ');
  1783  0D1E  3020               	movlw	32
  1784  0D1F  160A  118A  23E9  120A  158A  	fcall	_write_char
  1785                           
  1786                           ;mainLogic.c: 74:     write_char('H');
  1787  0D24  3048               	movlw	72
  1788  0D25  160A  118A  23E9  120A  158A  	fcall	_write_char
  1789                           
  1790                           ;mainLogic.c: 75:     write_char(':');
  1791  0D2A  303A               	movlw	58
  1792  0D2B  160A  118A  23E9  120A  158A  	fcall	_write_char
  1793                           
  1794                           ;mainLogic.c: 76:     write_char(heater_state);
  1795  0D30  0851               	movf	_heater_state,w
  1796  0D31  160A  118A  23E9  120A  158A  	fcall	_write_char
  1797                           
  1798                           ;mainLogic.c: 77:     write_char('C');
  1799  0D36  3043               	movlw	67
  1800  0D37  160A  118A  23E9  120A  158A  	fcall	_write_char
  1801                           
  1802                           ;mainLogic.c: 78:     write_char(':');
  1803  0D3C  303A               	movlw	58
  1804  0D3D  160A  118A  23E9  120A  158A  	fcall	_write_char
  1805                           
  1806                           ;mainLogic.c: 79:     write_char(cooler_state);
  1807  0D42  0850               	movf	_cooler_state,w
  1808  0D43  160A  118A  23E9  120A  158A  	fcall	_write_char
  1809                           
  1810                           ;mainLogic.c: 80:     for(int i = 0; i < 3; i++)
  1811  0D48  01ED               	clrf	main@i
  1812  0D49  01EE               	clrf	main@i+1
  1813  0D4A                     l4861:	
  1814                           
  1815                           ;mainLogic.c: 81:     write_char(' ');
  1816  0D4A  3020               	movlw	32
  1817  0D4B  160A  118A  23E9  120A  158A  	fcall	_write_char
  1818  0D50  3001               	movlw	1
  1819  0D51  07ED               	addwf	main@i,f
  1820  0D52  1803               	skipnc
  1821  0D53  0AEE               	incf	main@i+1,f
  1822  0D54  3000               	movlw	0
  1823  0D55  07EE               	addwf	main@i+1,f
  1824  0D56  086E               	movf	main@i+1,w
  1825  0D57  3A80               	xorlw	128
  1826  0D58  00FF               	movwf	127
  1827  0D59  3080               	movlw	128
  1828  0D5A  027F               	subwf	127,w
  1829  0D5B  1D03               	skipz
  1830  0D5C  2D5F               	goto	u4085
  1831  0D5D  3003               	movlw	3
  1832  0D5E  026D               	subwf	main@i,w
  1833  0D5F                     u4085:	
  1834  0D5F  1C03               	skipc
  1835  0D60  2D4A               	goto	l4861
  1836                           
  1837                           ;mainLogic.c: 82:     day_counter = modulus_func(day_low,8);
  1838  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0D63  0827               	movf	_day_low+1,w
  1841  0D64  00F8               	movwf	modulus_func@x+1
  1842  0D65  0826               	movf	_day_low,w
  1843  0D66  00F7               	movwf	modulus_func@x
  1844  0D67  3008               	movlw	8
  1845  0D68  00F9               	movwf	modulus_func@y
  1846  0D69  3000               	movlw	0
  1847  0D6A  00FA               	movwf	modulus_func@y+1
  1848  0D6B  160A  118A  2378  120A  158A  	fcall	_modulus_func
  1849  0D70  0878               	movf	?_modulus_func+1,w
  1850  0D71  1683               	bsf	3,5	;RP0=1, select bank1
  1851  0D72  00A8               	movwf	(_day_counter+1)^(0+128)
  1852  0D73  0877               	movf	?_modulus_func,w
  1853  0D74  00A7               	movwf	_day_counter^(0+128)
  1854                           
  1855                           ;mainLogic.c: 83:     display_day(day_counter);
  1856  0D75  0828               	movf	(_day_counter+1)^(0+128),w
  1857  0D76  00F4               	movwf	display_day@num+1
  1858  0D77  0827               	movf	_day_counter^(0+128),w
  1859  0D78  00F3               	movwf	display_day@num
  1860  0D79  120A  118A  200D  120A  158A  	fcall	_display_day
  1861  0D7E  2BD1               	goto	l4787
  1862  0D7F                     __end_of_main:	
  1863                           
  1864                           	psect	text1
  1865  0086                     __ptext1:	
  1866 ;; *************** function _time_settings *****************
  1867 ;; Defined at:
  1868 ;;		line 233 in file "Button_src.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 300/0
  1879 ;;		On exit  : 300/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0
  1884 ;;      Temps:          0       3       0       0       0
  1885 ;;      Totals:         0       3       0       0       0
  1886 ;;Total ram usage:        3 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		_button_delay
  1891 ;;		_incrementor
  1892 ;;		_modulus_func
  1893 ;;		_set_time
  1894 ;;		_time_date_delimiter
  1895 ;;		_time_date_hex_terminator
  1896 ;;		_write_char
  1897 ;;		_write_cmd
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           
  1904                           ;psect for function _time_settings
  1905  0086                     _time_settings:	
  1906                           
  1907                           ;Button_src.c: 234:  RC0 = 1;
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1911  0086  1407               	bsf	7,0	;volatile
  1912                           
  1913                           ;Button_src.c: 235:  RC1 = 1;
  1914  0087  1487               	bsf	7,1	;volatile
  1915                           
  1916                           ;Button_src.c: 236:  RC2 = 0;
  1917  0088  1107               	bcf	7,2	;volatile
  1918                           
  1919                           ;Button_src.c: 237:  RC3 = 1;
  1920  0089  1587               	bsf	7,3	;volatile
  1921                           
  1922                           ;Button_src.c: 238:   if (RC4 == 0){
  1923  008A  1A07               	btfsc	7,4	;volatile
  1924  008B  0008               	return
  1925                           
  1926                           ;Button_src.c: 239:       write_cmd(0x1);
  1927  008C  3001               	movlw	1
  1928  008D  160A  118A  2400  120A  118A  	fcall	_write_cmd
  1929  0092                     l742:	
  1930                           ;Button_src.c: 240:       for(;;){
  1931                           
  1932                           
  1933                           ;Button_src.c: 241:             write_cmd(0x80);
  1934  0092  3080               	movlw	128
  1935  0093  160A  118A  2400  120A  118A  	fcall	_write_cmd
  1936                           
  1937                           ;Button_src.c: 242:             write_char('T');
  1938  0098  3054               	movlw	84
  1939  0099  160A  118A  23E9  120A  118A  	fcall	_write_char
  1940                           
  1941                           ;Button_src.c: 243:             write_char('i');
  1942  009E  3069               	movlw	105
  1943  009F  160A  118A  23E9  120A  118A  	fcall	_write_char
  1944                           
  1945                           ;Button_src.c: 244:             write_char('m');
  1946  00A4  306D               	movlw	109
  1947  00A5  160A  118A  23E9  120A  118A  	fcall	_write_char
  1948                           
  1949                           ;Button_src.c: 245:             write_char('e');
  1950  00AA  3065               	movlw	101
  1951  00AB  160A  118A  23E9  120A  118A  	fcall	_write_char
  1952                           
  1953                           ;Button_src.c: 246:             write_char('_');
  1954  00B0  305F               	movlw	95
  1955  00B1  160A  118A  23E9  120A  118A  	fcall	_write_char
  1956                           
  1957                           ;Button_src.c: 247:             write_char('S');
  1958  00B6  3053               	movlw	83
  1959  00B7  160A  118A  23E9  120A  118A  	fcall	_write_char
  1960                           
  1961                           ;Button_src.c: 248:             write_char('e');
  1962  00BC  3065               	movlw	101
  1963  00BD  160A  118A  23E9  120A  118A  	fcall	_write_char
  1964                           
  1965                           ;Button_src.c: 249:             write_char('t');
  1966  00C2  3074               	movlw	116
  1967  00C3  160A  118A  23E9  120A  118A  	fcall	_write_char
  1968                           
  1969                           ;Button_src.c: 250:             write_char('t');
  1970  00C8  3074               	movlw	116
  1971  00C9  160A  118A  23E9  120A  118A  	fcall	_write_char
  1972                           
  1973                           ;Button_src.c: 251:             write_char('i');
  1974  00CE  3069               	movlw	105
  1975  00CF  160A  118A  23E9  120A  118A  	fcall	_write_char
  1976                           
  1977                           ;Button_src.c: 252:             write_char('n');
  1978  00D4  306E               	movlw	110
  1979  00D5  160A  118A  23E9  120A  118A  	fcall	_write_char
  1980                           
  1981                           ;Button_src.c: 253:             write_char('g');
  1982  00DA  3067               	movlw	103
  1983  00DB  160A  118A  23E9  120A  118A  	fcall	_write_char
  1984                           
  1985                           ;Button_src.c: 254:             write_char('s');
  1986  00E0  3073               	movlw	115
  1987  00E1  160A  118A  23E9  120A  118A  	fcall	_write_char
  1988                           
  1989                           ;Button_src.c: 256:             RC0 = 1;
  1990  00E6  1407               	bsf	7,0	;volatile
  1991                           
  1992                           ;Button_src.c: 257:             RC1 = 0;
  1993  00E7  1087               	bcf	7,1	;volatile
  1994                           
  1995                           ;Button_src.c: 258:             RC2 = 1;
  1996  00E8  1507               	bsf	7,2	;volatile
  1997                           
  1998                           ;Button_src.c: 259:             RC3 = 1;
  1999  00E9  1587               	bsf	7,3	;volatile
  2000                           
  2001                           ;Button_src.c: 261:             if(RC7 == 0 && b =='x'){
  2002  00EA  1B87               	btfsc	7,7	;volatile
  2003  00EB  295D               	goto	l4485
  2004  00EC  3078               	movlw	120
  2005  00ED  0649               	xorwf	_b,w
  2006  00EE  1D03               	btfss	3,2
  2007  00EF  295D               	goto	l4485
  2008                           
  2009                           ;Button_src.c: 262:                 if(stats == 1)
  2010  00F0  0322               	decf	_stats,w
  2011  00F1  0423               	iorwf	_stats+1,w
  2012  00F2  1D03               	btfss	3,2
  2013  00F3  28F8               	goto	l744
  2014                           
  2015                           ;Button_src.c: 263:                    a++;
  2016  00F4  3001               	movlw	1
  2017  00F5  00E5               	movwf	??_time_settings
  2018  00F6  0865               	movf	??_time_settings,w
  2019  00F7  07CA               	addwf	_a,f
  2020  00F8                     l744:	
  2021                           
  2022                           ;Button_src.c: 264:                 if(stats == 0){
  2023  00F8  0822               	movf	_stats,w
  2024  00F9  0423               	iorwf	_stats+1,w
  2025  00FA  1D03               	btfss	3,2
  2026  00FB  2900               	goto	l745
  2027                           
  2028                           ;Button_src.c: 265:                    stats = 1;
  2029  00FC  3001               	movlw	1
  2030  00FD  00A2               	movwf	_stats
  2031  00FE  3000               	movlw	0
  2032  00FF  00A3               	movwf	_stats+1
  2033  0100                     l745:	
  2034                           ;Button_src.c: 266:                 }
  2035                           
  2036                           
  2037                           ;Button_src.c: 268:                     x++ ;
  2038  0100  3001               	movlw	1
  2039  0101  07AC               	addwf	_x,f
  2040  0102  1803               	skipnc
  2041  0103  0AAD               	incf	_x+1,f
  2042  0104  3000               	movlw	0
  2043  0105  07AD               	addwf	_x+1,f
  2044                           
  2045                           ;Button_src.c: 269:                     x = modulus_func(x,10);
  2046  0106  082D               	movf	_x+1,w
  2047  0107  00F8               	movwf	modulus_func@x+1
  2048  0108  082C               	movf	_x,w
  2049  0109  00F7               	movwf	modulus_func@x
  2050  010A  300A               	movlw	10
  2051  010B  00F9               	movwf	modulus_func@y
  2052  010C  3000               	movlw	0
  2053  010D  00FA               	movwf	modulus_func@y+1
  2054  010E  160A  118A  2378  120A  118A  	fcall	_modulus_func
  2055  0113  0878               	movf	?_modulus_func+1,w
  2056  0114  00AD               	movwf	_x+1
  2057  0115  0877               	movf	?_modulus_func,w
  2058  0116  00AC               	movwf	_x
  2059                           
  2060                           ;Button_src.c: 270:                     if (p == 1){
  2061  0117  0320               	decf	_p,w
  2062  0118  0421               	iorwf	_p+1,w
  2063  0119  1D03               	btfss	3,2
  2064  011A  2934               	goto	l4471
  2065                           
  2066                           ;Button_src.c: 271:                         y = incrementor(y,x,'0');
  2067  011B  082B               	movf	_y+1,w
  2068  011C  00E1               	movwf	incrementor@upper_val+1
  2069  011D  082A               	movf	_y,w
  2070  011E  00E0               	movwf	incrementor@upper_val
  2071  011F  082D               	movf	_x+1,w
  2072  0120  00E3               	movwf	incrementor@lower_val+1
  2073  0121  082C               	movf	_x,w
  2074  0122  00E2               	movwf	incrementor@lower_val
  2075  0123  3030               	movlw	48
  2076  0124  00E5               	movwf	??_time_settings
  2077  0125  0865               	movf	??_time_settings,w
  2078  0126  00E4               	movwf	incrementor@z
  2079  0127  160A  118A  24BC  120A  118A  	fcall	_incrementor
  2080  012C  00E6               	movwf	??_time_settings+1
  2081  012D  01E7               	clrf	??_time_settings+2
  2082  012E  0866               	movf	??_time_settings+1,w
  2083  012F  00AA               	movwf	_y
  2084  0130  0867               	movf	??_time_settings+2,w
  2085  0131  00AB               	movwf	_y+1
  2086                           
  2087                           ;Button_src.c: 272:                         p = 0;
  2088  0132  01A0               	clrf	_p
  2089  0133  01A1               	clrf	_p+1
  2090  0134                     l4471:	
  2091                           
  2092                           ;Button_src.c: 274:                     if (x == 9){
  2093  0134  3009               	movlw	9
  2094  0135  062C               	xorwf	_x,w
  2095  0136  042D               	iorwf	_x+1,w
  2096  0137  1D03               	btfss	3,2
  2097  0138  293D               	goto	l4475
  2098                           
  2099                           ;Button_src.c: 275:                         p = 1;
  2100  0139  3001               	movlw	1
  2101  013A  00A0               	movwf	_p
  2102  013B  3000               	movlw	0
  2103  013C  00A1               	movwf	_p+1
  2104  013D                     l4475:	
  2105                           
  2106                           ;Button_src.c: 279:                     a = time_date_hex_terminator(a,'T');
  2107  013D  3054               	movlw	84
  2108  013E  00E5               	movwf	??_time_settings
  2109  013F  0865               	movf	??_time_settings,w
  2110  0140  00F0               	movwf	time_date_hex_terminator@limiter
  2111  0141  084A               	movf	_a,w
  2112  0142  160A  118A  235A  120A  118A  	fcall	_time_date_hex_terminator
  2113  0147  00E6               	movwf	??_time_settings+1
  2114  0148  0866               	movf	??_time_settings+1,w
  2115  0149  00CA               	movwf	_a
  2116                           
  2117                           ;Button_src.c: 280:                     if(y == 2 && x == 4){
  2118  014A  3002               	movlw	2
  2119  014B  062A               	xorwf	_y,w
  2120  014C  042B               	iorwf	_y+1,w
  2121  014D  1D03               	btfss	3,2
  2122  014E  2958               	goto	l4483
  2123  014F  3004               	movlw	4
  2124  0150  062C               	xorwf	_x,w
  2125  0151  042D               	iorwf	_x+1,w
  2126  0152  1D03               	btfss	3,2
  2127  0153  2958               	goto	l4483
  2128                           
  2129                           ;Button_src.c: 281:                         x = 0;
  2130  0154  01AC               	clrf	_x
  2131  0155  01AD               	clrf	_x+1
  2132                           
  2133                           ;Button_src.c: 282:                         y = 0;
  2134  0156  01AA               	clrf	_y
  2135  0157  01AB               	clrf	_y+1
  2136  0158                     l4483:	
  2137                           
  2138                           ;Button_src.c: 284:                     button_delay();
  2139  0158  160A  118A  23AD  120A  118A  	fcall	_button_delay
  2140  015D                     l4485:	
  2141                           
  2142                           ;Button_src.c: 286:             if(RC7==0 && b == 'y'){
  2143  015D  1283               	bcf	3,5	;RP0=0, select bank0
  2144  015E  1303               	bcf	3,6	;RP1=0, select bank0
  2145  015F  1B87               	btfsc	7,7	;volatile
  2146  0160  29C4               	goto	l4517
  2147  0161  3079               	movlw	121
  2148  0162  0649               	xorwf	_b,w
  2149  0163  1D03               	btfss	3,2
  2150  0164  29C4               	goto	l4517
  2151                           
  2152                           ;Button_src.c: 287:                  if(stats == 1)
  2153  0165  0322               	decf	_stats,w
  2154  0166  0423               	iorwf	_stats+1,w
  2155  0167  1D03               	btfss	3,2
  2156  0168  296D               	goto	l750
  2157                           
  2158                           ;Button_src.c: 288:                    c++;
  2159  0169  3001               	movlw	1
  2160  016A  00E5               	movwf	??_time_settings
  2161  016B  0865               	movf	??_time_settings,w
  2162  016C  07C8               	addwf	_c,f
  2163  016D                     l750:	
  2164                           
  2165                           ;Button_src.c: 289:                 if(stats == 0){
  2166  016D  0822               	movf	_stats,w
  2167  016E  0423               	iorwf	_stats+1,w
  2168  016F  1D03               	btfss	3,2
  2169  0170  2975               	goto	l751
  2170                           
  2171                           ;Button_src.c: 290:                     stats = 1;
  2172  0171  3001               	movlw	1
  2173  0172  00A2               	movwf	_stats
  2174  0173  3000               	movlw	0
  2175  0174  00A3               	movwf	_stats+1
  2176  0175                     l751:	
  2177                           ;Button_src.c: 291:                 }
  2178                           
  2179                           
  2180                           ;Button_src.c: 293:                     t++;
  2181  0175  3001               	movlw	1
  2182  0176  07B0               	addwf	_t,f
  2183  0177  1803               	skipnc
  2184  0178  0AB1               	incf	_t+1,f
  2185  0179  3000               	movlw	0
  2186  017A  07B1               	addwf	_t+1,f
  2187                           
  2188                           ;Button_src.c: 294:                     t = modulus_func(t,10);
  2189  017B  0831               	movf	_t+1,w
  2190  017C  00F8               	movwf	modulus_func@x+1
  2191  017D  0830               	movf	_t,w
  2192  017E  00F7               	movwf	modulus_func@x
  2193  017F  300A               	movlw	10
  2194  0180  00F9               	movwf	modulus_func@y
  2195  0181  3000               	movlw	0
  2196  0182  00FA               	movwf	modulus_func@y+1
  2197  0183  160A  118A  2378  120A  118A  	fcall	_modulus_func
  2198  0188  0878               	movf	?_modulus_func+1,w
  2199  0189  00B1               	movwf	_t+1
  2200  018A  0877               	movf	?_modulus_func,w
  2201  018B  00B0               	movwf	_t
  2202                           
  2203                           ;Button_src.c: 295:                       if (p == 1){
  2204  018C  0320               	decf	_p,w
  2205  018D  0421               	iorwf	_p+1,w
  2206  018E  1D03               	btfss	3,2
  2207  018F  29A9               	goto	l4503
  2208                           
  2209                           ;Button_src.c: 296:                         w = incrementor(w,t,'0');
  2210  0190  082F               	movf	_w+1,w
  2211  0191  00E1               	movwf	incrementor@upper_val+1
  2212  0192  082E               	movf	_w,w
  2213  0193  00E0               	movwf	incrementor@upper_val
  2214  0194  0831               	movf	_t+1,w
  2215  0195  00E3               	movwf	incrementor@lower_val+1
  2216  0196  0830               	movf	_t,w
  2217  0197  00E2               	movwf	incrementor@lower_val
  2218  0198  3030               	movlw	48
  2219  0199  00E5               	movwf	??_time_settings
  2220  019A  0865               	movf	??_time_settings,w
  2221  019B  00E4               	movwf	incrementor@z
  2222  019C  160A  118A  24BC  120A  118A  	fcall	_incrementor
  2223  01A1  00E6               	movwf	??_time_settings+1
  2224  01A2  01E7               	clrf	??_time_settings+2
  2225  01A3  0866               	movf	??_time_settings+1,w
  2226  01A4  00AE               	movwf	_w
  2227  01A5  0867               	movf	??_time_settings+2,w
  2228  01A6  00AF               	movwf	_w+1
  2229                           
  2230                           ;Button_src.c: 297:                         p = 0;
  2231  01A7  01A0               	clrf	_p
  2232  01A8  01A1               	clrf	_p+1
  2233  01A9                     l4503:	
  2234                           
  2235                           ;Button_src.c: 299:                     if (t == 9){
  2236  01A9  3009               	movlw	9
  2237  01AA  0630               	xorwf	_t,w
  2238  01AB  0431               	iorwf	_t+1,w
  2239  01AC  1D03               	btfss	3,2
  2240  01AD  29B2               	goto	l4507
  2241                           
  2242                           ;Button_src.c: 300:                         p = 1;
  2243  01AE  3001               	movlw	1
  2244  01AF  00A0               	movwf	_p
  2245  01B0  3000               	movlw	0
  2246  01B1  00A1               	movwf	_p+1
  2247  01B2                     l4507:	
  2248                           
  2249                           ;Button_src.c: 303:                     if(c == (0x59 + 1)){
  2250  01B2  305A               	movlw	90
  2251  01B3  0648               	xorwf	_c,w
  2252  01B4  1903               	btfsc	3,2
  2253                           
  2254                           ;Button_src.c: 304:                         c = 0x00;
  2255  01B5  01C8               	clrf	_c
  2256                           
  2257                           ;Button_src.c: 306:                     if(w == 6){
  2258  01B6  3006               	movlw	6
  2259  01B7  062E               	xorwf	_w,w
  2260  01B8  042F               	iorwf	_w+1,w
  2261  01B9  1D03               	btfss	3,2
  2262  01BA  29BF               	goto	l4515
  2263                           
  2264                           ;Button_src.c: 307:                         w = 0;
  2265  01BB  01AE               	clrf	_w
  2266  01BC  01AF               	clrf	_w+1
  2267                           
  2268                           ;Button_src.c: 308:                         t = 0;
  2269  01BD  01B0               	clrf	_t
  2270  01BE  01B1               	clrf	_t+1
  2271  01BF                     l4515:	
  2272                           
  2273                           ;Button_src.c: 310:                     button_delay();
  2274  01BF  160A  118A  23AD  120A  118A  	fcall	_button_delay
  2275  01C4                     l4517:	
  2276                           
  2277                           ;Button_src.c: 313:              write_cmd(0x88);
  2278  01C4  3088               	movlw	136
  2279  01C5  160A  118A  2400  120A  118A  	fcall	_write_cmd
  2280                           
  2281                           ;Button_src.c: 314:               if(stats==0){
  2282  01CA  0822               	movf	_stats,w
  2283  01CB  0423               	iorwf	_stats+1,w
  2284  01CC  1D03               	btfss	3,2
  2285  01CD  29D6               	goto	l4523
  2286                           
  2287                           ;Button_src.c: 315:                   table[2] = prev_hex_hours;
  2288  01CE  0842               	movf	_prev_hex_hours,w
  2289  01CF  00E5               	movwf	??_time_settings
  2290  01D0  0865               	movf	??_time_settings,w
  2291  01D1  1683               	bsf	3,5	;RP0=1, select bank1
  2292  01D2  00B5               	movwf	(_table^(0+128)+2)
  2293                           
  2294                           ;Button_src.c: 316:                   table[1] = prev_hex_mins;
  2295  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  2296  01D4  0841               	movf	_prev_hex_mins,w
  2297  01D5  29E1               	goto	L1
  2298  01D6                     l4523:	
  2299                           ;Button_src.c: 317:               }
  2300                           
  2301  01D6  0322               	decf	_stats,w
  2302  01D7  0423               	iorwf	_stats+1,w
  2303  01D8  1D03               	btfss	3,2
  2304  01D9  29E5               	goto	l4527
  2305                           
  2306                           ;Button_src.c: 319:               {;Button_src.c: 320:                  table[2]= a;
  2307  01DA  084A               	movf	_a,w
  2308  01DB  00E5               	movwf	??_time_settings
  2309  01DC  0865               	movf	??_time_settings,w
  2310  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  2311  01DE  00B5               	movwf	(_table^(0+128)+2)
  2312                           
  2313                           ;Button_src.c: 321:                  table[1] = c;
  2314  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  2315  01E0  0848               	movf	_c,w
  2316  01E1                     L1:	
  2317  01E1  00E5               	movwf	??_time_settings
  2318  01E2  0865               	movf	??_time_settings,w
  2319  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  2320  01E4  00B4               	movwf	(_table^(0+128)+1)
  2321  01E5                     l4527:	
  2322                           
  2323                           ;Button_src.c: 325:                     a = time_date_delimiter(a,0x11,'9',4);
  2324  01E5  3011               	movlw	17
  2325  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  2326  01E7  00E5               	movwf	??_time_settings
  2327  01E8  0865               	movf	??_time_settings,w
  2328  01E9  00F0               	movwf	time_date_delimiter@hex
  2329  01EA  3039               	movlw	57
  2330  01EB  00E6               	movwf	??_time_settings+1
  2331  01EC  0866               	movf	??_time_settings+1,w
  2332  01ED  00F1               	movwf	time_date_delimiter@limiter
  2333  01EE  3004               	movlw	4
  2334  01EF  00F2               	movwf	time_date_delimiter@type
  2335  01F0  3000               	movlw	0
  2336  01F1  00F3               	movwf	time_date_delimiter@type+1
  2337  01F2  084A               	movf	_a,w
  2338  01F3  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2339  01F8  00E7               	movwf	??_time_settings+2
  2340  01F9  0867               	movf	??_time_settings+2,w
  2341  01FA  00CA               	movwf	_a
  2342                           
  2343                           ;Button_src.c: 326:                     a = time_date_delimiter(a,0x21,'J',4);
  2344  01FB  3021               	movlw	33
  2345  01FC  00E5               	movwf	??_time_settings
  2346  01FD  0865               	movf	??_time_settings,w
  2347  01FE  00F0               	movwf	time_date_delimiter@hex
  2348  01FF  304A               	movlw	74
  2349  0200  00E6               	movwf	??_time_settings+1
  2350  0201  0866               	movf	??_time_settings+1,w
  2351  0202  00F1               	movwf	time_date_delimiter@limiter
  2352  0203  3004               	movlw	4
  2353  0204  00F2               	movwf	time_date_delimiter@type
  2354  0205  3000               	movlw	0
  2355  0206  00F3               	movwf	time_date_delimiter@type+1
  2356  0207  084A               	movf	_a,w
  2357  0208  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2358  020D  00E7               	movwf	??_time_settings+2
  2359  020E  0867               	movf	??_time_settings+2,w
  2360  020F  00CA               	movwf	_a
  2361                           
  2362                           ;Button_src.c: 328:                     c = time_date_delimiter(c,0x11,'9',5);
  2363  0210  3011               	movlw	17
  2364  0211  00E5               	movwf	??_time_settings
  2365  0212  0865               	movf	??_time_settings,w
  2366  0213  00F0               	movwf	time_date_delimiter@hex
  2367  0214  3039               	movlw	57
  2368  0215  00E6               	movwf	??_time_settings+1
  2369  0216  0866               	movf	??_time_settings+1,w
  2370  0217  00F1               	movwf	time_date_delimiter@limiter
  2371  0218  3005               	movlw	5
  2372  0219  00F2               	movwf	time_date_delimiter@type
  2373  021A  3000               	movlw	0
  2374  021B  00F3               	movwf	time_date_delimiter@type+1
  2375  021C  0848               	movf	_c,w
  2376  021D  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2377  0222  00E7               	movwf	??_time_settings+2
  2378  0223  0867               	movf	??_time_settings+2,w
  2379  0224  00C8               	movwf	_c
  2380                           
  2381                           ;Button_src.c: 329:                     c = time_date_delimiter(c,0x21,'J',5);
  2382  0225  3021               	movlw	33
  2383  0226  00E5               	movwf	??_time_settings
  2384  0227  0865               	movf	??_time_settings,w
  2385  0228  00F0               	movwf	time_date_delimiter@hex
  2386  0229  304A               	movlw	74
  2387  022A  00E6               	movwf	??_time_settings+1
  2388  022B  0866               	movf	??_time_settings+1,w
  2389  022C  00F1               	movwf	time_date_delimiter@limiter
  2390  022D  3005               	movlw	5
  2391  022E  00F2               	movwf	time_date_delimiter@type
  2392  022F  3000               	movlw	0
  2393  0230  00F3               	movwf	time_date_delimiter@type+1
  2394  0231  0848               	movf	_c,w
  2395  0232  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2396  0237  00E7               	movwf	??_time_settings+2
  2397  0238  0867               	movf	??_time_settings+2,w
  2398  0239  00C8               	movwf	_c
  2399                           
  2400                           ;Button_src.c: 330:                     c = time_date_delimiter(c,0x31,'Y',5);
  2401  023A  3031               	movlw	49
  2402  023B  00E5               	movwf	??_time_settings
  2403  023C  0865               	movf	??_time_settings,w
  2404  023D  00F0               	movwf	time_date_delimiter@hex
  2405  023E  3059               	movlw	89
  2406  023F  00E6               	movwf	??_time_settings+1
  2407  0240  0866               	movf	??_time_settings+1,w
  2408  0241  00F1               	movwf	time_date_delimiter@limiter
  2409  0242  3005               	movlw	5
  2410  0243  00F2               	movwf	time_date_delimiter@type
  2411  0244  3000               	movlw	0
  2412  0245  00F3               	movwf	time_date_delimiter@type+1
  2413  0246  0848               	movf	_c,w
  2414  0247  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2415  024C  00E7               	movwf	??_time_settings+2
  2416  024D  0867               	movf	??_time_settings+2,w
  2417  024E  00C8               	movwf	_c
  2418                           
  2419                           ;Button_src.c: 331:                     c = time_date_delimiter(c,0x41,'j',5);
  2420  024F  3041               	movlw	65
  2421  0250  00E5               	movwf	??_time_settings
  2422  0251  0865               	movf	??_time_settings,w
  2423  0252  00F0               	movwf	time_date_delimiter@hex
  2424  0253  306A               	movlw	106
  2425  0254  00E6               	movwf	??_time_settings+1
  2426  0255  0866               	movf	??_time_settings+1,w
  2427  0256  00F1               	movwf	time_date_delimiter@limiter
  2428  0257  3005               	movlw	5
  2429  0258  00F2               	movwf	time_date_delimiter@type
  2430  0259  3000               	movlw	0
  2431  025A  00F3               	movwf	time_date_delimiter@type+1
  2432  025B  0848               	movf	_c,w
  2433  025C  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2434  0261  00E7               	movwf	??_time_settings+2
  2435  0262  0867               	movf	??_time_settings+2,w
  2436  0263  00C8               	movwf	_c
  2437                           
  2438                           ;Button_src.c: 332:                     c = time_date_delimiter(c,0x51,'z',5);
  2439  0264  3051               	movlw	81
  2440  0265  00E5               	movwf	??_time_settings
  2441  0266  0865               	movf	??_time_settings,w
  2442  0267  00F0               	movwf	time_date_delimiter@hex
  2443  0268  307A               	movlw	122
  2444  0269  00E6               	movwf	??_time_settings+1
  2445  026A  0866               	movf	??_time_settings+1,w
  2446  026B  00F1               	movwf	time_date_delimiter@limiter
  2447  026C  3005               	movlw	5
  2448  026D  00F2               	movwf	time_date_delimiter@type
  2449  026E  3000               	movlw	0
  2450  026F  00F3               	movwf	time_date_delimiter@type+1
  2451  0270  0848               	movf	_c,w
  2452  0271  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  2453  0276  00E7               	movwf	??_time_settings+2
  2454  0277  0867               	movf	??_time_settings+2,w
  2455  0278  00C8               	movwf	_c
  2456                           
  2457                           ;Button_src.c: 334:                   RC0 = 0;
  2458  0279  1007               	bcf	7,0	;volatile
  2459                           
  2460                           ;Button_src.c: 335:                   RC1 = 1;
  2461  027A  1487               	bsf	7,1	;volatile
  2462                           
  2463                           ;Button_src.c: 336:                   RC2 = 1;
  2464  027B  1507               	bsf	7,2	;volatile
  2465                           
  2466                           ;Button_src.c: 337:                   RC3 = 1;
  2467  027C  1587               	bsf	7,3	;volatile
  2468                           
  2469                           ;Button_src.c: 338:                     if (RC6 == 0 ){
  2470  027D  1B07               	btfsc	7,6	;volatile
  2471  027E  2A93               	goto	l759
  2472                           
  2473                           ;Button_src.c: 339:                           write_cmd(0x1);
  2474  027F  3001               	movlw	1
  2475  0280  160A  118A  2400  120A  118A  	fcall	_write_cmd
  2476                           
  2477                           ;Button_src.c: 340:                           set_time();
  2478  0285  160A  118A  2506   	fcall	_set_time
  2479                           
  2480                           ;Button_src.c: 341:                           a = 0x00;
  2481  0288  01CA               	clrf	_a
  2482                           
  2483                           ;Button_src.c: 342:                           c = 0x00;
  2484  0289  01C8               	clrf	_c
  2485                           
  2486                           ;Button_src.c: 343:                           x = 0;
  2487  028A  01AC               	clrf	_x
  2488  028B  01AD               	clrf	_x+1
  2489                           
  2490                           ;Button_src.c: 344:                           y = 0;
  2491  028C  01AA               	clrf	_y
  2492  028D  01AB               	clrf	_y+1
  2493                           
  2494                           ;Button_src.c: 345:                           w = 0;
  2495  028E  01AE               	clrf	_w
  2496  028F  01AF               	clrf	_w+1
  2497                           
  2498                           ;Button_src.c: 346:                           t = 0;
  2499  0290  01B0               	clrf	_t
  2500  0291  01B1               	clrf	_t+1
  2501  0292  0008               	return
  2502  0293                     l759:	
  2503                           ;Button_src.c: 349:                             }
  2504                           
  2505                           
  2506                           ;Button_src.c: 350:                   RC0 = 1;
  2507  0293  1407               	bsf	7,0	;volatile
  2508                           
  2509                           ;Button_src.c: 351:                   RC1 = 1;
  2510  0294  1487               	bsf	7,1	;volatile
  2511                           
  2512                           ;Button_src.c: 352:                   RC2 = 0;
  2513  0295  1107               	bcf	7,2	;volatile
  2514                           
  2515                           ;Button_src.c: 353:                   RC3 = 1;
  2516  0296  1587               	bsf	7,3	;volatile
  2517                           
  2518                           ;Button_src.c: 354:                   z = modulus_func(z,2);
  2519  0297  0829               	movf	_z+1,w
  2520  0298  00F8               	movwf	modulus_func@x+1
  2521  0299  0828               	movf	_z,w
  2522  029A  00F7               	movwf	modulus_func@x
  2523  029B  3002               	movlw	2
  2524  029C  00F9               	movwf	modulus_func@y
  2525  029D  3000               	movlw	0
  2526  029E  00FA               	movwf	modulus_func@y+1
  2527  029F  160A  118A  2378  120A  118A  	fcall	_modulus_func
  2528  02A4  0878               	movf	?_modulus_func+1,w
  2529  02A5  00A9               	movwf	_z+1
  2530  02A6  0877               	movf	?_modulus_func,w
  2531  02A7  00A8               	movwf	_z
  2532                           
  2533                           ;Button_src.c: 355:                   if(RC4 == 0 && z ==0){
  2534  02A8  1A07               	btfsc	7,4	;volatile
  2535  02A9  2AE3               	goto	l4581
  2536  02AA  0828               	movf	_z,w
  2537  02AB  0429               	iorwf	_z+1,w
  2538  02AC  1D03               	btfss	3,2
  2539  02AD  2AE3               	goto	l4581
  2540                           
  2541                           ;Button_src.c: 356:                       write_cmd(0x90);
  2542  02AE  3090               	movlw	144
  2543  02AF  160A  118A  2400  120A  118A  	fcall	_write_cmd
  2544                           
  2545                           ;Button_src.c: 357:                       write_char('H');
  2546  02B4  3048               	movlw	72
  2547  02B5  160A  118A  23E9  120A  118A  	fcall	_write_char
  2548                           
  2549                           ;Button_src.c: 358:                       write_char('o');
  2550  02BA  306F               	movlw	111
  2551  02BB  160A  118A  23E9  120A  118A  	fcall	_write_char
  2552                           
  2553                           ;Button_src.c: 359:                       write_char('u');
  2554  02C0  3075               	movlw	117
  2555  02C1  160A  118A  23E9  120A  118A  	fcall	_write_char
  2556                           
  2557                           ;Button_src.c: 360:                       write_char('r');
  2558  02C6  3072               	movlw	114
  2559  02C7  160A  118A  23E9  120A  118A  	fcall	_write_char
  2560                           
  2561                           ;Button_src.c: 361:                       write_char(':');
  2562  02CC  303A               	movlw	58
  2563  02CD  160A  118A  23E9  120A  118A  	fcall	_write_char
  2564                           
  2565                           ;Button_src.c: 362:                       b = 'x';
  2566  02D2  3078               	movlw	120
  2567  02D3  00E5               	movwf	??_time_settings
  2568  02D4  0865               	movf	??_time_settings,w
  2569  02D5  00C9               	movwf	_b
  2570                           
  2571                           ;Button_src.c: 363:                       button_delay();
  2572  02D6  160A  118A  23AD  120A  118A  	fcall	_button_delay
  2573                           
  2574                           ;Button_src.c: 364:                       z++;
  2575  02DB  3001               	movlw	1
  2576  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2577  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2578  02DE  07A8               	addwf	_z,f
  2579  02DF  1803               	skipnc
  2580  02E0  0AA9               	incf	_z+1,f
  2581  02E1  3000               	movlw	0
  2582  02E2  07A9               	addwf	_z+1,f
  2583  02E3                     l4581:	
  2584                           
  2585                           ;Button_src.c: 366:                   RC0 = 1;
  2586  02E3  1407               	bsf	7,0	;volatile
  2587                           
  2588                           ;Button_src.c: 367:                   RC1 = 1;
  2589  02E4  1487               	bsf	7,1	;volatile
  2590                           
  2591                           ;Button_src.c: 368:                   RC2 = 0;
  2592  02E5  1107               	bcf	7,2	;volatile
  2593                           
  2594                           ;Button_src.c: 369:                   RC3 = 1;
  2595  02E6  1587               	bsf	7,3	;volatile
  2596                           
  2597                           ;Button_src.c: 371:                   if(RC4 == 0&& z ==1){
  2598  02E7  1A07               	btfsc	7,4	;volatile
  2599  02E8  2B20               	goto	l762
  2600  02E9  0328               	decf	_z,w
  2601  02EA  0429               	iorwf	_z+1,w
  2602  02EB  1D03               	btfss	3,2
  2603  02EC  2B20               	goto	l762
  2604                           
  2605                           ;Button_src.c: 372:                     z++;
  2606  02ED  3001               	movlw	1
  2607  02EE  07A8               	addwf	_z,f
  2608  02EF  1803               	skipnc
  2609  02F0  0AA9               	incf	_z+1,f
  2610  02F1  3000               	movlw	0
  2611  02F2  07A9               	addwf	_z+1,f
  2612                           
  2613                           ;Button_src.c: 373:                     button_delay();
  2614  02F3  160A  118A  23AD  120A  118A  	fcall	_button_delay
  2615                           
  2616                           ;Button_src.c: 374:                     write_cmd(0x90);
  2617  02F8  3090               	movlw	144
  2618  02F9  160A  118A  2400  120A  118A  	fcall	_write_cmd
  2619                           
  2620                           ;Button_src.c: 375:                     write_char('M');
  2621  02FE  304D               	movlw	77
  2622  02FF  160A  118A  23E9  120A  118A  	fcall	_write_char
  2623                           
  2624                           ;Button_src.c: 376:                     write_char('i');
  2625  0304  3069               	movlw	105
  2626  0305  160A  118A  23E9  120A  118A  	fcall	_write_char
  2627                           
  2628                           ;Button_src.c: 377:                     write_char('n');
  2629  030A  306E               	movlw	110
  2630  030B  160A  118A  23E9  120A  118A  	fcall	_write_char
  2631                           
  2632                           ;Button_src.c: 378:                     write_char('s');
  2633  0310  3073               	movlw	115
  2634  0311  160A  118A  23E9  120A  118A  	fcall	_write_char
  2635                           
  2636                           ;Button_src.c: 379:                     write_char(':');
  2637  0316  303A               	movlw	58
  2638  0317  160A  118A  23E9  120A  118A  	fcall	_write_char
  2639                           
  2640                           ;Button_src.c: 380:                     b = 'y';
  2641  031C  3079               	movlw	121
  2642  031D  00E5               	movwf	??_time_settings
  2643  031E  0865               	movf	??_time_settings,w
  2644  031F  00C9               	movwf	_b
  2645  0320                     l762:	
  2646                           ;Button_src.c: 381:                   }
  2647                           
  2648                           
  2649                           ;Button_src.c: 382:                    write_cmd(0x88);
  2650  0320  3088               	movlw	136
  2651  0321  160A  118A  2400  120A  118A  	fcall	_write_cmd
  2652                           
  2653                           ;Button_src.c: 386:                   RC0 = 1;
  2654  0326  1407               	bsf	7,0	;volatile
  2655                           
  2656                           ;Button_src.c: 387:                   RC1 = 1;
  2657  0327  1487               	bsf	7,1	;volatile
  2658                           
  2659                           ;Button_src.c: 388:                   RC2 = 0;
  2660  0328  1107               	bcf	7,2	;volatile
  2661                           
  2662                           ;Button_src.c: 389:                   RC3 = 1;
  2663  0329  1587               	bsf	7,3	;volatile
  2664                           
  2665                           ;Button_src.c: 391:              write_cmd(0x88);
  2666  032A  3088               	movlw	136
  2667  032B  160A  118A  2400  120A  118A  	fcall	_write_cmd
  2668                           
  2669                           ;Button_src.c: 392:              write_char('T');
  2670  0330  3054               	movlw	84
  2671  0331  160A  118A  23E9  120A  118A  	fcall	_write_char
  2672                           
  2673                           ;Button_src.c: 393:              write_char('i');
  2674  0336  3069               	movlw	105
  2675  0337  160A  118A  23E9  120A  118A  	fcall	_write_char
  2676                           
  2677                           ;Button_src.c: 394:              write_char('m');
  2678  033C  306D               	movlw	109
  2679  033D  160A  118A  23E9  120A  118A  	fcall	_write_char
  2680                           
  2681                           ;Button_src.c: 395:              write_char('e');
  2682  0342  3065               	movlw	101
  2683  0343  160A  118A  23E9  120A  118A  	fcall	_write_char
  2684                           
  2685                           ;Button_src.c: 396:              write_char(':');
  2686  0348  303A               	movlw	58
  2687  0349  160A  118A  23E9  120A  118A  	fcall	_write_char
  2688                           
  2689                           ;Button_src.c: 397:              write_char(y + '0');
  2690  034E  082A               	movf	_y,w
  2691  034F  3E30               	addlw	48
  2692  0350  160A  118A  23E9  120A  118A  	fcall	_write_char
  2693                           
  2694                           ;Button_src.c: 398:              write_char(x + '0');
  2695  0355  082C               	movf	_x,w
  2696  0356  3E30               	addlw	48
  2697  0357  160A  118A  23E9  120A  118A  	fcall	_write_char
  2698                           
  2699                           ;Button_src.c: 399:              write_char(':');
  2700  035C  303A               	movlw	58
  2701  035D  160A  118A  23E9  120A  118A  	fcall	_write_char
  2702                           
  2703                           ;Button_src.c: 400:              write_char(w + '0');
  2704  0362  082E               	movf	_w,w
  2705  0363  3E30               	addlw	48
  2706  0364  160A  118A  23E9  120A  118A  	fcall	_write_char
  2707                           
  2708                           ;Button_src.c: 401:              write_char(t + '0');
  2709  0369  0830               	movf	_t,w
  2710  036A  3E30               	addlw	48
  2711  036B  160A  118A  23E9  120A  118A  	fcall	_write_char
  2712                           
  2713                           ;Button_src.c: 403:             RC0 = 0;
  2714  0370  1007               	bcf	7,0	;volatile
  2715                           
  2716                           ;Button_src.c: 404:             RC1 = 1;
  2717  0371  1487               	bsf	7,1	;volatile
  2718                           
  2719                           ;Button_src.c: 405:             RC2 = 1;
  2720  0372  1507               	bsf	7,2	;volatile
  2721                           
  2722                           ;Button_src.c: 406:             RC3 = 1;
  2723  0373  1587               	bsf	7,3	;volatile
  2724                           
  2725                           ;Button_src.c: 407:             if (RC7 == 0 ){
  2726  0374  1B87               	btfsc	7,7	;volatile
  2727  0375  2892               	goto	l742
  2728                           
  2729                           ;Button_src.c: 408:             a = 0x00;
  2730  0376  01CA               	clrf	_a
  2731                           
  2732                           ;Button_src.c: 409:             c = 0x00;
  2733  0377  01C8               	clrf	_c
  2734                           
  2735                           ;Button_src.c: 410:             x = 0;
  2736  0378  01AC               	clrf	_x
  2737  0379  01AD               	clrf	_x+1
  2738                           
  2739                           ;Button_src.c: 411:             y = 0;
  2740  037A  01AA               	clrf	_y
  2741  037B  01AB               	clrf	_y+1
  2742                           
  2743                           ;Button_src.c: 412:             w = 0;
  2744  037C  01AE               	clrf	_w
  2745  037D  01AF               	clrf	_w+1
  2746                           
  2747                           ;Button_src.c: 413:             t = 0;
  2748  037E  01B0               	clrf	_t
  2749  037F  01B1               	clrf	_t+1
  2750                           
  2751                           ;Button_src.c: 414:             write_cmd(0x1);
  2752  0380  3001               	movlw	1
  2753  0381  160A  118A  2400   	fcall	_write_cmd
  2754                           
  2755                           ;Button_src.c: 415:             break;
  2756  0384  0008               	return
  2757  0385                     __end_of_time_settings:	
  2758                           
  2759                           	psect	text2
  2760  0D7F                     __ptext2:	
  2761 ;; *************** function _thermometer_threshhold_settings *****************
  2762 ;; Defined at:
  2763 ;;		line 23 in file "Button_src.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 300/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2777 ;;      Params:         0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0
  2779 ;;      Temps:          0       3       0       0       0
  2780 ;;      Totals:         0       3       0       0       0
  2781 ;;Total ram usage:        3 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    3
  2784 ;; This function calls:
  2785 ;;		_button_delay
  2786 ;;		_incrementor
  2787 ;;		_modulus_func
  2788 ;;		_time_date_hex_terminator
  2789 ;;		_write_char
  2790 ;;		_write_cmd
  2791 ;; This function is called by:
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _thermometer_threshhold_settings
  2798  0D7F                     _thermometer_threshhold_settings:	
  2799                           
  2800                           ;Button_src.c: 24:  RC0 = 1;
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2804  0D7F  1407               	bsf	7,0	;volatile
  2805                           
  2806                           ;Button_src.c: 25:  RC1 = 0;
  2807  0D80  1087               	bcf	7,1	;volatile
  2808                           
  2809                           ;Button_src.c: 26:  RC2 = 1;
  2810  0D81  1507               	bsf	7,2	;volatile
  2811                           
  2812                           ;Button_src.c: 27:  RC3 = 1;
  2813  0D82  1587               	bsf	7,3	;volatile
  2814                           
  2815                           ;Button_src.c: 28:   if (RC4 == 0){
  2816  0D83  1A07               	btfsc	7,4	;volatile
  2817  0D84  0008               	return
  2818                           
  2819                           ;Button_src.c: 29:       write_cmd(0x1);
  2820  0D85  3001               	movlw	1
  2821  0D86  160A  118A  2400  120A  158A  	fcall	_write_cmd
  2822  0D8B                     l729:	
  2823                           ;Button_src.c: 30:       for(;;){
  2824                           
  2825                           
  2826                           ;Button_src.c: 31:             write_cmd(0x80);
  2827  0D8B  3080               	movlw	128
  2828  0D8C  160A  118A  2400  120A  158A  	fcall	_write_cmd
  2829                           
  2830                           ;Button_src.c: 32:             write_char(' ');
  2831  0D91  3020               	movlw	32
  2832  0D92  160A  118A  23E9  120A  158A  	fcall	_write_char
  2833                           
  2834                           ;Button_src.c: 33:             write_char(' ');
  2835  0D97  3020               	movlw	32
  2836  0D98  160A  118A  23E9  120A  158A  	fcall	_write_char
  2837                           
  2838                           ;Button_src.c: 34:             write_char(' ');
  2839  0D9D  3020               	movlw	32
  2840  0D9E  160A  118A  23E9  120A  158A  	fcall	_write_char
  2841                           
  2842                           ;Button_src.c: 35:             write_char(' ');
  2843  0DA3  3020               	movlw	32
  2844  0DA4  160A  118A  23E9  120A  158A  	fcall	_write_char
  2845                           
  2846                           ;Button_src.c: 36:             write_char(' ');
  2847  0DA9  3020               	movlw	32
  2848  0DAA  160A  118A  23E9  120A  158A  	fcall	_write_char
  2849                           
  2850                           ;Button_src.c: 37:             write_char(' ');
  2851  0DAF  3020               	movlw	32
  2852  0DB0  160A  118A  23E9  120A  158A  	fcall	_write_char
  2853                           
  2854                           ;Button_src.c: 38:             write_char(' ');
  2855  0DB5  3020               	movlw	32
  2856  0DB6  160A  118A  23E9  120A  158A  	fcall	_write_char
  2857                           
  2858                           ;Button_src.c: 39:             write_char(' ');
  2859  0DBB  3020               	movlw	32
  2860  0DBC  160A  118A  23E9  120A  158A  	fcall	_write_char
  2861                           
  2862                           ;Button_src.c: 40:             write_char(' ');
  2863  0DC1  3020               	movlw	32
  2864  0DC2  160A  118A  23E9  120A  158A  	fcall	_write_char
  2865                           
  2866                           ;Button_src.c: 42:             write_cmd(0x90);
  2867  0DC7  3090               	movlw	144
  2868  0DC8  160A  118A  2400  120A  158A  	fcall	_write_cmd
  2869                           
  2870                           ;Button_src.c: 43:             write_char('C');
  2871  0DCD  3043               	movlw	67
  2872  0DCE  160A  118A  23E9  120A  158A  	fcall	_write_char
  2873                           
  2874                           ;Button_src.c: 44:             write_char('u');
  2875  0DD3  3075               	movlw	117
  2876  0DD4  160A  118A  23E9  120A  158A  	fcall	_write_char
  2877                           
  2878                           ;Button_src.c: 45:             write_char('r');
  2879  0DD9  3072               	movlw	114
  2880  0DDA  160A  118A  23E9  120A  158A  	fcall	_write_char
  2881                           
  2882                           ;Button_src.c: 46:             write_char('r');
  2883  0DDF  3072               	movlw	114
  2884  0DE0  160A  118A  23E9  120A  158A  	fcall	_write_char
  2885                           
  2886                           ;Button_src.c: 47:             write_char('e');
  2887  0DE5  3065               	movlw	101
  2888  0DE6  160A  118A  23E9  120A  158A  	fcall	_write_char
  2889                           
  2890                           ;Button_src.c: 48:             write_char('n');
  2891  0DEB  306E               	movlw	110
  2892  0DEC  160A  118A  23E9  120A  158A  	fcall	_write_char
  2893                           
  2894                           ;Button_src.c: 49:             write_char('t');
  2895  0DF1  3074               	movlw	116
  2896  0DF2  160A  118A  23E9  120A  158A  	fcall	_write_char
  2897                           
  2898                           ;Button_src.c: 50:             write_char(':');
  2899  0DF7  303A               	movlw	58
  2900  0DF8  160A  118A  23E9  120A  158A  	fcall	_write_char
  2901                           
  2902                           ;Button_src.c: 53:             write_char(var1 + '0');
  2903  0DFD  084F               	movf	_var1,w
  2904  0DFE  3E30               	addlw	48
  2905  0DFF  160A  118A  23E9  120A  158A  	fcall	_write_char
  2906                           
  2907                           ;Button_src.c: 54:             write_char(var2 + '0');
  2908  0E04  084E               	movf	_var2,w
  2909  0E05  3E30               	addlw	48
  2910  0E06  160A  118A  23E9  120A  158A  	fcall	_write_char
  2911                           
  2912                           ;Button_src.c: 57:             RC0 = 1;
  2913  0E0B  1407               	bsf	7,0	;volatile
  2914                           
  2915                           ;Button_src.c: 58:             RC1 = 0;
  2916  0E0C  1087               	bcf	7,1	;volatile
  2917                           
  2918                           ;Button_src.c: 59:             RC2 = 1;
  2919  0E0D  1507               	bsf	7,2	;volatile
  2920                           
  2921                           ;Button_src.c: 60:             RC3 = 1;
  2922  0E0E  1587               	bsf	7,3	;volatile
  2923                           
  2924                           ;Button_src.c: 62:             if(RC4 == 0 && b =='x'){
  2925  0E0F  1A07               	btfsc	7,4	;volatile
  2926  0E10  2E59               	goto	l4013
  2927  0E11  3078               	movlw	120
  2928  0E12  0649               	xorwf	_b,w
  2929  0E13  1D03               	btfss	3,2
  2930  0E14  2E59               	goto	l4013
  2931                           
  2932                           ;Button_src.c: 63:                     a++;
  2933  0E15  3001               	movlw	1
  2934  0E16  00E5               	movwf	??_thermometer_threshhold_settings
  2935  0E17  0865               	movf	??_thermometer_threshhold_settings,w
  2936  0E18  07CA               	addwf	_a,f
  2937                           
  2938                           ;Button_src.c: 64:                     x++ ;
  2939  0E19  3001               	movlw	1
  2940  0E1A  07AC               	addwf	_x,f
  2941  0E1B  1803               	skipnc
  2942  0E1C  0AAD               	incf	_x+1,f
  2943  0E1D  3000               	movlw	0
  2944  0E1E  07AD               	addwf	_x+1,f
  2945                           
  2946                           ;Button_src.c: 65:                     x = modulus_func(x,10);
  2947  0E1F  082D               	movf	_x+1,w
  2948  0E20  00F8               	movwf	modulus_func@x+1
  2949  0E21  082C               	movf	_x,w
  2950  0E22  00F7               	movwf	modulus_func@x
  2951  0E23  300A               	movlw	10
  2952  0E24  00F9               	movwf	modulus_func@y
  2953  0E25  3000               	movlw	0
  2954  0E26  00FA               	movwf	modulus_func@y+1
  2955  0E27  160A  118A  2378  120A  158A  	fcall	_modulus_func
  2956  0E2C  0878               	movf	?_modulus_func+1,w
  2957  0E2D  00AD               	movwf	_x+1
  2958  0E2E  0877               	movf	?_modulus_func,w
  2959  0E2F  00AC               	movwf	_x
  2960                           
  2961                           ;Button_src.c: 66:                     y = incrementor(y,x,'9');
  2962  0E30  082B               	movf	_y+1,w
  2963  0E31  00E1               	movwf	incrementor@upper_val+1
  2964  0E32  082A               	movf	_y,w
  2965  0E33  00E0               	movwf	incrementor@upper_val
  2966  0E34  082D               	movf	_x+1,w
  2967  0E35  00E3               	movwf	incrementor@lower_val+1
  2968  0E36  082C               	movf	_x,w
  2969  0E37  00E2               	movwf	incrementor@lower_val
  2970  0E38  3039               	movlw	57
  2971  0E39  00E5               	movwf	??_thermometer_threshhold_settings
  2972  0E3A  0865               	movf	??_thermometer_threshhold_settings,w
  2973  0E3B  00E4               	movwf	incrementor@z
  2974  0E3C  160A  118A  24BC  120A  158A  	fcall	_incrementor
  2975  0E41  00E6               	movwf	??_thermometer_threshhold_settings+1
  2976  0E42  01E7               	clrf	??_thermometer_threshhold_settings+2
  2977  0E43  0866               	movf	??_thermometer_threshhold_settings+1,w
  2978  0E44  00AA               	movwf	_y
  2979  0E45  0867               	movf	??_thermometer_threshhold_settings+2,w
  2980  0E46  00AB               	movwf	_y+1
  2981                           
  2982                           ;Button_src.c: 68:                     a = time_date_hex_terminator(a,'T');
  2983  0E47  3054               	movlw	84
  2984  0E48  00E5               	movwf	??_thermometer_threshhold_settings
  2985  0E49  0865               	movf	??_thermometer_threshhold_settings,w
  2986  0E4A  00F0               	movwf	time_date_hex_terminator@limiter
  2987  0E4B  084A               	movf	_a,w
  2988  0E4C  160A  118A  235A  120A  158A  	fcall	_time_date_hex_terminator
  2989  0E51  00E6               	movwf	??_thermometer_threshhold_settings+1
  2990  0E52  0866               	movf	??_thermometer_threshhold_settings+1,w
  2991  0E53  00CA               	movwf	_a
  2992                           
  2993                           ;Button_src.c: 69:                     button_delay();
  2994  0E54  160A  118A  23AD  120A  158A  	fcall	_button_delay
  2995  0E59                     l4013:	
  2996                           
  2997                           ;Button_src.c: 71:             if(RC4==0 && b == 'y'){
  2998  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  2999  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  3000  0E5B  1A07               	btfsc	7,4	;volatile
  3001  0E5C  2E9C               	goto	l4031
  3002  0E5D  3079               	movlw	121
  3003  0E5E  0649               	xorwf	_b,w
  3004  0E5F  1D03               	btfss	3,2
  3005  0E60  2E9C               	goto	l4031
  3006                           
  3007                           ;Button_src.c: 72:                     c++;
  3008  0E61  3001               	movlw	1
  3009  0E62  00E5               	movwf	??_thermometer_threshhold_settings
  3010  0E63  0865               	movf	??_thermometer_threshhold_settings,w
  3011  0E64  07C8               	addwf	_c,f
  3012                           
  3013                           ;Button_src.c: 73:                     t++;
  3014  0E65  3001               	movlw	1
  3015  0E66  07B0               	addwf	_t,f
  3016  0E67  1803               	skipnc
  3017  0E68  0AB1               	incf	_t+1,f
  3018  0E69  3000               	movlw	0
  3019  0E6A  07B1               	addwf	_t+1,f
  3020                           
  3021                           ;Button_src.c: 74:                     t = modulus_func(t,10);
  3022  0E6B  0831               	movf	_t+1,w
  3023  0E6C  00F8               	movwf	modulus_func@x+1
  3024  0E6D  0830               	movf	_t,w
  3025  0E6E  00F7               	movwf	modulus_func@x
  3026  0E6F  300A               	movlw	10
  3027  0E70  00F9               	movwf	modulus_func@y
  3028  0E71  3000               	movlw	0
  3029  0E72  00FA               	movwf	modulus_func@y+1
  3030  0E73  160A  118A  2378  120A  158A  	fcall	_modulus_func
  3031  0E78  0878               	movf	?_modulus_func+1,w
  3032  0E79  00B1               	movwf	_t+1
  3033  0E7A  0877               	movf	?_modulus_func,w
  3034  0E7B  00B0               	movwf	_t
  3035                           
  3036                           ;Button_src.c: 75:                     w = incrementor(w,t,'9');
  3037  0E7C  082F               	movf	_w+1,w
  3038  0E7D  00E1               	movwf	incrementor@upper_val+1
  3039  0E7E  082E               	movf	_w,w
  3040  0E7F  00E0               	movwf	incrementor@upper_val
  3041  0E80  0831               	movf	_t+1,w
  3042  0E81  00E3               	movwf	incrementor@lower_val+1
  3043  0E82  0830               	movf	_t,w
  3044  0E83  00E2               	movwf	incrementor@lower_val
  3045  0E84  3039               	movlw	57
  3046  0E85  00E5               	movwf	??_thermometer_threshhold_settings
  3047  0E86  0865               	movf	??_thermometer_threshhold_settings,w
  3048  0E87  00E4               	movwf	incrementor@z
  3049  0E88  160A  118A  24BC  120A  158A  	fcall	_incrementor
  3050  0E8D  00E6               	movwf	??_thermometer_threshhold_settings+1
  3051  0E8E  01E7               	clrf	??_thermometer_threshhold_settings+2
  3052  0E8F  0866               	movf	??_thermometer_threshhold_settings+1,w
  3053  0E90  00AE               	movwf	_w
  3054  0E91  0867               	movf	??_thermometer_threshhold_settings+2,w
  3055  0E92  00AF               	movwf	_w+1
  3056                           
  3057                           ;Button_src.c: 76:                     if(c == (0x59 + 1)){
  3058  0E93  305A               	movlw	90
  3059  0E94  0648               	xorwf	_c,w
  3060  0E95  1903               	btfsc	3,2
  3061                           
  3062                           ;Button_src.c: 77:                         c = 0x00;
  3063  0E96  01C8               	clrf	_c
  3064                           
  3065                           ;Button_src.c: 79:                     button_delay();
  3066  0E97  160A  118A  23AD  120A  158A  	fcall	_button_delay
  3067  0E9C                     l4031:	
  3068                           
  3069                           ;Button_src.c: 81:             RC0 = 1;
  3070  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0E9E  1407               	bsf	7,0	;volatile
  3073                           
  3074                           ;Button_src.c: 82:             RC1 = 0;
  3075  0E9F  1087               	bcf	7,1	;volatile
  3076                           
  3077                           ;Button_src.c: 83:             RC2 = 1;
  3078  0EA0  1507               	bsf	7,2	;volatile
  3079                           
  3080                           ;Button_src.c: 84:             RC3 = 1;
  3081  0EA1  1587               	bsf	7,3	;volatile
  3082                           
  3083                           ;Button_src.c: 85:             z = modulus_func(z,2);
  3084  0EA2  0829               	movf	_z+1,w
  3085  0EA3  00F8               	movwf	modulus_func@x+1
  3086  0EA4  0828               	movf	_z,w
  3087  0EA5  00F7               	movwf	modulus_func@x
  3088  0EA6  3002               	movlw	2
  3089  0EA7  00F9               	movwf	modulus_func@y
  3090  0EA8  3000               	movlw	0
  3091  0EA9  00FA               	movwf	modulus_func@y+1
  3092  0EAA  160A  118A  2378  120A  158A  	fcall	_modulus_func
  3093  0EAF  0878               	movf	?_modulus_func+1,w
  3094  0EB0  00A9               	movwf	_z+1
  3095  0EB1  0877               	movf	?_modulus_func,w
  3096  0EB2  00A8               	movwf	_z
  3097                           
  3098                           ;Button_src.c: 86:             if(RC4 == 0 && z ==0){
  3099  0EB3  1A07               	btfsc	7,4	;volatile
  3100  0EB4  2F28               	goto	l4081
  3101  0EB5  0828               	movf	_z,w
  3102  0EB6  0429               	iorwf	_z+1,w
  3103  0EB7  1D03               	btfss	3,2
  3104  0EB8  2F28               	goto	l4081
  3105                           
  3106                           ;Button_src.c: 87:             z++;
  3107  0EB9  3001               	movlw	1
  3108  0EBA  07A8               	addwf	_z,f
  3109  0EBB  1803               	skipnc
  3110  0EBC  0AA9               	incf	_z+1,f
  3111  0EBD  3000               	movlw	0
  3112  0EBE  07A9               	addwf	_z+1,f
  3113                           
  3114                           ;Button_src.c: 88:             write_cmd(0x88);
  3115  0EBF  3088               	movlw	136
  3116  0EC0  160A  118A  2400  120A  158A  	fcall	_write_cmd
  3117                           
  3118                           ;Button_src.c: 89:             write_char('D');
  3119  0EC5  3044               	movlw	68
  3120  0EC6  160A  118A  23E9  120A  158A  	fcall	_write_char
  3121                           
  3122                           ;Button_src.c: 90:             write_char('a');
  3123  0ECB  3061               	movlw	97
  3124  0ECC  160A  118A  23E9  120A  158A  	fcall	_write_char
  3125                           
  3126                           ;Button_src.c: 91:             write_char('y');
  3127  0ED1  3079               	movlw	121
  3128  0ED2  160A  118A  23E9  120A  158A  	fcall	_write_char
  3129                           
  3130                           ;Button_src.c: 92:             write_char('_');
  3131  0ED7  305F               	movlw	95
  3132  0ED8  160A  118A  23E9  120A  158A  	fcall	_write_char
  3133                           
  3134                           ;Button_src.c: 93:             write_char('t');
  3135  0EDD  3074               	movlw	116
  3136  0EDE  160A  118A  23E9  120A  158A  	fcall	_write_char
  3137                           
  3138                           ;Button_src.c: 94:             write_char('h');
  3139  0EE3  3068               	movlw	104
  3140  0EE4  160A  118A  23E9  120A  158A  	fcall	_write_char
  3141                           
  3142                           ;Button_src.c: 95:             write_char('r');
  3143  0EE9  3072               	movlw	114
  3144  0EEA  160A  118A  23E9  120A  158A  	fcall	_write_char
  3145                           
  3146                           ;Button_src.c: 96:             write_char('e');
  3147  0EEF  3065               	movlw	101
  3148  0EF0  160A  118A  23E9  120A  158A  	fcall	_write_char
  3149                           
  3150                           ;Button_src.c: 97:             write_char('s');
  3151  0EF5  3073               	movlw	115
  3152  0EF6  160A  118A  23E9  120A  158A  	fcall	_write_char
  3153                           
  3154                           ;Button_src.c: 98:             write_char('h');
  3155  0EFB  3068               	movlw	104
  3156  0EFC  160A  118A  23E9  120A  158A  	fcall	_write_char
  3157                           
  3158                           ;Button_src.c: 99:             write_char('o');
  3159  0F01  306F               	movlw	111
  3160  0F02  160A  118A  23E9  120A  158A  	fcall	_write_char
  3161                           
  3162                           ;Button_src.c: 100:             write_char('l');
  3163  0F07  306C               	movlw	108
  3164  0F08  160A  118A  23E9  120A  158A  	fcall	_write_char
  3165                           
  3166                           ;Button_src.c: 101:             write_char('d');
  3167  0F0D  3064               	movlw	100
  3168  0F0E  160A  118A  23E9  120A  158A  	fcall	_write_char
  3169                           
  3170                           ;Button_src.c: 102:             write_char(':');
  3171  0F13  303A               	movlw	58
  3172  0F14  160A  118A  23E9  120A  158A  	fcall	_write_char
  3173                           
  3174                           ;Button_src.c: 103:             write_char(' ');
  3175  0F19  3020               	movlw	32
  3176  0F1A  160A  118A  23E9  120A  158A  	fcall	_write_char
  3177                           
  3178                           ;Button_src.c: 104:             b = 'x';
  3179  0F1F  3078               	movlw	120
  3180  0F20  00E5               	movwf	??_thermometer_threshhold_settings
  3181  0F21  0865               	movf	??_thermometer_threshhold_settings,w
  3182  0F22  00C9               	movwf	_b
  3183                           
  3184                           ;Button_src.c: 105:             button_delay();
  3185  0F23  160A  118A  23AD  120A  158A  	fcall	_button_delay
  3186  0F28                     l4081:	
  3187                           
  3188                           ;Button_src.c: 108:             RC0 = 1;
  3189  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  3190  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  3191  0F2A  1407               	bsf	7,0	;volatile
  3192                           
  3193                           ;Button_src.c: 109:             RC1 = 0;
  3194  0F2B  1087               	bcf	7,1	;volatile
  3195                           
  3196                           ;Button_src.c: 110:             RC2 = 1;
  3197  0F2C  1507               	bsf	7,2	;volatile
  3198                           
  3199                           ;Button_src.c: 111:             RC3 = 1;
  3200  0F2D  1587               	bsf	7,3	;volatile
  3201                           
  3202                           ;Button_src.c: 112:             if(RC4 == 0 && z ==1){
  3203  0F2E  1A07               	btfsc	7,4	;volatile
  3204  0F2F  2FA3               	goto	l4099
  3205  0F30  0328               	decf	_z,w
  3206  0F31  0429               	iorwf	_z+1,w
  3207  0F32  1D03               	btfss	3,2
  3208  0F33  2FA3               	goto	l4099
  3209                           
  3210                           ;Button_src.c: 113:             write_cmd(0x88);
  3211  0F34  3088               	movlw	136
  3212  0F35  160A  118A  2400  120A  158A  	fcall	_write_cmd
  3213                           
  3214                           ;Button_src.c: 114:             write_char('N');
  3215  0F3A  304E               	movlw	78
  3216  0F3B  160A  118A  23E9  120A  158A  	fcall	_write_char
  3217                           
  3218                           ;Button_src.c: 115:             write_char('i');
  3219  0F40  3069               	movlw	105
  3220  0F41  160A  118A  23E9  120A  158A  	fcall	_write_char
  3221                           
  3222                           ;Button_src.c: 116:             write_char('g');
  3223  0F46  3067               	movlw	103
  3224  0F47  160A  118A  23E9  120A  158A  	fcall	_write_char
  3225                           
  3226                           ;Button_src.c: 117:             write_char('h');
  3227  0F4C  3068               	movlw	104
  3228  0F4D  160A  118A  23E9  120A  158A  	fcall	_write_char
  3229                           
  3230                           ;Button_src.c: 118:             write_char('t');
  3231  0F52  3074               	movlw	116
  3232  0F53  160A  118A  23E9  120A  158A  	fcall	_write_char
  3233                           
  3234                           ;Button_src.c: 119:             write_char('_');
  3235  0F58  305F               	movlw	95
  3236  0F59  160A  118A  23E9  120A  158A  	fcall	_write_char
  3237                           
  3238                           ;Button_src.c: 120:             write_char('h');
  3239  0F5E  3068               	movlw	104
  3240  0F5F  160A  118A  23E9  120A  158A  	fcall	_write_char
  3241                           
  3242                           ;Button_src.c: 121:             write_char('r');
  3243  0F64  3072               	movlw	114
  3244  0F65  160A  118A  23E9  120A  158A  	fcall	_write_char
  3245                           
  3246                           ;Button_src.c: 122:             write_char('e');
  3247  0F6A  3065               	movlw	101
  3248  0F6B  160A  118A  23E9  120A  158A  	fcall	_write_char
  3249                           
  3250                           ;Button_src.c: 123:             write_char('s');
  3251  0F70  3073               	movlw	115
  3252  0F71  160A  118A  23E9  120A  158A  	fcall	_write_char
  3253                           
  3254                           ;Button_src.c: 124:             write_char('h');
  3255  0F76  3068               	movlw	104
  3256  0F77  160A  118A  23E9  120A  158A  	fcall	_write_char
  3257                           
  3258                           ;Button_src.c: 125:             write_char('o');
  3259  0F7C  306F               	movlw	111
  3260  0F7D  160A  118A  23E9  120A  158A  	fcall	_write_char
  3261                           
  3262                           ;Button_src.c: 126:             write_char('l');
  3263  0F82  306C               	movlw	108
  3264  0F83  160A  118A  23E9  120A  158A  	fcall	_write_char
  3265                           
  3266                           ;Button_src.c: 127:             write_char('d');
  3267  0F88  3064               	movlw	100
  3268  0F89  160A  118A  23E9  120A  158A  	fcall	_write_char
  3269                           
  3270                           ;Button_src.c: 128:             write_char(':');
  3271  0F8E  303A               	movlw	58
  3272  0F8F  160A  118A  23E9  120A  158A  	fcall	_write_char
  3273                           
  3274                           ;Button_src.c: 129:             b = 'y';
  3275  0F94  3079               	movlw	121
  3276  0F95  00E5               	movwf	??_thermometer_threshhold_settings
  3277  0F96  0865               	movf	??_thermometer_threshhold_settings,w
  3278  0F97  00C9               	movwf	_b
  3279                           
  3280                           ;Button_src.c: 130:             z++;
  3281  0F98  3001               	movlw	1
  3282  0F99  07A8               	addwf	_z,f
  3283  0F9A  1803               	skipnc
  3284  0F9B  0AA9               	incf	_z+1,f
  3285  0F9C  3000               	movlw	0
  3286  0F9D  07A9               	addwf	_z+1,f
  3287                           
  3288                           ;Button_src.c: 131:             button_delay();
  3289  0F9E  160A  118A  23AD  120A  158A  	fcall	_button_delay
  3290  0FA3                     l4099:	
  3291                           
  3292                           ;Button_src.c: 135:             t = 0;
  3293  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  3294  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  3295  0FA5  01B0               	clrf	_t
  3296  0FA6  01B1               	clrf	_t+1
  3297                           
  3298                           ;Button_src.c: 136:             w = 0;
  3299  0FA7  01AE               	clrf	_w
  3300  0FA8  01AF               	clrf	_w+1
  3301                           
  3302                           ;Button_src.c: 137:             x = 0;
  3303  0FA9  01AC               	clrf	_x
  3304  0FAA  01AD               	clrf	_x+1
  3305                           
  3306                           ;Button_src.c: 138:             y = 0;
  3307  0FAB  01AA               	clrf	_y
  3308  0FAC  01AB               	clrf	_y+1
  3309                           
  3310                           ;Button_src.c: 139:             x = 0x00;
  3311  0FAD  01AC               	clrf	_x
  3312  0FAE  01AD               	clrf	_x+1
  3313                           
  3314                           ;Button_src.c: 196:                 RC0 = 0;
  3315  0FAF  1007               	bcf	7,0	;volatile
  3316                           
  3317                           ;Button_src.c: 197:                 RC1 = 1;
  3318  0FB0  1487               	bsf	7,1	;volatile
  3319                           
  3320                           ;Button_src.c: 198:                 RC2 = 1;
  3321  0FB1  1507               	bsf	7,2	;volatile
  3322                           
  3323                           ;Button_src.c: 199:                 RC3 = 1;
  3324  0FB2  1587               	bsf	7,3	;volatile
  3325                           
  3326                           ;Button_src.c: 200:                     if(RC6 == 0){
  3327  0FB3  1B07               	btfsc	7,6	;volatile
  3328  0FB4  2FED               	goto	l735
  3329                           
  3330                           ;Button_src.c: 201:                         var1 = w;
  3331  0FB5  082E               	movf	_w,w
  3332  0FB6  00E5               	movwf	??_thermometer_threshhold_settings
  3333  0FB7  0865               	movf	??_thermometer_threshhold_settings,w
  3334  0FB8  00CF               	movwf	_var1
  3335                           
  3336                           ;Button_src.c: 202:                         var2 = t;
  3337  0FB9  0830               	movf	_t,w
  3338  0FBA  00E5               	movwf	??_thermometer_threshhold_settings
  3339  0FBB  0865               	movf	??_thermometer_threshhold_settings,w
  3340  0FBC  00CE               	movwf	_var2
  3341                           
  3342                           ;Button_src.c: 203:                         w = 0;
  3343  0FBD  01AE               	clrf	_w
  3344  0FBE  01AF               	clrf	_w+1
  3345                           
  3346                           ;Button_src.c: 204:                         t = 0;
  3347  0FBF  01B0               	clrf	_t
  3348  0FC0  01B1               	clrf	_t+1
  3349                           
  3350                           ;Button_src.c: 205:                         x = 0;
  3351  0FC1  01AC               	clrf	_x
  3352  0FC2  01AD               	clrf	_x+1
  3353                           
  3354                           ;Button_src.c: 206:                         t = 0;
  3355  0FC3  01B0               	clrf	_t
  3356  0FC4  01B1               	clrf	_t+1
  3357                           
  3358                           ;Button_src.c: 208:                         write_cmd(0x1);
  3359  0FC5  3001               	movlw	1
  3360  0FC6  160A  118A  2400  120A  158A  	fcall	_write_cmd
  3361                           
  3362                           ;Button_src.c: 209:                         write_char('S');
  3363  0FCB  3053               	movlw	83
  3364  0FCC  160A  118A  23E9  120A  158A  	fcall	_write_char
  3365                           
  3366                           ;Button_src.c: 210:                         write_char('A');
  3367  0FD1  3041               	movlw	65
  3368  0FD2  160A  118A  23E9  120A  158A  	fcall	_write_char
  3369                           
  3370                           ;Button_src.c: 211:                         write_char('V');
  3371  0FD7  3056               	movlw	86
  3372  0FD8  160A  118A  23E9  120A  158A  	fcall	_write_char
  3373                           
  3374                           ;Button_src.c: 212:                         write_char('E');
  3375  0FDD  3045               	movlw	69
  3376  0FDE  160A  118A  23E9  120A  158A  	fcall	_write_char
  3377                           
  3378                           ;Button_src.c: 213:                         write_char('D');
  3379  0FE3  3044               	movlw	68
  3380  0FE4  160A  118A  23E9  120A  158A  	fcall	_write_char
  3381                           
  3382                           ;Button_src.c: 214:                         button_delay();
  3383  0FE9  160A  118A  23AD   	fcall	_button_delay
  3384  0FEC  0008               	return
  3385  0FED                     l735:	
  3386                           ;Button_src.c: 216:                     }
  3387                           
  3388                           
  3389                           ;Button_src.c: 217:             RC0 = 0;
  3390  0FED  1007               	bcf	7,0	;volatile
  3391                           
  3392                           ;Button_src.c: 218:             RC1 = 1;
  3393  0FEE  1487               	bsf	7,1	;volatile
  3394                           
  3395                           ;Button_src.c: 219:             RC2 = 1;
  3396  0FEF  1507               	bsf	7,2	;volatile
  3397                           
  3398                           ;Button_src.c: 220:             RC3 = 1;
  3399  0FF0  1587               	bsf	7,3	;volatile
  3400                           
  3401                           ;Button_src.c: 221:             if (RC7 == 0 ){
  3402  0FF1  1B87               	btfsc	7,7	;volatile
  3403  0FF2  2D8B               	goto	l729
  3404                           
  3405                           ;Button_src.c: 222:             write_cmd(0x1);
  3406  0FF3  3001               	movlw	1
  3407  0FF4  160A  118A  2400   	fcall	_write_cmd
  3408                           
  3409                           ;Button_src.c: 223:              w = 0;
  3410  0FF7  01AE               	clrf	_w
  3411  0FF8  01AF               	clrf	_w+1
  3412                           
  3413                           ;Button_src.c: 224:                         t = 0;
  3414  0FF9  01B0               	clrf	_t
  3415  0FFA  01B1               	clrf	_t+1
  3416                           
  3417                           ;Button_src.c: 225:                         x = 0;
  3418  0FFB  01AC               	clrf	_x
  3419  0FFC  01AD               	clrf	_x+1
  3420                           
  3421                           ;Button_src.c: 226:                         t = 0;
  3422  0FFD  01B0               	clrf	_t
  3423  0FFE  01B1               	clrf	_t+1
  3424  0FFF  0008               	return
  3425  1000                     __end_of_thermometer_threshhold_settings:	
  3426                           
  3427                           	psect	text3
  3428  083C                     __ptext3:	
  3429 ;; *************** function _set_upper_threshold *****************
  3430 ;; Defined at:
  3431 ;;		line 4 in file "threshold_src.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  upper_val       2    3[COMMON] int 
  3434 ;;  lower_val       2    5[COMMON] int 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      unsigned char 
  3439 ;; Registers used:
  3440 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 300/0
  3443 ;;		On exit  : 300/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3446 ;;      Params:         4       0       0       0       0
  3447 ;;      Locals:         0       0       0       0       0
  3448 ;;      Temps:          1       0       0       0       0
  3449 ;;      Totals:         5       0       0       0       0
  3450 ;;Total ram usage:        5 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    2
  3453 ;; This function calls:
  3454 ;;		_write_char
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _set_upper_threshold
  3462  083C                     _set_upper_threshold:	
  3463                           
  3464                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3468  083C  0874               	movf	set_upper_threshold@upper_val+1,w
  3469  083D  3A80               	xorlw	128
  3470  083E  3C80               	sublw	128
  3471  083F  1D03               	skipz
  3472  0840  2843               	goto	u3875
  3473  0841  0873               	movf	set_upper_threshold@upper_val,w
  3474  0842  025B               	subwf	_shi,w
  3475  0843                     u3875:	
  3476  0843  1C03               	skipc
  3477  0844  288C               	goto	l943
  3478  0845  0876               	movf	set_upper_threshold@lower_val+1,w
  3479  0846  3A80               	xorlw	128
  3480  0847  3C80               	sublw	128
  3481  0848  1D03               	skipz
  3482  0849  284E               	goto	u3885
  3483  084A  0875               	movf	set_upper_threshold@lower_val,w
  3484  084B  1283               	bcf	3,5	;RP0=0, select bank0
  3485  084C  1303               	bcf	3,6	;RP1=0, select bank0
  3486  084D  025A               	subwf	_ge,w
  3487  084E                     u3885:	
  3488  084E  1C03               	skipc
  3489  084F  288C               	goto	l943
  3490                           
  3491                           ;threshold_src.c: 6:     heat_counter ++;
  3492  0850  3001               	movlw	1
  3493  0851  1283               	bcf	3,5	;RP0=0, select bank0
  3494  0852  1303               	bcf	3,6	;RP1=0, select bank0
  3495  0853  07BC               	addwf	_heat_counter,f
  3496  0854  1803               	skipnc
  3497  0855  0ABD               	incf	_heat_counter+1,f
  3498  0856  3000               	movlw	0
  3499  0857  07BD               	addwf	_heat_counter+1,f
  3500                           
  3501                           ;threshold_src.c: 7:     heater_state = '0';
  3502  0858  3030               	movlw	48
  3503  0859  00F7               	movwf	??_set_upper_threshold
  3504  085A  0877               	movf	??_set_upper_threshold,w
  3505  085B  00D1               	movwf	_heater_state
  3506                           
  3507                           ;threshold_src.c: 8:     cooler_state = '1';
  3508  085C  3031               	movlw	49
  3509  085D  00F7               	movwf	??_set_upper_threshold
  3510  085E  0877               	movf	??_set_upper_threshold,w
  3511  085F  00D0               	movwf	_cooler_state
  3512                           
  3513                           ;threshold_src.c: 9:     write_char('W');
  3514  0860  3057               	movlw	87
  3515  0861  160A  118A  23E9  120A  158A  	fcall	_write_char
  3516                           
  3517                           ;threshold_src.c: 10:     write_char('A');
  3518  0866  3041               	movlw	65
  3519  0867  160A  118A  23E9  120A  158A  	fcall	_write_char
  3520                           
  3521                           ;threshold_src.c: 11:     write_char('R');
  3522  086C  3052               	movlw	82
  3523  086D  160A  118A  23E9  120A  158A  	fcall	_write_char
  3524                           
  3525                           ;threshold_src.c: 12:     write_char('M');
  3526  0872  304D               	movlw	77
  3527  0873  160A  118A  23E9  120A  158A  	fcall	_write_char
  3528                           
  3529                           ;threshold_src.c: 13:     if(heat_counter > 1000){
  3530  0878  3003               	movlw	3
  3531  0879  023D               	subwf	_heat_counter+1,w
  3532  087A  30E9               	movlw	233
  3533  087B  1903               	skipnz
  3534  087C  023C               	subwf	_heat_counter,w
  3535  087D  1C03               	skipc
  3536  087E  288C               	goto	l943
  3537                           
  3538                           ;threshold_src.c: 14:         cooler_state = '-';
  3539  087F  302D               	movlw	45
  3540  0880  00F7               	movwf	??_set_upper_threshold
  3541  0881  0877               	movf	??_set_upper_threshold,w
  3542  0882  00D0               	movwf	_cooler_state
  3543                           
  3544                           ;threshold_src.c: 15:         if(count == 2)
  3545  0883  3002               	movlw	2
  3546  0884  063A               	xorwf	_count,w
  3547  0885  043B               	iorwf	_count+1,w
  3548  0886  1D03               	btfss	3,2
  3549  0887  288C               	goto	l943
  3550                           
  3551                           ;threshold_src.c: 16:         buzzer_watcher = 'w';
  3552  0888  3077               	movlw	119
  3553  0889  00F7               	movwf	??_set_upper_threshold
  3554  088A  0877               	movf	??_set_upper_threshold,w
  3555  088B  00D3               	movwf	_buzzer_watcher
  3556  088C                     l943:	
  3557                           ;threshold_src.c: 18:     }
  3558                           
  3559                           
  3560                           ;threshold_src.c: 19:     return buzzer_watcher;
  3561  088C  1283               	bcf	3,5	;RP0=0, select bank0
  3562  088D  1303               	bcf	3,6	;RP1=0, select bank0
  3563  088E  0853               	movf	_buzzer_watcher,w
  3564  088F  0008               	return
  3565  0890                     __end_of_set_upper_threshold:	
  3566                           
  3567                           	psect	text4
  3568  1686                     __ptext4:	
  3569 ;; *************** function _set_lower_threshold *****************
  3570 ;; Defined at:
  3571 ;;		line 41 in file "threshold_src.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  upper_val       2    3[COMMON] int 
  3574 ;;  lower_val       2    5[COMMON] int 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      unsigned char 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 300/0
  3583 ;;		On exit  : 300/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3586 ;;      Params:         4       0       0       0       0
  3587 ;;      Locals:         0       0       0       0       0
  3588 ;;      Temps:          1       0       0       0       0
  3589 ;;      Totals:         5       0       0       0       0
  3590 ;;Total ram usage:        5 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    2
  3593 ;; This function calls:
  3594 ;;		_write_char
  3595 ;; This function is called by:
  3596 ;;		_main
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _set_lower_threshold
  3602  1686                     _set_lower_threshold:	
  3603                           
  3604                           ;threshold_src.c: 42:     if((shi <= upper_val && ge <= lower_val))
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3608  1686  0874               	movf	set_lower_threshold@upper_val+1,w
  3609  1687  3A80               	xorlw	128
  3610  1688  00F7               	movwf	??_set_lower_threshold
  3611  1689  3080               	movlw	128
  3612  168A  0277               	subwf	??_set_lower_threshold,w
  3613  168B  1D03               	skipz
  3614  168C  2E8F               	goto	u3855
  3615  168D  085B               	movf	_shi,w
  3616  168E  0273               	subwf	set_lower_threshold@upper_val,w
  3617  168F                     u3855:	
  3618  168F  1C03               	skipc
  3619  1690  2EC6               	goto	l956
  3620  1691  0876               	movf	set_lower_threshold@lower_val+1,w
  3621  1692  3A80               	xorlw	128
  3622  1693  00F7               	movwf	??_set_lower_threshold
  3623  1694  3080               	movlw	128
  3624  1695  0277               	subwf	??_set_lower_threshold,w
  3625  1696  1D03               	skipz
  3626  1697  2E9C               	goto	u3865
  3627  1698  1283               	bcf	3,5	;RP0=0, select bank0
  3628  1699  1303               	bcf	3,6	;RP1=0, select bank0
  3629  169A  085A               	movf	_ge,w
  3630  169B  0275               	subwf	set_lower_threshold@lower_val,w
  3631  169C                     u3865:	
  3632  169C  1C03               	skipc
  3633  169D  2EC6               	goto	l956
  3634                           
  3635                           ;threshold_src.c: 43:     {;threshold_src.c: 44:     count = 2;
  3636  169E  3002               	movlw	2
  3637  169F  1283               	bcf	3,5	;RP0=0, select bank0
  3638  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  3639  16A1  00BA               	movwf	_count
  3640  16A2  3000               	movlw	0
  3641  16A3  00BB               	movwf	_count+1
  3642                           
  3643                           ;threshold_src.c: 45:     buzzer_watcher = 'x';
  3644  16A4  3078               	movlw	120
  3645  16A5  00F7               	movwf	??_set_lower_threshold
  3646  16A6  0877               	movf	??_set_lower_threshold,w
  3647  16A7  00D3               	movwf	_buzzer_watcher
  3648                           
  3649                           ;threshold_src.c: 46:     heater_state = '0';
  3650  16A8  3030               	movlw	48
  3651  16A9  00F7               	movwf	??_set_lower_threshold
  3652  16AA  0877               	movf	??_set_lower_threshold,w
  3653  16AB  00D1               	movwf	_heater_state
  3654                           
  3655                           ;threshold_src.c: 47:     cooler_state = '0';
  3656  16AC  3030               	movlw	48
  3657  16AD  00F7               	movwf	??_set_lower_threshold
  3658  16AE  0877               	movf	??_set_lower_threshold,w
  3659  16AF  00D0               	movwf	_cooler_state
  3660                           
  3661                           ;threshold_src.c: 48:     write_char('O');
  3662  16B0  304F               	movlw	79
  3663  16B1  160A  118A  23E9  160A  118A  	fcall	_write_char
  3664                           
  3665                           ;threshold_src.c: 49:     write_char('K');
  3666  16B6  304B               	movlw	75
  3667  16B7  160A  118A  23E9  160A  118A  	fcall	_write_char
  3668                           
  3669                           ;threshold_src.c: 50:     write_char(' ');
  3670  16BC  3020               	movlw	32
  3671  16BD  160A  118A  23E9  160A  118A  	fcall	_write_char
  3672                           
  3673                           ;threshold_src.c: 51:     write_char(' ');
  3674  16C2  3020               	movlw	32
  3675  16C3  160A  118A  23E9   	fcall	_write_char
  3676  16C6                     l956:	
  3677                           ;threshold_src.c: 52:     }
  3678                           
  3679                           
  3680                           ;threshold_src.c: 53:     return buzzer_watcher;
  3681  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  3682  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  3683  16C8  0853               	movf	_buzzer_watcher,w
  3684  16C9  0008               	return
  3685  16CA                     __end_of_set_lower_threshold:	
  3686                           
  3687                           	psect	text5
  3688  1417                     __ptext5:	
  3689 ;; *************** function _set_beep_threshhold *****************
  3690 ;; Defined at:
  3691 ;;		line 5 in file "buzzer_src.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  x               1    wreg     unsigned char 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  x               1    2[COMMON] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 300/0
  3702 ;;		On exit  : 300/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3705 ;;      Params:         0       0       0       0       0
  3706 ;;      Locals:         1       0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0
  3708 ;;      Totals:         1       0       0       0       0
  3709 ;;Total ram usage:        1 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    1
  3712 ;; This function calls:
  3713 ;;		_button_delay
  3714 ;; This function is called by:
  3715 ;;		_main
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           
  3720                           ;psect for function _set_beep_threshhold
  3721  1417                     _set_beep_threshhold:	
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3725                           ;set_beep_threshhold@x stored from wreg
  3726  1417  00F2               	movwf	set_beep_threshhold@x
  3727                           
  3728                           ;buzzer_src.c: 6:     if (x == 'w'){
  3729  1418  3077               	movlw	119
  3730  1419  0672               	xorwf	set_beep_threshhold@x,w
  3731  141A  1D03               	btfss	3,2
  3732  141B  2C30               	goto	l4723
  3733                           
  3734                           ;buzzer_src.c: 7:         RE2 = 1;
  3735  141C  1509               	bsf	9,2	;volatile
  3736                           
  3737                           ;buzzer_src.c: 8:         button_delay();
  3738  141D  160A  118A  23AD  160A  118A  	fcall	_button_delay
  3739                           
  3740                           ;buzzer_src.c: 9:         RE2 = 0;
  3741  1422  1283               	bcf	3,5	;RP0=0, select bank0
  3742  1423  1303               	bcf	3,6	;RP1=0, select bank0
  3743  1424  1109               	bcf	9,2	;volatile
  3744                           
  3745                           ;buzzer_src.c: 10:         button_delay();
  3746  1425  160A  118A  23AD  160A  118A  	fcall	_button_delay
  3747                           
  3748                           ;buzzer_src.c: 11:         RE2 = 1;
  3749  142A  1283               	bcf	3,5	;RP0=0, select bank0
  3750  142B  1303               	bcf	3,6	;RP1=0, select bank0
  3751  142C  1509               	bsf	9,2	;volatile
  3752                           
  3753                           ;buzzer_src.c: 12:         button_delay();
  3754  142D  160A  118A  23AD   	fcall	_button_delay
  3755  1430                     l4723:	
  3756                           
  3757                           ;buzzer_src.c: 13:         RE2 = 0;
  3758  1430  1283               	bcf	3,5	;RP0=0, select bank0
  3759  1431  1303               	bcf	3,6	;RP1=0, select bank0
  3760  1432  1109               	bcf	9,2	;volatile
  3761  1433  0008               	return
  3762  1434                     __end_of_set_beep_threshhold:	
  3763                           
  3764                           	psect	text6
  3765  155A                     __ptext6:	
  3766 ;; *************** function _reset_alarm *****************
  3767 ;; Defined at:
  3768 ;;		line 56 in file "threshold_src.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      unsigned char 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 300/0
  3779 ;;		On exit  : 300/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0
  3784 ;;      Temps:          1       0       0       0       0
  3785 ;;      Totals:         1       0       0       0       0
  3786 ;;Total ram usage:        1 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    2
  3789 ;; This function calls:
  3790 ;;		_write_char
  3791 ;; This function is called by:
  3792 ;;		_main
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _reset_alarm
  3798  155A                     _reset_alarm:	
  3799                           
  3800                           ;threshold_src.c: 57:     RC0 = 1;
  3801                           
  3802                           ;incstack = 0
  3803                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3804  155A  1407               	bsf	7,0	;volatile
  3805                           
  3806                           ;threshold_src.c: 58:     RC1 = 1;
  3807  155B  1487               	bsf	7,1	;volatile
  3808                           
  3809                           ;threshold_src.c: 59:     RC2 = 1;
  3810  155C  1507               	bsf	7,2	;volatile
  3811                           
  3812                           ;threshold_src.c: 60:     RC3 = 0;
  3813  155D  1187               	bcf	7,3	;volatile
  3814                           
  3815                           ;threshold_src.c: 61:     if(RC4 == 0){
  3816  155E  1A07               	btfsc	7,4	;volatile
  3817  155F  2D84               	goto	l4709
  3818                           
  3819                           ;threshold_src.c: 62:         count = 0;
  3820  1560  01BA               	clrf	_count
  3821  1561  01BB               	clrf	_count+1
  3822                           
  3823                           ;threshold_src.c: 63:         buzzer_watcher = 'x';
  3824  1562  3078               	movlw	120
  3825  1563  00F3               	movwf	??_reset_alarm
  3826  1564  0873               	movf	??_reset_alarm,w
  3827  1565  00D3               	movwf	_buzzer_watcher
  3828                           
  3829                           ;threshold_src.c: 64:         heat_counter = 0;
  3830  1566  01BC               	clrf	_heat_counter
  3831  1567  01BD               	clrf	_heat_counter+1
  3832                           
  3833                           ;threshold_src.c: 65:         write_char('R');
  3834  1568  3052               	movlw	82
  3835  1569  160A  118A  23E9  160A  118A  	fcall	_write_char
  3836                           
  3837                           ;threshold_src.c: 66:         write_char('E');
  3838  156E  3045               	movlw	69
  3839  156F  160A  118A  23E9  160A  118A  	fcall	_write_char
  3840                           
  3841                           ;threshold_src.c: 67:         write_char('S');
  3842  1574  3053               	movlw	83
  3843  1575  160A  118A  23E9  160A  118A  	fcall	_write_char
  3844                           
  3845                           ;threshold_src.c: 68:         write_char('E');
  3846  157A  3045               	movlw	69
  3847  157B  160A  118A  23E9  160A  118A  	fcall	_write_char
  3848                           
  3849                           ;threshold_src.c: 69:         write_char('T');
  3850  1580  3054               	movlw	84
  3851  1581  160A  118A  23E9   	fcall	_write_char
  3852  1584                     l4709:	
  3853                           
  3854                           ;threshold_src.c: 71:     return buzzer_watcher;
  3855  1584  0853               	movf	_buzzer_watcher,w
  3856  1585  0008               	return
  3857  1586                     __end_of_reset_alarm:	
  3858                           
  3859                           	psect	text7
  3860  1499                     __ptext7:	
  3861 ;; *************** function _lcd_init *****************
  3862 ;; Defined at:
  3863 ;;		line 14 in file "LCD_src.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  i               2    0        int 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 300/100
  3874 ;;		On exit  : 300/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3877 ;;      Params:         0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0
  3880 ;;      Totals:         0       0       0       0       0
  3881 ;;Total ram usage:        0 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    2
  3884 ;; This function calls:
  3885 ;;		_delay_screen
  3886 ;;		_write_cmd
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _lcd_init
  3894  1499                     _lcd_init:	
  3895                           
  3896                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3900  1499  0185               	clrf	5	;volatile
  3901                           
  3902                           ;LCD_src.c: 18:  RA0=0;
  3903  149A  1283               	bcf	3,5	;RP0=0, select bank0
  3904  149B  1005               	bcf	5,0	;volatile
  3905                           
  3906                           ;LCD_src.c: 19:  delay_screen();
  3907  149C  160A  118A  2399  160A  118A  	fcall	_delay_screen
  3908                           
  3909                           ;LCD_src.c: 20:  RA0=1;
  3910  14A1  1283               	bcf	3,5	;RP0=0, select bank0
  3911  14A2  1303               	bcf	3,6	;RP1=0, select bank0
  3912  14A3  1405               	bsf	5,0	;volatile
  3913                           
  3914                           ;LCD_src.c: 21:  RA2=1;
  3915  14A4  1505               	bsf	5,2	;volatile
  3916                           
  3917                           ;LCD_src.c: 22:  write_cmd(0x30);
  3918  14A5  3030               	movlw	48
  3919  14A6  160A  118A  2400  160A  118A  	fcall	_write_cmd
  3920                           
  3921                           ;LCD_src.c: 23:  write_cmd(0x01);
  3922  14AB  3001               	movlw	1
  3923  14AC  160A  118A  2400  160A  118A  	fcall	_write_cmd
  3924                           
  3925                           ;LCD_src.c: 24:  write_cmd(0x06);
  3926  14B1  3006               	movlw	6
  3927  14B2  160A  118A  2400  160A  118A  	fcall	_write_cmd
  3928                           
  3929                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3930  14B7  300C               	movlw	12
  3931  14B8  160A  118A  2400   	fcall	_write_cmd
  3932  14BB  0008               	return
  3933  14BC                     __end_of_lcd_init:	
  3934                           
  3935                           	psect	text8
  3936  13D5                     __ptext8:	
  3937 ;; *************** function _initialise_buttons *****************
  3938 ;; Defined at:
  3939 ;;		line 11 in file "Button_src.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2
  3948 ;; Tracked objects:
  3949 ;;		On entry : 300/0
  3950 ;;		On exit  : 300/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3953 ;;      Params:         0       0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0
  3956 ;;      Totals:         0       0       0       0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _initialise_buttons
  3968  13D5                     _initialise_buttons:	
  3969                           
  3970                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3974  13D5  3006               	movlw	6
  3975  13D6  1683               	bsf	3,5	;RP0=1, select bank1
  3976  13D7  009F               	movwf	31	;volatile
  3977                           
  3978                           ;Button_src.c: 13:     TRISC = 0xf0;
  3979  13D8  30F0               	movlw	240
  3980  13D9  0087               	movwf	7	;volatile
  3981                           
  3982                           ;Button_src.c: 14:     a = 0x00;
  3983  13DA  1283               	bcf	3,5	;RP0=0, select bank0
  3984  13DB  01CA               	clrf	_a
  3985                           
  3986                           ;Button_src.c: 15:     b = 0x00;
  3987  13DC  01C9               	clrf	_b
  3988                           
  3989                           ;Button_src.c: 16:     c = 0x00;
  3990  13DD  01C8               	clrf	_c
  3991                           
  3992                           ;Button_src.c: 17:     z = 0;
  3993  13DE  01A8               	clrf	_z
  3994  13DF  01A9               	clrf	_z+1
  3995                           
  3996                           ;Button_src.c: 18:     day_low = 0;
  3997  13E0  01A6               	clrf	_day_low
  3998  13E1  01A7               	clrf	_day_low+1
  3999                           
  4000                           ;Button_src.c: 19:     stats = 1;
  4001  13E2  3001               	movlw	1
  4002  13E3  00A2               	movwf	_stats
  4003  13E4  3000               	movlw	0
  4004  13E5  00A3               	movwf	_stats+1
  4005                           
  4006                           ;Button_src.c: 20:     p = 0;
  4007  13E6  01A0               	clrf	_p
  4008  13E7  01A1               	clrf	_p+1
  4009  13E8  0008               	return
  4010  13E9                     __end_of_initialise_buttons:	
  4011                           
  4012                           	psect	text9
  4013  1337                     __ptext9:	
  4014 ;; *************** function _init_temp *****************
  4015 ;; Defined at:
  4016 ;;		line 6 in file "Thermometer_src.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		status,2
  4025 ;; Tracked objects:
  4026 ;;		On entry : 200/100
  4027 ;;		On exit  : 300/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4030 ;;      Params:         0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0
  4033 ;;      Totals:         0       0       0       0       0
  4034 ;;Total ram usage:        0 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_main
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           
  4044                           ;psect for function _init_temp
  4045  1337                     _init_temp:	
  4046                           
  4047                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4048                           
  4049                           ;incstack = 0
  4050                           ; Regs used in _init_temp: [status,2]
  4051  1337  1683               	bsf	3,5	;RP0=1, select bank1
  4052  1338  0189               	clrf	9	;volatile
  4053                           
  4054                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4055  1339  1283               	bcf	3,5	;RP0=0, select bank0
  4056  133A  0189               	clrf	9	;volatile
  4057  133B  0008               	return
  4058  133C                     __end_of_init_temp:	
  4059                           
  4060                           	psect	text10
  4061  133C                     __ptext10:	
  4062 ;; *************** function _init *****************
  4063 ;; Defined at:
  4064 ;;		line 5 in file "LCD_src.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;		None
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      void 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2
  4073 ;; Tracked objects:
  4074 ;;		On entry : 300/0
  4075 ;;		On exit  : 300/100
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4078 ;;      Params:         0       0       0       0       0
  4079 ;;      Locals:         0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0
  4081 ;;      Totals:         0       0       0       0       0
  4082 ;;Total ram usage:        0 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function _init
  4093  133C                     _init:	
  4094                           
  4095                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _init: [wreg+status,2]
  4099  133C  3007               	movlw	7
  4100  133D  1683               	bsf	3,5	;RP0=1, select bank1
  4101  133E  009F               	movwf	31	;volatile
  4102                           
  4103                           ;LCD_src.c: 8:  TRISA0=1;
  4104  133F  1405               	bsf	5,0	;volatile
  4105                           
  4106                           ;LCD_src.c: 9:  TRISD=0X00;
  4107  1340  0188               	clrf	8	;volatile
  4108                           
  4109                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4110  1341  0181               	clrf	1	;volatile
  4111                           
  4112                           ;LCD_src.c: 11:  TRISE = 0X00;
  4113  1342  0189               	clrf	9	;volatile
  4114  1343  0008               	return
  4115  1344                     __end_of_init:	
  4116                           
  4117                           	psect	text11
  4118  152E                     __ptext11:	
  4119 ;; *************** function _get_time *****************
  4120 ;; Defined at:
  4121 ;;		line 23 in file "clock_src.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  i               2    6[COMMON] int 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 300/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4135 ;;      Params:         0       0       0       0       0
  4136 ;;      Locals:         2       0       0       0       0
  4137 ;;      Temps:          1       0       0       0       0
  4138 ;;      Totals:         3       0       0       0       0
  4139 ;;Total ram usage:        3 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    1
  4142 ;; This function calls:
  4143 ;;		_time_read_1
  4144 ;;		_time_write_1
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           
  4151                           ;psect for function _get_time
  4152  152E                     _get_time:	
  4153                           
  4154                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4155                           
  4156                           ;incstack = 0
  4157                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4158  152E  1283               	bcf	3,5	;RP0=0, select bank0
  4159  152F  1303               	bcf	3,6	;RP1=0, select bank0
  4160  1530  1686               	bsf	6,5	;volatile
  4161                           
  4162                           ;clock_src.c: 27:    time_write_1(0xbf);
  4163  1531  30BF               	movlw	191
  4164  1532  160A  118A  24E0  160A  118A  	fcall	_time_write_1
  4165                           
  4166                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4167  1537  01F6               	clrf	get_time@i
  4168  1538  01F7               	clrf	get_time@i+1
  4169  1539                     l3897:	
  4170                           
  4171                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4172  1539  160A  118A  2586  160A  118A  	fcall	_time_read_1
  4173  153E  00F5               	movwf	??_get_time
  4174  153F  0876               	movf	get_time@i,w
  4175  1540  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4176  1541  0084               	movwf	4
  4177  1542  0875               	movf	??_get_time,w
  4178  1543  1383               	bcf	3,7	;select IRP bank1
  4179  1544  0080               	movwf	0
  4180                           
  4181                           ;clock_src.c: 31:      }
  4182  1545  3001               	movlw	1
  4183  1546  07F6               	addwf	get_time@i,f
  4184  1547  1803               	skipnc
  4185  1548  0AF7               	incf	get_time@i+1,f
  4186  1549  3000               	movlw	0
  4187  154A  07F7               	addwf	get_time@i+1,f
  4188  154B  0877               	movf	get_time@i+1,w
  4189  154C  3A80               	xorlw	128
  4190  154D  00FF               	movwf	127
  4191  154E  3080               	movlw	128
  4192  154F  027F               	subwf	127,w
  4193  1550  1D03               	skipz
  4194  1551  2D54               	goto	u3105
  4195  1552  3007               	movlw	7
  4196  1553  0276               	subwf	get_time@i,w
  4197  1554                     u3105:	
  4198  1554  1C03               	skipc
  4199  1555  2D39               	goto	l3897
  4200                           
  4201                           ;clock_src.c: 32:    RB5=0;
  4202  1556  1283               	bcf	3,5	;RP0=0, select bank0
  4203  1557  1303               	bcf	3,6	;RP1=0, select bank0
  4204  1558  1286               	bcf	6,5	;volatile
  4205  1559  0008               	return
  4206  155A                     __end_of_get_time:	
  4207                           
  4208                           	psect	text12
  4209  1586                     __ptext12:	
  4210 ;; *************** function _time_read_1 *****************
  4211 ;; Defined at:
  4212 ;;		line 130 in file "clock_src.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  j               2    2[COMMON] int 
  4217 ;;  time_rx         1    4[COMMON] unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      unsigned char 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0, btemp+1
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 300/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4227 ;;      Params:         0       0       0       0       0
  4228 ;;      Locals:         3       0       0       0       0
  4229 ;;      Temps:          2       0       0       0       0
  4230 ;;      Totals:         5       0       0       0       0
  4231 ;;Total ram usage:        5 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_get_time
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _time_read_1
  4242  1586                     _time_read_1:	
  4243                           
  4244                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4245                           
  4246                           ;incstack = 0
  4247                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4248  1586  01F4               	clrf	time_read_1@time_rx
  4249                           
  4250                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4251  1587  1683               	bsf	3,5	;RP0=1, select bank1
  4252  1588  1303               	bcf	3,6	;RP1=0, select bank1
  4253  1589  1606               	bsf	6,4	;volatile
  4254                           
  4255                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4256  158A  01F2               	clrf	time_read_1@j
  4257  158B  01F3               	clrf	time_read_1@j+1
  4258  158C                     l478:	
  4259                           
  4260                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4261  158C  1283               	bcf	3,5	;RP0=0, select bank0
  4262  158D  1303               	bcf	3,6	;RP1=0, select bank0
  4263  158E  1006               	bcf	6,0	;volatile
  4264                           
  4265                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4266  158F  0874               	movf	time_read_1@time_rx,w
  4267  1590  00F0               	movwf	??_time_read_1
  4268  1591  1003               	clrc
  4269  1592  0C70               	rrf	??_time_read_1,w
  4270  1593  00F1               	movwf	??_time_read_1+1
  4271  1594  0871               	movf	??_time_read_1+1,w
  4272  1595  00F4               	movwf	time_read_1@time_rx
  4273                           
  4274                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4275  1596  1E06               	btfss	6,4	;volatile
  4276  1597  2D9D               	goto	l3491
  4277  1598  0874               	movf	time_read_1@time_rx,w
  4278  1599  3880               	iorlw	128
  4279  159A  00F0               	movwf	??_time_read_1
  4280  159B  0870               	movf	??_time_read_1,w
  4281  159C  00F4               	movwf	time_read_1@time_rx
  4282  159D                     l3491:	
  4283                           
  4284                           ;clock_src.c: 141:        RB0=1;
  4285  159D  1406               	bsf	6,0	;volatile
  4286                           
  4287                           ;clock_src.c: 142:       }
  4288  159E  3001               	movlw	1
  4289  159F  07F2               	addwf	time_read_1@j,f
  4290  15A0  1803               	skipnc
  4291  15A1  0AF3               	incf	time_read_1@j+1,f
  4292  15A2  3000               	movlw	0
  4293  15A3  07F3               	addwf	time_read_1@j+1,f
  4294  15A4  0873               	movf	time_read_1@j+1,w
  4295  15A5  3A80               	xorlw	128
  4296  15A6  00FF               	movwf	127
  4297  15A7  3080               	movlw	128
  4298  15A8  027F               	subwf	127,w
  4299  15A9  1D03               	skipz
  4300  15AA  2DAD               	goto	u2285
  4301  15AB  3008               	movlw	8
  4302  15AC  0272               	subwf	time_read_1@j,w
  4303  15AD                     u2285:	
  4304  15AD  1C03               	skipc
  4305  15AE  2D8C               	goto	l478
  4306                           
  4307                           ;clock_src.c: 143:     TRISB4=0;
  4308  15AF  1683               	bsf	3,5	;RP0=1, select bank1
  4309  15B0  1303               	bcf	3,6	;RP1=0, select bank1
  4310  15B1  1206               	bcf	6,4	;volatile
  4311                           
  4312                           ;clock_src.c: 144:     RB0=0;
  4313  15B2  1283               	bcf	3,5	;RP0=0, select bank0
  4314  15B3  1006               	bcf	6,0	;volatile
  4315                           
  4316                           ;clock_src.c: 145:     return(time_rx);
  4317  15B4  0874               	movf	time_read_1@time_rx,w
  4318  15B5  0008               	return
  4319  15B6                     __end_of_time_read_1:	
  4320                           
  4321                           	psect	text13
  4322  0935                     __ptext13:	
  4323 ;; *************** function _get_temp *****************
  4324 ;; Defined at:
  4325 ;;		line 89 in file "Thermometer_src.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  i               2    0        int 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 200/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4339 ;;      Params:         0       0       0       0       0
  4340 ;;      Locals:         0       0       0       0       0
  4341 ;;      Temps:          0       4       0       0       0
  4342 ;;      Totals:         0       4       0       0       0
  4343 ;;Total ram usage:        4 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    2
  4346 ;; This function calls:
  4347 ;;		___lbdiv
  4348 ;;		___lbmod
  4349 ;;		___lwdiv
  4350 ;;		___lwmod
  4351 ;;		_delay2
  4352 ;;		_read_byte
  4353 ;;		_reset_temp
  4354 ;;		_write_byte
  4355 ;; This function is called by:
  4356 ;;		_main
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           
  4361                           ;psect for function _get_temp
  4362  0935                     _get_temp:	
  4363                           
  4364                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4368  0935  1683               	bsf	3,5	;RP0=1, select bank1
  4369  0936  1409               	bsf	9,0	;volatile
  4370                           
  4371                           ;Thermometer_src.c: 93: reset_temp();
  4372  0937  160A  118A  261C  120A  158A  	fcall	_reset_temp
  4373                           
  4374                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4375  093C  30CC               	movlw	204
  4376  093D  160A  118A  2650  120A  158A  	fcall	_write_byte
  4377                           
  4378                           ;Thermometer_src.c: 95: delay2();
  4379  0942  160A  118A  23C1  120A  158A  	fcall	_delay2
  4380                           
  4381                           ;Thermometer_src.c: 96: write_byte(0X44);
  4382  0947  3044               	movlw	68
  4383  0948  160A  118A  2650  120A  158A  	fcall	_write_byte
  4384                           
  4385                           ;Thermometer_src.c: 98: reset_temp();
  4386  094D  160A  118A  261C  120A  158A  	fcall	_reset_temp
  4387                           
  4388                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4389  0952  30CC               	movlw	204
  4390  0953  160A  118A  2650  120A  158A  	fcall	_write_byte
  4391                           
  4392                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4393  0958  30BE               	movlw	190
  4394  0959  160A  118A  2650  120A  158A  	fcall	_write_byte
  4395                           
  4396                           ;Thermometer_src.c: 101: TLV=read_byte();
  4397  095E  160A  118A  25E8  120A  158A  	fcall	_read_byte
  4398  0963  1283               	bcf	3,5	;RP0=0, select bank0
  4399  0964  1303               	bcf	3,6	;RP1=0, select bank0
  4400  0965  00E0               	movwf	??_get_temp
  4401  0966  0860               	movf	??_get_temp,w
  4402  0967  00DF               	movwf	_TLV
  4403                           
  4404                           ;Thermometer_src.c: 102: THV=read_byte();
  4405  0968  160A  118A  25E8  120A  158A  	fcall	_read_byte
  4406  096D  1283               	bcf	3,5	;RP0=0, select bank0
  4407  096E  1303               	bcf	3,6	;RP1=0, select bank0
  4408  096F  00E0               	movwf	??_get_temp
  4409  0970  0860               	movf	??_get_temp,w
  4410  0971  00DE               	movwf	_THV
  4411                           
  4412                           ;Thermometer_src.c: 103: TRISE0 =1;
  4413  0972  1683               	bsf	3,5	;RP0=1, select bank1
  4414  0973  1409               	bsf	9,0	;volatile
  4415                           
  4416                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4417  0974  1283               	bcf	3,5	;RP0=0, select bank0
  4418  0975  085E               	movf	_THV,w
  4419  0976  00E0               	movwf	??_get_temp
  4420  0977  3004               	movlw	4
  4421  0978                     u3035:	
  4422  0978  1003               	clrc
  4423  0979  0DE0               	rlf	??_get_temp,f
  4424  097A  3EFF               	addlw	-1
  4425  097B  1D03               	skipz
  4426  097C  2978               	goto	u3035
  4427  097D  303F               	movlw	63
  4428  097E  0560               	andwf	??_get_temp,w
  4429  097F  00E1               	movwf	??_get_temp+1
  4430  0980  085F               	movf	_TLV,w
  4431  0981  00E2               	movwf	??_get_temp+2
  4432  0982  3004               	movlw	4
  4433  0983                     u3045:	
  4434  0983  1003               	clrc
  4435  0984  0CE2               	rrf	??_get_temp+2,f
  4436  0985  3EFF               	addlw	-1
  4437  0986  1D03               	skipz
  4438  0987  2983               	goto	u3045
  4439  0988  0862               	movf	??_get_temp+2,w
  4440  0989  0461               	iorwf	??_get_temp+1,w
  4441  098A  00E3               	movwf	??_get_temp+3
  4442  098B  0863               	movf	??_get_temp+3,w
  4443  098C  00DD               	movwf	_TZ
  4444                           
  4445                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4446  098D  085F               	movf	_TLV,w
  4447  098E  00E0               	movwf	??_get_temp
  4448  098F  3003               	movlw	3
  4449  0990                     u3055:	
  4450  0990  1003               	clrc
  4451  0991  0DE0               	rlf	??_get_temp,f
  4452  0992  3EFF               	addlw	-1
  4453  0993  1D03               	skipz
  4454  0994  2990               	goto	u3055
  4455  0995  1003               	clrc
  4456  0996  0D60               	rlf	??_get_temp,w
  4457  0997  00E1               	movwf	??_get_temp+1
  4458  0998  0861               	movf	??_get_temp+1,w
  4459  0999  00DC               	movwf	_TX
  4460                           
  4461                           ;Thermometer_src.c: 107: ge=TZ%10;
  4462  099A  300A               	movlw	10
  4463  099B  00E0               	movwf	??_get_temp
  4464  099C  0860               	movf	??_get_temp,w
  4465  099D  00F0               	movwf	___lbmod@divisor
  4466  099E  085D               	movf	_TZ,w
  4467  099F  160A  118A  2476  120A  158A  	fcall	___lbmod
  4468  09A4  00E1               	movwf	??_get_temp+1
  4469  09A5  0861               	movf	??_get_temp+1,w
  4470  09A6  00DA               	movwf	_ge
  4471                           
  4472                           ;Thermometer_src.c: 108: shi=TZ/10;
  4473  09A7  300A               	movlw	10
  4474  09A8  00E0               	movwf	??_get_temp
  4475  09A9  0860               	movf	??_get_temp,w
  4476  09AA  00F0               	movwf	___lbdiv@divisor
  4477  09AB  085D               	movf	_TZ,w
  4478  09AC  160A  118A  2455  120A  158A  	fcall	___lbdiv
  4479  09B1  00E1               	movwf	??_get_temp+1
  4480  09B2  0861               	movf	??_get_temp+1,w
  4481  09B3  00DB               	movwf	_shi
  4482                           
  4483                           ;Thermometer_src.c: 109: wd=0;
  4484  09B4  01BE               	clrf	_wd
  4485  09B5  01BF               	clrf	_wd+1
  4486                           
  4487                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4488  09B6  1FDC               	btfss	_TX,7
  4489  09B7  29C0               	goto	l3865
  4490  09B8  083E               	movf	_wd,w
  4491  09B9  3E88               	addlw	136
  4492  09BA  00BE               	movwf	_wd
  4493  09BB  083F               	movf	_wd+1,w
  4494  09BC  1803               	skipnc
  4495  09BD  3E01               	addlw	1
  4496  09BE  3E13               	addlw	19
  4497  09BF  00BF               	movwf	_wd+1
  4498  09C0                     l3865:	
  4499                           
  4500                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4501  09C0  1F5C               	btfss	_TX,6
  4502  09C1  29CA               	goto	l3869
  4503  09C2  083E               	movf	_wd,w
  4504  09C3  3EC4               	addlw	196
  4505  09C4  00BE               	movwf	_wd
  4506  09C5  083F               	movf	_wd+1,w
  4507  09C6  1803               	skipnc
  4508  09C7  3E01               	addlw	1
  4509  09C8  3E09               	addlw	9
  4510  09C9  00BF               	movwf	_wd+1
  4511  09CA                     l3869:	
  4512                           
  4513                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4514  09CA  1EDC               	btfss	_TX,5
  4515  09CB  29D4               	goto	l3873
  4516  09CC  083E               	movf	_wd,w
  4517  09CD  3EE2               	addlw	226
  4518  09CE  00BE               	movwf	_wd
  4519  09CF  083F               	movf	_wd+1,w
  4520  09D0  1803               	skipnc
  4521  09D1  3E01               	addlw	1
  4522  09D2  3E04               	addlw	4
  4523  09D3  00BF               	movwf	_wd+1
  4524  09D4                     l3873:	
  4525                           
  4526                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4527  09D4  1E5C               	btfss	_TX,4
  4528  09D5  29DE               	goto	l3877
  4529  09D6  083E               	movf	_wd,w
  4530  09D7  3E71               	addlw	113
  4531  09D8  00BE               	movwf	_wd
  4532  09D9  083F               	movf	_wd+1,w
  4533  09DA  1803               	skipnc
  4534  09DB  3E01               	addlw	1
  4535  09DC  3E02               	addlw	2
  4536  09DD  00BF               	movwf	_wd+1
  4537  09DE                     l3877:	
  4538                           
  4539                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4540  09DE  30E8               	movlw	232
  4541  09DF  00F6               	movwf	___lwdiv@divisor
  4542  09E0  3003               	movlw	3
  4543  09E1  00F7               	movwf	___lwdiv@divisor+1
  4544  09E2  083F               	movf	_wd+1,w
  4545  09E3  00F9               	movwf	___lwdiv@dividend+1
  4546  09E4  083E               	movf	_wd,w
  4547  09E5  00F8               	movwf	___lwdiv@dividend
  4548  09E6  120A  158A  2000  120A  158A  	fcall	___lwdiv
  4549  09EB  0876               	movf	?___lwdiv,w
  4550  09EC  00E0               	movwf	??_get_temp
  4551  09ED  0860               	movf	??_get_temp,w
  4552  09EE  00D9               	movwf	_shifen
  4553                           
  4554                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4555  09EF  3064               	movlw	100
  4556  09F0  00F6               	movwf	___lwdiv@divisor
  4557  09F1  3000               	movlw	0
  4558  09F2  00F7               	movwf	___lwdiv@divisor+1
  4559  09F3  083F               	movf	_wd+1,w
  4560  09F4  00F3               	movwf	___lwmod@dividend+1
  4561  09F5  083E               	movf	_wd,w
  4562  09F6  00F2               	movwf	___lwmod@dividend
  4563  09F7  30E8               	movlw	232
  4564  09F8  00F0               	movwf	___lwmod@divisor
  4565  09F9  3003               	movlw	3
  4566  09FA  00F1               	movwf	___lwmod@divisor+1
  4567  09FB  160A  118A  25B6  120A  158A  	fcall	___lwmod
  4568  0A00  0871               	movf	?___lwmod+1,w
  4569  0A01  00F9               	movwf	___lwdiv@dividend+1
  4570  0A02  0870               	movf	?___lwmod,w
  4571  0A03  00F8               	movwf	___lwdiv@dividend
  4572  0A04  120A  158A  2000  120A  158A  	fcall	___lwdiv
  4573  0A09  0876               	movf	?___lwdiv,w
  4574  0A0A  00E0               	movwf	??_get_temp
  4575  0A0B  0860               	movf	??_get_temp,w
  4576  0A0C  00D8               	movwf	_baifen
  4577                           
  4578                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4579  0A0D  300A               	movlw	10
  4580  0A0E  00F6               	movwf	___lwdiv@divisor
  4581  0A0F  3000               	movlw	0
  4582  0A10  00F7               	movwf	___lwdiv@divisor+1
  4583  0A11  083F               	movf	_wd+1,w
  4584  0A12  00F3               	movwf	___lwmod@dividend+1
  4585  0A13  083E               	movf	_wd,w
  4586  0A14  00F2               	movwf	___lwmod@dividend
  4587  0A15  3064               	movlw	100
  4588  0A16  00F0               	movwf	___lwmod@divisor
  4589  0A17  3000               	movlw	0
  4590  0A18  00F1               	movwf	___lwmod@divisor+1
  4591  0A19  160A  118A  25B6  120A  158A  	fcall	___lwmod
  4592  0A1E  0871               	movf	?___lwmod+1,w
  4593  0A1F  00F9               	movwf	___lwdiv@dividend+1
  4594  0A20  0870               	movf	?___lwmod,w
  4595  0A21  00F8               	movwf	___lwdiv@dividend
  4596  0A22  120A  158A  2000  120A  158A  	fcall	___lwdiv
  4597  0A27  0876               	movf	?___lwdiv,w
  4598  0A28  00E0               	movwf	??_get_temp
  4599  0A29  0860               	movf	??_get_temp,w
  4600  0A2A  00D7               	movwf	_qianfen
  4601                           
  4602                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4603  0A2B  300A               	movlw	10
  4604  0A2C  00F0               	movwf	___lwmod@divisor
  4605  0A2D  3000               	movlw	0
  4606  0A2E  00F1               	movwf	___lwmod@divisor+1
  4607  0A2F  083F               	movf	_wd+1,w
  4608  0A30  00F3               	movwf	___lwmod@dividend+1
  4609  0A31  083E               	movf	_wd,w
  4610  0A32  00F2               	movwf	___lwmod@dividend
  4611  0A33  160A  118A  25B6   	fcall	___lwmod
  4612  0A36  0870               	movf	?___lwmod,w
  4613  0A37  00E0               	movwf	??_get_temp
  4614  0A38  0860               	movf	??_get_temp,w
  4615  0A39  00D6               	movwf	_wanfen
  4616                           
  4617                           ;Thermometer_src.c: 118: __nop();
  4618  0A3A  0000               	nop
  4619  0A3B  0008               	return
  4620  0A3C                     __end_of_get_temp:	
  4621                           
  4622                           	psect	text14
  4623  1650                     __ptext14:	
  4624 ;; *************** function _write_byte *****************
  4625 ;; Defined at:
  4626 ;;		line 40 in file "Thermometer_src.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  val             1    wreg     unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  val             1    7[COMMON] unsigned char 
  4631 ;;  i               1    8[COMMON] unsigned char 
  4632 ;;  temp            1    6[COMMON] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/100
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4642 ;;      Params:         0       0       0       0       0
  4643 ;;      Locals:         3       0       0       0       0
  4644 ;;      Temps:          2       0       0       0       0
  4645 ;;      Totals:         5       0       0       0       0
  4646 ;;Total ram usage:        5 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    1
  4649 ;; This function calls:
  4650 ;;		_delay_temp
  4651 ;; This function is called by:
  4652 ;;		_get_temp
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _write_byte
  4658  1650                     _write_byte:	
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4662                           ;write_byte@val stored from wreg
  4663  1650  00F7               	movwf	write_byte@val
  4664                           
  4665                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4666  1651  3008               	movlw	8
  4667  1652  00F4               	movwf	??_write_byte
  4668  1653  0874               	movf	??_write_byte,w
  4669  1654  00F8               	movwf	write_byte@i
  4670  1655                     l3379:	
  4671                           
  4672                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4673  1655  0877               	movf	write_byte@val,w
  4674  1656  3901               	andlw	1
  4675  1657  00F4               	movwf	??_write_byte
  4676  1658  0874               	movf	??_write_byte,w
  4677  1659  00F6               	movwf	write_byte@temp
  4678                           
  4679                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4680  165A  1283               	bcf	3,5	;RP0=0, select bank0
  4681  165B  1303               	bcf	3,6	;RP1=0, select bank0
  4682  165C  1009               	bcf	9,0	;volatile
  4683  165D  1683               	bsf	3,5	;RP0=1, select bank1
  4684  165E  1009               	bcf	9,0	;volatile
  4685                           
  4686                           ;Thermometer_src.c: 48:    __nop();
  4687  165F  0000               	nop
  4688                           
  4689                           ;Thermometer_src.c: 49:    __nop();
  4690  1660  0000               	nop
  4691                           
  4692                           ;Thermometer_src.c: 50:    __nop();
  4693  1661  0000               	nop
  4694                           
  4695                           ;Thermometer_src.c: 51:    __nop();
  4696  1662  0000               	nop
  4697                           
  4698                           ;Thermometer_src.c: 52:    __nop();
  4699  1663  0000               	nop
  4700                           
  4701                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4702  1664  0376               	decf	write_byte@temp,w
  4703  1665  1D03               	btfss	3,2
  4704  1666  2E6A               	goto	l3399
  4705  1667  1683               	bsf	3,5	;RP0=1, select bank1
  4706  1668  1303               	bcf	3,6	;RP1=0, select bank1
  4707  1669  1409               	bsf	9,0	;volatile
  4708  166A                     l3399:	
  4709                           
  4710                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4711  166A  3007               	movlw	7
  4712  166B  00F4               	movwf	??_write_byte
  4713  166C  0874               	movf	??_write_byte,w
  4714  166D  00F0               	movwf	delay_temp@y
  4715  166E  3002               	movlw	2
  4716  166F  160A  118A  234C  160A  118A  	fcall	_delay_temp
  4717                           
  4718                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4719  1674  1683               	bsf	3,5	;RP0=1, select bank1
  4720  1675  1303               	bcf	3,6	;RP1=0, select bank1
  4721  1676  1409               	bsf	9,0	;volatile
  4722                           
  4723                           ;Thermometer_src.c: 56:    __nop();
  4724  1677  0000               	nop
  4725                           
  4726                           ;Thermometer_src.c: 57:    __nop();
  4727  1678  0000               	nop
  4728                           
  4729                           ;Thermometer_src.c: 58:    val=val>>1;
  4730  1679  0877               	movf	write_byte@val,w
  4731  167A  00F4               	movwf	??_write_byte
  4732  167B  1003               	clrc
  4733  167C  0C74               	rrf	??_write_byte,w
  4734  167D  00F5               	movwf	??_write_byte+1
  4735  167E  0875               	movf	??_write_byte+1,w
  4736  167F  00F7               	movwf	write_byte@val
  4737                           
  4738                           ;Thermometer_src.c: 59:   }
  4739  1680  3001               	movlw	1
  4740  1681  02F8               	subwf	write_byte@i,f
  4741  1682  0878               	movf	write_byte@i,w
  4742  1683  1903               	btfsc	3,2
  4743  1684  0008               	return
  4744  1685  2E55               	goto	l3379
  4745  1686                     __end_of_write_byte:	
  4746                           
  4747                           	psect	text15
  4748  161C                     __ptext15:	
  4749 ;; *************** function _reset_temp *****************
  4750 ;; Defined at:
  4751 ;;		line 25 in file "Thermometer_src.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  presence        1    5[COMMON] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, pclath, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/100
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4765 ;;      Params:         0       0       0       0       0
  4766 ;;      Locals:         1       0       0       0       0
  4767 ;;      Temps:          1       0       0       0       0
  4768 ;;      Totals:         2       0       0       0       0
  4769 ;;Total ram usage:        2 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    1
  4772 ;; This function calls:
  4773 ;;		_delay_temp
  4774 ;; This function is called by:
  4775 ;;		_get_temp
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           
  4780                           ;psect for function _reset_temp
  4781  161C                     _reset_temp:	
  4782                           
  4783                           ;Thermometer_src.c: 27:   char presence=1;
  4784                           
  4785                           ;incstack = 0
  4786                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4787  161C  01F5               	clrf	reset_temp@presence
  4788  161D  0AF5               	incf	reset_temp@presence,f
  4789  161E                     l3371:	
  4790                           ;Thermometer_src.c: 28:   while(presence)
  4791                           
  4792                           
  4793                           ;Thermometer_src.c: 28:   while(presence)
  4794  161E  0875               	movf	reset_temp@presence,w
  4795  161F  1903               	btfsc	3,2
  4796  1620  0008               	return
  4797                           
  4798                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4799  1621  1283               	bcf	3,5	;RP0=0, select bank0
  4800  1622  1303               	bcf	3,6	;RP1=0, select bank0
  4801  1623  1009               	bcf	9,0	;volatile
  4802  1624  1683               	bsf	3,5	;RP0=1, select bank1
  4803  1625  1009               	bcf	9,0	;volatile
  4804                           
  4805                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4806  1626  3046               	movlw	70
  4807  1627  00F4               	movwf	??_reset_temp
  4808  1628  0874               	movf	??_reset_temp,w
  4809  1629  00F0               	movwf	delay_temp@y
  4810  162A  3002               	movlw	2
  4811  162B  160A  118A  234C  160A  118A  	fcall	_delay_temp
  4812                           
  4813                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4814  1630  1683               	bsf	3,5	;RP0=1, select bank1
  4815  1631  1303               	bcf	3,6	;RP1=0, select bank1
  4816  1632  1409               	bsf	9,0	;volatile
  4817                           
  4818                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4819  1633  3008               	movlw	8
  4820  1634  00F4               	movwf	??_reset_temp
  4821  1635  0874               	movf	??_reset_temp,w
  4822  1636  00F0               	movwf	delay_temp@y
  4823  1637  3002               	movlw	2
  4824  1638  160A  118A  234C  160A  118A  	fcall	_delay_temp
  4825                           
  4826                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4827  163D  1283               	bcf	3,5	;RP0=0, select bank0
  4828  163E  1303               	bcf	3,6	;RP1=0, select bank0
  4829  163F  1C09               	btfss	9,0	;volatile
  4830  1640  2E44               	goto	l3367
  4831  1641  01F5               	clrf	reset_temp@presence
  4832  1642  0AF5               	incf	reset_temp@presence,f
  4833  1643  2E45               	goto	l3369
  4834  1644                     l3367:	
  4835  1644  01F5               	clrf	reset_temp@presence
  4836  1645                     l3369:	
  4837                           
  4838                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4839  1645  303C               	movlw	60
  4840  1646  00F4               	movwf	??_reset_temp
  4841  1647  0874               	movf	??_reset_temp,w
  4842  1648  00F0               	movwf	delay_temp@y
  4843  1649  3002               	movlw	2
  4844  164A  160A  118A  234C  160A  118A  	fcall	_delay_temp
  4845  164F  2E1E               	goto	l3371
  4846  1650                     __end_of_reset_temp:	
  4847                           
  4848                           	psect	text16
  4849  15E8                     __ptext16:	
  4850 ;; *************** function _read_byte *****************
  4851 ;; Defined at:
  4852 ;;		line 62 in file "Thermometer_src.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  i               1    6[COMMON] unsigned char 
  4857 ;;  value           1    5[COMMON] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      unsigned char 
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0, pclath, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/100
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4867 ;;      Params:         0       0       0       0       0
  4868 ;;      Locals:         2       0       0       0       0
  4869 ;;      Temps:          1       0       0       0       0
  4870 ;;      Totals:         3       0       0       0       0
  4871 ;;Total ram usage:        3 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    1
  4874 ;; This function calls:
  4875 ;;		_delay_temp
  4876 ;; This function is called by:
  4877 ;;		_get_temp
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           
  4882                           ;psect for function _read_byte
  4883  15E8                     _read_byte:	
  4884                           
  4885                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4889  15E8  01F5               	clrf	read_byte@value
  4890                           
  4891                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4892  15E9  3008               	movlw	8
  4893  15EA  00F4               	movwf	??_read_byte
  4894  15EB  0874               	movf	??_read_byte,w
  4895  15EC  00F6               	movwf	read_byte@i
  4896  15ED                     l3421:	
  4897                           
  4898                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4899  15ED  1003               	clrc
  4900  15EE  0CF5               	rrf	read_byte@value,f
  4901                           
  4902                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4903  15EF  1283               	bcf	3,5	;RP0=0, select bank0
  4904  15F0  1303               	bcf	3,6	;RP1=0, select bank0
  4905  15F1  1009               	bcf	9,0	;volatile
  4906  15F2  1683               	bsf	3,5	;RP0=1, select bank1
  4907  15F3  1009               	bcf	9,0	;volatile
  4908                           
  4909                           ;Thermometer_src.c: 71:    __nop();
  4910  15F4  0000               	nop
  4911                           
  4912                           ;Thermometer_src.c: 72:    __nop();
  4913  15F5  0000               	nop
  4914                           
  4915                           ;Thermometer_src.c: 73:    __nop();
  4916  15F6  0000               	nop
  4917                           
  4918                           ;Thermometer_src.c: 74:    __nop();
  4919  15F7  0000               	nop
  4920                           
  4921                           ;Thermometer_src.c: 75:    __nop();
  4922  15F8  0000               	nop
  4923                           
  4924                           ;Thermometer_src.c: 76:    __nop();
  4925  15F9  0000               	nop
  4926                           
  4927                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4928  15FA  1683               	bsf	3,5	;RP0=1, select bank1
  4929  15FB  1303               	bcf	3,6	;RP1=0, select bank1
  4930  15FC  1409               	bsf	9,0	;volatile
  4931                           
  4932                           ;Thermometer_src.c: 78:    __nop();
  4933  15FD  0000               	nop
  4934                           
  4935                           ;Thermometer_src.c: 79:    __nop();
  4936  15FE  0000               	nop
  4937                           
  4938                           ;Thermometer_src.c: 80:    __nop();
  4939  15FF  0000               	nop
  4940                           
  4941                           ;Thermometer_src.c: 81:    __nop();
  4942  1600  0000               	nop
  4943                           
  4944                           ;Thermometer_src.c: 82:    __nop();
  4945  1601  0000               	nop
  4946                           
  4947                           ;Thermometer_src.c: 83:    j=RE0;
  4948  1602  3000               	movlw	0
  4949  1603  1283               	bcf	3,5	;RP0=0, select bank0
  4950  1604  1303               	bcf	3,6	;RP1=0, select bank0
  4951  1605  1809               	btfsc	9,0	;volatile
  4952  1606  3001               	movlw	1
  4953  1607  00C0               	movwf	read_byte@j
  4954                           
  4955                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4956  1608  0840               	movf	read_byte@j,w
  4957  1609  1D03               	btfss	3,2
  4958  160A  17F5               	bsf	read_byte@value,7
  4959                           
  4960                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4961  160B  3007               	movlw	7
  4962  160C  00F4               	movwf	??_read_byte
  4963  160D  0874               	movf	??_read_byte,w
  4964  160E  00F0               	movwf	delay_temp@y
  4965  160F  3002               	movlw	2
  4966  1610  160A  118A  234C  160A  118A  	fcall	_delay_temp
  4967                           
  4968                           ;Thermometer_src.c: 86:   }
  4969  1615  3001               	movlw	1
  4970  1616  02F6               	subwf	read_byte@i,f
  4971  1617  0876               	movf	read_byte@i,w
  4972  1618  1D03               	btfss	3,2
  4973  1619  2DED               	goto	l3421
  4974                           
  4975                           ;Thermometer_src.c: 87:   return(value);
  4976  161A  0875               	movf	read_byte@value,w
  4977  161B  0008               	return
  4978  161C                     __end_of_read_byte:	
  4979                           
  4980                           	psect	text17
  4981  134C                     __ptext17:	
  4982 ;; *************** function _delay_temp *****************
  4983 ;; Defined at:
  4984 ;;		line 121 in file "Thermometer_src.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  x               1    wreg     unsigned char 
  4987 ;;  y               1    0[COMMON] unsigned char 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  x               1    2[COMMON] unsigned char 
  4990 ;;  z               1    3[COMMON] unsigned char 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg, status,2, status,0
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/100
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5000 ;;      Params:         1       0       0       0       0
  5001 ;;      Locals:         2       0       0       0       0
  5002 ;;      Temps:          1       0       0       0       0
  5003 ;;      Totals:         4       0       0       0       0
  5004 ;;Total ram usage:        4 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		_reset_temp
  5010 ;;		_write_byte
  5011 ;;		_read_byte
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           
  5016                           ;psect for function _delay_temp
  5017  134C                     _delay_temp:	
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5021                           ;delay_temp@x stored from wreg
  5022  134C  00F2               	movwf	delay_temp@x
  5023  134D                     l357:	
  5024                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5025                           
  5026                           
  5027                           ;Thermometer_src.c: 125:  z=y;
  5028  134D  0870               	movf	delay_temp@y,w
  5029  134E  00F1               	movwf	??_delay_temp
  5030  134F  0871               	movf	??_delay_temp,w
  5031  1350  00F3               	movwf	delay_temp@z
  5032  1351                     l3297:	
  5033  1351  3001               	movlw	1
  5034  1352  02F3               	subwf	delay_temp@z,f
  5035  1353  1D03               	btfss	3,2
  5036  1354  2B51               	goto	l3297
  5037                           
  5038                           ;Thermometer_src.c: 127:  }while(--x);
  5039  1355  3001               	movlw	1
  5040  1356  02F2               	subwf	delay_temp@x,f
  5041  1357  1903               	btfsc	3,2
  5042  1358  0008               	return
  5043  1359  2B4D               	goto	l357
  5044  135A                     __end_of_delay_temp:	
  5045                           
  5046                           	psect	text18
  5047  13C1                     __ptext18:	
  5048 ;; *************** function _delay2 *****************
  5049 ;; Defined at:
  5050 ;;		line 130 in file "Thermometer_src.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  i               2    0[COMMON] int 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      void 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, btemp+1
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/100
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5064 ;;      Params:         0       0       0       0       0
  5065 ;;      Locals:         2       0       0       0       0
  5066 ;;      Temps:          0       0       0       0       0
  5067 ;;      Totals:         2       0       0       0       0
  5068 ;;Total ram usage:        2 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_get_temp
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _delay2
  5079  13C1                     _delay2:	
  5080                           
  5081                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5082                           
  5083                           ;incstack = 0
  5084                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5085  13C1  01F0               	clrf	delay2@i
  5086  13C2  01F1               	clrf	delay2@i+1
  5087  13C3                     l3473:	
  5088                           
  5089                           ;Thermometer_src.c: 132:  }
  5090  13C3  3001               	movlw	1
  5091  13C4  07F0               	addwf	delay2@i,f
  5092  13C5  1803               	skipnc
  5093  13C6  0AF1               	incf	delay2@i+1,f
  5094  13C7  3000               	movlw	0
  5095  13C8  07F1               	addwf	delay2@i+1,f
  5096  13C9  0871               	movf	delay2@i+1,w
  5097  13CA  3A80               	xorlw	128
  5098  13CB  00FF               	movwf	127
  5099  13CC  3080               	movlw	128
  5100  13CD  027F               	subwf	127,w
  5101  13CE  1D03               	skipz
  5102  13CF  2BD2               	goto	u2265
  5103  13D0  3032               	movlw	50
  5104  13D1  0270               	subwf	delay2@i,w
  5105  13D2                     u2265:	
  5106  13D2  1803               	btfsc	3,0
  5107  13D3  0008               	return
  5108  13D4  2BC3               	goto	l3473
  5109  13D5                     __end_of_delay2:	
  5110                           
  5111                           	psect	text19
  5112  15B6                     __ptext19:	
  5113 ;; *************** function ___lwmod *****************
  5114 ;; Defined at:
  5115 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  divisor         2    0[COMMON] unsigned int 
  5118 ;;  dividend        2    2[COMMON] unsigned int 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  counter         1    5[COMMON] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  2    0[COMMON] unsigned int 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 300/0
  5127 ;;		On exit  : 300/0
  5128 ;;		Unchanged: 300/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5130 ;;      Params:         4       0       0       0       0
  5131 ;;      Locals:         1       0       0       0       0
  5132 ;;      Temps:          1       0       0       0       0
  5133 ;;      Totals:         6       0       0       0       0
  5134 ;;Total ram usage:        6 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_get_temp
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           
  5144                           ;psect for function ___lwmod
  5145  15B6                     ___lwmod:	
  5146                           
  5147                           ;incstack = 0
  5148                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5149  15B6  0870               	movf	___lwmod@divisor,w
  5150  15B7  0471               	iorwf	___lwmod@divisor+1,w
  5151  15B8  1903               	btfsc	3,2
  5152  15B9  2DE3               	goto	l3777
  5153  15BA  01F5               	clrf	___lwmod@counter
  5154  15BB  0AF5               	incf	___lwmod@counter,f
  5155  15BC                     l3767:	
  5156  15BC  1BF1               	btfsc	___lwmod@divisor+1,7
  5157  15BD  2DCA               	goto	l3769
  5158  15BE  3001               	movlw	1
  5159  15BF                     u2985:	
  5160  15BF  1003               	clrc
  5161  15C0  0DF0               	rlf	___lwmod@divisor,f
  5162  15C1  0DF1               	rlf	___lwmod@divisor+1,f
  5163  15C2  3EFF               	addlw	-1
  5164  15C3  1D03               	skipz
  5165  15C4  2DBF               	goto	u2985
  5166  15C5  3001               	movlw	1
  5167  15C6  00F4               	movwf	??___lwmod
  5168  15C7  0874               	movf	??___lwmod,w
  5169  15C8  07F5               	addwf	___lwmod@counter,f
  5170  15C9  2DBC               	goto	l3767
  5171  15CA                     l3769:	
  5172  15CA  0871               	movf	___lwmod@divisor+1,w
  5173  15CB  0273               	subwf	___lwmod@dividend+1,w
  5174  15CC  1D03               	skipz
  5175  15CD  2DD0               	goto	u3005
  5176  15CE  0870               	movf	___lwmod@divisor,w
  5177  15CF  0272               	subwf	___lwmod@dividend,w
  5178  15D0                     u3005:	
  5179  15D0  1C03               	skipc
  5180  15D1  2DD8               	goto	l3773
  5181  15D2  0870               	movf	___lwmod@divisor,w
  5182  15D3  02F2               	subwf	___lwmod@dividend,f
  5183  15D4  0871               	movf	___lwmod@divisor+1,w
  5184  15D5  1C03               	skipc
  5185  15D6  03F3               	decf	___lwmod@dividend+1,f
  5186  15D7  02F3               	subwf	___lwmod@dividend+1,f
  5187  15D8                     l3773:	
  5188  15D8  3001               	movlw	1
  5189  15D9                     u3015:	
  5190  15D9  1003               	clrc
  5191  15DA  0CF1               	rrf	___lwmod@divisor+1,f
  5192  15DB  0CF0               	rrf	___lwmod@divisor,f
  5193  15DC  3EFF               	addlw	-1
  5194  15DD  1D03               	skipz
  5195  15DE  2DD9               	goto	u3015
  5196  15DF  3001               	movlw	1
  5197  15E0  02F5               	subwf	___lwmod@counter,f
  5198  15E1  1D03               	btfss	3,2
  5199  15E2  2DCA               	goto	l3769
  5200  15E3                     l3777:	
  5201  15E3  0873               	movf	___lwmod@dividend+1,w
  5202  15E4  00F1               	movwf	?___lwmod+1
  5203  15E5  0872               	movf	___lwmod@dividend,w
  5204  15E6  00F0               	movwf	?___lwmod
  5205  15E7  0008               	return
  5206  15E8                     __end_of___lwmod:	
  5207                           
  5208                           	psect	text20
  5209  0800                     __ptext20:	
  5210 ;; *************** function ___lwdiv *****************
  5211 ;; Defined at:
  5212 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  divisor         2    6[COMMON] unsigned int 
  5215 ;;  dividend        2    8[COMMON] unsigned int 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  quotient        2   11[COMMON] unsigned int 
  5218 ;;  counter         1   13[COMMON] unsigned char 
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  2    6[COMMON] unsigned int 
  5221 ;; Registers used:
  5222 ;;		wreg, status,2, status,0
  5223 ;; Tracked objects:
  5224 ;;		On entry : 300/0
  5225 ;;		On exit  : 300/0
  5226 ;;		Unchanged: 300/0
  5227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5228 ;;      Params:         4       0       0       0       0
  5229 ;;      Locals:         3       0       0       0       0
  5230 ;;      Temps:          1       0       0       0       0
  5231 ;;      Totals:         8       0       0       0       0
  5232 ;;Total ram usage:        8 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_get_temp
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function ___lwdiv
  5243  0800                     ___lwdiv:	
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5247  0800  01FB               	clrf	___lwdiv@quotient
  5248  0801  01FC               	clrf	___lwdiv@quotient+1
  5249  0802  0876               	movf	___lwdiv@divisor,w
  5250  0803  0477               	iorwf	___lwdiv@divisor+1,w
  5251  0804  1903               	btfsc	3,2
  5252  0805  2837               	goto	l3755
  5253  0806  01FD               	clrf	___lwdiv@counter
  5254  0807  0AFD               	incf	___lwdiv@counter,f
  5255  0808                     l3743:	
  5256  0808  1BF7               	btfsc	___lwdiv@divisor+1,7
  5257  0809  2816               	goto	l3745
  5258  080A  3001               	movlw	1
  5259  080B                     u2915:	
  5260  080B  1003               	clrc
  5261  080C  0DF6               	rlf	___lwdiv@divisor,f
  5262  080D  0DF7               	rlf	___lwdiv@divisor+1,f
  5263  080E  3EFF               	addlw	-1
  5264  080F  1D03               	skipz
  5265  0810  280B               	goto	u2915
  5266  0811  3001               	movlw	1
  5267  0812  00FA               	movwf	??___lwdiv
  5268  0813  087A               	movf	??___lwdiv,w
  5269  0814  07FD               	addwf	___lwdiv@counter,f
  5270  0815  2808               	goto	l3743
  5271  0816                     l3745:	
  5272  0816  3001               	movlw	1
  5273  0817                     u2935:	
  5274  0817  1003               	clrc
  5275  0818  0DFB               	rlf	___lwdiv@quotient,f
  5276  0819  0DFC               	rlf	___lwdiv@quotient+1,f
  5277  081A  3EFF               	addlw	-1
  5278  081B  1D03               	skipz
  5279  081C  2817               	goto	u2935
  5280  081D  0877               	movf	___lwdiv@divisor+1,w
  5281  081E  0279               	subwf	___lwdiv@dividend+1,w
  5282  081F  1D03               	skipz
  5283  0820  2823               	goto	u2945
  5284  0821  0876               	movf	___lwdiv@divisor,w
  5285  0822  0278               	subwf	___lwdiv@dividend,w
  5286  0823                     u2945:	
  5287  0823  1C03               	skipc
  5288  0824  282C               	goto	l3751
  5289  0825  0876               	movf	___lwdiv@divisor,w
  5290  0826  02F8               	subwf	___lwdiv@dividend,f
  5291  0827  0877               	movf	___lwdiv@divisor+1,w
  5292  0828  1C03               	skipc
  5293  0829  03F9               	decf	___lwdiv@dividend+1,f
  5294  082A  02F9               	subwf	___lwdiv@dividend+1,f
  5295  082B  147B               	bsf	___lwdiv@quotient,0
  5296  082C                     l3751:	
  5297  082C  3001               	movlw	1
  5298  082D                     u2955:	
  5299  082D  1003               	clrc
  5300  082E  0CF7               	rrf	___lwdiv@divisor+1,f
  5301  082F  0CF6               	rrf	___lwdiv@divisor,f
  5302  0830  3EFF               	addlw	-1
  5303  0831  1D03               	skipz
  5304  0832  282D               	goto	u2955
  5305  0833  3001               	movlw	1
  5306  0834  02FD               	subwf	___lwdiv@counter,f
  5307  0835  1D03               	btfss	3,2
  5308  0836  2816               	goto	l3745
  5309  0837                     l3755:	
  5310  0837  087C               	movf	___lwdiv@quotient+1,w
  5311  0838  00F7               	movwf	?___lwdiv+1
  5312  0839  087B               	movf	___lwdiv@quotient,w
  5313  083A  00F6               	movwf	?___lwdiv
  5314  083B  0008               	return
  5315  083C                     __end_of___lwdiv:	
  5316                           
  5317                           	psect	text21
  5318  1476                     __ptext21:	
  5319 ;; *************** function ___lbmod *****************
  5320 ;; Defined at:
  5321 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  dividend        1    wreg     unsigned char 
  5324 ;;  divisor         1    0[COMMON] unsigned char 
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  dividend        1    4[COMMON] unsigned char 
  5327 ;;  rem             1    6[COMMON] unsigned char 
  5328 ;;  counter         1    5[COMMON] unsigned char 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      unsigned char 
  5331 ;; Registers used:
  5332 ;;		wreg, status,2, status,0
  5333 ;; Tracked objects:
  5334 ;;		On entry : 300/0
  5335 ;;		On exit  : 300/0
  5336 ;;		Unchanged: 300/0
  5337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5338 ;;      Params:         1       0       0       0       0
  5339 ;;      Locals:         3       0       0       0       0
  5340 ;;      Temps:          3       0       0       0       0
  5341 ;;      Totals:         7       0       0       0       0
  5342 ;;Total ram usage:        7 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_get_temp
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           
  5352                           ;psect for function ___lbmod
  5353  1476                     ___lbmod:	
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5357                           ;___lbmod@dividend stored from wreg
  5358  1476  00F4               	movwf	___lbmod@dividend
  5359  1477  3008               	movlw	8
  5360  1478  00F1               	movwf	??___lbmod
  5361  1479  0871               	movf	??___lbmod,w
  5362  147A  00F5               	movwf	___lbmod@counter
  5363  147B  01F6               	clrf	___lbmod@rem
  5364  147C                     l3721:	
  5365  147C  0874               	movf	___lbmod@dividend,w
  5366  147D  00F1               	movwf	??___lbmod
  5367  147E  3007               	movlw	7
  5368  147F                     u2875:	
  5369  147F  1003               	clrc
  5370  1480  0CF1               	rrf	??___lbmod,f
  5371  1481  3EFF               	addlw	-1
  5372  1482  1D03               	skipz
  5373  1483  2C7F               	goto	u2875
  5374  1484  0876               	movf	___lbmod@rem,w
  5375  1485  00F2               	movwf	??___lbmod+1
  5376  1486  0772               	addwf	??___lbmod+1,w
  5377  1487  0471               	iorwf	??___lbmod,w
  5378  1488  00F3               	movwf	??___lbmod+2
  5379  1489  0873               	movf	??___lbmod+2,w
  5380  148A  00F6               	movwf	___lbmod@rem
  5381  148B  1003               	clrc
  5382  148C  0DF4               	rlf	___lbmod@dividend,f
  5383  148D  0870               	movf	___lbmod@divisor,w
  5384  148E  0276               	subwf	___lbmod@rem,w
  5385  148F  1C03               	skipc
  5386  1490  2C93               	goto	l1315
  5387  1491  0870               	movf	___lbmod@divisor,w
  5388  1492  02F6               	subwf	___lbmod@rem,f
  5389  1493                     l1315:	
  5390  1493  3001               	movlw	1
  5391  1494  02F5               	subwf	___lbmod@counter,f
  5392  1495  1D03               	btfss	3,2
  5393  1496  2C7C               	goto	l3721
  5394  1497  0876               	movf	___lbmod@rem,w
  5395  1498  0008               	return
  5396  1499                     __end_of___lbmod:	
  5397                           
  5398                           	psect	text22
  5399  1455                     __ptext22:	
  5400 ;; *************** function ___lbdiv *****************
  5401 ;; Defined at:
  5402 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  dividend        1    wreg     unsigned char 
  5405 ;;  divisor         1    0[COMMON] unsigned char 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;  dividend        1    2[COMMON] unsigned char 
  5408 ;;  quotient        1    4[COMMON] unsigned char 
  5409 ;;  counter         1    3[COMMON] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      unsigned char 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0
  5414 ;; Tracked objects:
  5415 ;;		On entry : 300/0
  5416 ;;		On exit  : 300/0
  5417 ;;		Unchanged: 300/0
  5418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5419 ;;      Params:         1       0       0       0       0
  5420 ;;      Locals:         3       0       0       0       0
  5421 ;;      Temps:          1       0       0       0       0
  5422 ;;      Totals:         5       0       0       0       0
  5423 ;;Total ram usage:        5 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_get_temp
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function ___lbdiv
  5434  1455                     ___lbdiv:	
  5435                           
  5436                           ;incstack = 0
  5437                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5438                           ;___lbdiv@dividend stored from wreg
  5439  1455  00F2               	movwf	___lbdiv@dividend
  5440  1456  01F4               	clrf	___lbdiv@quotient
  5441  1457  0870               	movf	___lbdiv@divisor,w
  5442  1458  1903               	btfsc	3,2
  5443  1459  2C74               	goto	l3713
  5444  145A  01F3               	clrf	___lbdiv@counter
  5445  145B  0AF3               	incf	___lbdiv@counter,f
  5446  145C                     l3701:	
  5447  145C  1BF0               	btfsc	___lbdiv@divisor,7
  5448  145D  2C65               	goto	l3703
  5449  145E  1003               	clrc
  5450  145F  0DF0               	rlf	___lbdiv@divisor,f
  5451  1460  3001               	movlw	1
  5452  1461  00F1               	movwf	??___lbdiv
  5453  1462  0871               	movf	??___lbdiv,w
  5454  1463  07F3               	addwf	___lbdiv@counter,f
  5455  1464  2C5C               	goto	l3701
  5456  1465                     l3703:	
  5457  1465  1003               	clrc
  5458  1466  0DF4               	rlf	___lbdiv@quotient,f
  5459  1467  0870               	movf	___lbdiv@divisor,w
  5460  1468  0272               	subwf	___lbdiv@dividend,w
  5461  1469  1C03               	skipc
  5462  146A  2C6F               	goto	L2
  5463  146B  0870               	movf	___lbdiv@divisor,w
  5464  146C  02F2               	subwf	___lbdiv@dividend,f
  5465  146D  1474               	bsf	___lbdiv@quotient,0
  5466  146E  1003               	clrc
  5467  146F                     L2:	
  5468  146F  0CF0               	rrf	___lbdiv@divisor,f
  5469  1470  3001               	movlw	1
  5470  1471  02F3               	subwf	___lbdiv@counter,f
  5471  1472  1D03               	btfss	3,2
  5472  1473  2C65               	goto	l3703
  5473  1474                     l3713:	
  5474  1474  0874               	movf	___lbdiv@quotient,w
  5475  1475  0008               	return
  5476  1476                     __end_of___lbdiv:	
  5477                           
  5478                           	psect	text23
  5479  1369                     __ptext23:	
  5480 ;; *************** function _ds1302_init *****************
  5481 ;; Defined at:
  5482 ;;		line 3 in file "clock_src.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 300/0
  5493 ;;		On exit  : 300/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5496 ;;      Params:         0       0       0       0       0
  5497 ;;      Locals:         0       0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0
  5499 ;;      Totals:         0       0       0       0       0
  5500 ;;Total ram usage:        0 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    1
  5503 ;; This function calls:
  5504 ;;		_time_write_1
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _ds1302_init
  5512  1369                     _ds1302_init:	
  5513                           
  5514                           ;clock_src.c: 5:    RB0=0;
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5518  1369  1006               	bcf	6,0	;volatile
  5519                           
  5520                           ;clock_src.c: 6:    RB5 =0;
  5521  136A  1286               	bcf	6,5	;volatile
  5522                           
  5523                           ;clock_src.c: 7:    RB5=1;
  5524  136B  1686               	bsf	6,5	;volatile
  5525                           
  5526                           ;clock_src.c: 8:    time_write_1(0x8e);
  5527  136C  308E               	movlw	142
  5528  136D  160A  118A  24E0  160A  118A  	fcall	_time_write_1
  5529                           
  5530                           ;clock_src.c: 9:    time_write_1(0);
  5531  1372  3000               	movlw	0
  5532  1373  160A  118A  24E0   	fcall	_time_write_1
  5533                           
  5534                           ;clock_src.c: 10:    RB5=0;
  5535  1376  1286               	bcf	6,5	;volatile
  5536  1377  0008               	return
  5537  1378                     __end_of_ds1302_init:	
  5538                           
  5539                           	psect	text24
  5540  1434                     __ptext24:	
  5541 ;; *************** function _display_temp *****************
  5542 ;; Defined at:
  5543 ;;		line 12 in file "Thermometer_src.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;		None
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;		None
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      void 
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5552 ;; Tracked objects:
  5553 ;;		On entry : 300/0
  5554 ;;		On exit  : 300/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5557 ;;      Params:         0       0       0       0       0
  5558 ;;      Locals:         0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0
  5560 ;;      Totals:         0       0       0       0       0
  5561 ;;Total ram usage:        0 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    2
  5564 ;; This function calls:
  5565 ;;		_write_char
  5566 ;; This function is called by:
  5567 ;;		_main
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           
  5572                           ;psect for function _display_temp
  5573  1434                     _display_temp:	
  5574                           
  5575                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5576                           
  5577                           ;incstack = 0
  5578                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5579  1434  085B               	movf	_shi,w
  5580  1435  3E30               	addlw	48
  5581  1436  160A  118A  23E9  160A  118A  	fcall	_write_char
  5582                           
  5583                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5584  143B  085A               	movf	_ge,w
  5585  143C  3E30               	addlw	48
  5586  143D  160A  118A  23E9  160A  118A  	fcall	_write_char
  5587                           
  5588                           ;Thermometer_src.c: 17:  write_char('.');
  5589  1442  302E               	movlw	46
  5590  1443  160A  118A  23E9  160A  118A  	fcall	_write_char
  5591                           
  5592                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5593  1448  0859               	movf	_shifen,w
  5594  1449  3E30               	addlw	48
  5595  144A  160A  118A  23E9  160A  118A  	fcall	_write_char
  5596                           
  5597                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5598  144F  0858               	movf	_baifen,w
  5599  1450  3E30               	addlw	48
  5600  1451  160A  118A  23E9   	fcall	_write_char
  5601  1454  0008               	return
  5602  1455                     __end_of_display_temp:	
  5603                           
  5604                           	psect	text25
  5605  000D                     __ptext25:	
  5606 ;; *************** function _display_day *****************
  5607 ;; Defined at:
  5608 ;;		line 4 in file "Day_of_week_src.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  num             2    3[COMMON] int 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 300/100
  5619 ;;		On exit  : 200/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5622 ;;      Params:         2       0       0       0       0
  5623 ;;      Locals:         0       0       0       0       0
  5624 ;;      Temps:          0       0       0       0       0
  5625 ;;      Totals:         2       0       0       0       0
  5626 ;;Total ram usage:        2 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    2
  5629 ;; This function calls:
  5630 ;;		_write_char
  5631 ;; This function is called by:
  5632 ;;		_main
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _display_day
  5638  000D                     _display_day:	
  5639                           
  5640                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5641                           
  5642                           ;incstack = 0
  5643                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5644  000D  0373               	decf	display_day@num,w
  5645  000E  0474               	iorwf	display_day@num+1,w
  5646  000F  1903               	btfsc	3,2
  5647  0010  2815               	goto	l4733
  5648  0011  0873               	movf	display_day@num,w
  5649  0012  0474               	iorwf	display_day@num+1,w
  5650  0013  1D03               	btfss	3,2
  5651  0014  2821               	goto	l4735
  5652  0015                     l4733:	
  5653                           
  5654                           ;Day_of_week_src.c: 6:     write_char('M');
  5655  0015  304D               	movlw	77
  5656  0016  160A  118A  23E9  120A  118A  	fcall	_write_char
  5657                           
  5658                           ;Day_of_week_src.c: 7:     write_char('o');
  5659  001B  306F               	movlw	111
  5660  001C  160A  118A  23E9  120A  118A  	fcall	_write_char
  5661  0021                     l4735:	
  5662                           
  5663                           ;Day_of_week_src.c: 10:     if(num == 2){
  5664  0021  3002               	movlw	2
  5665  0022  0673               	xorwf	display_day@num,w
  5666  0023  0474               	iorwf	display_day@num+1,w
  5667  0024  1D03               	btfss	3,2
  5668  0025  2832               	goto	l4739
  5669                           
  5670                           ;Day_of_week_src.c: 11:     write_char('T');
  5671  0026  3054               	movlw	84
  5672  0027  160A  118A  23E9  120A  118A  	fcall	_write_char
  5673                           
  5674                           ;Day_of_week_src.c: 12:     write_char('u');
  5675  002C  3075               	movlw	117
  5676  002D  160A  118A  23E9  120A  118A  	fcall	_write_char
  5677  0032                     l4739:	
  5678                           
  5679                           ;Day_of_week_src.c: 15:     if(num == 3){
  5680  0032  3003               	movlw	3
  5681  0033  0673               	xorwf	display_day@num,w
  5682  0034  0474               	iorwf	display_day@num+1,w
  5683  0035  1D03               	btfss	3,2
  5684  0036  2843               	goto	l4743
  5685                           
  5686                           ;Day_of_week_src.c: 16:     write_char('W');
  5687  0037  3057               	movlw	87
  5688  0038  160A  118A  23E9  120A  118A  	fcall	_write_char
  5689                           
  5690                           ;Day_of_week_src.c: 17:     write_char('e');
  5691  003D  3065               	movlw	101
  5692  003E  160A  118A  23E9  120A  118A  	fcall	_write_char
  5693  0043                     l4743:	
  5694                           
  5695                           ;Day_of_week_src.c: 20:     if(num == 4){
  5696  0043  3004               	movlw	4
  5697  0044  0673               	xorwf	display_day@num,w
  5698  0045  0474               	iorwf	display_day@num+1,w
  5699  0046  1D03               	btfss	3,2
  5700  0047  2854               	goto	l4747
  5701                           
  5702                           ;Day_of_week_src.c: 21:     write_char('T');
  5703  0048  3054               	movlw	84
  5704  0049  160A  118A  23E9  120A  118A  	fcall	_write_char
  5705                           
  5706                           ;Day_of_week_src.c: 22:     write_char('h');
  5707  004E  3068               	movlw	104
  5708  004F  160A  118A  23E9  120A  118A  	fcall	_write_char
  5709  0054                     l4747:	
  5710                           
  5711                           ;Day_of_week_src.c: 25:     if(num == 5){
  5712  0054  3005               	movlw	5
  5713  0055  0673               	xorwf	display_day@num,w
  5714  0056  0474               	iorwf	display_day@num+1,w
  5715  0057  1D03               	btfss	3,2
  5716  0058  2865               	goto	l4751
  5717                           
  5718                           ;Day_of_week_src.c: 26:     write_char('F');
  5719  0059  3046               	movlw	70
  5720  005A  160A  118A  23E9  120A  118A  	fcall	_write_char
  5721                           
  5722                           ;Day_of_week_src.c: 27:     write_char('r');
  5723  005F  3072               	movlw	114
  5724  0060  160A  118A  23E9  120A  118A  	fcall	_write_char
  5725  0065                     l4751:	
  5726                           
  5727                           ;Day_of_week_src.c: 30:     if(num == 6){
  5728  0065  3006               	movlw	6
  5729  0066  0673               	xorwf	display_day@num,w
  5730  0067  0474               	iorwf	display_day@num+1,w
  5731  0068  1D03               	btfss	3,2
  5732  0069  2876               	goto	l4755
  5733                           
  5734                           ;Day_of_week_src.c: 31:     write_char('S');
  5735  006A  3053               	movlw	83
  5736  006B  160A  118A  23E9  120A  118A  	fcall	_write_char
  5737                           
  5738                           ;Day_of_week_src.c: 32:     write_char('a');
  5739  0070  3061               	movlw	97
  5740  0071  160A  118A  23E9  120A  118A  	fcall	_write_char
  5741  0076                     l4755:	
  5742                           
  5743                           ;Day_of_week_src.c: 35:     if(num == 7){
  5744  0076  3007               	movlw	7
  5745  0077  0673               	xorwf	display_day@num,w
  5746  0078  0474               	iorwf	display_day@num+1,w
  5747  0079  1D03               	btfss	3,2
  5748  007A  0008               	return
  5749                           
  5750                           ;Day_of_week_src.c: 36:     write_char('S');
  5751  007B  3053               	movlw	83
  5752  007C  160A  118A  23E9  120A  118A  	fcall	_write_char
  5753                           
  5754                           ;Day_of_week_src.c: 37:     write_char('u');
  5755  0081  3075               	movlw	117
  5756  0082  160A  118A  23E9   	fcall	_write_char
  5757  0085  0008               	return
  5758  0086                     __end_of_display_day:	
  5759                           
  5760                           	psect	text26
  5761  1763                     __ptext26:	
  5762 ;; *************** function _display_date *****************
  5763 ;; Defined at:
  5764 ;;		line 77 in file "clock_src.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;		None
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;  i               2    5[COMMON] int 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 300/0
  5775 ;;		On exit  : 300/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5778 ;;      Params:         0       0       0       0       0
  5779 ;;      Locals:         2       0       0       0       0
  5780 ;;      Temps:          2       0       0       0       0
  5781 ;;      Totals:         4       0       0       0       0
  5782 ;;Total ram usage:        4 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    2
  5785 ;; This function calls:
  5786 ;;		_write_char
  5787 ;; This function is called by:
  5788 ;;		_main
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _display_date
  5794  1763                     _display_date:	
  5795                           
  5796                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5797                           
  5798                           ;incstack = 0
  5799                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5800  1763  1886               	btfsc	6,1	;volatile
  5801  1764  2F6E               	goto	l3909
  5802                           
  5803                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5804  1765  1683               	bsf	3,5	;RP0=1, select bank1
  5805  1766  0823               	movf	(_table1^(0+128)+3),w
  5806  1767  00F3               	movwf	??_display_date
  5807  1768  0873               	movf	??_display_date,w
  5808  1769  00A0               	movwf	_table1^(0+128)
  5809                           
  5810                           ;clock_src.c: 83:           table1[1]=table1[4];
  5811  176A  0824               	movf	(_table1^(0+128)+4),w
  5812  176B  00F3               	movwf	??_display_date
  5813  176C  0873               	movf	??_display_date,w
  5814  176D  00A1               	movwf	(_table1^(0+128)+1)
  5815  176E                     l3909:	
  5816                           
  5817                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5818  176E  1683               	bsf	3,5	;RP0=1, select bank1
  5819  176F  0823               	movf	(_table1^(0+128)+3),w
  5820  1770  39F0               	andlw	240
  5821  1771  00F3               	movwf	??_display_date
  5822  1772  01F4               	clrf	??_display_date+1
  5823  1773  0873               	movf	??_display_date,w
  5824  1774  00F5               	movwf	display_date@i
  5825  1775  0874               	movf	??_display_date+1,w
  5826  1776  00F6               	movwf	display_date@i+1
  5827                           
  5828                           ;clock_src.c: 86:      i=i>>4;
  5829  1777  0E75               	swapf	display_date@i,w
  5830  1778  390F               	andlw	15
  5831  1779  00F5               	movwf	display_date@i
  5832  177A  0E76               	swapf	display_date@i+1,w
  5833  177B  39F0               	andlw	240
  5834  177C  04F5               	iorwf	display_date@i,f
  5835  177D  0E76               	swapf	display_date@i+1,w
  5836  177E  390F               	andlw	15
  5837  177F  00F6               	movwf	display_date@i+1
  5838  1780  30F0               	movlw	240
  5839  1781  1DF6               	btfss	display_date@i+1,3
  5840  1782  3000               	movlw	0
  5841  1783  04F6               	iorwf	display_date@i+1,f
  5842                           
  5843                           ;clock_src.c: 87:      write_char(i + '0');
  5844  1784  0875               	movf	display_date@i,w
  5845  1785  3E30               	addlw	48
  5846  1786  160A  118A  23E9  160A  118A  	fcall	_write_char
  5847                           
  5848                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  5849  178B  1683               	bsf	3,5	;RP0=1, select bank1
  5850  178C  0823               	movf	(_table1^(0+128)+3),w
  5851  178D  390F               	andlw	15
  5852  178E  00F3               	movwf	??_display_date
  5853  178F  01F4               	clrf	??_display_date+1
  5854  1790  0873               	movf	??_display_date,w
  5855  1791  00F5               	movwf	display_date@i
  5856  1792  0874               	movf	??_display_date+1,w
  5857  1793  00F6               	movwf	display_date@i+1
  5858                           
  5859                           ;clock_src.c: 90:      write_char(i + '0');
  5860  1794  0875               	movf	display_date@i,w
  5861  1795  3E30               	addlw	48
  5862  1796  160A  118A  23E9  160A  118A  	fcall	_write_char
  5863                           
  5864                           ;clock_src.c: 91:      write_char('/');
  5865  179B  302F               	movlw	47
  5866  179C  160A  118A  23E9  160A  118A  	fcall	_write_char
  5867                           
  5868                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  5869  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  5870  17A2  0824               	movf	(_table1^(0+128)+4),w
  5871  17A3  39F0               	andlw	240
  5872  17A4  00F3               	movwf	??_display_date
  5873  17A5  01F4               	clrf	??_display_date+1
  5874  17A6  0873               	movf	??_display_date,w
  5875  17A7  00F5               	movwf	display_date@i
  5876  17A8  0874               	movf	??_display_date+1,w
  5877  17A9  00F6               	movwf	display_date@i+1
  5878                           
  5879                           ;clock_src.c: 96:      i=i>>4;
  5880  17AA  0E75               	swapf	display_date@i,w
  5881  17AB  390F               	andlw	15
  5882  17AC  00F5               	movwf	display_date@i
  5883  17AD  0E76               	swapf	display_date@i+1,w
  5884  17AE  39F0               	andlw	240
  5885  17AF  04F5               	iorwf	display_date@i,f
  5886  17B0  0E76               	swapf	display_date@i+1,w
  5887  17B1  390F               	andlw	15
  5888  17B2  00F6               	movwf	display_date@i+1
  5889  17B3  30F0               	movlw	240
  5890  17B4  1DF6               	btfss	display_date@i+1,3
  5891  17B5  3000               	movlw	0
  5892  17B6  04F6               	iorwf	display_date@i+1,f
  5893                           
  5894                           ;clock_src.c: 97:      write_char(i + '0');
  5895  17B7  0875               	movf	display_date@i,w
  5896  17B8  3E30               	addlw	48
  5897  17B9  160A  118A  23E9  160A  118A  	fcall	_write_char
  5898                           
  5899                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  5900  17BE  1683               	bsf	3,5	;RP0=1, select bank1
  5901  17BF  0824               	movf	(_table1^(0+128)+4),w
  5902  17C0  390F               	andlw	15
  5903  17C1  00F3               	movwf	??_display_date
  5904  17C2  01F4               	clrf	??_display_date+1
  5905  17C3  0873               	movf	??_display_date,w
  5906  17C4  00F5               	movwf	display_date@i
  5907  17C5  0874               	movf	??_display_date+1,w
  5908  17C6  00F6               	movwf	display_date@i+1
  5909                           
  5910                           ;clock_src.c: 100:      write_char(i + '0');
  5911  17C7  0875               	movf	display_date@i,w
  5912  17C8  3E30               	addlw	48
  5913  17C9  160A  118A  23E9  160A  118A  	fcall	_write_char
  5914                           
  5915                           ;clock_src.c: 101:      write_char('/');
  5916  17CE  302F               	movlw	47
  5917  17CF  160A  118A  23E9  160A  118A  	fcall	_write_char
  5918                           
  5919                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  5920  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  5921  17D5  0826               	movf	(_table1^(0+128)+6),w
  5922  17D6  39F0               	andlw	240
  5923  17D7  00F3               	movwf	??_display_date
  5924  17D8  01F4               	clrf	??_display_date+1
  5925  17D9  0873               	movf	??_display_date,w
  5926  17DA  00F5               	movwf	display_date@i
  5927  17DB  0874               	movf	??_display_date+1,w
  5928  17DC  00F6               	movwf	display_date@i+1
  5929                           
  5930                           ;clock_src.c: 106:      i=i>>4;
  5931  17DD  0E75               	swapf	display_date@i,w
  5932  17DE  390F               	andlw	15
  5933  17DF  00F5               	movwf	display_date@i
  5934  17E0  0E76               	swapf	display_date@i+1,w
  5935  17E1  39F0               	andlw	240
  5936  17E2  04F5               	iorwf	display_date@i,f
  5937  17E3  0E76               	swapf	display_date@i+1,w
  5938  17E4  390F               	andlw	15
  5939  17E5  00F6               	movwf	display_date@i+1
  5940  17E6  30F0               	movlw	240
  5941  17E7  1DF6               	btfss	display_date@i+1,3
  5942  17E8  3000               	movlw	0
  5943  17E9  04F6               	iorwf	display_date@i+1,f
  5944                           
  5945                           ;clock_src.c: 107:      write_char(i + '0');
  5946  17EA  0875               	movf	display_date@i,w
  5947  17EB  3E30               	addlw	48
  5948  17EC  160A  118A  23E9  160A  118A  	fcall	_write_char
  5949                           
  5950                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  5951  17F1  1683               	bsf	3,5	;RP0=1, select bank1
  5952  17F2  0826               	movf	(_table1^(0+128)+6),w
  5953  17F3  390F               	andlw	15
  5954  17F4  00F3               	movwf	??_display_date
  5955  17F5  01F4               	clrf	??_display_date+1
  5956  17F6  0873               	movf	??_display_date,w
  5957  17F7  00F5               	movwf	display_date@i
  5958  17F8  0874               	movf	??_display_date+1,w
  5959  17F9  00F6               	movwf	display_date@i+1
  5960                           
  5961                           ;clock_src.c: 110:      write_char(i + '0');
  5962  17FA  0875               	movf	display_date@i,w
  5963  17FB  3E30               	addlw	48
  5964  17FC  160A  118A  23E9   	fcall	_write_char
  5965  17FF  0008               	return
  5966  1800                     __end_of_display_date:	
  5967                           
  5968                           	psect	text27
  5969  0890                     __ptext27:	
  5970 ;; *************** function _display_clock *****************
  5971 ;; Defined at:
  5972 ;;		line 34 in file "clock_src.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  i               2    5[COMMON] int 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 300/0
  5983 ;;		On exit  : 300/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5986 ;;      Params:         0       0       0       0       0
  5987 ;;      Locals:         2       0       0       0       0
  5988 ;;      Temps:          2       0       0       0       0
  5989 ;;      Totals:         4       0       0       0       0
  5990 ;;Total ram usage:        4 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    2
  5993 ;; This function calls:
  5994 ;;		_write_char
  5995 ;; This function is called by:
  5996 ;;		_main
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           
  6001                           ;psect for function _display_clock
  6002  0890                     _display_clock:	
  6003                           
  6004                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6005                           
  6006                           ;incstack = 0
  6007                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6008  0890  1886               	btfsc	6,1	;volatile
  6009  0891  289B               	goto	l3947
  6010                           
  6011                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6012  0892  1683               	bsf	3,5	;RP0=1, select bank1
  6013  0893  0823               	movf	(_table1^(0+128)+3),w
  6014  0894  00F3               	movwf	??_display_clock
  6015  0895  0873               	movf	??_display_clock,w
  6016  0896  00A0               	movwf	_table1^(0+128)
  6017                           
  6018                           ;clock_src.c: 40:           table1[1]=table1[4];
  6019  0897  0824               	movf	(_table1^(0+128)+4),w
  6020  0898  00F3               	movwf	??_display_clock
  6021  0899  0873               	movf	??_display_clock,w
  6022  089A  00A1               	movwf	(_table1^(0+128)+1)
  6023  089B                     l3947:	
  6024                           
  6025                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6026  089B  1683               	bsf	3,5	;RP0=1, select bank1
  6027  089C  0822               	movf	(_table1^(0+128)+2),w
  6028  089D  39F0               	andlw	240
  6029  089E  00F3               	movwf	??_display_clock
  6030  089F  01F4               	clrf	??_display_clock+1
  6031  08A0  0873               	movf	??_display_clock,w
  6032  08A1  00F5               	movwf	display_clock@i
  6033  08A2  0874               	movf	??_display_clock+1,w
  6034  08A3  00F6               	movwf	display_clock@i+1
  6035                           
  6036                           ;clock_src.c: 44:      i=i>>4;
  6037  08A4  0E75               	swapf	display_clock@i,w
  6038  08A5  390F               	andlw	15
  6039  08A6  00F5               	movwf	display_clock@i
  6040  08A7  0E76               	swapf	display_clock@i+1,w
  6041  08A8  39F0               	andlw	240
  6042  08A9  04F5               	iorwf	display_clock@i,f
  6043  08AA  0E76               	swapf	display_clock@i+1,w
  6044  08AB  390F               	andlw	15
  6045  08AC  00F6               	movwf	display_clock@i+1
  6046  08AD  30F0               	movlw	240
  6047  08AE  1DF6               	btfss	display_clock@i+1,3
  6048  08AF  3000               	movlw	0
  6049  08B0  04F6               	iorwf	display_clock@i+1,f
  6050                           
  6051                           ;clock_src.c: 45:      write_char(i + '0');
  6052  08B1  0875               	movf	display_clock@i,w
  6053  08B2  3E30               	addlw	48
  6054  08B3  160A  118A  23E9  120A  158A  	fcall	_write_char
  6055                           
  6056                           ;clock_src.c: 46:      temp_high = i;
  6057  08B8  0875               	movf	display_clock@i,w
  6058  08B9  00F3               	movwf	??_display_clock
  6059  08BA  0873               	movf	??_display_clock,w
  6060  08BB  00CB               	movwf	_temp_high
  6061                           
  6062                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6063  08BC  1683               	bsf	3,5	;RP0=1, select bank1
  6064  08BD  0822               	movf	(_table1^(0+128)+2),w
  6065  08BE  390F               	andlw	15
  6066  08BF  00F3               	movwf	??_display_clock
  6067  08C0  01F4               	clrf	??_display_clock+1
  6068  08C1  0873               	movf	??_display_clock,w
  6069  08C2  00F5               	movwf	display_clock@i
  6070  08C3  0874               	movf	??_display_clock+1,w
  6071  08C4  00F6               	movwf	display_clock@i+1
  6072                           
  6073                           ;clock_src.c: 50:      write_char(i + '0');
  6074  08C5  0875               	movf	display_clock@i,w
  6075  08C6  3E30               	addlw	48
  6076  08C7  160A  118A  23E9  120A  158A  	fcall	_write_char
  6077                           
  6078                           ;clock_src.c: 51:      write_char(':');
  6079  08CC  303A               	movlw	58
  6080  08CD  160A  118A  23E9  120A  158A  	fcall	_write_char
  6081                           
  6082                           ;clock_src.c: 52:      temp_low = i;
  6083  08D2  0875               	movf	display_clock@i,w
  6084  08D3  00F3               	movwf	??_display_clock
  6085  08D4  0873               	movf	??_display_clock,w
  6086  08D5  00CC               	movwf	_temp_low
  6087                           
  6088                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6089  08D6  1683               	bsf	3,5	;RP0=1, select bank1
  6090  08D7  0821               	movf	(_table1^(0+128)+1),w
  6091  08D8  39F0               	andlw	240
  6092  08D9  00F3               	movwf	??_display_clock
  6093  08DA  01F4               	clrf	??_display_clock+1
  6094  08DB  0873               	movf	??_display_clock,w
  6095  08DC  00F5               	movwf	display_clock@i
  6096  08DD  0874               	movf	??_display_clock+1,w
  6097  08DE  00F6               	movwf	display_clock@i+1
  6098                           
  6099                           ;clock_src.c: 56:      i=i>>4;
  6100  08DF  0E75               	swapf	display_clock@i,w
  6101  08E0  390F               	andlw	15
  6102  08E1  00F5               	movwf	display_clock@i
  6103  08E2  0E76               	swapf	display_clock@i+1,w
  6104  08E3  39F0               	andlw	240
  6105  08E4  04F5               	iorwf	display_clock@i,f
  6106  08E5  0E76               	swapf	display_clock@i+1,w
  6107  08E6  390F               	andlw	15
  6108  08E7  00F6               	movwf	display_clock@i+1
  6109  08E8  30F0               	movlw	240
  6110  08E9  1DF6               	btfss	display_clock@i+1,3
  6111  08EA  3000               	movlw	0
  6112  08EB  04F6               	iorwf	display_clock@i+1,f
  6113                           
  6114                           ;clock_src.c: 57:      write_char(i + '0');
  6115  08EC  0875               	movf	display_clock@i,w
  6116  08ED  3E30               	addlw	48
  6117  08EE  160A  118A  23E9  120A  158A  	fcall	_write_char
  6118                           
  6119                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6120  08F3  1683               	bsf	3,5	;RP0=1, select bank1
  6121  08F4  0821               	movf	(_table1^(0+128)+1),w
  6122  08F5  390F               	andlw	15
  6123  08F6  00F3               	movwf	??_display_clock
  6124  08F7  01F4               	clrf	??_display_clock+1
  6125  08F8  0873               	movf	??_display_clock,w
  6126  08F9  00F5               	movwf	display_clock@i
  6127  08FA  0874               	movf	??_display_clock+1,w
  6128  08FB  00F6               	movwf	display_clock@i+1
  6129                           
  6130                           ;clock_src.c: 61:      write_char(i + '0');
  6131  08FC  0875               	movf	display_clock@i,w
  6132  08FD  3E30               	addlw	48
  6133  08FE  160A  118A  23E9  120A  158A  	fcall	_write_char
  6134                           
  6135                           ;clock_src.c: 62:      write_char(':');
  6136  0903  303A               	movlw	58
  6137  0904  160A  118A  23E9  120A  158A  	fcall	_write_char
  6138                           
  6139                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6140  0909  1683               	bsf	3,5	;RP0=1, select bank1
  6141  090A  0820               	movf	_table1^(0+128),w
  6142  090B  39F0               	andlw	240
  6143  090C  00F3               	movwf	??_display_clock
  6144  090D  01F4               	clrf	??_display_clock+1
  6145  090E  0873               	movf	??_display_clock,w
  6146  090F  00F5               	movwf	display_clock@i
  6147  0910  0874               	movf	??_display_clock+1,w
  6148  0911  00F6               	movwf	display_clock@i+1
  6149                           
  6150                           ;clock_src.c: 66:      i=i>>4;
  6151  0912  0E75               	swapf	display_clock@i,w
  6152  0913  390F               	andlw	15
  6153  0914  00F5               	movwf	display_clock@i
  6154  0915  0E76               	swapf	display_clock@i+1,w
  6155  0916  39F0               	andlw	240
  6156  0917  04F5               	iorwf	display_clock@i,f
  6157  0918  0E76               	swapf	display_clock@i+1,w
  6158  0919  390F               	andlw	15
  6159  091A  00F6               	movwf	display_clock@i+1
  6160  091B  30F0               	movlw	240
  6161  091C  1DF6               	btfss	display_clock@i+1,3
  6162  091D  3000               	movlw	0
  6163  091E  04F6               	iorwf	display_clock@i+1,f
  6164                           
  6165                           ;clock_src.c: 67:      write_char(i + '0');
  6166  091F  0875               	movf	display_clock@i,w
  6167  0920  3E30               	addlw	48
  6168  0921  160A  118A  23E9  120A  158A  	fcall	_write_char
  6169                           
  6170                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6171  0926  1683               	bsf	3,5	;RP0=1, select bank1
  6172  0927  0820               	movf	_table1^(0+128),w
  6173  0928  390F               	andlw	15
  6174  0929  00F3               	movwf	??_display_clock
  6175  092A  01F4               	clrf	??_display_clock+1
  6176  092B  0873               	movf	??_display_clock,w
  6177  092C  00F5               	movwf	display_clock@i
  6178  092D  0874               	movf	??_display_clock+1,w
  6179  092E  00F6               	movwf	display_clock@i+1
  6180                           
  6181                           ;clock_src.c: 71:      write_char(i + '0');
  6182  092F  0875               	movf	display_clock@i,w
  6183  0930  3E30               	addlw	48
  6184  0931  160A  118A  23E9   	fcall	_write_char
  6185  0934  0008               	return
  6186  0935                     __end_of_display_clock:	
  6187                           
  6188                           	psect	text28
  6189  0385                     __ptext28:	
  6190 ;; *************** function _date_settings *****************
  6191 ;; Defined at:
  6192 ;;		line 421 in file "Button_src.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  1    wreg      void 
  6199 ;; Registers used:
  6200 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 300/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6206 ;;      Params:         0       0       0       0       0
  6207 ;;      Locals:         0       0       0       0       0
  6208 ;;      Temps:          0       3       0       0       0
  6209 ;;      Totals:         0       3       0       0       0
  6210 ;;Total ram usage:        3 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    3
  6213 ;; This function calls:
  6214 ;;		_button_delay
  6215 ;;		_incrementor
  6216 ;;		_modulus_func
  6217 ;;		_set_time
  6218 ;;		_time_date_delimiter
  6219 ;;		_time_date_hex_terminator
  6220 ;;		_write_char
  6221 ;;		_write_cmd
  6222 ;; This function is called by:
  6223 ;;		_main
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _date_settings
  6229  0385                     _date_settings:	
  6230                           
  6231                           ;Button_src.c: 422:  RC0 = 0;
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6235  0385  1283               	bcf	3,5	;RP0=0, select bank0
  6236  0386  1303               	bcf	3,6	;RP1=0, select bank0
  6237  0387  1007               	bcf	7,0	;volatile
  6238                           
  6239                           ;Button_src.c: 423:  RC1 = 1;
  6240  0388  1487               	bsf	7,1	;volatile
  6241                           
  6242                           ;Button_src.c: 424:  RC2 = 1;
  6243  0389  1507               	bsf	7,2	;volatile
  6244                           
  6245                           ;Button_src.c: 425:  RC3 = 1;
  6246  038A  1587               	bsf	7,3	;volatile
  6247                           
  6248                           ;Button_src.c: 426:   if (RC4 == 0){
  6249  038B  1A07               	btfsc	7,4	;volatile
  6250  038C  0008               	return
  6251                           
  6252                           ;Button_src.c: 427:       write_cmd(0x1);
  6253  038D  3001               	movlw	1
  6254  038E  160A  118A  2400  120A  118A  	fcall	_write_cmd
  6255  0393                     l768:	
  6256                           ;Button_src.c: 428:       for(;;){
  6257                           
  6258                           
  6259                           ;Button_src.c: 429:             write_cmd(0x80);
  6260  0393  3080               	movlw	128
  6261  0394  160A  118A  2400  120A  118A  	fcall	_write_cmd
  6262                           
  6263                           ;Button_src.c: 430:             write_char('D');
  6264  0399  3044               	movlw	68
  6265  039A  160A  118A  23E9  120A  118A  	fcall	_write_char
  6266                           
  6267                           ;Button_src.c: 431:             write_char('a');
  6268  039F  3061               	movlw	97
  6269  03A0  160A  118A  23E9  120A  118A  	fcall	_write_char
  6270                           
  6271                           ;Button_src.c: 432:             write_char('t');
  6272  03A5  3074               	movlw	116
  6273  03A6  160A  118A  23E9  120A  118A  	fcall	_write_char
  6274                           
  6275                           ;Button_src.c: 433:             write_char('e');
  6276  03AB  3065               	movlw	101
  6277  03AC  160A  118A  23E9  120A  118A  	fcall	_write_char
  6278                           
  6279                           ;Button_src.c: 434:             write_char('_');
  6280  03B1  305F               	movlw	95
  6281  03B2  160A  118A  23E9  120A  118A  	fcall	_write_char
  6282                           
  6283                           ;Button_src.c: 435:             write_char('S');
  6284  03B7  3053               	movlw	83
  6285  03B8  160A  118A  23E9  120A  118A  	fcall	_write_char
  6286                           
  6287                           ;Button_src.c: 436:             write_char('e');
  6288  03BD  3065               	movlw	101
  6289  03BE  160A  118A  23E9  120A  118A  	fcall	_write_char
  6290                           
  6291                           ;Button_src.c: 437:             write_char('t');
  6292  03C3  3074               	movlw	116
  6293  03C4  160A  118A  23E9  120A  118A  	fcall	_write_char
  6294                           
  6295                           ;Button_src.c: 438:             write_char('t');
  6296  03C9  3074               	movlw	116
  6297  03CA  160A  118A  23E9  120A  118A  	fcall	_write_char
  6298                           
  6299                           ;Button_src.c: 439:             write_char('i');
  6300  03CF  3069               	movlw	105
  6301  03D0  160A  118A  23E9  120A  118A  	fcall	_write_char
  6302                           
  6303                           ;Button_src.c: 440:             write_char('n');
  6304  03D5  306E               	movlw	110
  6305  03D6  160A  118A  23E9  120A  118A  	fcall	_write_char
  6306                           
  6307                           ;Button_src.c: 441:             write_char('g');
  6308  03DB  3067               	movlw	103
  6309  03DC  160A  118A  23E9  120A  118A  	fcall	_write_char
  6310                           
  6311                           ;Button_src.c: 442:             write_char('s');
  6312  03E1  3073               	movlw	115
  6313  03E2  160A  118A  23E9  120A  118A  	fcall	_write_char
  6314                           
  6315                           ;Button_src.c: 443:             RC0 = 1;
  6316  03E7  1407               	bsf	7,0	;volatile
  6317                           
  6318                           ;Button_src.c: 444:             RC1 = 0;
  6319  03E8  1087               	bcf	7,1	;volatile
  6320                           
  6321                           ;Button_src.c: 445:             RC2 = 1;
  6322  03E9  1507               	bsf	7,2	;volatile
  6323                           
  6324                           ;Button_src.c: 446:             RC3 = 1;
  6325  03EA  1587               	bsf	7,3	;volatile
  6326                           
  6327                           ;Button_src.c: 447:             if(RC7 == 0 && b =='x'){
  6328  03EB  1B87               	btfsc	7,7	;volatile
  6329  03EC  2C5D               	goto	l4201
  6330  03ED  3078               	movlw	120
  6331  03EE  0649               	xorwf	_b,w
  6332  03EF  1D03               	btfss	3,2
  6333  03F0  2C5D               	goto	l4201
  6334                           
  6335                           ;Button_src.c: 448:                 if(stats == 1)
  6336  03F1  0322               	decf	_stats,w
  6337  03F2  0423               	iorwf	_stats+1,w
  6338  03F3  1D03               	btfss	3,2
  6339  03F4  2BF9               	goto	l770
  6340                           
  6341                           ;Button_src.c: 449:                     a++;
  6342  03F5  3001               	movlw	1
  6343  03F6  00E5               	movwf	??_date_settings
  6344  03F7  0865               	movf	??_date_settings,w
  6345  03F8  07CA               	addwf	_a,f
  6346  03F9                     l770:	
  6347                           
  6348                           ;Button_src.c: 450:                 if(stats == 0){
  6349  03F9  0822               	movf	_stats,w
  6350  03FA  0423               	iorwf	_stats+1,w
  6351  03FB  1D03               	btfss	3,2
  6352  03FC  2C01               	goto	l771
  6353                           
  6354                           ;Button_src.c: 451:                     stats = 1;
  6355  03FD  3001               	movlw	1
  6356  03FE  00A2               	movwf	_stats
  6357  03FF  3000               	movlw	0
  6358  0400  00A3               	movwf	_stats+1
  6359  0401                     l771:	
  6360                           ;Button_src.c: 452:                 }
  6361                           
  6362                           
  6363                           ;Button_src.c: 454:                     x++ ;
  6364  0401  3001               	movlw	1
  6365  0402  07AC               	addwf	_x,f
  6366  0403  1803               	skipnc
  6367  0404  0AAD               	incf	_x+1,f
  6368  0405  3000               	movlw	0
  6369  0406  07AD               	addwf	_x+1,f
  6370                           
  6371                           ;Button_src.c: 455:                     x = modulus_func(x,10);
  6372  0407  082D               	movf	_x+1,w
  6373  0408  00F8               	movwf	modulus_func@x+1
  6374  0409  082C               	movf	_x,w
  6375  040A  00F7               	movwf	modulus_func@x
  6376  040B  300A               	movlw	10
  6377  040C  00F9               	movwf	modulus_func@y
  6378  040D  3000               	movlw	0
  6379  040E  00FA               	movwf	modulus_func@y+1
  6380  040F  160A  118A  2378  120A  118A  	fcall	_modulus_func
  6381  0414  0878               	movf	?_modulus_func+1,w
  6382  0415  00AD               	movwf	_x+1
  6383  0416  0877               	movf	?_modulus_func,w
  6384  0417  00AC               	movwf	_x
  6385                           
  6386                           ;Button_src.c: 456:                      if (p == 1){
  6387  0418  0320               	decf	_p,w
  6388  0419  0421               	iorwf	_p+1,w
  6389  041A  1D03               	btfss	3,2
  6390  041B  2C35               	goto	l4187
  6391                           
  6392                           ;Button_src.c: 457:                         y = incrementor(y,x,'0');
  6393  041C  082B               	movf	_y+1,w
  6394  041D  00E1               	movwf	incrementor@upper_val+1
  6395  041E  082A               	movf	_y,w
  6396  041F  00E0               	movwf	incrementor@upper_val
  6397  0420  082D               	movf	_x+1,w
  6398  0421  00E3               	movwf	incrementor@lower_val+1
  6399  0422  082C               	movf	_x,w
  6400  0423  00E2               	movwf	incrementor@lower_val
  6401  0424  3030               	movlw	48
  6402  0425  00E5               	movwf	??_date_settings
  6403  0426  0865               	movf	??_date_settings,w
  6404  0427  00E4               	movwf	incrementor@z
  6405  0428  160A  118A  24BC  120A  118A  	fcall	_incrementor
  6406  042D  00E6               	movwf	??_date_settings+1
  6407  042E  01E7               	clrf	??_date_settings+2
  6408  042F  0866               	movf	??_date_settings+1,w
  6409  0430  00AA               	movwf	_y
  6410  0431  0867               	movf	??_date_settings+2,w
  6411  0432  00AB               	movwf	_y+1
  6412                           
  6413                           ;Button_src.c: 458:                         p = 0;
  6414  0433  01A0               	clrf	_p
  6415  0434  01A1               	clrf	_p+1
  6416  0435                     l4187:	
  6417                           
  6418                           ;Button_src.c: 460:                     if (x == 9){
  6419  0435  3009               	movlw	9
  6420  0436  062C               	xorwf	_x,w
  6421  0437  042D               	iorwf	_x+1,w
  6422  0438  1D03               	btfss	3,2
  6423  0439  2C3E               	goto	l4191
  6424                           
  6425                           ;Button_src.c: 461:                         p = 1;
  6426  043A  3001               	movlw	1
  6427  043B  00A0               	movwf	_p
  6428  043C  3000               	movlw	0
  6429  043D  00A1               	movwf	_p+1
  6430  043E                     l4191:	
  6431                           
  6432                           ;Button_src.c: 463:                     a = time_date_hex_terminator(a,'C');
  6433  043E  3043               	movlw	67
  6434  043F  00E5               	movwf	??_date_settings
  6435  0440  0865               	movf	??_date_settings,w
  6436  0441  00F0               	movwf	time_date_hex_terminator@limiter
  6437  0442  084A               	movf	_a,w
  6438  0443  160A  118A  235A  120A  118A  	fcall	_time_date_hex_terminator
  6439  0448  00E6               	movwf	??_date_settings+1
  6440  0449  0866               	movf	??_date_settings+1,w
  6441  044A  00CA               	movwf	_a
  6442                           
  6443                           ;Button_src.c: 465:                     if(y == 1 && x == 3){
  6444  044B  032A               	decf	_y,w
  6445  044C  042B               	iorwf	_y+1,w
  6446  044D  1D03               	btfss	3,2
  6447  044E  2C58               	goto	l4199
  6448  044F  3003               	movlw	3
  6449  0450  062C               	xorwf	_x,w
  6450  0451  042D               	iorwf	_x+1,w
  6451  0452  1D03               	btfss	3,2
  6452  0453  2C58               	goto	l4199
  6453                           
  6454                           ;Button_src.c: 466:                         x = 0;
  6455  0454  01AC               	clrf	_x
  6456  0455  01AD               	clrf	_x+1
  6457                           
  6458                           ;Button_src.c: 467:                         y = 0;
  6459  0456  01AA               	clrf	_y
  6460  0457  01AB               	clrf	_y+1
  6461  0458                     l4199:	
  6462                           
  6463                           ;Button_src.c: 469:                     button_delay();
  6464  0458  160A  118A  23AD  120A  118A  	fcall	_button_delay
  6465  045D                     l4201:	
  6466                           
  6467                           ;Button_src.c: 471:             if(RC7==0 && b == 'y'){
  6468  045D  1283               	bcf	3,5	;RP0=0, select bank0
  6469  045E  1303               	bcf	3,6	;RP1=0, select bank0
  6470  045F  1B87               	btfsc	7,7	;volatile
  6471  0460  2CE5               	goto	l4235
  6472  0461  3079               	movlw	121
  6473  0462  0649               	xorwf	_b,w
  6474  0463  1D03               	btfss	3,2
  6475  0464  2CE5               	goto	l4235
  6476                           
  6477                           ;Button_src.c: 472:                  if(stats == 1)
  6478  0465  0322               	decf	_stats,w
  6479  0466  0423               	iorwf	_stats+1,w
  6480  0467  1D03               	btfss	3,2
  6481  0468  2C6D               	goto	l776
  6482                           
  6483                           ;Button_src.c: 473:                     day_hex++;
  6484  0469  3001               	movlw	1
  6485  046A  00E5               	movwf	??_date_settings
  6486  046B  0865               	movf	??_date_settings,w
  6487  046C  07C7               	addwf	_day_hex,f
  6488  046D                     l776:	
  6489                           
  6490                           ;Button_src.c: 474:                 if(stats == 0){
  6491  046D  0822               	movf	_stats,w
  6492  046E  0423               	iorwf	_stats+1,w
  6493  046F  1D03               	btfss	3,2
  6494  0470  2C75               	goto	l777
  6495                           
  6496                           ;Button_src.c: 475:                     stats = 1;
  6497  0471  3001               	movlw	1
  6498  0472  00A2               	movwf	_stats
  6499  0473  3000               	movlw	0
  6500  0474  00A3               	movwf	_stats+1
  6501  0475                     l777:	
  6502                           ;Button_src.c: 476:                 }
  6503                           
  6504                           
  6505                           ;Button_src.c: 478:                     day_low++;
  6506  0475  3001               	movlw	1
  6507  0476  07A6               	addwf	_day_low,f
  6508  0477  1803               	skipnc
  6509  0478  0AA7               	incf	_day_low+1,f
  6510  0479  3000               	movlw	0
  6511  047A  07A7               	addwf	_day_low+1,f
  6512                           
  6513                           ;Button_src.c: 479:                     day_low = modulus_func(day_low,10);
  6514  047B  0827               	movf	_day_low+1,w
  6515  047C  00F8               	movwf	modulus_func@x+1
  6516  047D  0826               	movf	_day_low,w
  6517  047E  00F7               	movwf	modulus_func@x
  6518  047F  300A               	movlw	10
  6519  0480  00F9               	movwf	modulus_func@y
  6520  0481  3000               	movlw	0
  6521  0482  00FA               	movwf	modulus_func@y+1
  6522  0483  160A  118A  2378  120A  118A  	fcall	_modulus_func
  6523  0488  0878               	movf	?_modulus_func+1,w
  6524  0489  00A7               	movwf	_day_low+1
  6525  048A  0877               	movf	?_modulus_func,w
  6526  048B  00A6               	movwf	_day_low
  6527                           
  6528                           ;Button_src.c: 480:                     day_counter = modulus_func(day_low,8);
  6529  048C  0827               	movf	_day_low+1,w
  6530  048D  00F8               	movwf	modulus_func@x+1
  6531  048E  0826               	movf	_day_low,w
  6532  048F  00F7               	movwf	modulus_func@x
  6533  0490  3008               	movlw	8
  6534  0491  00F9               	movwf	modulus_func@y
  6535  0492  3000               	movlw	0
  6536  0493  00FA               	movwf	modulus_func@y+1
  6537  0494  160A  118A  2378  120A  118A  	fcall	_modulus_func
  6538  0499  0878               	movf	?_modulus_func+1,w
  6539  049A  1683               	bsf	3,5	;RP0=1, select bank1
  6540  049B  00A8               	movwf	(_day_counter+1)^(0+128)
  6541  049C  0877               	movf	?_modulus_func,w
  6542  049D  00A7               	movwf	_day_counter^(0+128)
  6543                           
  6544                           ;Button_src.c: 481:                     if (p == 1){
  6545  049E  1283               	bcf	3,5	;RP0=0, select bank0
  6546  049F  0320               	decf	_p,w
  6547  04A0  0421               	iorwf	_p+1,w
  6548  04A1  1D03               	btfss	3,2
  6549  04A2  2CBC               	goto	l4221
  6550                           
  6551                           ;Button_src.c: 482:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6552  04A3  0825               	movf	_day_high+1,w
  6553  04A4  00E1               	movwf	incrementor@upper_val+1
  6554  04A5  0824               	movf	_day_high,w
  6555  04A6  00E0               	movwf	incrementor@upper_val
  6556  04A7  0827               	movf	_day_low+1,w
  6557  04A8  00E3               	movwf	incrementor@lower_val+1
  6558  04A9  0826               	movf	_day_low,w
  6559  04AA  00E2               	movwf	incrementor@lower_val
  6560  04AB  3030               	movlw	48
  6561  04AC  00E5               	movwf	??_date_settings
  6562  04AD  0865               	movf	??_date_settings,w
  6563  04AE  00E4               	movwf	incrementor@z
  6564  04AF  160A  118A  24BC  120A  118A  	fcall	_incrementor
  6565  04B4  00E6               	movwf	??_date_settings+1
  6566  04B5  01E7               	clrf	??_date_settings+2
  6567  04B6  0866               	movf	??_date_settings+1,w
  6568  04B7  00A4               	movwf	_day_high
  6569  04B8  0867               	movf	??_date_settings+2,w
  6570  04B9  00A5               	movwf	_day_high+1
  6571                           
  6572                           ;Button_src.c: 483:                         p = 0;
  6573  04BA  01A0               	clrf	_p
  6574  04BB  01A1               	clrf	_p+1
  6575  04BC                     l4221:	
  6576                           
  6577                           ;Button_src.c: 485:                     if (day_low == 9){
  6578  04BC  3009               	movlw	9
  6579  04BD  0626               	xorwf	_day_low,w
  6580  04BE  0427               	iorwf	_day_low+1,w
  6581  04BF  1D03               	btfss	3,2
  6582  04C0  2CC5               	goto	l4225
  6583                           
  6584                           ;Button_src.c: 486:                         p = 1;
  6585  04C1  3001               	movlw	1
  6586  04C2  00A0               	movwf	_p
  6587  04C3  3000               	movlw	0
  6588  04C4  00A1               	movwf	_p+1
  6589  04C5                     l4225:	
  6590                           
  6591                           ;Button_src.c: 488:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6592  04C5  3063               	movlw	99
  6593  04C6  00E5               	movwf	??_date_settings
  6594  04C7  0865               	movf	??_date_settings,w
  6595  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6596  04C9  0847               	movf	_day_hex,w
  6597  04CA  160A  118A  235A  120A  118A  	fcall	_time_date_hex_terminator
  6598  04CF  00E6               	movwf	??_date_settings+1
  6599  04D0  0866               	movf	??_date_settings+1,w
  6600  04D1  00C7               	movwf	_day_hex
  6601                           
  6602                           ;Button_src.c: 489:                     if(day_high == 3 && day_low==2 ){
  6603  04D2  3003               	movlw	3
  6604  04D3  0624               	xorwf	_day_high,w
  6605  04D4  0425               	iorwf	_day_high+1,w
  6606  04D5  1D03               	btfss	3,2
  6607  04D6  2CE0               	goto	l4233
  6608  04D7  3002               	movlw	2
  6609  04D8  0626               	xorwf	_day_low,w
  6610  04D9  0427               	iorwf	_day_low+1,w
  6611  04DA  1D03               	btfss	3,2
  6612  04DB  2CE0               	goto	l4233
  6613                           
  6614                           ;Button_src.c: 490:                         day_high = 0;
  6615  04DC  01A4               	clrf	_day_high
  6616  04DD  01A5               	clrf	_day_high+1
  6617                           
  6618                           ;Button_src.c: 491:                         day_low = 0;
  6619  04DE  01A6               	clrf	_day_low
  6620  04DF  01A7               	clrf	_day_low+1
  6621  04E0                     l4233:	
  6622                           
  6623                           ;Button_src.c: 493:                     button_delay();
  6624  04E0  160A  118A  23AD  120A  118A  	fcall	_button_delay
  6625  04E5                     l4235:	
  6626                           
  6627                           ;Button_src.c: 495:             if(RC7==0 && b == 'z'){
  6628  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6629  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6630  04E7  1B87               	btfsc	7,7	;volatile
  6631  04E8  2D4C               	goto	l4267
  6632  04E9  307A               	movlw	122
  6633  04EA  0649               	xorwf	_b,w
  6634  04EB  1D03               	btfss	3,2
  6635  04EC  2D4C               	goto	l4267
  6636                           
  6637                           ;Button_src.c: 496:                 if(stats == 1)
  6638  04ED  0322               	decf	_stats,w
  6639  04EE  0423               	iorwf	_stats+1,w
  6640  04EF  1D03               	btfss	3,2
  6641  04F0  2CF5               	goto	l782
  6642                           
  6643                           ;Button_src.c: 497:                    c++;
  6644  04F1  3001               	movlw	1
  6645  04F2  00E5               	movwf	??_date_settings
  6646  04F3  0865               	movf	??_date_settings,w
  6647  04F4  07C8               	addwf	_c,f
  6648  04F5                     l782:	
  6649                           
  6650                           ;Button_src.c: 498:                 if(stats == 0){
  6651  04F5  0822               	movf	_stats,w
  6652  04F6  0423               	iorwf	_stats+1,w
  6653  04F7  1D03               	btfss	3,2
  6654  04F8  2CFD               	goto	l783
  6655                           
  6656                           ;Button_src.c: 499:                     stats = 1;
  6657  04F9  3001               	movlw	1
  6658  04FA  00A2               	movwf	_stats
  6659  04FB  3000               	movlw	0
  6660  04FC  00A3               	movwf	_stats+1
  6661  04FD                     l783:	
  6662                           ;Button_src.c: 500:                 }
  6663                           
  6664                           
  6665                           ;Button_src.c: 502:                     t++;
  6666  04FD  3001               	movlw	1
  6667  04FE  07B0               	addwf	_t,f
  6668  04FF  1803               	skipnc
  6669  0500  0AB1               	incf	_t+1,f
  6670  0501  3000               	movlw	0
  6671  0502  07B1               	addwf	_t+1,f
  6672                           
  6673                           ;Button_src.c: 503:                     t = modulus_func(t,10);
  6674  0503  0831               	movf	_t+1,w
  6675  0504  00F8               	movwf	modulus_func@x+1
  6676  0505  0830               	movf	_t,w
  6677  0506  00F7               	movwf	modulus_func@x
  6678  0507  300A               	movlw	10
  6679  0508  00F9               	movwf	modulus_func@y
  6680  0509  3000               	movlw	0
  6681  050A  00FA               	movwf	modulus_func@y+1
  6682  050B  160A  118A  2378  120A  118A  	fcall	_modulus_func
  6683  0510  0878               	movf	?_modulus_func+1,w
  6684  0511  00B1               	movwf	_t+1
  6685  0512  0877               	movf	?_modulus_func,w
  6686  0513  00B0               	movwf	_t
  6687                           
  6688                           ;Button_src.c: 504:                      if (p == 1){
  6689  0514  0320               	decf	_p,w
  6690  0515  0421               	iorwf	_p+1,w
  6691  0516  1D03               	btfss	3,2
  6692  0517  2D31               	goto	l4253
  6693                           
  6694                           ;Button_src.c: 505:                         w = incrementor(w,t,'0');
  6695  0518  082F               	movf	_w+1,w
  6696  0519  00E1               	movwf	incrementor@upper_val+1
  6697  051A  082E               	movf	_w,w
  6698  051B  00E0               	movwf	incrementor@upper_val
  6699  051C  0831               	movf	_t+1,w
  6700  051D  00E3               	movwf	incrementor@lower_val+1
  6701  051E  0830               	movf	_t,w
  6702  051F  00E2               	movwf	incrementor@lower_val
  6703  0520  3030               	movlw	48
  6704  0521  00E5               	movwf	??_date_settings
  6705  0522  0865               	movf	??_date_settings,w
  6706  0523  00E4               	movwf	incrementor@z
  6707  0524  160A  118A  24BC  120A  118A  	fcall	_incrementor
  6708  0529  00E6               	movwf	??_date_settings+1
  6709  052A  01E7               	clrf	??_date_settings+2
  6710  052B  0866               	movf	??_date_settings+1,w
  6711  052C  00AE               	movwf	_w
  6712  052D  0867               	movf	??_date_settings+2,w
  6713  052E  00AF               	movwf	_w+1
  6714                           
  6715                           ;Button_src.c: 506:                         p = 0;
  6716  052F  01A0               	clrf	_p
  6717  0530  01A1               	clrf	_p+1
  6718  0531                     l4253:	
  6719                           
  6720                           ;Button_src.c: 508:                     if (t == 9){
  6721  0531  3009               	movlw	9
  6722  0532  0630               	xorwf	_t,w
  6723  0533  0431               	iorwf	_t+1,w
  6724  0534  1D03               	btfss	3,2
  6725  0535  2D3A               	goto	l4257
  6726                           
  6727                           ;Button_src.c: 509:                         p = 1;
  6728  0536  3001               	movlw	1
  6729  0537  00A0               	movwf	_p
  6730  0538  3000               	movlw	0
  6731  0539  00A1               	movwf	_p+1
  6732  053A                     l4257:	
  6733                           
  6734                           ;Button_src.c: 512:                      if(c == (0x59 + 1)){
  6735  053A  305A               	movlw	90
  6736  053B  0648               	xorwf	_c,w
  6737  053C  1903               	btfsc	3,2
  6738                           
  6739                           ;Button_src.c: 513:                         c = 0x00;
  6740  053D  01C8               	clrf	_c
  6741                           
  6742                           ;Button_src.c: 515:                     if(w == 6){
  6743  053E  3006               	movlw	6
  6744  053F  062E               	xorwf	_w,w
  6745  0540  042F               	iorwf	_w+1,w
  6746  0541  1D03               	btfss	3,2
  6747  0542  2D47               	goto	l4265
  6748                           
  6749                           ;Button_src.c: 516:                         w = 0;
  6750  0543  01AE               	clrf	_w
  6751  0544  01AF               	clrf	_w+1
  6752                           
  6753                           ;Button_src.c: 517:                         t = 0;
  6754  0545  01B0               	clrf	_t
  6755  0546  01B1               	clrf	_t+1
  6756  0547                     l4265:	
  6757                           
  6758                           ;Button_src.c: 519:                     button_delay();
  6759  0547  160A  118A  23AD  120A  118A  	fcall	_button_delay
  6760  054C                     l4267:	
  6761                           
  6762                           ;Button_src.c: 526:                     a = time_date_delimiter(a,0x11,'9',1);
  6763  054C  3011               	movlw	17
  6764  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6765  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6766  054F  00E5               	movwf	??_date_settings
  6767  0550  0865               	movf	??_date_settings,w
  6768  0551  00F0               	movwf	time_date_delimiter@hex
  6769  0552  3039               	movlw	57
  6770  0553  00E6               	movwf	??_date_settings+1
  6771  0554  0866               	movf	??_date_settings+1,w
  6772  0555  00F1               	movwf	time_date_delimiter@limiter
  6773  0556  3001               	movlw	1
  6774  0557  00F2               	movwf	time_date_delimiter@type
  6775  0558  3000               	movlw	0
  6776  0559  00F3               	movwf	time_date_delimiter@type+1
  6777  055A  084A               	movf	_a,w
  6778  055B  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6779  0560  00E7               	movwf	??_date_settings+2
  6780  0561  0867               	movf	??_date_settings+2,w
  6781  0562  00CA               	movwf	_a
  6782                           
  6783                           ;Button_src.c: 528:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6784  0563  3011               	movlw	17
  6785  0564  00E5               	movwf	??_date_settings
  6786  0565  0865               	movf	??_date_settings,w
  6787  0566  00F0               	movwf	time_date_delimiter@hex
  6788  0567  3039               	movlw	57
  6789  0568  00E6               	movwf	??_date_settings+1
  6790  0569  0866               	movf	??_date_settings+1,w
  6791  056A  00F1               	movwf	time_date_delimiter@limiter
  6792  056B  3002               	movlw	2
  6793  056C  00F2               	movwf	time_date_delimiter@type
  6794  056D  3000               	movlw	0
  6795  056E  00F3               	movwf	time_date_delimiter@type+1
  6796  056F  0847               	movf	_day_hex,w
  6797  0570  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6798  0575  00E7               	movwf	??_date_settings+2
  6799  0576  0867               	movf	??_date_settings+2,w
  6800  0577  00C7               	movwf	_day_hex
  6801                           
  6802                           ;Button_src.c: 529:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6803  0578  3021               	movlw	33
  6804  0579  00E5               	movwf	??_date_settings
  6805  057A  0865               	movf	??_date_settings,w
  6806  057B  00F0               	movwf	time_date_delimiter@hex
  6807  057C  304A               	movlw	74
  6808  057D  00E6               	movwf	??_date_settings+1
  6809  057E  0866               	movf	??_date_settings+1,w
  6810  057F  00F1               	movwf	time_date_delimiter@limiter
  6811  0580  3002               	movlw	2
  6812  0581  00F2               	movwf	time_date_delimiter@type
  6813  0582  3000               	movlw	0
  6814  0583  00F3               	movwf	time_date_delimiter@type+1
  6815  0584  0847               	movf	_day_hex,w
  6816  0585  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6817  058A  00E7               	movwf	??_date_settings+2
  6818  058B  0867               	movf	??_date_settings+2,w
  6819  058C  00C7               	movwf	_day_hex
  6820                           
  6821                           ;Button_src.c: 530:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6822  058D  3011               	movlw	17
  6823  058E  00E5               	movwf	??_date_settings
  6824  058F  0865               	movf	??_date_settings,w
  6825  0590  00F0               	movwf	time_date_delimiter@hex
  6826  0591  3039               	movlw	57
  6827  0592  00E6               	movwf	??_date_settings+1
  6828  0593  0866               	movf	??_date_settings+1,w
  6829  0594  00F1               	movwf	time_date_delimiter@limiter
  6830  0595  3002               	movlw	2
  6831  0596  00F2               	movwf	time_date_delimiter@type
  6832  0597  3000               	movlw	0
  6833  0598  00F3               	movwf	time_date_delimiter@type+1
  6834  0599  0847               	movf	_day_hex,w
  6835  059A  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6836  059F  00E7               	movwf	??_date_settings+2
  6837  05A0  0867               	movf	??_date_settings+2,w
  6838  05A1  00C7               	movwf	_day_hex
  6839                           
  6840                           ;Button_src.c: 531:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6841  05A2  3021               	movlw	33
  6842  05A3  00E5               	movwf	??_date_settings
  6843  05A4  0865               	movf	??_date_settings,w
  6844  05A5  00F0               	movwf	time_date_delimiter@hex
  6845  05A6  304A               	movlw	74
  6846  05A7  00E6               	movwf	??_date_settings+1
  6847  05A8  0866               	movf	??_date_settings+1,w
  6848  05A9  00F1               	movwf	time_date_delimiter@limiter
  6849  05AA  3002               	movlw	2
  6850  05AB  00F2               	movwf	time_date_delimiter@type
  6851  05AC  3000               	movlw	0
  6852  05AD  00F3               	movwf	time_date_delimiter@type+1
  6853  05AE  0847               	movf	_day_hex,w
  6854  05AF  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6855  05B4  00E7               	movwf	??_date_settings+2
  6856  05B5  0867               	movf	??_date_settings+2,w
  6857  05B6  00C7               	movwf	_day_hex
  6858                           
  6859                           ;Button_src.c: 532:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6860  05B7  3031               	movlw	49
  6861  05B8  00E5               	movwf	??_date_settings
  6862  05B9  0865               	movf	??_date_settings,w
  6863  05BA  00F0               	movwf	time_date_delimiter@hex
  6864  05BB  3059               	movlw	89
  6865  05BC  00E6               	movwf	??_date_settings+1
  6866  05BD  0866               	movf	??_date_settings+1,w
  6867  05BE  00F1               	movwf	time_date_delimiter@limiter
  6868  05BF  3002               	movlw	2
  6869  05C0  00F2               	movwf	time_date_delimiter@type
  6870  05C1  3000               	movlw	0
  6871  05C2  00F3               	movwf	time_date_delimiter@type+1
  6872  05C3  0847               	movf	_day_hex,w
  6873  05C4  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6874  05C9  00E7               	movwf	??_date_settings+2
  6875  05CA  0867               	movf	??_date_settings+2,w
  6876  05CB  00C7               	movwf	_day_hex
  6877                           
  6878                           ;Button_src.c: 534:                     c = time_date_delimiter(c,0x11,'9',3);
  6879  05CC  3011               	movlw	17
  6880  05CD  00E5               	movwf	??_date_settings
  6881  05CE  0865               	movf	??_date_settings,w
  6882  05CF  00F0               	movwf	time_date_delimiter@hex
  6883  05D0  3039               	movlw	57
  6884  05D1  00E6               	movwf	??_date_settings+1
  6885  05D2  0866               	movf	??_date_settings+1,w
  6886  05D3  00F1               	movwf	time_date_delimiter@limiter
  6887  05D4  3003               	movlw	3
  6888  05D5  00F2               	movwf	time_date_delimiter@type
  6889  05D6  3000               	movlw	0
  6890  05D7  00F3               	movwf	time_date_delimiter@type+1
  6891  05D8  0848               	movf	_c,w
  6892  05D9  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6893  05DE  00E7               	movwf	??_date_settings+2
  6894  05DF  0867               	movf	??_date_settings+2,w
  6895  05E0  00C8               	movwf	_c
  6896                           
  6897                           ;Button_src.c: 535:                     c = time_date_delimiter(c,0x21,'J',3);
  6898  05E1  3021               	movlw	33
  6899  05E2  00E5               	movwf	??_date_settings
  6900  05E3  0865               	movf	??_date_settings,w
  6901  05E4  00F0               	movwf	time_date_delimiter@hex
  6902  05E5  304A               	movlw	74
  6903  05E6  00E6               	movwf	??_date_settings+1
  6904  05E7  0866               	movf	??_date_settings+1,w
  6905  05E8  00F1               	movwf	time_date_delimiter@limiter
  6906  05E9  3003               	movlw	3
  6907  05EA  00F2               	movwf	time_date_delimiter@type
  6908  05EB  3000               	movlw	0
  6909  05EC  00F3               	movwf	time_date_delimiter@type+1
  6910  05ED  0848               	movf	_c,w
  6911  05EE  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6912  05F3  00E7               	movwf	??_date_settings+2
  6913  05F4  0867               	movf	??_date_settings+2,w
  6914  05F5  00C8               	movwf	_c
  6915                           
  6916                           ;Button_src.c: 536:                     c = time_date_delimiter(c,0x11,'9',3);
  6917  05F6  3011               	movlw	17
  6918  05F7  00E5               	movwf	??_date_settings
  6919  05F8  0865               	movf	??_date_settings,w
  6920  05F9  00F0               	movwf	time_date_delimiter@hex
  6921  05FA  3039               	movlw	57
  6922  05FB  00E6               	movwf	??_date_settings+1
  6923  05FC  0866               	movf	??_date_settings+1,w
  6924  05FD  00F1               	movwf	time_date_delimiter@limiter
  6925  05FE  3003               	movlw	3
  6926  05FF  00F2               	movwf	time_date_delimiter@type
  6927  0600  3000               	movlw	0
  6928  0601  00F3               	movwf	time_date_delimiter@type+1
  6929  0602  0848               	movf	_c,w
  6930  0603  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6931  0608  00E7               	movwf	??_date_settings+2
  6932  0609  0867               	movf	??_date_settings+2,w
  6933  060A  00C8               	movwf	_c
  6934                           
  6935                           ;Button_src.c: 537:                     c = time_date_delimiter(c,0x21,'J',3);
  6936  060B  3021               	movlw	33
  6937  060C  00E5               	movwf	??_date_settings
  6938  060D  0865               	movf	??_date_settings,w
  6939  060E  00F0               	movwf	time_date_delimiter@hex
  6940  060F  304A               	movlw	74
  6941  0610  00E6               	movwf	??_date_settings+1
  6942  0611  0866               	movf	??_date_settings+1,w
  6943  0612  00F1               	movwf	time_date_delimiter@limiter
  6944  0613  3003               	movlw	3
  6945  0614  00F2               	movwf	time_date_delimiter@type
  6946  0615  3000               	movlw	0
  6947  0616  00F3               	movwf	time_date_delimiter@type+1
  6948  0617  0848               	movf	_c,w
  6949  0618  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6950  061D  00E7               	movwf	??_date_settings+2
  6951  061E  0867               	movf	??_date_settings+2,w
  6952  061F  00C8               	movwf	_c
  6953                           
  6954                           ;Button_src.c: 538:                     c = time_date_delimiter(c,0x31,'Y',3);
  6955  0620  3031               	movlw	49
  6956  0621  00E5               	movwf	??_date_settings
  6957  0622  0865               	movf	??_date_settings,w
  6958  0623  00F0               	movwf	time_date_delimiter@hex
  6959  0624  3059               	movlw	89
  6960  0625  00E6               	movwf	??_date_settings+1
  6961  0626  0866               	movf	??_date_settings+1,w
  6962  0627  00F1               	movwf	time_date_delimiter@limiter
  6963  0628  3003               	movlw	3
  6964  0629  00F2               	movwf	time_date_delimiter@type
  6965  062A  3000               	movlw	0
  6966  062B  00F3               	movwf	time_date_delimiter@type+1
  6967  062C  0848               	movf	_c,w
  6968  062D  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6969  0632  00E7               	movwf	??_date_settings+2
  6970  0633  0867               	movf	??_date_settings+2,w
  6971  0634  00C8               	movwf	_c
  6972                           
  6973                           ;Button_src.c: 539:                     c = time_date_delimiter(c,0x41,'j',3);
  6974  0635  3041               	movlw	65
  6975  0636  00E5               	movwf	??_date_settings
  6976  0637  0865               	movf	??_date_settings,w
  6977  0638  00F0               	movwf	time_date_delimiter@hex
  6978  0639  306A               	movlw	106
  6979  063A  00E6               	movwf	??_date_settings+1
  6980  063B  0866               	movf	??_date_settings+1,w
  6981  063C  00F1               	movwf	time_date_delimiter@limiter
  6982  063D  3003               	movlw	3
  6983  063E  00F2               	movwf	time_date_delimiter@type
  6984  063F  3000               	movlw	0
  6985  0640  00F3               	movwf	time_date_delimiter@type+1
  6986  0641  0848               	movf	_c,w
  6987  0642  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  6988  0647  00E7               	movwf	??_date_settings+2
  6989  0648  0867               	movf	??_date_settings+2,w
  6990  0649  00C8               	movwf	_c
  6991                           
  6992                           ;Button_src.c: 540:                     c = time_date_delimiter(c,0x51,'z',3);
  6993  064A  3051               	movlw	81
  6994  064B  00E5               	movwf	??_date_settings
  6995  064C  0865               	movf	??_date_settings,w
  6996  064D  00F0               	movwf	time_date_delimiter@hex
  6997  064E  307A               	movlw	122
  6998  064F  00E6               	movwf	??_date_settings+1
  6999  0650  0866               	movf	??_date_settings+1,w
  7000  0651  00F1               	movwf	time_date_delimiter@limiter
  7001  0652  3003               	movlw	3
  7002  0653  00F2               	movwf	time_date_delimiter@type
  7003  0654  3000               	movlw	0
  7004  0655  00F3               	movwf	time_date_delimiter@type+1
  7005  0656  0848               	movf	_c,w
  7006  0657  120A  158A  223C  120A  118A  	fcall	_time_date_delimiter
  7007  065C  00E7               	movwf	??_date_settings+2
  7008  065D  0867               	movf	??_date_settings+2,w
  7009  065E  00C8               	movwf	_c
  7010                           
  7011                           ;Button_src.c: 542:               if(stats==0){
  7012  065F  0822               	movf	_stats,w
  7013  0660  0423               	iorwf	_stats+1,w
  7014  0661  1D03               	btfss	3,2
  7015  0662  2E71               	goto	l4297
  7016                           
  7017                           ;Button_src.c: 543:                   table[4] = prev_hex;
  7018  0663  0845               	movf	_prev_hex,w
  7019  0664  00E5               	movwf	??_date_settings
  7020  0665  0865               	movf	??_date_settings,w
  7021  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7022  0667  00B7               	movwf	(_table^(0+128)+4)
  7023                           
  7024                           ;Button_src.c: 544:                   table[6] = prev_hex_year;
  7025  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7026  0669  0843               	movf	_prev_hex_year,w
  7027  066A  00E5               	movwf	??_date_settings
  7028  066B  0865               	movf	??_date_settings,w
  7029  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7030  066D  00B9               	movwf	(_table^(0+128)+6)
  7031                           
  7032                           ;Button_src.c: 545:                   table[3] = prev_hex_day;
  7033  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7034  066F  0844               	movf	_prev_hex_day,w
  7035  0670  2E82               	goto	L3
  7036  0671                     l4297:	
  7037                           ;Button_src.c: 546:               }
  7038                           
  7039  0671  0322               	decf	_stats,w
  7040  0672  0423               	iorwf	_stats+1,w
  7041  0673  1D03               	btfss	3,2
  7042  0674  2E86               	goto	l4301
  7043                           
  7044                           ;Button_src.c: 548:               {;Button_src.c: 549:                  table[4]= a;
  7045  0675  084A               	movf	_a,w
  7046  0676  00E5               	movwf	??_date_settings
  7047  0677  0865               	movf	??_date_settings,w
  7048  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7049  0679  00B7               	movwf	(_table^(0+128)+4)
  7050                           
  7051                           ;Button_src.c: 550:                  table[6] = c;
  7052  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7053  067B  0848               	movf	_c,w
  7054  067C  00E5               	movwf	??_date_settings
  7055  067D  0865               	movf	??_date_settings,w
  7056  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7057  067F  00B9               	movwf	(_table^(0+128)+6)
  7058                           
  7059                           ;Button_src.c: 551:                  table[3] = day_hex;
  7060  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7061  0681  0847               	movf	_day_hex,w
  7062  0682                     L3:	
  7063  0682  00E5               	movwf	??_date_settings
  7064  0683  0865               	movf	??_date_settings,w
  7065  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7066  0685  00B6               	movwf	(_table^(0+128)+3)
  7067  0686                     l4301:	
  7068                           
  7069                           ;Button_src.c: 554:              write_cmd(0x88);
  7070  0686  3088               	movlw	136
  7071  0687  160A  118A  2400  120A  118A  	fcall	_write_cmd
  7072                           
  7073                           ;Button_src.c: 556:                   RC0 = 0;
  7074  068C  1007               	bcf	7,0	;volatile
  7075                           
  7076                           ;Button_src.c: 557:                   RC1 = 1;
  7077  068D  1487               	bsf	7,1	;volatile
  7078                           
  7079                           ;Button_src.c: 558:                   RC2 = 1;
  7080  068E  1507               	bsf	7,2	;volatile
  7081                           
  7082                           ;Button_src.c: 559:                   RC3 = 1;
  7083  068F  1587               	bsf	7,3	;volatile
  7084                           
  7085                           ;Button_src.c: 561:                     if (RC6 == 0 ){
  7086  0690  1B07               	btfsc	7,6	;volatile
  7087  0691  2EAB               	goto	l791
  7088                           
  7089                           ;Button_src.c: 562:                           set_time();
  7090  0692  160A  118A  2506  120A  118A  	fcall	_set_time
  7091                           
  7092                           ;Button_src.c: 563:                           a = 0x00;
  7093  0697  01CA               	clrf	_a
  7094                           
  7095                           ;Button_src.c: 564:                           c = 0x00;
  7096  0698  01C8               	clrf	_c
  7097                           
  7098                           ;Button_src.c: 565:                           day_hex = 0x00;
  7099  0699  01C7               	clrf	_day_hex
  7100                           
  7101                           ;Button_src.c: 566:                           day_high = 0;
  7102  069A  01A4               	clrf	_day_high
  7103  069B  01A5               	clrf	_day_high+1
  7104                           
  7105                           ;Button_src.c: 567:                           day_low = 0;
  7106  069C  01A6               	clrf	_day_low
  7107  069D  01A7               	clrf	_day_low+1
  7108                           
  7109                           ;Button_src.c: 568:                           x = 0;
  7110  069E  01AC               	clrf	_x
  7111  069F  01AD               	clrf	_x+1
  7112                           
  7113                           ;Button_src.c: 569:                           y = 0;
  7114  06A0  01AA               	clrf	_y
  7115  06A1  01AB               	clrf	_y+1
  7116                           
  7117                           ;Button_src.c: 570:                           w = 0;
  7118  06A2  01AE               	clrf	_w
  7119  06A3  01AF               	clrf	_w+1
  7120                           
  7121                           ;Button_src.c: 571:                           t = 0;
  7122  06A4  01B0               	clrf	_t
  7123  06A5  01B1               	clrf	_t+1
  7124                           
  7125                           ;Button_src.c: 572:                           write_cmd(0x1);
  7126  06A6  3001               	movlw	1
  7127  06A7  160A  118A  2400   	fcall	_write_cmd
  7128  06AA  0008               	return
  7129  06AB                     l791:	
  7130                           ;Button_src.c: 574:                             }
  7131                           
  7132                           
  7133                           ;Button_src.c: 575:                   RC0 = 0;
  7134  06AB  1007               	bcf	7,0	;volatile
  7135                           
  7136                           ;Button_src.c: 576:                   RC1 = 1;
  7137  06AC  1487               	bsf	7,1	;volatile
  7138                           
  7139                           ;Button_src.c: 577:                   RC2 = 1;
  7140  06AD  1507               	bsf	7,2	;volatile
  7141                           
  7142                           ;Button_src.c: 578:                   RC3 = 1;
  7143  06AE  1587               	bsf	7,3	;volatile
  7144                           
  7145                           ;Button_src.c: 579:                   z = modulus_func(z,3);
  7146  06AF  0829               	movf	_z+1,w
  7147  06B0  00F8               	movwf	modulus_func@x+1
  7148  06B1  0828               	movf	_z,w
  7149  06B2  00F7               	movwf	modulus_func@x
  7150  06B3  3003               	movlw	3
  7151  06B4  00F9               	movwf	modulus_func@y
  7152  06B5  3000               	movlw	0
  7153  06B6  00FA               	movwf	modulus_func@y+1
  7154  06B7  160A  118A  2378  120A  118A  	fcall	_modulus_func
  7155  06BC  0878               	movf	?_modulus_func+1,w
  7156  06BD  00A9               	movwf	_z+1
  7157  06BE  0877               	movf	?_modulus_func,w
  7158  06BF  00A8               	movwf	_z
  7159                           
  7160                           ;Button_src.c: 580:                   if(RC4 == 0 && z ==0){
  7161  06C0  1A07               	btfsc	7,4	;volatile
  7162  06C1  2F01               	goto	l4349
  7163  06C2  0828               	movf	_z,w
  7164  06C3  0429               	iorwf	_z+1,w
  7165  06C4  1D03               	btfss	3,2
  7166  06C5  2F01               	goto	l4349
  7167                           
  7168                           ;Button_src.c: 581:                       write_cmd(0x90);
  7169  06C6  3090               	movlw	144
  7170  06C7  160A  118A  2400  120A  118A  	fcall	_write_cmd
  7171                           
  7172                           ;Button_src.c: 582:                       write_char('D');
  7173  06CC  3044               	movlw	68
  7174  06CD  160A  118A  23E9  120A  118A  	fcall	_write_char
  7175                           
  7176                           ;Button_src.c: 583:                       write_char('a');
  7177  06D2  3061               	movlw	97
  7178  06D3  160A  118A  23E9  120A  118A  	fcall	_write_char
  7179                           
  7180                           ;Button_src.c: 584:                       write_char('y');
  7181  06D8  3079               	movlw	121
  7182  06D9  160A  118A  23E9  120A  118A  	fcall	_write_char
  7183                           
  7184                           ;Button_src.c: 585:                       write_char(':');
  7185  06DE  303A               	movlw	58
  7186  06DF  160A  118A  23E9  120A  118A  	fcall	_write_char
  7187                           
  7188                           ;Button_src.c: 586:                       write_char(' ');
  7189  06E4  3020               	movlw	32
  7190  06E5  160A  118A  23E9  120A  118A  	fcall	_write_char
  7191                           
  7192                           ;Button_src.c: 587:                       write_char(' ');
  7193  06EA  3020               	movlw	32
  7194  06EB  160A  118A  23E9  120A  118A  	fcall	_write_char
  7195                           
  7196                           ;Button_src.c: 588:                       b = 'y';
  7197  06F0  3079               	movlw	121
  7198  06F1  00E5               	movwf	??_date_settings
  7199  06F2  0865               	movf	??_date_settings,w
  7200  06F3  00C9               	movwf	_b
  7201                           
  7202                           ;Button_src.c: 590:                       button_delay();
  7203  06F4  160A  118A  23AD  120A  118A  	fcall	_button_delay
  7204                           
  7205                           ;Button_src.c: 591:                       z++;
  7206  06F9  3001               	movlw	1
  7207  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7208  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7209  06FC  07A8               	addwf	_z,f
  7210  06FD  1803               	skipnc
  7211  06FE  0AA9               	incf	_z+1,f
  7212  06FF  3000               	movlw	0
  7213  0700  07A9               	addwf	_z+1,f
  7214  0701                     l4349:	
  7215                           
  7216                           ;Button_src.c: 593:                   RC0 = 0;
  7217  0701  1007               	bcf	7,0	;volatile
  7218                           
  7219                           ;Button_src.c: 594:                   RC1 = 1;
  7220  0702  1487               	bsf	7,1	;volatile
  7221                           
  7222                           ;Button_src.c: 595:                   RC2 = 1;
  7223  0703  1507               	bsf	7,2	;volatile
  7224                           
  7225                           ;Button_src.c: 596:                   RC3 = 1;
  7226  0704  1587               	bsf	7,3	;volatile
  7227                           
  7228                           ;Button_src.c: 597:                   if(RC4 == 0&& z ==1){
  7229  0705  1A07               	btfsc	7,4	;volatile
  7230  0706  2F44               	goto	l4379
  7231  0707  0328               	decf	_z,w
  7232  0708  0429               	iorwf	_z+1,w
  7233  0709  1D03               	btfss	3,2
  7234  070A  2F44               	goto	l4379
  7235                           
  7236                           ;Button_src.c: 598:                       z++;
  7237  070B  3001               	movlw	1
  7238  070C  07A8               	addwf	_z,f
  7239  070D  1803               	skipnc
  7240  070E  0AA9               	incf	_z+1,f
  7241  070F  3000               	movlw	0
  7242  0710  07A9               	addwf	_z+1,f
  7243                           
  7244                           ;Button_src.c: 599:                       button_delay();
  7245  0711  160A  118A  23AD  120A  118A  	fcall	_button_delay
  7246                           
  7247                           ;Button_src.c: 601:                       write_cmd(0x90);
  7248  0716  3090               	movlw	144
  7249  0717  160A  118A  2400  120A  118A  	fcall	_write_cmd
  7250                           
  7251                           ;Button_src.c: 602:                       write_char('M');
  7252  071C  304D               	movlw	77
  7253  071D  160A  118A  23E9  120A  118A  	fcall	_write_char
  7254                           
  7255                           ;Button_src.c: 603:                       write_char('o');
  7256  0722  306F               	movlw	111
  7257  0723  160A  118A  23E9  120A  118A  	fcall	_write_char
  7258                           
  7259                           ;Button_src.c: 604:                       write_char('n');
  7260  0728  306E               	movlw	110
  7261  0729  160A  118A  23E9  120A  118A  	fcall	_write_char
  7262                           
  7263                           ;Button_src.c: 605:                       write_char('t');
  7264  072E  3074               	movlw	116
  7265  072F  160A  118A  23E9  120A  118A  	fcall	_write_char
  7266                           
  7267                           ;Button_src.c: 606:                       write_char('h');
  7268  0734  3068               	movlw	104
  7269  0735  160A  118A  23E9  120A  118A  	fcall	_write_char
  7270                           
  7271                           ;Button_src.c: 607:                       write_char(':');
  7272  073A  303A               	movlw	58
  7273  073B  160A  118A  23E9  120A  118A  	fcall	_write_char
  7274                           
  7275                           ;Button_src.c: 608:                       b = 'x';
  7276  0740  3078               	movlw	120
  7277  0741  00E5               	movwf	??_date_settings
  7278  0742  0865               	movf	??_date_settings,w
  7279  0743  00C9               	movwf	_b
  7280  0744                     l4379:	
  7281                           
  7282                           ;Button_src.c: 611:                   RC0 = 0;
  7283  0744  1007               	bcf	7,0	;volatile
  7284                           
  7285                           ;Button_src.c: 612:                   RC1 = 1;
  7286  0745  1487               	bsf	7,1	;volatile
  7287                           
  7288                           ;Button_src.c: 613:                   RC2 = 1;
  7289  0746  1507               	bsf	7,2	;volatile
  7290                           
  7291                           ;Button_src.c: 614:                   RC3 = 1;
  7292  0747  1587               	bsf	7,3	;volatile
  7293                           
  7294                           ;Button_src.c: 615:                   if(RC4 == 0&& z ==2){
  7295  0748  1A07               	btfsc	7,4	;volatile
  7296  0749  2F8A               	goto	l4409
  7297  074A  3002               	movlw	2
  7298  074B  0628               	xorwf	_z,w
  7299  074C  0429               	iorwf	_z+1,w
  7300  074D  1D03               	btfss	3,2
  7301  074E  2F8A               	goto	l4409
  7302                           
  7303                           ;Button_src.c: 616:                       button_delay();
  7304  074F  160A  118A  23AD  120A  118A  	fcall	_button_delay
  7305                           
  7306                           ;Button_src.c: 617:                       z++;
  7307  0754  3001               	movlw	1
  7308  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7309  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7310  0757  07A8               	addwf	_z,f
  7311  0758  1803               	skipnc
  7312  0759  0AA9               	incf	_z+1,f
  7313  075A  3000               	movlw	0
  7314  075B  07A9               	addwf	_z+1,f
  7315                           
  7316                           ;Button_src.c: 619:                       write_cmd(0x90);
  7317  075C  3090               	movlw	144
  7318  075D  160A  118A  2400  120A  118A  	fcall	_write_cmd
  7319                           
  7320                           ;Button_src.c: 620:                       write_char('Y');
  7321  0762  3059               	movlw	89
  7322  0763  160A  118A  23E9  120A  118A  	fcall	_write_char
  7323                           
  7324                           ;Button_src.c: 621:                       write_char('e');
  7325  0768  3065               	movlw	101
  7326  0769  160A  118A  23E9  120A  118A  	fcall	_write_char
  7327                           
  7328                           ;Button_src.c: 622:                       write_char('a');
  7329  076E  3061               	movlw	97
  7330  076F  160A  118A  23E9  120A  118A  	fcall	_write_char
  7331                           
  7332                           ;Button_src.c: 623:                       write_char('r');
  7333  0774  3072               	movlw	114
  7334  0775  160A  118A  23E9  120A  118A  	fcall	_write_char
  7335                           
  7336                           ;Button_src.c: 624:                       write_char(':');
  7337  077A  303A               	movlw	58
  7338  077B  160A  118A  23E9  120A  118A  	fcall	_write_char
  7339                           
  7340                           ;Button_src.c: 625:                       write_char(' ');
  7341  0780  3020               	movlw	32
  7342  0781  160A  118A  23E9  120A  118A  	fcall	_write_char
  7343                           
  7344                           ;Button_src.c: 626:                       b = 'z';
  7345  0786  307A               	movlw	122
  7346  0787  00E5               	movwf	??_date_settings
  7347  0788  0865               	movf	??_date_settings,w
  7348  0789  00C9               	movwf	_b
  7349  078A                     l4409:	
  7350                           
  7351                           ;Button_src.c: 629:               write_cmd(0x88);
  7352  078A  3088               	movlw	136
  7353  078B  160A  118A  2400  120A  118A  	fcall	_write_cmd
  7354                           
  7355                           ;Button_src.c: 630:               write_char(day_high + '0');
  7356  0790  0824               	movf	_day_high,w
  7357  0791  3E30               	addlw	48
  7358  0792  160A  118A  23E9  120A  118A  	fcall	_write_char
  7359                           
  7360                           ;Button_src.c: 631:               write_char(day_low + '0');
  7361  0797  0826               	movf	_day_low,w
  7362  0798  3E30               	addlw	48
  7363  0799  160A  118A  23E9  120A  118A  	fcall	_write_char
  7364                           
  7365                           ;Button_src.c: 632:               write_char('/');
  7366  079E  302F               	movlw	47
  7367  079F  160A  118A  23E9  120A  118A  	fcall	_write_char
  7368                           
  7369                           ;Button_src.c: 633:               write_char(y + '0');
  7370  07A4  082A               	movf	_y,w
  7371  07A5  3E30               	addlw	48
  7372  07A6  160A  118A  23E9  120A  118A  	fcall	_write_char
  7373                           
  7374                           ;Button_src.c: 634:               write_char(x + '0');
  7375  07AB  082C               	movf	_x,w
  7376  07AC  3E30               	addlw	48
  7377  07AD  160A  118A  23E9  120A  118A  	fcall	_write_char
  7378                           
  7379                           ;Button_src.c: 635:               write_char('/');
  7380  07B2  302F               	movlw	47
  7381  07B3  160A  118A  23E9  120A  118A  	fcall	_write_char
  7382                           
  7383                           ;Button_src.c: 636:               write_char(w+ '0');
  7384  07B8  082E               	movf	_w,w
  7385  07B9  3E30               	addlw	48
  7386  07BA  160A  118A  23E9  120A  118A  	fcall	_write_char
  7387                           
  7388                           ;Button_src.c: 637:               write_char(t+ '0');
  7389  07BF  0830               	movf	_t,w
  7390  07C0  3E30               	addlw	48
  7391  07C1  160A  118A  23E9  120A  118A  	fcall	_write_char
  7392                           
  7393                           ;Button_src.c: 640:             RC0 = 0;
  7394  07C6  1007               	bcf	7,0	;volatile
  7395                           
  7396                           ;Button_src.c: 641:             RC1 = 1;
  7397  07C7  1487               	bsf	7,1	;volatile
  7398                           
  7399                           ;Button_src.c: 642:             RC2 = 1;
  7400  07C8  1507               	bsf	7,2	;volatile
  7401                           
  7402                           ;Button_src.c: 643:             RC3 = 1;
  7403  07C9  1587               	bsf	7,3	;volatile
  7404                           
  7405                           ;Button_src.c: 644:             if (RC7 == 0 ){
  7406  07CA  1B87               	btfsc	7,7	;volatile
  7407  07CB  2B93               	goto	l768
  7408                           
  7409                           ;Button_src.c: 645:             a = 0x00;
  7410  07CC  01CA               	clrf	_a
  7411                           
  7412                           ;Button_src.c: 646:             c = 0x00;
  7413  07CD  01C8               	clrf	_c
  7414                           
  7415                           ;Button_src.c: 647:             day_hex = 0x00;
  7416  07CE  01C7               	clrf	_day_hex
  7417                           
  7418                           ;Button_src.c: 648:             x = 0;
  7419  07CF  01AC               	clrf	_x
  7420  07D0  01AD               	clrf	_x+1
  7421                           
  7422                           ;Button_src.c: 649:             y = 0;
  7423  07D1  01AA               	clrf	_y
  7424  07D2  01AB               	clrf	_y+1
  7425                           
  7426                           ;Button_src.c: 650:             w = 0;
  7427  07D3  01AE               	clrf	_w
  7428  07D4  01AF               	clrf	_w+1
  7429                           
  7430                           ;Button_src.c: 651:             t = 0;
  7431  07D5  01B0               	clrf	_t
  7432  07D6  01B1               	clrf	_t+1
  7433                           
  7434                           ;Button_src.c: 652:             day_high = 0;
  7435  07D7  01A4               	clrf	_day_high
  7436  07D8  01A5               	clrf	_day_high+1
  7437                           
  7438                           ;Button_src.c: 653:             day_low = 0;
  7439  07D9  01A6               	clrf	_day_low
  7440  07DA  01A7               	clrf	_day_low+1
  7441                           
  7442                           ;Button_src.c: 654:             write_cmd(0x1);
  7443  07DB  3001               	movlw	1
  7444  07DC  160A  118A  2400   	fcall	_write_cmd
  7445                           
  7446                           ;Button_src.c: 655:             break;
  7447  07DF  0008               	return
  7448  07E0                     __end_of_date_settings:	
  7449                           
  7450                           	psect	text29
  7451  1400                     __ptext29:	
  7452 ;; *************** function _write_cmd *****************
  7453 ;; Defined at:
  7454 ;;		line 41 in file "LCD_src.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  x               1    wreg     unsigned char 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  x               1    2[COMMON] unsigned char 
  7459 ;;  i               2    0        int 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 300/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7469 ;;      Params:         0       0       0       0       0
  7470 ;;      Locals:         1       0       0       0       0
  7471 ;;      Temps:          0       0       0       0       0
  7472 ;;      Totals:         1       0       0       0       0
  7473 ;;Total ram usage:        1 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    1
  7476 ;; This function calls:
  7477 ;;		_delay_screen
  7478 ;; This function is called by:
  7479 ;;		_main
  7480 ;;		_lcd_init
  7481 ;;		_thermometer_threshhold_settings
  7482 ;;		_time_settings
  7483 ;;		_date_settings
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _write_cmd
  7489  1400                     _write_cmd:	
  7490                           
  7491                           ;incstack = 0
  7492                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7493                           ;write_cmd@x stored from wreg
  7494  1400  00F2               	movwf	write_cmd@x
  7495                           
  7496                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7497  1401  1283               	bcf	3,5	;RP0=0, select bank0
  7498  1402  1303               	bcf	3,6	;RP1=0, select bank0
  7499  1403  1285               	bcf	5,5	;volatile
  7500                           
  7501                           ;LCD_src.c: 45:  RA4=0;
  7502  1404  1205               	bcf	5,4	;volatile
  7503                           
  7504                           ;LCD_src.c: 46:  RA3=0;
  7505  1405  1185               	bcf	5,3	;volatile
  7506                           
  7507                           ;LCD_src.c: 47:  delay_screen();
  7508  1406  160A  118A  2399  160A  118A  	fcall	_delay_screen
  7509                           
  7510                           ;LCD_src.c: 48:  RA3=1;
  7511  140B  1283               	bcf	3,5	;RP0=0, select bank0
  7512  140C  1303               	bcf	3,6	;RP1=0, select bank0
  7513  140D  1585               	bsf	5,3	;volatile
  7514                           
  7515                           ;LCD_src.c: 49:  PORTD=x;
  7516  140E  0872               	movf	write_cmd@x,w
  7517  140F  0088               	movwf	8	;volatile
  7518                           
  7519                           ;LCD_src.c: 50:  delay_screen();
  7520  1410  160A  118A  2399   	fcall	_delay_screen
  7521                           
  7522                           ;LCD_src.c: 51:  RA3=0;
  7523  1413  1283               	bcf	3,5	;RP0=0, select bank0
  7524  1414  1303               	bcf	3,6	;RP1=0, select bank0
  7525  1415  1185               	bcf	5,3	;volatile
  7526  1416  0008               	return
  7527  1417                     __end_of_write_cmd:	
  7528                           
  7529                           	psect	text30
  7530  135A                     __ptext30:	
  7531 ;; *************** function _time_date_hex_terminator *****************
  7532 ;; Defined at:
  7533 ;;		line 87 in file "math_src.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;  val             1    wreg     unsigned char 
  7536 ;;  limiter         1    0[COMMON] unsigned char 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;  val             1    3[COMMON] unsigned char 
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      unsigned char 
  7541 ;; Registers used:
  7542 ;;		wreg, status,2
  7543 ;; Tracked objects:
  7544 ;;		On entry : 300/0
  7545 ;;		On exit  : 300/0
  7546 ;;		Unchanged: 300/0
  7547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7548 ;;      Params:         1       0       0       0       0
  7549 ;;      Locals:         1       0       0       0       0
  7550 ;;      Temps:          2       0       0       0       0
  7551 ;;      Totals:         4       0       0       0       0
  7552 ;;Total ram usage:        4 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; This function calls:
  7555 ;;		Nothing
  7556 ;; This function is called by:
  7557 ;;		_thermometer_threshhold_settings
  7558 ;;		_time_settings
  7559 ;;		_date_settings
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           
  7564                           ;psect for function _time_date_hex_terminator
  7565  135A                     _time_date_hex_terminator:	
  7566                           
  7567                           ;incstack = 0
  7568                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7569                           ;time_date_hex_terminator@val stored from wreg
  7570  135A  00F3               	movwf	time_date_hex_terminator@val
  7571                           
  7572                           ;math_src.c: 88:     if((val + '0') == limiter){
  7573  135B  0873               	movf	time_date_hex_terminator@val,w
  7574  135C  3E30               	addlw	48
  7575  135D  00F1               	movwf	??_time_date_hex_terminator
  7576  135E  3000               	movlw	0
  7577  135F  1803               	skipnc
  7578  1360  3001               	movlw	1
  7579  1361  00F2               	movwf	??_time_date_hex_terminator+1
  7580  1362  0870               	movf	time_date_hex_terminator@limiter,w
  7581  1363  0671               	xorwf	??_time_date_hex_terminator,w
  7582  1364  0472               	iorwf	??_time_date_hex_terminator+1,w
  7583  1365  1903               	btfsc	3,2
  7584                           
  7585                           ;math_src.c: 89:     val = 0x00;
  7586  1366  01F3               	clrf	time_date_hex_terminator@val
  7587                           
  7588                           ;math_src.c: 91:     return val;
  7589  1367  0873               	movf	time_date_hex_terminator@val,w
  7590  1368  0008               	return
  7591  1369                     __end_of_time_date_hex_terminator:	
  7592                           
  7593                           	psect	text31
  7594  0A3C                     __ptext31:	
  7595 ;; *************** function _time_date_delimiter *****************
  7596 ;; Defined at:
  7597 ;;		line 28 in file "math_src.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  val             1    wreg     unsigned char 
  7600 ;;  hex             1    0[COMMON] unsigned char 
  7601 ;;  limiter         1    1[COMMON] unsigned char 
  7602 ;;  type            2    2[COMMON] int 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  val             1    6[COMMON] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      unsigned char 
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 300/0
  7611 ;;		On exit  : 300/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7614 ;;      Params:         4       0       0       0       0
  7615 ;;      Locals:         1       0       0       0       0
  7616 ;;      Temps:          2       0       0       0       0
  7617 ;;      Totals:         7       0       0       0       0
  7618 ;;Total ram usage:        7 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; This function calls:
  7621 ;;		Nothing
  7622 ;; This function is called by:
  7623 ;;		_time_settings
  7624 ;;		_date_settings
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function _time_date_delimiter
  7630  0A3C                     _time_date_delimiter:	
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7634                           ;time_date_delimiter@val stored from wreg
  7635  0A3C  00F6               	movwf	time_date_delimiter@val
  7636                           
  7637                           ;math_src.c: 29:     if((val + '0') == limiter){
  7638  0A3D  0876               	movf	time_date_delimiter@val,w
  7639  0A3E  3E30               	addlw	48
  7640  0A3F  00F4               	movwf	??_time_date_delimiter
  7641  0A40  3000               	movlw	0
  7642  0A41  1803               	skipnc
  7643  0A42  3001               	movlw	1
  7644  0A43  00F5               	movwf	??_time_date_delimiter+1
  7645  0A44  0871               	movf	time_date_delimiter@limiter,w
  7646  0A45  0674               	xorwf	??_time_date_delimiter,w
  7647  0A46  0475               	iorwf	??_time_date_delimiter+1,w
  7648  0A47  1D03               	skipz
  7649  0A48  2B91               	goto	l3687
  7650                           
  7651                           ;math_src.c: 30:     val = hex;
  7652  0A49  0870               	movf	time_date_delimiter@hex,w
  7653  0A4A  00F4               	movwf	??_time_date_delimiter
  7654  0A4B  0874               	movf	??_time_date_delimiter,w
  7655  0A4C  00F6               	movwf	time_date_delimiter@val
  7656                           
  7657                           ;math_src.c: 31:     stats=0;
  7658  0A4D  01A2               	clrf	_stats
  7659  0A4E  01A3               	clrf	_stats+1
  7660                           
  7661                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7662  0A4F  3039               	movlw	57
  7663  0A50  0671               	xorwf	time_date_delimiter@limiter,w
  7664  0A51  1D03               	btfss	3,2
  7665  0A52  2A5B               	goto	l3541
  7666  0A53  0372               	decf	time_date_delimiter@type,w
  7667  0A54  0473               	iorwf	time_date_delimiter@type+1,w
  7668  0A55  1D03               	btfss	3,2
  7669  0A56  2A5B               	goto	l3541
  7670                           
  7671                           ;math_src.c: 33:         prev_hex= 0x09;
  7672  0A57  3009               	movlw	9
  7673  0A58  00F4               	movwf	??_time_date_delimiter
  7674  0A59  0874               	movf	??_time_date_delimiter,w
  7675  0A5A  00C5               	movwf	_prev_hex
  7676  0A5B                     l3541:	
  7677                           
  7678                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7679  0A5B  304A               	movlw	74
  7680  0A5C  0671               	xorwf	time_date_delimiter@limiter,w
  7681  0A5D  1D03               	btfss	3,2
  7682  0A5E  2A67               	goto	l3547
  7683  0A5F  0372               	decf	time_date_delimiter@type,w
  7684  0A60  0473               	iorwf	time_date_delimiter@type+1,w
  7685  0A61  1D03               	btfss	3,2
  7686  0A62  2A67               	goto	l3547
  7687                           
  7688                           ;math_src.c: 35:         prev_hex = 0x19;
  7689  0A63  3019               	movlw	25
  7690  0A64  00F4               	movwf	??_time_date_delimiter
  7691  0A65  0874               	movf	??_time_date_delimiter,w
  7692  0A66  00C5               	movwf	_prev_hex
  7693  0A67                     l3547:	
  7694                           
  7695                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7696  0A67  3059               	movlw	89
  7697  0A68  0671               	xorwf	time_date_delimiter@limiter,w
  7698  0A69  1D03               	btfss	3,2
  7699  0A6A  2A73               	goto	l3553
  7700  0A6B  0372               	decf	time_date_delimiter@type,w
  7701  0A6C  0473               	iorwf	time_date_delimiter@type+1,w
  7702  0A6D  1D03               	btfss	3,2
  7703  0A6E  2A73               	goto	l3553
  7704                           
  7705                           ;math_src.c: 37:         prev_hex = 0x29;
  7706  0A6F  3029               	movlw	41
  7707  0A70  00F4               	movwf	??_time_date_delimiter
  7708  0A71  0874               	movf	??_time_date_delimiter,w
  7709  0A72  00C5               	movwf	_prev_hex
  7710  0A73                     l3553:	
  7711                           
  7712                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7713  0A73  306A               	movlw	106
  7714  0A74  0671               	xorwf	time_date_delimiter@limiter,w
  7715  0A75  1D03               	btfss	3,2
  7716  0A76  2A7F               	goto	l3559
  7717  0A77  0372               	decf	time_date_delimiter@type,w
  7718  0A78  0473               	iorwf	time_date_delimiter@type+1,w
  7719  0A79  1D03               	btfss	3,2
  7720  0A7A  2A7F               	goto	l3559
  7721                           
  7722                           ;math_src.c: 39:         prev_hex =0x39;
  7723  0A7B  3039               	movlw	57
  7724  0A7C  00F4               	movwf	??_time_date_delimiter
  7725  0A7D  0874               	movf	??_time_date_delimiter,w
  7726  0A7E  00C5               	movwf	_prev_hex
  7727  0A7F                     l3559:	
  7728                           
  7729                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7730  0A7F  307A               	movlw	122
  7731  0A80  0671               	xorwf	time_date_delimiter@limiter,w
  7732  0A81  1D03               	btfss	3,2
  7733  0A82  2A8B               	goto	l3565
  7734  0A83  0372               	decf	time_date_delimiter@type,w
  7735  0A84  0473               	iorwf	time_date_delimiter@type+1,w
  7736  0A85  1D03               	btfss	3,2
  7737  0A86  2A8B               	goto	l3565
  7738                           
  7739                           ;math_src.c: 41:         prev_hex = 0x49;
  7740  0A87  3049               	movlw	73
  7741  0A88  00F4               	movwf	??_time_date_delimiter
  7742  0A89  0874               	movf	??_time_date_delimiter,w
  7743  0A8A  00C5               	movwf	_prev_hex
  7744  0A8B                     l3565:	
  7745                           
  7746                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7747  0A8B  3039               	movlw	57
  7748  0A8C  0671               	xorwf	time_date_delimiter@limiter,w
  7749  0A8D  1D03               	btfss	3,2
  7750  0A8E  2A98               	goto	l3571
  7751  0A8F  3002               	movlw	2
  7752  0A90  0672               	xorwf	time_date_delimiter@type,w
  7753  0A91  0473               	iorwf	time_date_delimiter@type+1,w
  7754  0A92  1D03               	btfss	3,2
  7755  0A93  2A98               	goto	l3571
  7756                           
  7757                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7758  0A94  3009               	movlw	9
  7759  0A95  00F4               	movwf	??_time_date_delimiter
  7760  0A96  0874               	movf	??_time_date_delimiter,w
  7761  0A97  00C4               	movwf	_prev_hex_day
  7762  0A98                     l3571:	
  7763                           
  7764                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7765  0A98  304A               	movlw	74
  7766  0A99  0671               	xorwf	time_date_delimiter@limiter,w
  7767  0A9A  1D03               	btfss	3,2
  7768  0A9B  2AA5               	goto	l3577
  7769  0A9C  3002               	movlw	2
  7770  0A9D  0672               	xorwf	time_date_delimiter@type,w
  7771  0A9E  0473               	iorwf	time_date_delimiter@type+1,w
  7772  0A9F  1D03               	btfss	3,2
  7773  0AA0  2AA5               	goto	l3577
  7774                           
  7775                           ;math_src.c: 45:         prev_hex_day = 0x19;
  7776  0AA1  3019               	movlw	25
  7777  0AA2  00F4               	movwf	??_time_date_delimiter
  7778  0AA3  0874               	movf	??_time_date_delimiter,w
  7779  0AA4  00C4               	movwf	_prev_hex_day
  7780  0AA5                     l3577:	
  7781                           
  7782                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  7783  0AA5  3059               	movlw	89
  7784  0AA6  0671               	xorwf	time_date_delimiter@limiter,w
  7785  0AA7  1D03               	btfss	3,2
  7786  0AA8  2AB2               	goto	l3583
  7787  0AA9  3002               	movlw	2
  7788  0AAA  0672               	xorwf	time_date_delimiter@type,w
  7789  0AAB  0473               	iorwf	time_date_delimiter@type+1,w
  7790  0AAC  1D03               	btfss	3,2
  7791  0AAD  2AB2               	goto	l3583
  7792                           
  7793                           ;math_src.c: 47:         prev_hex_day = 0x29;
  7794  0AAE  3029               	movlw	41
  7795  0AAF  00F4               	movwf	??_time_date_delimiter
  7796  0AB0  0874               	movf	??_time_date_delimiter,w
  7797  0AB1  00C4               	movwf	_prev_hex_day
  7798  0AB2                     l3583:	
  7799                           
  7800                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  7801  0AB2  306A               	movlw	106
  7802  0AB3  0671               	xorwf	time_date_delimiter@limiter,w
  7803  0AB4  1D03               	btfss	3,2
  7804  0AB5  2ABF               	goto	l3589
  7805  0AB6  3002               	movlw	2
  7806  0AB7  0672               	xorwf	time_date_delimiter@type,w
  7807  0AB8  0473               	iorwf	time_date_delimiter@type+1,w
  7808  0AB9  1D03               	btfss	3,2
  7809  0ABA  2ABF               	goto	l3589
  7810                           
  7811                           ;math_src.c: 49:         prev_hex_day =0x39;
  7812  0ABB  3039               	movlw	57
  7813  0ABC  00F4               	movwf	??_time_date_delimiter
  7814  0ABD  0874               	movf	??_time_date_delimiter,w
  7815  0ABE  00C4               	movwf	_prev_hex_day
  7816  0ABF                     l3589:	
  7817                           
  7818                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  7819  0ABF  307A               	movlw	122
  7820  0AC0  0671               	xorwf	time_date_delimiter@limiter,w
  7821  0AC1  1D03               	btfss	3,2
  7822  0AC2  2ACC               	goto	l3595
  7823  0AC3  3002               	movlw	2
  7824  0AC4  0672               	xorwf	time_date_delimiter@type,w
  7825  0AC5  0473               	iorwf	time_date_delimiter@type+1,w
  7826  0AC6  1D03               	btfss	3,2
  7827  0AC7  2ACC               	goto	l3595
  7828                           
  7829                           ;math_src.c: 51:         prev_hex_day = 0x49;
  7830  0AC8  3049               	movlw	73
  7831  0AC9  00F4               	movwf	??_time_date_delimiter
  7832  0ACA  0874               	movf	??_time_date_delimiter,w
  7833  0ACB  00C4               	movwf	_prev_hex_day
  7834  0ACC                     l3595:	
  7835                           
  7836                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  7837  0ACC  3039               	movlw	57
  7838  0ACD  0671               	xorwf	time_date_delimiter@limiter,w
  7839  0ACE  1D03               	btfss	3,2
  7840  0ACF  2AD9               	goto	l3601
  7841  0AD0  3003               	movlw	3
  7842  0AD1  0672               	xorwf	time_date_delimiter@type,w
  7843  0AD2  0473               	iorwf	time_date_delimiter@type+1,w
  7844  0AD3  1D03               	btfss	3,2
  7845  0AD4  2AD9               	goto	l3601
  7846                           
  7847                           ;math_src.c: 53:         prev_hex_year= 0x09;
  7848  0AD5  3009               	movlw	9
  7849  0AD6  00F4               	movwf	??_time_date_delimiter
  7850  0AD7  0874               	movf	??_time_date_delimiter,w
  7851  0AD8  00C3               	movwf	_prev_hex_year
  7852  0AD9                     l3601:	
  7853                           
  7854                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  7855  0AD9  304A               	movlw	74
  7856  0ADA  0671               	xorwf	time_date_delimiter@limiter,w
  7857  0ADB  1D03               	btfss	3,2
  7858  0ADC  2AE6               	goto	l3607
  7859  0ADD  3003               	movlw	3
  7860  0ADE  0672               	xorwf	time_date_delimiter@type,w
  7861  0ADF  0473               	iorwf	time_date_delimiter@type+1,w
  7862  0AE0  1D03               	btfss	3,2
  7863  0AE1  2AE6               	goto	l3607
  7864                           
  7865                           ;math_src.c: 55:         prev_hex_year = 0x19;
  7866  0AE2  3019               	movlw	25
  7867  0AE3  00F4               	movwf	??_time_date_delimiter
  7868  0AE4  0874               	movf	??_time_date_delimiter,w
  7869  0AE5  00C3               	movwf	_prev_hex_year
  7870  0AE6                     l3607:	
  7871                           
  7872                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  7873  0AE6  3059               	movlw	89
  7874  0AE7  0671               	xorwf	time_date_delimiter@limiter,w
  7875  0AE8  1D03               	btfss	3,2
  7876  0AE9  2AF3               	goto	l3613
  7877  0AEA  3003               	movlw	3
  7878  0AEB  0672               	xorwf	time_date_delimiter@type,w
  7879  0AEC  0473               	iorwf	time_date_delimiter@type+1,w
  7880  0AED  1D03               	btfss	3,2
  7881  0AEE  2AF3               	goto	l3613
  7882                           
  7883                           ;math_src.c: 57:         prev_hex_year = 0x29;
  7884  0AEF  3029               	movlw	41
  7885  0AF0  00F4               	movwf	??_time_date_delimiter
  7886  0AF1  0874               	movf	??_time_date_delimiter,w
  7887  0AF2  00C3               	movwf	_prev_hex_year
  7888  0AF3                     l3613:	
  7889                           
  7890                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  7891  0AF3  306A               	movlw	106
  7892  0AF4  0671               	xorwf	time_date_delimiter@limiter,w
  7893  0AF5  1D03               	btfss	3,2
  7894  0AF6  2B00               	goto	l3619
  7895  0AF7  3003               	movlw	3
  7896  0AF8  0672               	xorwf	time_date_delimiter@type,w
  7897  0AF9  0473               	iorwf	time_date_delimiter@type+1,w
  7898  0AFA  1D03               	btfss	3,2
  7899  0AFB  2B00               	goto	l3619
  7900                           
  7901                           ;math_src.c: 59:         prev_hex_year =0x39;
  7902  0AFC  3039               	movlw	57
  7903  0AFD  00F4               	movwf	??_time_date_delimiter
  7904  0AFE  0874               	movf	??_time_date_delimiter,w
  7905  0AFF  00C3               	movwf	_prev_hex_year
  7906  0B00                     l3619:	
  7907                           
  7908                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  7909  0B00  307A               	movlw	122
  7910  0B01  0671               	xorwf	time_date_delimiter@limiter,w
  7911  0B02  1D03               	btfss	3,2
  7912  0B03  2B0D               	goto	l3625
  7913  0B04  3003               	movlw	3
  7914  0B05  0672               	xorwf	time_date_delimiter@type,w
  7915  0B06  0473               	iorwf	time_date_delimiter@type+1,w
  7916  0B07  1D03               	btfss	3,2
  7917  0B08  2B0D               	goto	l3625
  7918                           
  7919                           ;math_src.c: 61:         prev_hex_year = 0x49;
  7920  0B09  3049               	movlw	73
  7921  0B0A  00F4               	movwf	??_time_date_delimiter
  7922  0B0B  0874               	movf	??_time_date_delimiter,w
  7923  0B0C  00C3               	movwf	_prev_hex_year
  7924  0B0D                     l3625:	
  7925                           
  7926                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  7927  0B0D  3039               	movlw	57
  7928  0B0E  0671               	xorwf	time_date_delimiter@limiter,w
  7929  0B0F  1D03               	btfss	3,2
  7930  0B10  2B1A               	goto	l3631
  7931  0B11  3004               	movlw	4
  7932  0B12  0672               	xorwf	time_date_delimiter@type,w
  7933  0B13  0473               	iorwf	time_date_delimiter@type+1,w
  7934  0B14  1D03               	btfss	3,2
  7935  0B15  2B1A               	goto	l3631
  7936                           
  7937                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  7938  0B16  3009               	movlw	9
  7939  0B17  00F4               	movwf	??_time_date_delimiter
  7940  0B18  0874               	movf	??_time_date_delimiter,w
  7941  0B19  00C2               	movwf	_prev_hex_hours
  7942  0B1A                     l3631:	
  7943                           
  7944                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  7945  0B1A  304A               	movlw	74
  7946  0B1B  0671               	xorwf	time_date_delimiter@limiter,w
  7947  0B1C  1D03               	btfss	3,2
  7948  0B1D  2B27               	goto	l3637
  7949  0B1E  3004               	movlw	4
  7950  0B1F  0672               	xorwf	time_date_delimiter@type,w
  7951  0B20  0473               	iorwf	time_date_delimiter@type+1,w
  7952  0B21  1D03               	btfss	3,2
  7953  0B22  2B27               	goto	l3637
  7954                           
  7955                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  7956  0B23  3019               	movlw	25
  7957  0B24  00F4               	movwf	??_time_date_delimiter
  7958  0B25  0874               	movf	??_time_date_delimiter,w
  7959  0B26  00C2               	movwf	_prev_hex_hours
  7960  0B27                     l3637:	
  7961                           
  7962                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  7963  0B27  3059               	movlw	89
  7964  0B28  0671               	xorwf	time_date_delimiter@limiter,w
  7965  0B29  1D03               	btfss	3,2
  7966  0B2A  2B34               	goto	l3643
  7967  0B2B  3004               	movlw	4
  7968  0B2C  0672               	xorwf	time_date_delimiter@type,w
  7969  0B2D  0473               	iorwf	time_date_delimiter@type+1,w
  7970  0B2E  1D03               	btfss	3,2
  7971  0B2F  2B34               	goto	l3643
  7972                           
  7973                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  7974  0B30  3029               	movlw	41
  7975  0B31  00F4               	movwf	??_time_date_delimiter
  7976  0B32  0874               	movf	??_time_date_delimiter,w
  7977  0B33  00C2               	movwf	_prev_hex_hours
  7978  0B34                     l3643:	
  7979                           
  7980                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  7981  0B34  306A               	movlw	106
  7982  0B35  0671               	xorwf	time_date_delimiter@limiter,w
  7983  0B36  1D03               	btfss	3,2
  7984  0B37  2B41               	goto	l3649
  7985  0B38  3004               	movlw	4
  7986  0B39  0672               	xorwf	time_date_delimiter@type,w
  7987  0B3A  0473               	iorwf	time_date_delimiter@type+1,w
  7988  0B3B  1D03               	btfss	3,2
  7989  0B3C  2B41               	goto	l3649
  7990                           
  7991                           ;math_src.c: 69:         prev_hex_hours =0x39;
  7992  0B3D  3039               	movlw	57
  7993  0B3E  00F4               	movwf	??_time_date_delimiter
  7994  0B3F  0874               	movf	??_time_date_delimiter,w
  7995  0B40  00C2               	movwf	_prev_hex_hours
  7996  0B41                     l3649:	
  7997                           
  7998                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  7999  0B41  307A               	movlw	122
  8000  0B42  0671               	xorwf	time_date_delimiter@limiter,w
  8001  0B43  1D03               	btfss	3,2
  8002  0B44  2B4E               	goto	l3655
  8003  0B45  3004               	movlw	4
  8004  0B46  0672               	xorwf	time_date_delimiter@type,w
  8005  0B47  0473               	iorwf	time_date_delimiter@type+1,w
  8006  0B48  1D03               	btfss	3,2
  8007  0B49  2B4E               	goto	l3655
  8008                           
  8009                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8010  0B4A  3049               	movlw	73
  8011  0B4B  00F4               	movwf	??_time_date_delimiter
  8012  0B4C  0874               	movf	??_time_date_delimiter,w
  8013  0B4D  00C2               	movwf	_prev_hex_hours
  8014  0B4E                     l3655:	
  8015                           
  8016                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8017  0B4E  3039               	movlw	57
  8018  0B4F  0671               	xorwf	time_date_delimiter@limiter,w
  8019  0B50  1D03               	btfss	3,2
  8020  0B51  2B5B               	goto	l3661
  8021  0B52  3005               	movlw	5
  8022  0B53  0672               	xorwf	time_date_delimiter@type,w
  8023  0B54  0473               	iorwf	time_date_delimiter@type+1,w
  8024  0B55  1D03               	btfss	3,2
  8025  0B56  2B5B               	goto	l3661
  8026                           
  8027                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8028  0B57  3009               	movlw	9
  8029  0B58  00F4               	movwf	??_time_date_delimiter
  8030  0B59  0874               	movf	??_time_date_delimiter,w
  8031  0B5A  00C1               	movwf	_prev_hex_mins
  8032  0B5B                     l3661:	
  8033                           
  8034                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8035  0B5B  304A               	movlw	74
  8036  0B5C  0671               	xorwf	time_date_delimiter@limiter,w
  8037  0B5D  1D03               	btfss	3,2
  8038  0B5E  2B68               	goto	l3667
  8039  0B5F  3005               	movlw	5
  8040  0B60  0672               	xorwf	time_date_delimiter@type,w
  8041  0B61  0473               	iorwf	time_date_delimiter@type+1,w
  8042  0B62  1D03               	btfss	3,2
  8043  0B63  2B68               	goto	l3667
  8044                           
  8045                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8046  0B64  3019               	movlw	25
  8047  0B65  00F4               	movwf	??_time_date_delimiter
  8048  0B66  0874               	movf	??_time_date_delimiter,w
  8049  0B67  00C1               	movwf	_prev_hex_mins
  8050  0B68                     l3667:	
  8051                           
  8052                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8053  0B68  3059               	movlw	89
  8054  0B69  0671               	xorwf	time_date_delimiter@limiter,w
  8055  0B6A  1D03               	btfss	3,2
  8056  0B6B  2B75               	goto	l3673
  8057  0B6C  3005               	movlw	5
  8058  0B6D  0672               	xorwf	time_date_delimiter@type,w
  8059  0B6E  0473               	iorwf	time_date_delimiter@type+1,w
  8060  0B6F  1D03               	btfss	3,2
  8061  0B70  2B75               	goto	l3673
  8062                           
  8063                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8064  0B71  3029               	movlw	41
  8065  0B72  00F4               	movwf	??_time_date_delimiter
  8066  0B73  0874               	movf	??_time_date_delimiter,w
  8067  0B74  00C1               	movwf	_prev_hex_mins
  8068  0B75                     l3673:	
  8069                           
  8070                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8071  0B75  306A               	movlw	106
  8072  0B76  0671               	xorwf	time_date_delimiter@limiter,w
  8073  0B77  1D03               	btfss	3,2
  8074  0B78  2B82               	goto	l3679
  8075  0B79  3005               	movlw	5
  8076  0B7A  0672               	xorwf	time_date_delimiter@type,w
  8077  0B7B  0473               	iorwf	time_date_delimiter@type+1,w
  8078  0B7C  1D03               	btfss	3,2
  8079  0B7D  2B82               	goto	l3679
  8080                           
  8081                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8082  0B7E  3039               	movlw	57
  8083  0B7F  00F4               	movwf	??_time_date_delimiter
  8084  0B80  0874               	movf	??_time_date_delimiter,w
  8085  0B81  00C1               	movwf	_prev_hex_mins
  8086  0B82                     l3679:	
  8087                           
  8088                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8089  0B82  307A               	movlw	122
  8090  0B83  0671               	xorwf	time_date_delimiter@limiter,w
  8091  0B84  1D03               	btfss	3,2
  8092  0B85  2B8F               	goto	l3685
  8093  0B86  3005               	movlw	5
  8094  0B87  0672               	xorwf	time_date_delimiter@type,w
  8095  0B88  0473               	iorwf	time_date_delimiter@type+1,w
  8096  0B89  1D03               	btfss	3,2
  8097  0B8A  2B8F               	goto	l3685
  8098                           
  8099                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8100  0B8B  3049               	movlw	73
  8101  0B8C  00F4               	movwf	??_time_date_delimiter
  8102  0B8D  0874               	movf	??_time_date_delimiter,w
  8103  0B8E  00C1               	movwf	_prev_hex_mins
  8104  0B8F                     l3685:	
  8105                           
  8106                           ;math_src.c: 82:     val--;
  8107  0B8F  3001               	movlw	1
  8108  0B90  02F6               	subwf	time_date_delimiter@val,f
  8109  0B91                     l3687:	
  8110                           
  8111                           ;math_src.c: 84:     return val;
  8112  0B91  0876               	movf	time_date_delimiter@val,w
  8113  0B92  0008               	return
  8114  0B93                     __end_of_time_date_delimiter:	
  8115                           
  8116                           	psect	text32
  8117  1506                     __ptext32:	
  8118 ;; *************** function _set_time *****************
  8119 ;; Defined at:
  8120 ;;		line 12 in file "clock_src.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;  i               2    5[COMMON] int 
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      void 
  8127 ;; Registers used:
  8128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 300/0
  8131 ;;		On exit  : 300/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8134 ;;      Params:         0       0       0       0       0
  8135 ;;      Locals:         2       0       0       0       0
  8136 ;;      Temps:          0       0       0       0       0
  8137 ;;      Totals:         2       0       0       0       0
  8138 ;;Total ram usage:        2 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    1
  8141 ;; This function calls:
  8142 ;;		_time_write_1
  8143 ;; This function is called by:
  8144 ;;		_main
  8145 ;;		_time_settings
  8146 ;;		_date_settings
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _set_time
  8152  1506                     _set_time:	
  8153                           
  8154                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8155                           
  8156                           ;incstack = 0
  8157                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8158  1506  1686               	bsf	6,5	;volatile
  8159                           
  8160                           ;clock_src.c: 16:    time_write_1(0xbe);
  8161  1507  30BE               	movlw	190
  8162  1508  160A  118A  24E0  160A  118A  	fcall	_time_write_1
  8163                           
  8164                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8165  150D  01F5               	clrf	set_time@i
  8166  150E  01F6               	clrf	set_time@i+1
  8167  150F                     l3327:	
  8168                           
  8169                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8170  150F  0875               	movf	set_time@i,w
  8171  1510  3EB3               	addlw	(low (_table| 0))& (0+255)
  8172  1511  0084               	movwf	4
  8173  1512  1383               	bcf	3,7	;select IRP bank1
  8174  1513  0800               	movf	0,w
  8175  1514  160A  118A  24E0  160A  118A  	fcall	_time_write_1
  8176                           
  8177                           ;clock_src.c: 20:      }
  8178  1519  3001               	movlw	1
  8179  151A  07F5               	addwf	set_time@i,f
  8180  151B  1803               	skipnc
  8181  151C  0AF6               	incf	set_time@i+1,f
  8182  151D  3000               	movlw	0
  8183  151E  07F6               	addwf	set_time@i+1,f
  8184  151F  0876               	movf	set_time@i+1,w
  8185  1520  3A80               	xorlw	128
  8186  1521  00FF               	movwf	127
  8187  1522  3080               	movlw	128
  8188  1523  027F               	subwf	127,w
  8189  1524  1D03               	skipz
  8190  1525  2D28               	goto	u2195
  8191  1526  3008               	movlw	8
  8192  1527  0275               	subwf	set_time@i,w
  8193  1528                     u2195:	
  8194  1528  1C03               	skipc
  8195  1529  2D0F               	goto	l3327
  8196                           
  8197                           ;clock_src.c: 21:    RB5=0;
  8198  152A  1283               	bcf	3,5	;RP0=0, select bank0
  8199  152B  1303               	bcf	3,6	;RP1=0, select bank0
  8200  152C  1286               	bcf	6,5	;volatile
  8201  152D  0008               	return
  8202  152E                     __end_of_set_time:	
  8203                           
  8204                           	psect	text33
  8205  14E0                     __ptext33:	
  8206 ;; *************** function _time_write_1 *****************
  8207 ;; Defined at:
  8208 ;;		line 114 in file "clock_src.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  time_tx         1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  time_tx         1    4[COMMON] unsigned char 
  8213 ;;  j               2    2[COMMON] int 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      void 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, btemp+1
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 300/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8223 ;;      Params:         0       0       0       0       0
  8224 ;;      Locals:         3       0       0       0       0
  8225 ;;      Temps:          2       0       0       0       0
  8226 ;;      Totals:         5       0       0       0       0
  8227 ;;Total ram usage:        5 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; This function calls:
  8230 ;;		Nothing
  8231 ;; This function is called by:
  8232 ;;		_ds1302_init
  8233 ;;		_set_time
  8234 ;;		_get_time
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           
  8239                           ;psect for function _time_write_1
  8240  14E0                     _time_write_1:	
  8241                           
  8242                           ;incstack = 0
  8243                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8244                           ;time_write_1@time_tx stored from wreg
  8245  14E0  00F4               	movwf	time_write_1@time_tx
  8246                           
  8247                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8248  14E1  01F2               	clrf	time_write_1@j
  8249  14E2  01F3               	clrf	time_write_1@j+1
  8250  14E3                     l472:	
  8251                           
  8252                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8253  14E3  1283               	bcf	3,5	;RP0=0, select bank0
  8254  14E4  1303               	bcf	3,6	;RP1=0, select bank0
  8255  14E5  1206               	bcf	6,4	;volatile
  8256                           
  8257                           ;clock_src.c: 120:         RB0=0;
  8258  14E6  1006               	bcf	6,0	;volatile
  8259                           
  8260                           ;clock_src.c: 121:         if(time_tx&0x01)
  8261  14E7  1874               	btfsc	time_write_1@time_tx,0
  8262                           
  8263                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8264  14E8  1606               	bsf	6,4	;volatile
  8265                           
  8266                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8267  14E9  0874               	movf	time_write_1@time_tx,w
  8268  14EA  00F0               	movwf	??_time_write_1
  8269  14EB  1003               	clrc
  8270  14EC  0C70               	rrf	??_time_write_1,w
  8271  14ED  00F1               	movwf	??_time_write_1+1
  8272  14EE  0871               	movf	??_time_write_1+1,w
  8273  14EF  00F4               	movwf	time_write_1@time_tx
  8274                           
  8275                           ;clock_src.c: 126:         RB0=1;
  8276  14F0  1406               	bsf	6,0	;volatile
  8277                           
  8278                           ;clock_src.c: 127:     }
  8279  14F1  3001               	movlw	1
  8280  14F2  07F2               	addwf	time_write_1@j,f
  8281  14F3  1803               	skipnc
  8282  14F4  0AF3               	incf	time_write_1@j+1,f
  8283  14F5  3000               	movlw	0
  8284  14F6  07F3               	addwf	time_write_1@j+1,f
  8285  14F7  0873               	movf	time_write_1@j+1,w
  8286  14F8  3A80               	xorlw	128
  8287  14F9  00FF               	movwf	127
  8288  14FA  3080               	movlw	128
  8289  14FB  027F               	subwf	127,w
  8290  14FC  1D03               	skipz
  8291  14FD  2D00               	goto	u2185
  8292  14FE  3008               	movlw	8
  8293  14FF  0272               	subwf	time_write_1@j,w
  8294  1500                     u2185:	
  8295  1500  1C03               	skipc
  8296  1501  2CE3               	goto	l472
  8297                           
  8298                           ;clock_src.c: 128:       RB0=0;
  8299  1502  1283               	bcf	3,5	;RP0=0, select bank0
  8300  1503  1303               	bcf	3,6	;RP1=0, select bank0
  8301  1504  1006               	bcf	6,0	;volatile
  8302  1505  0008               	return
  8303  1506                     __end_of_time_write_1:	
  8304                           
  8305                           	psect	text34
  8306  14BC                     __ptext34:	
  8307 ;; *************** function _incrementor *****************
  8308 ;; Defined at:
  8309 ;;		line 10 in file "math_src.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  upper_val       2    0[BANK0 ] int 
  8312 ;;  lower_val       2    2[BANK0 ] int 
  8313 ;;  z               1    4[BANK0 ] unsigned char 
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;		None
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      unsigned char 
  8318 ;; Registers used:
  8319 ;;		wreg, status,2, status,0, pclath, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : 300/0
  8322 ;;		On exit  : 300/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8325 ;;      Params:         0       5       0       0       0
  8326 ;;      Locals:         0       0       0       0       0
  8327 ;;      Temps:          2       0       0       0       0
  8328 ;;      Totals:         2       5       0       0       0
  8329 ;;Total ram usage:        7 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    2
  8332 ;; This function calls:
  8333 ;;		_modulus_func
  8334 ;; This function is called by:
  8335 ;;		_thermometer_threshhold_settings
  8336 ;;		_time_settings
  8337 ;;		_date_settings
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           
  8342                           ;psect for function _incrementor
  8343  14BC                     _incrementor:	
  8344                           
  8345                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8346                           
  8347                           ;incstack = 0
  8348                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8349  14BC  0862               	movf	incrementor@lower_val,w
  8350  14BD  3E30               	addlw	48
  8351  14BE  00FB               	movwf	??_incrementor
  8352  14BF  0863               	movf	incrementor@lower_val+1,w
  8353  14C0  1803               	skipnc
  8354  14C1  3E01               	addlw	1
  8355  14C2  3E00               	addlw	0
  8356  14C3  00FC               	movwf	??_incrementor+1
  8357  14C4  0864               	movf	incrementor@z,w
  8358  14C5  067B               	xorwf	??_incrementor,w
  8359  14C6  047C               	iorwf	??_incrementor+1,w
  8360  14C7  1D03               	skipz
  8361  14C8  2CDE               	goto	l3517
  8362                           
  8363                           ;math_src.c: 12:      upper_val++;
  8364  14C9  3001               	movlw	1
  8365  14CA  07E0               	addwf	incrementor@upper_val,f
  8366  14CB  1803               	skipnc
  8367  14CC  0AE1               	incf	incrementor@upper_val+1,f
  8368  14CD  3000               	movlw	0
  8369  14CE  07E1               	addwf	incrementor@upper_val+1,f
  8370                           
  8371                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8372  14CF  0861               	movf	incrementor@upper_val+1,w
  8373  14D0  00F8               	movwf	modulus_func@x+1
  8374  14D1  0860               	movf	incrementor@upper_val,w
  8375  14D2  00F7               	movwf	modulus_func@x
  8376  14D3  300A               	movlw	10
  8377  14D4  00F9               	movwf	modulus_func@y
  8378  14D5  3000               	movlw	0
  8379  14D6  00FA               	movwf	modulus_func@y+1
  8380  14D7  160A  118A  2378   	fcall	_modulus_func
  8381  14DA  0878               	movf	?_modulus_func+1,w
  8382  14DB  00E1               	movwf	incrementor@upper_val+1
  8383  14DC  0877               	movf	?_modulus_func,w
  8384  14DD  00E0               	movwf	incrementor@upper_val
  8385  14DE                     l3517:	
  8386                           
  8387                           ;math_src.c: 15:      return upper_val;
  8388  14DE  0860               	movf	incrementor@upper_val,w
  8389  14DF  0008               	return
  8390  14E0                     __end_of_incrementor:	
  8391                           
  8392                           	psect	text35
  8393  1378                     __ptext35:	
  8394 ;; *************** function _modulus_func *****************
  8395 ;; Defined at:
  8396 ;;		line 5 in file "math_src.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  x               2    7[COMMON] int 
  8399 ;;  y               2    9[COMMON] int 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  2    7[COMMON] int 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, pclath, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 300/0
  8408 ;;		On exit  : 300/0
  8409 ;;		Unchanged: 300/0
  8410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8411 ;;      Params:         4       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0
  8414 ;;      Totals:         4       0       0       0       0
  8415 ;;Total ram usage:        4 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    1
  8418 ;; This function calls:
  8419 ;;		___awmod
  8420 ;; This function is called by:
  8421 ;;		_main
  8422 ;;		_thermometer_threshhold_settings
  8423 ;;		_time_settings
  8424 ;;		_date_settings
  8425 ;;		_incrementor
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           
  8430                           ;psect for function _modulus_func
  8431  1378                     _modulus_func:	
  8432                           
  8433                           ;math_src.c: 6:     x = x % y;
  8434                           
  8435                           ;incstack = 0
  8436                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8437  1378  087A               	movf	modulus_func@y+1,w
  8438  1379  00F1               	movwf	___awmod@divisor+1
  8439  137A  0879               	movf	modulus_func@y,w
  8440  137B  00F0               	movwf	___awmod@divisor
  8441  137C  0878               	movf	modulus_func@x+1,w
  8442  137D  00F3               	movwf	___awmod@dividend+1
  8443  137E  0877               	movf	modulus_func@x,w
  8444  137F  00F2               	movwf	___awmod@dividend
  8445  1380  160A  118A  26CA   	fcall	___awmod
  8446  1383  0871               	movf	?___awmod+1,w
  8447  1384  00F8               	movwf	modulus_func@x+1
  8448  1385  0870               	movf	?___awmod,w
  8449  1386  00F7               	movwf	modulus_func@x
  8450                           
  8451                           ;math_src.c: 7:     return x;
  8452  1387  0008               	return
  8453  1388                     __end_of_modulus_func:	
  8454                           
  8455                           	psect	text36
  8456  16CA                     __ptext36:	
  8457 ;; *************** function ___awmod *****************
  8458 ;; Defined at:
  8459 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  divisor         2    0[COMMON] int 
  8462 ;;  dividend        2    2[COMMON] int 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;  sign            1    6[COMMON] unsigned char 
  8465 ;;  counter         1    5[COMMON] unsigned char 
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  2    0[COMMON] int 
  8468 ;; Registers used:
  8469 ;;		wreg, status,2, status,0
  8470 ;; Tracked objects:
  8471 ;;		On entry : 300/0
  8472 ;;		On exit  : 300/0
  8473 ;;		Unchanged: 300/0
  8474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8475 ;;      Params:         4       0       0       0       0
  8476 ;;      Locals:         2       0       0       0       0
  8477 ;;      Temps:          1       0       0       0       0
  8478 ;;      Totals:         7       0       0       0       0
  8479 ;;Total ram usage:        7 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; This function calls:
  8482 ;;		Nothing
  8483 ;; This function is called by:
  8484 ;;		_modulus_func
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function ___awmod
  8490  16CA                     ___awmod:	
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8494  16CA  01F6               	clrf	___awmod@sign
  8495  16CB  1FF3               	btfss	___awmod@dividend+1,7
  8496  16CC  2ED4               	goto	l3249
  8497  16CD  09F2               	comf	___awmod@dividend,f
  8498  16CE  09F3               	comf	___awmod@dividend+1,f
  8499  16CF  0AF2               	incf	___awmod@dividend,f
  8500  16D0  1903               	skipnz
  8501  16D1  0AF3               	incf	___awmod@dividend+1,f
  8502  16D2  01F6               	clrf	___awmod@sign
  8503  16D3  0AF6               	incf	___awmod@sign,f
  8504  16D4                     l3249:	
  8505  16D4  1FF1               	btfss	___awmod@divisor+1,7
  8506  16D5  2EDB               	goto	l3253
  8507  16D6  09F0               	comf	___awmod@divisor,f
  8508  16D7  09F1               	comf	___awmod@divisor+1,f
  8509  16D8  0AF0               	incf	___awmod@divisor,f
  8510  16D9  1903               	skipnz
  8511  16DA  0AF1               	incf	___awmod@divisor+1,f
  8512  16DB                     l3253:	
  8513  16DB  0870               	movf	___awmod@divisor,w
  8514  16DC  0471               	iorwf	___awmod@divisor+1,w
  8515  16DD  1903               	btfsc	3,2
  8516  16DE  2F08               	goto	l3271
  8517  16DF  01F5               	clrf	___awmod@counter
  8518  16E0  0AF5               	incf	___awmod@counter,f
  8519  16E1                     l3261:	
  8520  16E1  1BF1               	btfsc	___awmod@divisor+1,7
  8521  16E2  2EEF               	goto	l3263
  8522  16E3  3001               	movlw	1
  8523  16E4                     u2085:	
  8524  16E4  1003               	clrc
  8525  16E5  0DF0               	rlf	___awmod@divisor,f
  8526  16E6  0DF1               	rlf	___awmod@divisor+1,f
  8527  16E7  3EFF               	addlw	-1
  8528  16E8  1D03               	skipz
  8529  16E9  2EE4               	goto	u2085
  8530  16EA  3001               	movlw	1
  8531  16EB  00F4               	movwf	??___awmod
  8532  16EC  0874               	movf	??___awmod,w
  8533  16ED  07F5               	addwf	___awmod@counter,f
  8534  16EE  2EE1               	goto	l3261
  8535  16EF                     l3263:	
  8536  16EF  0871               	movf	___awmod@divisor+1,w
  8537  16F0  0273               	subwf	___awmod@dividend+1,w
  8538  16F1  1D03               	skipz
  8539  16F2  2EF5               	goto	u2105
  8540  16F3  0870               	movf	___awmod@divisor,w
  8541  16F4  0272               	subwf	___awmod@dividend,w
  8542  16F5                     u2105:	
  8543  16F5  1C03               	skipc
  8544  16F6  2EFD               	goto	l3267
  8545  16F7  0870               	movf	___awmod@divisor,w
  8546  16F8  02F2               	subwf	___awmod@dividend,f
  8547  16F9  0871               	movf	___awmod@divisor+1,w
  8548  16FA  1C03               	skipc
  8549  16FB  03F3               	decf	___awmod@dividend+1,f
  8550  16FC  02F3               	subwf	___awmod@dividend+1,f
  8551  16FD                     l3267:	
  8552  16FD  3001               	movlw	1
  8553  16FE                     u2115:	
  8554  16FE  1003               	clrc
  8555  16FF  0CF1               	rrf	___awmod@divisor+1,f
  8556  1700  0CF0               	rrf	___awmod@divisor,f
  8557  1701  3EFF               	addlw	-1
  8558  1702  1D03               	skipz
  8559  1703  2EFE               	goto	u2115
  8560  1704  3001               	movlw	1
  8561  1705  02F5               	subwf	___awmod@counter,f
  8562  1706  1D03               	btfss	3,2
  8563  1707  2EEF               	goto	l3263
  8564  1708                     l3271:	
  8565  1708  0876               	movf	___awmod@sign,w
  8566  1709  1903               	btfsc	3,2
  8567  170A  2F10               	goto	l3275
  8568  170B  09F2               	comf	___awmod@dividend,f
  8569  170C  09F3               	comf	___awmod@dividend+1,f
  8570  170D  0AF2               	incf	___awmod@dividend,f
  8571  170E  1903               	skipnz
  8572  170F  0AF3               	incf	___awmod@dividend+1,f
  8573  1710                     l3275:	
  8574  1710  0873               	movf	___awmod@dividend+1,w
  8575  1711  00F1               	movwf	?___awmod+1
  8576  1712  0872               	movf	___awmod@dividend,w
  8577  1713  00F0               	movwf	?___awmod
  8578  1714  0008               	return
  8579  1715                     __end_of___awmod:	
  8580                           
  8581                           	psect	text37
  8582  13AD                     __ptext37:	
  8583 ;; *************** function _button_delay *****************
  8584 ;; Defined at:
  8585 ;;		line 661 in file "Button_src.c"
  8586 ;; Parameters:    Size  Location     Type
  8587 ;;		None
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  i               2    0[COMMON] int 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  1    wreg      void 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, btemp+1
  8594 ;; Tracked objects:
  8595 ;;		On entry : 300/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8599 ;;      Params:         0       0       0       0       0
  8600 ;;      Locals:         2       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0
  8602 ;;      Totals:         2       0       0       0       0
  8603 ;;Total ram usage:        2 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; This function calls:
  8606 ;;		Nothing
  8607 ;; This function is called by:
  8608 ;;		_set_beep_threshhold
  8609 ;;		_thermometer_threshhold_settings
  8610 ;;		_time_settings
  8611 ;;		_date_settings
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           
  8616                           ;psect for function _button_delay
  8617  13AD                     _button_delay:	
  8618                           
  8619                           ;Button_src.c: 662:     for(int i=0;i<10000;i++);
  8620                           
  8621                           ;incstack = 0
  8622                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8623  13AD  01F0               	clrf	button_delay@i
  8624  13AE  01F1               	clrf	button_delay@i+1
  8625  13AF                     l3507:	
  8626  13AF  3001               	movlw	1
  8627  13B0  07F0               	addwf	button_delay@i,f
  8628  13B1  1803               	skipnc
  8629  13B2  0AF1               	incf	button_delay@i+1,f
  8630  13B3  3000               	movlw	0
  8631  13B4  07F1               	addwf	button_delay@i+1,f
  8632  13B5  0871               	movf	button_delay@i+1,w
  8633  13B6  3A80               	xorlw	128
  8634  13B7  00FF               	movwf	127
  8635  13B8  30A7               	movlw	167
  8636  13B9  027F               	subwf	127,w
  8637  13BA  1D03               	skipz
  8638  13BB  2BBE               	goto	u2295
  8639  13BC  3010               	movlw	16
  8640  13BD  0270               	subwf	button_delay@i,w
  8641  13BE                     u2295:	
  8642  13BE  1803               	btfsc	3,0
  8643  13BF  0008               	return
  8644  13C0  2BAF               	goto	l3507
  8645  13C1                     __end_of_button_delay:	
  8646                           
  8647                           	psect	text38
  8648  1715                     __ptext38:	
  8649 ;; *************** function _cold_threshold *****************
  8650 ;; Defined at:
  8651 ;;		line 22 in file "threshold_src.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  upper_val       2    3[COMMON] int 
  8654 ;;  lower_val       2    5[COMMON] int 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;		None
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  1    wreg      unsigned char 
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8661 ;; Tracked objects:
  8662 ;;		On entry : 300/0
  8663 ;;		On exit  : 300/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8666 ;;      Params:         4       0       0       0       0
  8667 ;;      Locals:         0       0       0       0       0
  8668 ;;      Temps:          1       0       0       0       0
  8669 ;;      Totals:         5       0       0       0       0
  8670 ;;Total ram usage:        5 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    2
  8673 ;; This function calls:
  8674 ;;		_write_char
  8675 ;; This function is called by:
  8676 ;;		_main
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           
  8681                           ;psect for function _cold_threshold
  8682  1715                     _cold_threshold:	
  8683                           
  8684                           ;threshold_src.c: 23:      if(shi <= upper_val && (ge <= lower_val || ge >= lower_val)){
  8685                           
  8686                           ;incstack = 0
  8687                           ; Regs used in _cold_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8688  1715  0874               	movf	cold_threshold@upper_val+1,w
  8689  1716  3A80               	xorlw	128
  8690  1717  00F7               	movwf	??_cold_threshold
  8691  1718  3080               	movlw	128
  8692  1719  0277               	subwf	??_cold_threshold,w
  8693  171A  1D03               	skipz
  8694  171B  2F1E               	goto	u3915
  8695  171C  085B               	movf	_shi,w
  8696  171D  0273               	subwf	cold_threshold@upper_val,w
  8697  171E                     u3915:	
  8698  171E  1C03               	skipc
  8699  171F  2F5F               	goto	l949
  8700  1720  0876               	movf	cold_threshold@lower_val+1,w
  8701  1721  3A80               	xorlw	128
  8702  1722  00F7               	movwf	??_cold_threshold
  8703  1723  3080               	movlw	128
  8704  1724  0277               	subwf	??_cold_threshold,w
  8705  1725  1D03               	skipz
  8706  1726  2F2B               	goto	u3925
  8707  1727  1283               	bcf	3,5	;RP0=0, select bank0
  8708  1728  1303               	bcf	3,6	;RP1=0, select bank0
  8709  1729  085A               	movf	_ge,w
  8710  172A  0275               	subwf	cold_threshold@lower_val,w
  8711  172B                     u3925:	
  8712  172B  1803               	skipnc
  8713  172C  2F38               	goto	l4677
  8714  172D  0876               	movf	cold_threshold@lower_val+1,w
  8715  172E  3A80               	xorlw	128
  8716  172F  3C80               	sublw	128
  8717  1730  1D03               	skipz
  8718  1731  2F36               	goto	u3935
  8719  1732  0875               	movf	cold_threshold@lower_val,w
  8720  1733  1283               	bcf	3,5	;RP0=0, select bank0
  8721  1734  1303               	bcf	3,6	;RP1=0, select bank0
  8722  1735  025A               	subwf	_ge,w
  8723  1736                     u3935:	
  8724  1736  1C03               	skipc
  8725  1737  2F5F               	goto	l949
  8726  1738                     l4677:	
  8727                           
  8728                           ;threshold_src.c: 24:     cold_counter ++;
  8729  1738  3001               	movlw	1
  8730  1739  1683               	bsf	3,5	;RP0=1, select bank1
  8731  173A  1303               	bcf	3,6	;RP1=0, select bank1
  8732  173B  07B1               	addwf	_cold_counter^(0+128),f
  8733  173C  1803               	skipnc
  8734  173D  0AB2               	incf	(_cold_counter+1)^(0+128),f
  8735  173E  3000               	movlw	0
  8736  173F  07B2               	addwf	(_cold_counter+1)^(0+128),f
  8737                           
  8738                           ;threshold_src.c: 25:     heater_state = '1';
  8739  1740  3031               	movlw	49
  8740  1741  00F7               	movwf	??_cold_threshold
  8741  1742  0877               	movf	??_cold_threshold,w
  8742  1743  1283               	bcf	3,5	;RP0=0, select bank0
  8743  1744  00D1               	movwf	_heater_state
  8744                           
  8745                           ;threshold_src.c: 26:     cooler_state = '0';
  8746  1745  3030               	movlw	48
  8747  1746  00F7               	movwf	??_cold_threshold
  8748  1747  0877               	movf	??_cold_threshold,w
  8749  1748  00D0               	movwf	_cooler_state
  8750                           
  8751                           ;threshold_src.c: 27:     write_char('C');
  8752  1749  3043               	movlw	67
  8753  174A  160A  118A  23E9  160A  118A  	fcall	_write_char
  8754                           
  8755                           ;threshold_src.c: 28:     write_char('O');
  8756  174F  304F               	movlw	79
  8757  1750  160A  118A  23E9  160A  118A  	fcall	_write_char
  8758                           
  8759                           ;threshold_src.c: 29:     write_char('L');
  8760  1755  304C               	movlw	76
  8761  1756  160A  118A  23E9  160A  118A  	fcall	_write_char
  8762                           
  8763                           ;threshold_src.c: 30:     write_char('D');
  8764  175B  3044               	movlw	68
  8765  175C  160A  118A  23E9   	fcall	_write_char
  8766  175F                     l949:	
  8767                           ;threshold_src.c: 36:     }
  8768                           
  8769                           
  8770                           ;threshold_src.c: 37:     return buzzer_watcher;
  8771  175F  1283               	bcf	3,5	;RP0=0, select bank0
  8772  1760  1303               	bcf	3,6	;RP1=0, select bank0
  8773  1761  0853               	movf	_buzzer_watcher,w
  8774  1762  0008               	return
  8775  1763                     __end_of_cold_threshold:	
  8776                           
  8777                           	psect	text39
  8778  13E9                     __ptext39:	
  8779 ;; *************** function _write_char *****************
  8780 ;; Defined at:
  8781 ;;		line 28 in file "LCD_src.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;  x               1    wreg     unsigned char 
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;  x               1    2[COMMON] unsigned char 
  8786 ;;  i               2    0        int 
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  1    wreg      void 
  8789 ;; Registers used:
  8790 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 300/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8796 ;;      Params:         0       0       0       0       0
  8797 ;;      Locals:         1       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0
  8799 ;;      Totals:         1       0       0       0       0
  8800 ;;Total ram usage:        1 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    1
  8803 ;; This function calls:
  8804 ;;		_delay_screen
  8805 ;; This function is called by:
  8806 ;;		_main
  8807 ;;		_display_temp
  8808 ;;		_display_clock
  8809 ;;		_display_date
  8810 ;;		_thermometer_threshhold_settings
  8811 ;;		_time_settings
  8812 ;;		_date_settings
  8813 ;;		_set_upper_threshold
  8814 ;;		_cold_threshold
  8815 ;;		_set_lower_threshold
  8816 ;;		_reset_alarm
  8817 ;;		_display_day
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function _write_char
  8823  13E9                     _write_char:	
  8824                           
  8825                           ;incstack = 0
  8826                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8827                           ;write_char@x stored from wreg
  8828  13E9  00F2               	movwf	write_char@x
  8829                           
  8830                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  8831  13EA  1283               	bcf	3,5	;RP0=0, select bank0
  8832  13EB  1303               	bcf	3,6	;RP1=0, select bank0
  8833  13EC  1685               	bsf	5,5	;volatile
  8834                           
  8835                           ;LCD_src.c: 32:  RA4=0;
  8836  13ED  1205               	bcf	5,4	;volatile
  8837                           
  8838                           ;LCD_src.c: 33:  RA3=0;
  8839  13EE  1185               	bcf	5,3	;volatile
  8840                           
  8841                           ;LCD_src.c: 34:  delay_screen();
  8842  13EF  160A  118A  2399  160A  118A  	fcall	_delay_screen
  8843                           
  8844                           ;LCD_src.c: 35:  RA3=1;
  8845  13F4  1283               	bcf	3,5	;RP0=0, select bank0
  8846  13F5  1303               	bcf	3,6	;RP1=0, select bank0
  8847  13F6  1585               	bsf	5,3	;volatile
  8848                           
  8849                           ;LCD_src.c: 36:  PORTD= x;
  8850  13F7  0872               	movf	write_char@x,w
  8851  13F8  0088               	movwf	8	;volatile
  8852                           
  8853                           ;LCD_src.c: 37:  delay_screen();
  8854  13F9  160A  118A  2399   	fcall	_delay_screen
  8855                           
  8856                           ;LCD_src.c: 38:  RA3=0;
  8857  13FC  1283               	bcf	3,5	;RP0=0, select bank0
  8858  13FD  1303               	bcf	3,6	;RP1=0, select bank0
  8859  13FE  1185               	bcf	5,3	;volatile
  8860  13FF  0008               	return
  8861  1400                     __end_of_write_char:	
  8862                           
  8863                           	psect	text40
  8864  1399                     __ptext40:	
  8865 ;; *************** function _delay_screen *****************
  8866 ;; Defined at:
  8867 ;;		line 70 in file "LCD_src.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;		None
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  i               2    0[COMMON] int 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      void 
  8874 ;; Registers used:
  8875 ;;		wreg, status,2, btemp+1
  8876 ;; Tracked objects:
  8877 ;;		On entry : 300/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8881 ;;      Params:         0       0       0       0       0
  8882 ;;      Locals:         2       0       0       0       0
  8883 ;;      Temps:          0       0       0       0       0
  8884 ;;      Totals:         2       0       0       0       0
  8885 ;;Total ram usage:        2 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;;		_lcd_init
  8891 ;;		_write_char
  8892 ;;		_write_cmd
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           
  8897                           ;psect for function _delay_screen
  8898  1399                     _delay_screen:	
  8899                           
  8900                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  8901                           
  8902                           ;incstack = 0
  8903                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  8904  1399  01F0               	clrf	delay_screen@i
  8905  139A  01F1               	clrf	delay_screen@i+1
  8906  139B                     l3291:	
  8907  139B  3001               	movlw	1
  8908  139C  07F0               	addwf	delay_screen@i,f
  8909  139D  1803               	skipnc
  8910  139E  0AF1               	incf	delay_screen@i+1,f
  8911  139F  3000               	movlw	0
  8912  13A0  07F1               	addwf	delay_screen@i+1,f
  8913  13A1  0871               	movf	delay_screen@i+1,w
  8914  13A2  3A80               	xorlw	128
  8915  13A3  00FF               	movwf	127
  8916  13A4  3080               	movlw	128
  8917  13A5  027F               	subwf	127,w
  8918  13A6  1D03               	skipz
  8919  13A7  2BAA               	goto	u2145
  8920  13A8  3005               	movlw	5
  8921  13A9  0270               	subwf	delay_screen@i,w
  8922  13AA                     u2145:	
  8923  13AA  1803               	btfsc	3,0
  8924  13AB  0008               	return
  8925  13AC  2B9B               	goto	l3291
  8926  13AD                     __end_of_delay_screen:	
  8927  007E                     btemp	set	126	;btemp
  8928  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      79
    BANK1            80      0      27
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod
    _cold_threshold->_write_char
    _write_char->_delay_screen

Critical Paths under _main in BANK0

    _main->_date_settings
    _main->_thermometer_threshhold_settings
    _main->_time_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   43365
                                              8 BANK0      7     7      0
                     _cold_threshold
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13382
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      3     3      0    7473
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13382
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     371
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4303
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2617
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _cold_threshold                                       5     1      4     438
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cold_threshold
     _write_char
       _delay_screen
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1B       7       33.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      78      12        0.0%
ABS                  0      0      78       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Dec 12 16:53:57 2019

                                       _a 004A                                         _b 0049  
                                       _c 0048                                         _p 0020  
                                       _t 0030                                         _w 002E  
                                       _x 002C                                         _y 002A  
                                       _z 0028                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005C                                        _TZ 005D  
                                      _ge 005A                                        _wd 003E  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 1417  
                           ?_display_date 0070                                       l165 0D10  
                                     l357 134D                                       l472 14E3  
                                     l478 158C                                       l750 016D  
                                     l742 0092                                       l735 0FED  
                                     l751 0175                                       l744 00F8  
                                     l729 0D8B                                       l745 0100  
                                     l770 03F9                                       l762 0320  
                                     l771 0401                                       l782 04F5  
                                     l791 06AB                                       l783 04FD  
                                     l943 088C                                       l759 0293  
                                     l776 046D                                       l768 0393  
                                     l777 0475                                       l956 16C6  
                                     l949 175F                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005E  
                           ?_display_temp 0070                                       _TLV 005F  
                                     _shi 005B                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0065  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1315 1493                                      l4013 0E59  
                                    l4031 0E9C                                      l4201 045D  
                                    l3261 16E1                                      l3253 16DB  
                                    l4301 0686                                      l4221 04BC  
                                    l3421 15ED                                      l3263 16EF  
                                    l3271 1708                                      l3327 150F  
                                    l3249 16D4                                      l3601 0AD9  
                                    l4233 04E0                                      l4225 04C5  
                                    l4081 0F28                                      l3291 139B  
                                    l3507 13AF                                      l3275 1710  
                                    l3267 16FD                                      l4235 04E5  
                                    l3371 161E                                      l3517 14DE  
                                    l3613 0AF3                                      l3541 0A5B  
                                    l4253 0531                                      l3701 145C  
                                    l3631 0B1A                                      l3607 0AE6  
                                    l4191 043E                                      l3703 1465  
                                    l3367 1644                                      l4503 01A9  
                                    l3625 0B0D                                      l3553 0A73  
                                    l4409 078A                                      l4265 0547  
                                    l4257 053A                                      l3713 1474  
                                    l3721 147C                                      l3473 13C3  
                                    l3297 1351                                      l3369 1645  
                                    l3643 0B34                                      l3619 0B00  
                                    l3571 0A98                                      l3547 0A67  
                                    l4267 054C                                      l4187 0435  
                                    l3379 1655                                      l3491 159D  
                                    l4099 0FA3                                      l4523 01D6  
                                    l4515 01BF                                      l4507 01B2  
                                    l3661 0B5B                                      l3637 0B27  
                                    l3565 0A8B                                      l4349 0701  
                                    l4517 01C4                                      l3655 0B4E  
                                    l3583 0AB2                                      l3559 0A7F  
                                    l4199 0458                                      l3751 082C  
                                    l3743 0808                                      l3399 166A  
                                    l4527 01E5                                      l4471 0134  
                                    l3673 0B75                                      l3649 0B41  
                                    l3577 0AA5                                      l4297 0671  
                                    l3745 0816                                      l3667 0B68  
                                    l3595 0ACC                                      l4379 0744  
                                    l3755 0837                                      l4723 1430  
                                    l4483 0158                                      l4475 013D  
                                    l3685 0B8F                                      l3589 0ABF  
                                    l3909 176E                                      l4733 0015  
                                    l3773 15D8                                      l4709 1584  
                                    l4581 02E3                                      l4485 015D  
                                    l3679 0B82                                      l3687 0B91  
                                    l4751 0065                                      l4743 0043  
                                    l4735 0021                                      l3767 15BC  
                                    l3769 15CA                                      l3777 15E3  
                                    l3873 09D4                                      l3865 09C0  
                                    l3947 089B                                      l4755 0076  
                                    l4747 0054                                      l4739 0032  
                                    l4677 1738                                      l3877 09DE  
                                    l3869 09CA                                      l4861 0D4A  
                                    l3897 1539                                      l4849 0CC9  
                          ?_display_clock 0070                                      l4787 0BD1  
                                    u2105 16F5                                      u2115 16FE  
                                    u3005 15D0                                      u3015 15D9  
                                    u2145 13AA                                      u3105 1554  
                                    u3035 0978                                      u2085 16E4  
                                    u3045 0983                                      u3055 0990  
                                    u2185 1500                                      u2265 13D2  
                                    u2195 1528                                      u2285 15AD  
                                    u2295 13BE                                      u4085 0D5F  
                                    u2915 080B                                      u2935 0817  
                                    u2945 0823                                      u3915 171E  
                                    u2875 147F                                      u2955 082D  
                                    u3925 172B                                      u3935 1736  
                                    u3855 168F                                      u2985 15BF  
                                    u3865 169C                                      u3875 0843  
                                    u3885 084E               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0B93  
                                    _init 133C                                      _var1 004F  
                                    _var2 004E                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 0060  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 1476  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1715  
                         __end_of___lbmod 1499                      __end_of_delay_screen 13AD  
                         __end_of___lwdiv 083C                           __end_of___lwmod 15E8  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 003A                                     _table 00B3  
                                   _stats 0022                                     main@i 006D  
                          write_byte@temp 0076                       _set_lower_threshold 1686  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                        ??_cold_threshold 0077                           __initialization 07E0  
                            __end_of_main 0D7F                              __end_of_init 1344  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0068  
                                  ??_init 0070                      incrementor@lower_val 0062  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0060  
                        __end_of_lcd_init 14BC                          __end_of_get_temp 0A3C  
                        __end_of_get_time 155A                                    _baifen 0058  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 13C1                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00A9  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 1378                       _set_upper_threshold 083C  
                                  _table1 00A0                           ___awmod@divisor 0070  
                                  _shifen 0059                                    _wanfen 0056  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 152E  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 1800                      __end_of_display_temp 1455  
                          __pcstackCOMMON 0070                              __pidataBANK1 0005  
                   __size_of_delay_screen 0014                   cold_threshold@lower_val 0075  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                   cold_threshold@upper_val 0073  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 1399                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1369  
                              _delay_temp 134C                                __pmaintext 0B93  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0064  
                         _cold_high_night 00AF                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 0385  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                            _heat_counter 003C                                 ?_set_time 0070  
                    __size_of_reset_alarm 002C                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 13E9  
                _time_date_hex_terminator 135A                                   ___lbdiv 1455  
                                 ___awmod 16CA                                   ___lbmod 1476  
                         __size_of_delay2 0014                                   ___lwdiv 0800  
                                 ___lwmod 15B6                                   _alarm__ 004D  
                                 _day_hex 0047                                   _day_low 0026  
                            _heater_state 0051                                   __ptext1 0086  
                                 __ptext2 0D7F                                   __ptext3 083C  
                                 __ptext4 1686                                   __ptext5 1417  
                                 __ptext6 155A                                   __ptext7 1499  
                                 __ptext8 13D5                                   __ptext9 1337  
                    __end_of_button_delay 13C1                              _cold_counter 00B1  
                                 delay2@i 0070                         __end_of_init_temp 133C  
                        ___awmod@dividend 0072                         __end_of_read_byte 161C  
                                 _qianfen 0057                      __size_of_time_read_1 0030  
                                 _lower_t 0054               __end_of_set_beep_threshhold 1434  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 009D  
                                 clrloop0 1345                                ??_lcd_init 0073  
                                 _upper_t 0055                                ??_get_temp 0060  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 161C  
                              ??_set_time 0075                       _time_date_delimiter 0A3C  
                            _display_date 1763                              _display_temp 1434  
                       __end_of_write_cmd 1417                          ___lbmod@dividend 0074  
                            _cooler_state 0050                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 0935  
                  __size_of_date_settings 045B                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 16CA                             ??_display_day 0075  
                          __end_of_delay2 13D5                                _write_char 13E9  
                              _write_byte 1650                   __size_of_cold_threshold 004E  
                          _var_night_high 0036                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 1388                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 1388  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0385                               __pdataBANK1 00B3  
                              read_byte@i 0076                                read_byte@j 0040  
             __end_of_set_upper_threshold 0890                       __end_of_display_day 0086  
                               ___latbits 0002                             __pcstackBANK0 0060  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 13AD  
                        ___lwdiv@dividend 0078                               _day_counter 00A7  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                                 _cold_high 0034  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 14E0                      __end_of_time_write_1 1506  
                      _initialise_buttons 13D5                           _day_of_week_var 00AB  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 1337                                 _read_byte 15E8  
                     ?_initialise_buttons 0070                                 clear_ram0 1344  
                           ??_reset_alarm 0073                            _prev_hex_hours 0042  
                            ??_delay_temp 0071                            _cold_low_night 00AD  
                               _temp_high 004B                               _display_day 000D  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 0281  
       ??_thermometer_threshhold_settings 0065          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0D7F                      ??_initialise_buttons 0070  
                  __size_of_time_settings 02FF                            _cold_threshold 1715  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 135A  
                               _write_cmd 1400                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 0038  
                         _buzzer_watcher1 0052                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0065                      __size_of_ds1302_init 000F  
                             _incrementor 14BC                    __end_of_cold_threshold 1763  
                            _modulus_func 1378                       __end_of_reset_alarm 1586  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0024  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 133C                                  __ptext11 152E  
                                __ptext20 0800                                  __ptext12 1586  
                                __ptext21 1476                                  __ptext13 0935  
                                __ptext30 135A                                  __ptext22 1455  
                                __ptext14 1650                                  __ptext31 0A3C  
                                __ptext23 1369                                  __ptext15 161C  
                                __ptext40 1399                                  __ptext32 1506  
                                __ptext24 1434                                  __ptext16 15E8  
                                __ptext33 14E0                                  __ptext25 000D  
                                __ptext17 134C                                  __ptext34 14BC  
                                __ptext26 1763                                  __ptext18 13C1  
                                __ptext35 1378                                  __ptext27 0890  
                                __ptext19 15B6                                  __ptext36 16CA  
                                __ptext28 0385                                  __ptext37 13AD  
                                __ptext29 1400                                  __ptext38 1715  
                                __ptext39 13E9                       __end_of_time_read_1 15B6  
                                _cold_low 0032                                ?_write_cmd 0070  
                                _lcd_init 1499                                  _get_temp 0935  
                                _get_time 152E                             _time_settings 0086  
        __end_of_time_date_hex_terminator 1369                             __size_of_main 01EC  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0046                                 set_time@i 0075  
                           _prev_hex_mins 0041                             _prev_hex_year 0043  
                            ??_reset_temp 0074                                  _set_time 1506  
                                _temp_low 004C                                  _prev_hex 0045  
              time_date_delimiter@limiter 0071                           ?_cold_threshold 0073  
            __size_of_set_lower_threshold 0044                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 00A5  
                          _buzzer_watcher 0053                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0B93  
                                init_ram0 138C                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 1650  
                             ??_read_byte 0074                            ?_time_settings 0070  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 155A                              _time_write_1 14E0  
                            _prev_hex_day 0044                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 1586                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0054  
                           _display_clock 0890                             time_write_1@j 0072  
                      __end_of_write_char 1400                        __end_of_write_byte 1686  
