

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 11 15:16:00 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  13E0                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  13E0  3400               	retlw	0
   696  13E1  3402               	retlw	2
   697  13E2  3400               	retlw	0
   698  13E3  3412               	retlw	18
   699  13E4  3412               	retlw	18
   700  13E5  3406               	retlw	6
   701  13E6  3419               	retlw	25
   702  13E7  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003E                     _RC6	set	62
   706  003F                     _RC7	set	63
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30B5               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3013               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  30E0               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30AD               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  2428  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30AD               	movlw	low (__pbssBANK1+13)
   756  07F1  160A  118A  23D8  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  305E               	movlw	low (__pbssBANK0+62)
   762  07F9  160A  118A  23D8   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2C12   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _day_counter:	
   773  0020                     	ds	2
   774  0022                     _p:	
   775  0022                     	ds	2
   776  0024                     _stats:	
   777  0024                     	ds	2
   778  0026                     _day_high:	
   779  0026                     	ds	2
   780  0028                     _day_low:	
   781  0028                     	ds	2
   782  002A                     _z:	
   783  002A                     	ds	2
   784  002C                     _y:	
   785  002C                     	ds	2
   786  002E                     _x:	
   787  002E                     	ds	2
   788  0030                     _w:	
   789  0030                     	ds	2
   790  0032                     _t:	
   791  0032                     	ds	2
   792  0034                     _var_night_low:	
   793  0034                     	ds	2
   794  0036                     _count:	
   795  0036                     	ds	2
   796  0038                     _cold_counter:	
   797  0038                     	ds	2
   798  003A                     _heat_counter:	
   799  003A                     	ds	2
   800  003C                     _wd:	
   801  003C                     	ds	2
   802  003E                     read_byte@j:	
   803  003E                     	ds	1
   804  003F                     _prev_hex_mins:	
   805  003F                     	ds	1
   806  0040                     _prev_hex_hours:	
   807  0040                     	ds	1
   808  0041                     _prev_hex_year:	
   809  0041                     	ds	1
   810  0042                     _prev_hex_day:	
   811  0042                     	ds	1
   812  0043                     _prev_hex:	
   813  0043                     	ds	1
   814  0044                     _hrs_limiter:	
   815  0044                     	ds	1
   816  0045                     _day_hex:	
   817  0045                     	ds	1
   818  0046                     _c:	
   819  0046                     	ds	1
   820  0047                     _b:	
   821  0047                     	ds	1
   822  0048                     _a:	
   823  0048                     	ds	1
   824  0049                     _temp_high:	
   825  0049                     	ds	1
   826  004A                     _temp_low:	
   827  004A                     	ds	1
   828  004B                     _alarm__:	
   829  004B                     	ds	1
   830  004C                     _var2:	
   831  004C                     	ds	1
   832  004D                     _var1:	
   833  004D                     	ds	1
   834  004E                     _cooler_state:	
   835  004E                     	ds	1
   836  004F                     _heater_state:	
   837  004F                     	ds	1
   838  0050                     _buzzer_watcher1:	
   839  0050                     	ds	1
   840  0051                     _buzzer_watcher:	
   841  0051                     	ds	1
   842  0052                     _lower_t:	
   843  0052                     	ds	1
   844  0053                     _upper_t:	
   845  0053                     	ds	1
   846  0054                     _wanfen:	
   847  0054                     	ds	1
   848  0055                     _qianfen:	
   849  0055                     	ds	1
   850  0056                     _baifen:	
   851  0056                     	ds	1
   852  0057                     _shifen:	
   853  0057                     	ds	1
   854  0058                     _ge:	
   855  0058                     	ds	1
   856  0059                     _shi:	
   857  0059                     	ds	1
   858  005A                     _TX:	
   859  005A                     	ds	1
   860  005B                     _TZ:	
   861  005B                     	ds	1
   862  005C                     _THV:	
   863  005C                     	ds	1
   864  005D                     _TLV:	
   865  005D                     	ds	1
   866                           
   867                           	psect	bssBANK1
   868  00A0                     __pbssBANK1:	
   869  00A0                     _table1:	
   870  00A0                     	ds	7
   871  00A7                     _d_type:	
   872  00A7                     	ds	2
   873  00A9                     _day_of_week_var:	
   874  00A9                     	ds	2
   875  00AB                     _var_night_high:	
   876  00AB                     	ds	2
   877                           
   878                           	psect	dataBANK1
   879  00AD                     __pdataBANK1:	
   880  00AD                     _table:	
   881  00AD                     	ds	8
   882                           
   883                           	psect	inittext
   884  1424                     init_fetch0:	
   885                           ;	Called with low address in FSR and high address in W
   886                           
   887  1424  087E               	movf	126,w
   888  1425  008A               	movwf	10
   889  1426  087F               	movf	127,w
   890  1427  0082               	movwf	2
   891  1428                     init_ram0:	
   892                           ;Called with:
   893                           ;	high address of idata address in btemp 
   894                           ;	low address of idata address in btemp+1 
   895                           ;	low address of data in FSR
   896                           ;	high address + 1 of data in btemp-1
   897                           
   898  1428  2424  160A  118A   	fcall	init_fetch0
   899  142B  0080               	movwf	0
   900  142C  0A84               	incf	4,f
   901  142D  0804               	movf	4,w
   902  142E  067D               	xorwf	125,w
   903  142F  1903               	btfsc	3,2
   904  1430  3400               	retlw	0
   905  1431  0AFF               	incf	127,f
   906  1432  1903               	btfsc	3,2
   907  1433  0AFE               	incf	126,f
   908  1434  2C28               	goto	init_ram0
   909                           
   910                           	psect	clrtext
   911  13D8                     clear_ram0:	
   912                           ;	Called with FSR containing the base address, and
   913                           ;	W with the last address+1
   914                           
   915  13D8  0064               	clrwdt	;clear the watchdog before getting into this loop
   916  13D9                     clrloop0:	
   917  13D9  0180               	clrf	0	;clear RAM location pointed to by FSR
   918  13DA  0A84               	incf	4,f	;increment pointer
   919  13DB  0604               	xorwf	4,w	;XOR with final address
   920  13DC  1903               	btfsc	3,2	;have we reached the end yet?
   921  13DD  3400               	retlw	0	;all done for this memory range, return
   922  13DE  0604               	xorwf	4,w	;XOR again to restore value
   923  13DF  2BD9               	goto	clrloop0	;do the next byte
   924                           
   925                           	psect	cstackCOMMON
   926  0070                     __pcstackCOMMON:	
   927  0070                     ?_init_temp:	
   928  0070                     ??_init_temp:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_set_time:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_ds1302_init:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_init:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ??_init:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_lcd_init:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_initialise_buttons:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ??_initialise_buttons:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_get_temp:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_get_time:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_write_cmd:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_write_char:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_display_temp:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_display_date:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_display_clock:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_thermometer_threshhold_settings:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_date_settings:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?_time_settings:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_reset_alarm:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ?_set_beep_threshhold:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_delay_screen:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ??_delay_screen:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_delay_temp:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ?_delay2:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ??_delay2:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_time_write_1:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ??_time_write_1:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_time_read_1:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ??_time_read_1:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ?_button_delay:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ??_button_delay:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?_time_date_hex_terminator:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ?_time_date_delimiter:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?_main:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0070                     ?_reset_temp:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0070                     ?_write_byte:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     ?_read_byte:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ?___lbdiv:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ?___lbmod:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     ?___awmod:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     ?___lwmod:	
  1049                           ; 2 bytes @ 0x0
  1050                           
  1051  0070                     delay_temp@y:	
  1052                           ; 2 bytes @ 0x0
  1053                           
  1054  0070                     time_date_delimiter@hex:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0070                     time_date_hex_terminator@limiter:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0070                     ___lbdiv@divisor:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0070                     ___lbmod@divisor:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0070                     delay_screen@i:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     delay2@i:	
  1070                           ; 2 bytes @ 0x0
  1071                           
  1072  0070                     button_delay@i:	
  1073                           ; 2 bytes @ 0x0
  1074                           
  1075  0070                     ___awmod@divisor:	
  1076                           ; 2 bytes @ 0x0
  1077                           
  1078  0070                     ___lwmod@divisor:	
  1079                           ; 2 bytes @ 0x0
  1080                           
  1081                           
  1082                           ; 2 bytes @ 0x0
  1083  0070                     	ds	1
  1084  0071                     ??_delay_temp:	
  1085  0071                     ??_time_date_hex_terminator:	
  1086                           ; 1 bytes @ 0x1
  1087                           
  1088  0071                     ??___lbdiv:	
  1089                           ; 1 bytes @ 0x1
  1090                           
  1091  0071                     ??___lbmod:	
  1092                           ; 1 bytes @ 0x1
  1093                           
  1094  0071                     time_date_delimiter@limiter:	
  1095                           ; 1 bytes @ 0x1
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x1
  1099  0071                     	ds	1
  1100  0072                     ??_write_cmd:	
  1101  0072                     ??_write_char:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104  0072                     ??_set_beep_threshhold:	
  1105                           ; 1 bytes @ 0x2
  1106                           
  1107  0072                     write_char@x:	
  1108                           ; 1 bytes @ 0x2
  1109                           
  1110  0072                     write_cmd@x:	
  1111                           ; 1 bytes @ 0x2
  1112                           
  1113  0072                     delay_temp@x:	
  1114                           ; 1 bytes @ 0x2
  1115                           
  1116  0072                     set_beep_threshhold@x:	
  1117                           ; 1 bytes @ 0x2
  1118                           
  1119  0072                     ___lbdiv@dividend:	
  1120                           ; 1 bytes @ 0x2
  1121                           
  1122  0072                     time_write_1@j:	
  1123                           ; 1 bytes @ 0x2
  1124                           
  1125  0072                     time_read_1@j:	
  1126                           ; 2 bytes @ 0x2
  1127                           
  1128  0072                     time_date_delimiter@type:	
  1129                           ; 2 bytes @ 0x2
  1130                           
  1131  0072                     ___awmod@dividend:	
  1132                           ; 2 bytes @ 0x2
  1133                           
  1134  0072                     ___lwmod@dividend:	
  1135                           ; 2 bytes @ 0x2
  1136                           
  1137                           
  1138                           ; 2 bytes @ 0x2
  1139  0072                     	ds	1
  1140  0073                     ??_lcd_init:	
  1141  0073                     ??_display_temp:	
  1142                           ; 1 bytes @ 0x3
  1143                           
  1144  0073                     ??_display_date:	
  1145                           ; 1 bytes @ 0x3
  1146                           
  1147  0073                     ??_display_clock:	
  1148                           ; 1 bytes @ 0x3
  1149                           
  1150  0073                     ?_set_lower_threshold:	
  1151                           ; 1 bytes @ 0x3
  1152                           
  1153  0073                     ?_set_upper_threshold:	
  1154                           ; 1 bytes @ 0x3
  1155                           
  1156  0073                     ??_reset_alarm:	
  1157                           ; 1 bytes @ 0x3
  1158                           
  1159  0073                     ?_display_day:	
  1160                           ; 1 bytes @ 0x3
  1161                           
  1162  0073                     delay_temp@z:	
  1163                           ; 1 bytes @ 0x3
  1164                           
  1165  0073                     time_date_hex_terminator@val:	
  1166                           ; 1 bytes @ 0x3
  1167                           
  1168  0073                     ___lbdiv@counter:	
  1169                           ; 1 bytes @ 0x3
  1170                           
  1171  0073                     set_upper_threshold@upper_val:	
  1172                           ; 1 bytes @ 0x3
  1173                           
  1174  0073                     set_lower_threshold@upper_val:	
  1175                           ; 2 bytes @ 0x3
  1176                           
  1177  0073                     display_day@num:	
  1178                           ; 2 bytes @ 0x3
  1179                           
  1180                           
  1181                           ; 2 bytes @ 0x3
  1182  0073                     	ds	1
  1183  0074                     ??_time_date_delimiter:	
  1184  0074                     ??_reset_temp:	
  1185                           ; 1 bytes @ 0x4
  1186                           
  1187  0074                     ??_write_byte:	
  1188                           ; 1 bytes @ 0x4
  1189                           
  1190  0074                     ??_read_byte:	
  1191                           ; 1 bytes @ 0x4
  1192                           
  1193  0074                     ??___awmod:	
  1194                           ; 1 bytes @ 0x4
  1195                           
  1196  0074                     ??___lwmod:	
  1197                           ; 1 bytes @ 0x4
  1198                           
  1199  0074                     time_write_1@time_tx:	
  1200                           ; 1 bytes @ 0x4
  1201                           
  1202  0074                     time_read_1@time_rx:	
  1203                           ; 1 bytes @ 0x4
  1204                           
  1205  0074                     ___lbdiv@quotient:	
  1206                           ; 1 bytes @ 0x4
  1207                           
  1208  0074                     ___lbmod@dividend:	
  1209                           ; 1 bytes @ 0x4
  1210                           
  1211                           
  1212                           ; 1 bytes @ 0x4
  1213  0074                     	ds	1
  1214  0075                     ??_set_time:	
  1215  0075                     ??_ds1302_init:	
  1216                           ; 1 bytes @ 0x5
  1217                           
  1218  0075                     ??_get_time:	
  1219                           ; 1 bytes @ 0x5
  1220                           
  1221  0075                     ??_display_day:	
  1222                           ; 1 bytes @ 0x5
  1223                           
  1224  0075                     reset_temp@presence:	
  1225                           ; 1 bytes @ 0x5
  1226                           
  1227  0075                     read_byte@value:	
  1228                           ; 1 bytes @ 0x5
  1229                           
  1230  0075                     ___awmod@counter:	
  1231                           ; 1 bytes @ 0x5
  1232                           
  1233  0075                     ___lbmod@counter:	
  1234                           ; 1 bytes @ 0x5
  1235                           
  1236  0075                     ___lwmod@counter:	
  1237                           ; 1 bytes @ 0x5
  1238                           
  1239  0075                     set_time@i:	
  1240                           ; 1 bytes @ 0x5
  1241                           
  1242  0075                     display_clock@i:	
  1243                           ; 2 bytes @ 0x5
  1244                           
  1245  0075                     display_date@i:	
  1246                           ; 2 bytes @ 0x5
  1247                           
  1248  0075                     set_upper_threshold@lower_val:	
  1249                           ; 2 bytes @ 0x5
  1250                           
  1251  0075                     set_lower_threshold@lower_val:	
  1252                           ; 2 bytes @ 0x5
  1253                           
  1254                           
  1255                           ; 2 bytes @ 0x5
  1256  0075                     	ds	1
  1257  0076                     ?___lwdiv:	
  1258  0076                     write_byte@temp:	
  1259                           ; 2 bytes @ 0x6
  1260                           
  1261  0076                     read_byte@i:	
  1262                           ; 1 bytes @ 0x6
  1263                           
  1264  0076                     time_date_delimiter@val:	
  1265                           ; 1 bytes @ 0x6
  1266                           
  1267  0076                     ___awmod@sign:	
  1268                           ; 1 bytes @ 0x6
  1269                           
  1270  0076                     ___lbmod@rem:	
  1271                           ; 1 bytes @ 0x6
  1272                           
  1273  0076                     get_time@i:	
  1274                           ; 1 bytes @ 0x6
  1275                           
  1276  0076                     ___lwdiv@divisor:	
  1277                           ; 2 bytes @ 0x6
  1278                           
  1279                           
  1280                           ; 2 bytes @ 0x6
  1281  0076                     	ds	1
  1282  0077                     ??_set_lower_threshold:	
  1283  0077                     ??_set_upper_threshold:	
  1284                           ; 1 bytes @ 0x7
  1285                           
  1286  0077                     ?_modulus_func:	
  1287                           ; 1 bytes @ 0x7
  1288                           
  1289  0077                     write_byte@val:	
  1290                           ; 2 bytes @ 0x7
  1291                           
  1292  0077                     modulus_func@x:	
  1293                           ; 1 bytes @ 0x7
  1294                           
  1295                           
  1296                           ; 2 bytes @ 0x7
  1297  0077                     	ds	1
  1298  0078                     write_byte@i:	
  1299  0078                     ___lwdiv@dividend:	
  1300                           ; 1 bytes @ 0x8
  1301                           
  1302                           
  1303                           ; 2 bytes @ 0x8
  1304  0078                     	ds	1
  1305  0079                     modulus_func@y:	
  1306                           
  1307                           ; 2 bytes @ 0x9
  1308  0079                     	ds	1
  1309  007A                     ??___lwdiv:	
  1310                           
  1311                           ; 1 bytes @ 0xA
  1312  007A                     	ds	1
  1313  007B                     ??_modulus_func:	
  1314  007B                     ??_incrementor:	
  1315                           ; 1 bytes @ 0xB
  1316                           
  1317  007B                     ??_decrementor:	
  1318                           ; 1 bytes @ 0xB
  1319                           
  1320  007B                     ___lwdiv@quotient:	
  1321                           ; 1 bytes @ 0xB
  1322                           
  1323                           
  1324                           ; 2 bytes @ 0xB
  1325  007B                     	ds	2
  1326  007D                     ___lwdiv@counter:	
  1327                           
  1328                           ; 1 bytes @ 0xD
  1329  007D                     	ds	1
  1330                           
  1331                           	psect	cstackBANK0
  1332  005E                     __pcstackBANK0:	
  1333  005E                     ??_get_temp:	
  1334  005E                     ?_incrementor:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337  005E                     ?_decrementor:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340  005E                     incrementor@upper_val:	
  1341                           ; 1 bytes @ 0x0
  1342                           
  1343  005E                     decrementor@lower_val:	
  1344                           ; 2 bytes @ 0x0
  1345                           
  1346                           
  1347                           ; 2 bytes @ 0x0
  1348  005E                     	ds	2
  1349  0060                     incrementor@lower_val:	
  1350  0060                     decrementor@upper_val:	
  1351                           ; 2 bytes @ 0x2
  1352                           
  1353                           
  1354                           ; 2 bytes @ 0x2
  1355  0060                     	ds	2
  1356  0062                     incrementor@z:	
  1357  0062                     decrementor@z:	
  1358                           ; 1 bytes @ 0x4
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x4
  1362  0062                     	ds	1
  1363  0063                     ??_thermometer_threshhold_settings:	
  1364  0063                     ??_date_settings:	
  1365                           ; 1 bytes @ 0x5
  1366                           
  1367  0063                     ??_time_settings:	
  1368                           ; 1 bytes @ 0x5
  1369                           
  1370                           
  1371                           ; 1 bytes @ 0x5
  1372  0063                     	ds	3
  1373  0066                     thermometer_threshhold_settings@i:	
  1374                           
  1375                           ; 2 bytes @ 0x8
  1376  0066                     	ds	2
  1377  0068                     ??_main:	
  1378                           
  1379                           ; 1 bytes @ 0xA
  1380  0068                     	ds	5
  1381  006D                     main@i:	
  1382                           
  1383                           ; 2 bytes @ 0xF
  1384  006D                     	ds	2
  1385                           
  1386                           	psect	maintext
  1387  0C12                     __pmaintext:	
  1388 ;;
  1389 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1390 ;;
  1391 ;; *************** function _main *****************
  1392 ;; Defined at:
  1393 ;;		line 10 in file "mainLogic.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  i               2   15[BANK0 ] int 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : B00/0
  1404 ;;		On exit  : 300/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1407 ;;      Params:         0       0       0       0       0
  1408 ;;      Locals:         0       2       0       0       0
  1409 ;;      Temps:          0       5       0       0       0
  1410 ;;      Totals:         0       7       0       0       0
  1411 ;;Total ram usage:        7 bytes
  1412 ;; Hardware stack levels required when called:    4
  1413 ;; This function calls:
  1414 ;;		_date_settings
  1415 ;;		_display_clock
  1416 ;;		_display_date
  1417 ;;		_display_day
  1418 ;;		_display_temp
  1419 ;;		_ds1302_init
  1420 ;;		_get_temp
  1421 ;;		_get_time
  1422 ;;		_init
  1423 ;;		_init_temp
  1424 ;;		_initialise_buttons
  1425 ;;		_lcd_init
  1426 ;;		_modulus_func
  1427 ;;		_reset_alarm
  1428 ;;		_set_beep_threshhold
  1429 ;;		_set_lower_threshold
  1430 ;;		_set_time
  1431 ;;		_set_upper_threshold
  1432 ;;		_thermometer_threshhold_settings
  1433 ;;		_time_settings
  1434 ;;		_write_char
  1435 ;;		_write_cmd
  1436 ;; This function is called by:
  1437 ;;		Startup code after reset
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           
  1442                           ;psect for function _main
  1443  0C12                     _main:	
  1444                           
  1445                           ;mainLogic.c: 11:     TRISB=0X02;
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1449  0C12  3002               	movlw	2
  1450  0C13  1683               	bsf	3,5	;RP0=1, select bank1
  1451  0C14  0086               	movwf	6	;volatile
  1452                           
  1453                           ;mainLogic.c: 12:     init_temp();
  1454  0C15  160A  118A  23CB  120A  158A  	fcall	_init_temp
  1455                           
  1456                           ;mainLogic.c: 13:     set_time();
  1457  0C1A  160A  118A  2589  120A  158A  	fcall	_set_time
  1458                           
  1459                           ;mainLogic.c: 14:     ds1302_init();
  1460  0C1F  160A  118A  2405  120A  158A  	fcall	_ds1302_init
  1461                           
  1462                           ;mainLogic.c: 16:     init();
  1463  0C24  160A  118A  23D0  120A  158A  	fcall	_init
  1464                           
  1465                           ;mainLogic.c: 17:     lcd_init();
  1466  0C29  160A  118A  251E  120A  158A  	fcall	_lcd_init
  1467                           
  1468                           ;mainLogic.c: 18:     init_temp();
  1469  0C2E  160A  118A  23CB  120A  158A  	fcall	_init_temp
  1470                           
  1471                           ;mainLogic.c: 19:     initialise_buttons();
  1472  0C33  160A  118A  2471  120A  158A  	fcall	_initialise_buttons
  1473                           
  1474                           ;mainLogic.c: 20:     var1 = 2;
  1475  0C38  3002               	movlw	2
  1476  0C39  00E8               	movwf	??_main
  1477  0C3A  0868               	movf	??_main,w
  1478  0C3B  00CD               	movwf	_var1
  1479                           
  1480                           ;mainLogic.c: 21:     var2 = 4;
  1481  0C3C  3004               	movlw	4
  1482  0C3D  00E8               	movwf	??_main
  1483  0C3E  0868               	movf	??_main,w
  1484  0C3F  00CC               	movwf	_var2
  1485  0C40                     l4636:	
  1486                           
  1487                           ;mainLogic.c: 25:     get_temp();
  1488  0C40  120A  158A  21B4  120A  158A  	fcall	_get_temp
  1489                           
  1490                           ;mainLogic.c: 26:     get_time();
  1491  0C45  160A  118A  25B1  120A  158A  	fcall	_get_time
  1492                           
  1493                           ;mainLogic.c: 27:     write_cmd(0x80);
  1494  0C4A  3080               	movlw	128
  1495  0C4B  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1496                           
  1497                           ;mainLogic.c: 28:     write_char('T');
  1498  0C50  3054               	movlw	84
  1499  0C51  160A  118A  2485  120A  158A  	fcall	_write_char
  1500                           
  1501                           ;mainLogic.c: 29:     write_char('e');
  1502  0C56  3065               	movlw	101
  1503  0C57  160A  118A  2485  120A  158A  	fcall	_write_char
  1504                           
  1505                           ;mainLogic.c: 30:     write_char('m');
  1506  0C5C  306D               	movlw	109
  1507  0C5D  160A  118A  2485  120A  158A  	fcall	_write_char
  1508                           
  1509                           ;mainLogic.c: 31:     write_char('p');
  1510  0C62  3070               	movlw	112
  1511  0C63  160A  118A  2485  120A  158A  	fcall	_write_char
  1512                           
  1513                           ;mainLogic.c: 32:     write_char(':');
  1514  0C68  303A               	movlw	58
  1515  0C69  160A  118A  2485  120A  158A  	fcall	_write_char
  1516                           
  1517                           ;mainLogic.c: 33:     display_temp();
  1518  0C6E  160A  118A  24B9  120A  158A  	fcall	_display_temp
  1519                           
  1520                           ;mainLogic.c: 35:     write_cmd(0x90);
  1521  0C73  3090               	movlw	144
  1522  0C74  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1523                           
  1524                           ;mainLogic.c: 36:     write_char('D');
  1525  0C79  3044               	movlw	68
  1526  0C7A  160A  118A  2485  120A  158A  	fcall	_write_char
  1527                           
  1528                           ;mainLogic.c: 37:     write_char('a');
  1529  0C7F  3061               	movlw	97
  1530  0C80  160A  118A  2485  120A  158A  	fcall	_write_char
  1531                           
  1532                           ;mainLogic.c: 38:     write_char('t');
  1533  0C85  3074               	movlw	116
  1534  0C86  160A  118A  2485  120A  158A  	fcall	_write_char
  1535                           
  1536                           ;mainLogic.c: 39:     write_char('e');
  1537  0C8B  3065               	movlw	101
  1538  0C8C  160A  118A  2485  120A  158A  	fcall	_write_char
  1539                           
  1540                           ;mainLogic.c: 40:     write_char(':');
  1541  0C91  303A               	movlw	58
  1542  0C92  160A  118A  2485  120A  158A  	fcall	_write_char
  1543                           
  1544                           ;mainLogic.c: 41:     write_char(' ');
  1545  0C97  3020               	movlw	32
  1546  0C98  160A  118A  2485  120A  158A  	fcall	_write_char
  1547                           
  1548                           ;mainLogic.c: 43:     display_date();
  1549  0C9D  120A  158A  2072  120A  158A  	fcall	_display_date
  1550                           
  1551                           ;mainLogic.c: 45:     write_cmd(0x88);
  1552  0CA2  3088               	movlw	136
  1553  0CA3  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1554                           
  1555                           ;mainLogic.c: 46:     write_char('T');
  1556  0CA8  3054               	movlw	84
  1557  0CA9  160A  118A  2485  120A  158A  	fcall	_write_char
  1558                           
  1559                           ;mainLogic.c: 47:     write_char('i');
  1560  0CAE  3069               	movlw	105
  1561  0CAF  160A  118A  2485  120A  158A  	fcall	_write_char
  1562                           
  1563                           ;mainLogic.c: 48:     write_char('m');
  1564  0CB4  306D               	movlw	109
  1565  0CB5  160A  118A  2485  120A  158A  	fcall	_write_char
  1566                           
  1567                           ;mainLogic.c: 49:     write_char('e');
  1568  0CBA  3065               	movlw	101
  1569  0CBB  160A  118A  2485  120A  158A  	fcall	_write_char
  1570                           
  1571                           ;mainLogic.c: 50:     write_char(':');
  1572  0CC0  303A               	movlw	58
  1573  0CC1  160A  118A  2485  120A  158A  	fcall	_write_char
  1574                           
  1575                           ;mainLogic.c: 51:     display_clock();
  1576  0CC6  120A  158A  210F  120A  158A  	fcall	_display_clock
  1577                           
  1578                           ;mainLogic.c: 52:     thermometer_threshhold_settings();
  1579  0CCB  120A  158A  2592  120A  158A  	fcall	_thermometer_threshhold_settings
  1580                           
  1581                           ;mainLogic.c: 53:     date_settings();
  1582  0CD0  120A  118A  2387  120A  158A  	fcall	_date_settings
  1583                           
  1584                           ;mainLogic.c: 54:     time_settings();
  1585  0CD5  120A  118A  2071  120A  158A  	fcall	_time_settings
  1586                           
  1587                           ;mainLogic.c: 55:     write_cmd(0x98);
  1588  0CDA  3098               	movlw	152
  1589  0CDB  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1590                           
  1591                           ;mainLogic.c: 56:      if((temp_high+'0') == '0' && (temp_low + '0') == '0'){
  1592  0CE0  0849               	movf	_temp_high,w
  1593  0CE1  3E30               	addlw	48
  1594  0CE2  00E8               	movwf	??_main
  1595  0CE3  3000               	movlw	0
  1596  0CE4  1803               	skipnc
  1597  0CE5  3001               	movlw	1
  1598  0CE6  00E9               	movwf	??_main+1
  1599  0CE7  3030               	movlw	48
  1600  0CE8  0668               	xorwf	??_main,w
  1601  0CE9  0469               	iorwf	??_main+1,w
  1602  0CEA  1D03               	btfss	3,2
  1603  0CEB  2D24               	goto	l154
  1604  0CEC  084A               	movf	_temp_low,w
  1605  0CED  3E30               	addlw	48
  1606  0CEE  00E8               	movwf	??_main
  1607  0CEF  3000               	movlw	0
  1608  0CF0  1803               	skipnc
  1609  0CF1  3001               	movlw	1
  1610  0CF2  00E9               	movwf	??_main+1
  1611  0CF3  3030               	movlw	48
  1612  0CF4  0668               	xorwf	??_main,w
  1613  0CF5  0469               	iorwf	??_main+1,w
  1614  0CF6  1D03               	btfss	3,2
  1615  0CF7  2D24               	goto	l154
  1616                           
  1617                           ;mainLogic.c: 57:     alarm__ = set_lower_threshold(var1,var2);
  1618  0CF8  084D               	movf	_var1,w
  1619  0CF9  00E8               	movwf	??_main
  1620  0CFA  01E9               	clrf	??_main+1
  1621  0CFB  0868               	movf	??_main,w
  1622  0CFC  00F3               	movwf	set_lower_threshold@upper_val
  1623  0CFD  0869               	movf	??_main+1,w
  1624  0CFE  00F4               	movwf	set_lower_threshold@upper_val+1
  1625  0CFF  084C               	movf	_var2,w
  1626  0D00  00EA               	movwf	??_main+2
  1627  0D01  01EB               	clrf	??_main+3
  1628  0D02  086A               	movf	??_main+2,w
  1629  0D03  00F5               	movwf	set_lower_threshold@lower_val
  1630  0D04  086B               	movf	??_main+3,w
  1631  0D05  00F6               	movwf	set_lower_threshold@lower_val+1
  1632  0D06  160A  118A  2745  120A  158A  	fcall	_set_lower_threshold
  1633  0D0B  00EC               	movwf	??_main+4
  1634  0D0C  086C               	movf	??_main+4,w
  1635  0D0D  00CB               	movwf	_alarm__
  1636                           
  1637                           ;mainLogic.c: 58:     alarm__ = set_upper_threshold(var1,var2);
  1638  0D0E  084D               	movf	_var1,w
  1639  0D0F  00E8               	movwf	??_main
  1640  0D10  01E9               	clrf	??_main+1
  1641  0D11  0868               	movf	??_main,w
  1642  0D12  00F3               	movwf	set_upper_threshold@upper_val
  1643  0D13  0869               	movf	??_main+1,w
  1644  0D14  00F4               	movwf	set_upper_threshold@upper_val+1
  1645  0D15  084C               	movf	_var2,w
  1646  0D16  00EA               	movwf	??_main+2
  1647  0D17  01EB               	clrf	??_main+3
  1648  0D18  086A               	movf	??_main+2,w
  1649  0D19  00F5               	movwf	set_upper_threshold@lower_val
  1650  0D1A  086B               	movf	??_main+3,w
  1651  0D1B  00F6               	movwf	set_upper_threshold@lower_val+1
  1652  0D1C  120A  118A  201D  120A  158A  	fcall	_set_upper_threshold
  1653  0D21  00EC               	movwf	??_main+4
  1654  0D22  086C               	movf	??_main+4,w
  1655  0D23  00CB               	movwf	_alarm__
  1656  0D24                     l154:	
  1657                           ;mainLogic.c: 59:     }
  1658                           
  1659                           
  1660                           ;mainLogic.c: 60:     alarm__ = reset_alarm();
  1661  0D24  160A  118A  25DD  120A  158A  	fcall	_reset_alarm
  1662  0D29  00E8               	movwf	??_main
  1663  0D2A  0868               	movf	??_main,w
  1664  0D2B  00CB               	movwf	_alarm__
  1665                           
  1666                           ;mainLogic.c: 61:     set_beep_threshhold(alarm__);
  1667  0D2C  084B               	movf	_alarm__,w
  1668  0D2D  160A  118A  249C  120A  158A  	fcall	_set_beep_threshhold
  1669                           
  1670                           ;mainLogic.c: 62:     write_char(' ');
  1671  0D32  3020               	movlw	32
  1672  0D33  160A  118A  2485  120A  158A  	fcall	_write_char
  1673                           
  1674                           ;mainLogic.c: 63:     write_char('H');
  1675  0D38  3048               	movlw	72
  1676  0D39  160A  118A  2485  120A  158A  	fcall	_write_char
  1677                           
  1678                           ;mainLogic.c: 64:     write_char(':');
  1679  0D3E  303A               	movlw	58
  1680  0D3F  160A  118A  2485  120A  158A  	fcall	_write_char
  1681                           
  1682                           ;mainLogic.c: 65:     write_char(heater_state);
  1683  0D44  084F               	movf	_heater_state,w
  1684  0D45  160A  118A  2485  120A  158A  	fcall	_write_char
  1685                           
  1686                           ;mainLogic.c: 66:     write_char('C');
  1687  0D4A  3043               	movlw	67
  1688  0D4B  160A  118A  2485  120A  158A  	fcall	_write_char
  1689                           
  1690                           ;mainLogic.c: 67:     write_char(':');
  1691  0D50  303A               	movlw	58
  1692  0D51  160A  118A  2485  120A  158A  	fcall	_write_char
  1693                           
  1694                           ;mainLogic.c: 68:     write_char(cooler_state);
  1695  0D56  084E               	movf	_cooler_state,w
  1696  0D57  160A  118A  2485  120A  158A  	fcall	_write_char
  1697                           
  1698                           ;mainLogic.c: 69:     for(int i = 0; i < 3; i++)
  1699  0D5C  01ED               	clrf	main@i
  1700  0D5D  01EE               	clrf	main@i+1
  1701  0D5E                     l4704:	
  1702                           
  1703                           ;mainLogic.c: 70:     write_char(' ');
  1704  0D5E  3020               	movlw	32
  1705  0D5F  160A  118A  2485  120A  158A  	fcall	_write_char
  1706  0D64  3001               	movlw	1
  1707  0D65  07ED               	addwf	main@i,f
  1708  0D66  1803               	skipnc
  1709  0D67  0AEE               	incf	main@i+1,f
  1710  0D68  3000               	movlw	0
  1711  0D69  07EE               	addwf	main@i+1,f
  1712  0D6A  086E               	movf	main@i+1,w
  1713  0D6B  3A80               	xorlw	128
  1714  0D6C  00FF               	movwf	127
  1715  0D6D  3080               	movlw	128
  1716  0D6E  027F               	subwf	127,w
  1717  0D6F  1D03               	skipz
  1718  0D70  2D73               	goto	u3925
  1719  0D71  3003               	movlw	3
  1720  0D72  026D               	subwf	main@i,w
  1721  0D73                     u3925:	
  1722  0D73  1C03               	skipc
  1723  0D74  2D5E               	goto	l4704
  1724                           
  1725                           ;mainLogic.c: 71:     day_counter = modulus_func(day_low,8);
  1726  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  1727  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  1728  0D77  0829               	movf	_day_low+1,w
  1729  0D78  00F8               	movwf	modulus_func@x+1
  1730  0D79  0828               	movf	_day_low,w
  1731  0D7A  00F7               	movwf	modulus_func@x
  1732  0D7B  3008               	movlw	8
  1733  0D7C  00F9               	movwf	modulus_func@y
  1734  0D7D  3000               	movlw	0
  1735  0D7E  00FA               	movwf	modulus_func@y+1
  1736  0D7F  160A  118A  2414  120A  158A  	fcall	_modulus_func
  1737  0D84  0878               	movf	?_modulus_func+1,w
  1738  0D85  00A1               	movwf	_day_counter+1
  1739  0D86  0877               	movf	?_modulus_func,w
  1740  0D87  00A0               	movwf	_day_counter
  1741                           
  1742                           ;mainLogic.c: 72:     display_day(day_counter);
  1743  0D88  0821               	movf	_day_counter+1,w
  1744  0D89  00F4               	movwf	display_day@num+1
  1745  0D8A  0820               	movf	_day_counter,w
  1746  0D8B  00F3               	movwf	display_day@num
  1747  0D8C  160A  118A  2787  120A  158A  	fcall	_display_day
  1748  0D91  2C40               	goto	l4636
  1749  0D92                     __end_of_main:	
  1750                           
  1751                           	psect	text1
  1752  0071                     __ptext1:	
  1753 ;; *************** function _time_settings *****************
  1754 ;; Defined at:
  1755 ;;		line 179 in file "Button_src.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 300/0
  1766 ;;		On exit  : 300/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0
  1771 ;;      Temps:          0       3       0       0       0
  1772 ;;      Totals:         0       3       0       0       0
  1773 ;;Total ram usage:        3 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    3
  1776 ;; This function calls:
  1777 ;;		_button_delay
  1778 ;;		_incrementor
  1779 ;;		_modulus_func
  1780 ;;		_set_time
  1781 ;;		_time_date_delimiter
  1782 ;;		_time_date_hex_terminator
  1783 ;;		_write_char
  1784 ;;		_write_cmd
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _time_settings
  1792  0071                     _time_settings:	
  1793                           
  1794                           ;Button_src.c: 180:  RC0 = 1;
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1798  0071  1407               	bsf	7,0	;volatile
  1799                           
  1800                           ;Button_src.c: 181:  RC1 = 1;
  1801  0072  1487               	bsf	7,1	;volatile
  1802                           
  1803                           ;Button_src.c: 182:  RC2 = 0;
  1804  0073  1107               	bcf	7,2	;volatile
  1805                           
  1806                           ;Button_src.c: 183:  RC3 = 1;
  1807  0074  1587               	bsf	7,3	;volatile
  1808                           
  1809                           ;Button_src.c: 184:   if (RC4 == 0){
  1810  0075  1A07               	btfsc	7,4	;volatile
  1811  0076  0008               	return
  1812                           
  1813                           ;Button_src.c: 185:       write_cmd(0x1);
  1814  0077  3001               	movlw	1
  1815  0078  120A  118A  2006  120A  118A  	fcall	_write_cmd
  1816  007D                     l704:	
  1817                           ;Button_src.c: 186:       for(;;){
  1818                           
  1819                           
  1820                           ;Button_src.c: 187:             write_cmd(0x80);
  1821  007D  3080               	movlw	128
  1822  007E  120A  118A  2006  120A  118A  	fcall	_write_cmd
  1823                           
  1824                           ;Button_src.c: 188:             write_char('T');
  1825  0083  3054               	movlw	84
  1826  0084  160A  118A  2485  120A  118A  	fcall	_write_char
  1827                           
  1828                           ;Button_src.c: 189:             write_char('i');
  1829  0089  3069               	movlw	105
  1830  008A  160A  118A  2485  120A  118A  	fcall	_write_char
  1831                           
  1832                           ;Button_src.c: 190:             write_char('m');
  1833  008F  306D               	movlw	109
  1834  0090  160A  118A  2485  120A  118A  	fcall	_write_char
  1835                           
  1836                           ;Button_src.c: 191:             write_char('e');
  1837  0095  3065               	movlw	101
  1838  0096  160A  118A  2485  120A  118A  	fcall	_write_char
  1839                           
  1840                           ;Button_src.c: 192:             write_char('_');
  1841  009B  305F               	movlw	95
  1842  009C  160A  118A  2485  120A  118A  	fcall	_write_char
  1843                           
  1844                           ;Button_src.c: 193:             write_char('S');
  1845  00A1  3053               	movlw	83
  1846  00A2  160A  118A  2485  120A  118A  	fcall	_write_char
  1847                           
  1848                           ;Button_src.c: 194:             write_char('e');
  1849  00A7  3065               	movlw	101
  1850  00A8  160A  118A  2485  120A  118A  	fcall	_write_char
  1851                           
  1852                           ;Button_src.c: 195:             write_char('t');
  1853  00AD  3074               	movlw	116
  1854  00AE  160A  118A  2485  120A  118A  	fcall	_write_char
  1855                           
  1856                           ;Button_src.c: 196:             write_char('t');
  1857  00B3  3074               	movlw	116
  1858  00B4  160A  118A  2485  120A  118A  	fcall	_write_char
  1859                           
  1860                           ;Button_src.c: 197:             write_char('i');
  1861  00B9  3069               	movlw	105
  1862  00BA  160A  118A  2485  120A  118A  	fcall	_write_char
  1863                           
  1864                           ;Button_src.c: 198:             write_char('n');
  1865  00BF  306E               	movlw	110
  1866  00C0  160A  118A  2485  120A  118A  	fcall	_write_char
  1867                           
  1868                           ;Button_src.c: 199:             write_char('g');
  1869  00C5  3067               	movlw	103
  1870  00C6  160A  118A  2485  120A  118A  	fcall	_write_char
  1871                           
  1872                           ;Button_src.c: 200:             write_char('s');
  1873  00CB  3073               	movlw	115
  1874  00CC  160A  118A  2485  120A  118A  	fcall	_write_char
  1875                           
  1876                           ;Button_src.c: 202:             RC0 = 1;
  1877  00D1  1407               	bsf	7,0	;volatile
  1878                           
  1879                           ;Button_src.c: 203:             RC1 = 0;
  1880  00D2  1087               	bcf	7,1	;volatile
  1881                           
  1882                           ;Button_src.c: 204:             RC2 = 1;
  1883  00D3  1507               	bsf	7,2	;volatile
  1884                           
  1885                           ;Button_src.c: 205:             RC3 = 1;
  1886  00D4  1587               	bsf	7,3	;volatile
  1887                           
  1888                           ;Button_src.c: 207:             if(RC7 == 0 && b =='x'){
  1889  00D5  1B87               	btfsc	7,7	;volatile
  1890  00D6  2948               	goto	l4360
  1891  00D7  3078               	movlw	120
  1892  00D8  0647               	xorwf	_b,w
  1893  00D9  1D03               	btfss	3,2
  1894  00DA  2948               	goto	l4360
  1895                           
  1896                           ;Button_src.c: 208:                 if(stats == 1)
  1897  00DB  0324               	decf	_stats,w
  1898  00DC  0425               	iorwf	_stats+1,w
  1899  00DD  1D03               	btfss	3,2
  1900  00DE  28E3               	goto	l706
  1901                           
  1902                           ;Button_src.c: 209:                    a++;
  1903  00DF  3001               	movlw	1
  1904  00E0  00E3               	movwf	??_time_settings
  1905  00E1  0863               	movf	??_time_settings,w
  1906  00E2  07C8               	addwf	_a,f
  1907  00E3                     l706:	
  1908                           
  1909                           ;Button_src.c: 210:                 if(stats == 0){
  1910  00E3  0824               	movf	_stats,w
  1911  00E4  0425               	iorwf	_stats+1,w
  1912  00E5  1D03               	btfss	3,2
  1913  00E6  28EB               	goto	l707
  1914                           
  1915                           ;Button_src.c: 211:                    stats = 1;
  1916  00E7  3001               	movlw	1
  1917  00E8  00A4               	movwf	_stats
  1918  00E9  3000               	movlw	0
  1919  00EA  00A5               	movwf	_stats+1
  1920  00EB                     l707:	
  1921                           ;Button_src.c: 212:                 }
  1922                           
  1923                           
  1924                           ;Button_src.c: 214:                     x++ ;
  1925  00EB  3001               	movlw	1
  1926  00EC  07AE               	addwf	_x,f
  1927  00ED  1803               	skipnc
  1928  00EE  0AAF               	incf	_x+1,f
  1929  00EF  3000               	movlw	0
  1930  00F0  07AF               	addwf	_x+1,f
  1931                           
  1932                           ;Button_src.c: 215:                     x = modulus_func(x,10);
  1933  00F1  082F               	movf	_x+1,w
  1934  00F2  00F8               	movwf	modulus_func@x+1
  1935  00F3  082E               	movf	_x,w
  1936  00F4  00F7               	movwf	modulus_func@x
  1937  00F5  300A               	movlw	10
  1938  00F6  00F9               	movwf	modulus_func@y
  1939  00F7  3000               	movlw	0
  1940  00F8  00FA               	movwf	modulus_func@y+1
  1941  00F9  160A  118A  2414  120A  118A  	fcall	_modulus_func
  1942  00FE  0878               	movf	?_modulus_func+1,w
  1943  00FF  00AF               	movwf	_x+1
  1944  0100  0877               	movf	?_modulus_func,w
  1945  0101  00AE               	movwf	_x
  1946                           
  1947                           ;Button_src.c: 216:                     if (p == 1){
  1948  0102  0322               	decf	_p,w
  1949  0103  0423               	iorwf	_p+1,w
  1950  0104  1D03               	btfss	3,2
  1951  0105  291F               	goto	l4346
  1952                           
  1953                           ;Button_src.c: 217:                         y = incrementor(y,x,'0');
  1954  0106  082D               	movf	_y+1,w
  1955  0107  00DF               	movwf	incrementor@upper_val+1
  1956  0108  082C               	movf	_y,w
  1957  0109  00DE               	movwf	incrementor@upper_val
  1958  010A  082F               	movf	_x+1,w
  1959  010B  00E1               	movwf	incrementor@lower_val+1
  1960  010C  082E               	movf	_x,w
  1961  010D  00E0               	movwf	incrementor@lower_val
  1962  010E  3030               	movlw	48
  1963  010F  00E3               	movwf	??_time_settings
  1964  0110  0863               	movf	??_time_settings,w
  1965  0111  00E2               	movwf	incrementor@z
  1966  0112  160A  118A  2541  120A  118A  	fcall	_incrementor
  1967  0117  00E4               	movwf	??_time_settings+1
  1968  0118  01E5               	clrf	??_time_settings+2
  1969  0119  0864               	movf	??_time_settings+1,w
  1970  011A  00AC               	movwf	_y
  1971  011B  0865               	movf	??_time_settings+2,w
  1972  011C  00AD               	movwf	_y+1
  1973                           
  1974                           ;Button_src.c: 218:                         p = 0;
  1975  011D  01A2               	clrf	_p
  1976  011E  01A3               	clrf	_p+1
  1977  011F                     l4346:	
  1978                           
  1979                           ;Button_src.c: 220:                     if (x == 9){
  1980  011F  3009               	movlw	9
  1981  0120  062E               	xorwf	_x,w
  1982  0121  042F               	iorwf	_x+1,w
  1983  0122  1D03               	btfss	3,2
  1984  0123  2928               	goto	l4350
  1985                           
  1986                           ;Button_src.c: 221:                         p = 1;
  1987  0124  3001               	movlw	1
  1988  0125  00A2               	movwf	_p
  1989  0126  3000               	movlw	0
  1990  0127  00A3               	movwf	_p+1
  1991  0128                     l4350:	
  1992                           
  1993                           ;Button_src.c: 225:                     a = time_date_hex_terminator(a,'T');
  1994  0128  3054               	movlw	84
  1995  0129  00E3               	movwf	??_time_settings
  1996  012A  0863               	movf	??_time_settings,w
  1997  012B  00F0               	movwf	time_date_hex_terminator@limiter
  1998  012C  0848               	movf	_a,w
  1999  012D  160A  118A  23F6  120A  118A  	fcall	_time_date_hex_terminator
  2000  0132  00E4               	movwf	??_time_settings+1
  2001  0133  0864               	movf	??_time_settings+1,w
  2002  0134  00C8               	movwf	_a
  2003                           
  2004                           ;Button_src.c: 226:                     if(y == 2 && x == 4){
  2005  0135  3002               	movlw	2
  2006  0136  062C               	xorwf	_y,w
  2007  0137  042D               	iorwf	_y+1,w
  2008  0138  1D03               	btfss	3,2
  2009  0139  2943               	goto	l4358
  2010  013A  3004               	movlw	4
  2011  013B  062E               	xorwf	_x,w
  2012  013C  042F               	iorwf	_x+1,w
  2013  013D  1D03               	btfss	3,2
  2014  013E  2943               	goto	l4358
  2015                           
  2016                           ;Button_src.c: 227:                         x = 0;
  2017  013F  01AE               	clrf	_x
  2018  0140  01AF               	clrf	_x+1
  2019                           
  2020                           ;Button_src.c: 228:                         y = 0;
  2021  0141  01AC               	clrf	_y
  2022  0142  01AD               	clrf	_y+1
  2023  0143                     l4358:	
  2024                           
  2025                           ;Button_src.c: 230:                     button_delay();
  2026  0143  160A  118A  2435  120A  118A  	fcall	_button_delay
  2027  0148                     l4360:	
  2028                           
  2029                           ;Button_src.c: 232:             if(RC7==0 && b == 'y'){
  2030  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2032  014A  1B87               	btfsc	7,7	;volatile
  2033  014B  29C6               	goto	l4394
  2034  014C  3079               	movlw	121
  2035  014D  0647               	xorwf	_b,w
  2036  014E  1D03               	btfss	3,2
  2037  014F  29C6               	goto	l4394
  2038                           
  2039                           ;Button_src.c: 233:                  if(stats == 1)
  2040  0150  0324               	decf	_stats,w
  2041  0151  0425               	iorwf	_stats+1,w
  2042  0152  1D03               	btfss	3,2
  2043  0153  2958               	goto	l712
  2044                           
  2045                           ;Button_src.c: 234:                    c++;
  2046  0154  3001               	movlw	1
  2047  0155  00E3               	movwf	??_time_settings
  2048  0156  0863               	movf	??_time_settings,w
  2049  0157  07C6               	addwf	_c,f
  2050  0158                     l712:	
  2051                           
  2052                           ;Button_src.c: 235:                 if(stats == 0){
  2053  0158  0824               	movf	_stats,w
  2054  0159  0425               	iorwf	_stats+1,w
  2055  015A  1D03               	btfss	3,2
  2056  015B  2960               	goto	l713
  2057                           
  2058                           ;Button_src.c: 236:                     stats = 1;
  2059  015C  3001               	movlw	1
  2060  015D  00A4               	movwf	_stats
  2061  015E  3000               	movlw	0
  2062  015F  00A5               	movwf	_stats+1
  2063  0160                     l713:	
  2064                           ;Button_src.c: 237:                 }
  2065                           
  2066                           
  2067                           ;Button_src.c: 239:                     t++;
  2068  0160  3001               	movlw	1
  2069  0161  07B2               	addwf	_t,f
  2070  0162  1803               	skipnc
  2071  0163  0AB3               	incf	_t+1,f
  2072  0164  3000               	movlw	0
  2073  0165  07B3               	addwf	_t+1,f
  2074                           
  2075                           ;Button_src.c: 240:                     t = modulus_func(t,10);
  2076  0166  0833               	movf	_t+1,w
  2077  0167  00F8               	movwf	modulus_func@x+1
  2078  0168  0832               	movf	_t,w
  2079  0169  00F7               	movwf	modulus_func@x
  2080  016A  300A               	movlw	10
  2081  016B  00F9               	movwf	modulus_func@y
  2082  016C  3000               	movlw	0
  2083  016D  00FA               	movwf	modulus_func@y+1
  2084  016E  160A  118A  2414  120A  118A  	fcall	_modulus_func
  2085  0173  0878               	movf	?_modulus_func+1,w
  2086  0174  00B3               	movwf	_t+1
  2087  0175  0877               	movf	?_modulus_func,w
  2088  0176  00B2               	movwf	_t
  2089                           
  2090                           ;Button_src.c: 241:                       if (p == 1){
  2091  0177  0322               	decf	_p,w
  2092  0178  0423               	iorwf	_p+1,w
  2093  0179  1D03               	btfss	3,2
  2094  017A  2994               	goto	l4378
  2095                           
  2096                           ;Button_src.c: 242:                         w = incrementor(w,t,'0');
  2097  017B  0831               	movf	_w+1,w
  2098  017C  00DF               	movwf	incrementor@upper_val+1
  2099  017D  0830               	movf	_w,w
  2100  017E  00DE               	movwf	incrementor@upper_val
  2101  017F  0833               	movf	_t+1,w
  2102  0180  00E1               	movwf	incrementor@lower_val+1
  2103  0181  0832               	movf	_t,w
  2104  0182  00E0               	movwf	incrementor@lower_val
  2105  0183  3030               	movlw	48
  2106  0184  00E3               	movwf	??_time_settings
  2107  0185  0863               	movf	??_time_settings,w
  2108  0186  00E2               	movwf	incrementor@z
  2109  0187  160A  118A  2541  120A  118A  	fcall	_incrementor
  2110  018C  00E4               	movwf	??_time_settings+1
  2111  018D  01E5               	clrf	??_time_settings+2
  2112  018E  0864               	movf	??_time_settings+1,w
  2113  018F  00B0               	movwf	_w
  2114  0190  0865               	movf	??_time_settings+2,w
  2115  0191  00B1               	movwf	_w+1
  2116                           
  2117                           ;Button_src.c: 243:                         p = 0;
  2118  0192  01A2               	clrf	_p
  2119  0193  01A3               	clrf	_p+1
  2120  0194                     l4378:	
  2121                           
  2122                           ;Button_src.c: 245:                     if (t == 9){
  2123  0194  3009               	movlw	9
  2124  0195  0632               	xorwf	_t,w
  2125  0196  0433               	iorwf	_t+1,w
  2126  0197  1D03               	btfss	3,2
  2127  0198  299D               	goto	l4382
  2128                           
  2129                           ;Button_src.c: 246:                         p = 1;
  2130  0199  3001               	movlw	1
  2131  019A  00A2               	movwf	_p
  2132  019B  3000               	movlw	0
  2133  019C  00A3               	movwf	_p+1
  2134  019D                     l4382:	
  2135                           
  2136                           ;Button_src.c: 248:                     w = incrementor(w,t,'9');
  2137  019D  0831               	movf	_w+1,w
  2138  019E  00DF               	movwf	incrementor@upper_val+1
  2139  019F  0830               	movf	_w,w
  2140  01A0  00DE               	movwf	incrementor@upper_val
  2141  01A1  0833               	movf	_t+1,w
  2142  01A2  00E1               	movwf	incrementor@lower_val+1
  2143  01A3  0832               	movf	_t,w
  2144  01A4  00E0               	movwf	incrementor@lower_val
  2145  01A5  3039               	movlw	57
  2146  01A6  00E3               	movwf	??_time_settings
  2147  01A7  0863               	movf	??_time_settings,w
  2148  01A8  00E2               	movwf	incrementor@z
  2149  01A9  160A  118A  2541  120A  118A  	fcall	_incrementor
  2150  01AE  00E4               	movwf	??_time_settings+1
  2151  01AF  01E5               	clrf	??_time_settings+2
  2152  01B0  0864               	movf	??_time_settings+1,w
  2153  01B1  00B0               	movwf	_w
  2154  01B2  0865               	movf	??_time_settings+2,w
  2155  01B3  00B1               	movwf	_w+1
  2156                           
  2157                           ;Button_src.c: 249:                     if(c == (0x59 + 1)){
  2158  01B4  305A               	movlw	90
  2159  01B5  0646               	xorwf	_c,w
  2160  01B6  1903               	btfsc	3,2
  2161                           
  2162                           ;Button_src.c: 250:                         c = 0x00;
  2163  01B7  01C6               	clrf	_c
  2164                           
  2165                           ;Button_src.c: 252:                     if(w == 6){
  2166  01B8  3006               	movlw	6
  2167  01B9  0630               	xorwf	_w,w
  2168  01BA  0431               	iorwf	_w+1,w
  2169  01BB  1D03               	btfss	3,2
  2170  01BC  29C1               	goto	l4392
  2171                           
  2172                           ;Button_src.c: 253:                         w = 0;
  2173  01BD  01B0               	clrf	_w
  2174  01BE  01B1               	clrf	_w+1
  2175                           
  2176                           ;Button_src.c: 254:                         t = 0;
  2177  01BF  01B2               	clrf	_t
  2178  01C0  01B3               	clrf	_t+1
  2179  01C1                     l4392:	
  2180                           
  2181                           ;Button_src.c: 256:                     button_delay();
  2182  01C1  160A  118A  2435  120A  118A  	fcall	_button_delay
  2183  01C6                     l4394:	
  2184                           
  2185                           ;Button_src.c: 259:              write_cmd(0x88);
  2186  01C6  3088               	movlw	136
  2187  01C7  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2188                           
  2189                           ;Button_src.c: 260:               if(stats==0){
  2190  01CC  0824               	movf	_stats,w
  2191  01CD  0425               	iorwf	_stats+1,w
  2192  01CE  1D03               	btfss	3,2
  2193  01CF  29D8               	goto	l4400
  2194                           
  2195                           ;Button_src.c: 261:                   table[2] = prev_hex_hours;
  2196  01D0  0840               	movf	_prev_hex_hours,w
  2197  01D1  00E3               	movwf	??_time_settings
  2198  01D2  0863               	movf	??_time_settings,w
  2199  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2200  01D4  00AF               	movwf	(_table^(0+128)+2)
  2201                           
  2202                           ;Button_src.c: 262:                   table[1] = prev_hex_mins;
  2203  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2204  01D6  083F               	movf	_prev_hex_mins,w
  2205  01D7  29E3               	goto	L1
  2206  01D8                     l4400:	
  2207                           ;Button_src.c: 263:               }
  2208                           
  2209  01D8  0324               	decf	_stats,w
  2210  01D9  0425               	iorwf	_stats+1,w
  2211  01DA  1D03               	btfss	3,2
  2212  01DB  29E7               	goto	l4404
  2213                           
  2214                           ;Button_src.c: 265:               {;Button_src.c: 266:                  table[2]= a;
  2215  01DC  0848               	movf	_a,w
  2216  01DD  00E3               	movwf	??_time_settings
  2217  01DE  0863               	movf	??_time_settings,w
  2218  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2219  01E0  00AF               	movwf	(_table^(0+128)+2)
  2220                           
  2221                           ;Button_src.c: 267:                  table[1] = c;
  2222  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2223  01E2  0846               	movf	_c,w
  2224  01E3                     L1:	
  2225  01E3  00E3               	movwf	??_time_settings
  2226  01E4  0863               	movf	??_time_settings,w
  2227  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2228  01E6  00AE               	movwf	(_table^(0+128)+1)
  2229  01E7                     l4404:	
  2230                           
  2231                           ;Button_src.c: 271:                     a = time_date_delimiter(a,0x11,'9',4);
  2232  01E7  3011               	movlw	17
  2233  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2234  01E9  00E3               	movwf	??_time_settings
  2235  01EA  0863               	movf	??_time_settings,w
  2236  01EB  00F0               	movwf	time_date_delimiter@hex
  2237  01EC  3039               	movlw	57
  2238  01ED  00E4               	movwf	??_time_settings+1
  2239  01EE  0864               	movf	??_time_settings+1,w
  2240  01EF  00F1               	movwf	time_date_delimiter@limiter
  2241  01F0  3004               	movlw	4
  2242  01F1  00F2               	movwf	time_date_delimiter@type
  2243  01F2  3000               	movlw	0
  2244  01F3  00F3               	movwf	time_date_delimiter@type+1
  2245  01F4  0848               	movf	_a,w
  2246  01F5  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2247  01FA  00E5               	movwf	??_time_settings+2
  2248  01FB  0865               	movf	??_time_settings+2,w
  2249  01FC  00C8               	movwf	_a
  2250                           
  2251                           ;Button_src.c: 272:                     a = time_date_delimiter(a,0x21,'J',4);
  2252  01FD  3021               	movlw	33
  2253  01FE  00E3               	movwf	??_time_settings
  2254  01FF  0863               	movf	??_time_settings,w
  2255  0200  00F0               	movwf	time_date_delimiter@hex
  2256  0201  304A               	movlw	74
  2257  0202  00E4               	movwf	??_time_settings+1
  2258  0203  0864               	movf	??_time_settings+1,w
  2259  0204  00F1               	movwf	time_date_delimiter@limiter
  2260  0205  3004               	movlw	4
  2261  0206  00F2               	movwf	time_date_delimiter@type
  2262  0207  3000               	movlw	0
  2263  0208  00F3               	movwf	time_date_delimiter@type+1
  2264  0209  0848               	movf	_a,w
  2265  020A  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2266  020F  00E5               	movwf	??_time_settings+2
  2267  0210  0865               	movf	??_time_settings+2,w
  2268  0211  00C8               	movwf	_a
  2269                           
  2270                           ;Button_src.c: 274:                     c = time_date_delimiter(c,0x11,'9',5);
  2271  0212  3011               	movlw	17
  2272  0213  00E3               	movwf	??_time_settings
  2273  0214  0863               	movf	??_time_settings,w
  2274  0215  00F0               	movwf	time_date_delimiter@hex
  2275  0216  3039               	movlw	57
  2276  0217  00E4               	movwf	??_time_settings+1
  2277  0218  0864               	movf	??_time_settings+1,w
  2278  0219  00F1               	movwf	time_date_delimiter@limiter
  2279  021A  3005               	movlw	5
  2280  021B  00F2               	movwf	time_date_delimiter@type
  2281  021C  3000               	movlw	0
  2282  021D  00F3               	movwf	time_date_delimiter@type+1
  2283  021E  0846               	movf	_c,w
  2284  021F  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2285  0224  00E5               	movwf	??_time_settings+2
  2286  0225  0865               	movf	??_time_settings+2,w
  2287  0226  00C6               	movwf	_c
  2288                           
  2289                           ;Button_src.c: 275:                     c = time_date_delimiter(c,0x21,'J',5);
  2290  0227  3021               	movlw	33
  2291  0228  00E3               	movwf	??_time_settings
  2292  0229  0863               	movf	??_time_settings,w
  2293  022A  00F0               	movwf	time_date_delimiter@hex
  2294  022B  304A               	movlw	74
  2295  022C  00E4               	movwf	??_time_settings+1
  2296  022D  0864               	movf	??_time_settings+1,w
  2297  022E  00F1               	movwf	time_date_delimiter@limiter
  2298  022F  3005               	movlw	5
  2299  0230  00F2               	movwf	time_date_delimiter@type
  2300  0231  3000               	movlw	0
  2301  0232  00F3               	movwf	time_date_delimiter@type+1
  2302  0233  0846               	movf	_c,w
  2303  0234  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2304  0239  00E5               	movwf	??_time_settings+2
  2305  023A  0865               	movf	??_time_settings+2,w
  2306  023B  00C6               	movwf	_c
  2307                           
  2308                           ;Button_src.c: 276:                     c = time_date_delimiter(c,0x31,'Y',5);
  2309  023C  3031               	movlw	49
  2310  023D  00E3               	movwf	??_time_settings
  2311  023E  0863               	movf	??_time_settings,w
  2312  023F  00F0               	movwf	time_date_delimiter@hex
  2313  0240  3059               	movlw	89
  2314  0241  00E4               	movwf	??_time_settings+1
  2315  0242  0864               	movf	??_time_settings+1,w
  2316  0243  00F1               	movwf	time_date_delimiter@limiter
  2317  0244  3005               	movlw	5
  2318  0245  00F2               	movwf	time_date_delimiter@type
  2319  0246  3000               	movlw	0
  2320  0247  00F3               	movwf	time_date_delimiter@type+1
  2321  0248  0846               	movf	_c,w
  2322  0249  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2323  024E  00E5               	movwf	??_time_settings+2
  2324  024F  0865               	movf	??_time_settings+2,w
  2325  0250  00C6               	movwf	_c
  2326                           
  2327                           ;Button_src.c: 277:                     c = time_date_delimiter(c,0x41,'j',5);
  2328  0251  3041               	movlw	65
  2329  0252  00E3               	movwf	??_time_settings
  2330  0253  0863               	movf	??_time_settings,w
  2331  0254  00F0               	movwf	time_date_delimiter@hex
  2332  0255  306A               	movlw	106
  2333  0256  00E4               	movwf	??_time_settings+1
  2334  0257  0864               	movf	??_time_settings+1,w
  2335  0258  00F1               	movwf	time_date_delimiter@limiter
  2336  0259  3005               	movlw	5
  2337  025A  00F2               	movwf	time_date_delimiter@type
  2338  025B  3000               	movlw	0
  2339  025C  00F3               	movwf	time_date_delimiter@type+1
  2340  025D  0846               	movf	_c,w
  2341  025E  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2342  0263  00E5               	movwf	??_time_settings+2
  2343  0264  0865               	movf	??_time_settings+2,w
  2344  0265  00C6               	movwf	_c
  2345                           
  2346                           ;Button_src.c: 278:                     c = time_date_delimiter(c,0x51,'z',5);
  2347  0266  3051               	movlw	81
  2348  0267  00E3               	movwf	??_time_settings
  2349  0268  0863               	movf	??_time_settings,w
  2350  0269  00F0               	movwf	time_date_delimiter@hex
  2351  026A  307A               	movlw	122
  2352  026B  00E4               	movwf	??_time_settings+1
  2353  026C  0864               	movf	??_time_settings+1,w
  2354  026D  00F1               	movwf	time_date_delimiter@limiter
  2355  026E  3005               	movlw	5
  2356  026F  00F2               	movwf	time_date_delimiter@type
  2357  0270  3000               	movlw	0
  2358  0271  00F3               	movwf	time_date_delimiter@type+1
  2359  0272  0846               	movf	_c,w
  2360  0273  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2361  0278  00E5               	movwf	??_time_settings+2
  2362  0279  0865               	movf	??_time_settings+2,w
  2363  027A  00C6               	movwf	_c
  2364                           
  2365                           ;Button_src.c: 280:                   RC0 = 0;
  2366  027B  1007               	bcf	7,0	;volatile
  2367                           
  2368                           ;Button_src.c: 281:                   RC1 = 1;
  2369  027C  1487               	bsf	7,1	;volatile
  2370                           
  2371                           ;Button_src.c: 282:                   RC2 = 1;
  2372  027D  1507               	bsf	7,2	;volatile
  2373                           
  2374                           ;Button_src.c: 283:                   RC3 = 1;
  2375  027E  1587               	bsf	7,3	;volatile
  2376                           
  2377                           ;Button_src.c: 284:                     if (RC6 == 0 ){
  2378  027F  1B07               	btfsc	7,6	;volatile
  2379  0280  2A95               	goto	l721
  2380                           
  2381                           ;Button_src.c: 285:                           write_cmd(0x1);
  2382  0281  3001               	movlw	1
  2383  0282  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2384                           
  2385                           ;Button_src.c: 286:                           a = 0x00;
  2386  0287  01C8               	clrf	_a
  2387                           
  2388                           ;Button_src.c: 287:                           c = 0x00;
  2389  0288  01C6               	clrf	_c
  2390                           
  2391                           ;Button_src.c: 288:                           x = 0;
  2392  0289  01AE               	clrf	_x
  2393  028A  01AF               	clrf	_x+1
  2394                           
  2395                           ;Button_src.c: 289:                           y = 0;
  2396  028B  01AC               	clrf	_y
  2397  028C  01AD               	clrf	_y+1
  2398                           
  2399                           ;Button_src.c: 290:                           w = 0;
  2400  028D  01B0               	clrf	_w
  2401  028E  01B1               	clrf	_w+1
  2402                           
  2403                           ;Button_src.c: 291:                           t = 0;
  2404  028F  01B2               	clrf	_t
  2405  0290  01B3               	clrf	_t+1
  2406                           
  2407                           ;Button_src.c: 292:                           set_time();
  2408  0291  160A  118A  2589   	fcall	_set_time
  2409  0294  0008               	return
  2410  0295                     l721:	
  2411                           ;Button_src.c: 294:                             }
  2412                           
  2413                           
  2414                           ;Button_src.c: 295:                   RC0 = 1;
  2415  0295  1407               	bsf	7,0	;volatile
  2416                           
  2417                           ;Button_src.c: 296:                   RC1 = 1;
  2418  0296  1487               	bsf	7,1	;volatile
  2419                           
  2420                           ;Button_src.c: 297:                   RC2 = 0;
  2421  0297  1107               	bcf	7,2	;volatile
  2422                           
  2423                           ;Button_src.c: 298:                   RC3 = 1;
  2424  0298  1587               	bsf	7,3	;volatile
  2425                           
  2426                           ;Button_src.c: 299:                   z = modulus_func(z,2);
  2427  0299  082B               	movf	_z+1,w
  2428  029A  00F8               	movwf	modulus_func@x+1
  2429  029B  082A               	movf	_z,w
  2430  029C  00F7               	movwf	modulus_func@x
  2431  029D  3002               	movlw	2
  2432  029E  00F9               	movwf	modulus_func@y
  2433  029F  3000               	movlw	0
  2434  02A0  00FA               	movwf	modulus_func@y+1
  2435  02A1  160A  118A  2414  120A  118A  	fcall	_modulus_func
  2436  02A6  0878               	movf	?_modulus_func+1,w
  2437  02A7  00AB               	movwf	_z+1
  2438  02A8  0877               	movf	?_modulus_func,w
  2439  02A9  00AA               	movwf	_z
  2440                           
  2441                           ;Button_src.c: 300:                   if(RC4 == 0 && z ==0){
  2442  02AA  1A07               	btfsc	7,4	;volatile
  2443  02AB  2AE5               	goto	l4458
  2444  02AC  082A               	movf	_z,w
  2445  02AD  042B               	iorwf	_z+1,w
  2446  02AE  1D03               	btfss	3,2
  2447  02AF  2AE5               	goto	l4458
  2448                           
  2449                           ;Button_src.c: 301:                       write_cmd(0x90);
  2450  02B0  3090               	movlw	144
  2451  02B1  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2452                           
  2453                           ;Button_src.c: 302:                       write_char('H');
  2454  02B6  3048               	movlw	72
  2455  02B7  160A  118A  2485  120A  118A  	fcall	_write_char
  2456                           
  2457                           ;Button_src.c: 303:                       write_char('o');
  2458  02BC  306F               	movlw	111
  2459  02BD  160A  118A  2485  120A  118A  	fcall	_write_char
  2460                           
  2461                           ;Button_src.c: 304:                       write_char('u');
  2462  02C2  3075               	movlw	117
  2463  02C3  160A  118A  2485  120A  118A  	fcall	_write_char
  2464                           
  2465                           ;Button_src.c: 305:                       write_char('r');
  2466  02C8  3072               	movlw	114
  2467  02C9  160A  118A  2485  120A  118A  	fcall	_write_char
  2468                           
  2469                           ;Button_src.c: 306:                       write_char(':');
  2470  02CE  303A               	movlw	58
  2471  02CF  160A  118A  2485  120A  118A  	fcall	_write_char
  2472                           
  2473                           ;Button_src.c: 307:                       b = 'x';
  2474  02D4  3078               	movlw	120
  2475  02D5  00E3               	movwf	??_time_settings
  2476  02D6  0863               	movf	??_time_settings,w
  2477  02D7  00C7               	movwf	_b
  2478                           
  2479                           ;Button_src.c: 308:                       button_delay();
  2480  02D8  160A  118A  2435  120A  118A  	fcall	_button_delay
  2481                           
  2482                           ;Button_src.c: 309:                       z++;
  2483  02DD  3001               	movlw	1
  2484  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2485  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2486  02E0  07AA               	addwf	_z,f
  2487  02E1  1803               	skipnc
  2488  02E2  0AAB               	incf	_z+1,f
  2489  02E3  3000               	movlw	0
  2490  02E4  07AB               	addwf	_z+1,f
  2491  02E5                     l4458:	
  2492                           
  2493                           ;Button_src.c: 311:                   RC0 = 1;
  2494  02E5  1407               	bsf	7,0	;volatile
  2495                           
  2496                           ;Button_src.c: 312:                   RC1 = 1;
  2497  02E6  1487               	bsf	7,1	;volatile
  2498                           
  2499                           ;Button_src.c: 313:                   RC2 = 0;
  2500  02E7  1107               	bcf	7,2	;volatile
  2501                           
  2502                           ;Button_src.c: 314:                   RC3 = 1;
  2503  02E8  1587               	bsf	7,3	;volatile
  2504                           
  2505                           ;Button_src.c: 316:                   if(RC4 == 0&& z ==1){
  2506  02E9  1A07               	btfsc	7,4	;volatile
  2507  02EA  2B22               	goto	l724
  2508  02EB  032A               	decf	_z,w
  2509  02EC  042B               	iorwf	_z+1,w
  2510  02ED  1D03               	btfss	3,2
  2511  02EE  2B22               	goto	l724
  2512                           
  2513                           ;Button_src.c: 317:                     z++;
  2514  02EF  3001               	movlw	1
  2515  02F0  07AA               	addwf	_z,f
  2516  02F1  1803               	skipnc
  2517  02F2  0AAB               	incf	_z+1,f
  2518  02F3  3000               	movlw	0
  2519  02F4  07AB               	addwf	_z+1,f
  2520                           
  2521                           ;Button_src.c: 318:                     button_delay();
  2522  02F5  160A  118A  2435  120A  118A  	fcall	_button_delay
  2523                           
  2524                           ;Button_src.c: 319:                     write_cmd(0x90);
  2525  02FA  3090               	movlw	144
  2526  02FB  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2527                           
  2528                           ;Button_src.c: 320:                     write_char('M');
  2529  0300  304D               	movlw	77
  2530  0301  160A  118A  2485  120A  118A  	fcall	_write_char
  2531                           
  2532                           ;Button_src.c: 321:                     write_char('i');
  2533  0306  3069               	movlw	105
  2534  0307  160A  118A  2485  120A  118A  	fcall	_write_char
  2535                           
  2536                           ;Button_src.c: 322:                     write_char('n');
  2537  030C  306E               	movlw	110
  2538  030D  160A  118A  2485  120A  118A  	fcall	_write_char
  2539                           
  2540                           ;Button_src.c: 323:                     write_char('s');
  2541  0312  3073               	movlw	115
  2542  0313  160A  118A  2485  120A  118A  	fcall	_write_char
  2543                           
  2544                           ;Button_src.c: 324:                     write_char(':');
  2545  0318  303A               	movlw	58
  2546  0319  160A  118A  2485  120A  118A  	fcall	_write_char
  2547                           
  2548                           ;Button_src.c: 325:                     b = 'y';
  2549  031E  3079               	movlw	121
  2550  031F  00E3               	movwf	??_time_settings
  2551  0320  0863               	movf	??_time_settings,w
  2552  0321  00C7               	movwf	_b
  2553  0322                     l724:	
  2554                           ;Button_src.c: 326:                   }
  2555                           
  2556                           
  2557                           ;Button_src.c: 327:                    write_cmd(0x88);
  2558  0322  3088               	movlw	136
  2559  0323  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2560                           
  2561                           ;Button_src.c: 331:                   RC0 = 1;
  2562  0328  1407               	bsf	7,0	;volatile
  2563                           
  2564                           ;Button_src.c: 332:                   RC1 = 1;
  2565  0329  1487               	bsf	7,1	;volatile
  2566                           
  2567                           ;Button_src.c: 333:                   RC2 = 0;
  2568  032A  1107               	bcf	7,2	;volatile
  2569                           
  2570                           ;Button_src.c: 334:                   RC3 = 1;
  2571  032B  1587               	bsf	7,3	;volatile
  2572                           
  2573                           ;Button_src.c: 336:              write_cmd(0x88);
  2574  032C  3088               	movlw	136
  2575  032D  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2576                           
  2577                           ;Button_src.c: 337:              write_char('T');
  2578  0332  3054               	movlw	84
  2579  0333  160A  118A  2485  120A  118A  	fcall	_write_char
  2580                           
  2581                           ;Button_src.c: 338:              write_char('i');
  2582  0338  3069               	movlw	105
  2583  0339  160A  118A  2485  120A  118A  	fcall	_write_char
  2584                           
  2585                           ;Button_src.c: 339:              write_char('m');
  2586  033E  306D               	movlw	109
  2587  033F  160A  118A  2485  120A  118A  	fcall	_write_char
  2588                           
  2589                           ;Button_src.c: 340:              write_char('e');
  2590  0344  3065               	movlw	101
  2591  0345  160A  118A  2485  120A  118A  	fcall	_write_char
  2592                           
  2593                           ;Button_src.c: 341:              write_char(':');
  2594  034A  303A               	movlw	58
  2595  034B  160A  118A  2485  120A  118A  	fcall	_write_char
  2596                           
  2597                           ;Button_src.c: 342:              write_char(y + '0');
  2598  0350  082C               	movf	_y,w
  2599  0351  3E30               	addlw	48
  2600  0352  160A  118A  2485  120A  118A  	fcall	_write_char
  2601                           
  2602                           ;Button_src.c: 343:              write_char(x + '0');
  2603  0357  082E               	movf	_x,w
  2604  0358  3E30               	addlw	48
  2605  0359  160A  118A  2485  120A  118A  	fcall	_write_char
  2606                           
  2607                           ;Button_src.c: 344:              write_char(':');
  2608  035E  303A               	movlw	58
  2609  035F  160A  118A  2485  120A  118A  	fcall	_write_char
  2610                           
  2611                           ;Button_src.c: 345:              write_char(w + '0');
  2612  0364  0830               	movf	_w,w
  2613  0365  3E30               	addlw	48
  2614  0366  160A  118A  2485  120A  118A  	fcall	_write_char
  2615                           
  2616                           ;Button_src.c: 346:              write_char(t + '0');
  2617  036B  0832               	movf	_t,w
  2618  036C  3E30               	addlw	48
  2619  036D  160A  118A  2485  120A  118A  	fcall	_write_char
  2620                           
  2621                           ;Button_src.c: 348:             RC0 = 0;
  2622  0372  1007               	bcf	7,0	;volatile
  2623                           
  2624                           ;Button_src.c: 349:             RC1 = 1;
  2625  0373  1487               	bsf	7,1	;volatile
  2626                           
  2627                           ;Button_src.c: 350:             RC2 = 1;
  2628  0374  1507               	bsf	7,2	;volatile
  2629                           
  2630                           ;Button_src.c: 351:             RC3 = 1;
  2631  0375  1587               	bsf	7,3	;volatile
  2632                           
  2633                           ;Button_src.c: 352:             if (RC7 == 0 ){
  2634  0376  1B87               	btfsc	7,7	;volatile
  2635  0377  287D               	goto	l704
  2636                           
  2637                           ;Button_src.c: 353:             a = 0x00;
  2638  0378  01C8               	clrf	_a
  2639                           
  2640                           ;Button_src.c: 354:             c = 0x00;
  2641  0379  01C6               	clrf	_c
  2642                           
  2643                           ;Button_src.c: 355:             x = 0;
  2644  037A  01AE               	clrf	_x
  2645  037B  01AF               	clrf	_x+1
  2646                           
  2647                           ;Button_src.c: 356:             y = 0;
  2648  037C  01AC               	clrf	_y
  2649  037D  01AD               	clrf	_y+1
  2650                           
  2651                           ;Button_src.c: 357:             w = 0;
  2652  037E  01B0               	clrf	_w
  2653  037F  01B1               	clrf	_w+1
  2654                           
  2655                           ;Button_src.c: 358:             t = 0;
  2656  0380  01B2               	clrf	_t
  2657  0381  01B3               	clrf	_t+1
  2658                           
  2659                           ;Button_src.c: 359:             write_cmd(0x1);
  2660  0382  3001               	movlw	1
  2661  0383  120A  118A  2006   	fcall	_write_cmd
  2662                           
  2663                           ;Button_src.c: 360:             break;
  2664  0386  0008               	return
  2665  0387                     __end_of_time_settings:	
  2666                           
  2667                           	psect	text2
  2668  0D92                     __ptext2:	
  2669 ;; *************** function _thermometer_threshhold_settings *****************
  2670 ;; Defined at:
  2671 ;;		line 23 in file "Button_src.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;		None
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  i               2    8[BANK0 ] int 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 300/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2685 ;;      Params:         0       0       0       0       0
  2686 ;;      Locals:         0       2       0       0       0
  2687 ;;      Temps:          0       3       0       0       0
  2688 ;;      Totals:         0       5       0       0       0
  2689 ;;Total ram usage:        5 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    3
  2692 ;; This function calls:
  2693 ;;		_button_delay
  2694 ;;		_decrementor
  2695 ;;		_incrementor
  2696 ;;		_modulus_func
  2697 ;;		_write_char
  2698 ;;		_write_cmd
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _thermometer_threshhold_settings
  2706  0D92                     _thermometer_threshhold_settings:	
  2707                           
  2708                           ;Button_src.c: 24:  RC0 = 1;
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2712  0D92  1407               	bsf	7,0	;volatile
  2713                           
  2714                           ;Button_src.c: 25:  RC1 = 0;
  2715  0D93  1087               	bcf	7,1	;volatile
  2716                           
  2717                           ;Button_src.c: 26:  RC2 = 1;
  2718  0D94  1507               	bsf	7,2	;volatile
  2719                           
  2720                           ;Button_src.c: 27:  RC3 = 1;
  2721  0D95  1587               	bsf	7,3	;volatile
  2722                           
  2723                           ;Button_src.c: 28:   if (RC4 == 0){
  2724  0D96  1A07               	btfsc	7,4	;volatile
  2725  0D97  0008               	return
  2726                           
  2727                           ;Button_src.c: 29:       write_cmd(0x1);
  2728  0D98  3001               	movlw	1
  2729  0D99  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2730                           
  2731                           ;Button_src.c: 31:             write_cmd(0x80);
  2732                           
  2733                           ;Button_src.c: 30:       for(;;){
  2734  0D9E  3080               	movlw	128
  2735  0D9F  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2736                           
  2737                           ;Button_src.c: 32:             write_char('t');
  2738  0DA4  3074               	movlw	116
  2739  0DA5  160A  118A  2485  120A  158A  	fcall	_write_char
  2740                           
  2741                           ;Button_src.c: 33:             write_char('h');
  2742  0DAA  3068               	movlw	104
  2743  0DAB  160A  118A  2485  120A  158A  	fcall	_write_char
  2744                           
  2745                           ;Button_src.c: 34:             write_char('r');
  2746  0DB0  3072               	movlw	114
  2747  0DB1  160A  118A  2485  120A  158A  	fcall	_write_char
  2748                           
  2749                           ;Button_src.c: 35:             write_char('e');
  2750  0DB6  3065               	movlw	101
  2751  0DB7  160A  118A  2485  120A  158A  	fcall	_write_char
  2752                           
  2753                           ;Button_src.c: 36:             write_char('s');
  2754  0DBC  3073               	movlw	115
  2755  0DBD  160A  118A  2485  120A  158A  	fcall	_write_char
  2756                           
  2757                           ;Button_src.c: 37:             write_char('h');
  2758  0DC2  3068               	movlw	104
  2759  0DC3  160A  118A  2485  120A  158A  	fcall	_write_char
  2760                           
  2761                           ;Button_src.c: 38:             write_char('o');
  2762  0DC8  306F               	movlw	111
  2763  0DC9  160A  118A  2485  120A  158A  	fcall	_write_char
  2764                           
  2765                           ;Button_src.c: 39:             write_char('l');
  2766  0DCE  306C               	movlw	108
  2767  0DCF  160A  118A  2485  120A  158A  	fcall	_write_char
  2768                           
  2769                           ;Button_src.c: 40:             write_char('d');
  2770  0DD4  3064               	movlw	100
  2771  0DD5  160A  118A  2485  120A  158A  	fcall	_write_char
  2772                           
  2773                           ;Button_src.c: 42:             write_cmd(0x90);
  2774  0DDA  3090               	movlw	144
  2775  0DDB  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2776                           
  2777                           ;Button_src.c: 43:             write_char('C');
  2778  0DE0  3043               	movlw	67
  2779  0DE1  160A  118A  2485  120A  158A  	fcall	_write_char
  2780                           
  2781                           ;Button_src.c: 44:             write_char('u');
  2782  0DE6  3075               	movlw	117
  2783  0DE7  160A  118A  2485  120A  158A  	fcall	_write_char
  2784                           
  2785                           ;Button_src.c: 45:             write_char('r');
  2786  0DEC  3072               	movlw	114
  2787  0DED  160A  118A  2485  120A  158A  	fcall	_write_char
  2788                           
  2789                           ;Button_src.c: 46:             write_char('r');
  2790  0DF2  3072               	movlw	114
  2791  0DF3  160A  118A  2485  120A  158A  	fcall	_write_char
  2792                           
  2793                           ;Button_src.c: 47:             write_char('e');
  2794  0DF8  3065               	movlw	101
  2795  0DF9  160A  118A  2485  120A  158A  	fcall	_write_char
  2796                           
  2797                           ;Button_src.c: 48:             write_char('n');
  2798  0DFE  306E               	movlw	110
  2799  0DFF  160A  118A  2485  120A  158A  	fcall	_write_char
  2800                           
  2801                           ;Button_src.c: 49:             write_char('t');
  2802  0E04  3074               	movlw	116
  2803  0E05  160A  118A  2485  120A  158A  	fcall	_write_char
  2804                           
  2805                           ;Button_src.c: 50:             write_char(':');
  2806  0E0A  303A               	movlw	58
  2807  0E0B  160A  118A  2485  120A  158A  	fcall	_write_char
  2808                           
  2809                           ;Button_src.c: 52:             write_char(var1 + '0');
  2810  0E10  084D               	movf	_var1,w
  2811  0E11  3E30               	addlw	48
  2812  0E12  160A  118A  2485  120A  158A  	fcall	_write_char
  2813                           
  2814                           ;Button_src.c: 53:             write_char(var2 + '0');
  2815  0E17  084C               	movf	_var2,w
  2816  0E18  3E30               	addlw	48
  2817  0E19  160A  118A  2485  120A  158A  	fcall	_write_char
  2818                           
  2819                           ;Button_src.c: 55:             write_cmd(0x88);
  2820  0E1E  3088               	movlw	136
  2821  0E1F  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2822                           
  2823                           ;Button_src.c: 56:             write_char('S');
  2824  0E24  3053               	movlw	83
  2825  0E25  160A  118A  2485  120A  158A  	fcall	_write_char
  2826                           
  2827                           ;Button_src.c: 57:             write_char('e');
  2828  0E2A  3065               	movlw	101
  2829  0E2B  160A  118A  2485  120A  158A  	fcall	_write_char
  2830                           
  2831                           ;Button_src.c: 58:             write_char('t');
  2832  0E30  3074               	movlw	116
  2833  0E31  160A  118A  2485  120A  158A  	fcall	_write_char
  2834                           
  2835                           ;Button_src.c: 59:             write_char('_');
  2836  0E36  305F               	movlw	95
  2837  0E37  160A  118A  2485  120A  158A  	fcall	_write_char
  2838                           
  2839                           ;Button_src.c: 60:             write_char('t');
  2840  0E3C  3074               	movlw	116
  2841  0E3D  160A  118A  2485  120A  158A  	fcall	_write_char
  2842                           
  2843                           ;Button_src.c: 61:             write_char('h');
  2844  0E42  3068               	movlw	104
  2845  0E43  160A  118A  2485  120A  158A  	fcall	_write_char
  2846                           
  2847                           ;Button_src.c: 62:             write_char('r');
  2848  0E48  3072               	movlw	114
  2849  0E49  160A  118A  2485  120A  158A  	fcall	_write_char
  2850                           
  2851                           ;Button_src.c: 63:             write_char('e');
  2852  0E4E  3065               	movlw	101
  2853  0E4F  160A  118A  2485  120A  158A  	fcall	_write_char
  2854                           
  2855                           ;Button_src.c: 64:             write_char('s');
  2856  0E54  3073               	movlw	115
  2857  0E55  160A  118A  2485  120A  158A  	fcall	_write_char
  2858                           
  2859                           ;Button_src.c: 65:             write_char('h');
  2860  0E5A  3068               	movlw	104
  2861  0E5B  160A  118A  2485  120A  158A  	fcall	_write_char
  2862                           
  2863                           ;Button_src.c: 66:             write_char('o');
  2864  0E60  306F               	movlw	111
  2865  0E61  160A  118A  2485  120A  158A  	fcall	_write_char
  2866                           
  2867                           ;Button_src.c: 67:             write_char('l');
  2868  0E66  306C               	movlw	108
  2869  0E67  160A  118A  2485  120A  158A  	fcall	_write_char
  2870                           
  2871                           ;Button_src.c: 68:             write_char('d');
  2872  0E6C  3064               	movlw	100
  2873  0E6D  160A  118A  2485  120A  158A  	fcall	_write_char
  2874                           
  2875                           ;Button_src.c: 69:             write_char(':');
  2876  0E72  303A               	movlw	58
  2877  0E73  160A  118A  2485  120A  158A  	fcall	_write_char
  2878                           
  2879                           ;Button_src.c: 71:             write_cmd(0x98);
  2880  0E78  3098               	movlw	152
  2881  0E79  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2882                           
  2883                           ;Button_src.c: 72:             RC0 = 1;
  2884  0E7E  1407               	bsf	7,0	;volatile
  2885                           
  2886                           ;Button_src.c: 73:             RC1 = 0;
  2887  0E7F  1087               	bcf	7,1	;volatile
  2888                           
  2889                           ;Button_src.c: 74:             RC2 = 1;
  2890  0E80  1507               	bsf	7,2	;volatile
  2891                           
  2892                           ;Button_src.c: 75:             RC3 = 1;
  2893  0E81  1587               	bsf	7,3	;volatile
  2894                           
  2895                           ;Button_src.c: 76:             t = 0;
  2896  0E82  01B2               	clrf	_t
  2897  0E83  01B3               	clrf	_t+1
  2898                           
  2899                           ;Button_src.c: 77:             w = 0;
  2900  0E84  01B0               	clrf	_w
  2901  0E85  01B1               	clrf	_w+1
  2902                           
  2903                           ;Button_src.c: 78:             x = 0;
  2904  0E86  01AE               	clrf	_x
  2905  0E87  01AF               	clrf	_x+1
  2906                           
  2907                           ;Button_src.c: 79:             y = 0;
  2908  0E88  01AC               	clrf	_y
  2909  0E89  01AD               	clrf	_y+1
  2910                           
  2911                           ;Button_src.c: 80:             x = 0x00;
  2912  0E8A  01AE               	clrf	_x
  2913  0E8B  01AF               	clrf	_x+1
  2914  0E8C                     l3916:	
  2915                           
  2916                           ;Button_src.c: 82:                  RC0 = 1;
  2917  0E8C  1407               	bsf	7,0	;volatile
  2918                           
  2919                           ;Button_src.c: 83:                  RC1 = 0;
  2920  0E8D  1087               	bcf	7,1	;volatile
  2921                           
  2922                           ;Button_src.c: 84:                  RC2 = 1;
  2923  0E8E  1507               	bsf	7,2	;volatile
  2924                           
  2925                           ;Button_src.c: 85:                  RC3 = 1;
  2926  0E8F  1587               	bsf	7,3	;volatile
  2927                           
  2928                           ;Button_src.c: 87:                 if(RC7==0){
  2929  0E90  1B87               	btfsc	7,7	;volatile
  2930  0E91  2EEB               	goto	l3944
  2931                           
  2932                           ;Button_src.c: 88:                     write_cmd(0x98);
  2933  0E92  3098               	movlw	152
  2934  0E93  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2935                           
  2936                           ;Button_src.c: 89:                     x++;
  2937  0E98  3001               	movlw	1
  2938  0E99  07AE               	addwf	_x,f
  2939  0E9A  1803               	skipnc
  2940  0E9B  0AAF               	incf	_x+1,f
  2941  0E9C  3000               	movlw	0
  2942  0E9D  07AF               	addwf	_x+1,f
  2943                           
  2944                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2945  0E9E  082C               	movf	_y,w
  2946  0E9F  00E3               	movwf	??_thermometer_threshhold_settings
  2947  0EA0  01E4               	clrf	??_thermometer_threshhold_settings+1
  2948  0EA1  0863               	movf	??_thermometer_threshhold_settings,w
  2949  0EA2  00AC               	movwf	_y
  2950  0EA3  0864               	movf	??_thermometer_threshhold_settings+1,w
  2951  0EA4  00AD               	movwf	_y+1
  2952                           
  2953                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2954  0EA5  082F               	movf	_x+1,w
  2955  0EA6  00F8               	movwf	modulus_func@x+1
  2956  0EA7  082E               	movf	_x,w
  2957  0EA8  00F7               	movwf	modulus_func@x
  2958  0EA9  300A               	movlw	10
  2959  0EAA  00F9               	movwf	modulus_func@y
  2960  0EAB  3000               	movlw	0
  2961  0EAC  00FA               	movwf	modulus_func@y+1
  2962  0EAD  160A  118A  2414  120A  158A  	fcall	_modulus_func
  2963  0EB2  0877               	movf	?_modulus_func,w
  2964  0EB3  00E3               	movwf	??_thermometer_threshhold_settings
  2965  0EB4  01E4               	clrf	??_thermometer_threshhold_settings+1
  2966  0EB5  0863               	movf	??_thermometer_threshhold_settings,w
  2967  0EB6  00AE               	movwf	_x
  2968  0EB7  0864               	movf	??_thermometer_threshhold_settings+1,w
  2969  0EB8  00AF               	movwf	_x+1
  2970                           
  2971                           ;Button_src.c: 92:                     write_char(y + '0');
  2972  0EB9  082C               	movf	_y,w
  2973  0EBA  3E30               	addlw	48
  2974  0EBB  160A  118A  2485  120A  158A  	fcall	_write_char
  2975                           
  2976                           ;Button_src.c: 93:                     write_char(x + '0');
  2977  0EC0  082E               	movf	_x,w
  2978  0EC1  3E30               	addlw	48
  2979  0EC2  160A  118A  2485  120A  158A  	fcall	_write_char
  2980                           
  2981                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2982  0EC7  082D               	movf	_y+1,w
  2983  0EC8  00DF               	movwf	incrementor@upper_val+1
  2984  0EC9  082C               	movf	_y,w
  2985  0ECA  00DE               	movwf	incrementor@upper_val
  2986  0ECB  082F               	movf	_x+1,w
  2987  0ECC  00E1               	movwf	incrementor@lower_val+1
  2988  0ECD  082E               	movf	_x,w
  2989  0ECE  00E0               	movwf	incrementor@lower_val
  2990  0ECF  3039               	movlw	57
  2991  0ED0  00E3               	movwf	??_thermometer_threshhold_settings
  2992  0ED1  0863               	movf	??_thermometer_threshhold_settings,w
  2993  0ED2  00E2               	movwf	incrementor@z
  2994  0ED3  160A  118A  2541  120A  158A  	fcall	_incrementor
  2995  0ED8  00E4               	movwf	??_thermometer_threshhold_settings+1
  2996  0ED9  01E5               	clrf	??_thermometer_threshhold_settings+2
  2997  0EDA  0864               	movf	??_thermometer_threshhold_settings+1,w
  2998  0EDB  00AC               	movwf	_y
  2999  0EDC  0865               	movf	??_thermometer_threshhold_settings+2,w
  3000  0EDD  00AD               	movwf	_y+1
  3001                           
  3002                           ;Button_src.c: 95:                     t = x;
  3003  0EDE  082F               	movf	_x+1,w
  3004  0EDF  00B3               	movwf	_t+1
  3005  0EE0  082E               	movf	_x,w
  3006  0EE1  00B2               	movwf	_t
  3007                           
  3008                           ;Button_src.c: 96:                     w = y;
  3009  0EE2  082D               	movf	_y+1,w
  3010  0EE3  00B1               	movwf	_w+1
  3011  0EE4  082C               	movf	_y,w
  3012  0EE5  00B0               	movwf	_w
  3013                           
  3014                           ;Button_src.c: 97:                     button_delay();
  3015  0EE6  160A  118A  2435  120A  158A  	fcall	_button_delay
  3016  0EEB                     l3944:	
  3017                           
  3018                           ;Button_src.c: 99:                   RC0 = 0;
  3019  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  3020  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  3021  0EED  1007               	bcf	7,0	;volatile
  3022                           
  3023                           ;Button_src.c: 100:                     RC1 = 1;
  3024  0EEE  1487               	bsf	7,1	;volatile
  3025                           
  3026                           ;Button_src.c: 101:                     RC2 = 1;
  3027  0EEF  1507               	bsf	7,2	;volatile
  3028                           
  3029                           ;Button_src.c: 102:                     RC3 = 1;
  3030  0EF0  1587               	bsf	7,3	;volatile
  3031                           
  3032                           ;Button_src.c: 103:                     if(RC6 == 0){
  3033  0EF1  1B07               	btfsc	7,6	;volatile
  3034  0EF2  2F3D               	goto	l691
  3035                           
  3036                           ;Button_src.c: 104:                         var1 = y;
  3037  0EF3  082C               	movf	_y,w
  3038  0EF4  00E3               	movwf	??_thermometer_threshhold_settings
  3039  0EF5  0863               	movf	??_thermometer_threshhold_settings,w
  3040  0EF6  00CD               	movwf	_var1
  3041                           
  3042                           ;Button_src.c: 105:                         var2 = x;
  3043  0EF7  082E               	movf	_x,w
  3044  0EF8  00E3               	movwf	??_thermometer_threshhold_settings
  3045  0EF9  0863               	movf	??_thermometer_threshhold_settings,w
  3046  0EFA  00CC               	movwf	_var2
  3047                           
  3048                           ;Button_src.c: 106:                         x = 0;
  3049  0EFB  01AE               	clrf	_x
  3050  0EFC  01AF               	clrf	_x+1
  3051                           
  3052                           ;Button_src.c: 107:                         y = 0;
  3053  0EFD  01AC               	clrf	_y
  3054  0EFE  01AD               	clrf	_y+1
  3055                           
  3056                           ;Button_src.c: 108:                         w = 0;
  3057  0EFF  01B0               	clrf	_w
  3058  0F00  01B1               	clrf	_w+1
  3059                           
  3060                           ;Button_src.c: 109:                         t = 0;
  3061  0F01  01B2               	clrf	_t
  3062  0F02  01B3               	clrf	_t+1
  3063                           
  3064                           ;Button_src.c: 111:                         write_cmd(0x1);
  3065  0F03  3001               	movlw	1
  3066  0F04  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3067                           
  3068                           ;Button_src.c: 112:                         write_char('S');
  3069  0F09  3053               	movlw	83
  3070  0F0A  160A  118A  2485  120A  158A  	fcall	_write_char
  3071                           
  3072                           ;Button_src.c: 113:                         write_char('A');
  3073  0F0F  3041               	movlw	65
  3074  0F10  160A  118A  2485  120A  158A  	fcall	_write_char
  3075                           
  3076                           ;Button_src.c: 114:                         write_char('V');
  3077  0F15  3056               	movlw	86
  3078  0F16  160A  118A  2485  120A  158A  	fcall	_write_char
  3079                           
  3080                           ;Button_src.c: 115:                         write_char('E');
  3081  0F1B  3045               	movlw	69
  3082  0F1C  160A  118A  2485  120A  158A  	fcall	_write_char
  3083                           
  3084                           ;Button_src.c: 116:                         write_char('D');
  3085  0F21  3044               	movlw	68
  3086  0F22  160A  118A  2485  120A  158A  	fcall	_write_char
  3087                           
  3088                           ;Button_src.c: 117:                         for(int i=0;i<30000;i++);
  3089  0F27  01E6               	clrf	thermometer_threshhold_settings@i
  3090  0F28  01E7               	clrf	thermometer_threshhold_settings@i+1
  3091  0F29                     l3982:	
  3092  0F29  3001               	movlw	1
  3093  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0F2C  07E6               	addwf	thermometer_threshhold_settings@i,f
  3096  0F2D  1803               	skipnc
  3097  0F2E  0AE7               	incf	thermometer_threshhold_settings@i+1,f
  3098  0F2F  3000               	movlw	0
  3099  0F30  07E7               	addwf	thermometer_threshhold_settings@i+1,f
  3100  0F31  0867               	movf	thermometer_threshhold_settings@i+1,w
  3101  0F32  3A80               	xorlw	128
  3102  0F33  00FF               	movwf	127
  3103  0F34  30F5               	movlw	245
  3104  0F35  027F               	subwf	127,w
  3105  0F36  1D03               	skipz
  3106  0F37  2F3A               	goto	u3095
  3107  0F38  3030               	movlw	48
  3108  0F39  0266               	subwf	thermometer_threshhold_settings@i,w
  3109  0F3A                     u3095:	
  3110  0F3A  1803               	btfsc	3,0
  3111  0F3B  0008               	return
  3112  0F3C  2F29               	goto	l3982
  3113  0F3D                     l691:	
  3114                           ;Button_src.c: 119:                     }
  3115                           
  3116                           
  3117                           ;Button_src.c: 120:                  RC0 = 1;
  3118  0F3D  1407               	bsf	7,0	;volatile
  3119                           
  3120                           ;Button_src.c: 121:                  RC1 = 1;
  3121  0F3E  1487               	bsf	7,1	;volatile
  3122                           
  3123                           ;Button_src.c: 122:                  RC2 = 0;
  3124  0F3F  1107               	bcf	7,2	;volatile
  3125                           
  3126                           ;Button_src.c: 123:                  RC3 = 1;
  3127  0F40  1587               	bsf	7,3	;volatile
  3128                           
  3129                           ;Button_src.c: 125:                  if(RC7 == 0){
  3130  0F41  1B87               	btfsc	7,7	;volatile
  3131  0F42  2FAD               	goto	l4006
  3132                           
  3133                           ;Button_src.c: 126:                     write_cmd(0x98);
  3134  0F43  3098               	movlw	152
  3135  0F44  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3136                           
  3137                           ;Button_src.c: 127:                       t--;
  3138  0F49  3001               	movlw	1
  3139  0F4A  02B2               	subwf	_t,f
  3140  0F4B  3000               	movlw	0
  3141  0F4C  1C03               	skipc
  3142  0F4D  03B3               	decf	_t+1,f
  3143  0F4E  02B3               	subwf	_t+1,f
  3144                           
  3145                           ;Button_src.c: 128:                     w = (unsigned char )w;
  3146  0F4F  0830               	movf	_w,w
  3147  0F50  00E3               	movwf	??_thermometer_threshhold_settings
  3148  0F51  01E4               	clrf	??_thermometer_threshhold_settings+1
  3149  0F52  0863               	movf	??_thermometer_threshhold_settings,w
  3150  0F53  00B0               	movwf	_w
  3151  0F54  0864               	movf	??_thermometer_threshhold_settings+1,w
  3152  0F55  00B1               	movwf	_w+1
  3153                           
  3154                           ;Button_src.c: 129:                     t = (unsigned char )(modulus_func(t,10));
  3155  0F56  0833               	movf	_t+1,w
  3156  0F57  00F8               	movwf	modulus_func@x+1
  3157  0F58  0832               	movf	_t,w
  3158  0F59  00F7               	movwf	modulus_func@x
  3159  0F5A  300A               	movlw	10
  3160  0F5B  00F9               	movwf	modulus_func@y
  3161  0F5C  3000               	movlw	0
  3162  0F5D  00FA               	movwf	modulus_func@y+1
  3163  0F5E  160A  118A  2414  120A  158A  	fcall	_modulus_func
  3164  0F63  0877               	movf	?_modulus_func,w
  3165  0F64  00E3               	movwf	??_thermometer_threshhold_settings
  3166  0F65  01E4               	clrf	??_thermometer_threshhold_settings+1
  3167  0F66  0863               	movf	??_thermometer_threshhold_settings,w
  3168  0F67  00B2               	movwf	_t
  3169  0F68  0864               	movf	??_thermometer_threshhold_settings+1,w
  3170  0F69  00B3               	movwf	_t+1
  3171                           
  3172                           ;Button_src.c: 130:                     write_char(w + '0');
  3173  0F6A  0830               	movf	_w,w
  3174  0F6B  3E30               	addlw	48
  3175  0F6C  160A  118A  2485  120A  158A  	fcall	_write_char
  3176                           
  3177                           ;Button_src.c: 131:                     write_char(t + '0');
  3178  0F71  0832               	movf	_t,w
  3179  0F72  3E30               	addlw	48
  3180  0F73  160A  118A  2485  120A  158A  	fcall	_write_char
  3181                           
  3182                           ;Button_src.c: 132:                     w = decrementor(w,t,'0');
  3183  0F78  0831               	movf	_w+1,w
  3184  0F79  00DF               	movwf	decrementor@lower_val+1
  3185  0F7A  0830               	movf	_w,w
  3186  0F7B  00DE               	movwf	decrementor@lower_val
  3187  0F7C  0833               	movf	_t+1,w
  3188  0F7D  00E1               	movwf	decrementor@upper_val+1
  3189  0F7E  0832               	movf	_t,w
  3190  0F7F  00E0               	movwf	decrementor@upper_val
  3191  0F80  3030               	movlw	48
  3192  0F81  00E3               	movwf	??_thermometer_threshhold_settings
  3193  0F82  0863               	movf	??_thermometer_threshhold_settings,w
  3194  0F83  00E2               	movwf	decrementor@z
  3195  0F84  160A  118A  2565  120A  158A  	fcall	_decrementor
  3196  0F89  00E4               	movwf	??_thermometer_threshhold_settings+1
  3197  0F8A  01E5               	clrf	??_thermometer_threshhold_settings+2
  3198  0F8B  0864               	movf	??_thermometer_threshhold_settings+1,w
  3199  0F8C  00B0               	movwf	_w
  3200  0F8D  0865               	movf	??_thermometer_threshhold_settings+2,w
  3201  0F8E  00B1               	movwf	_w+1
  3202                           
  3203                           ;Button_src.c: 133:                     if((t + '0')=='0'){
  3204  0F8F  0832               	movf	_t,w
  3205  0F90  3E30               	addlw	48
  3206  0F91  00E3               	movwf	??_thermometer_threshhold_settings
  3207  0F92  0833               	movf	_t+1,w
  3208  0F93  1803               	skipnc
  3209  0F94  3E01               	addlw	1
  3210  0F95  3E00               	addlw	0
  3211  0F96  00E4               	movwf	??_thermometer_threshhold_settings+1
  3212  0F97  3030               	movlw	48
  3213  0F98  0663               	xorwf	??_thermometer_threshhold_settings,w
  3214  0F99  0464               	iorwf	??_thermometer_threshhold_settings+1,w
  3215  0F9A  1D03               	btfss	3,2
  3216  0F9B  2FA0               	goto	l696
  3217                           
  3218                           ;Button_src.c: 134:                         t = 10;
  3219  0F9C  300A               	movlw	10
  3220  0F9D  00B2               	movwf	_t
  3221  0F9E  3000               	movlw	0
  3222  0F9F  00B3               	movwf	_t+1
  3223  0FA0                     l696:	
  3224                           ;Button_src.c: 135:                     }
  3225                           
  3226                           
  3227                           ;Button_src.c: 137:                     x = t;
  3228  0FA0  0833               	movf	_t+1,w
  3229  0FA1  00AF               	movwf	_x+1
  3230  0FA2  0832               	movf	_t,w
  3231  0FA3  00AE               	movwf	_x
  3232                           
  3233                           ;Button_src.c: 138:                     y = w;
  3234  0FA4  0831               	movf	_w+1,w
  3235  0FA5  00AD               	movwf	_y+1
  3236  0FA6  0830               	movf	_w,w
  3237  0FA7  00AC               	movwf	_y
  3238                           
  3239                           ;Button_src.c: 139:                     button_delay();
  3240  0FA8  160A  118A  2435  120A  158A  	fcall	_button_delay
  3241  0FAD                     l4006:	
  3242                           
  3243                           ;Button_src.c: 141:                 RC0 = 0;
  3244  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  3245  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  3246  0FAF  1007               	bcf	7,0	;volatile
  3247                           
  3248                           ;Button_src.c: 142:                 RC1 = 1;
  3249  0FB0  1487               	bsf	7,1	;volatile
  3250                           
  3251                           ;Button_src.c: 143:                 RC2 = 1;
  3252  0FB1  1507               	bsf	7,2	;volatile
  3253                           
  3254                           ;Button_src.c: 144:                 RC3 = 1;
  3255  0FB2  1587               	bsf	7,3	;volatile
  3256                           
  3257                           ;Button_src.c: 145:                     if(RC6 == 0){
  3258  0FB3  1B07               	btfsc	7,6	;volatile
  3259  0FB4  2FED               	goto	l697
  3260                           
  3261                           ;Button_src.c: 146:                         var1 = w;
  3262  0FB5  0830               	movf	_w,w
  3263  0FB6  00E3               	movwf	??_thermometer_threshhold_settings
  3264  0FB7  0863               	movf	??_thermometer_threshhold_settings,w
  3265  0FB8  00CD               	movwf	_var1
  3266                           
  3267                           ;Button_src.c: 147:                         var2 = t;
  3268  0FB9  0832               	movf	_t,w
  3269  0FBA  00E3               	movwf	??_thermometer_threshhold_settings
  3270  0FBB  0863               	movf	??_thermometer_threshhold_settings,w
  3271  0FBC  00CC               	movwf	_var2
  3272                           
  3273                           ;Button_src.c: 148:                         x = 0;
  3274  0FBD  01AE               	clrf	_x
  3275  0FBE  01AF               	clrf	_x+1
  3276                           
  3277                           ;Button_src.c: 149:                         y = 0;
  3278  0FBF  01AC               	clrf	_y
  3279  0FC0  01AD               	clrf	_y+1
  3280                           
  3281                           ;Button_src.c: 150:                         w = 0;
  3282  0FC1  01B0               	clrf	_w
  3283  0FC2  01B1               	clrf	_w+1
  3284                           
  3285                           ;Button_src.c: 151:                         t = 0;
  3286  0FC3  01B2               	clrf	_t
  3287  0FC4  01B3               	clrf	_t+1
  3288                           
  3289                           ;Button_src.c: 153:                         write_cmd(0x1);
  3290  0FC5  3001               	movlw	1
  3291  0FC6  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3292                           
  3293                           ;Button_src.c: 154:                         write_char('S');
  3294  0FCB  3053               	movlw	83
  3295  0FCC  160A  118A  2485  120A  158A  	fcall	_write_char
  3296                           
  3297                           ;Button_src.c: 155:                         write_char('A');
  3298  0FD1  3041               	movlw	65
  3299  0FD2  160A  118A  2485  120A  158A  	fcall	_write_char
  3300                           
  3301                           ;Button_src.c: 156:                         write_char('V');
  3302  0FD7  3056               	movlw	86
  3303  0FD8  160A  118A  2485  120A  158A  	fcall	_write_char
  3304                           
  3305                           ;Button_src.c: 157:                         write_char('E');
  3306  0FDD  3045               	movlw	69
  3307  0FDE  160A  118A  2485  120A  158A  	fcall	_write_char
  3308                           
  3309                           ;Button_src.c: 158:                         write_char('D');
  3310  0FE3  3044               	movlw	68
  3311  0FE4  160A  118A  2485  120A  158A  	fcall	_write_char
  3312                           
  3313                           ;Button_src.c: 159:                         button_delay();
  3314  0FE9  160A  118A  2435   	fcall	_button_delay
  3315  0FEC  0008               	return
  3316  0FED                     l697:	
  3317                           ;Button_src.c: 161:                     }
  3318                           
  3319                           
  3320                           ;Button_src.c: 162:             RC0 = 0;
  3321  0FED  1007               	bcf	7,0	;volatile
  3322                           
  3323                           ;Button_src.c: 163:             RC1 = 1;
  3324  0FEE  1487               	bsf	7,1	;volatile
  3325                           
  3326                           ;Button_src.c: 164:             RC2 = 1;
  3327  0FEF  1507               	bsf	7,2	;volatile
  3328                           
  3329                           ;Button_src.c: 165:             RC3 = 1;
  3330  0FF0  1587               	bsf	7,3	;volatile
  3331                           
  3332                           ;Button_src.c: 166:             if (RC7 == 0 ){
  3333  0FF1  1B87               	btfsc	7,7	;volatile
  3334  0FF2  2E8C               	goto	l3916
  3335                           
  3336                           ;Button_src.c: 167:                         x = 0;
  3337  0FF3  01AE               	clrf	_x
  3338  0FF4  01AF               	clrf	_x+1
  3339                           
  3340                           ;Button_src.c: 168:                         y = 0;
  3341  0FF5  01AC               	clrf	_y
  3342  0FF6  01AD               	clrf	_y+1
  3343                           
  3344                           ;Button_src.c: 169:                         w = 0;
  3345  0FF7  01B0               	clrf	_w
  3346  0FF8  01B1               	clrf	_w+1
  3347                           
  3348                           ;Button_src.c: 170:                         t = 0;
  3349  0FF9  01B2               	clrf	_t
  3350  0FFA  01B3               	clrf	_t+1
  3351                           
  3352                           ;Button_src.c: 171:             write_cmd(0x1);
  3353  0FFB  3001               	movlw	1
  3354  0FFC  120A  118A  2006   	fcall	_write_cmd
  3355  0FFF  0008               	return
  3356  1000                     __end_of_thermometer_threshhold_settings:	
  3357                           
  3358                           	psect	text3
  3359  1565                     __ptext3:	
  3360 ;; *************** function _decrementor *****************
  3361 ;; Defined at:
  3362 ;;		line 19 in file "math_src.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  lower_val       2    0[BANK0 ] int 
  3365 ;;  upper_val       2    2[BANK0 ] int 
  3366 ;;  z               1    4[BANK0 ] unsigned char 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      unsigned char 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 300/0
  3375 ;;		On exit  : 300/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3378 ;;      Params:         0       5       0       0       0
  3379 ;;      Locals:         0       0       0       0       0
  3380 ;;      Temps:          2       0       0       0       0
  3381 ;;      Totals:         2       5       0       0       0
  3382 ;;Total ram usage:        7 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    2
  3385 ;; This function calls:
  3386 ;;		_modulus_func
  3387 ;; This function is called by:
  3388 ;;		_thermometer_threshhold_settings
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _decrementor
  3394  1565                     _decrementor:	
  3395                           
  3396                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3400  1565  0860               	movf	decrementor@upper_val,w
  3401  1566  3E30               	addlw	48
  3402  1567  00FB               	movwf	??_decrementor
  3403  1568  0861               	movf	decrementor@upper_val+1,w
  3404  1569  1803               	skipnc
  3405  156A  3E01               	addlw	1
  3406  156B  3E00               	addlw	0
  3407  156C  00FC               	movwf	??_decrementor+1
  3408  156D  0862               	movf	decrementor@z,w
  3409  156E  067B               	xorwf	??_decrementor,w
  3410  156F  047C               	iorwf	??_decrementor+1,w
  3411  1570  1D03               	skipz
  3412  1571  2D87               	goto	l3426
  3413                           
  3414                           ;math_src.c: 21:         lower_val--;
  3415  1572  30FF               	movlw	255
  3416  1573  07DE               	addwf	decrementor@lower_val,f
  3417  1574  1803               	skipnc
  3418  1575  0ADF               	incf	decrementor@lower_val+1,f
  3419  1576  30FF               	movlw	255
  3420  1577  07DF               	addwf	decrementor@lower_val+1,f
  3421                           
  3422                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3423  1578  085F               	movf	decrementor@lower_val+1,w
  3424  1579  00F8               	movwf	modulus_func@x+1
  3425  157A  085E               	movf	decrementor@lower_val,w
  3426  157B  00F7               	movwf	modulus_func@x
  3427  157C  300A               	movlw	10
  3428  157D  00F9               	movwf	modulus_func@y
  3429  157E  3000               	movlw	0
  3430  157F  00FA               	movwf	modulus_func@y+1
  3431  1580  160A  118A  2414   	fcall	_modulus_func
  3432  1583  0878               	movf	?_modulus_func+1,w
  3433  1584  00DF               	movwf	decrementor@lower_val+1
  3434  1585  0877               	movf	?_modulus_func,w
  3435  1586  00DE               	movwf	decrementor@lower_val
  3436  1587                     l3426:	
  3437                           
  3438                           ;math_src.c: 24:      return lower_val;
  3439  1587  085E               	movf	decrementor@lower_val,w
  3440  1588  0008               	return
  3441  1589                     __end_of_decrementor:	
  3442                           
  3443                           	psect	text4
  3444  001D                     __ptext4:	
  3445 ;; *************** function _set_upper_threshold *****************
  3446 ;; Defined at:
  3447 ;;		line 4 in file "threshold_src.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  upper_val       2    3[COMMON] int 
  3450 ;;  lower_val       2    5[COMMON] int 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      unsigned char 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 300/0
  3459 ;;		On exit  : 300/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3462 ;;      Params:         4       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0
  3464 ;;      Temps:          1       0       0       0       0
  3465 ;;      Totals:         5       0       0       0       0
  3466 ;;Total ram usage:        5 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    2
  3469 ;; This function calls:
  3470 ;;		_write_char
  3471 ;; This function is called by:
  3472 ;;		_main
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _set_upper_threshold
  3478  001D                     _set_upper_threshold:	
  3479                           
  3480                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3484  001D  0874               	movf	set_upper_threshold@upper_val+1,w
  3485  001E  3A80               	xorlw	128
  3486  001F  3C80               	sublw	128
  3487  0020  1D03               	skipz
  3488  0021  2824               	goto	u3765
  3489  0022  0873               	movf	set_upper_threshold@upper_val,w
  3490  0023  0259               	subwf	_shi,w
  3491  0024                     u3765:	
  3492  0024  1C03               	skipc
  3493  0025  286D               	goto	l905
  3494  0026  0876               	movf	set_upper_threshold@lower_val+1,w
  3495  0027  3A80               	xorlw	128
  3496  0028  3C80               	sublw	128
  3497  0029  1D03               	skipz
  3498  002A  282F               	goto	u3775
  3499  002B  0875               	movf	set_upper_threshold@lower_val,w
  3500  002C  1283               	bcf	3,5	;RP0=0, select bank0
  3501  002D  1303               	bcf	3,6	;RP1=0, select bank0
  3502  002E  0258               	subwf	_ge,w
  3503  002F                     u3775:	
  3504  002F  1C03               	skipc
  3505  0030  286D               	goto	l905
  3506                           
  3507                           ;threshold_src.c: 6:     heat_counter ++;
  3508  0031  3001               	movlw	1
  3509  0032  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0033  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0034  07BA               	addwf	_heat_counter,f
  3512  0035  1803               	skipnc
  3513  0036  0ABB               	incf	_heat_counter+1,f
  3514  0037  3000               	movlw	0
  3515  0038  07BB               	addwf	_heat_counter+1,f
  3516                           
  3517                           ;threshold_src.c: 7:     heater_state = '0';
  3518  0039  3030               	movlw	48
  3519  003A  00F7               	movwf	??_set_upper_threshold
  3520  003B  0877               	movf	??_set_upper_threshold,w
  3521  003C  00CF               	movwf	_heater_state
  3522                           
  3523                           ;threshold_src.c: 8:     cooler_state = '1';
  3524  003D  3031               	movlw	49
  3525  003E  00F7               	movwf	??_set_upper_threshold
  3526  003F  0877               	movf	??_set_upper_threshold,w
  3527  0040  00CE               	movwf	_cooler_state
  3528                           
  3529                           ;threshold_src.c: 9:     write_char('W');
  3530  0041  3057               	movlw	87
  3531  0042  160A  118A  2485  120A  118A  	fcall	_write_char
  3532                           
  3533                           ;threshold_src.c: 10:     write_char('A');
  3534  0047  3041               	movlw	65
  3535  0048  160A  118A  2485  120A  118A  	fcall	_write_char
  3536                           
  3537                           ;threshold_src.c: 11:     write_char('R');
  3538  004D  3052               	movlw	82
  3539  004E  160A  118A  2485  120A  118A  	fcall	_write_char
  3540                           
  3541                           ;threshold_src.c: 12:     write_char('M');
  3542  0053  304D               	movlw	77
  3543  0054  160A  118A  2485  120A  118A  	fcall	_write_char
  3544                           
  3545                           ;threshold_src.c: 13:     if(heat_counter > 100){
  3546  0059  3000               	movlw	0
  3547  005A  023B               	subwf	_heat_counter+1,w
  3548  005B  3065               	movlw	101
  3549  005C  1903               	skipnz
  3550  005D  023A               	subwf	_heat_counter,w
  3551  005E  1C03               	skipc
  3552  005F  286D               	goto	l905
  3553                           
  3554                           ;threshold_src.c: 14:         cooler_state = '-';
  3555  0060  302D               	movlw	45
  3556  0061  00F7               	movwf	??_set_upper_threshold
  3557  0062  0877               	movf	??_set_upper_threshold,w
  3558  0063  00CE               	movwf	_cooler_state
  3559                           
  3560                           ;threshold_src.c: 15:         if(count == 2)
  3561  0064  3002               	movlw	2
  3562  0065  0636               	xorwf	_count,w
  3563  0066  0437               	iorwf	_count+1,w
  3564  0067  1D03               	btfss	3,2
  3565  0068  286D               	goto	l905
  3566                           
  3567                           ;threshold_src.c: 16:         buzzer_watcher = 'w';
  3568  0069  3077               	movlw	119
  3569  006A  00F7               	movwf	??_set_upper_threshold
  3570  006B  0877               	movf	??_set_upper_threshold,w
  3571  006C  00D1               	movwf	_buzzer_watcher
  3572  006D                     l905:	
  3573                           ;threshold_src.c: 18:     }
  3574                           
  3575                           
  3576                           ;threshold_src.c: 19:     return buzzer_watcher;
  3577  006D  1283               	bcf	3,5	;RP0=0, select bank0
  3578  006E  1303               	bcf	3,6	;RP1=0, select bank0
  3579  006F  0851               	movf	_buzzer_watcher,w
  3580  0070  0008               	return
  3581  0071                     __end_of_set_upper_threshold:	
  3582                           
  3583                           	psect	text5
  3584  1745                     __ptext5:	
  3585 ;; *************** function _set_lower_threshold *****************
  3586 ;; Defined at:
  3587 ;;		line 22 in file "threshold_src.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  upper_val       2    3[COMMON] int 
  3590 ;;  lower_val       2    5[COMMON] int 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      unsigned char 
  3595 ;; Registers used:
  3596 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 300/0
  3599 ;;		On exit  : 300/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3602 ;;      Params:         4       0       0       0       0
  3603 ;;      Locals:         0       0       0       0       0
  3604 ;;      Temps:          1       0       0       0       0
  3605 ;;      Totals:         5       0       0       0       0
  3606 ;;Total ram usage:        5 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    2
  3609 ;; This function calls:
  3610 ;;		_write_char
  3611 ;; This function is called by:
  3612 ;;		_main
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _set_lower_threshold
  3618  1745                     _set_lower_threshold:	
  3619                           
  3620                           ;threshold_src.c: 23:     if((shi <= upper_val && ge < lower_val))
  3621                           
  3622                           ;incstack = 0
  3623                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3624  1745  0874               	movf	set_lower_threshold@upper_val+1,w
  3625  1746  3A80               	xorlw	128
  3626  1747  00F7               	movwf	??_set_lower_threshold
  3627  1748  3080               	movlw	128
  3628  1749  0277               	subwf	??_set_lower_threshold,w
  3629  174A  1D03               	skipz
  3630  174B  2F4E               	goto	u3745
  3631  174C  0859               	movf	_shi,w
  3632  174D  0273               	subwf	set_lower_threshold@upper_val,w
  3633  174E                     u3745:	
  3634  174E  1C03               	skipc
  3635  174F  2F83               	goto	l911
  3636  1750  0876               	movf	set_lower_threshold@lower_val+1,w
  3637  1751  3A80               	xorlw	128
  3638  1752  3C80               	sublw	128
  3639  1753  1D03               	skipz
  3640  1754  2F59               	goto	u3755
  3641  1755  0875               	movf	set_lower_threshold@lower_val,w
  3642  1756  1283               	bcf	3,5	;RP0=0, select bank0
  3643  1757  1303               	bcf	3,6	;RP1=0, select bank0
  3644  1758  0258               	subwf	_ge,w
  3645  1759                     u3755:	
  3646  1759  1803               	skipnc
  3647  175A  2F83               	goto	l911
  3648                           
  3649                           ;threshold_src.c: 24:     {;threshold_src.c: 25:     count = 2;
  3650  175B  3002               	movlw	2
  3651  175C  1283               	bcf	3,5	;RP0=0, select bank0
  3652  175D  1303               	bcf	3,6	;RP1=0, select bank0
  3653  175E  00B6               	movwf	_count
  3654  175F  3000               	movlw	0
  3655  1760  00B7               	movwf	_count+1
  3656                           
  3657                           ;threshold_src.c: 26:     buzzer_watcher = 'x';
  3658  1761  3078               	movlw	120
  3659  1762  00F7               	movwf	??_set_lower_threshold
  3660  1763  0877               	movf	??_set_lower_threshold,w
  3661  1764  00D1               	movwf	_buzzer_watcher
  3662                           
  3663                           ;threshold_src.c: 27:     heater_state = '0';
  3664  1765  3030               	movlw	48
  3665  1766  00F7               	movwf	??_set_lower_threshold
  3666  1767  0877               	movf	??_set_lower_threshold,w
  3667  1768  00CF               	movwf	_heater_state
  3668                           
  3669                           ;threshold_src.c: 28:     cooler_state = '0';
  3670  1769  3030               	movlw	48
  3671  176A  00F7               	movwf	??_set_lower_threshold
  3672  176B  0877               	movf	??_set_lower_threshold,w
  3673  176C  00CE               	movwf	_cooler_state
  3674                           
  3675                           ;threshold_src.c: 29:     write_char('O');
  3676  176D  304F               	movlw	79
  3677  176E  160A  118A  2485  160A  118A  	fcall	_write_char
  3678                           
  3679                           ;threshold_src.c: 30:     write_char('K');
  3680  1773  304B               	movlw	75
  3681  1774  160A  118A  2485  160A  118A  	fcall	_write_char
  3682                           
  3683                           ;threshold_src.c: 31:     write_char(' ');
  3684  1779  3020               	movlw	32
  3685  177A  160A  118A  2485  160A  118A  	fcall	_write_char
  3686                           
  3687                           ;threshold_src.c: 32:     write_char(' ');
  3688  177F  3020               	movlw	32
  3689  1780  160A  118A  2485   	fcall	_write_char
  3690  1783                     l911:	
  3691                           ;threshold_src.c: 33:     }
  3692                           
  3693                           
  3694                           ;threshold_src.c: 34:     return buzzer_watcher;
  3695  1783  1283               	bcf	3,5	;RP0=0, select bank0
  3696  1784  1303               	bcf	3,6	;RP1=0, select bank0
  3697  1785  0851               	movf	_buzzer_watcher,w
  3698  1786  0008               	return
  3699  1787                     __end_of_set_lower_threshold:	
  3700                           
  3701                           	psect	text6
  3702  149C                     __ptext6:	
  3703 ;; *************** function _set_beep_threshhold *****************
  3704 ;; Defined at:
  3705 ;;		line 5 in file "buzzer_src.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  x               1    wreg     unsigned char 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  x               1    2[COMMON] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 300/0
  3716 ;;		On exit  : 300/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3719 ;;      Params:         0       0       0       0       0
  3720 ;;      Locals:         1       0       0       0       0
  3721 ;;      Temps:          0       0       0       0       0
  3722 ;;      Totals:         1       0       0       0       0
  3723 ;;Total ram usage:        1 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    1
  3726 ;; This function calls:
  3727 ;;		_button_delay
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _set_beep_threshhold
  3735  149C                     _set_beep_threshhold:	
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3739                           ;set_beep_threshhold@x stored from wreg
  3740  149C  00F2               	movwf	set_beep_threshhold@x
  3741                           
  3742                           ;buzzer_src.c: 6:     if (x == 'w'){
  3743  149D  3077               	movlw	119
  3744  149E  0672               	xorwf	set_beep_threshhold@x,w
  3745  149F  1D03               	btfss	3,2
  3746  14A0  2CB5               	goto	l4580
  3747                           
  3748                           ;buzzer_src.c: 7:         RE2 = 1;
  3749  14A1  1509               	bsf	9,2	;volatile
  3750                           
  3751                           ;buzzer_src.c: 8:         button_delay();
  3752  14A2  160A  118A  2435  160A  118A  	fcall	_button_delay
  3753                           
  3754                           ;buzzer_src.c: 9:         RE2 = 0;
  3755  14A7  1283               	bcf	3,5	;RP0=0, select bank0
  3756  14A8  1303               	bcf	3,6	;RP1=0, select bank0
  3757  14A9  1109               	bcf	9,2	;volatile
  3758                           
  3759                           ;buzzer_src.c: 10:         button_delay();
  3760  14AA  160A  118A  2435  160A  118A  	fcall	_button_delay
  3761                           
  3762                           ;buzzer_src.c: 11:         RE2 = 1;
  3763  14AF  1283               	bcf	3,5	;RP0=0, select bank0
  3764  14B0  1303               	bcf	3,6	;RP1=0, select bank0
  3765  14B1  1509               	bsf	9,2	;volatile
  3766                           
  3767                           ;buzzer_src.c: 12:         button_delay();
  3768  14B2  160A  118A  2435   	fcall	_button_delay
  3769  14B5                     l4580:	
  3770                           
  3771                           ;buzzer_src.c: 13:         RE2 = 0;
  3772  14B5  1283               	bcf	3,5	;RP0=0, select bank0
  3773  14B6  1303               	bcf	3,6	;RP1=0, select bank0
  3774  14B7  1109               	bcf	9,2	;volatile
  3775  14B8  0008               	return
  3776  14B9                     __end_of_set_beep_threshhold:	
  3777                           
  3778                           	psect	text7
  3779  15DD                     __ptext7:	
  3780 ;; *************** function _reset_alarm *****************
  3781 ;; Defined at:
  3782 ;;		line 37 in file "threshold_src.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      unsigned char 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 300/0
  3793 ;;		On exit  : 300/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3796 ;;      Params:         0       0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0
  3798 ;;      Temps:          1       0       0       0       0
  3799 ;;      Totals:         1       0       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    2
  3803 ;; This function calls:
  3804 ;;		_write_char
  3805 ;; This function is called by:
  3806 ;;		_main
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           
  3811                           ;psect for function _reset_alarm
  3812  15DD                     _reset_alarm:	
  3813                           
  3814                           ;threshold_src.c: 38:     RC0 = 1;
  3815                           
  3816                           ;incstack = 0
  3817                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3818  15DD  1407               	bsf	7,0	;volatile
  3819                           
  3820                           ;threshold_src.c: 39:     RC1 = 1;
  3821  15DE  1487               	bsf	7,1	;volatile
  3822                           
  3823                           ;threshold_src.c: 40:     RC2 = 1;
  3824  15DF  1507               	bsf	7,2	;volatile
  3825                           
  3826                           ;threshold_src.c: 41:     RC3 = 0;
  3827  15E0  1187               	bcf	7,3	;volatile
  3828                           
  3829                           ;threshold_src.c: 42:     if(RC4 == 0){
  3830  15E1  1A07               	btfsc	7,4	;volatile
  3831  15E2  2E07               	goto	l4566
  3832                           
  3833                           ;threshold_src.c: 43:         count = 0;
  3834  15E3  01B6               	clrf	_count
  3835  15E4  01B7               	clrf	_count+1
  3836                           
  3837                           ;threshold_src.c: 44:         buzzer_watcher = 'x';
  3838  15E5  3078               	movlw	120
  3839  15E6  00F3               	movwf	??_reset_alarm
  3840  15E7  0873               	movf	??_reset_alarm,w
  3841  15E8  00D1               	movwf	_buzzer_watcher
  3842                           
  3843                           ;threshold_src.c: 45:         heat_counter = 0;
  3844  15E9  01BA               	clrf	_heat_counter
  3845  15EA  01BB               	clrf	_heat_counter+1
  3846                           
  3847                           ;threshold_src.c: 46:         write_char('R');
  3848  15EB  3052               	movlw	82
  3849  15EC  160A  118A  2485  160A  118A  	fcall	_write_char
  3850                           
  3851                           ;threshold_src.c: 47:         write_char('E');
  3852  15F1  3045               	movlw	69
  3853  15F2  160A  118A  2485  160A  118A  	fcall	_write_char
  3854                           
  3855                           ;threshold_src.c: 48:         write_char('S');
  3856  15F7  3053               	movlw	83
  3857  15F8  160A  118A  2485  160A  118A  	fcall	_write_char
  3858                           
  3859                           ;threshold_src.c: 49:         write_char('E');
  3860  15FD  3045               	movlw	69
  3861  15FE  160A  118A  2485  160A  118A  	fcall	_write_char
  3862                           
  3863                           ;threshold_src.c: 50:         write_char('T');
  3864  1603  3054               	movlw	84
  3865  1604  160A  118A  2485   	fcall	_write_char
  3866  1607                     l4566:	
  3867                           
  3868                           ;threshold_src.c: 52:     return buzzer_watcher;
  3869  1607  0851               	movf	_buzzer_watcher,w
  3870  1608  0008               	return
  3871  1609                     __end_of_reset_alarm:	
  3872                           
  3873                           	psect	text8
  3874  151E                     __ptext8:	
  3875 ;; *************** function _lcd_init *****************
  3876 ;; Defined at:
  3877 ;;		line 14 in file "LCD_src.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  i               2    0        int 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 300/100
  3888 ;;		On exit  : 300/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3891 ;;      Params:         0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0
  3894 ;;      Totals:         0       0       0       0       0
  3895 ;;Total ram usage:        0 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    2
  3898 ;; This function calls:
  3899 ;;		_delay_screen
  3900 ;;		_write_cmd
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _lcd_init
  3908  151E                     _lcd_init:	
  3909                           
  3910                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3914  151E  0185               	clrf	5	;volatile
  3915                           
  3916                           ;LCD_src.c: 18:  RA0=0;
  3917  151F  1283               	bcf	3,5	;RP0=0, select bank0
  3918  1520  1005               	bcf	5,0	;volatile
  3919                           
  3920                           ;LCD_src.c: 19:  delay_screen();
  3921  1521  160A  118A  2449  160A  118A  	fcall	_delay_screen
  3922                           
  3923                           ;LCD_src.c: 20:  RA0=1;
  3924  1526  1283               	bcf	3,5	;RP0=0, select bank0
  3925  1527  1303               	bcf	3,6	;RP1=0, select bank0
  3926  1528  1405               	bsf	5,0	;volatile
  3927                           
  3928                           ;LCD_src.c: 21:  RA2=1;
  3929  1529  1505               	bsf	5,2	;volatile
  3930                           
  3931                           ;LCD_src.c: 22:  write_cmd(0x30);
  3932  152A  3030               	movlw	48
  3933  152B  120A  118A  2006  160A  118A  	fcall	_write_cmd
  3934                           
  3935                           ;LCD_src.c: 23:  write_cmd(0x01);
  3936  1530  3001               	movlw	1
  3937  1531  120A  118A  2006  160A  118A  	fcall	_write_cmd
  3938                           
  3939                           ;LCD_src.c: 24:  write_cmd(0x06);
  3940  1536  3006               	movlw	6
  3941  1537  120A  118A  2006  160A  118A  	fcall	_write_cmd
  3942                           
  3943                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3944  153C  300C               	movlw	12
  3945  153D  120A  118A  2006   	fcall	_write_cmd
  3946  1540  0008               	return
  3947  1541                     __end_of_lcd_init:	
  3948                           
  3949                           	psect	text9
  3950  1471                     __ptext9:	
  3951 ;; *************** function _initialise_buttons *****************
  3952 ;; Defined at:
  3953 ;;		line 11 in file "Button_src.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2
  3962 ;; Tracked objects:
  3963 ;;		On entry : 300/0
  3964 ;;		On exit  : 300/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3967 ;;      Params:         0       0       0       0       0
  3968 ;;      Locals:         0       0       0       0       0
  3969 ;;      Temps:          0       0       0       0       0
  3970 ;;      Totals:         0       0       0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_main
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _initialise_buttons
  3982  1471                     _initialise_buttons:	
  3983                           
  3984                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3988  1471  3006               	movlw	6
  3989  1472  1683               	bsf	3,5	;RP0=1, select bank1
  3990  1473  009F               	movwf	31	;volatile
  3991                           
  3992                           ;Button_src.c: 13:     TRISC = 0xf0;
  3993  1474  30F0               	movlw	240
  3994  1475  0087               	movwf	7	;volatile
  3995                           
  3996                           ;Button_src.c: 14:     a = 0x00;
  3997  1476  1283               	bcf	3,5	;RP0=0, select bank0
  3998  1477  01C8               	clrf	_a
  3999                           
  4000                           ;Button_src.c: 15:     b = 0x00;
  4001  1478  01C7               	clrf	_b
  4002                           
  4003                           ;Button_src.c: 16:     c = 0x00;
  4004  1479  01C6               	clrf	_c
  4005                           
  4006                           ;Button_src.c: 17:     z = 0;
  4007  147A  01AA               	clrf	_z
  4008  147B  01AB               	clrf	_z+1
  4009                           
  4010                           ;Button_src.c: 18:     day_low = 0;
  4011  147C  01A8               	clrf	_day_low
  4012  147D  01A9               	clrf	_day_low+1
  4013                           
  4014                           ;Button_src.c: 19:     stats = 1;
  4015  147E  3001               	movlw	1
  4016  147F  00A4               	movwf	_stats
  4017  1480  3000               	movlw	0
  4018  1481  00A5               	movwf	_stats+1
  4019                           
  4020                           ;Button_src.c: 20:     p = 0;
  4021  1482  01A2               	clrf	_p
  4022  1483  01A3               	clrf	_p+1
  4023  1484  0008               	return
  4024  1485                     __end_of_initialise_buttons:	
  4025                           
  4026                           	psect	text10
  4027  13CB                     __ptext10:	
  4028 ;; *************** function _init_temp *****************
  4029 ;; Defined at:
  4030 ;;		line 6 in file "Thermometer_src.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		status,2
  4039 ;; Tracked objects:
  4040 ;;		On entry : 200/100
  4041 ;;		On exit  : 300/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4044 ;;      Params:         0       0       0       0       0
  4045 ;;      Locals:         0       0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0
  4047 ;;      Totals:         0       0       0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function _init_temp
  4059  13CB                     _init_temp:	
  4060                           
  4061                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in _init_temp: [status,2]
  4065  13CB  1683               	bsf	3,5	;RP0=1, select bank1
  4066  13CC  0189               	clrf	9	;volatile
  4067                           
  4068                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4069  13CD  1283               	bcf	3,5	;RP0=0, select bank0
  4070  13CE  0189               	clrf	9	;volatile
  4071  13CF  0008               	return
  4072  13D0                     __end_of_init_temp:	
  4073                           
  4074                           	psect	text11
  4075  13D0                     __ptext11:	
  4076 ;; *************** function _init *****************
  4077 ;; Defined at:
  4078 ;;		line 5 in file "LCD_src.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      void 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2
  4087 ;; Tracked objects:
  4088 ;;		On entry : 300/0
  4089 ;;		On exit  : 300/100
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4092 ;;      Params:         0       0       0       0       0
  4093 ;;      Locals:         0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0
  4095 ;;      Totals:         0       0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function _init
  4107  13D0                     _init:	
  4108                           
  4109                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _init: [wreg+status,2]
  4113  13D0  3007               	movlw	7
  4114  13D1  1683               	bsf	3,5	;RP0=1, select bank1
  4115  13D2  009F               	movwf	31	;volatile
  4116                           
  4117                           ;LCD_src.c: 8:  TRISA0=1;
  4118  13D3  1405               	bsf	5,0	;volatile
  4119                           
  4120                           ;LCD_src.c: 9:  TRISD=0X00;
  4121  13D4  0188               	clrf	8	;volatile
  4122                           
  4123                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4124  13D5  0181               	clrf	1	;volatile
  4125                           
  4126                           ;LCD_src.c: 11:  TRISE = 0X00;
  4127  13D6  0189               	clrf	9	;volatile
  4128  13D7  0008               	return
  4129  13D8                     __end_of_init:	
  4130                           
  4131                           	psect	text12
  4132  15B1                     __ptext12:	
  4133 ;; *************** function _get_time *****************
  4134 ;; Defined at:
  4135 ;;		line 23 in file "clock_src.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  i               2    6[COMMON] int 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 300/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4149 ;;      Params:         0       0       0       0       0
  4150 ;;      Locals:         2       0       0       0       0
  4151 ;;      Temps:          1       0       0       0       0
  4152 ;;      Totals:         3       0       0       0       0
  4153 ;;Total ram usage:        3 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    1
  4156 ;; This function calls:
  4157 ;;		_time_read_1
  4158 ;;		_time_write_1
  4159 ;; This function is called by:
  4160 ;;		_main
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _get_time
  4166  15B1                     _get_time:	
  4167                           
  4168                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4172  15B1  1283               	bcf	3,5	;RP0=0, select bank0
  4173  15B2  1303               	bcf	3,6	;RP1=0, select bank0
  4174  15B3  1686               	bsf	6,5	;volatile
  4175                           
  4176                           ;clock_src.c: 27:    time_write_1(0xbf);
  4177  15B4  30BF               	movlw	191
  4178  15B5  120A  158A  2001  160A  118A  	fcall	_time_write_1
  4179                           
  4180                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4181  15BA  01F6               	clrf	get_time@i
  4182  15BB  01F7               	clrf	get_time@i+1
  4183  15BC                     l3806:	
  4184                           
  4185                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4186  15BC  160A  118A  2609  160A  118A  	fcall	_time_read_1
  4187  15C1  00F5               	movwf	??_get_time
  4188  15C2  0876               	movf	get_time@i,w
  4189  15C3  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4190  15C4  0084               	movwf	4
  4191  15C5  0875               	movf	??_get_time,w
  4192  15C6  1383               	bcf	3,7	;select IRP bank1
  4193  15C7  0080               	movwf	0
  4194                           
  4195                           ;clock_src.c: 31:      }
  4196  15C8  3001               	movlw	1
  4197  15C9  07F6               	addwf	get_time@i,f
  4198  15CA  1803               	skipnc
  4199  15CB  0AF7               	incf	get_time@i+1,f
  4200  15CC  3000               	movlw	0
  4201  15CD  07F7               	addwf	get_time@i+1,f
  4202  15CE  0877               	movf	get_time@i+1,w
  4203  15CF  3A80               	xorlw	128
  4204  15D0  00FF               	movwf	127
  4205  15D1  3080               	movlw	128
  4206  15D2  027F               	subwf	127,w
  4207  15D3  1D03               	skipz
  4208  15D4  2DD7               	goto	u3035
  4209  15D5  3007               	movlw	7
  4210  15D6  0276               	subwf	get_time@i,w
  4211  15D7                     u3035:	
  4212  15D7  1C03               	skipc
  4213  15D8  2DBC               	goto	l3806
  4214                           
  4215                           ;clock_src.c: 32:    RB5=0;
  4216  15D9  1283               	bcf	3,5	;RP0=0, select bank0
  4217  15DA  1303               	bcf	3,6	;RP1=0, select bank0
  4218  15DB  1286               	bcf	6,5	;volatile
  4219  15DC  0008               	return
  4220  15DD                     __end_of_get_time:	
  4221                           
  4222                           	psect	text13
  4223  1609                     __ptext13:	
  4224 ;; *************** function _time_read_1 *****************
  4225 ;; Defined at:
  4226 ;;		line 130 in file "clock_src.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  j               2    2[COMMON] int 
  4231 ;;  time_rx         1    4[COMMON] unsigned char 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      unsigned char 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, btemp+1
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 300/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4241 ;;      Params:         0       0       0       0       0
  4242 ;;      Locals:         3       0       0       0       0
  4243 ;;      Temps:          2       0       0       0       0
  4244 ;;      Totals:         5       0       0       0       0
  4245 ;;Total ram usage:        5 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_get_time
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _time_read_1
  4256  1609                     _time_read_1:	
  4257                           
  4258                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4262  1609  01F4               	clrf	time_read_1@time_rx
  4263                           
  4264                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4265  160A  1683               	bsf	3,5	;RP0=1, select bank1
  4266  160B  1303               	bcf	3,6	;RP1=0, select bank1
  4267  160C  1606               	bsf	6,4	;volatile
  4268                           
  4269                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4270  160D  01F2               	clrf	time_read_1@j
  4271  160E  01F3               	clrf	time_read_1@j+1
  4272  160F                     l451:	
  4273                           
  4274                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4275  160F  1283               	bcf	3,5	;RP0=0, select bank0
  4276  1610  1303               	bcf	3,6	;RP1=0, select bank0
  4277  1611  1006               	bcf	6,0	;volatile
  4278                           
  4279                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4280  1612  0874               	movf	time_read_1@time_rx,w
  4281  1613  00F0               	movwf	??_time_read_1
  4282  1614  1003               	clrc
  4283  1615  0C70               	rrf	??_time_read_1,w
  4284  1616  00F1               	movwf	??_time_read_1+1
  4285  1617  0871               	movf	??_time_read_1+1,w
  4286  1618  00F4               	movwf	time_read_1@time_rx
  4287                           
  4288                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4289  1619  1E06               	btfss	6,4	;volatile
  4290  161A  2E20               	goto	l3390
  4291  161B  0874               	movf	time_read_1@time_rx,w
  4292  161C  3880               	iorlw	128
  4293  161D  00F0               	movwf	??_time_read_1
  4294  161E  0870               	movf	??_time_read_1,w
  4295  161F  00F4               	movwf	time_read_1@time_rx
  4296  1620                     l3390:	
  4297                           
  4298                           ;clock_src.c: 141:        RB0=1;
  4299  1620  1406               	bsf	6,0	;volatile
  4300                           
  4301                           ;clock_src.c: 142:       }
  4302  1621  3001               	movlw	1
  4303  1622  07F2               	addwf	time_read_1@j,f
  4304  1623  1803               	skipnc
  4305  1624  0AF3               	incf	time_read_1@j+1,f
  4306  1625  3000               	movlw	0
  4307  1626  07F3               	addwf	time_read_1@j+1,f
  4308  1627  0873               	movf	time_read_1@j+1,w
  4309  1628  3A80               	xorlw	128
  4310  1629  00FF               	movwf	127
  4311  162A  3080               	movlw	128
  4312  162B  027F               	subwf	127,w
  4313  162C  1D03               	skipz
  4314  162D  2E30               	goto	u2205
  4315  162E  3008               	movlw	8
  4316  162F  0272               	subwf	time_read_1@j,w
  4317  1630                     u2205:	
  4318  1630  1C03               	skipc
  4319  1631  2E0F               	goto	l451
  4320                           
  4321                           ;clock_src.c: 143:     TRISB4=0;
  4322  1632  1683               	bsf	3,5	;RP0=1, select bank1
  4323  1633  1303               	bcf	3,6	;RP1=0, select bank1
  4324  1634  1206               	bcf	6,4	;volatile
  4325                           
  4326                           ;clock_src.c: 144:     RB0=0;
  4327  1635  1283               	bcf	3,5	;RP0=0, select bank0
  4328  1636  1006               	bcf	6,0	;volatile
  4329                           
  4330                           ;clock_src.c: 145:     return(time_rx);
  4331  1637  0874               	movf	time_read_1@time_rx,w
  4332  1638  0008               	return
  4333  1639                     __end_of_time_read_1:	
  4334                           
  4335                           	psect	text14
  4336  09B4                     __ptext14:	
  4337 ;; *************** function _get_temp *****************
  4338 ;; Defined at:
  4339 ;;		line 89 in file "Thermometer_src.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  i               2    0        int 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 300/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4353 ;;      Params:         0       0       0       0       0
  4354 ;;      Locals:         0       0       0       0       0
  4355 ;;      Temps:          0       4       0       0       0
  4356 ;;      Totals:         0       4       0       0       0
  4357 ;;Total ram usage:        4 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    2
  4360 ;; This function calls:
  4361 ;;		___lbdiv
  4362 ;;		___lbmod
  4363 ;;		___lwdiv
  4364 ;;		___lwmod
  4365 ;;		_delay2
  4366 ;;		_read_byte
  4367 ;;		_reset_temp
  4368 ;;		_write_byte
  4369 ;; This function is called by:
  4370 ;;		_main
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _get_temp
  4376  09B4                     _get_temp:	
  4377                           
  4378                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4382  09B4  1683               	bsf	3,5	;RP0=1, select bank1
  4383  09B5  1409               	bsf	9,0	;volatile
  4384                           
  4385                           ;Thermometer_src.c: 93: reset_temp();
  4386  09B6  160A  118A  269F  120A  158A  	fcall	_reset_temp
  4387                           
  4388                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4389  09BB  30CC               	movlw	204
  4390  09BC  160A  118A  26D3  120A  158A  	fcall	_write_byte
  4391                           
  4392                           ;Thermometer_src.c: 95: delay2();
  4393  09C1  160A  118A  245D  120A  158A  	fcall	_delay2
  4394                           
  4395                           ;Thermometer_src.c: 96: write_byte(0X44);
  4396  09C6  3044               	movlw	68
  4397  09C7  160A  118A  26D3  120A  158A  	fcall	_write_byte
  4398                           
  4399                           ;Thermometer_src.c: 98: reset_temp();
  4400  09CC  160A  118A  269F  120A  158A  	fcall	_reset_temp
  4401                           
  4402                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4403  09D1  30CC               	movlw	204
  4404  09D2  160A  118A  26D3  120A  158A  	fcall	_write_byte
  4405                           
  4406                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4407  09D7  30BE               	movlw	190
  4408  09D8  160A  118A  26D3  120A  158A  	fcall	_write_byte
  4409                           
  4410                           ;Thermometer_src.c: 101: TLV=read_byte();
  4411  09DD  160A  118A  266B  120A  158A  	fcall	_read_byte
  4412  09E2  1283               	bcf	3,5	;RP0=0, select bank0
  4413  09E3  1303               	bcf	3,6	;RP1=0, select bank0
  4414  09E4  00DE               	movwf	??_get_temp
  4415  09E5  085E               	movf	??_get_temp,w
  4416  09E6  00DD               	movwf	_TLV
  4417                           
  4418                           ;Thermometer_src.c: 102: THV=read_byte();
  4419  09E7  160A  118A  266B  120A  158A  	fcall	_read_byte
  4420  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  4421  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  4422  09EE  00DE               	movwf	??_get_temp
  4423  09EF  085E               	movf	??_get_temp,w
  4424  09F0  00DC               	movwf	_THV
  4425                           
  4426                           ;Thermometer_src.c: 103: TRISE0 =1;
  4427  09F1  1683               	bsf	3,5	;RP0=1, select bank1
  4428  09F2  1409               	bsf	9,0	;volatile
  4429                           
  4430                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4431  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  4432  09F4  085C               	movf	_THV,w
  4433  09F5  00DE               	movwf	??_get_temp
  4434  09F6  3004               	movlw	4
  4435  09F7                     u2965:	
  4436  09F7  1003               	clrc
  4437  09F8  0DDE               	rlf	??_get_temp,f
  4438  09F9  3EFF               	addlw	-1
  4439  09FA  1D03               	skipz
  4440  09FB  29F7               	goto	u2965
  4441  09FC  303F               	movlw	63
  4442  09FD  055E               	andwf	??_get_temp,w
  4443  09FE  00DF               	movwf	??_get_temp+1
  4444  09FF  085D               	movf	_TLV,w
  4445  0A00  00E0               	movwf	??_get_temp+2
  4446  0A01  3004               	movlw	4
  4447  0A02                     u2975:	
  4448  0A02  1003               	clrc
  4449  0A03  0CE0               	rrf	??_get_temp+2,f
  4450  0A04  3EFF               	addlw	-1
  4451  0A05  1D03               	skipz
  4452  0A06  2A02               	goto	u2975
  4453  0A07  0860               	movf	??_get_temp+2,w
  4454  0A08  045F               	iorwf	??_get_temp+1,w
  4455  0A09  00E1               	movwf	??_get_temp+3
  4456  0A0A  0861               	movf	??_get_temp+3,w
  4457  0A0B  00DB               	movwf	_TZ
  4458                           
  4459                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4460  0A0C  085D               	movf	_TLV,w
  4461  0A0D  00DE               	movwf	??_get_temp
  4462  0A0E  3003               	movlw	3
  4463  0A0F                     u2985:	
  4464  0A0F  1003               	clrc
  4465  0A10  0DDE               	rlf	??_get_temp,f
  4466  0A11  3EFF               	addlw	-1
  4467  0A12  1D03               	skipz
  4468  0A13  2A0F               	goto	u2985
  4469  0A14  1003               	clrc
  4470  0A15  0D5E               	rlf	??_get_temp,w
  4471  0A16  00DF               	movwf	??_get_temp+1
  4472  0A17  085F               	movf	??_get_temp+1,w
  4473  0A18  00DA               	movwf	_TX
  4474                           
  4475                           ;Thermometer_src.c: 107: ge=TZ%10;
  4476  0A19  300A               	movlw	10
  4477  0A1A  00DE               	movwf	??_get_temp
  4478  0A1B  085E               	movf	??_get_temp,w
  4479  0A1C  00F0               	movwf	___lbmod@divisor
  4480  0A1D  085B               	movf	_TZ,w
  4481  0A1E  160A  118A  24FB  120A  158A  	fcall	___lbmod
  4482  0A23  00DF               	movwf	??_get_temp+1
  4483  0A24  085F               	movf	??_get_temp+1,w
  4484  0A25  00D8               	movwf	_ge
  4485                           
  4486                           ;Thermometer_src.c: 108: shi=TZ/10;
  4487  0A26  300A               	movlw	10
  4488  0A27  00DE               	movwf	??_get_temp
  4489  0A28  085E               	movf	??_get_temp,w
  4490  0A29  00F0               	movwf	___lbdiv@divisor
  4491  0A2A  085B               	movf	_TZ,w
  4492  0A2B  160A  118A  24DA  120A  158A  	fcall	___lbdiv
  4493  0A30  00DF               	movwf	??_get_temp+1
  4494  0A31  085F               	movf	??_get_temp+1,w
  4495  0A32  00D9               	movwf	_shi
  4496                           
  4497                           ;Thermometer_src.c: 109: wd=0;
  4498  0A33  01BC               	clrf	_wd
  4499  0A34  01BD               	clrf	_wd+1
  4500                           
  4501                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4502  0A35  1FDA               	btfss	_TX,7
  4503  0A36  2A3F               	goto	l3774
  4504  0A37  083C               	movf	_wd,w
  4505  0A38  3E88               	addlw	136
  4506  0A39  00BC               	movwf	_wd
  4507  0A3A  083D               	movf	_wd+1,w
  4508  0A3B  1803               	skipnc
  4509  0A3C  3E01               	addlw	1
  4510  0A3D  3E13               	addlw	19
  4511  0A3E  00BD               	movwf	_wd+1
  4512  0A3F                     l3774:	
  4513                           
  4514                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4515  0A3F  1F5A               	btfss	_TX,6
  4516  0A40  2A49               	goto	l3778
  4517  0A41  083C               	movf	_wd,w
  4518  0A42  3EC4               	addlw	196
  4519  0A43  00BC               	movwf	_wd
  4520  0A44  083D               	movf	_wd+1,w
  4521  0A45  1803               	skipnc
  4522  0A46  3E01               	addlw	1
  4523  0A47  3E09               	addlw	9
  4524  0A48  00BD               	movwf	_wd+1
  4525  0A49                     l3778:	
  4526                           
  4527                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4528  0A49  1EDA               	btfss	_TX,5
  4529  0A4A  2A53               	goto	l3782
  4530  0A4B  083C               	movf	_wd,w
  4531  0A4C  3EE2               	addlw	226
  4532  0A4D  00BC               	movwf	_wd
  4533  0A4E  083D               	movf	_wd+1,w
  4534  0A4F  1803               	skipnc
  4535  0A50  3E01               	addlw	1
  4536  0A51  3E04               	addlw	4
  4537  0A52  00BD               	movwf	_wd+1
  4538  0A53                     l3782:	
  4539                           
  4540                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4541  0A53  1E5A               	btfss	_TX,4
  4542  0A54  2A5D               	goto	l3786
  4543  0A55  083C               	movf	_wd,w
  4544  0A56  3E71               	addlw	113
  4545  0A57  00BC               	movwf	_wd
  4546  0A58  083D               	movf	_wd+1,w
  4547  0A59  1803               	skipnc
  4548  0A5A  3E01               	addlw	1
  4549  0A5B  3E02               	addlw	2
  4550  0A5C  00BD               	movwf	_wd+1
  4551  0A5D                     l3786:	
  4552                           
  4553                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4554  0A5D  30E8               	movlw	232
  4555  0A5E  00F6               	movwf	___lwdiv@divisor
  4556  0A5F  3003               	movlw	3
  4557  0A60  00F7               	movwf	___lwdiv@divisor+1
  4558  0A61  083D               	movf	_wd+1,w
  4559  0A62  00F9               	movwf	___lwdiv@dividend+1
  4560  0A63  083C               	movf	_wd,w
  4561  0A64  00F8               	movwf	___lwdiv@dividend
  4562  0A65  160A  118A  2709  120A  158A  	fcall	___lwdiv
  4563  0A6A  0876               	movf	?___lwdiv,w
  4564  0A6B  00DE               	movwf	??_get_temp
  4565  0A6C  085E               	movf	??_get_temp,w
  4566  0A6D  00D7               	movwf	_shifen
  4567                           
  4568                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4569  0A6E  3064               	movlw	100
  4570  0A6F  00F6               	movwf	___lwdiv@divisor
  4571  0A70  3000               	movlw	0
  4572  0A71  00F7               	movwf	___lwdiv@divisor+1
  4573  0A72  083D               	movf	_wd+1,w
  4574  0A73  00F3               	movwf	___lwmod@dividend+1
  4575  0A74  083C               	movf	_wd,w
  4576  0A75  00F2               	movwf	___lwmod@dividend
  4577  0A76  30E8               	movlw	232
  4578  0A77  00F0               	movwf	___lwmod@divisor
  4579  0A78  3003               	movlw	3
  4580  0A79  00F1               	movwf	___lwmod@divisor+1
  4581  0A7A  160A  118A  2639  120A  158A  	fcall	___lwmod
  4582  0A7F  0871               	movf	?___lwmod+1,w
  4583  0A80  00F9               	movwf	___lwdiv@dividend+1
  4584  0A81  0870               	movf	?___lwmod,w
  4585  0A82  00F8               	movwf	___lwdiv@dividend
  4586  0A83  160A  118A  2709  120A  158A  	fcall	___lwdiv
  4587  0A88  0876               	movf	?___lwdiv,w
  4588  0A89  00DE               	movwf	??_get_temp
  4589  0A8A  085E               	movf	??_get_temp,w
  4590  0A8B  00D6               	movwf	_baifen
  4591                           
  4592                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4593  0A8C  300A               	movlw	10
  4594  0A8D  00F6               	movwf	___lwdiv@divisor
  4595  0A8E  3000               	movlw	0
  4596  0A8F  00F7               	movwf	___lwdiv@divisor+1
  4597  0A90  083D               	movf	_wd+1,w
  4598  0A91  00F3               	movwf	___lwmod@dividend+1
  4599  0A92  083C               	movf	_wd,w
  4600  0A93  00F2               	movwf	___lwmod@dividend
  4601  0A94  3064               	movlw	100
  4602  0A95  00F0               	movwf	___lwmod@divisor
  4603  0A96  3000               	movlw	0
  4604  0A97  00F1               	movwf	___lwmod@divisor+1
  4605  0A98  160A  118A  2639  120A  158A  	fcall	___lwmod
  4606  0A9D  0871               	movf	?___lwmod+1,w
  4607  0A9E  00F9               	movwf	___lwdiv@dividend+1
  4608  0A9F  0870               	movf	?___lwmod,w
  4609  0AA0  00F8               	movwf	___lwdiv@dividend
  4610  0AA1  160A  118A  2709  120A  158A  	fcall	___lwdiv
  4611  0AA6  0876               	movf	?___lwdiv,w
  4612  0AA7  00DE               	movwf	??_get_temp
  4613  0AA8  085E               	movf	??_get_temp,w
  4614  0AA9  00D5               	movwf	_qianfen
  4615                           
  4616                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4617  0AAA  300A               	movlw	10
  4618  0AAB  00F0               	movwf	___lwmod@divisor
  4619  0AAC  3000               	movlw	0
  4620  0AAD  00F1               	movwf	___lwmod@divisor+1
  4621  0AAE  083D               	movf	_wd+1,w
  4622  0AAF  00F3               	movwf	___lwmod@dividend+1
  4623  0AB0  083C               	movf	_wd,w
  4624  0AB1  00F2               	movwf	___lwmod@dividend
  4625  0AB2  160A  118A  2639   	fcall	___lwmod
  4626  0AB5  0870               	movf	?___lwmod,w
  4627  0AB6  00DE               	movwf	??_get_temp
  4628  0AB7  085E               	movf	??_get_temp,w
  4629  0AB8  00D4               	movwf	_wanfen
  4630                           
  4631                           ;Thermometer_src.c: 118: __nop();
  4632  0AB9  0000               	nop
  4633  0ABA  0008               	return
  4634  0ABB                     __end_of_get_temp:	
  4635                           
  4636                           	psect	text15
  4637  16D3                     __ptext15:	
  4638 ;; *************** function _write_byte *****************
  4639 ;; Defined at:
  4640 ;;		line 40 in file "Thermometer_src.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  val             1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  val             1    7[COMMON] unsigned char 
  4645 ;;  i               1    8[COMMON] unsigned char 
  4646 ;;  temp            1    6[COMMON] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/100
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4656 ;;      Params:         0       0       0       0       0
  4657 ;;      Locals:         3       0       0       0       0
  4658 ;;      Temps:          2       0       0       0       0
  4659 ;;      Totals:         5       0       0       0       0
  4660 ;;Total ram usage:        5 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    1
  4663 ;; This function calls:
  4664 ;;		_delay_temp
  4665 ;; This function is called by:
  4666 ;;		_get_temp
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           
  4671                           ;psect for function _write_byte
  4672  16D3                     _write_byte:	
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4676                           ;write_byte@val stored from wreg
  4677  16D3  00F7               	movwf	write_byte@val
  4678                           
  4679                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4680  16D4  3008               	movlw	8
  4681  16D5  00F4               	movwf	??_write_byte
  4682  16D6  0874               	movf	??_write_byte,w
  4683  16D7  00F8               	movwf	write_byte@i
  4684  16D8                     l3278:	
  4685                           
  4686                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4687  16D8  0877               	movf	write_byte@val,w
  4688  16D9  3901               	andlw	1
  4689  16DA  00F4               	movwf	??_write_byte
  4690  16DB  0874               	movf	??_write_byte,w
  4691  16DC  00F6               	movwf	write_byte@temp
  4692                           
  4693                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4694  16DD  1283               	bcf	3,5	;RP0=0, select bank0
  4695  16DE  1303               	bcf	3,6	;RP1=0, select bank0
  4696  16DF  1009               	bcf	9,0	;volatile
  4697  16E0  1683               	bsf	3,5	;RP0=1, select bank1
  4698  16E1  1009               	bcf	9,0	;volatile
  4699                           
  4700                           ;Thermometer_src.c: 48:    __nop();
  4701  16E2  0000               	nop
  4702                           
  4703                           ;Thermometer_src.c: 49:    __nop();
  4704  16E3  0000               	nop
  4705                           
  4706                           ;Thermometer_src.c: 50:    __nop();
  4707  16E4  0000               	nop
  4708                           
  4709                           ;Thermometer_src.c: 51:    __nop();
  4710  16E5  0000               	nop
  4711                           
  4712                           ;Thermometer_src.c: 52:    __nop();
  4713  16E6  0000               	nop
  4714                           
  4715                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4716  16E7  0376               	decf	write_byte@temp,w
  4717  16E8  1D03               	btfss	3,2
  4718  16E9  2EED               	goto	l3298
  4719  16EA  1683               	bsf	3,5	;RP0=1, select bank1
  4720  16EB  1303               	bcf	3,6	;RP1=0, select bank1
  4721  16EC  1409               	bsf	9,0	;volatile
  4722  16ED                     l3298:	
  4723                           
  4724                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4725  16ED  3007               	movlw	7
  4726  16EE  00F4               	movwf	??_write_byte
  4727  16EF  0874               	movf	??_write_byte,w
  4728  16F0  00F0               	movwf	delay_temp@y
  4729  16F1  3002               	movlw	2
  4730  16F2  160A  118A  23E8  160A  118A  	fcall	_delay_temp
  4731                           
  4732                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4733  16F7  1683               	bsf	3,5	;RP0=1, select bank1
  4734  16F8  1303               	bcf	3,6	;RP1=0, select bank1
  4735  16F9  1409               	bsf	9,0	;volatile
  4736                           
  4737                           ;Thermometer_src.c: 56:    __nop();
  4738  16FA  0000               	nop
  4739                           
  4740                           ;Thermometer_src.c: 57:    __nop();
  4741  16FB  0000               	nop
  4742                           
  4743                           ;Thermometer_src.c: 58:    val=val>>1;
  4744  16FC  0877               	movf	write_byte@val,w
  4745  16FD  00F4               	movwf	??_write_byte
  4746  16FE  1003               	clrc
  4747  16FF  0C74               	rrf	??_write_byte,w
  4748  1700  00F5               	movwf	??_write_byte+1
  4749  1701  0875               	movf	??_write_byte+1,w
  4750  1702  00F7               	movwf	write_byte@val
  4751                           
  4752                           ;Thermometer_src.c: 59:   }
  4753  1703  3001               	movlw	1
  4754  1704  02F8               	subwf	write_byte@i,f
  4755  1705  0878               	movf	write_byte@i,w
  4756  1706  1903               	btfsc	3,2
  4757  1707  0008               	return
  4758  1708  2ED8               	goto	l3278
  4759  1709                     __end_of_write_byte:	
  4760                           
  4761                           	psect	text16
  4762  169F                     __ptext16:	
  4763 ;; *************** function _reset_temp *****************
  4764 ;; Defined at:
  4765 ;;		line 25 in file "Thermometer_src.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;		None
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  presence        1    5[COMMON] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      void 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0, pclath, cstack
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/100
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4779 ;;      Params:         0       0       0       0       0
  4780 ;;      Locals:         1       0       0       0       0
  4781 ;;      Temps:          1       0       0       0       0
  4782 ;;      Totals:         2       0       0       0       0
  4783 ;;Total ram usage:        2 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    1
  4786 ;; This function calls:
  4787 ;;		_delay_temp
  4788 ;; This function is called by:
  4789 ;;		_get_temp
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _reset_temp
  4795  169F                     _reset_temp:	
  4796                           
  4797                           ;Thermometer_src.c: 27:   char presence=1;
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4801  169F  01F5               	clrf	reset_temp@presence
  4802  16A0  0AF5               	incf	reset_temp@presence,f
  4803  16A1                     l3270:	
  4804                           ;Thermometer_src.c: 28:   while(presence)
  4805                           
  4806                           
  4807                           ;Thermometer_src.c: 28:   while(presence)
  4808  16A1  0875               	movf	reset_temp@presence,w
  4809  16A2  1903               	btfsc	3,2
  4810  16A3  0008               	return
  4811                           
  4812                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4813  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  4814  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  4815  16A6  1009               	bcf	9,0	;volatile
  4816  16A7  1683               	bsf	3,5	;RP0=1, select bank1
  4817  16A8  1009               	bcf	9,0	;volatile
  4818                           
  4819                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4820  16A9  3046               	movlw	70
  4821  16AA  00F4               	movwf	??_reset_temp
  4822  16AB  0874               	movf	??_reset_temp,w
  4823  16AC  00F0               	movwf	delay_temp@y
  4824  16AD  3002               	movlw	2
  4825  16AE  160A  118A  23E8  160A  118A  	fcall	_delay_temp
  4826                           
  4827                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4828  16B3  1683               	bsf	3,5	;RP0=1, select bank1
  4829  16B4  1303               	bcf	3,6	;RP1=0, select bank1
  4830  16B5  1409               	bsf	9,0	;volatile
  4831                           
  4832                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4833  16B6  3008               	movlw	8
  4834  16B7  00F4               	movwf	??_reset_temp
  4835  16B8  0874               	movf	??_reset_temp,w
  4836  16B9  00F0               	movwf	delay_temp@y
  4837  16BA  3002               	movlw	2
  4838  16BB  160A  118A  23E8  160A  118A  	fcall	_delay_temp
  4839                           
  4840                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4841  16C0  1283               	bcf	3,5	;RP0=0, select bank0
  4842  16C1  1303               	bcf	3,6	;RP1=0, select bank0
  4843  16C2  1C09               	btfss	9,0	;volatile
  4844  16C3  2EC7               	goto	l3266
  4845  16C4  01F5               	clrf	reset_temp@presence
  4846  16C5  0AF5               	incf	reset_temp@presence,f
  4847  16C6  2EC8               	goto	l3268
  4848  16C7                     l3266:	
  4849  16C7  01F5               	clrf	reset_temp@presence
  4850  16C8                     l3268:	
  4851                           
  4852                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4853  16C8  303C               	movlw	60
  4854  16C9  00F4               	movwf	??_reset_temp
  4855  16CA  0874               	movf	??_reset_temp,w
  4856  16CB  00F0               	movwf	delay_temp@y
  4857  16CC  3002               	movlw	2
  4858  16CD  160A  118A  23E8  160A  118A  	fcall	_delay_temp
  4859  16D2  2EA1               	goto	l3270
  4860  16D3                     __end_of_reset_temp:	
  4861                           
  4862                           	psect	text17
  4863  166B                     __ptext17:	
  4864 ;; *************** function _read_byte *****************
  4865 ;; Defined at:
  4866 ;;		line 62 in file "Thermometer_src.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  i               1    6[COMMON] unsigned char 
  4871 ;;  value           1    5[COMMON] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      unsigned char 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/100
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4881 ;;      Params:         0       0       0       0       0
  4882 ;;      Locals:         2       0       0       0       0
  4883 ;;      Temps:          1       0       0       0       0
  4884 ;;      Totals:         3       0       0       0       0
  4885 ;;Total ram usage:        3 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    1
  4888 ;; This function calls:
  4889 ;;		_delay_temp
  4890 ;; This function is called by:
  4891 ;;		_get_temp
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _read_byte
  4897  166B                     _read_byte:	
  4898                           
  4899                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4903  166B  01F5               	clrf	read_byte@value
  4904                           
  4905                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4906  166C  3008               	movlw	8
  4907  166D  00F4               	movwf	??_read_byte
  4908  166E  0874               	movf	??_read_byte,w
  4909  166F  00F6               	movwf	read_byte@i
  4910  1670                     l3320:	
  4911                           
  4912                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4913  1670  1003               	clrc
  4914  1671  0CF5               	rrf	read_byte@value,f
  4915                           
  4916                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4917  1672  1283               	bcf	3,5	;RP0=0, select bank0
  4918  1673  1303               	bcf	3,6	;RP1=0, select bank0
  4919  1674  1009               	bcf	9,0	;volatile
  4920  1675  1683               	bsf	3,5	;RP0=1, select bank1
  4921  1676  1009               	bcf	9,0	;volatile
  4922                           
  4923                           ;Thermometer_src.c: 71:    __nop();
  4924  1677  0000               	nop
  4925                           
  4926                           ;Thermometer_src.c: 72:    __nop();
  4927  1678  0000               	nop
  4928                           
  4929                           ;Thermometer_src.c: 73:    __nop();
  4930  1679  0000               	nop
  4931                           
  4932                           ;Thermometer_src.c: 74:    __nop();
  4933  167A  0000               	nop
  4934                           
  4935                           ;Thermometer_src.c: 75:    __nop();
  4936  167B  0000               	nop
  4937                           
  4938                           ;Thermometer_src.c: 76:    __nop();
  4939  167C  0000               	nop
  4940                           
  4941                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4942  167D  1683               	bsf	3,5	;RP0=1, select bank1
  4943  167E  1303               	bcf	3,6	;RP1=0, select bank1
  4944  167F  1409               	bsf	9,0	;volatile
  4945                           
  4946                           ;Thermometer_src.c: 78:    __nop();
  4947  1680  0000               	nop
  4948                           
  4949                           ;Thermometer_src.c: 79:    __nop();
  4950  1681  0000               	nop
  4951                           
  4952                           ;Thermometer_src.c: 80:    __nop();
  4953  1682  0000               	nop
  4954                           
  4955                           ;Thermometer_src.c: 81:    __nop();
  4956  1683  0000               	nop
  4957                           
  4958                           ;Thermometer_src.c: 82:    __nop();
  4959  1684  0000               	nop
  4960                           
  4961                           ;Thermometer_src.c: 83:    j=RE0;
  4962  1685  3000               	movlw	0
  4963  1686  1283               	bcf	3,5	;RP0=0, select bank0
  4964  1687  1303               	bcf	3,6	;RP1=0, select bank0
  4965  1688  1809               	btfsc	9,0	;volatile
  4966  1689  3001               	movlw	1
  4967  168A  00BE               	movwf	read_byte@j
  4968                           
  4969                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4970  168B  083E               	movf	read_byte@j,w
  4971  168C  1D03               	btfss	3,2
  4972  168D  17F5               	bsf	read_byte@value,7
  4973                           
  4974                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4975  168E  3007               	movlw	7
  4976  168F  00F4               	movwf	??_read_byte
  4977  1690  0874               	movf	??_read_byte,w
  4978  1691  00F0               	movwf	delay_temp@y
  4979  1692  3002               	movlw	2
  4980  1693  160A  118A  23E8  160A  118A  	fcall	_delay_temp
  4981                           
  4982                           ;Thermometer_src.c: 86:   }
  4983  1698  3001               	movlw	1
  4984  1699  02F6               	subwf	read_byte@i,f
  4985  169A  0876               	movf	read_byte@i,w
  4986  169B  1D03               	btfss	3,2
  4987  169C  2E70               	goto	l3320
  4988                           
  4989                           ;Thermometer_src.c: 87:   return(value);
  4990  169D  0875               	movf	read_byte@value,w
  4991  169E  0008               	return
  4992  169F                     __end_of_read_byte:	
  4993                           
  4994                           	psect	text18
  4995  13E8                     __ptext18:	
  4996 ;; *************** function _delay_temp *****************
  4997 ;; Defined at:
  4998 ;;		line 121 in file "Thermometer_src.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  x               1    wreg     unsigned char 
  5001 ;;  y               1    0[COMMON] unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  x               1    2[COMMON] unsigned char 
  5004 ;;  z               1    3[COMMON] unsigned char 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/100
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5014 ;;      Params:         1       0       0       0       0
  5015 ;;      Locals:         2       0       0       0       0
  5016 ;;      Temps:          1       0       0       0       0
  5017 ;;      Totals:         4       0       0       0       0
  5018 ;;Total ram usage:        4 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_reset_temp
  5024 ;;		_write_byte
  5025 ;;		_read_byte
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           
  5030                           ;psect for function _delay_temp
  5031  13E8                     _delay_temp:	
  5032                           
  5033                           ;incstack = 0
  5034                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5035                           ;delay_temp@x stored from wreg
  5036  13E8  00F2               	movwf	delay_temp@x
  5037  13E9                     l338:	
  5038                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5039                           
  5040                           
  5041                           ;Thermometer_src.c: 125:  z=y;
  5042  13E9  0870               	movf	delay_temp@y,w
  5043  13EA  00F1               	movwf	??_delay_temp
  5044  13EB  0871               	movf	??_delay_temp,w
  5045  13EC  00F3               	movwf	delay_temp@z
  5046  13ED                     l3196:	
  5047  13ED  3001               	movlw	1
  5048  13EE  02F3               	subwf	delay_temp@z,f
  5049  13EF  1D03               	btfss	3,2
  5050  13F0  2BED               	goto	l3196
  5051                           
  5052                           ;Thermometer_src.c: 127:  }while(--x);
  5053  13F1  3001               	movlw	1
  5054  13F2  02F2               	subwf	delay_temp@x,f
  5055  13F3  1903               	btfsc	3,2
  5056  13F4  0008               	return
  5057  13F5  2BE9               	goto	l338
  5058  13F6                     __end_of_delay_temp:	
  5059                           
  5060                           	psect	text19
  5061  145D                     __ptext19:	
  5062 ;; *************** function _delay2 *****************
  5063 ;; Defined at:
  5064 ;;		line 130 in file "Thermometer_src.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;		None
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  i               2    0[COMMON] int 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, btemp+1
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/100
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5078 ;;      Params:         0       0       0       0       0
  5079 ;;      Locals:         2       0       0       0       0
  5080 ;;      Temps:          0       0       0       0       0
  5081 ;;      Totals:         2       0       0       0       0
  5082 ;;Total ram usage:        2 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; This function calls:
  5085 ;;		Nothing
  5086 ;; This function is called by:
  5087 ;;		_get_temp
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _delay2
  5093  145D                     _delay2:	
  5094                           
  5095                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5099  145D  01F0               	clrf	delay2@i
  5100  145E  01F1               	clrf	delay2@i+1
  5101  145F                     l3372:	
  5102                           
  5103                           ;Thermometer_src.c: 132:  }
  5104  145F  3001               	movlw	1
  5105  1460  07F0               	addwf	delay2@i,f
  5106  1461  1803               	skipnc
  5107  1462  0AF1               	incf	delay2@i+1,f
  5108  1463  3000               	movlw	0
  5109  1464  07F1               	addwf	delay2@i+1,f
  5110  1465  0871               	movf	delay2@i+1,w
  5111  1466  3A80               	xorlw	128
  5112  1467  00FF               	movwf	127
  5113  1468  3080               	movlw	128
  5114  1469  027F               	subwf	127,w
  5115  146A  1D03               	skipz
  5116  146B  2C6E               	goto	u2185
  5117  146C  3032               	movlw	50
  5118  146D  0270               	subwf	delay2@i,w
  5119  146E                     u2185:	
  5120  146E  1803               	btfsc	3,0
  5121  146F  0008               	return
  5122  1470  2C5F               	goto	l3372
  5123  1471                     __end_of_delay2:	
  5124                           
  5125                           	psect	text20
  5126  1639                     __ptext20:	
  5127 ;; *************** function ___lwmod *****************
  5128 ;; Defined at:
  5129 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;  divisor         2    0[COMMON] unsigned int 
  5132 ;;  dividend        2    2[COMMON] unsigned int 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  counter         1    5[COMMON] unsigned char 
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  2    0[COMMON] unsigned int 
  5137 ;; Registers used:
  5138 ;;		wreg, status,2, status,0
  5139 ;; Tracked objects:
  5140 ;;		On entry : 300/0
  5141 ;;		On exit  : 300/0
  5142 ;;		Unchanged: 300/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5144 ;;      Params:         4       0       0       0       0
  5145 ;;      Locals:         1       0       0       0       0
  5146 ;;      Temps:          1       0       0       0       0
  5147 ;;      Totals:         6       0       0       0       0
  5148 ;;Total ram usage:        6 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_get_temp
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function ___lwmod
  5159  1639                     ___lwmod:	
  5160                           
  5161                           ;incstack = 0
  5162                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5163  1639  0870               	movf	___lwmod@divisor,w
  5164  163A  0471               	iorwf	___lwmod@divisor+1,w
  5165  163B  1903               	btfsc	3,2
  5166  163C  2E66               	goto	l3686
  5167  163D  01F5               	clrf	___lwmod@counter
  5168  163E  0AF5               	incf	___lwmod@counter,f
  5169  163F                     l3676:	
  5170  163F  1BF1               	btfsc	___lwmod@divisor+1,7
  5171  1640  2E4D               	goto	l3678
  5172  1641  3001               	movlw	1
  5173  1642                     u2915:	
  5174  1642  1003               	clrc
  5175  1643  0DF0               	rlf	___lwmod@divisor,f
  5176  1644  0DF1               	rlf	___lwmod@divisor+1,f
  5177  1645  3EFF               	addlw	-1
  5178  1646  1D03               	skipz
  5179  1647  2E42               	goto	u2915
  5180  1648  3001               	movlw	1
  5181  1649  00F4               	movwf	??___lwmod
  5182  164A  0874               	movf	??___lwmod,w
  5183  164B  07F5               	addwf	___lwmod@counter,f
  5184  164C  2E3F               	goto	l3676
  5185  164D                     l3678:	
  5186  164D  0871               	movf	___lwmod@divisor+1,w
  5187  164E  0273               	subwf	___lwmod@dividend+1,w
  5188  164F  1D03               	skipz
  5189  1650  2E53               	goto	u2935
  5190  1651  0870               	movf	___lwmod@divisor,w
  5191  1652  0272               	subwf	___lwmod@dividend,w
  5192  1653                     u2935:	
  5193  1653  1C03               	skipc
  5194  1654  2E5B               	goto	l3682
  5195  1655  0870               	movf	___lwmod@divisor,w
  5196  1656  02F2               	subwf	___lwmod@dividend,f
  5197  1657  0871               	movf	___lwmod@divisor+1,w
  5198  1658  1C03               	skipc
  5199  1659  03F3               	decf	___lwmod@dividend+1,f
  5200  165A  02F3               	subwf	___lwmod@dividend+1,f
  5201  165B                     l3682:	
  5202  165B  3001               	movlw	1
  5203  165C                     u2945:	
  5204  165C  1003               	clrc
  5205  165D  0CF1               	rrf	___lwmod@divisor+1,f
  5206  165E  0CF0               	rrf	___lwmod@divisor,f
  5207  165F  3EFF               	addlw	-1
  5208  1660  1D03               	skipz
  5209  1661  2E5C               	goto	u2945
  5210  1662  3001               	movlw	1
  5211  1663  02F5               	subwf	___lwmod@counter,f
  5212  1664  1D03               	btfss	3,2
  5213  1665  2E4D               	goto	l3678
  5214  1666                     l3686:	
  5215  1666  0873               	movf	___lwmod@dividend+1,w
  5216  1667  00F1               	movwf	?___lwmod+1
  5217  1668  0872               	movf	___lwmod@dividend,w
  5218  1669  00F0               	movwf	?___lwmod
  5219  166A  0008               	return
  5220  166B                     __end_of___lwmod:	
  5221                           
  5222                           	psect	text21
  5223  1709                     __ptext21:	
  5224 ;; *************** function ___lwdiv *****************
  5225 ;; Defined at:
  5226 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  divisor         2    6[COMMON] unsigned int 
  5229 ;;  dividend        2    8[COMMON] unsigned int 
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;  quotient        2   11[COMMON] unsigned int 
  5232 ;;  counter         1   13[COMMON] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  2    6[COMMON] unsigned int 
  5235 ;; Registers used:
  5236 ;;		wreg, status,2, status,0
  5237 ;; Tracked objects:
  5238 ;;		On entry : 300/0
  5239 ;;		On exit  : 300/0
  5240 ;;		Unchanged: 300/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5242 ;;      Params:         4       0       0       0       0
  5243 ;;      Locals:         3       0       0       0       0
  5244 ;;      Temps:          1       0       0       0       0
  5245 ;;      Totals:         8       0       0       0       0
  5246 ;;Total ram usage:        8 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_get_temp
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function ___lwdiv
  5257  1709                     ___lwdiv:	
  5258                           
  5259                           ;incstack = 0
  5260                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5261  1709  01FB               	clrf	___lwdiv@quotient
  5262  170A  01FC               	clrf	___lwdiv@quotient+1
  5263  170B  0876               	movf	___lwdiv@divisor,w
  5264  170C  0477               	iorwf	___lwdiv@divisor+1,w
  5265  170D  1903               	btfsc	3,2
  5266  170E  2F40               	goto	l3664
  5267  170F  01FD               	clrf	___lwdiv@counter
  5268  1710  0AFD               	incf	___lwdiv@counter,f
  5269  1711                     l3652:	
  5270  1711  1BF7               	btfsc	___lwdiv@divisor+1,7
  5271  1712  2F1F               	goto	l3654
  5272  1713  3001               	movlw	1
  5273  1714                     u2845:	
  5274  1714  1003               	clrc
  5275  1715  0DF6               	rlf	___lwdiv@divisor,f
  5276  1716  0DF7               	rlf	___lwdiv@divisor+1,f
  5277  1717  3EFF               	addlw	-1
  5278  1718  1D03               	skipz
  5279  1719  2F14               	goto	u2845
  5280  171A  3001               	movlw	1
  5281  171B  00FA               	movwf	??___lwdiv
  5282  171C  087A               	movf	??___lwdiv,w
  5283  171D  07FD               	addwf	___lwdiv@counter,f
  5284  171E  2F11               	goto	l3652
  5285  171F                     l3654:	
  5286  171F  3001               	movlw	1
  5287  1720                     u2865:	
  5288  1720  1003               	clrc
  5289  1721  0DFB               	rlf	___lwdiv@quotient,f
  5290  1722  0DFC               	rlf	___lwdiv@quotient+1,f
  5291  1723  3EFF               	addlw	-1
  5292  1724  1D03               	skipz
  5293  1725  2F20               	goto	u2865
  5294  1726  0877               	movf	___lwdiv@divisor+1,w
  5295  1727  0279               	subwf	___lwdiv@dividend+1,w
  5296  1728  1D03               	skipz
  5297  1729  2F2C               	goto	u2875
  5298  172A  0876               	movf	___lwdiv@divisor,w
  5299  172B  0278               	subwf	___lwdiv@dividend,w
  5300  172C                     u2875:	
  5301  172C  1C03               	skipc
  5302  172D  2F35               	goto	l3660
  5303  172E  0876               	movf	___lwdiv@divisor,w
  5304  172F  02F8               	subwf	___lwdiv@dividend,f
  5305  1730  0877               	movf	___lwdiv@divisor+1,w
  5306  1731  1C03               	skipc
  5307  1732  03F9               	decf	___lwdiv@dividend+1,f
  5308  1733  02F9               	subwf	___lwdiv@dividend+1,f
  5309  1734  147B               	bsf	___lwdiv@quotient,0
  5310  1735                     l3660:	
  5311  1735  3001               	movlw	1
  5312  1736                     u2885:	
  5313  1736  1003               	clrc
  5314  1737  0CF7               	rrf	___lwdiv@divisor+1,f
  5315  1738  0CF6               	rrf	___lwdiv@divisor,f
  5316  1739  3EFF               	addlw	-1
  5317  173A  1D03               	skipz
  5318  173B  2F36               	goto	u2885
  5319  173C  3001               	movlw	1
  5320  173D  02FD               	subwf	___lwdiv@counter,f
  5321  173E  1D03               	btfss	3,2
  5322  173F  2F1F               	goto	l3654
  5323  1740                     l3664:	
  5324  1740  087C               	movf	___lwdiv@quotient+1,w
  5325  1741  00F7               	movwf	?___lwdiv+1
  5326  1742  087B               	movf	___lwdiv@quotient,w
  5327  1743  00F6               	movwf	?___lwdiv
  5328  1744  0008               	return
  5329  1745                     __end_of___lwdiv:	
  5330                           
  5331                           	psect	text22
  5332  14FB                     __ptext22:	
  5333 ;; *************** function ___lbmod *****************
  5334 ;; Defined at:
  5335 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  dividend        1    wreg     unsigned char 
  5338 ;;  divisor         1    0[COMMON] unsigned char 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  dividend        1    4[COMMON] unsigned char 
  5341 ;;  rem             1    6[COMMON] unsigned char 
  5342 ;;  counter         1    5[COMMON] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      unsigned char 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 300/0
  5349 ;;		On exit  : 300/0
  5350 ;;		Unchanged: 300/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5352 ;;      Params:         1       0       0       0       0
  5353 ;;      Locals:         3       0       0       0       0
  5354 ;;      Temps:          3       0       0       0       0
  5355 ;;      Totals:         7       0       0       0       0
  5356 ;;Total ram usage:        7 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_get_temp
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function ___lbmod
  5367  14FB                     ___lbmod:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5371                           ;___lbmod@dividend stored from wreg
  5372  14FB  00F4               	movwf	___lbmod@dividend
  5373  14FC  3008               	movlw	8
  5374  14FD  00F1               	movwf	??___lbmod
  5375  14FE  0871               	movf	??___lbmod,w
  5376  14FF  00F5               	movwf	___lbmod@counter
  5377  1500  01F6               	clrf	___lbmod@rem
  5378  1501                     l3630:	
  5379  1501  0874               	movf	___lbmod@dividend,w
  5380  1502  00F1               	movwf	??___lbmod
  5381  1503  3007               	movlw	7
  5382  1504                     u2805:	
  5383  1504  1003               	clrc
  5384  1505  0CF1               	rrf	??___lbmod,f
  5385  1506  3EFF               	addlw	-1
  5386  1507  1D03               	skipz
  5387  1508  2D04               	goto	u2805
  5388  1509  0876               	movf	___lbmod@rem,w
  5389  150A  00F2               	movwf	??___lbmod+1
  5390  150B  0772               	addwf	??___lbmod+1,w
  5391  150C  0471               	iorwf	??___lbmod,w
  5392  150D  00F3               	movwf	??___lbmod+2
  5393  150E  0873               	movf	??___lbmod+2,w
  5394  150F  00F6               	movwf	___lbmod@rem
  5395  1510  1003               	clrc
  5396  1511  0DF4               	rlf	___lbmod@dividend,f
  5397  1512  0870               	movf	___lbmod@divisor,w
  5398  1513  0276               	subwf	___lbmod@rem,w
  5399  1514  1C03               	skipc
  5400  1515  2D18               	goto	l1270
  5401  1516  0870               	movf	___lbmod@divisor,w
  5402  1517  02F6               	subwf	___lbmod@rem,f
  5403  1518                     l1270:	
  5404  1518  3001               	movlw	1
  5405  1519  02F5               	subwf	___lbmod@counter,f
  5406  151A  1D03               	btfss	3,2
  5407  151B  2D01               	goto	l3630
  5408  151C  0876               	movf	___lbmod@rem,w
  5409  151D  0008               	return
  5410  151E                     __end_of___lbmod:	
  5411                           
  5412                           	psect	text23
  5413  14DA                     __ptext23:	
  5414 ;; *************** function ___lbdiv *****************
  5415 ;; Defined at:
  5416 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  dividend        1    wreg     unsigned char 
  5419 ;;  divisor         1    0[COMMON] unsigned char 
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;  dividend        1    2[COMMON] unsigned char 
  5422 ;;  quotient        1    4[COMMON] unsigned char 
  5423 ;;  counter         1    3[COMMON] unsigned char 
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      unsigned char 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0
  5428 ;; Tracked objects:
  5429 ;;		On entry : 300/0
  5430 ;;		On exit  : 300/0
  5431 ;;		Unchanged: 300/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5433 ;;      Params:         1       0       0       0       0
  5434 ;;      Locals:         3       0       0       0       0
  5435 ;;      Temps:          1       0       0       0       0
  5436 ;;      Totals:         5       0       0       0       0
  5437 ;;Total ram usage:        5 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; This function calls:
  5440 ;;		Nothing
  5441 ;; This function is called by:
  5442 ;;		_get_temp
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           
  5447                           ;psect for function ___lbdiv
  5448  14DA                     ___lbdiv:	
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5452                           ;___lbdiv@dividend stored from wreg
  5453  14DA  00F2               	movwf	___lbdiv@dividend
  5454  14DB  01F4               	clrf	___lbdiv@quotient
  5455  14DC  0870               	movf	___lbdiv@divisor,w
  5456  14DD  1903               	btfsc	3,2
  5457  14DE  2CF9               	goto	l3622
  5458  14DF  01F3               	clrf	___lbdiv@counter
  5459  14E0  0AF3               	incf	___lbdiv@counter,f
  5460  14E1                     l3610:	
  5461  14E1  1BF0               	btfsc	___lbdiv@divisor,7
  5462  14E2  2CEA               	goto	l3612
  5463  14E3  1003               	clrc
  5464  14E4  0DF0               	rlf	___lbdiv@divisor,f
  5465  14E5  3001               	movlw	1
  5466  14E6  00F1               	movwf	??___lbdiv
  5467  14E7  0871               	movf	??___lbdiv,w
  5468  14E8  07F3               	addwf	___lbdiv@counter,f
  5469  14E9  2CE1               	goto	l3610
  5470  14EA                     l3612:	
  5471  14EA  1003               	clrc
  5472  14EB  0DF4               	rlf	___lbdiv@quotient,f
  5473  14EC  0870               	movf	___lbdiv@divisor,w
  5474  14ED  0272               	subwf	___lbdiv@dividend,w
  5475  14EE  1C03               	skipc
  5476  14EF  2CF4               	goto	L2
  5477  14F0  0870               	movf	___lbdiv@divisor,w
  5478  14F1  02F2               	subwf	___lbdiv@dividend,f
  5479  14F2  1474               	bsf	___lbdiv@quotient,0
  5480  14F3  1003               	clrc
  5481  14F4                     L2:	
  5482  14F4  0CF0               	rrf	___lbdiv@divisor,f
  5483  14F5  3001               	movlw	1
  5484  14F6  02F3               	subwf	___lbdiv@counter,f
  5485  14F7  1D03               	btfss	3,2
  5486  14F8  2CEA               	goto	l3612
  5487  14F9                     l3622:	
  5488  14F9  0874               	movf	___lbdiv@quotient,w
  5489  14FA  0008               	return
  5490  14FB                     __end_of___lbdiv:	
  5491                           
  5492                           	psect	text24
  5493  1405                     __ptext24:	
  5494 ;; *************** function _ds1302_init *****************
  5495 ;; Defined at:
  5496 ;;		line 3 in file "clock_src.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;		None
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 300/0
  5507 ;;		On exit  : 300/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5510 ;;      Params:         0       0       0       0       0
  5511 ;;      Locals:         0       0       0       0       0
  5512 ;;      Temps:          0       0       0       0       0
  5513 ;;      Totals:         0       0       0       0       0
  5514 ;;Total ram usage:        0 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    1
  5517 ;; This function calls:
  5518 ;;		_time_write_1
  5519 ;; This function is called by:
  5520 ;;		_main
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           
  5525                           ;psect for function _ds1302_init
  5526  1405                     _ds1302_init:	
  5527                           
  5528                           ;clock_src.c: 5:    RB0=0;
  5529                           
  5530                           ;incstack = 0
  5531                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5532  1405  1006               	bcf	6,0	;volatile
  5533                           
  5534                           ;clock_src.c: 6:    RB5 =0;
  5535  1406  1286               	bcf	6,5	;volatile
  5536                           
  5537                           ;clock_src.c: 7:    RB5=1;
  5538  1407  1686               	bsf	6,5	;volatile
  5539                           
  5540                           ;clock_src.c: 8:    time_write_1(0x8e);
  5541  1408  308E               	movlw	142
  5542  1409  120A  158A  2001  160A  118A  	fcall	_time_write_1
  5543                           
  5544                           ;clock_src.c: 9:    time_write_1(0);
  5545  140E  3000               	movlw	0
  5546  140F  120A  158A  2001   	fcall	_time_write_1
  5547                           
  5548                           ;clock_src.c: 10:    RB5=0;
  5549  1412  1286               	bcf	6,5	;volatile
  5550  1413  0008               	return
  5551  1414                     __end_of_ds1302_init:	
  5552                           
  5553                           	psect	text25
  5554  14B9                     __ptext25:	
  5555 ;; *************** function _display_temp *****************
  5556 ;; Defined at:
  5557 ;;		line 12 in file "Thermometer_src.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;		None
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;		None
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  1    wreg      void 
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5566 ;; Tracked objects:
  5567 ;;		On entry : 300/0
  5568 ;;		On exit  : 300/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5571 ;;      Params:         0       0       0       0       0
  5572 ;;      Locals:         0       0       0       0       0
  5573 ;;      Temps:          0       0       0       0       0
  5574 ;;      Totals:         0       0       0       0       0
  5575 ;;Total ram usage:        0 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    2
  5578 ;; This function calls:
  5579 ;;		_write_char
  5580 ;; This function is called by:
  5581 ;;		_main
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           
  5586                           ;psect for function _display_temp
  5587  14B9                     _display_temp:	
  5588                           
  5589                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5593  14B9  0859               	movf	_shi,w
  5594  14BA  3E30               	addlw	48
  5595  14BB  160A  118A  2485  160A  118A  	fcall	_write_char
  5596                           
  5597                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5598  14C0  0858               	movf	_ge,w
  5599  14C1  3E30               	addlw	48
  5600  14C2  160A  118A  2485  160A  118A  	fcall	_write_char
  5601                           
  5602                           ;Thermometer_src.c: 17:  write_char('.');
  5603  14C7  302E               	movlw	46
  5604  14C8  160A  118A  2485  160A  118A  	fcall	_write_char
  5605                           
  5606                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5607  14CD  0857               	movf	_shifen,w
  5608  14CE  3E30               	addlw	48
  5609  14CF  160A  118A  2485  160A  118A  	fcall	_write_char
  5610                           
  5611                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5612  14D4  0856               	movf	_baifen,w
  5613  14D5  3E30               	addlw	48
  5614  14D6  160A  118A  2485   	fcall	_write_char
  5615  14D9  0008               	return
  5616  14DA                     __end_of_display_temp:	
  5617                           
  5618                           	psect	text26
  5619  1787                     __ptext26:	
  5620 ;; *************** function _display_day *****************
  5621 ;; Defined at:
  5622 ;;		line 4 in file "Day_of_week_src.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  num             2    3[COMMON] int 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 300/0
  5633 ;;		On exit  : 300/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5636 ;;      Params:         2       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0
  5639 ;;      Totals:         2       0       0       0       0
  5640 ;;Total ram usage:        2 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    2
  5643 ;; This function calls:
  5644 ;;		_write_char
  5645 ;; This function is called by:
  5646 ;;		_main
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _display_day
  5652  1787                     _display_day:	
  5653                           
  5654                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5658  1787  0373               	decf	display_day@num,w
  5659  1788  0474               	iorwf	display_day@num+1,w
  5660  1789  1903               	btfsc	3,2
  5661  178A  2F8F               	goto	l4590
  5662  178B  0873               	movf	display_day@num,w
  5663  178C  0474               	iorwf	display_day@num+1,w
  5664  178D  1D03               	btfss	3,2
  5665  178E  2F9B               	goto	l4592
  5666  178F                     l4590:	
  5667                           
  5668                           ;Day_of_week_src.c: 6:     write_char('M');
  5669  178F  304D               	movlw	77
  5670  1790  160A  118A  2485  160A  118A  	fcall	_write_char
  5671                           
  5672                           ;Day_of_week_src.c: 7:     write_char('o');
  5673  1795  306F               	movlw	111
  5674  1796  160A  118A  2485  160A  118A  	fcall	_write_char
  5675  179B                     l4592:	
  5676                           
  5677                           ;Day_of_week_src.c: 10:     if(num == 2){
  5678  179B  3002               	movlw	2
  5679  179C  0673               	xorwf	display_day@num,w
  5680  179D  0474               	iorwf	display_day@num+1,w
  5681  179E  1D03               	btfss	3,2
  5682  179F  2FAC               	goto	l4596
  5683                           
  5684                           ;Day_of_week_src.c: 11:     write_char('T');
  5685  17A0  3054               	movlw	84
  5686  17A1  160A  118A  2485  160A  118A  	fcall	_write_char
  5687                           
  5688                           ;Day_of_week_src.c: 12:     write_char('u');
  5689  17A6  3075               	movlw	117
  5690  17A7  160A  118A  2485  160A  118A  	fcall	_write_char
  5691  17AC                     l4596:	
  5692                           
  5693                           ;Day_of_week_src.c: 15:     if(num == 3){
  5694  17AC  3003               	movlw	3
  5695  17AD  0673               	xorwf	display_day@num,w
  5696  17AE  0474               	iorwf	display_day@num+1,w
  5697  17AF  1D03               	btfss	3,2
  5698  17B0  2FBD               	goto	l4600
  5699                           
  5700                           ;Day_of_week_src.c: 16:     write_char('W');
  5701  17B1  3057               	movlw	87
  5702  17B2  160A  118A  2485  160A  118A  	fcall	_write_char
  5703                           
  5704                           ;Day_of_week_src.c: 17:     write_char('e');
  5705  17B7  3065               	movlw	101
  5706  17B8  160A  118A  2485  160A  118A  	fcall	_write_char
  5707  17BD                     l4600:	
  5708                           
  5709                           ;Day_of_week_src.c: 20:     if(num == 4){
  5710  17BD  3004               	movlw	4
  5711  17BE  0673               	xorwf	display_day@num,w
  5712  17BF  0474               	iorwf	display_day@num+1,w
  5713  17C0  1D03               	btfss	3,2
  5714  17C1  2FCE               	goto	l4604
  5715                           
  5716                           ;Day_of_week_src.c: 21:     write_char('T');
  5717  17C2  3054               	movlw	84
  5718  17C3  160A  118A  2485  160A  118A  	fcall	_write_char
  5719                           
  5720                           ;Day_of_week_src.c: 22:     write_char('h');
  5721  17C8  3068               	movlw	104
  5722  17C9  160A  118A  2485  160A  118A  	fcall	_write_char
  5723  17CE                     l4604:	
  5724                           
  5725                           ;Day_of_week_src.c: 25:     if(num == 5){
  5726  17CE  3005               	movlw	5
  5727  17CF  0673               	xorwf	display_day@num,w
  5728  17D0  0474               	iorwf	display_day@num+1,w
  5729  17D1  1D03               	btfss	3,2
  5730  17D2  2FDF               	goto	l4608
  5731                           
  5732                           ;Day_of_week_src.c: 26:     write_char('F');
  5733  17D3  3046               	movlw	70
  5734  17D4  160A  118A  2485  160A  118A  	fcall	_write_char
  5735                           
  5736                           ;Day_of_week_src.c: 27:     write_char('r');
  5737  17D9  3072               	movlw	114
  5738  17DA  160A  118A  2485  160A  118A  	fcall	_write_char
  5739  17DF                     l4608:	
  5740                           
  5741                           ;Day_of_week_src.c: 30:     if(num == 6){
  5742  17DF  3006               	movlw	6
  5743  17E0  0673               	xorwf	display_day@num,w
  5744  17E1  0474               	iorwf	display_day@num+1,w
  5745  17E2  1D03               	btfss	3,2
  5746  17E3  2FF0               	goto	l4612
  5747                           
  5748                           ;Day_of_week_src.c: 31:     write_char('S');
  5749  17E4  3053               	movlw	83
  5750  17E5  160A  118A  2485  160A  118A  	fcall	_write_char
  5751                           
  5752                           ;Day_of_week_src.c: 32:     write_char('a');
  5753  17EA  3061               	movlw	97
  5754  17EB  160A  118A  2485  160A  118A  	fcall	_write_char
  5755  17F0                     l4612:	
  5756                           
  5757                           ;Day_of_week_src.c: 35:     if(num == 7){
  5758  17F0  3007               	movlw	7
  5759  17F1  0673               	xorwf	display_day@num,w
  5760  17F2  0474               	iorwf	display_day@num+1,w
  5761  17F3  1D03               	btfss	3,2
  5762  17F4  0008               	return
  5763                           
  5764                           ;Day_of_week_src.c: 36:     write_char('S');
  5765  17F5  3053               	movlw	83
  5766  17F6  160A  118A  2485  160A  118A  	fcall	_write_char
  5767                           
  5768                           ;Day_of_week_src.c: 37:     write_char('u');
  5769  17FB  3075               	movlw	117
  5770  17FC  160A  118A  2485   	fcall	_write_char
  5771  17FF  0008               	return
  5772  1800                     __end_of_display_day:	
  5773                           
  5774                           	psect	text27
  5775  0872                     __ptext27:	
  5776 ;; *************** function _display_date *****************
  5777 ;; Defined at:
  5778 ;;		line 77 in file "clock_src.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  i               2    5[COMMON] int 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 300/0
  5789 ;;		On exit  : 300/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5792 ;;      Params:         0       0       0       0       0
  5793 ;;      Locals:         2       0       0       0       0
  5794 ;;      Temps:          2       0       0       0       0
  5795 ;;      Totals:         4       0       0       0       0
  5796 ;;Total ram usage:        4 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    2
  5799 ;; This function calls:
  5800 ;;		_write_char
  5801 ;; This function is called by:
  5802 ;;		_main
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _display_date
  5808  0872                     _display_date:	
  5809                           
  5810                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5814  0872  1886               	btfsc	6,1	;volatile
  5815  0873  287D               	goto	l3818
  5816                           
  5817                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5818  0874  1683               	bsf	3,5	;RP0=1, select bank1
  5819  0875  0823               	movf	(_table1^(0+128)+3),w
  5820  0876  00F3               	movwf	??_display_date
  5821  0877  0873               	movf	??_display_date,w
  5822  0878  00A0               	movwf	_table1^(0+128)
  5823                           
  5824                           ;clock_src.c: 83:           table1[1]=table1[4];
  5825  0879  0824               	movf	(_table1^(0+128)+4),w
  5826  087A  00F3               	movwf	??_display_date
  5827  087B  0873               	movf	??_display_date,w
  5828  087C  00A1               	movwf	(_table1^(0+128)+1)
  5829  087D                     l3818:	
  5830                           
  5831                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5832  087D  1683               	bsf	3,5	;RP0=1, select bank1
  5833  087E  0823               	movf	(_table1^(0+128)+3),w
  5834  087F  39F0               	andlw	240
  5835  0880  00F3               	movwf	??_display_date
  5836  0881  01F4               	clrf	??_display_date+1
  5837  0882  0873               	movf	??_display_date,w
  5838  0883  00F5               	movwf	display_date@i
  5839  0884  0874               	movf	??_display_date+1,w
  5840  0885  00F6               	movwf	display_date@i+1
  5841                           
  5842                           ;clock_src.c: 86:      i=i>>4;
  5843  0886  0E75               	swapf	display_date@i,w
  5844  0887  390F               	andlw	15
  5845  0888  00F5               	movwf	display_date@i
  5846  0889  0E76               	swapf	display_date@i+1,w
  5847  088A  39F0               	andlw	240
  5848  088B  04F5               	iorwf	display_date@i,f
  5849  088C  0E76               	swapf	display_date@i+1,w
  5850  088D  390F               	andlw	15
  5851  088E  00F6               	movwf	display_date@i+1
  5852  088F  30F0               	movlw	240
  5853  0890  1DF6               	btfss	display_date@i+1,3
  5854  0891  3000               	movlw	0
  5855  0892  04F6               	iorwf	display_date@i+1,f
  5856                           
  5857                           ;clock_src.c: 87:      write_char(i + '0');
  5858  0893  0875               	movf	display_date@i,w
  5859  0894  3E30               	addlw	48
  5860  0895  160A  118A  2485  120A  158A  	fcall	_write_char
  5861                           
  5862                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  5863  089A  1683               	bsf	3,5	;RP0=1, select bank1
  5864  089B  0823               	movf	(_table1^(0+128)+3),w
  5865  089C  390F               	andlw	15
  5866  089D  00F3               	movwf	??_display_date
  5867  089E  01F4               	clrf	??_display_date+1
  5868  089F  0873               	movf	??_display_date,w
  5869  08A0  00F5               	movwf	display_date@i
  5870  08A1  0874               	movf	??_display_date+1,w
  5871  08A2  00F6               	movwf	display_date@i+1
  5872                           
  5873                           ;clock_src.c: 90:      write_char(i + '0');
  5874  08A3  0875               	movf	display_date@i,w
  5875  08A4  3E30               	addlw	48
  5876  08A5  160A  118A  2485  120A  158A  	fcall	_write_char
  5877                           
  5878                           ;clock_src.c: 91:      write_char('/');
  5879  08AA  302F               	movlw	47
  5880  08AB  160A  118A  2485  120A  158A  	fcall	_write_char
  5881                           
  5882                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  5883  08B0  1683               	bsf	3,5	;RP0=1, select bank1
  5884  08B1  0824               	movf	(_table1^(0+128)+4),w
  5885  08B2  39F0               	andlw	240
  5886  08B3  00F3               	movwf	??_display_date
  5887  08B4  01F4               	clrf	??_display_date+1
  5888  08B5  0873               	movf	??_display_date,w
  5889  08B6  00F5               	movwf	display_date@i
  5890  08B7  0874               	movf	??_display_date+1,w
  5891  08B8  00F6               	movwf	display_date@i+1
  5892                           
  5893                           ;clock_src.c: 96:      i=i>>4;
  5894  08B9  0E75               	swapf	display_date@i,w
  5895  08BA  390F               	andlw	15
  5896  08BB  00F5               	movwf	display_date@i
  5897  08BC  0E76               	swapf	display_date@i+1,w
  5898  08BD  39F0               	andlw	240
  5899  08BE  04F5               	iorwf	display_date@i,f
  5900  08BF  0E76               	swapf	display_date@i+1,w
  5901  08C0  390F               	andlw	15
  5902  08C1  00F6               	movwf	display_date@i+1
  5903  08C2  30F0               	movlw	240
  5904  08C3  1DF6               	btfss	display_date@i+1,3
  5905  08C4  3000               	movlw	0
  5906  08C5  04F6               	iorwf	display_date@i+1,f
  5907                           
  5908                           ;clock_src.c: 97:      write_char(i + '0');
  5909  08C6  0875               	movf	display_date@i,w
  5910  08C7  3E30               	addlw	48
  5911  08C8  160A  118A  2485  120A  158A  	fcall	_write_char
  5912                           
  5913                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  5914  08CD  1683               	bsf	3,5	;RP0=1, select bank1
  5915  08CE  0824               	movf	(_table1^(0+128)+4),w
  5916  08CF  390F               	andlw	15
  5917  08D0  00F3               	movwf	??_display_date
  5918  08D1  01F4               	clrf	??_display_date+1
  5919  08D2  0873               	movf	??_display_date,w
  5920  08D3  00F5               	movwf	display_date@i
  5921  08D4  0874               	movf	??_display_date+1,w
  5922  08D5  00F6               	movwf	display_date@i+1
  5923                           
  5924                           ;clock_src.c: 100:      write_char(i + '0');
  5925  08D6  0875               	movf	display_date@i,w
  5926  08D7  3E30               	addlw	48
  5927  08D8  160A  118A  2485  120A  158A  	fcall	_write_char
  5928                           
  5929                           ;clock_src.c: 101:      write_char('/');
  5930  08DD  302F               	movlw	47
  5931  08DE  160A  118A  2485  120A  158A  	fcall	_write_char
  5932                           
  5933                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  5934  08E3  1683               	bsf	3,5	;RP0=1, select bank1
  5935  08E4  0826               	movf	(_table1^(0+128)+6),w
  5936  08E5  39F0               	andlw	240
  5937  08E6  00F3               	movwf	??_display_date
  5938  08E7  01F4               	clrf	??_display_date+1
  5939  08E8  0873               	movf	??_display_date,w
  5940  08E9  00F5               	movwf	display_date@i
  5941  08EA  0874               	movf	??_display_date+1,w
  5942  08EB  00F6               	movwf	display_date@i+1
  5943                           
  5944                           ;clock_src.c: 106:      i=i>>4;
  5945  08EC  0E75               	swapf	display_date@i,w
  5946  08ED  390F               	andlw	15
  5947  08EE  00F5               	movwf	display_date@i
  5948  08EF  0E76               	swapf	display_date@i+1,w
  5949  08F0  39F0               	andlw	240
  5950  08F1  04F5               	iorwf	display_date@i,f
  5951  08F2  0E76               	swapf	display_date@i+1,w
  5952  08F3  390F               	andlw	15
  5953  08F4  00F6               	movwf	display_date@i+1
  5954  08F5  30F0               	movlw	240
  5955  08F6  1DF6               	btfss	display_date@i+1,3
  5956  08F7  3000               	movlw	0
  5957  08F8  04F6               	iorwf	display_date@i+1,f
  5958                           
  5959                           ;clock_src.c: 107:      write_char(i + '0');
  5960  08F9  0875               	movf	display_date@i,w
  5961  08FA  3E30               	addlw	48
  5962  08FB  160A  118A  2485  120A  158A  	fcall	_write_char
  5963                           
  5964                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  5965  0900  1683               	bsf	3,5	;RP0=1, select bank1
  5966  0901  0826               	movf	(_table1^(0+128)+6),w
  5967  0902  390F               	andlw	15
  5968  0903  00F3               	movwf	??_display_date
  5969  0904  01F4               	clrf	??_display_date+1
  5970  0905  0873               	movf	??_display_date,w
  5971  0906  00F5               	movwf	display_date@i
  5972  0907  0874               	movf	??_display_date+1,w
  5973  0908  00F6               	movwf	display_date@i+1
  5974                           
  5975                           ;clock_src.c: 110:      write_char(i + '0');
  5976  0909  0875               	movf	display_date@i,w
  5977  090A  3E30               	addlw	48
  5978  090B  160A  118A  2485   	fcall	_write_char
  5979  090E  0008               	return
  5980  090F                     __end_of_display_date:	
  5981                           
  5982                           	psect	text28
  5983  090F                     __ptext28:	
  5984 ;; *************** function _display_clock *****************
  5985 ;; Defined at:
  5986 ;;		line 34 in file "clock_src.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;		None
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  i               2    5[COMMON] int 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 300/0
  5997 ;;		On exit  : 300/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6000 ;;      Params:         0       0       0       0       0
  6001 ;;      Locals:         2       0       0       0       0
  6002 ;;      Temps:          2       0       0       0       0
  6003 ;;      Totals:         4       0       0       0       0
  6004 ;;Total ram usage:        4 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    2
  6007 ;; This function calls:
  6008 ;;		_write_char
  6009 ;; This function is called by:
  6010 ;;		_main
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _display_clock
  6016  090F                     _display_clock:	
  6017                           
  6018                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6022  090F  1886               	btfsc	6,1	;volatile
  6023  0910  291A               	goto	l3856
  6024                           
  6025                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6026  0911  1683               	bsf	3,5	;RP0=1, select bank1
  6027  0912  0823               	movf	(_table1^(0+128)+3),w
  6028  0913  00F3               	movwf	??_display_clock
  6029  0914  0873               	movf	??_display_clock,w
  6030  0915  00A0               	movwf	_table1^(0+128)
  6031                           
  6032                           ;clock_src.c: 40:           table1[1]=table1[4];
  6033  0916  0824               	movf	(_table1^(0+128)+4),w
  6034  0917  00F3               	movwf	??_display_clock
  6035  0918  0873               	movf	??_display_clock,w
  6036  0919  00A1               	movwf	(_table1^(0+128)+1)
  6037  091A                     l3856:	
  6038                           
  6039                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6040  091A  1683               	bsf	3,5	;RP0=1, select bank1
  6041  091B  0822               	movf	(_table1^(0+128)+2),w
  6042  091C  39F0               	andlw	240
  6043  091D  00F3               	movwf	??_display_clock
  6044  091E  01F4               	clrf	??_display_clock+1
  6045  091F  0873               	movf	??_display_clock,w
  6046  0920  00F5               	movwf	display_clock@i
  6047  0921  0874               	movf	??_display_clock+1,w
  6048  0922  00F6               	movwf	display_clock@i+1
  6049                           
  6050                           ;clock_src.c: 44:      i=i>>4;
  6051  0923  0E75               	swapf	display_clock@i,w
  6052  0924  390F               	andlw	15
  6053  0925  00F5               	movwf	display_clock@i
  6054  0926  0E76               	swapf	display_clock@i+1,w
  6055  0927  39F0               	andlw	240
  6056  0928  04F5               	iorwf	display_clock@i,f
  6057  0929  0E76               	swapf	display_clock@i+1,w
  6058  092A  390F               	andlw	15
  6059  092B  00F6               	movwf	display_clock@i+1
  6060  092C  30F0               	movlw	240
  6061  092D  1DF6               	btfss	display_clock@i+1,3
  6062  092E  3000               	movlw	0
  6063  092F  04F6               	iorwf	display_clock@i+1,f
  6064                           
  6065                           ;clock_src.c: 45:      write_char(i + '0');
  6066  0930  0875               	movf	display_clock@i,w
  6067  0931  3E30               	addlw	48
  6068  0932  160A  118A  2485  120A  158A  	fcall	_write_char
  6069                           
  6070                           ;clock_src.c: 46:      temp_high = i;
  6071  0937  0875               	movf	display_clock@i,w
  6072  0938  00F3               	movwf	??_display_clock
  6073  0939  0873               	movf	??_display_clock,w
  6074  093A  00C9               	movwf	_temp_high
  6075                           
  6076                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6077  093B  1683               	bsf	3,5	;RP0=1, select bank1
  6078  093C  0822               	movf	(_table1^(0+128)+2),w
  6079  093D  390F               	andlw	15
  6080  093E  00F3               	movwf	??_display_clock
  6081  093F  01F4               	clrf	??_display_clock+1
  6082  0940  0873               	movf	??_display_clock,w
  6083  0941  00F5               	movwf	display_clock@i
  6084  0942  0874               	movf	??_display_clock+1,w
  6085  0943  00F6               	movwf	display_clock@i+1
  6086                           
  6087                           ;clock_src.c: 50:      write_char(i + '0');
  6088  0944  0875               	movf	display_clock@i,w
  6089  0945  3E30               	addlw	48
  6090  0946  160A  118A  2485  120A  158A  	fcall	_write_char
  6091                           
  6092                           ;clock_src.c: 51:      write_char(':');
  6093  094B  303A               	movlw	58
  6094  094C  160A  118A  2485  120A  158A  	fcall	_write_char
  6095                           
  6096                           ;clock_src.c: 52:      temp_low = i;
  6097  0951  0875               	movf	display_clock@i,w
  6098  0952  00F3               	movwf	??_display_clock
  6099  0953  0873               	movf	??_display_clock,w
  6100  0954  00CA               	movwf	_temp_low
  6101                           
  6102                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6103  0955  1683               	bsf	3,5	;RP0=1, select bank1
  6104  0956  0821               	movf	(_table1^(0+128)+1),w
  6105  0957  39F0               	andlw	240
  6106  0958  00F3               	movwf	??_display_clock
  6107  0959  01F4               	clrf	??_display_clock+1
  6108  095A  0873               	movf	??_display_clock,w
  6109  095B  00F5               	movwf	display_clock@i
  6110  095C  0874               	movf	??_display_clock+1,w
  6111  095D  00F6               	movwf	display_clock@i+1
  6112                           
  6113                           ;clock_src.c: 56:      i=i>>4;
  6114  095E  0E75               	swapf	display_clock@i,w
  6115  095F  390F               	andlw	15
  6116  0960  00F5               	movwf	display_clock@i
  6117  0961  0E76               	swapf	display_clock@i+1,w
  6118  0962  39F0               	andlw	240
  6119  0963  04F5               	iorwf	display_clock@i,f
  6120  0964  0E76               	swapf	display_clock@i+1,w
  6121  0965  390F               	andlw	15
  6122  0966  00F6               	movwf	display_clock@i+1
  6123  0967  30F0               	movlw	240
  6124  0968  1DF6               	btfss	display_clock@i+1,3
  6125  0969  3000               	movlw	0
  6126  096A  04F6               	iorwf	display_clock@i+1,f
  6127                           
  6128                           ;clock_src.c: 57:      write_char(i + '0');
  6129  096B  0875               	movf	display_clock@i,w
  6130  096C  3E30               	addlw	48
  6131  096D  160A  118A  2485  120A  158A  	fcall	_write_char
  6132                           
  6133                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6134  0972  1683               	bsf	3,5	;RP0=1, select bank1
  6135  0973  0821               	movf	(_table1^(0+128)+1),w
  6136  0974  390F               	andlw	15
  6137  0975  00F3               	movwf	??_display_clock
  6138  0976  01F4               	clrf	??_display_clock+1
  6139  0977  0873               	movf	??_display_clock,w
  6140  0978  00F5               	movwf	display_clock@i
  6141  0979  0874               	movf	??_display_clock+1,w
  6142  097A  00F6               	movwf	display_clock@i+1
  6143                           
  6144                           ;clock_src.c: 61:      write_char(i + '0');
  6145  097B  0875               	movf	display_clock@i,w
  6146  097C  3E30               	addlw	48
  6147  097D  160A  118A  2485  120A  158A  	fcall	_write_char
  6148                           
  6149                           ;clock_src.c: 62:      write_char(':');
  6150  0982  303A               	movlw	58
  6151  0983  160A  118A  2485  120A  158A  	fcall	_write_char
  6152                           
  6153                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6154  0988  1683               	bsf	3,5	;RP0=1, select bank1
  6155  0989  0820               	movf	_table1^(0+128),w
  6156  098A  39F0               	andlw	240
  6157  098B  00F3               	movwf	??_display_clock
  6158  098C  01F4               	clrf	??_display_clock+1
  6159  098D  0873               	movf	??_display_clock,w
  6160  098E  00F5               	movwf	display_clock@i
  6161  098F  0874               	movf	??_display_clock+1,w
  6162  0990  00F6               	movwf	display_clock@i+1
  6163                           
  6164                           ;clock_src.c: 66:      i=i>>4;
  6165  0991  0E75               	swapf	display_clock@i,w
  6166  0992  390F               	andlw	15
  6167  0993  00F5               	movwf	display_clock@i
  6168  0994  0E76               	swapf	display_clock@i+1,w
  6169  0995  39F0               	andlw	240
  6170  0996  04F5               	iorwf	display_clock@i,f
  6171  0997  0E76               	swapf	display_clock@i+1,w
  6172  0998  390F               	andlw	15
  6173  0999  00F6               	movwf	display_clock@i+1
  6174  099A  30F0               	movlw	240
  6175  099B  1DF6               	btfss	display_clock@i+1,3
  6176  099C  3000               	movlw	0
  6177  099D  04F6               	iorwf	display_clock@i+1,f
  6178                           
  6179                           ;clock_src.c: 67:      write_char(i + '0');
  6180  099E  0875               	movf	display_clock@i,w
  6181  099F  3E30               	addlw	48
  6182  09A0  160A  118A  2485  120A  158A  	fcall	_write_char
  6183                           
  6184                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6185  09A5  1683               	bsf	3,5	;RP0=1, select bank1
  6186  09A6  0820               	movf	_table1^(0+128),w
  6187  09A7  390F               	andlw	15
  6188  09A8  00F3               	movwf	??_display_clock
  6189  09A9  01F4               	clrf	??_display_clock+1
  6190  09AA  0873               	movf	??_display_clock,w
  6191  09AB  00F5               	movwf	display_clock@i
  6192  09AC  0874               	movf	??_display_clock+1,w
  6193  09AD  00F6               	movwf	display_clock@i+1
  6194                           
  6195                           ;clock_src.c: 71:      write_char(i + '0');
  6196  09AE  0875               	movf	display_clock@i,w
  6197  09AF  3E30               	addlw	48
  6198  09B0  160A  118A  2485   	fcall	_write_char
  6199  09B3  0008               	return
  6200  09B4                     __end_of_display_clock:	
  6201                           
  6202                           	psect	text29
  6203  0387                     __ptext29:	
  6204 ;; *************** function _date_settings *****************
  6205 ;; Defined at:
  6206 ;;		line 366 in file "Button_src.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;		None
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;		None
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  1    wreg      void 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 300/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6220 ;;      Params:         0       0       0       0       0
  6221 ;;      Locals:         0       0       0       0       0
  6222 ;;      Temps:          0       3       0       0       0
  6223 ;;      Totals:         0       3       0       0       0
  6224 ;;Total ram usage:        3 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    3
  6227 ;; This function calls:
  6228 ;;		_button_delay
  6229 ;;		_incrementor
  6230 ;;		_modulus_func
  6231 ;;		_set_time
  6232 ;;		_time_date_delimiter
  6233 ;;		_time_date_hex_terminator
  6234 ;;		_write_char
  6235 ;;		_write_cmd
  6236 ;; This function is called by:
  6237 ;;		_main
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           
  6242                           ;psect for function _date_settings
  6243  0387                     _date_settings:	
  6244                           
  6245                           ;Button_src.c: 367:  RC0 = 0;
  6246                           
  6247                           ;incstack = 0
  6248                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6249  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6250  0388  1303               	bcf	3,6	;RP1=0, select bank0
  6251  0389  1007               	bcf	7,0	;volatile
  6252                           
  6253                           ;Button_src.c: 368:  RC1 = 1;
  6254  038A  1487               	bsf	7,1	;volatile
  6255                           
  6256                           ;Button_src.c: 369:  RC2 = 1;
  6257  038B  1507               	bsf	7,2	;volatile
  6258                           
  6259                           ;Button_src.c: 370:  RC3 = 1;
  6260  038C  1587               	bsf	7,3	;volatile
  6261                           
  6262                           ;Button_src.c: 371:   if (RC4 == 0){
  6263  038D  1A07               	btfsc	7,4	;volatile
  6264  038E  0008               	return
  6265                           
  6266                           ;Button_src.c: 372:       write_cmd(0x1);
  6267  038F  3001               	movlw	1
  6268  0390  120A  118A  2006  120A  118A  	fcall	_write_cmd
  6269  0395                     l730:	
  6270                           ;Button_src.c: 373:       for(;;){
  6271                           
  6272                           
  6273                           ;Button_src.c: 374:             write_cmd(0x80);
  6274  0395  3080               	movlw	128
  6275  0396  120A  118A  2006  120A  118A  	fcall	_write_cmd
  6276                           
  6277                           ;Button_src.c: 375:             write_char('D');
  6278  039B  3044               	movlw	68
  6279  039C  160A  118A  2485  120A  118A  	fcall	_write_char
  6280                           
  6281                           ;Button_src.c: 376:             write_char('a');
  6282  03A1  3061               	movlw	97
  6283  03A2  160A  118A  2485  120A  118A  	fcall	_write_char
  6284                           
  6285                           ;Button_src.c: 377:             write_char('t');
  6286  03A7  3074               	movlw	116
  6287  03A8  160A  118A  2485  120A  118A  	fcall	_write_char
  6288                           
  6289                           ;Button_src.c: 378:             write_char('e');
  6290  03AD  3065               	movlw	101
  6291  03AE  160A  118A  2485  120A  118A  	fcall	_write_char
  6292                           
  6293                           ;Button_src.c: 379:             write_char('_');
  6294  03B3  305F               	movlw	95
  6295  03B4  160A  118A  2485  120A  118A  	fcall	_write_char
  6296                           
  6297                           ;Button_src.c: 380:             write_char('S');
  6298  03B9  3053               	movlw	83
  6299  03BA  160A  118A  2485  120A  118A  	fcall	_write_char
  6300                           
  6301                           ;Button_src.c: 381:             write_char('e');
  6302  03BF  3065               	movlw	101
  6303  03C0  160A  118A  2485  120A  118A  	fcall	_write_char
  6304                           
  6305                           ;Button_src.c: 382:             write_char('t');
  6306  03C5  3074               	movlw	116
  6307  03C6  160A  118A  2485  120A  118A  	fcall	_write_char
  6308                           
  6309                           ;Button_src.c: 383:             write_char('t');
  6310  03CB  3074               	movlw	116
  6311  03CC  160A  118A  2485  120A  118A  	fcall	_write_char
  6312                           
  6313                           ;Button_src.c: 384:             write_char('i');
  6314  03D1  3069               	movlw	105
  6315  03D2  160A  118A  2485  120A  118A  	fcall	_write_char
  6316                           
  6317                           ;Button_src.c: 385:             write_char('n');
  6318  03D7  306E               	movlw	110
  6319  03D8  160A  118A  2485  120A  118A  	fcall	_write_char
  6320                           
  6321                           ;Button_src.c: 386:             write_char('g');
  6322  03DD  3067               	movlw	103
  6323  03DE  160A  118A  2485  120A  118A  	fcall	_write_char
  6324                           
  6325                           ;Button_src.c: 387:             write_char('s');
  6326  03E3  3073               	movlw	115
  6327  03E4  160A  118A  2485  120A  118A  	fcall	_write_char
  6328                           
  6329                           ;Button_src.c: 388:             RC0 = 1;
  6330  03E9  1407               	bsf	7,0	;volatile
  6331                           
  6332                           ;Button_src.c: 389:             RC1 = 0;
  6333  03EA  1087               	bcf	7,1	;volatile
  6334                           
  6335                           ;Button_src.c: 390:             RC2 = 1;
  6336  03EB  1507               	bsf	7,2	;volatile
  6337                           
  6338                           ;Button_src.c: 391:             RC3 = 1;
  6339  03EC  1587               	bsf	7,3	;volatile
  6340                           
  6341                           ;Button_src.c: 392:             if(RC7 == 0 && b =='x'){
  6342  03ED  1B87               	btfsc	7,7	;volatile
  6343  03EE  2C5F               	goto	l4092
  6344  03EF  3078               	movlw	120
  6345  03F0  0647               	xorwf	_b,w
  6346  03F1  1D03               	btfss	3,2
  6347  03F2  2C5F               	goto	l4092
  6348                           
  6349                           ;Button_src.c: 393:                 if(stats == 1)
  6350  03F3  0324               	decf	_stats,w
  6351  03F4  0425               	iorwf	_stats+1,w
  6352  03F5  1D03               	btfss	3,2
  6353  03F6  2BFB               	goto	l732
  6354                           
  6355                           ;Button_src.c: 394:                     a++;
  6356  03F7  3001               	movlw	1
  6357  03F8  00E3               	movwf	??_date_settings
  6358  03F9  0863               	movf	??_date_settings,w
  6359  03FA  07C8               	addwf	_a,f
  6360  03FB                     l732:	
  6361                           
  6362                           ;Button_src.c: 395:                 if(stats == 0){
  6363  03FB  0824               	movf	_stats,w
  6364  03FC  0425               	iorwf	_stats+1,w
  6365  03FD  1D03               	btfss	3,2
  6366  03FE  2C03               	goto	l733
  6367                           
  6368                           ;Button_src.c: 396:                     stats = 1;
  6369  03FF  3001               	movlw	1
  6370  0400  00A4               	movwf	_stats
  6371  0401  3000               	movlw	0
  6372  0402  00A5               	movwf	_stats+1
  6373  0403                     l733:	
  6374                           ;Button_src.c: 397:                 }
  6375                           
  6376                           
  6377                           ;Button_src.c: 399:                     x++ ;
  6378  0403  3001               	movlw	1
  6379  0404  07AE               	addwf	_x,f
  6380  0405  1803               	skipnc
  6381  0406  0AAF               	incf	_x+1,f
  6382  0407  3000               	movlw	0
  6383  0408  07AF               	addwf	_x+1,f
  6384                           
  6385                           ;Button_src.c: 400:                     x = modulus_func(x,10);
  6386  0409  082F               	movf	_x+1,w
  6387  040A  00F8               	movwf	modulus_func@x+1
  6388  040B  082E               	movf	_x,w
  6389  040C  00F7               	movwf	modulus_func@x
  6390  040D  300A               	movlw	10
  6391  040E  00F9               	movwf	modulus_func@y
  6392  040F  3000               	movlw	0
  6393  0410  00FA               	movwf	modulus_func@y+1
  6394  0411  160A  118A  2414  120A  118A  	fcall	_modulus_func
  6395  0416  0878               	movf	?_modulus_func+1,w
  6396  0417  00AF               	movwf	_x+1
  6397  0418  0877               	movf	?_modulus_func,w
  6398  0419  00AE               	movwf	_x
  6399                           
  6400                           ;Button_src.c: 401:                      if (p == 1){
  6401  041A  0322               	decf	_p,w
  6402  041B  0423               	iorwf	_p+1,w
  6403  041C  1D03               	btfss	3,2
  6404  041D  2C37               	goto	l4078
  6405                           
  6406                           ;Button_src.c: 402:                         y = incrementor(y,x,'0');
  6407  041E  082D               	movf	_y+1,w
  6408  041F  00DF               	movwf	incrementor@upper_val+1
  6409  0420  082C               	movf	_y,w
  6410  0421  00DE               	movwf	incrementor@upper_val
  6411  0422  082F               	movf	_x+1,w
  6412  0423  00E1               	movwf	incrementor@lower_val+1
  6413  0424  082E               	movf	_x,w
  6414  0425  00E0               	movwf	incrementor@lower_val
  6415  0426  3030               	movlw	48
  6416  0427  00E3               	movwf	??_date_settings
  6417  0428  0863               	movf	??_date_settings,w
  6418  0429  00E2               	movwf	incrementor@z
  6419  042A  160A  118A  2541  120A  118A  	fcall	_incrementor
  6420  042F  00E4               	movwf	??_date_settings+1
  6421  0430  01E5               	clrf	??_date_settings+2
  6422  0431  0864               	movf	??_date_settings+1,w
  6423  0432  00AC               	movwf	_y
  6424  0433  0865               	movf	??_date_settings+2,w
  6425  0434  00AD               	movwf	_y+1
  6426                           
  6427                           ;Button_src.c: 403:                         p = 0;
  6428  0435  01A2               	clrf	_p
  6429  0436  01A3               	clrf	_p+1
  6430  0437                     l4078:	
  6431                           
  6432                           ;Button_src.c: 405:                     if (x == 9){
  6433  0437  3009               	movlw	9
  6434  0438  062E               	xorwf	_x,w
  6435  0439  042F               	iorwf	_x+1,w
  6436  043A  1D03               	btfss	3,2
  6437  043B  2C40               	goto	l4082
  6438                           
  6439                           ;Button_src.c: 406:                         p = 1;
  6440  043C  3001               	movlw	1
  6441  043D  00A2               	movwf	_p
  6442  043E  3000               	movlw	0
  6443  043F  00A3               	movwf	_p+1
  6444  0440                     l4082:	
  6445                           
  6446                           ;Button_src.c: 408:                     a = time_date_hex_terminator(a,'C');
  6447  0440  3043               	movlw	67
  6448  0441  00E3               	movwf	??_date_settings
  6449  0442  0863               	movf	??_date_settings,w
  6450  0443  00F0               	movwf	time_date_hex_terminator@limiter
  6451  0444  0848               	movf	_a,w
  6452  0445  160A  118A  23F6  120A  118A  	fcall	_time_date_hex_terminator
  6453  044A  00E4               	movwf	??_date_settings+1
  6454  044B  0864               	movf	??_date_settings+1,w
  6455  044C  00C8               	movwf	_a
  6456                           
  6457                           ;Button_src.c: 410:                     if(y == 1 && x == 3){
  6458  044D  032C               	decf	_y,w
  6459  044E  042D               	iorwf	_y+1,w
  6460  044F  1D03               	btfss	3,2
  6461  0450  2C5A               	goto	l4090
  6462  0451  3003               	movlw	3
  6463  0452  062E               	xorwf	_x,w
  6464  0453  042F               	iorwf	_x+1,w
  6465  0454  1D03               	btfss	3,2
  6466  0455  2C5A               	goto	l4090
  6467                           
  6468                           ;Button_src.c: 411:                         x = 0;
  6469  0456  01AE               	clrf	_x
  6470  0457  01AF               	clrf	_x+1
  6471                           
  6472                           ;Button_src.c: 412:                         y = 0;
  6473  0458  01AC               	clrf	_y
  6474  0459  01AD               	clrf	_y+1
  6475  045A                     l4090:	
  6476                           
  6477                           ;Button_src.c: 414:                     button_delay();
  6478  045A  160A  118A  2435  120A  118A  	fcall	_button_delay
  6479  045F                     l4092:	
  6480                           
  6481                           ;Button_src.c: 416:             if(RC7==0 && b == 'y'){
  6482  045F  1283               	bcf	3,5	;RP0=0, select bank0
  6483  0460  1303               	bcf	3,6	;RP1=0, select bank0
  6484  0461  1B87               	btfsc	7,7	;volatile
  6485  0462  2CE5               	goto	l4126
  6486  0463  3079               	movlw	121
  6487  0464  0647               	xorwf	_b,w
  6488  0465  1D03               	btfss	3,2
  6489  0466  2CE5               	goto	l4126
  6490                           
  6491                           ;Button_src.c: 417:                  if(stats == 1)
  6492  0467  0324               	decf	_stats,w
  6493  0468  0425               	iorwf	_stats+1,w
  6494  0469  1D03               	btfss	3,2
  6495  046A  2C6F               	goto	l738
  6496                           
  6497                           ;Button_src.c: 418:                     day_hex++;
  6498  046B  3001               	movlw	1
  6499  046C  00E3               	movwf	??_date_settings
  6500  046D  0863               	movf	??_date_settings,w
  6501  046E  07C5               	addwf	_day_hex,f
  6502  046F                     l738:	
  6503                           
  6504                           ;Button_src.c: 419:                 if(stats == 0){
  6505  046F  0824               	movf	_stats,w
  6506  0470  0425               	iorwf	_stats+1,w
  6507  0471  1D03               	btfss	3,2
  6508  0472  2C77               	goto	l739
  6509                           
  6510                           ;Button_src.c: 420:                     stats = 1;
  6511  0473  3001               	movlw	1
  6512  0474  00A4               	movwf	_stats
  6513  0475  3000               	movlw	0
  6514  0476  00A5               	movwf	_stats+1
  6515  0477                     l739:	
  6516                           ;Button_src.c: 421:                 }
  6517                           
  6518                           
  6519                           ;Button_src.c: 423:                     day_low++;
  6520  0477  3001               	movlw	1
  6521  0478  07A8               	addwf	_day_low,f
  6522  0479  1803               	skipnc
  6523  047A  0AA9               	incf	_day_low+1,f
  6524  047B  3000               	movlw	0
  6525  047C  07A9               	addwf	_day_low+1,f
  6526                           
  6527                           ;Button_src.c: 424:                     day_low = modulus_func(day_low,10);
  6528  047D  0829               	movf	_day_low+1,w
  6529  047E  00F8               	movwf	modulus_func@x+1
  6530  047F  0828               	movf	_day_low,w
  6531  0480  00F7               	movwf	modulus_func@x
  6532  0481  300A               	movlw	10
  6533  0482  00F9               	movwf	modulus_func@y
  6534  0483  3000               	movlw	0
  6535  0484  00FA               	movwf	modulus_func@y+1
  6536  0485  160A  118A  2414  120A  118A  	fcall	_modulus_func
  6537  048A  0878               	movf	?_modulus_func+1,w
  6538  048B  00A9               	movwf	_day_low+1
  6539  048C  0877               	movf	?_modulus_func,w
  6540  048D  00A8               	movwf	_day_low
  6541                           
  6542                           ;Button_src.c: 425:                     day_counter = modulus_func(day_low,8);
  6543  048E  0829               	movf	_day_low+1,w
  6544  048F  00F8               	movwf	modulus_func@x+1
  6545  0490  0828               	movf	_day_low,w
  6546  0491  00F7               	movwf	modulus_func@x
  6547  0492  3008               	movlw	8
  6548  0493  00F9               	movwf	modulus_func@y
  6549  0494  3000               	movlw	0
  6550  0495  00FA               	movwf	modulus_func@y+1
  6551  0496  160A  118A  2414  120A  118A  	fcall	_modulus_func
  6552  049B  0878               	movf	?_modulus_func+1,w
  6553  049C  00A1               	movwf	_day_counter+1
  6554  049D  0877               	movf	?_modulus_func,w
  6555  049E  00A0               	movwf	_day_counter
  6556                           
  6557                           ;Button_src.c: 426:                     if (p == 1){
  6558  049F  0322               	decf	_p,w
  6559  04A0  0423               	iorwf	_p+1,w
  6560  04A1  1D03               	btfss	3,2
  6561  04A2  2CBC               	goto	l4112
  6562                           
  6563                           ;Button_src.c: 427:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6564  04A3  0827               	movf	_day_high+1,w
  6565  04A4  00DF               	movwf	incrementor@upper_val+1
  6566  04A5  0826               	movf	_day_high,w
  6567  04A6  00DE               	movwf	incrementor@upper_val
  6568  04A7  0829               	movf	_day_low+1,w
  6569  04A8  00E1               	movwf	incrementor@lower_val+1
  6570  04A9  0828               	movf	_day_low,w
  6571  04AA  00E0               	movwf	incrementor@lower_val
  6572  04AB  3030               	movlw	48
  6573  04AC  00E3               	movwf	??_date_settings
  6574  04AD  0863               	movf	??_date_settings,w
  6575  04AE  00E2               	movwf	incrementor@z
  6576  04AF  160A  118A  2541  120A  118A  	fcall	_incrementor
  6577  04B4  00E4               	movwf	??_date_settings+1
  6578  04B5  01E5               	clrf	??_date_settings+2
  6579  04B6  0864               	movf	??_date_settings+1,w
  6580  04B7  00A6               	movwf	_day_high
  6581  04B8  0865               	movf	??_date_settings+2,w
  6582  04B9  00A7               	movwf	_day_high+1
  6583                           
  6584                           ;Button_src.c: 428:                         p = 0;
  6585  04BA  01A2               	clrf	_p
  6586  04BB  01A3               	clrf	_p+1
  6587  04BC                     l4112:	
  6588                           
  6589                           ;Button_src.c: 430:                     if (day_low == 9){
  6590  04BC  3009               	movlw	9
  6591  04BD  0628               	xorwf	_day_low,w
  6592  04BE  0429               	iorwf	_day_low+1,w
  6593  04BF  1D03               	btfss	3,2
  6594  04C0  2CC5               	goto	l4116
  6595                           
  6596                           ;Button_src.c: 431:                         p = 1;
  6597  04C1  3001               	movlw	1
  6598  04C2  00A2               	movwf	_p
  6599  04C3  3000               	movlw	0
  6600  04C4  00A3               	movwf	_p+1
  6601  04C5                     l4116:	
  6602                           
  6603                           ;Button_src.c: 433:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6604  04C5  3063               	movlw	99
  6605  04C6  00E3               	movwf	??_date_settings
  6606  04C7  0863               	movf	??_date_settings,w
  6607  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6608  04C9  0845               	movf	_day_hex,w
  6609  04CA  160A  118A  23F6  120A  118A  	fcall	_time_date_hex_terminator
  6610  04CF  00E4               	movwf	??_date_settings+1
  6611  04D0  0864               	movf	??_date_settings+1,w
  6612  04D1  00C5               	movwf	_day_hex
  6613                           
  6614                           ;Button_src.c: 434:                     if(day_high == 3 && day_low==2 ){
  6615  04D2  3003               	movlw	3
  6616  04D3  0626               	xorwf	_day_high,w
  6617  04D4  0427               	iorwf	_day_high+1,w
  6618  04D5  1D03               	btfss	3,2
  6619  04D6  2CE0               	goto	l4124
  6620  04D7  3002               	movlw	2
  6621  04D8  0628               	xorwf	_day_low,w
  6622  04D9  0429               	iorwf	_day_low+1,w
  6623  04DA  1D03               	btfss	3,2
  6624  04DB  2CE0               	goto	l4124
  6625                           
  6626                           ;Button_src.c: 435:                         day_high = 0;
  6627  04DC  01A6               	clrf	_day_high
  6628  04DD  01A7               	clrf	_day_high+1
  6629                           
  6630                           ;Button_src.c: 436:                         day_low = 0;
  6631  04DE  01A8               	clrf	_day_low
  6632  04DF  01A9               	clrf	_day_low+1
  6633  04E0                     l4124:	
  6634                           
  6635                           ;Button_src.c: 438:                     button_delay();
  6636  04E0  160A  118A  2435  120A  118A  	fcall	_button_delay
  6637  04E5                     l4126:	
  6638                           
  6639                           ;Button_src.c: 440:             if(RC7==0 && b == 'z'){
  6640  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6641  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6642  04E7  1B87               	btfsc	7,7	;volatile
  6643  04E8  2D4C               	goto	l4158
  6644  04E9  307A               	movlw	122
  6645  04EA  0647               	xorwf	_b,w
  6646  04EB  1D03               	btfss	3,2
  6647  04EC  2D4C               	goto	l4158
  6648                           
  6649                           ;Button_src.c: 441:                 if(stats == 1)
  6650  04ED  0324               	decf	_stats,w
  6651  04EE  0425               	iorwf	_stats+1,w
  6652  04EF  1D03               	btfss	3,2
  6653  04F0  2CF5               	goto	l744
  6654                           
  6655                           ;Button_src.c: 442:                    c++;
  6656  04F1  3001               	movlw	1
  6657  04F2  00E3               	movwf	??_date_settings
  6658  04F3  0863               	movf	??_date_settings,w
  6659  04F4  07C6               	addwf	_c,f
  6660  04F5                     l744:	
  6661                           
  6662                           ;Button_src.c: 443:                 if(stats == 0){
  6663  04F5  0824               	movf	_stats,w
  6664  04F6  0425               	iorwf	_stats+1,w
  6665  04F7  1D03               	btfss	3,2
  6666  04F8  2CFD               	goto	l745
  6667                           
  6668                           ;Button_src.c: 444:                     stats = 1;
  6669  04F9  3001               	movlw	1
  6670  04FA  00A4               	movwf	_stats
  6671  04FB  3000               	movlw	0
  6672  04FC  00A5               	movwf	_stats+1
  6673  04FD                     l745:	
  6674                           ;Button_src.c: 445:                 }
  6675                           
  6676                           
  6677                           ;Button_src.c: 447:                     t++;
  6678  04FD  3001               	movlw	1
  6679  04FE  07B2               	addwf	_t,f
  6680  04FF  1803               	skipnc
  6681  0500  0AB3               	incf	_t+1,f
  6682  0501  3000               	movlw	0
  6683  0502  07B3               	addwf	_t+1,f
  6684                           
  6685                           ;Button_src.c: 448:                     t = modulus_func(t,10);
  6686  0503  0833               	movf	_t+1,w
  6687  0504  00F8               	movwf	modulus_func@x+1
  6688  0505  0832               	movf	_t,w
  6689  0506  00F7               	movwf	modulus_func@x
  6690  0507  300A               	movlw	10
  6691  0508  00F9               	movwf	modulus_func@y
  6692  0509  3000               	movlw	0
  6693  050A  00FA               	movwf	modulus_func@y+1
  6694  050B  160A  118A  2414  120A  118A  	fcall	_modulus_func
  6695  0510  0878               	movf	?_modulus_func+1,w
  6696  0511  00B3               	movwf	_t+1
  6697  0512  0877               	movf	?_modulus_func,w
  6698  0513  00B2               	movwf	_t
  6699                           
  6700                           ;Button_src.c: 449:                      if (p == 1){
  6701  0514  0322               	decf	_p,w
  6702  0515  0423               	iorwf	_p+1,w
  6703  0516  1D03               	btfss	3,2
  6704  0517  2D31               	goto	l4144
  6705                           
  6706                           ;Button_src.c: 450:                         w = incrementor(w,t,'0');
  6707  0518  0831               	movf	_w+1,w
  6708  0519  00DF               	movwf	incrementor@upper_val+1
  6709  051A  0830               	movf	_w,w
  6710  051B  00DE               	movwf	incrementor@upper_val
  6711  051C  0833               	movf	_t+1,w
  6712  051D  00E1               	movwf	incrementor@lower_val+1
  6713  051E  0832               	movf	_t,w
  6714  051F  00E0               	movwf	incrementor@lower_val
  6715  0520  3030               	movlw	48
  6716  0521  00E3               	movwf	??_date_settings
  6717  0522  0863               	movf	??_date_settings,w
  6718  0523  00E2               	movwf	incrementor@z
  6719  0524  160A  118A  2541  120A  118A  	fcall	_incrementor
  6720  0529  00E4               	movwf	??_date_settings+1
  6721  052A  01E5               	clrf	??_date_settings+2
  6722  052B  0864               	movf	??_date_settings+1,w
  6723  052C  00B0               	movwf	_w
  6724  052D  0865               	movf	??_date_settings+2,w
  6725  052E  00B1               	movwf	_w+1
  6726                           
  6727                           ;Button_src.c: 451:                         p = 0;
  6728  052F  01A2               	clrf	_p
  6729  0530  01A3               	clrf	_p+1
  6730  0531                     l4144:	
  6731                           
  6732                           ;Button_src.c: 453:                     if (t == 9){
  6733  0531  3009               	movlw	9
  6734  0532  0632               	xorwf	_t,w
  6735  0533  0433               	iorwf	_t+1,w
  6736  0534  1D03               	btfss	3,2
  6737  0535  2D3A               	goto	l4148
  6738                           
  6739                           ;Button_src.c: 454:                         p = 1;
  6740  0536  3001               	movlw	1
  6741  0537  00A2               	movwf	_p
  6742  0538  3000               	movlw	0
  6743  0539  00A3               	movwf	_p+1
  6744  053A                     l4148:	
  6745                           
  6746                           ;Button_src.c: 457:                      if(c == (0x59 + 1)){
  6747  053A  305A               	movlw	90
  6748  053B  0646               	xorwf	_c,w
  6749  053C  1903               	btfsc	3,2
  6750                           
  6751                           ;Button_src.c: 458:                         c = 0x00;
  6752  053D  01C6               	clrf	_c
  6753                           
  6754                           ;Button_src.c: 460:                     if(w == 6){
  6755  053E  3006               	movlw	6
  6756  053F  0630               	xorwf	_w,w
  6757  0540  0431               	iorwf	_w+1,w
  6758  0541  1D03               	btfss	3,2
  6759  0542  2D47               	goto	l4156
  6760                           
  6761                           ;Button_src.c: 461:                         w = 0;
  6762  0543  01B0               	clrf	_w
  6763  0544  01B1               	clrf	_w+1
  6764                           
  6765                           ;Button_src.c: 462:                         t = 0;
  6766  0545  01B2               	clrf	_t
  6767  0546  01B3               	clrf	_t+1
  6768  0547                     l4156:	
  6769                           
  6770                           ;Button_src.c: 464:                     button_delay();
  6771  0547  160A  118A  2435  120A  118A  	fcall	_button_delay
  6772  054C                     l4158:	
  6773                           
  6774                           ;Button_src.c: 471:                     a = time_date_delimiter(a,0x11,'9',1);
  6775  054C  3011               	movlw	17
  6776  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6777  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6778  054F  00E3               	movwf	??_date_settings
  6779  0550  0863               	movf	??_date_settings,w
  6780  0551  00F0               	movwf	time_date_delimiter@hex
  6781  0552  3039               	movlw	57
  6782  0553  00E4               	movwf	??_date_settings+1
  6783  0554  0864               	movf	??_date_settings+1,w
  6784  0555  00F1               	movwf	time_date_delimiter@limiter
  6785  0556  3001               	movlw	1
  6786  0557  00F2               	movwf	time_date_delimiter@type
  6787  0558  3000               	movlw	0
  6788  0559  00F3               	movwf	time_date_delimiter@type+1
  6789  055A  0848               	movf	_a,w
  6790  055B  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6791  0560  00E5               	movwf	??_date_settings+2
  6792  0561  0865               	movf	??_date_settings+2,w
  6793  0562  00C8               	movwf	_a
  6794                           
  6795                           ;Button_src.c: 473:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6796  0563  3011               	movlw	17
  6797  0564  00E3               	movwf	??_date_settings
  6798  0565  0863               	movf	??_date_settings,w
  6799  0566  00F0               	movwf	time_date_delimiter@hex
  6800  0567  3039               	movlw	57
  6801  0568  00E4               	movwf	??_date_settings+1
  6802  0569  0864               	movf	??_date_settings+1,w
  6803  056A  00F1               	movwf	time_date_delimiter@limiter
  6804  056B  3002               	movlw	2
  6805  056C  00F2               	movwf	time_date_delimiter@type
  6806  056D  3000               	movlw	0
  6807  056E  00F3               	movwf	time_date_delimiter@type+1
  6808  056F  0845               	movf	_day_hex,w
  6809  0570  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6810  0575  00E5               	movwf	??_date_settings+2
  6811  0576  0865               	movf	??_date_settings+2,w
  6812  0577  00C5               	movwf	_day_hex
  6813                           
  6814                           ;Button_src.c: 474:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6815  0578  3021               	movlw	33
  6816  0579  00E3               	movwf	??_date_settings
  6817  057A  0863               	movf	??_date_settings,w
  6818  057B  00F0               	movwf	time_date_delimiter@hex
  6819  057C  304A               	movlw	74
  6820  057D  00E4               	movwf	??_date_settings+1
  6821  057E  0864               	movf	??_date_settings+1,w
  6822  057F  00F1               	movwf	time_date_delimiter@limiter
  6823  0580  3002               	movlw	2
  6824  0581  00F2               	movwf	time_date_delimiter@type
  6825  0582  3000               	movlw	0
  6826  0583  00F3               	movwf	time_date_delimiter@type+1
  6827  0584  0845               	movf	_day_hex,w
  6828  0585  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6829  058A  00E5               	movwf	??_date_settings+2
  6830  058B  0865               	movf	??_date_settings+2,w
  6831  058C  00C5               	movwf	_day_hex
  6832                           
  6833                           ;Button_src.c: 475:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6834  058D  3011               	movlw	17
  6835  058E  00E3               	movwf	??_date_settings
  6836  058F  0863               	movf	??_date_settings,w
  6837  0590  00F0               	movwf	time_date_delimiter@hex
  6838  0591  3039               	movlw	57
  6839  0592  00E4               	movwf	??_date_settings+1
  6840  0593  0864               	movf	??_date_settings+1,w
  6841  0594  00F1               	movwf	time_date_delimiter@limiter
  6842  0595  3002               	movlw	2
  6843  0596  00F2               	movwf	time_date_delimiter@type
  6844  0597  3000               	movlw	0
  6845  0598  00F3               	movwf	time_date_delimiter@type+1
  6846  0599  0845               	movf	_day_hex,w
  6847  059A  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6848  059F  00E5               	movwf	??_date_settings+2
  6849  05A0  0865               	movf	??_date_settings+2,w
  6850  05A1  00C5               	movwf	_day_hex
  6851                           
  6852                           ;Button_src.c: 476:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6853  05A2  3021               	movlw	33
  6854  05A3  00E3               	movwf	??_date_settings
  6855  05A4  0863               	movf	??_date_settings,w
  6856  05A5  00F0               	movwf	time_date_delimiter@hex
  6857  05A6  304A               	movlw	74
  6858  05A7  00E4               	movwf	??_date_settings+1
  6859  05A8  0864               	movf	??_date_settings+1,w
  6860  05A9  00F1               	movwf	time_date_delimiter@limiter
  6861  05AA  3002               	movlw	2
  6862  05AB  00F2               	movwf	time_date_delimiter@type
  6863  05AC  3000               	movlw	0
  6864  05AD  00F3               	movwf	time_date_delimiter@type+1
  6865  05AE  0845               	movf	_day_hex,w
  6866  05AF  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6867  05B4  00E5               	movwf	??_date_settings+2
  6868  05B5  0865               	movf	??_date_settings+2,w
  6869  05B6  00C5               	movwf	_day_hex
  6870                           
  6871                           ;Button_src.c: 477:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6872  05B7  3031               	movlw	49
  6873  05B8  00E3               	movwf	??_date_settings
  6874  05B9  0863               	movf	??_date_settings,w
  6875  05BA  00F0               	movwf	time_date_delimiter@hex
  6876  05BB  3059               	movlw	89
  6877  05BC  00E4               	movwf	??_date_settings+1
  6878  05BD  0864               	movf	??_date_settings+1,w
  6879  05BE  00F1               	movwf	time_date_delimiter@limiter
  6880  05BF  3002               	movlw	2
  6881  05C0  00F2               	movwf	time_date_delimiter@type
  6882  05C1  3000               	movlw	0
  6883  05C2  00F3               	movwf	time_date_delimiter@type+1
  6884  05C3  0845               	movf	_day_hex,w
  6885  05C4  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6886  05C9  00E5               	movwf	??_date_settings+2
  6887  05CA  0865               	movf	??_date_settings+2,w
  6888  05CB  00C5               	movwf	_day_hex
  6889                           
  6890                           ;Button_src.c: 479:                     c = time_date_delimiter(c,0x11,'9',3);
  6891  05CC  3011               	movlw	17
  6892  05CD  00E3               	movwf	??_date_settings
  6893  05CE  0863               	movf	??_date_settings,w
  6894  05CF  00F0               	movwf	time_date_delimiter@hex
  6895  05D0  3039               	movlw	57
  6896  05D1  00E4               	movwf	??_date_settings+1
  6897  05D2  0864               	movf	??_date_settings+1,w
  6898  05D3  00F1               	movwf	time_date_delimiter@limiter
  6899  05D4  3003               	movlw	3
  6900  05D5  00F2               	movwf	time_date_delimiter@type
  6901  05D6  3000               	movlw	0
  6902  05D7  00F3               	movwf	time_date_delimiter@type+1
  6903  05D8  0846               	movf	_c,w
  6904  05D9  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6905  05DE  00E5               	movwf	??_date_settings+2
  6906  05DF  0865               	movf	??_date_settings+2,w
  6907  05E0  00C6               	movwf	_c
  6908                           
  6909                           ;Button_src.c: 480:                     c = time_date_delimiter(c,0x21,'J',3);
  6910  05E1  3021               	movlw	33
  6911  05E2  00E3               	movwf	??_date_settings
  6912  05E3  0863               	movf	??_date_settings,w
  6913  05E4  00F0               	movwf	time_date_delimiter@hex
  6914  05E5  304A               	movlw	74
  6915  05E6  00E4               	movwf	??_date_settings+1
  6916  05E7  0864               	movf	??_date_settings+1,w
  6917  05E8  00F1               	movwf	time_date_delimiter@limiter
  6918  05E9  3003               	movlw	3
  6919  05EA  00F2               	movwf	time_date_delimiter@type
  6920  05EB  3000               	movlw	0
  6921  05EC  00F3               	movwf	time_date_delimiter@type+1
  6922  05ED  0846               	movf	_c,w
  6923  05EE  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6924  05F3  00E5               	movwf	??_date_settings+2
  6925  05F4  0865               	movf	??_date_settings+2,w
  6926  05F5  00C6               	movwf	_c
  6927                           
  6928                           ;Button_src.c: 481:                     c = time_date_delimiter(c,0x11,'9',3);
  6929  05F6  3011               	movlw	17
  6930  05F7  00E3               	movwf	??_date_settings
  6931  05F8  0863               	movf	??_date_settings,w
  6932  05F9  00F0               	movwf	time_date_delimiter@hex
  6933  05FA  3039               	movlw	57
  6934  05FB  00E4               	movwf	??_date_settings+1
  6935  05FC  0864               	movf	??_date_settings+1,w
  6936  05FD  00F1               	movwf	time_date_delimiter@limiter
  6937  05FE  3003               	movlw	3
  6938  05FF  00F2               	movwf	time_date_delimiter@type
  6939  0600  3000               	movlw	0
  6940  0601  00F3               	movwf	time_date_delimiter@type+1
  6941  0602  0846               	movf	_c,w
  6942  0603  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6943  0608  00E5               	movwf	??_date_settings+2
  6944  0609  0865               	movf	??_date_settings+2,w
  6945  060A  00C6               	movwf	_c
  6946                           
  6947                           ;Button_src.c: 482:                     c = time_date_delimiter(c,0x21,'J',3);
  6948  060B  3021               	movlw	33
  6949  060C  00E3               	movwf	??_date_settings
  6950  060D  0863               	movf	??_date_settings,w
  6951  060E  00F0               	movwf	time_date_delimiter@hex
  6952  060F  304A               	movlw	74
  6953  0610  00E4               	movwf	??_date_settings+1
  6954  0611  0864               	movf	??_date_settings+1,w
  6955  0612  00F1               	movwf	time_date_delimiter@limiter
  6956  0613  3003               	movlw	3
  6957  0614  00F2               	movwf	time_date_delimiter@type
  6958  0615  3000               	movlw	0
  6959  0616  00F3               	movwf	time_date_delimiter@type+1
  6960  0617  0846               	movf	_c,w
  6961  0618  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6962  061D  00E5               	movwf	??_date_settings+2
  6963  061E  0865               	movf	??_date_settings+2,w
  6964  061F  00C6               	movwf	_c
  6965                           
  6966                           ;Button_src.c: 483:                     c = time_date_delimiter(c,0x31,'Y',3);
  6967  0620  3031               	movlw	49
  6968  0621  00E3               	movwf	??_date_settings
  6969  0622  0863               	movf	??_date_settings,w
  6970  0623  00F0               	movwf	time_date_delimiter@hex
  6971  0624  3059               	movlw	89
  6972  0625  00E4               	movwf	??_date_settings+1
  6973  0626  0864               	movf	??_date_settings+1,w
  6974  0627  00F1               	movwf	time_date_delimiter@limiter
  6975  0628  3003               	movlw	3
  6976  0629  00F2               	movwf	time_date_delimiter@type
  6977  062A  3000               	movlw	0
  6978  062B  00F3               	movwf	time_date_delimiter@type+1
  6979  062C  0846               	movf	_c,w
  6980  062D  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6981  0632  00E5               	movwf	??_date_settings+2
  6982  0633  0865               	movf	??_date_settings+2,w
  6983  0634  00C6               	movwf	_c
  6984                           
  6985                           ;Button_src.c: 484:                     c = time_date_delimiter(c,0x41,'j',3);
  6986  0635  3041               	movlw	65
  6987  0636  00E3               	movwf	??_date_settings
  6988  0637  0863               	movf	??_date_settings,w
  6989  0638  00F0               	movwf	time_date_delimiter@hex
  6990  0639  306A               	movlw	106
  6991  063A  00E4               	movwf	??_date_settings+1
  6992  063B  0864               	movf	??_date_settings+1,w
  6993  063C  00F1               	movwf	time_date_delimiter@limiter
  6994  063D  3003               	movlw	3
  6995  063E  00F2               	movwf	time_date_delimiter@type
  6996  063F  3000               	movlw	0
  6997  0640  00F3               	movwf	time_date_delimiter@type+1
  6998  0641  0846               	movf	_c,w
  6999  0642  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  7000  0647  00E5               	movwf	??_date_settings+2
  7001  0648  0865               	movf	??_date_settings+2,w
  7002  0649  00C6               	movwf	_c
  7003                           
  7004                           ;Button_src.c: 485:                     c = time_date_delimiter(c,0x51,'z',3);
  7005  064A  3051               	movlw	81
  7006  064B  00E3               	movwf	??_date_settings
  7007  064C  0863               	movf	??_date_settings,w
  7008  064D  00F0               	movwf	time_date_delimiter@hex
  7009  064E  307A               	movlw	122
  7010  064F  00E4               	movwf	??_date_settings+1
  7011  0650  0864               	movf	??_date_settings+1,w
  7012  0651  00F1               	movwf	time_date_delimiter@limiter
  7013  0652  3003               	movlw	3
  7014  0653  00F2               	movwf	time_date_delimiter@type
  7015  0654  3000               	movlw	0
  7016  0655  00F3               	movwf	time_date_delimiter@type+1
  7017  0656  0846               	movf	_c,w
  7018  0657  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  7019  065C  00E5               	movwf	??_date_settings+2
  7020  065D  0865               	movf	??_date_settings+2,w
  7021  065E  00C6               	movwf	_c
  7022                           
  7023                           ;Button_src.c: 487:               if(stats==0){
  7024  065F  0824               	movf	_stats,w
  7025  0660  0425               	iorwf	_stats+1,w
  7026  0661  1D03               	btfss	3,2
  7027  0662  2E71               	goto	l4188
  7028                           
  7029                           ;Button_src.c: 488:                   table[4] = prev_hex;
  7030  0663  0843               	movf	_prev_hex,w
  7031  0664  00E3               	movwf	??_date_settings
  7032  0665  0863               	movf	??_date_settings,w
  7033  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7034  0667  00B1               	movwf	(_table^(0+128)+4)
  7035                           
  7036                           ;Button_src.c: 489:                   table[6] = prev_hex_year;
  7037  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7038  0669  0841               	movf	_prev_hex_year,w
  7039  066A  00E3               	movwf	??_date_settings
  7040  066B  0863               	movf	??_date_settings,w
  7041  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7042  066D  00B3               	movwf	(_table^(0+128)+6)
  7043                           
  7044                           ;Button_src.c: 490:                   table[3] = prev_hex_day;
  7045  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7046  066F  0842               	movf	_prev_hex_day,w
  7047  0670  2E82               	goto	L3
  7048  0671                     l4188:	
  7049                           ;Button_src.c: 491:               }
  7050                           
  7051  0671  0324               	decf	_stats,w
  7052  0672  0425               	iorwf	_stats+1,w
  7053  0673  1D03               	btfss	3,2
  7054  0674  2E86               	goto	l4192
  7055                           
  7056                           ;Button_src.c: 493:               {;Button_src.c: 494:                  table[4]= a;
  7057  0675  0848               	movf	_a,w
  7058  0676  00E3               	movwf	??_date_settings
  7059  0677  0863               	movf	??_date_settings,w
  7060  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7061  0679  00B1               	movwf	(_table^(0+128)+4)
  7062                           
  7063                           ;Button_src.c: 495:                  table[6] = c;
  7064  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7065  067B  0846               	movf	_c,w
  7066  067C  00E3               	movwf	??_date_settings
  7067  067D  0863               	movf	??_date_settings,w
  7068  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7069  067F  00B3               	movwf	(_table^(0+128)+6)
  7070                           
  7071                           ;Button_src.c: 496:                  table[3] = day_hex;
  7072  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7073  0681  0845               	movf	_day_hex,w
  7074  0682                     L3:	
  7075  0682  00E3               	movwf	??_date_settings
  7076  0683  0863               	movf	??_date_settings,w
  7077  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7078  0685  00B0               	movwf	(_table^(0+128)+3)
  7079  0686                     l4192:	
  7080                           
  7081                           ;Button_src.c: 499:              write_cmd(0x88);
  7082  0686  3088               	movlw	136
  7083  0687  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7084                           
  7085                           ;Button_src.c: 501:                   RC0 = 0;
  7086  068C  1007               	bcf	7,0	;volatile
  7087                           
  7088                           ;Button_src.c: 502:                   RC1 = 1;
  7089  068D  1487               	bsf	7,1	;volatile
  7090                           
  7091                           ;Button_src.c: 503:                   RC2 = 1;
  7092  068E  1507               	bsf	7,2	;volatile
  7093                           
  7094                           ;Button_src.c: 504:                   RC3 = 1;
  7095  068F  1587               	bsf	7,3	;volatile
  7096                           
  7097                           ;Button_src.c: 506:                     if (RC6 == 0 ){
  7098  0690  1B07               	btfsc	7,6	;volatile
  7099  0691  2EAB               	goto	l753
  7100                           
  7101                           ;Button_src.c: 507:                           a = 0x00;
  7102  0692  01C8               	clrf	_a
  7103                           
  7104                           ;Button_src.c: 508:                           c = 0x00;
  7105  0693  01C6               	clrf	_c
  7106                           
  7107                           ;Button_src.c: 509:                           day_hex = 0x00;
  7108  0694  01C5               	clrf	_day_hex
  7109                           
  7110                           ;Button_src.c: 510:                           day_high = 0;
  7111  0695  01A6               	clrf	_day_high
  7112  0696  01A7               	clrf	_day_high+1
  7113                           
  7114                           ;Button_src.c: 511:                           day_low = 0;
  7115  0697  01A8               	clrf	_day_low
  7116  0698  01A9               	clrf	_day_low+1
  7117                           
  7118                           ;Button_src.c: 512:                           x = 0;
  7119  0699  01AE               	clrf	_x
  7120  069A  01AF               	clrf	_x+1
  7121                           
  7122                           ;Button_src.c: 513:                           y = 0;
  7123  069B  01AC               	clrf	_y
  7124  069C  01AD               	clrf	_y+1
  7125                           
  7126                           ;Button_src.c: 514:                           w = 0;
  7127  069D  01B0               	clrf	_w
  7128  069E  01B1               	clrf	_w+1
  7129                           
  7130                           ;Button_src.c: 515:                           t = 0;
  7131  069F  01B2               	clrf	_t
  7132  06A0  01B3               	clrf	_t+1
  7133                           
  7134                           ;Button_src.c: 516:                           write_cmd(0x1);
  7135  06A1  3001               	movlw	1
  7136  06A2  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7137                           
  7138                           ;Button_src.c: 517:                           set_time();
  7139  06A7  160A  118A  2589   	fcall	_set_time
  7140  06AA  0008               	return
  7141  06AB                     l753:	
  7142                           ;Button_src.c: 519:                             }
  7143                           
  7144                           
  7145                           ;Button_src.c: 520:                   RC0 = 0;
  7146  06AB  1007               	bcf	7,0	;volatile
  7147                           
  7148                           ;Button_src.c: 521:                   RC1 = 1;
  7149  06AC  1487               	bsf	7,1	;volatile
  7150                           
  7151                           ;Button_src.c: 522:                   RC2 = 1;
  7152  06AD  1507               	bsf	7,2	;volatile
  7153                           
  7154                           ;Button_src.c: 523:                   RC3 = 1;
  7155  06AE  1587               	bsf	7,3	;volatile
  7156                           
  7157                           ;Button_src.c: 524:                   z = modulus_func(z,3);
  7158  06AF  082B               	movf	_z+1,w
  7159  06B0  00F8               	movwf	modulus_func@x+1
  7160  06B1  082A               	movf	_z,w
  7161  06B2  00F7               	movwf	modulus_func@x
  7162  06B3  3003               	movlw	3
  7163  06B4  00F9               	movwf	modulus_func@y
  7164  06B5  3000               	movlw	0
  7165  06B6  00FA               	movwf	modulus_func@y+1
  7166  06B7  160A  118A  2414  120A  118A  	fcall	_modulus_func
  7167  06BC  0878               	movf	?_modulus_func+1,w
  7168  06BD  00AB               	movwf	_z+1
  7169  06BE  0877               	movf	?_modulus_func,w
  7170  06BF  00AA               	movwf	_z
  7171                           
  7172                           ;Button_src.c: 525:                   if(RC4 == 0 && z ==0){
  7173  06C0  1A07               	btfsc	7,4	;volatile
  7174  06C1  2F01               	goto	l4224
  7175  06C2  082A               	movf	_z,w
  7176  06C3  042B               	iorwf	_z+1,w
  7177  06C4  1D03               	btfss	3,2
  7178  06C5  2F01               	goto	l4224
  7179                           
  7180                           ;Button_src.c: 526:                       write_cmd(0x90);
  7181  06C6  3090               	movlw	144
  7182  06C7  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7183                           
  7184                           ;Button_src.c: 527:                       write_char('D');
  7185  06CC  3044               	movlw	68
  7186  06CD  160A  118A  2485  120A  118A  	fcall	_write_char
  7187                           
  7188                           ;Button_src.c: 528:                       write_char('a');
  7189  06D2  3061               	movlw	97
  7190  06D3  160A  118A  2485  120A  118A  	fcall	_write_char
  7191                           
  7192                           ;Button_src.c: 529:                       write_char('y');
  7193  06D8  3079               	movlw	121
  7194  06D9  160A  118A  2485  120A  118A  	fcall	_write_char
  7195                           
  7196                           ;Button_src.c: 530:                       write_char(':');
  7197  06DE  303A               	movlw	58
  7198  06DF  160A  118A  2485  120A  118A  	fcall	_write_char
  7199                           
  7200                           ;Button_src.c: 531:                       write_char(' ');
  7201  06E4  3020               	movlw	32
  7202  06E5  160A  118A  2485  120A  118A  	fcall	_write_char
  7203                           
  7204                           ;Button_src.c: 532:                       write_char(' ');
  7205  06EA  3020               	movlw	32
  7206  06EB  160A  118A  2485  120A  118A  	fcall	_write_char
  7207                           
  7208                           ;Button_src.c: 533:                       b = 'y';
  7209  06F0  3079               	movlw	121
  7210  06F1  00E3               	movwf	??_date_settings
  7211  06F2  0863               	movf	??_date_settings,w
  7212  06F3  00C7               	movwf	_b
  7213                           
  7214                           ;Button_src.c: 535:                       button_delay();
  7215  06F4  160A  118A  2435  120A  118A  	fcall	_button_delay
  7216                           
  7217                           ;Button_src.c: 536:                       z++;
  7218  06F9  3001               	movlw	1
  7219  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7220  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7221  06FC  07AA               	addwf	_z,f
  7222  06FD  1803               	skipnc
  7223  06FE  0AAB               	incf	_z+1,f
  7224  06FF  3000               	movlw	0
  7225  0700  07AB               	addwf	_z+1,f
  7226  0701                     l4224:	
  7227                           
  7228                           ;Button_src.c: 538:                   RC0 = 0;
  7229  0701  1007               	bcf	7,0	;volatile
  7230                           
  7231                           ;Button_src.c: 539:                   RC1 = 1;
  7232  0702  1487               	bsf	7,1	;volatile
  7233                           
  7234                           ;Button_src.c: 540:                   RC2 = 1;
  7235  0703  1507               	bsf	7,2	;volatile
  7236                           
  7237                           ;Button_src.c: 541:                   RC3 = 1;
  7238  0704  1587               	bsf	7,3	;volatile
  7239                           
  7240                           ;Button_src.c: 542:                   if(RC4 == 0&& z ==1){
  7241  0705  1A07               	btfsc	7,4	;volatile
  7242  0706  2F44               	goto	l4254
  7243  0707  032A               	decf	_z,w
  7244  0708  042B               	iorwf	_z+1,w
  7245  0709  1D03               	btfss	3,2
  7246  070A  2F44               	goto	l4254
  7247                           
  7248                           ;Button_src.c: 543:                       z++;
  7249  070B  3001               	movlw	1
  7250  070C  07AA               	addwf	_z,f
  7251  070D  1803               	skipnc
  7252  070E  0AAB               	incf	_z+1,f
  7253  070F  3000               	movlw	0
  7254  0710  07AB               	addwf	_z+1,f
  7255                           
  7256                           ;Button_src.c: 544:                       button_delay();
  7257  0711  160A  118A  2435  120A  118A  	fcall	_button_delay
  7258                           
  7259                           ;Button_src.c: 546:                       write_cmd(0x90);
  7260  0716  3090               	movlw	144
  7261  0717  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7262                           
  7263                           ;Button_src.c: 547:                       write_char('M');
  7264  071C  304D               	movlw	77
  7265  071D  160A  118A  2485  120A  118A  	fcall	_write_char
  7266                           
  7267                           ;Button_src.c: 548:                       write_char('o');
  7268  0722  306F               	movlw	111
  7269  0723  160A  118A  2485  120A  118A  	fcall	_write_char
  7270                           
  7271                           ;Button_src.c: 549:                       write_char('n');
  7272  0728  306E               	movlw	110
  7273  0729  160A  118A  2485  120A  118A  	fcall	_write_char
  7274                           
  7275                           ;Button_src.c: 550:                       write_char('t');
  7276  072E  3074               	movlw	116
  7277  072F  160A  118A  2485  120A  118A  	fcall	_write_char
  7278                           
  7279                           ;Button_src.c: 551:                       write_char('h');
  7280  0734  3068               	movlw	104
  7281  0735  160A  118A  2485  120A  118A  	fcall	_write_char
  7282                           
  7283                           ;Button_src.c: 552:                       write_char(':');
  7284  073A  303A               	movlw	58
  7285  073B  160A  118A  2485  120A  118A  	fcall	_write_char
  7286                           
  7287                           ;Button_src.c: 553:                       b = 'x';
  7288  0740  3078               	movlw	120
  7289  0741  00E3               	movwf	??_date_settings
  7290  0742  0863               	movf	??_date_settings,w
  7291  0743  00C7               	movwf	_b
  7292  0744                     l4254:	
  7293                           
  7294                           ;Button_src.c: 556:                   RC0 = 0;
  7295  0744  1007               	bcf	7,0	;volatile
  7296                           
  7297                           ;Button_src.c: 557:                   RC1 = 1;
  7298  0745  1487               	bsf	7,1	;volatile
  7299                           
  7300                           ;Button_src.c: 558:                   RC2 = 1;
  7301  0746  1507               	bsf	7,2	;volatile
  7302                           
  7303                           ;Button_src.c: 559:                   RC3 = 1;
  7304  0747  1587               	bsf	7,3	;volatile
  7305                           
  7306                           ;Button_src.c: 560:                   if(RC4 == 0&& z ==2){
  7307  0748  1A07               	btfsc	7,4	;volatile
  7308  0749  2F8A               	goto	l4284
  7309  074A  3002               	movlw	2
  7310  074B  062A               	xorwf	_z,w
  7311  074C  042B               	iorwf	_z+1,w
  7312  074D  1D03               	btfss	3,2
  7313  074E  2F8A               	goto	l4284
  7314                           
  7315                           ;Button_src.c: 561:                       button_delay();
  7316  074F  160A  118A  2435  120A  118A  	fcall	_button_delay
  7317                           
  7318                           ;Button_src.c: 562:                       z++;
  7319  0754  3001               	movlw	1
  7320  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7321  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7322  0757  07AA               	addwf	_z,f
  7323  0758  1803               	skipnc
  7324  0759  0AAB               	incf	_z+1,f
  7325  075A  3000               	movlw	0
  7326  075B  07AB               	addwf	_z+1,f
  7327                           
  7328                           ;Button_src.c: 564:                       write_cmd(0x90);
  7329  075C  3090               	movlw	144
  7330  075D  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7331                           
  7332                           ;Button_src.c: 565:                       write_char('Y');
  7333  0762  3059               	movlw	89
  7334  0763  160A  118A  2485  120A  118A  	fcall	_write_char
  7335                           
  7336                           ;Button_src.c: 566:                       write_char('e');
  7337  0768  3065               	movlw	101
  7338  0769  160A  118A  2485  120A  118A  	fcall	_write_char
  7339                           
  7340                           ;Button_src.c: 567:                       write_char('a');
  7341  076E  3061               	movlw	97
  7342  076F  160A  118A  2485  120A  118A  	fcall	_write_char
  7343                           
  7344                           ;Button_src.c: 568:                       write_char('r');
  7345  0774  3072               	movlw	114
  7346  0775  160A  118A  2485  120A  118A  	fcall	_write_char
  7347                           
  7348                           ;Button_src.c: 569:                       write_char(':');
  7349  077A  303A               	movlw	58
  7350  077B  160A  118A  2485  120A  118A  	fcall	_write_char
  7351                           
  7352                           ;Button_src.c: 570:                       write_char(' ');
  7353  0780  3020               	movlw	32
  7354  0781  160A  118A  2485  120A  118A  	fcall	_write_char
  7355                           
  7356                           ;Button_src.c: 571:                       b = 'z';
  7357  0786  307A               	movlw	122
  7358  0787  00E3               	movwf	??_date_settings
  7359  0788  0863               	movf	??_date_settings,w
  7360  0789  00C7               	movwf	_b
  7361  078A                     l4284:	
  7362                           
  7363                           ;Button_src.c: 574:               write_cmd(0x88);
  7364  078A  3088               	movlw	136
  7365  078B  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7366                           
  7367                           ;Button_src.c: 575:               write_char(day_high + '0');
  7368  0790  0826               	movf	_day_high,w
  7369  0791  3E30               	addlw	48
  7370  0792  160A  118A  2485  120A  118A  	fcall	_write_char
  7371                           
  7372                           ;Button_src.c: 576:               write_char(day_low + '0');
  7373  0797  0828               	movf	_day_low,w
  7374  0798  3E30               	addlw	48
  7375  0799  160A  118A  2485  120A  118A  	fcall	_write_char
  7376                           
  7377                           ;Button_src.c: 577:               write_char('/');
  7378  079E  302F               	movlw	47
  7379  079F  160A  118A  2485  120A  118A  	fcall	_write_char
  7380                           
  7381                           ;Button_src.c: 578:               write_char(y + '0');
  7382  07A4  082C               	movf	_y,w
  7383  07A5  3E30               	addlw	48
  7384  07A6  160A  118A  2485  120A  118A  	fcall	_write_char
  7385                           
  7386                           ;Button_src.c: 579:               write_char(x + '0');
  7387  07AB  082E               	movf	_x,w
  7388  07AC  3E30               	addlw	48
  7389  07AD  160A  118A  2485  120A  118A  	fcall	_write_char
  7390                           
  7391                           ;Button_src.c: 580:               write_char('/');
  7392  07B2  302F               	movlw	47
  7393  07B3  160A  118A  2485  120A  118A  	fcall	_write_char
  7394                           
  7395                           ;Button_src.c: 581:               write_char(w+ '0');
  7396  07B8  0830               	movf	_w,w
  7397  07B9  3E30               	addlw	48
  7398  07BA  160A  118A  2485  120A  118A  	fcall	_write_char
  7399                           
  7400                           ;Button_src.c: 582:               write_char(t+ '0');
  7401  07BF  0832               	movf	_t,w
  7402  07C0  3E30               	addlw	48
  7403  07C1  160A  118A  2485  120A  118A  	fcall	_write_char
  7404                           
  7405                           ;Button_src.c: 585:             RC0 = 0;
  7406  07C6  1007               	bcf	7,0	;volatile
  7407                           
  7408                           ;Button_src.c: 586:             RC1 = 1;
  7409  07C7  1487               	bsf	7,1	;volatile
  7410                           
  7411                           ;Button_src.c: 587:             RC2 = 1;
  7412  07C8  1507               	bsf	7,2	;volatile
  7413                           
  7414                           ;Button_src.c: 588:             RC3 = 1;
  7415  07C9  1587               	bsf	7,3	;volatile
  7416                           
  7417                           ;Button_src.c: 589:             if (RC7 == 0 ){
  7418  07CA  1B87               	btfsc	7,7	;volatile
  7419  07CB  2B95               	goto	l730
  7420                           
  7421                           ;Button_src.c: 590:             a = 0x00;
  7422  07CC  01C8               	clrf	_a
  7423                           
  7424                           ;Button_src.c: 591:             c = 0x00;
  7425  07CD  01C6               	clrf	_c
  7426                           
  7427                           ;Button_src.c: 592:             day_hex = 0x00;
  7428  07CE  01C5               	clrf	_day_hex
  7429                           
  7430                           ;Button_src.c: 593:             x = 0;
  7431  07CF  01AE               	clrf	_x
  7432  07D0  01AF               	clrf	_x+1
  7433                           
  7434                           ;Button_src.c: 594:             y = 0;
  7435  07D1  01AC               	clrf	_y
  7436  07D2  01AD               	clrf	_y+1
  7437                           
  7438                           ;Button_src.c: 595:             w = 0;
  7439  07D3  01B0               	clrf	_w
  7440  07D4  01B1               	clrf	_w+1
  7441                           
  7442                           ;Button_src.c: 596:             t = 0;
  7443  07D5  01B2               	clrf	_t
  7444  07D6  01B3               	clrf	_t+1
  7445                           
  7446                           ;Button_src.c: 597:             day_high = 0;
  7447  07D7  01A6               	clrf	_day_high
  7448  07D8  01A7               	clrf	_day_high+1
  7449                           
  7450                           ;Button_src.c: 598:             day_low = 0;
  7451  07D9  01A8               	clrf	_day_low
  7452  07DA  01A9               	clrf	_day_low+1
  7453                           
  7454                           ;Button_src.c: 599:             write_cmd(0x1);
  7455  07DB  3001               	movlw	1
  7456  07DC  120A  118A  2006   	fcall	_write_cmd
  7457                           
  7458                           ;Button_src.c: 600:             break;
  7459  07DF  0008               	return
  7460  07E0                     __end_of_date_settings:	
  7461                           
  7462                           	psect	text30
  7463  0006                     __ptext30:	
  7464 ;; *************** function _write_cmd *****************
  7465 ;; Defined at:
  7466 ;;		line 41 in file "LCD_src.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  x               1    wreg     unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  x               1    2[COMMON] unsigned char 
  7471 ;;  i               2    0        int 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 300/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7481 ;;      Params:         0       0       0       0       0
  7482 ;;      Locals:         1       0       0       0       0
  7483 ;;      Temps:          0       0       0       0       0
  7484 ;;      Totals:         1       0       0       0       0
  7485 ;;Total ram usage:        1 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    1
  7488 ;; This function calls:
  7489 ;;		_delay_screen
  7490 ;; This function is called by:
  7491 ;;		_main
  7492 ;;		_lcd_init
  7493 ;;		_thermometer_threshhold_settings
  7494 ;;		_time_settings
  7495 ;;		_date_settings
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           
  7500                           ;psect for function _write_cmd
  7501  0006                     _write_cmd:	
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7505                           ;write_cmd@x stored from wreg
  7506  0006  00F2               	movwf	write_cmd@x
  7507                           
  7508                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7509  0007  1283               	bcf	3,5	;RP0=0, select bank0
  7510  0008  1303               	bcf	3,6	;RP1=0, select bank0
  7511  0009  1285               	bcf	5,5	;volatile
  7512                           
  7513                           ;LCD_src.c: 45:  RA4=0;
  7514  000A  1205               	bcf	5,4	;volatile
  7515                           
  7516                           ;LCD_src.c: 46:  RA3=0;
  7517  000B  1185               	bcf	5,3	;volatile
  7518                           
  7519                           ;LCD_src.c: 47:  delay_screen();
  7520  000C  160A  118A  2449  120A  118A  	fcall	_delay_screen
  7521                           
  7522                           ;LCD_src.c: 48:  RA3=1;
  7523  0011  1283               	bcf	3,5	;RP0=0, select bank0
  7524  0012  1303               	bcf	3,6	;RP1=0, select bank0
  7525  0013  1585               	bsf	5,3	;volatile
  7526                           
  7527                           ;LCD_src.c: 49:  PORTD=x;
  7528  0014  0872               	movf	write_cmd@x,w
  7529  0015  0088               	movwf	8	;volatile
  7530                           
  7531                           ;LCD_src.c: 50:  delay_screen();
  7532  0016  160A  118A  2449   	fcall	_delay_screen
  7533                           
  7534                           ;LCD_src.c: 51:  RA3=0;
  7535  0019  1283               	bcf	3,5	;RP0=0, select bank0
  7536  001A  1303               	bcf	3,6	;RP1=0, select bank0
  7537  001B  1185               	bcf	5,3	;volatile
  7538  001C  0008               	return
  7539  001D                     __end_of_write_cmd:	
  7540                           
  7541                           	psect	text31
  7542  1485                     __ptext31:	
  7543 ;; *************** function _write_char *****************
  7544 ;; Defined at:
  7545 ;;		line 28 in file "LCD_src.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  x               1    wreg     unsigned char 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  x               1    2[COMMON] unsigned char 
  7550 ;;  i               2    0        int 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 300/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7560 ;;      Params:         0       0       0       0       0
  7561 ;;      Locals:         1       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0
  7563 ;;      Totals:         1       0       0       0       0
  7564 ;;Total ram usage:        1 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    1
  7567 ;; This function calls:
  7568 ;;		_delay_screen
  7569 ;; This function is called by:
  7570 ;;		_main
  7571 ;;		_display_temp
  7572 ;;		_display_clock
  7573 ;;		_display_date
  7574 ;;		_thermometer_threshhold_settings
  7575 ;;		_time_settings
  7576 ;;		_date_settings
  7577 ;;		_set_upper_threshold
  7578 ;;		_set_lower_threshold
  7579 ;;		_reset_alarm
  7580 ;;		_display_day
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _write_char
  7586  1485                     _write_char:	
  7587                           
  7588                           ;incstack = 0
  7589                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7590                           ;write_char@x stored from wreg
  7591  1485  00F2               	movwf	write_char@x
  7592                           
  7593                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7594  1486  1283               	bcf	3,5	;RP0=0, select bank0
  7595  1487  1303               	bcf	3,6	;RP1=0, select bank0
  7596  1488  1685               	bsf	5,5	;volatile
  7597                           
  7598                           ;LCD_src.c: 32:  RA4=0;
  7599  1489  1205               	bcf	5,4	;volatile
  7600                           
  7601                           ;LCD_src.c: 33:  RA3=0;
  7602  148A  1185               	bcf	5,3	;volatile
  7603                           
  7604                           ;LCD_src.c: 34:  delay_screen();
  7605  148B  160A  118A  2449  160A  118A  	fcall	_delay_screen
  7606                           
  7607                           ;LCD_src.c: 35:  RA3=1;
  7608  1490  1283               	bcf	3,5	;RP0=0, select bank0
  7609  1491  1303               	bcf	3,6	;RP1=0, select bank0
  7610  1492  1585               	bsf	5,3	;volatile
  7611                           
  7612                           ;LCD_src.c: 36:  PORTD= x;
  7613  1493  0872               	movf	write_char@x,w
  7614  1494  0088               	movwf	8	;volatile
  7615                           
  7616                           ;LCD_src.c: 37:  delay_screen();
  7617  1495  160A  118A  2449   	fcall	_delay_screen
  7618                           
  7619                           ;LCD_src.c: 38:  RA3=0;
  7620  1498  1283               	bcf	3,5	;RP0=0, select bank0
  7621  1499  1303               	bcf	3,6	;RP1=0, select bank0
  7622  149A  1185               	bcf	5,3	;volatile
  7623  149B  0008               	return
  7624  149C                     __end_of_write_char:	
  7625                           
  7626                           	psect	text32
  7627  1449                     __ptext32:	
  7628 ;; *************** function _delay_screen *****************
  7629 ;; Defined at:
  7630 ;;		line 70 in file "LCD_src.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  i               2    0[COMMON] int 
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, status,2, btemp+1
  7639 ;; Tracked objects:
  7640 ;;		On entry : 300/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7644 ;;      Params:         0       0       0       0       0
  7645 ;;      Locals:         2       0       0       0       0
  7646 ;;      Temps:          0       0       0       0       0
  7647 ;;      Totals:         2       0       0       0       0
  7648 ;;Total ram usage:        2 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_lcd_init
  7654 ;;		_write_char
  7655 ;;		_write_cmd
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _delay_screen
  7661  1449                     _delay_screen:	
  7662                           
  7663                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7667  1449  01F0               	clrf	delay_screen@i
  7668  144A  01F1               	clrf	delay_screen@i+1
  7669  144B                     l3190:	
  7670  144B  3001               	movlw	1
  7671  144C  07F0               	addwf	delay_screen@i,f
  7672  144D  1803               	skipnc
  7673  144E  0AF1               	incf	delay_screen@i+1,f
  7674  144F  3000               	movlw	0
  7675  1450  07F1               	addwf	delay_screen@i+1,f
  7676  1451  0871               	movf	delay_screen@i+1,w
  7677  1452  3A80               	xorlw	128
  7678  1453  00FF               	movwf	127
  7679  1454  3080               	movlw	128
  7680  1455  027F               	subwf	127,w
  7681  1456  1D03               	skipz
  7682  1457  2C5A               	goto	u2065
  7683  1458  3005               	movlw	5
  7684  1459  0270               	subwf	delay_screen@i,w
  7685  145A                     u2065:	
  7686  145A  1803               	btfsc	3,0
  7687  145B  0008               	return
  7688  145C  2C4B               	goto	l3190
  7689  145D                     __end_of_delay_screen:	
  7690                           
  7691                           	psect	text33
  7692  13F6                     __ptext33:	
  7693 ;; *************** function _time_date_hex_terminator *****************
  7694 ;; Defined at:
  7695 ;;		line 87 in file "math_src.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;  val             1    wreg     unsigned char 
  7698 ;;  limiter         1    0[COMMON] unsigned char 
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;  val             1    3[COMMON] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      unsigned char 
  7703 ;; Registers used:
  7704 ;;		wreg, status,2
  7705 ;; Tracked objects:
  7706 ;;		On entry : 300/0
  7707 ;;		On exit  : 300/0
  7708 ;;		Unchanged: 300/0
  7709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7710 ;;      Params:         1       0       0       0       0
  7711 ;;      Locals:         1       0       0       0       0
  7712 ;;      Temps:          2       0       0       0       0
  7713 ;;      Totals:         4       0       0       0       0
  7714 ;;Total ram usage:        4 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; This function calls:
  7717 ;;		Nothing
  7718 ;; This function is called by:
  7719 ;;		_time_settings
  7720 ;;		_date_settings
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           
  7725                           ;psect for function _time_date_hex_terminator
  7726  13F6                     _time_date_hex_terminator:	
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7730                           ;time_date_hex_terminator@val stored from wreg
  7731  13F6  00F3               	movwf	time_date_hex_terminator@val
  7732                           
  7733                           ;math_src.c: 88:     if((val + '0') == limiter){
  7734  13F7  0873               	movf	time_date_hex_terminator@val,w
  7735  13F8  3E30               	addlw	48
  7736  13F9  00F1               	movwf	??_time_date_hex_terminator
  7737  13FA  3000               	movlw	0
  7738  13FB  1803               	skipnc
  7739  13FC  3001               	movlw	1
  7740  13FD  00F2               	movwf	??_time_date_hex_terminator+1
  7741  13FE  0870               	movf	time_date_hex_terminator@limiter,w
  7742  13FF  0671               	xorwf	??_time_date_hex_terminator,w
  7743  1400  0472               	iorwf	??_time_date_hex_terminator+1,w
  7744  1401  1903               	btfsc	3,2
  7745                           
  7746                           ;math_src.c: 89:     val = 0x00;
  7747  1402  01F3               	clrf	time_date_hex_terminator@val
  7748                           
  7749                           ;math_src.c: 91:     return val;
  7750  1403  0873               	movf	time_date_hex_terminator@val,w
  7751  1404  0008               	return
  7752  1405                     __end_of_time_date_hex_terminator:	
  7753                           
  7754                           	psect	text34
  7755  0ABB                     __ptext34:	
  7756 ;; *************** function _time_date_delimiter *****************
  7757 ;; Defined at:
  7758 ;;		line 28 in file "math_src.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  val             1    wreg     unsigned char 
  7761 ;;  hex             1    0[COMMON] unsigned char 
  7762 ;;  limiter         1    1[COMMON] unsigned char 
  7763 ;;  type            2    2[COMMON] int 
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  val             1    6[COMMON] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      unsigned char 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2, status,0
  7770 ;; Tracked objects:
  7771 ;;		On entry : 300/0
  7772 ;;		On exit  : 300/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7775 ;;      Params:         4       0       0       0       0
  7776 ;;      Locals:         1       0       0       0       0
  7777 ;;      Temps:          2       0       0       0       0
  7778 ;;      Totals:         7       0       0       0       0
  7779 ;;Total ram usage:        7 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; This function calls:
  7782 ;;		Nothing
  7783 ;; This function is called by:
  7784 ;;		_time_settings
  7785 ;;		_date_settings
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _time_date_delimiter
  7791  0ABB                     _time_date_delimiter:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7795                           ;time_date_delimiter@val stored from wreg
  7796  0ABB  00F6               	movwf	time_date_delimiter@val
  7797                           
  7798                           ;math_src.c: 29:     if((val + '0') == limiter){
  7799  0ABC  0876               	movf	time_date_delimiter@val,w
  7800  0ABD  3E30               	addlw	48
  7801  0ABE  00F4               	movwf	??_time_date_delimiter
  7802  0ABF  3000               	movlw	0
  7803  0AC0  1803               	skipnc
  7804  0AC1  3001               	movlw	1
  7805  0AC2  00F5               	movwf	??_time_date_delimiter+1
  7806  0AC3  0871               	movf	time_date_delimiter@limiter,w
  7807  0AC4  0674               	xorwf	??_time_date_delimiter,w
  7808  0AC5  0475               	iorwf	??_time_date_delimiter+1,w
  7809  0AC6  1D03               	skipz
  7810  0AC7  2C10               	goto	l3596
  7811                           
  7812                           ;math_src.c: 30:     val = hex;
  7813  0AC8  0870               	movf	time_date_delimiter@hex,w
  7814  0AC9  00F4               	movwf	??_time_date_delimiter
  7815  0ACA  0874               	movf	??_time_date_delimiter,w
  7816  0ACB  00F6               	movwf	time_date_delimiter@val
  7817                           
  7818                           ;math_src.c: 31:     stats=0;
  7819  0ACC  01A4               	clrf	_stats
  7820  0ACD  01A5               	clrf	_stats+1
  7821                           
  7822                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7823  0ACE  3039               	movlw	57
  7824  0ACF  0671               	xorwf	time_date_delimiter@limiter,w
  7825  0AD0  1D03               	btfss	3,2
  7826  0AD1  2ADA               	goto	l3450
  7827  0AD2  0372               	decf	time_date_delimiter@type,w
  7828  0AD3  0473               	iorwf	time_date_delimiter@type+1,w
  7829  0AD4  1D03               	btfss	3,2
  7830  0AD5  2ADA               	goto	l3450
  7831                           
  7832                           ;math_src.c: 33:         prev_hex= 0x09;
  7833  0AD6  3009               	movlw	9
  7834  0AD7  00F4               	movwf	??_time_date_delimiter
  7835  0AD8  0874               	movf	??_time_date_delimiter,w
  7836  0AD9  00C3               	movwf	_prev_hex
  7837  0ADA                     l3450:	
  7838                           
  7839                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7840  0ADA  304A               	movlw	74
  7841  0ADB  0671               	xorwf	time_date_delimiter@limiter,w
  7842  0ADC  1D03               	btfss	3,2
  7843  0ADD  2AE6               	goto	l3456
  7844  0ADE  0372               	decf	time_date_delimiter@type,w
  7845  0ADF  0473               	iorwf	time_date_delimiter@type+1,w
  7846  0AE0  1D03               	btfss	3,2
  7847  0AE1  2AE6               	goto	l3456
  7848                           
  7849                           ;math_src.c: 35:         prev_hex = 0x19;
  7850  0AE2  3019               	movlw	25
  7851  0AE3  00F4               	movwf	??_time_date_delimiter
  7852  0AE4  0874               	movf	??_time_date_delimiter,w
  7853  0AE5  00C3               	movwf	_prev_hex
  7854  0AE6                     l3456:	
  7855                           
  7856                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7857  0AE6  3059               	movlw	89
  7858  0AE7  0671               	xorwf	time_date_delimiter@limiter,w
  7859  0AE8  1D03               	btfss	3,2
  7860  0AE9  2AF2               	goto	l3462
  7861  0AEA  0372               	decf	time_date_delimiter@type,w
  7862  0AEB  0473               	iorwf	time_date_delimiter@type+1,w
  7863  0AEC  1D03               	btfss	3,2
  7864  0AED  2AF2               	goto	l3462
  7865                           
  7866                           ;math_src.c: 37:         prev_hex = 0x29;
  7867  0AEE  3029               	movlw	41
  7868  0AEF  00F4               	movwf	??_time_date_delimiter
  7869  0AF0  0874               	movf	??_time_date_delimiter,w
  7870  0AF1  00C3               	movwf	_prev_hex
  7871  0AF2                     l3462:	
  7872                           
  7873                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7874  0AF2  306A               	movlw	106
  7875  0AF3  0671               	xorwf	time_date_delimiter@limiter,w
  7876  0AF4  1D03               	btfss	3,2
  7877  0AF5  2AFE               	goto	l3468
  7878  0AF6  0372               	decf	time_date_delimiter@type,w
  7879  0AF7  0473               	iorwf	time_date_delimiter@type+1,w
  7880  0AF8  1D03               	btfss	3,2
  7881  0AF9  2AFE               	goto	l3468
  7882                           
  7883                           ;math_src.c: 39:         prev_hex =0x39;
  7884  0AFA  3039               	movlw	57
  7885  0AFB  00F4               	movwf	??_time_date_delimiter
  7886  0AFC  0874               	movf	??_time_date_delimiter,w
  7887  0AFD  00C3               	movwf	_prev_hex
  7888  0AFE                     l3468:	
  7889                           
  7890                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7891  0AFE  307A               	movlw	122
  7892  0AFF  0671               	xorwf	time_date_delimiter@limiter,w
  7893  0B00  1D03               	btfss	3,2
  7894  0B01  2B0A               	goto	l3474
  7895  0B02  0372               	decf	time_date_delimiter@type,w
  7896  0B03  0473               	iorwf	time_date_delimiter@type+1,w
  7897  0B04  1D03               	btfss	3,2
  7898  0B05  2B0A               	goto	l3474
  7899                           
  7900                           ;math_src.c: 41:         prev_hex = 0x49;
  7901  0B06  3049               	movlw	73
  7902  0B07  00F4               	movwf	??_time_date_delimiter
  7903  0B08  0874               	movf	??_time_date_delimiter,w
  7904  0B09  00C3               	movwf	_prev_hex
  7905  0B0A                     l3474:	
  7906                           
  7907                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7908  0B0A  3039               	movlw	57
  7909  0B0B  0671               	xorwf	time_date_delimiter@limiter,w
  7910  0B0C  1D03               	btfss	3,2
  7911  0B0D  2B17               	goto	l3480
  7912  0B0E  3002               	movlw	2
  7913  0B0F  0672               	xorwf	time_date_delimiter@type,w
  7914  0B10  0473               	iorwf	time_date_delimiter@type+1,w
  7915  0B11  1D03               	btfss	3,2
  7916  0B12  2B17               	goto	l3480
  7917                           
  7918                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7919  0B13  3009               	movlw	9
  7920  0B14  00F4               	movwf	??_time_date_delimiter
  7921  0B15  0874               	movf	??_time_date_delimiter,w
  7922  0B16  00C2               	movwf	_prev_hex_day
  7923  0B17                     l3480:	
  7924                           
  7925                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7926  0B17  304A               	movlw	74
  7927  0B18  0671               	xorwf	time_date_delimiter@limiter,w
  7928  0B19  1D03               	btfss	3,2
  7929  0B1A  2B24               	goto	l3486
  7930  0B1B  3002               	movlw	2
  7931  0B1C  0672               	xorwf	time_date_delimiter@type,w
  7932  0B1D  0473               	iorwf	time_date_delimiter@type+1,w
  7933  0B1E  1D03               	btfss	3,2
  7934  0B1F  2B24               	goto	l3486
  7935                           
  7936                           ;math_src.c: 45:         prev_hex_day = 0x19;
  7937  0B20  3019               	movlw	25
  7938  0B21  00F4               	movwf	??_time_date_delimiter
  7939  0B22  0874               	movf	??_time_date_delimiter,w
  7940  0B23  00C2               	movwf	_prev_hex_day
  7941  0B24                     l3486:	
  7942                           
  7943                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  7944  0B24  3059               	movlw	89
  7945  0B25  0671               	xorwf	time_date_delimiter@limiter,w
  7946  0B26  1D03               	btfss	3,2
  7947  0B27  2B31               	goto	l3492
  7948  0B28  3002               	movlw	2
  7949  0B29  0672               	xorwf	time_date_delimiter@type,w
  7950  0B2A  0473               	iorwf	time_date_delimiter@type+1,w
  7951  0B2B  1D03               	btfss	3,2
  7952  0B2C  2B31               	goto	l3492
  7953                           
  7954                           ;math_src.c: 47:         prev_hex_day = 0x29;
  7955  0B2D  3029               	movlw	41
  7956  0B2E  00F4               	movwf	??_time_date_delimiter
  7957  0B2F  0874               	movf	??_time_date_delimiter,w
  7958  0B30  00C2               	movwf	_prev_hex_day
  7959  0B31                     l3492:	
  7960                           
  7961                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  7962  0B31  306A               	movlw	106
  7963  0B32  0671               	xorwf	time_date_delimiter@limiter,w
  7964  0B33  1D03               	btfss	3,2
  7965  0B34  2B3E               	goto	l3498
  7966  0B35  3002               	movlw	2
  7967  0B36  0672               	xorwf	time_date_delimiter@type,w
  7968  0B37  0473               	iorwf	time_date_delimiter@type+1,w
  7969  0B38  1D03               	btfss	3,2
  7970  0B39  2B3E               	goto	l3498
  7971                           
  7972                           ;math_src.c: 49:         prev_hex_day =0x39;
  7973  0B3A  3039               	movlw	57
  7974  0B3B  00F4               	movwf	??_time_date_delimiter
  7975  0B3C  0874               	movf	??_time_date_delimiter,w
  7976  0B3D  00C2               	movwf	_prev_hex_day
  7977  0B3E                     l3498:	
  7978                           
  7979                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  7980  0B3E  307A               	movlw	122
  7981  0B3F  0671               	xorwf	time_date_delimiter@limiter,w
  7982  0B40  1D03               	btfss	3,2
  7983  0B41  2B4B               	goto	l3504
  7984  0B42  3002               	movlw	2
  7985  0B43  0672               	xorwf	time_date_delimiter@type,w
  7986  0B44  0473               	iorwf	time_date_delimiter@type+1,w
  7987  0B45  1D03               	btfss	3,2
  7988  0B46  2B4B               	goto	l3504
  7989                           
  7990                           ;math_src.c: 51:         prev_hex_day = 0x49;
  7991  0B47  3049               	movlw	73
  7992  0B48  00F4               	movwf	??_time_date_delimiter
  7993  0B49  0874               	movf	??_time_date_delimiter,w
  7994  0B4A  00C2               	movwf	_prev_hex_day
  7995  0B4B                     l3504:	
  7996                           
  7997                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  7998  0B4B  3039               	movlw	57
  7999  0B4C  0671               	xorwf	time_date_delimiter@limiter,w
  8000  0B4D  1D03               	btfss	3,2
  8001  0B4E  2B58               	goto	l3510
  8002  0B4F  3003               	movlw	3
  8003  0B50  0672               	xorwf	time_date_delimiter@type,w
  8004  0B51  0473               	iorwf	time_date_delimiter@type+1,w
  8005  0B52  1D03               	btfss	3,2
  8006  0B53  2B58               	goto	l3510
  8007                           
  8008                           ;math_src.c: 53:         prev_hex_year= 0x09;
  8009  0B54  3009               	movlw	9
  8010  0B55  00F4               	movwf	??_time_date_delimiter
  8011  0B56  0874               	movf	??_time_date_delimiter,w
  8012  0B57  00C1               	movwf	_prev_hex_year
  8013  0B58                     l3510:	
  8014                           
  8015                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  8016  0B58  304A               	movlw	74
  8017  0B59  0671               	xorwf	time_date_delimiter@limiter,w
  8018  0B5A  1D03               	btfss	3,2
  8019  0B5B  2B65               	goto	l3516
  8020  0B5C  3003               	movlw	3
  8021  0B5D  0672               	xorwf	time_date_delimiter@type,w
  8022  0B5E  0473               	iorwf	time_date_delimiter@type+1,w
  8023  0B5F  1D03               	btfss	3,2
  8024  0B60  2B65               	goto	l3516
  8025                           
  8026                           ;math_src.c: 55:         prev_hex_year = 0x19;
  8027  0B61  3019               	movlw	25
  8028  0B62  00F4               	movwf	??_time_date_delimiter
  8029  0B63  0874               	movf	??_time_date_delimiter,w
  8030  0B64  00C1               	movwf	_prev_hex_year
  8031  0B65                     l3516:	
  8032                           
  8033                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  8034  0B65  3059               	movlw	89
  8035  0B66  0671               	xorwf	time_date_delimiter@limiter,w
  8036  0B67  1D03               	btfss	3,2
  8037  0B68  2B72               	goto	l3522
  8038  0B69  3003               	movlw	3
  8039  0B6A  0672               	xorwf	time_date_delimiter@type,w
  8040  0B6B  0473               	iorwf	time_date_delimiter@type+1,w
  8041  0B6C  1D03               	btfss	3,2
  8042  0B6D  2B72               	goto	l3522
  8043                           
  8044                           ;math_src.c: 57:         prev_hex_year = 0x29;
  8045  0B6E  3029               	movlw	41
  8046  0B6F  00F4               	movwf	??_time_date_delimiter
  8047  0B70  0874               	movf	??_time_date_delimiter,w
  8048  0B71  00C1               	movwf	_prev_hex_year
  8049  0B72                     l3522:	
  8050                           
  8051                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  8052  0B72  306A               	movlw	106
  8053  0B73  0671               	xorwf	time_date_delimiter@limiter,w
  8054  0B74  1D03               	btfss	3,2
  8055  0B75  2B7F               	goto	l3528
  8056  0B76  3003               	movlw	3
  8057  0B77  0672               	xorwf	time_date_delimiter@type,w
  8058  0B78  0473               	iorwf	time_date_delimiter@type+1,w
  8059  0B79  1D03               	btfss	3,2
  8060  0B7A  2B7F               	goto	l3528
  8061                           
  8062                           ;math_src.c: 59:         prev_hex_year =0x39;
  8063  0B7B  3039               	movlw	57
  8064  0B7C  00F4               	movwf	??_time_date_delimiter
  8065  0B7D  0874               	movf	??_time_date_delimiter,w
  8066  0B7E  00C1               	movwf	_prev_hex_year
  8067  0B7F                     l3528:	
  8068                           
  8069                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8070  0B7F  307A               	movlw	122
  8071  0B80  0671               	xorwf	time_date_delimiter@limiter,w
  8072  0B81  1D03               	btfss	3,2
  8073  0B82  2B8C               	goto	l3534
  8074  0B83  3003               	movlw	3
  8075  0B84  0672               	xorwf	time_date_delimiter@type,w
  8076  0B85  0473               	iorwf	time_date_delimiter@type+1,w
  8077  0B86  1D03               	btfss	3,2
  8078  0B87  2B8C               	goto	l3534
  8079                           
  8080                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8081  0B88  3049               	movlw	73
  8082  0B89  00F4               	movwf	??_time_date_delimiter
  8083  0B8A  0874               	movf	??_time_date_delimiter,w
  8084  0B8B  00C1               	movwf	_prev_hex_year
  8085  0B8C                     l3534:	
  8086                           
  8087                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8088  0B8C  3039               	movlw	57
  8089  0B8D  0671               	xorwf	time_date_delimiter@limiter,w
  8090  0B8E  1D03               	btfss	3,2
  8091  0B8F  2B99               	goto	l3540
  8092  0B90  3004               	movlw	4
  8093  0B91  0672               	xorwf	time_date_delimiter@type,w
  8094  0B92  0473               	iorwf	time_date_delimiter@type+1,w
  8095  0B93  1D03               	btfss	3,2
  8096  0B94  2B99               	goto	l3540
  8097                           
  8098                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8099  0B95  3009               	movlw	9
  8100  0B96  00F4               	movwf	??_time_date_delimiter
  8101  0B97  0874               	movf	??_time_date_delimiter,w
  8102  0B98  00C0               	movwf	_prev_hex_hours
  8103  0B99                     l3540:	
  8104                           
  8105                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8106  0B99  304A               	movlw	74
  8107  0B9A  0671               	xorwf	time_date_delimiter@limiter,w
  8108  0B9B  1D03               	btfss	3,2
  8109  0B9C  2BA6               	goto	l3546
  8110  0B9D  3004               	movlw	4
  8111  0B9E  0672               	xorwf	time_date_delimiter@type,w
  8112  0B9F  0473               	iorwf	time_date_delimiter@type+1,w
  8113  0BA0  1D03               	btfss	3,2
  8114  0BA1  2BA6               	goto	l3546
  8115                           
  8116                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8117  0BA2  3019               	movlw	25
  8118  0BA3  00F4               	movwf	??_time_date_delimiter
  8119  0BA4  0874               	movf	??_time_date_delimiter,w
  8120  0BA5  00C0               	movwf	_prev_hex_hours
  8121  0BA6                     l3546:	
  8122                           
  8123                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8124  0BA6  3059               	movlw	89
  8125  0BA7  0671               	xorwf	time_date_delimiter@limiter,w
  8126  0BA8  1D03               	btfss	3,2
  8127  0BA9  2BB3               	goto	l3552
  8128  0BAA  3004               	movlw	4
  8129  0BAB  0672               	xorwf	time_date_delimiter@type,w
  8130  0BAC  0473               	iorwf	time_date_delimiter@type+1,w
  8131  0BAD  1D03               	btfss	3,2
  8132  0BAE  2BB3               	goto	l3552
  8133                           
  8134                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8135  0BAF  3029               	movlw	41
  8136  0BB0  00F4               	movwf	??_time_date_delimiter
  8137  0BB1  0874               	movf	??_time_date_delimiter,w
  8138  0BB2  00C0               	movwf	_prev_hex_hours
  8139  0BB3                     l3552:	
  8140                           
  8141                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8142  0BB3  306A               	movlw	106
  8143  0BB4  0671               	xorwf	time_date_delimiter@limiter,w
  8144  0BB5  1D03               	btfss	3,2
  8145  0BB6  2BC0               	goto	l3558
  8146  0BB7  3004               	movlw	4
  8147  0BB8  0672               	xorwf	time_date_delimiter@type,w
  8148  0BB9  0473               	iorwf	time_date_delimiter@type+1,w
  8149  0BBA  1D03               	btfss	3,2
  8150  0BBB  2BC0               	goto	l3558
  8151                           
  8152                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8153  0BBC  3039               	movlw	57
  8154  0BBD  00F4               	movwf	??_time_date_delimiter
  8155  0BBE  0874               	movf	??_time_date_delimiter,w
  8156  0BBF  00C0               	movwf	_prev_hex_hours
  8157  0BC0                     l3558:	
  8158                           
  8159                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8160  0BC0  307A               	movlw	122
  8161  0BC1  0671               	xorwf	time_date_delimiter@limiter,w
  8162  0BC2  1D03               	btfss	3,2
  8163  0BC3  2BCD               	goto	l3564
  8164  0BC4  3004               	movlw	4
  8165  0BC5  0672               	xorwf	time_date_delimiter@type,w
  8166  0BC6  0473               	iorwf	time_date_delimiter@type+1,w
  8167  0BC7  1D03               	btfss	3,2
  8168  0BC8  2BCD               	goto	l3564
  8169                           
  8170                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8171  0BC9  3049               	movlw	73
  8172  0BCA  00F4               	movwf	??_time_date_delimiter
  8173  0BCB  0874               	movf	??_time_date_delimiter,w
  8174  0BCC  00C0               	movwf	_prev_hex_hours
  8175  0BCD                     l3564:	
  8176                           
  8177                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8178  0BCD  3039               	movlw	57
  8179  0BCE  0671               	xorwf	time_date_delimiter@limiter,w
  8180  0BCF  1D03               	btfss	3,2
  8181  0BD0  2BDA               	goto	l3570
  8182  0BD1  3005               	movlw	5
  8183  0BD2  0672               	xorwf	time_date_delimiter@type,w
  8184  0BD3  0473               	iorwf	time_date_delimiter@type+1,w
  8185  0BD4  1D03               	btfss	3,2
  8186  0BD5  2BDA               	goto	l3570
  8187                           
  8188                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8189  0BD6  3009               	movlw	9
  8190  0BD7  00F4               	movwf	??_time_date_delimiter
  8191  0BD8  0874               	movf	??_time_date_delimiter,w
  8192  0BD9  00BF               	movwf	_prev_hex_mins
  8193  0BDA                     l3570:	
  8194                           
  8195                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8196  0BDA  304A               	movlw	74
  8197  0BDB  0671               	xorwf	time_date_delimiter@limiter,w
  8198  0BDC  1D03               	btfss	3,2
  8199  0BDD  2BE7               	goto	l3576
  8200  0BDE  3005               	movlw	5
  8201  0BDF  0672               	xorwf	time_date_delimiter@type,w
  8202  0BE0  0473               	iorwf	time_date_delimiter@type+1,w
  8203  0BE1  1D03               	btfss	3,2
  8204  0BE2  2BE7               	goto	l3576
  8205                           
  8206                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8207  0BE3  3019               	movlw	25
  8208  0BE4  00F4               	movwf	??_time_date_delimiter
  8209  0BE5  0874               	movf	??_time_date_delimiter,w
  8210  0BE6  00BF               	movwf	_prev_hex_mins
  8211  0BE7                     l3576:	
  8212                           
  8213                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8214  0BE7  3059               	movlw	89
  8215  0BE8  0671               	xorwf	time_date_delimiter@limiter,w
  8216  0BE9  1D03               	btfss	3,2
  8217  0BEA  2BF4               	goto	l3582
  8218  0BEB  3005               	movlw	5
  8219  0BEC  0672               	xorwf	time_date_delimiter@type,w
  8220  0BED  0473               	iorwf	time_date_delimiter@type+1,w
  8221  0BEE  1D03               	btfss	3,2
  8222  0BEF  2BF4               	goto	l3582
  8223                           
  8224                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8225  0BF0  3029               	movlw	41
  8226  0BF1  00F4               	movwf	??_time_date_delimiter
  8227  0BF2  0874               	movf	??_time_date_delimiter,w
  8228  0BF3  00BF               	movwf	_prev_hex_mins
  8229  0BF4                     l3582:	
  8230                           
  8231                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8232  0BF4  306A               	movlw	106
  8233  0BF5  0671               	xorwf	time_date_delimiter@limiter,w
  8234  0BF6  1D03               	btfss	3,2
  8235  0BF7  2C01               	goto	l3588
  8236  0BF8  3005               	movlw	5
  8237  0BF9  0672               	xorwf	time_date_delimiter@type,w
  8238  0BFA  0473               	iorwf	time_date_delimiter@type+1,w
  8239  0BFB  1D03               	btfss	3,2
  8240  0BFC  2C01               	goto	l3588
  8241                           
  8242                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8243  0BFD  3039               	movlw	57
  8244  0BFE  00F4               	movwf	??_time_date_delimiter
  8245  0BFF  0874               	movf	??_time_date_delimiter,w
  8246  0C00  00BF               	movwf	_prev_hex_mins
  8247  0C01                     l3588:	
  8248                           
  8249                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8250  0C01  307A               	movlw	122
  8251  0C02  0671               	xorwf	time_date_delimiter@limiter,w
  8252  0C03  1D03               	btfss	3,2
  8253  0C04  2C0E               	goto	l3594
  8254  0C05  3005               	movlw	5
  8255  0C06  0672               	xorwf	time_date_delimiter@type,w
  8256  0C07  0473               	iorwf	time_date_delimiter@type+1,w
  8257  0C08  1D03               	btfss	3,2
  8258  0C09  2C0E               	goto	l3594
  8259                           
  8260                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8261  0C0A  3049               	movlw	73
  8262  0C0B  00F4               	movwf	??_time_date_delimiter
  8263  0C0C  0874               	movf	??_time_date_delimiter,w
  8264  0C0D  00BF               	movwf	_prev_hex_mins
  8265  0C0E                     l3594:	
  8266                           
  8267                           ;math_src.c: 82:     val--;
  8268  0C0E  3001               	movlw	1
  8269  0C0F  02F6               	subwf	time_date_delimiter@val,f
  8270  0C10                     l3596:	
  8271                           
  8272                           ;math_src.c: 84:     return val;
  8273  0C10  0876               	movf	time_date_delimiter@val,w
  8274  0C11  0008               	return
  8275  0C12                     __end_of_time_date_delimiter:	
  8276                           
  8277                           	psect	text35
  8278  1589                     __ptext35:	
  8279 ;; *************** function _set_time *****************
  8280 ;; Defined at:
  8281 ;;		line 12 in file "clock_src.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  i               2    5[COMMON] int 
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      void 
  8288 ;; Registers used:
  8289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8290 ;; Tracked objects:
  8291 ;;		On entry : 300/0
  8292 ;;		On exit  : 300/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8295 ;;      Params:         0       0       0       0       0
  8296 ;;      Locals:         2       0       0       0       0
  8297 ;;      Temps:          0       0       0       0       0
  8298 ;;      Totals:         2       0       0       0       0
  8299 ;;Total ram usage:        2 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    1
  8302 ;; This function calls:
  8303 ;;		_time_write_1
  8304 ;; This function is called by:
  8305 ;;		_main
  8306 ;;		_time_settings
  8307 ;;		_date_settings
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           
  8312                           ;psect for function _set_time
  8313  1589                     _set_time:	
  8314                           
  8315                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8319  1589  1686               	bsf	6,5	;volatile
  8320                           
  8321                           ;clock_src.c: 16:    time_write_1(0xbe);
  8322  158A  30BE               	movlw	190
  8323  158B  120A  158A  2001  160A  118A  	fcall	_time_write_1
  8324                           
  8325                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8326  1590  01F5               	clrf	set_time@i
  8327  1591  01F6               	clrf	set_time@i+1
  8328  1592                     l3226:	
  8329                           
  8330                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8331  1592  0875               	movf	set_time@i,w
  8332  1593  3EAD               	addlw	(low (_table| 0))& (0+255)
  8333  1594  0084               	movwf	4
  8334  1595  1383               	bcf	3,7	;select IRP bank1
  8335  1596  0800               	movf	0,w
  8336  1597  120A  158A  2001  160A  118A  	fcall	_time_write_1
  8337                           
  8338                           ;clock_src.c: 20:      }
  8339  159C  3001               	movlw	1
  8340  159D  07F5               	addwf	set_time@i,f
  8341  159E  1803               	skipnc
  8342  159F  0AF6               	incf	set_time@i+1,f
  8343  15A0  3000               	movlw	0
  8344  15A1  07F6               	addwf	set_time@i+1,f
  8345  15A2  0876               	movf	set_time@i+1,w
  8346  15A3  3A80               	xorlw	128
  8347  15A4  00FF               	movwf	127
  8348  15A5  3080               	movlw	128
  8349  15A6  027F               	subwf	127,w
  8350  15A7  1D03               	skipz
  8351  15A8  2DAB               	goto	u2115
  8352  15A9  3008               	movlw	8
  8353  15AA  0275               	subwf	set_time@i,w
  8354  15AB                     u2115:	
  8355  15AB  1C03               	skipc
  8356  15AC  2D92               	goto	l3226
  8357                           
  8358                           ;clock_src.c: 21:    RB5=0;
  8359  15AD  1283               	bcf	3,5	;RP0=0, select bank0
  8360  15AE  1303               	bcf	3,6	;RP1=0, select bank0
  8361  15AF  1286               	bcf	6,5	;volatile
  8362  15B0  0008               	return
  8363  15B1                     __end_of_set_time:	
  8364                           
  8365                           	psect	text36
  8366  0801                     __ptext36:	
  8367 ;; *************** function _time_write_1 *****************
  8368 ;; Defined at:
  8369 ;;		line 114 in file "clock_src.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;  time_tx         1    wreg     unsigned char 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  time_tx         1    4[COMMON] unsigned char 
  8374 ;;  j               2    2[COMMON] int 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, btemp+1
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 300/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8384 ;;      Params:         0       0       0       0       0
  8385 ;;      Locals:         3       0       0       0       0
  8386 ;;      Temps:          2       0       0       0       0
  8387 ;;      Totals:         5       0       0       0       0
  8388 ;;Total ram usage:        5 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; This function calls:
  8391 ;;		Nothing
  8392 ;; This function is called by:
  8393 ;;		_ds1302_init
  8394 ;;		_set_time
  8395 ;;		_get_time
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           
  8400                           ;psect for function _time_write_1
  8401  0801                     _time_write_1:	
  8402                           
  8403                           ;incstack = 0
  8404                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8405                           ;time_write_1@time_tx stored from wreg
  8406  0801  00F4               	movwf	time_write_1@time_tx
  8407                           
  8408                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8409  0802  01F2               	clrf	time_write_1@j
  8410  0803  01F3               	clrf	time_write_1@j+1
  8411  0804                     l445:	
  8412                           
  8413                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8414  0804  1283               	bcf	3,5	;RP0=0, select bank0
  8415  0805  1303               	bcf	3,6	;RP1=0, select bank0
  8416  0806  1206               	bcf	6,4	;volatile
  8417                           
  8418                           ;clock_src.c: 120:         RB0=0;
  8419  0807  1006               	bcf	6,0	;volatile
  8420                           
  8421                           ;clock_src.c: 121:         if(time_tx&0x01)
  8422  0808  1874               	btfsc	time_write_1@time_tx,0
  8423                           
  8424                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8425  0809  1606               	bsf	6,4	;volatile
  8426                           
  8427                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8428  080A  0874               	movf	time_write_1@time_tx,w
  8429  080B  00F0               	movwf	??_time_write_1
  8430  080C  1003               	clrc
  8431  080D  0C70               	rrf	??_time_write_1,w
  8432  080E  00F1               	movwf	??_time_write_1+1
  8433  080F  0871               	movf	??_time_write_1+1,w
  8434  0810  00F4               	movwf	time_write_1@time_tx
  8435                           
  8436                           ;clock_src.c: 126:         RB0=1;
  8437  0811  1406               	bsf	6,0	;volatile
  8438                           
  8439                           ;clock_src.c: 127:     }
  8440  0812  3001               	movlw	1
  8441  0813  07F2               	addwf	time_write_1@j,f
  8442  0814  1803               	skipnc
  8443  0815  0AF3               	incf	time_write_1@j+1,f
  8444  0816  3000               	movlw	0
  8445  0817  07F3               	addwf	time_write_1@j+1,f
  8446  0818  0873               	movf	time_write_1@j+1,w
  8447  0819  3A80               	xorlw	128
  8448  081A  00FF               	movwf	127
  8449  081B  3080               	movlw	128
  8450  081C  027F               	subwf	127,w
  8451  081D  1D03               	skipz
  8452  081E  2821               	goto	u2105
  8453  081F  3008               	movlw	8
  8454  0820  0272               	subwf	time_write_1@j,w
  8455  0821                     u2105:	
  8456  0821  1C03               	skipc
  8457  0822  2804               	goto	l445
  8458                           
  8459                           ;clock_src.c: 128:       RB0=0;
  8460  0823  1283               	bcf	3,5	;RP0=0, select bank0
  8461  0824  1303               	bcf	3,6	;RP1=0, select bank0
  8462  0825  1006               	bcf	6,0	;volatile
  8463  0826  0008               	return
  8464  0827                     __end_of_time_write_1:	
  8465                           
  8466                           	psect	text37
  8467  1541                     __ptext37:	
  8468 ;; *************** function _incrementor *****************
  8469 ;; Defined at:
  8470 ;;		line 10 in file "math_src.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  upper_val       2    0[BANK0 ] int 
  8473 ;;  lower_val       2    2[BANK0 ] int 
  8474 ;;  z               1    4[BANK0 ] unsigned char 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0, pclath, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 300/0
  8483 ;;		On exit  : 300/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8486 ;;      Params:         0       5       0       0       0
  8487 ;;      Locals:         0       0       0       0       0
  8488 ;;      Temps:          2       0       0       0       0
  8489 ;;      Totals:         2       5       0       0       0
  8490 ;;Total ram usage:        7 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    2
  8493 ;; This function calls:
  8494 ;;		_modulus_func
  8495 ;; This function is called by:
  8496 ;;		_thermometer_threshhold_settings
  8497 ;;		_time_settings
  8498 ;;		_date_settings
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _incrementor
  8504  1541                     _incrementor:	
  8505                           
  8506                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8510  1541  0860               	movf	incrementor@lower_val,w
  8511  1542  3E30               	addlw	48
  8512  1543  00FB               	movwf	??_incrementor
  8513  1544  0861               	movf	incrementor@lower_val+1,w
  8514  1545  1803               	skipnc
  8515  1546  3E01               	addlw	1
  8516  1547  3E00               	addlw	0
  8517  1548  00FC               	movwf	??_incrementor+1
  8518  1549  0862               	movf	incrementor@z,w
  8519  154A  067B               	xorwf	??_incrementor,w
  8520  154B  047C               	iorwf	??_incrementor+1,w
  8521  154C  1D03               	skipz
  8522  154D  2D63               	goto	l3416
  8523                           
  8524                           ;math_src.c: 12:      upper_val++;
  8525  154E  3001               	movlw	1
  8526  154F  07DE               	addwf	incrementor@upper_val,f
  8527  1550  1803               	skipnc
  8528  1551  0ADF               	incf	incrementor@upper_val+1,f
  8529  1552  3000               	movlw	0
  8530  1553  07DF               	addwf	incrementor@upper_val+1,f
  8531                           
  8532                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8533  1554  085F               	movf	incrementor@upper_val+1,w
  8534  1555  00F8               	movwf	modulus_func@x+1
  8535  1556  085E               	movf	incrementor@upper_val,w
  8536  1557  00F7               	movwf	modulus_func@x
  8537  1558  300A               	movlw	10
  8538  1559  00F9               	movwf	modulus_func@y
  8539  155A  3000               	movlw	0
  8540  155B  00FA               	movwf	modulus_func@y+1
  8541  155C  160A  118A  2414   	fcall	_modulus_func
  8542  155F  0878               	movf	?_modulus_func+1,w
  8543  1560  00DF               	movwf	incrementor@upper_val+1
  8544  1561  0877               	movf	?_modulus_func,w
  8545  1562  00DE               	movwf	incrementor@upper_val
  8546  1563                     l3416:	
  8547                           
  8548                           ;math_src.c: 15:      return upper_val;
  8549  1563  085E               	movf	incrementor@upper_val,w
  8550  1564  0008               	return
  8551  1565                     __end_of_incrementor:	
  8552                           
  8553                           	psect	text38
  8554  1414                     __ptext38:	
  8555 ;; *************** function _modulus_func *****************
  8556 ;; Defined at:
  8557 ;;		line 5 in file "math_src.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  x               2    7[COMMON] int 
  8560 ;;  y               2    9[COMMON] int 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  2    7[COMMON] int 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0, pclath, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : 300/0
  8569 ;;		On exit  : 300/0
  8570 ;;		Unchanged: 300/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8572 ;;      Params:         4       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0
  8575 ;;      Totals:         4       0       0       0       0
  8576 ;;Total ram usage:        4 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    1
  8579 ;; This function calls:
  8580 ;;		___awmod
  8581 ;; This function is called by:
  8582 ;;		_main
  8583 ;;		_thermometer_threshhold_settings
  8584 ;;		_time_settings
  8585 ;;		_date_settings
  8586 ;;		_incrementor
  8587 ;;		_decrementor
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function _modulus_func
  8593  1414                     _modulus_func:	
  8594                           
  8595                           ;math_src.c: 6:     x = x % y;
  8596                           
  8597                           ;incstack = 0
  8598                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8599  1414  087A               	movf	modulus_func@y+1,w
  8600  1415  00F1               	movwf	___awmod@divisor+1
  8601  1416  0879               	movf	modulus_func@y,w
  8602  1417  00F0               	movwf	___awmod@divisor
  8603  1418  0878               	movf	modulus_func@x+1,w
  8604  1419  00F3               	movwf	___awmod@dividend+1
  8605  141A  0877               	movf	modulus_func@x,w
  8606  141B  00F2               	movwf	___awmod@dividend
  8607  141C  120A  158A  2027   	fcall	___awmod
  8608  141F  0871               	movf	?___awmod+1,w
  8609  1420  00F8               	movwf	modulus_func@x+1
  8610  1421  0870               	movf	?___awmod,w
  8611  1422  00F7               	movwf	modulus_func@x
  8612                           
  8613                           ;math_src.c: 7:     return x;
  8614  1423  0008               	return
  8615  1424                     __end_of_modulus_func:	
  8616                           
  8617                           	psect	text39
  8618  0827                     __ptext39:	
  8619 ;; *************** function ___awmod *****************
  8620 ;; Defined at:
  8621 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  divisor         2    0[COMMON] int 
  8624 ;;  dividend        2    2[COMMON] int 
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;  sign            1    6[COMMON] unsigned char 
  8627 ;;  counter         1    5[COMMON] unsigned char 
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  2    0[COMMON] int 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2, status,0
  8632 ;; Tracked objects:
  8633 ;;		On entry : 300/0
  8634 ;;		On exit  : 300/0
  8635 ;;		Unchanged: 300/0
  8636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8637 ;;      Params:         4       0       0       0       0
  8638 ;;      Locals:         2       0       0       0       0
  8639 ;;      Temps:          1       0       0       0       0
  8640 ;;      Totals:         7       0       0       0       0
  8641 ;;Total ram usage:        7 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_modulus_func
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           
  8651                           ;psect for function ___awmod
  8652  0827                     ___awmod:	
  8653                           
  8654                           ;incstack = 0
  8655                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8656  0827  01F6               	clrf	___awmod@sign
  8657  0828  1FF3               	btfss	___awmod@dividend+1,7
  8658  0829  2831               	goto	l3148
  8659  082A  09F2               	comf	___awmod@dividend,f
  8660  082B  09F3               	comf	___awmod@dividend+1,f
  8661  082C  0AF2               	incf	___awmod@dividend,f
  8662  082D  1903               	skipnz
  8663  082E  0AF3               	incf	___awmod@dividend+1,f
  8664  082F  01F6               	clrf	___awmod@sign
  8665  0830  0AF6               	incf	___awmod@sign,f
  8666  0831                     l3148:	
  8667  0831  1FF1               	btfss	___awmod@divisor+1,7
  8668  0832  2838               	goto	l3152
  8669  0833  09F0               	comf	___awmod@divisor,f
  8670  0834  09F1               	comf	___awmod@divisor+1,f
  8671  0835  0AF0               	incf	___awmod@divisor,f
  8672  0836  1903               	skipnz
  8673  0837  0AF1               	incf	___awmod@divisor+1,f
  8674  0838                     l3152:	
  8675  0838  0870               	movf	___awmod@divisor,w
  8676  0839  0471               	iorwf	___awmod@divisor+1,w
  8677  083A  1903               	btfsc	3,2
  8678  083B  2865               	goto	l3170
  8679  083C  01F5               	clrf	___awmod@counter
  8680  083D  0AF5               	incf	___awmod@counter,f
  8681  083E                     l3160:	
  8682  083E  1BF1               	btfsc	___awmod@divisor+1,7
  8683  083F  284C               	goto	l3162
  8684  0840  3001               	movlw	1
  8685  0841                     u2005:	
  8686  0841  1003               	clrc
  8687  0842  0DF0               	rlf	___awmod@divisor,f
  8688  0843  0DF1               	rlf	___awmod@divisor+1,f
  8689  0844  3EFF               	addlw	-1
  8690  0845  1D03               	skipz
  8691  0846  2841               	goto	u2005
  8692  0847  3001               	movlw	1
  8693  0848  00F4               	movwf	??___awmod
  8694  0849  0874               	movf	??___awmod,w
  8695  084A  07F5               	addwf	___awmod@counter,f
  8696  084B  283E               	goto	l3160
  8697  084C                     l3162:	
  8698  084C  0871               	movf	___awmod@divisor+1,w
  8699  084D  0273               	subwf	___awmod@dividend+1,w
  8700  084E  1D03               	skipz
  8701  084F  2852               	goto	u2025
  8702  0850  0870               	movf	___awmod@divisor,w
  8703  0851  0272               	subwf	___awmod@dividend,w
  8704  0852                     u2025:	
  8705  0852  1C03               	skipc
  8706  0853  285A               	goto	l3166
  8707  0854  0870               	movf	___awmod@divisor,w
  8708  0855  02F2               	subwf	___awmod@dividend,f
  8709  0856  0871               	movf	___awmod@divisor+1,w
  8710  0857  1C03               	skipc
  8711  0858  03F3               	decf	___awmod@dividend+1,f
  8712  0859  02F3               	subwf	___awmod@dividend+1,f
  8713  085A                     l3166:	
  8714  085A  3001               	movlw	1
  8715  085B                     u2035:	
  8716  085B  1003               	clrc
  8717  085C  0CF1               	rrf	___awmod@divisor+1,f
  8718  085D  0CF0               	rrf	___awmod@divisor,f
  8719  085E  3EFF               	addlw	-1
  8720  085F  1D03               	skipz
  8721  0860  285B               	goto	u2035
  8722  0861  3001               	movlw	1
  8723  0862  02F5               	subwf	___awmod@counter,f
  8724  0863  1D03               	btfss	3,2
  8725  0864  284C               	goto	l3162
  8726  0865                     l3170:	
  8727  0865  0876               	movf	___awmod@sign,w
  8728  0866  1903               	btfsc	3,2
  8729  0867  286D               	goto	l3174
  8730  0868  09F2               	comf	___awmod@dividend,f
  8731  0869  09F3               	comf	___awmod@dividend+1,f
  8732  086A  0AF2               	incf	___awmod@dividend,f
  8733  086B  1903               	skipnz
  8734  086C  0AF3               	incf	___awmod@dividend+1,f
  8735  086D                     l3174:	
  8736  086D  0873               	movf	___awmod@dividend+1,w
  8737  086E  00F1               	movwf	?___awmod+1
  8738  086F  0872               	movf	___awmod@dividend,w
  8739  0870  00F0               	movwf	?___awmod
  8740  0871  0008               	return
  8741  0872                     __end_of___awmod:	
  8742                           
  8743                           	psect	text40
  8744  1435                     __ptext40:	
  8745 ;; *************** function _button_delay *****************
  8746 ;; Defined at:
  8747 ;;		line 606 in file "Button_src.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  i               2    0[COMMON] int 
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  1    wreg      void 
  8754 ;; Registers used:
  8755 ;;		wreg, status,2, btemp+1
  8756 ;; Tracked objects:
  8757 ;;		On entry : 300/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8761 ;;      Params:         0       0       0       0       0
  8762 ;;      Locals:         2       0       0       0       0
  8763 ;;      Temps:          0       0       0       0       0
  8764 ;;      Totals:         2       0       0       0       0
  8765 ;;Total ram usage:        2 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; This function calls:
  8768 ;;		Nothing
  8769 ;; This function is called by:
  8770 ;;		_set_beep_threshhold
  8771 ;;		_thermometer_threshhold_settings
  8772 ;;		_time_settings
  8773 ;;		_date_settings
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           
  8778                           ;psect for function _button_delay
  8779  1435                     _button_delay:	
  8780                           
  8781                           ;Button_src.c: 607:     for(int i=0;i<10000;i++);
  8782                           
  8783                           ;incstack = 0
  8784                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8785  1435  01F0               	clrf	button_delay@i
  8786  1436  01F1               	clrf	button_delay@i+1
  8787  1437                     l3406:	
  8788  1437  3001               	movlw	1
  8789  1438  07F0               	addwf	button_delay@i,f
  8790  1439  1803               	skipnc
  8791  143A  0AF1               	incf	button_delay@i+1,f
  8792  143B  3000               	movlw	0
  8793  143C  07F1               	addwf	button_delay@i+1,f
  8794  143D  0871               	movf	button_delay@i+1,w
  8795  143E  3A80               	xorlw	128
  8796  143F  00FF               	movwf	127
  8797  1440  30A7               	movlw	167
  8798  1441  027F               	subwf	127,w
  8799  1442  1D03               	skipz
  8800  1443  2C46               	goto	u2215
  8801  1444  3010               	movlw	16
  8802  1445  0270               	subwf	button_delay@i,w
  8803  1446                     u2215:	
  8804  1446  1803               	btfsc	3,0
  8805  1447  0008               	return
  8806  1448  2C37               	goto	l3406
  8807  1449                     __end_of_button_delay:	
  8808  007E                     btemp	set	126	;btemp
  8809  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      79
    BANK1            80      0      21
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   44073
                                             10 BANK0      7     7      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     264
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     264
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      15       7       26.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      72      12        0.0%
ABS                  0      0      72       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 11 15:16:00 2019

                                       _a 0048                                         _b 0047  
                                       _c 0046                                         _p 0022  
                                       _t 0032                                         _w 0030  
                                       _x 002E                                         _y 002C  
                                       _z 002A                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005A                                        _TZ 005B  
                                      _ge 0058                                        _wd 003C  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 149C  
                           ?_display_date 0070                                       l154 0D24  
                                     l338 13E9                                       l451 160F  
                                     l445 0804                                       l712 0158  
                                     l704 007D                                       l721 0295  
                                     l713 0160                                       l730 0395  
                                     l706 00E3                                       l707 00EB  
                                     l732 03FB                                       l724 0322  
                                     l733 0403                                       l911 1783  
                                     l744 04F5                                       l753 06AB  
                                     l745 04FD                                       l905 006D  
                                     l738 046F                                       l739 0477  
                                     l691 0F3D                                       l696 0FA0  
                                     l697 0FED                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005C  
                           ?_display_temp 0070                                       _TLV 005D  
                                     _shi 0059                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0063  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1270 1518                                      l4006 0FAD  
                                    l3160 083E                                      l3152 0838  
                                    l4112 04BC                                      l3320 1670  
                                    l3162 084C                                      l3170 0865  
                                    l3226 1592                                      l3148 0831  
                                    l4124 04E0                                      l4116 04C5  
                                    l3406 1437                                      l3174 086D  
                                    l3166 085A                                      l3510 0B58  
                                    l3190 144B                                      l4126 04E5  
                                    l3270 16A1                                      l3416 1563  
                                    l3504 0B4B                                      l4224 0701  
                                    l4144 0531                                      l4400 01D8  
                                    l3522 0B72                                      l3450 0ADA  
                                    l4090 045A                                      l4082 0440  
                                    l3610 14E1                                      l3266 16C7  
                                    l3426 1587                                      l3540 0B99  
                                    l3516 0B65                                      l4156 0547  
                                    l4148 053A                                      l4092 045F  
                                    l3612 14EA                                      l3372 145F  
                                    l3196 13ED                                      l3268 16C8  
                                    l4404 01E7                                      l3534 0B8C  
                                    l3462 0AF2                                      l4254 0744  
                                    l4158 054C                                      l4078 0437  
                                    l3622 14F9                                      l3630 1501  
                                    l3278 16D8                                      l3390 1620  
                                    l4350 0128                                      l3552 0BB3  
                                    l3528 0B7F                                      l3480 0B17  
                                    l3456 0AE6                                      l4192 0686  
                                    l4600 17BD                                      l4360 0148  
                                    l3570 0BDA                                      l3546 0BA6  
                                    l3474 0B0A                                      l3298 16ED  
                                    l4346 011F                                      l3564 0BCD  
                                    l3492 0B31                                      l3468 0AFE  
                                    l4284 078A                                      l4188 0671  
                                    l4612 17F0                                      l4604 17CE  
                                    l3660 1735                                      l3652 1711  
                                    l3582 0BF4                                      l3558 0BC0  
                                    l3486 0B24                                      l3654 171F  
                                    l3806 15BC                                      l4382 019D  
                                    l4358 0143                                      l3576 0BE7  
                                    l4608 17DF                                      l3664 1740  
                                    l4392 01C1                                      l4704 0D5E  
                                    l3594 0C0E                                      l3498 0B3E  
                                    l3818 087D                                      l3682 165B  
                                    l4458 02E5                                      l4378 0194  
                                    l4394 01C6                                      l3588 0C01  
                                    l3596 0C10                                      l3676 163F  
                                    l4580 14B5                                      l3916 0E8C  
                                    l4636 0C40                                      l4590 178F  
                                    l3678 164D                                      l3686 1666  
                                    l3782 0A53                                      l3774 0A3F  
                                    l4566 1607                                      l3856 091A  
                                    l4592 179B                                      l3944 0EEB  
                                    l3786 0A5D                                      l3778 0A49  
                                    l4596 17AC                                      l3982 0F29  
                          ?_display_clock 0070                                      u2005 0841  
                                    u2025 0852                                      u2105 0821  
                                    u2035 085B                                      u2115 15AB  
                                    u2205 1630                                      u2215 1446  
                                    u2065 145A                                      u3035 15D7  
                                    u2185 146E                                      u3095 0F3A  
                                    u2805 1504                                      u2915 1642  
                                    u2845 1714                                      u2935 1653  
                                    u2865 1720                                      u2945 165C  
                                    u3745 174E                                      u2875 172C  
                                    u3755 1759                                      u2885 1736  
                                    u2965 09F7                                      u3765 0024  
                                    u3925 0D73                                      u2975 0A02  
                                    u3775 002F                                      u2985 0A0F  
             time_date_hex_terminator@val 0073                      ?_set_beep_threshhold 0070  
                                    _main 0C12                                      _init 13D0  
                                    _var1 004D                                      _var2 004C  
                                    btemp 007E           time_date_hex_terminator@limiter 0070  
                           write_byte@val 0077                                      start 0000  
                  time_date_delimiter@hex 0070                    time_date_delimiter@val 0076  
                            ?_incrementor 005E               __size_of_initialise_buttons 0014  
                          ??_display_date 0073                                     ?_main 0070  
                          ??_display_temp 0073                                     ?_init 0070  
                         __end_of___lbdiv 14FB                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0872                           __end_of___lbmod 151E  
                    __end_of_delay_screen 145D                           __end_of___lwdiv 1745  
                         __end_of___lwmod 166B                                     _PORTD 0008  
                                   _PORTE 0009                                     _TRISA 0085  
                                   _TRISB 0086                                     _TRISC 0087  
                                   _TRISD 0088                                     _TRISE 0089  
                           __CFG_PWRTE$ON 0000                                     _count 0036  
                                   _table 00AD                                     _stats 0024  
                                   main@i 006D                            write_byte@temp 0076  
                     _set_lower_threshold 1745                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                     ??_set_beep_threshhold 0072  
                                   status 0003                      __size_of_decrementor 0024  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                         __initialization 07E0                              __end_of_main 0D92  
                            __end_of_init 13D8                   time_date_delimiter@type 0072  
                   __end_of_date_settings 07E0                      ?_set_lower_threshold 0073  
                                  ??_main 0068                                    ??_init 0070  
                    incrementor@lower_val 0060                           ??_display_clock 0073  
                                  _ADCON1 009F                                    _TRISA0 0428  
                                  _TRISB4 0434                                    _TRISE0 0448  
                           ?_button_delay 0070                              ?_reset_alarm 0070  
                    incrementor@upper_val 005E                          __end_of_lcd_init 1541  
                        __end_of_get_temp 0ABB                          __end_of_get_time 15DD  
                                  _baifen 0056                                 ??___lbdiv 0071  
                               ??___awmod 0074                                    _delay2 145D  
                               ??___lbmod 0071                     ??_set_lower_threshold 0077  
                                  _d_type 00A7                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 1414  
                     _set_upper_threshold 001D                                    _table1 00A0  
                         ___awmod@divisor 0070                                    _shifen 0057  
                                  _wanfen 0054                           ___awmod@counter 0075  
                    __size_of_display_day 0079                              ?_time_read_1 0070  
                     time_write_1@time_tx 0074                             display_date@i 0075  
                        __end_of_set_time 15B1                        reset_temp@presence 0075  
                        ___lbdiv@dividend 0072                      ?_set_upper_threshold 0073  
                         ___lbmod@divisor 0070                   __end_of__initialization 07FC  
                         ___lbmod@counter 0075                            ??_button_delay 0070  
            __size_of_time_date_delimiter 0157                      __end_of_display_date 090F  
                    __end_of_display_temp 14DA                            __pcstackCOMMON 0070  
                            __pidataBANK1 13E0                     __size_of_delay_screen 0014  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                                __pbssBANK0 0020  
                              __pbssBANK1 00A0                              _delay_screen 1449  
                      __size_of_init_temp 0005                        __size_of_read_byte 0034  
                             _ds1302_init 1405                                _delay_temp 13E8  
                              __pmaintext 0C12                                   ?_delay2 0070  
                           ?_modulus_func 0077                        time_read_1@time_rx 0074  
                            incrementor@z 0062                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 0387  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                            _heat_counter 003A                                 ?_set_time 0070  
                    __size_of_reset_alarm 002C                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 1485  
                _time_date_hex_terminator 13F6                                   ___lbdiv 14DA  
                                 ___awmod 0827                                   ___lbmod 14FB  
                         __size_of_delay2 0014                                   ___lwdiv 1709  
                                 ___lwmod 1639                                   _alarm__ 004B  
                                 _day_hex 0045                                   _day_low 0028  
                            _heater_state 004F                                   __ptext1 0071  
                                 __ptext2 0D92                                   __ptext3 1565  
                                 __ptext4 001D                                   __ptext5 1745  
                                 __ptext6 149C                                   __ptext7 15DD  
                                 __ptext8 151E                                   __ptext9 1471  
                    __end_of_button_delay 1449                              _cold_counter 0038  
                                 delay2@i 0070                         __end_of_init_temp 13D0  
                        ___awmod@dividend 0072                         __end_of_read_byte 169F  
                                 _qianfen 0055                      __size_of_time_read_1 0030  
                                 _lower_t 0052               __end_of_set_beep_threshhold 14B9  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 009D  
                                 clrloop0 13D9                                ??_lcd_init 0073  
                                 _upper_t 0053                             ??_decrementor 007B  
                              ??_get_temp 005E                                ??_get_time 0075  
                   __size_of_display_temp 0021                      end_of_initialization 07FC  
                          display_day@num 0073                            display_clock@i 0075  
                           ?_time_write_1 0070                               ?_delay_temp 0070  
                              _reset_temp 169F                                ??_set_time 0075  
                     _time_date_delimiter 0ABB                      decrementor@lower_val 005E  
                            _display_date 0872                              _display_temp 14B9  
                       __end_of_write_cmd 001D                          ___lbmod@dividend 0074  
                            _cooler_state 004E                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 09B4  
                  __size_of_date_settings 0459                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                      decrementor@upper_val 0060  
                          ??_time_write_1 0070               __end_of_set_lower_threshold 1787  
                     __end_of_decrementor 1589                             ??_display_day 0075  
                          __end_of_delay2 1471                                _write_char 1485  
                              _write_byte 16D3                            _var_night_high 00AB  
                     start_initialization 07E0                             delay_screen@i 0070  
                     __size_of_delay_temp 000E                      __end_of_modulus_func 1424  
                   ??_time_date_delimiter 0074                              ?_ds1302_init 0070  
                             ?_reset_temp 0070                             ??_incrementor 007B  
                              init_fetch0 1424                                  ??_delay2 0070  
                   __size_of_button_delay 0014                             _date_settings 0387  
                             __pdataBANK1 00AD                                read_byte@i 0076  
                              read_byte@j 003E               __end_of_set_upper_threshold 0071  
                     __end_of_display_day 1800                                 ___latbits 0002  
                           __pcstackBANK0 005E                               _decrementor 1565  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 1435  
                        ___lwdiv@dividend 0078                               _day_counter 0020  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                               ?_write_char 0070  
                             ?_write_byte 0070                       __end_of_incrementor 1565  
                    __end_of_time_write_1 0827                        _initialise_buttons 1471  
                         _day_of_week_var 00A9                       __size_of_reset_temp 0034  
                        ___lwdiv@quotient 007B                                 _init_temp 13CB  
                               _read_byte 166B                              decrementor@z 0062  
                     ?_initialise_buttons 0070                                 clear_ram0 13D8  
                           ??_reset_alarm 0073                            _prev_hex_hours 0040  
                            ??_delay_temp 0071                                 _temp_high 0049  
                             _display_day 1787   __end_of_thermometer_threshhold_settings 1000  
__size_of_thermometer_threshhold_settings 026E         ??_thermometer_threshhold_settings 0063  
        ?_thermometer_threshhold_settings 0070           _thermometer_threshhold_settings 0D92  
                    ??_initialise_buttons 0070                    __size_of_time_settings 0316  
        thermometer_threshhold_settings@i 0066                             ??_time_read_1 0070  
                             write_char@x 0072                     __size_of_modulus_func 0010  
                               get_time@i 0076                               write_byte@i 0078  
                      __end_of_delay_temp 13F6                                 _write_cmd 0006  
                              ?_init_temp 0070                                ?_read_byte 0070  
                           _var_night_low 0034                           _buzzer_watcher1 0050  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 001D  
                     __size_of_write_byte 0036                           ??_date_settings 0063  
                    __size_of_ds1302_init 000F                               _incrementor 1541  
                            _modulus_func 1414                       __end_of_reset_alarm 1609  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0026  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 13CB                                  __ptext11 13D0  
                                __ptext20 1639                                  __ptext12 15B1  
                                __ptext21 1709                                  __ptext13 1609  
                                __ptext30 0006                                  __ptext22 14FB  
                                __ptext14 09B4                                  __ptext31 1485  
                                __ptext23 14DA                                  __ptext15 16D3  
                                __ptext40 1435                                  __ptext32 1449  
                                __ptext24 1405                                  __ptext16 169F  
                                __ptext33 13F6                                  __ptext25 14B9  
                                __ptext17 166B                                  __ptext34 0ABB  
                                __ptext26 1787                                  __ptext18 13E8  
                                __ptext35 1589                                  __ptext27 0872  
                                __ptext19 145D                                  __ptext36 0801  
                                __ptext28 090F                                  __ptext37 1541  
                                __ptext29 0387                                  __ptext38 1414  
                                __ptext39 0827                       __end_of_time_read_1 1639  
                              ?_write_cmd 0070                                  _lcd_init 151E  
                                _get_temp 09B4                                  _get_time 15B1  
                           _time_settings 0071          __end_of_time_date_hex_terminator 1405  
                           __size_of_main 0180                             __size_of_init 0008  
                           ?_delay_screen 0070                               _hrs_limiter 0044  
                               set_time@i 0075                             _prev_hex_mins 003F  
                           _prev_hex_year 0041                              ??_reset_temp 0074  
                                _set_time 1589                                  _temp_low 004A  
                                _prev_hex 0043                time_date_delimiter@limiter 0071  
            __size_of_set_lower_threshold 0042                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 00A5  
                          _buzzer_watcher 0051                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0C12  
                                init_ram0 1428                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 16D3  
                             ??_read_byte 0074                            ?_time_settings 0070  
                            ?_decrementor 005E                          ___lwmod@dividend 0072  
                          ??_delay_screen 0070                               _reset_alarm 15DD  
                            _time_write_1 0801                              _prev_hex_day 0042  
                            ??_write_char 0072                              ??_write_byte 0074  
                              _OPTION_REG 0081                               _time_read_1 1609  
                            time_read_1@j 0072                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0075                               ??_write_cmd 0072  
            __size_of_set_upper_threshold 0054                             _display_clock 090F  
                           time_write_1@j 0072                        __end_of_write_char 149C  
                      __end_of_write_byte 1709  
