

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 11 12:05:15 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.10
    56                           ; Generated 31/07/2019 GMT
    57                           ; 
    58                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F877A Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0098                     	;# 
   258  0099                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  000E                     	;# 
   285  000F                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0013                     	;# 
   290  0014                     	;# 
   291  0015                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001D                     	;# 
   302  001E                     	;# 
   303  001F                     	;# 
   304  0081                     	;# 
   305  0085                     	;# 
   306  0086                     	;# 
   307  0087                     	;# 
   308  0088                     	;# 
   309  0089                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0000                     	;# 
   330  0001                     	;# 
   331  0002                     	;# 
   332  0003                     	;# 
   333  0004                     	;# 
   334  0005                     	;# 
   335  0006                     	;# 
   336  0007                     	;# 
   337  0008                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000D                     	;# 
   343  000E                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0014                     	;# 
   351  0015                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001D                     	;# 
   362  001E                     	;# 
   363  001F                     	;# 
   364  0081                     	;# 
   365  0085                     	;# 
   366  0086                     	;# 
   367  0087                     	;# 
   368  0088                     	;# 
   369  0089                     	;# 
   370  008C                     	;# 
   371  008D                     	;# 
   372  008E                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  000E                     	;# 
   405  000F                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001D                     	;# 
   422  001E                     	;# 
   423  001F                     	;# 
   424  0081                     	;# 
   425  0085                     	;# 
   426  0086                     	;# 
   427  0087                     	;# 
   428  0088                     	;# 
   429  0089                     	;# 
   430  008C                     	;# 
   431  008D                     	;# 
   432  008E                     	;# 
   433  0091                     	;# 
   434  0092                     	;# 
   435  0093                     	;# 
   436  0094                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000D                     	;# 
   463  000E                     	;# 
   464  000E                     	;# 
   465  000F                     	;# 
   466  0010                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0015                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001B                     	;# 
   480  001C                     	;# 
   481  001D                     	;# 
   482  001E                     	;# 
   483  001F                     	;# 
   484  0081                     	;# 
   485  0085                     	;# 
   486  0086                     	;# 
   487  0087                     	;# 
   488  0088                     	;# 
   489  0089                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  010F                     	;# 
   507  018C                     	;# 
   508  018D                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  000E                     	;# 
   525  000F                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0014                     	;# 
   531  0015                     	;# 
   532  0015                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001B                     	;# 
   540  001C                     	;# 
   541  001D                     	;# 
   542  001E                     	;# 
   543  001F                     	;# 
   544  0081                     	;# 
   545  0085                     	;# 
   546  0086                     	;# 
   547  0087                     	;# 
   548  0088                     	;# 
   549  0089                     	;# 
   550  008C                     	;# 
   551  008D                     	;# 
   552  008E                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0094                     	;# 
   557  0098                     	;# 
   558  0099                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  010F                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  000E                     	;# 
   585  000F                     	;# 
   586  0010                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0014                     	;# 
   591  0015                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0017                     	;# 
   595  0018                     	;# 
   596  0019                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  0081                     	;# 
   605  0085                     	;# 
   606  0086                     	;# 
   607  0087                     	;# 
   608  0088                     	;# 
   609  0089                     	;# 
   610  008C                     	;# 
   611  008D                     	;# 
   612  008E                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0094                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0088                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  0091                     	;# 
   674  0092                     	;# 
   675  0093                     	;# 
   676  0094                     	;# 
   677  0098                     	;# 
   678  0099                     	;# 
   679  009C                     	;# 
   680  009D                     	;# 
   681  009E                     	;# 
   682  009F                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010E                     	;# 
   686  010F                     	;# 
   687  018C                     	;# 
   688  018D                     	;# 
   689                           
   690                           	psect	idataBANK1
   691  149C                     __pidataBANK1:	
   692                           
   693                           ;initializer for _table
   694  149C  3400               	retlw	0
   695  149D  3400               	retlw	0
   696  149E  3440               	retlw	64
   697  149F  3412               	retlw	18
   698  14A0  3412               	retlw	18
   699  14A1  3406               	retlw	6
   700  14A2  3419               	retlw	25
   701  14A3  3400               	retlw	0
   702  0009                     _PORTE	set	9
   703  0008                     _PORTD	set	8
   704  003E                     _RC6	set	62
   705  003F                     _RC7	set	63
   706  003C                     _RC4	set	60
   707  003B                     _RC3	set	59
   708  003A                     _RC2	set	58
   709  0039                     _RC1	set	57
   710  0038                     _RC0	set	56
   711  004A                     _RE2	set	74
   712  0034                     _RB4	set	52
   713  0031                     _RB1	set	49
   714  0035                     _RB5	set	53
   715  0030                     _RB0	set	48
   716  0048                     _RE0	set	72
   717  002B                     _RA3	set	43
   718  002C                     _RA4	set	44
   719  002D                     _RA5	set	45
   720  002A                     _RA2	set	42
   721  0028                     _RA0	set	40
   722  0087                     _TRISC	set	135
   723  0085                     _TRISA	set	133
   724  0089                     _TRISE	set	137
   725  0081                     _OPTION_REG	set	129
   726  0088                     _TRISD	set	136
   727  009F                     _ADCON1	set	159
   728  0086                     _TRISB	set	134
   729  0434                     _TRISB4	set	1076
   730  0448                     _TRISE0	set	1096
   731  0428                     _TRISA0	set	1064
   732                           
   733                           ; #config settings
   734  0000                     
   735                           	psect	cinit
   736  07E8                     start_initialization:	
   737  07E8                     __initialization:	
   738                           
   739                           ; Initialize objects allocated to BANK1
   740  07E8  1383               	bcf	3,7	;select IRP bank0
   741  07E9  30A8               	movlw	low (__pdataBANK1+8)
   742  07EA  00FD               	movwf	btemp+-1
   743  07EB  3014               	movlw	high __pidataBANK1
   744  07EC  00FE               	movwf	btemp
   745  07ED  309C               	movlw	low __pidataBANK1
   746  07EE  00FF               	movwf	btemp+1
   747  07EF  30A0               	movlw	low __pdataBANK1
   748  07F0  0084               	movwf	4
   749  07F1  160A  118A  24F1  120A  118A  	fcall	init_ram0
   750                           
   751                           ; Clear objects allocated to BANK0
   752  07F6  3020               	movlw	low __pbssBANK0
   753  07F7  0084               	movwf	4
   754  07F8  3062               	movlw	low (__pbssBANK0+66)
   755  07F9  160A  118A  2494   	fcall	clear_ram0
   756  07FC                     end_of_initialization:	
   757                           ;End of C runtime variable initialization code
   758                           
   759  07FC                     __end_of__initialization:	
   760  07FC  0183               	clrf	3
   761  07FD  120A  158A  2B30   	ljmp	_main	;jump to C main() function
   762                           
   763                           	psect	bssBANK0
   764  0020                     __pbssBANK0:	
   765  0020                     _table1:	
   766  0020                     	ds	7
   767  0027                     _day_counter:	
   768  0027                     	ds	2
   769  0029                     _var_night_high:	
   770  0029                     	ds	2
   771  002B                     _var_night_low:	
   772  002B                     	ds	2
   773  002D                     _count:	
   774  002D                     	ds	2
   775  002F                     _p:	
   776  002F                     	ds	2
   777  0031                     _d_type:	
   778  0031                     	ds	2
   779  0033                     _stats:	
   780  0033                     	ds	2
   781  0035                     _day_of_week_var:	
   782  0035                     	ds	2
   783  0037                     _day_high:	
   784  0037                     	ds	2
   785  0039                     _day_low:	
   786  0039                     	ds	2
   787  003B                     _z:	
   788  003B                     	ds	2
   789  003D                     _y:	
   790  003D                     	ds	2
   791  003F                     _x:	
   792  003F                     	ds	2
   793  0041                     _w:	
   794  0041                     	ds	2
   795  0043                     _t:	
   796  0043                     	ds	2
   797  0045                     _wd:	
   798  0045                     	ds	2
   799  0047                     read_byte@j:	
   800  0047                     	ds	1
   801  0048                     _var2:	
   802  0048                     	ds	1
   803  0049                     _var1:	
   804  0049                     	ds	1
   805  004A                     _buzzer_watcher1:	
   806  004A                     	ds	1
   807  004B                     _buzzer_watcher:	
   808  004B                     	ds	1
   809  004C                     _lower_t:	
   810  004C                     	ds	1
   811  004D                     _upper_t:	
   812  004D                     	ds	1
   813  004E                     _prev_hex_mins:	
   814  004E                     	ds	1
   815  004F                     _prev_hex_hours:	
   816  004F                     	ds	1
   817  0050                     _prev_hex_year:	
   818  0050                     	ds	1
   819  0051                     _prev_hex_day:	
   820  0051                     	ds	1
   821  0052                     _prev_hex:	
   822  0052                     	ds	1
   823  0053                     _hrs_limiter:	
   824  0053                     	ds	1
   825  0054                     _day_hex:	
   826  0054                     	ds	1
   827  0055                     _c:	
   828  0055                     	ds	1
   829  0056                     _b:	
   830  0056                     	ds	1
   831  0057                     _a:	
   832  0057                     	ds	1
   833  0058                     _wanfen:	
   834  0058                     	ds	1
   835  0059                     _qianfen:	
   836  0059                     	ds	1
   837  005A                     _baifen:	
   838  005A                     	ds	1
   839  005B                     _shifen:	
   840  005B                     	ds	1
   841  005C                     _ge:	
   842  005C                     	ds	1
   843  005D                     _shi:	
   844  005D                     	ds	1
   845  005E                     _TX:	
   846  005E                     	ds	1
   847  005F                     _TZ:	
   848  005F                     	ds	1
   849  0060                     _THV:	
   850  0060                     	ds	1
   851  0061                     _TLV:	
   852  0061                     	ds	1
   853                           
   854                           	psect	dataBANK1
   855  00A0                     __pdataBANK1:	
   856  00A0                     _table:	
   857  00A0                     	ds	8
   858                           
   859                           	psect	inittext
   860  14ED                     init_fetch0:	
   861                           ;	Called with low address in FSR and high address in W
   862                           
   863  14ED  087E               	movf	126,w
   864  14EE  008A               	movwf	10
   865  14EF  087F               	movf	127,w
   866  14F0  0082               	movwf	2
   867  14F1                     init_ram0:	
   868                           ;Called with:
   869                           ;	high address of idata address in btemp 
   870                           ;	low address of idata address in btemp+1 
   871                           ;	low address of data in FSR
   872                           ;	high address + 1 of data in btemp-1
   873                           
   874  14F1  24ED  160A  118A   	fcall	init_fetch0
   875  14F4  0080               	movwf	0
   876  14F5  0A84               	incf	4,f
   877  14F6  0804               	movf	4,w
   878  14F7  067D               	xorwf	125,w
   879  14F8  1903               	btfsc	3,2
   880  14F9  3400               	retlw	0
   881  14FA  0AFF               	incf	127,f
   882  14FB  1903               	btfsc	3,2
   883  14FC  0AFE               	incf	126,f
   884  14FD  2CF1               	goto	init_ram0
   885                           
   886                           	psect	clrtext
   887  1494                     clear_ram0:	
   888                           ;	Called with FSR containing the base address, and
   889                           ;	W with the last address+1
   890                           
   891  1494  0064               	clrwdt	;clear the watchdog before getting into this loop
   892  1495                     clrloop0:	
   893  1495  0180               	clrf	0	;clear RAM location pointed to by FSR
   894  1496  0A84               	incf	4,f	;increment pointer
   895  1497  0604               	xorwf	4,w	;XOR with final address
   896  1498  1903               	btfsc	3,2	;have we reached the end yet?
   897  1499  3400               	retlw	0	;all done for this memory range, return
   898  149A  0604               	xorwf	4,w	;XOR again to restore value
   899  149B  2C95               	goto	clrloop0	;do the next byte
   900                           
   901                           	psect	cstackCOMMON
   902  0070                     __pcstackCOMMON:	
   903  0070                     ?_init_temp:	
   904  0070                     ??_init_temp:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_set_time:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_ds1302_init:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?_init:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ??_init:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?_lcd_init:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ?_initialise_buttons:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ??_initialise_buttons:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ?_get_temp:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_get_time:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_write_cmd:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_write_char:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_display_temp:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_display_date:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_display_clock:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ?_thermometer_threshhold_settings:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_date_settings:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_time_settings:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_set_beep_threshhold:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_reset_alarm:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ??_reset_alarm:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_delay_screen:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ??_delay_screen:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_delay_temp:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_delay2:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ??_delay2:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_time_write_1:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ??_time_write_1:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_time_read_1:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ??_time_read_1:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_button_delay:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ??_button_delay:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ?_time_date_hex_terminator:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_time_date_delimiter:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ?_main:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_reset_temp:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ?_write_byte:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ?_read_byte:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ?___lbdiv:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?___lbmod:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ?___awmod:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?___lwmod:	
  1028                           ; 2 bytes @ 0x0
  1029                           
  1030  0070                     delay_temp@y:	
  1031                           ; 2 bytes @ 0x0
  1032                           
  1033  0070                     time_date_delimiter@hex:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     time_date_hex_terminator@limiter:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ___lbdiv@divisor:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ___lbmod@divisor:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     delay_screen@i:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     delay2@i:	
  1049                           ; 2 bytes @ 0x0
  1050                           
  1051  0070                     button_delay@i:	
  1052                           ; 2 bytes @ 0x0
  1053                           
  1054  0070                     ___awmod@divisor:	
  1055                           ; 2 bytes @ 0x0
  1056                           
  1057  0070                     ___lwmod@divisor:	
  1058                           ; 2 bytes @ 0x0
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x0
  1062  0070                     	ds	1
  1063  0071                     ??_delay_temp:	
  1064  0071                     ??_time_date_hex_terminator:	
  1065                           ; 1 bytes @ 0x1
  1066                           
  1067  0071                     ??___lbdiv:	
  1068                           ; 1 bytes @ 0x1
  1069                           
  1070  0071                     ??___lbmod:	
  1071                           ; 1 bytes @ 0x1
  1072                           
  1073  0071                     time_date_delimiter@limiter:	
  1074                           ; 1 bytes @ 0x1
  1075                           
  1076                           
  1077                           ; 1 bytes @ 0x1
  1078  0071                     	ds	1
  1079  0072                     ??_write_cmd:	
  1080  0072                     ??_write_char:	
  1081                           ; 1 bytes @ 0x2
  1082                           
  1083  0072                     ??_set_beep_threshhold:	
  1084                           ; 1 bytes @ 0x2
  1085                           
  1086  0072                     write_char@x:	
  1087                           ; 1 bytes @ 0x2
  1088                           
  1089  0072                     write_cmd@x:	
  1090                           ; 1 bytes @ 0x2
  1091                           
  1092  0072                     delay_temp@x:	
  1093                           ; 1 bytes @ 0x2
  1094                           
  1095  0072                     set_beep_threshhold@x:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0072                     ___lbdiv@dividend:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101  0072                     time_write_1@j:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104  0072                     time_read_1@j:	
  1105                           ; 2 bytes @ 0x2
  1106                           
  1107  0072                     time_date_delimiter@type:	
  1108                           ; 2 bytes @ 0x2
  1109                           
  1110  0072                     ___awmod@dividend:	
  1111                           ; 2 bytes @ 0x2
  1112                           
  1113  0072                     ___lwmod@dividend:	
  1114                           ; 2 bytes @ 0x2
  1115                           
  1116                           
  1117                           ; 2 bytes @ 0x2
  1118  0072                     	ds	1
  1119  0073                     ??_lcd_init:	
  1120  0073                     ??_display_temp:	
  1121                           ; 1 bytes @ 0x3
  1122                           
  1123  0073                     ??_display_date:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126  0073                     ??_display_clock:	
  1127                           ; 1 bytes @ 0x3
  1128                           
  1129  0073                     ?_set_lower_threshold:	
  1130                           ; 1 bytes @ 0x3
  1131                           
  1132  0073                     ?_set_upper_threshold:	
  1133                           ; 1 bytes @ 0x3
  1134                           
  1135  0073                     ?_display_day:	
  1136                           ; 1 bytes @ 0x3
  1137                           
  1138  0073                     delay_temp@z:	
  1139                           ; 1 bytes @ 0x3
  1140                           
  1141  0073                     time_date_hex_terminator@val:	
  1142                           ; 1 bytes @ 0x3
  1143                           
  1144  0073                     ___lbdiv@counter:	
  1145                           ; 1 bytes @ 0x3
  1146                           
  1147  0073                     set_upper_threshold@upper_val:	
  1148                           ; 1 bytes @ 0x3
  1149                           
  1150  0073                     set_lower_threshold@upper_val:	
  1151                           ; 2 bytes @ 0x3
  1152                           
  1153  0073                     display_day@num:	
  1154                           ; 2 bytes @ 0x3
  1155                           
  1156                           
  1157                           ; 2 bytes @ 0x3
  1158  0073                     	ds	1
  1159  0074                     ??_time_date_delimiter:	
  1160  0074                     ??_reset_temp:	
  1161                           ; 1 bytes @ 0x4
  1162                           
  1163  0074                     ??_write_byte:	
  1164                           ; 1 bytes @ 0x4
  1165                           
  1166  0074                     ??_read_byte:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169  0074                     ??___awmod:	
  1170                           ; 1 bytes @ 0x4
  1171                           
  1172  0074                     ??___lwmod:	
  1173                           ; 1 bytes @ 0x4
  1174                           
  1175  0074                     time_write_1@time_tx:	
  1176                           ; 1 bytes @ 0x4
  1177                           
  1178  0074                     time_read_1@time_rx:	
  1179                           ; 1 bytes @ 0x4
  1180                           
  1181  0074                     ___lbdiv@quotient:	
  1182                           ; 1 bytes @ 0x4
  1183                           
  1184  0074                     ___lbmod@dividend:	
  1185                           ; 1 bytes @ 0x4
  1186                           
  1187                           
  1188                           ; 1 bytes @ 0x4
  1189  0074                     	ds	1
  1190  0075                     ??_set_time:	
  1191  0075                     ??_ds1302_init:	
  1192                           ; 1 bytes @ 0x5
  1193                           
  1194  0075                     ??_get_time:	
  1195                           ; 1 bytes @ 0x5
  1196                           
  1197  0075                     ??_display_day:	
  1198                           ; 1 bytes @ 0x5
  1199                           
  1200  0075                     reset_temp@presence:	
  1201                           ; 1 bytes @ 0x5
  1202                           
  1203  0075                     read_byte@value:	
  1204                           ; 1 bytes @ 0x5
  1205                           
  1206  0075                     ___awmod@counter:	
  1207                           ; 1 bytes @ 0x5
  1208                           
  1209  0075                     ___lbmod@counter:	
  1210                           ; 1 bytes @ 0x5
  1211                           
  1212  0075                     ___lwmod@counter:	
  1213                           ; 1 bytes @ 0x5
  1214                           
  1215  0075                     set_time@i:	
  1216                           ; 1 bytes @ 0x5
  1217                           
  1218  0075                     display_clock@i:	
  1219                           ; 2 bytes @ 0x5
  1220                           
  1221  0075                     display_date@i:	
  1222                           ; 2 bytes @ 0x5
  1223                           
  1224  0075                     set_upper_threshold@lower_val:	
  1225                           ; 2 bytes @ 0x5
  1226                           
  1227  0075                     set_lower_threshold@lower_val:	
  1228                           ; 2 bytes @ 0x5
  1229                           
  1230                           
  1231                           ; 2 bytes @ 0x5
  1232  0075                     	ds	1
  1233  0076                     ?___lwdiv:	
  1234  0076                     write_byte@temp:	
  1235                           ; 2 bytes @ 0x6
  1236                           
  1237  0076                     read_byte@i:	
  1238                           ; 1 bytes @ 0x6
  1239                           
  1240  0076                     time_date_delimiter@val:	
  1241                           ; 1 bytes @ 0x6
  1242                           
  1243  0076                     ___awmod@sign:	
  1244                           ; 1 bytes @ 0x6
  1245                           
  1246  0076                     ___lbmod@rem:	
  1247                           ; 1 bytes @ 0x6
  1248                           
  1249  0076                     get_time@i:	
  1250                           ; 1 bytes @ 0x6
  1251                           
  1252  0076                     ___lwdiv@divisor:	
  1253                           ; 2 bytes @ 0x6
  1254                           
  1255                           
  1256                           ; 2 bytes @ 0x6
  1257  0076                     	ds	1
  1258  0077                     ??_set_lower_threshold:	
  1259  0077                     ??_set_upper_threshold:	
  1260                           ; 1 bytes @ 0x7
  1261                           
  1262  0077                     ?_modulus_func:	
  1263                           ; 1 bytes @ 0x7
  1264                           
  1265  0077                     write_byte@val:	
  1266                           ; 2 bytes @ 0x7
  1267                           
  1268  0077                     modulus_func@x:	
  1269                           ; 1 bytes @ 0x7
  1270                           
  1271                           
  1272                           ; 2 bytes @ 0x7
  1273  0077                     	ds	1
  1274  0078                     write_byte@i:	
  1275  0078                     ___lwdiv@dividend:	
  1276                           ; 1 bytes @ 0x8
  1277                           
  1278                           
  1279                           ; 2 bytes @ 0x8
  1280  0078                     	ds	1
  1281  0079                     modulus_func@y:	
  1282                           
  1283                           ; 2 bytes @ 0x9
  1284  0079                     	ds	1
  1285  007A                     ??___lwdiv:	
  1286                           
  1287                           ; 1 bytes @ 0xA
  1288  007A                     	ds	1
  1289  007B                     ??_modulus_func:	
  1290  007B                     ??_incrementor:	
  1291                           ; 1 bytes @ 0xB
  1292                           
  1293  007B                     ??_decrementor:	
  1294                           ; 1 bytes @ 0xB
  1295                           
  1296  007B                     ___lwdiv@quotient:	
  1297                           ; 1 bytes @ 0xB
  1298                           
  1299                           
  1300                           ; 2 bytes @ 0xB
  1301  007B                     	ds	2
  1302  007D                     ___lwdiv@counter:	
  1303                           
  1304                           ; 1 bytes @ 0xD
  1305  007D                     	ds	1
  1306  007E                     ??_main:	
  1307                           
  1308                           	psect	cstackBANK0
  1309  0062                     __pcstackBANK0:	
  1310                           ; 1 bytes @ 0xE
  1311                           
  1312  0062                     ??_get_temp:	
  1313  0062                     ?_incrementor:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0062                     ?_decrementor:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0062                     incrementor@upper_val:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0062                     decrementor@lower_val:	
  1323                           ; 2 bytes @ 0x0
  1324                           
  1325                           
  1326                           ; 2 bytes @ 0x0
  1327  0062                     	ds	2
  1328  0064                     incrementor@lower_val:	
  1329  0064                     decrementor@upper_val:	
  1330                           ; 2 bytes @ 0x2
  1331                           
  1332                           
  1333                           ; 2 bytes @ 0x2
  1334  0064                     	ds	2
  1335  0066                     incrementor@z:	
  1336  0066                     decrementor@z:	
  1337                           ; 1 bytes @ 0x4
  1338                           
  1339                           
  1340                           ; 1 bytes @ 0x4
  1341  0066                     	ds	1
  1342  0067                     ??_thermometer_threshhold_settings:	
  1343  0067                     ??_date_settings:	
  1344                           ; 1 bytes @ 0x5
  1345                           
  1346  0067                     ??_time_settings:	
  1347                           ; 1 bytes @ 0x5
  1348                           
  1349                           
  1350                           ; 1 bytes @ 0x5
  1351  0067                     	ds	3
  1352  006A                     thermometer_threshhold_settings@i:	
  1353                           
  1354                           ; 2 bytes @ 0x8
  1355  006A                     	ds	2
  1356  006C                     main@i:	
  1357                           
  1358                           ; 2 bytes @ 0xA
  1359  006C                     	ds	2
  1360                           
  1361                           	psect	maintext
  1362  0B30                     __pmaintext:	
  1363 ;;
  1364 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1365 ;;
  1366 ;; *************** function _main *****************
  1367 ;; Defined at:
  1368 ;;		line 10 in file "mainLogic.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  i               2   10[BANK0 ] int 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : B00/0
  1379 ;;		On exit  : 300/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         0       0       0       0       0
  1383 ;;      Locals:         0       2       0       0       0
  1384 ;;      Temps:          0       0       0       0       0
  1385 ;;      Totals:         0       2       0       0       0
  1386 ;;Total ram usage:        2 bytes
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		_date_settings
  1390 ;;		_display_clock
  1391 ;;		_display_date
  1392 ;;		_display_day
  1393 ;;		_display_temp
  1394 ;;		_ds1302_init
  1395 ;;		_get_temp
  1396 ;;		_get_time
  1397 ;;		_init
  1398 ;;		_init_temp
  1399 ;;		_initialise_buttons
  1400 ;;		_lcd_init
  1401 ;;		_modulus_func
  1402 ;;		_reset_alarm
  1403 ;;		_set_beep_threshhold
  1404 ;;		_set_lower_threshold
  1405 ;;		_set_time
  1406 ;;		_set_upper_threshold
  1407 ;;		_thermometer_threshhold_settings
  1408 ;;		_time_settings
  1409 ;;		_write_char
  1410 ;;		_write_cmd
  1411 ;; This function is called by:
  1412 ;;		Startup code after reset
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _main
  1418  0B30                     _main:	
  1419                           
  1420                           ;mainLogic.c: 11:     TRISB=0X02;
  1421                           
  1422                           ;incstack = 0
  1423                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1424  0B30  3002               	movlw	2
  1425  0B31  1683               	bsf	3,5	;RP0=1, select bank1
  1426  0B32  0086               	movwf	6	;volatile
  1427                           
  1428                           ;mainLogic.c: 12:     init_temp();
  1429  0B33  160A  118A  2487  120A  158A  	fcall	_init_temp
  1430                           
  1431                           ;mainLogic.c: 13:     set_time();
  1432  0B38  160A  118A  2674  120A  158A  	fcall	_set_time
  1433                           
  1434                           ;mainLogic.c: 14:     ds1302_init();
  1435  0B3D  160A  118A  24CE  120A  158A  	fcall	_ds1302_init
  1436                           
  1437                           ;mainLogic.c: 16:     init();
  1438  0B42  160A  118A  248C  120A  158A  	fcall	_init
  1439                           
  1440                           ;mainLogic.c: 17:     lcd_init();
  1441  0B47  160A  118A  25E3  120A  158A  	fcall	_lcd_init
  1442                           
  1443                           ;mainLogic.c: 18:     init_temp();
  1444  0B4C  160A  118A  2487  120A  158A  	fcall	_init_temp
  1445                           
  1446                           ;mainLogic.c: 19:     initialise_buttons();
  1447  0B51  160A  118A  253A  120A  158A  	fcall	_initialise_buttons
  1448  0B56                     l4424:	
  1449                           
  1450                           ;mainLogic.c: 24:     get_temp();
  1451  0B56  120A  158A  2229  120A  158A  	fcall	_get_temp
  1452                           
  1453                           ;mainLogic.c: 25:     get_time();
  1454  0B5B  160A  118A  269C  120A  158A  	fcall	_get_time
  1455                           
  1456                           ;mainLogic.c: 26:     write_cmd(0x80);
  1457  0B60  3080               	movlw	128
  1458  0B61  160A  118A  2567  120A  158A  	fcall	_write_cmd
  1459                           
  1460                           ;mainLogic.c: 27:     write_char('T');
  1461  0B66  3054               	movlw	84
  1462  0B67  160A  118A  2550  120A  158A  	fcall	_write_char
  1463                           
  1464                           ;mainLogic.c: 28:     write_char('e');
  1465  0B6C  3065               	movlw	101
  1466  0B6D  160A  118A  2550  120A  158A  	fcall	_write_char
  1467                           
  1468                           ;mainLogic.c: 29:     write_char('m');
  1469  0B72  306D               	movlw	109
  1470  0B73  160A  118A  2550  120A  158A  	fcall	_write_char
  1471                           
  1472                           ;mainLogic.c: 30:     write_char('p');
  1473  0B78  3070               	movlw	112
  1474  0B79  160A  118A  2550  120A  158A  	fcall	_write_char
  1475                           
  1476                           ;mainLogic.c: 31:     write_char(':');
  1477  0B7E  303A               	movlw	58
  1478  0B7F  160A  118A  2550  120A  158A  	fcall	_write_char
  1479                           
  1480                           ;mainLogic.c: 32:     display_temp();
  1481  0B84  160A  118A  257E  120A  158A  	fcall	_display_temp
  1482                           
  1483                           ;mainLogic.c: 34:     write_cmd(0x90);
  1484  0B89  3090               	movlw	144
  1485  0B8A  160A  118A  2567  120A  158A  	fcall	_write_cmd
  1486                           
  1487                           ;mainLogic.c: 35:     write_char('D');
  1488  0B8F  3044               	movlw	68
  1489  0B90  160A  118A  2550  120A  158A  	fcall	_write_char
  1490                           
  1491                           ;mainLogic.c: 36:     write_char('a');
  1492  0B95  3061               	movlw	97
  1493  0B96  160A  118A  2550  120A  158A  	fcall	_write_char
  1494                           
  1495                           ;mainLogic.c: 37:     write_char('t');
  1496  0B9B  3074               	movlw	116
  1497  0B9C  160A  118A  2550  120A  158A  	fcall	_write_char
  1498                           
  1499                           ;mainLogic.c: 38:     write_char('e');
  1500  0BA1  3065               	movlw	101
  1501  0BA2  160A  118A  2550  120A  158A  	fcall	_write_char
  1502                           
  1503                           ;mainLogic.c: 39:     write_char(':');
  1504  0BA7  303A               	movlw	58
  1505  0BA8  160A  118A  2550  120A  158A  	fcall	_write_char
  1506                           
  1507                           ;mainLogic.c: 40:     write_char(' ');
  1508  0BAD  3020               	movlw	32
  1509  0BAE  160A  118A  2550  120A  158A  	fcall	_write_char
  1510                           
  1511                           ;mainLogic.c: 42:     display_date();
  1512  0BB3  120A  158A  20F0  120A  158A  	fcall	_display_date
  1513                           
  1514                           ;mainLogic.c: 44:     write_cmd(0x88);
  1515  0BB8  3088               	movlw	136
  1516  0BB9  160A  118A  2567  120A  158A  	fcall	_write_cmd
  1517                           
  1518                           ;mainLogic.c: 45:     write_char('T');
  1519  0BBE  3054               	movlw	84
  1520  0BBF  160A  118A  2550  120A  158A  	fcall	_write_char
  1521                           
  1522                           ;mainLogic.c: 46:     write_char('i');
  1523  0BC4  3069               	movlw	105
  1524  0BC5  160A  118A  2550  120A  158A  	fcall	_write_char
  1525                           
  1526                           ;mainLogic.c: 47:     write_char('m');
  1527  0BCA  306D               	movlw	109
  1528  0BCB  160A  118A  2550  120A  158A  	fcall	_write_char
  1529                           
  1530                           ;mainLogic.c: 48:     write_char('e');
  1531  0BD0  3065               	movlw	101
  1532  0BD1  160A  118A  2550  120A  158A  	fcall	_write_char
  1533                           
  1534                           ;mainLogic.c: 49:     write_char(':');
  1535  0BD6  303A               	movlw	58
  1536  0BD7  160A  118A  2550  120A  158A  	fcall	_write_char
  1537                           
  1538                           ;mainLogic.c: 50:     display_clock();
  1539  0BDC  120A  158A  205A  120A  158A  	fcall	_display_clock
  1540                           
  1541                           ;mainLogic.c: 51:     thermometer_threshhold_settings();
  1542  0BE1  120A  158A  25AA  120A  158A  	fcall	_thermometer_threshhold_settings
  1543                           
  1544                           ;mainLogic.c: 52:     date_settings();
  1545  0BE6  120A  118A  239B  120A  158A  	fcall	_date_settings
  1546                           
  1547                           ;mainLogic.c: 53:     time_settings();
  1548  0BEB  120A  118A  2095  120A  158A  	fcall	_time_settings
  1549                           
  1550                           ;mainLogic.c: 54:     write_cmd(0x98);
  1551  0BF0  3098               	movlw	152
  1552  0BF1  160A  118A  2567  120A  158A  	fcall	_write_cmd
  1553                           
  1554                           ;mainLogic.c: 55:     set_lower_threshold(2,4);
  1555  0BF6  3002               	movlw	2
  1556  0BF7  00F3               	movwf	set_lower_threshold@upper_val
  1557  0BF8  3000               	movlw	0
  1558  0BF9  00F4               	movwf	set_lower_threshold@upper_val+1
  1559  0BFA  3004               	movlw	4
  1560  0BFB  00F5               	movwf	set_lower_threshold@lower_val
  1561  0BFC  3000               	movlw	0
  1562  0BFD  00F6               	movwf	set_lower_threshold@lower_val+1
  1563  0BFE  120A  118A  2006  120A  158A  	fcall	_set_lower_threshold
  1564                           
  1565                           ;mainLogic.c: 56:     set_upper_threshold(2,4);
  1566  0C03  3002               	movlw	2
  1567  0C04  00F3               	movwf	set_upper_threshold@upper_val
  1568  0C05  3000               	movlw	0
  1569  0C06  00F4               	movwf	set_upper_threshold@upper_val+1
  1570  0C07  3004               	movlw	4
  1571  0C08  00F5               	movwf	set_upper_threshold@lower_val
  1572  0C09  3000               	movlw	0
  1573  0C0A  00F6               	movwf	set_upper_threshold@lower_val+1
  1574  0C0B  160A  118A  27C8  120A  158A  	fcall	_set_upper_threshold
  1575                           
  1576                           ;mainLogic.c: 57:     set_beep_threshhold(buzzer_watcher);
  1577  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0C12  084B               	movf	_buzzer_watcher,w
  1580  0C13  120A  158A  2001  120A  158A  	fcall	_set_beep_threshhold
  1581                           
  1582                           ;mainLogic.c: 58:     reset_alarm();
  1583  0C18  160A  118A  24A4  120A  158A  	fcall	_reset_alarm
  1584                           
  1585                           ;mainLogic.c: 59:     for(int i = 0; i < 7; i++)
  1586  0C1D  01EC               	clrf	main@i
  1587  0C1E  01ED               	clrf	main@i+1
  1588  0C1F                     l4494:	
  1589                           
  1590                           ;mainLogic.c: 60:     write_char(' ');
  1591  0C1F  3020               	movlw	32
  1592  0C20  160A  118A  2550  120A  158A  	fcall	_write_char
  1593  0C25  3001               	movlw	1
  1594  0C26  07EC               	addwf	main@i,f
  1595  0C27  1803               	skipnc
  1596  0C28  0AED               	incf	main@i+1,f
  1597  0C29  3000               	movlw	0
  1598  0C2A  07ED               	addwf	main@i+1,f
  1599  0C2B  086D               	movf	main@i+1,w
  1600  0C2C  3A80               	xorlw	128
  1601  0C2D  00FF               	movwf	127
  1602  0C2E  3080               	movlw	128
  1603  0C2F  027F               	subwf	127,w
  1604  0C30  1D03               	skipz
  1605  0C31  2C34               	goto	u3845
  1606  0C32  3007               	movlw	7
  1607  0C33  026C               	subwf	main@i,w
  1608  0C34                     u3845:	
  1609  0C34  1C03               	skipc
  1610  0C35  2C1F               	goto	l4494
  1611                           
  1612                           ;mainLogic.c: 61:     day_counter = modulus_func(day_low,8);
  1613  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  1614  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  1615  0C38  083A               	movf	_day_low+1,w
  1616  0C39  00F8               	movwf	modulus_func@x+1
  1617  0C3A  0839               	movf	_day_low,w
  1618  0C3B  00F7               	movwf	modulus_func@x
  1619  0C3C  3008               	movlw	8
  1620  0C3D  00F9               	movwf	modulus_func@y
  1621  0C3E  3000               	movlw	0
  1622  0C3F  00FA               	movwf	modulus_func@y+1
  1623  0C40  160A  118A  24DD  120A  158A  	fcall	_modulus_func
  1624  0C45  0878               	movf	?_modulus_func+1,w
  1625  0C46  00A8               	movwf	_day_counter+1
  1626  0C47  0877               	movf	?_modulus_func,w
  1627  0C48  00A7               	movwf	_day_counter
  1628                           
  1629                           ;mainLogic.c: 62:     display_day(day_counter);
  1630  0C49  0828               	movf	_day_counter+1,w
  1631  0C4A  00F4               	movwf	display_day@num+1
  1632  0C4B  0827               	movf	_day_counter,w
  1633  0C4C  00F3               	movwf	display_day@num
  1634  0C4D  120A  158A  2186  120A  158A  	fcall	_display_day
  1635  0C52  2B56               	goto	l4424
  1636  0C53                     __end_of_main:	
  1637                           
  1638                           	psect	text1
  1639  0095                     __ptext1:	
  1640 ;; *************** function _time_settings *****************
  1641 ;; Defined at:
  1642 ;;		line 167 in file "Button_src.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 300/0
  1653 ;;		On exit  : 300/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0
  1658 ;;      Temps:          0       3       0       0       0
  1659 ;;      Totals:         0       3       0       0       0
  1660 ;;Total ram usage:        3 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    3
  1663 ;; This function calls:
  1664 ;;		_button_delay
  1665 ;;		_incrementor
  1666 ;;		_modulus_func
  1667 ;;		_set_time
  1668 ;;		_time_date_delimiter
  1669 ;;		_time_date_hex_terminator
  1670 ;;		_write_char
  1671 ;;		_write_cmd
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           
  1678                           ;psect for function _time_settings
  1679  0095                     _time_settings:	
  1680                           
  1681                           ;Button_src.c: 168:  RC0 = 1;
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1685  0095  1407               	bsf	7,0	;volatile
  1686                           
  1687                           ;Button_src.c: 169:  RC1 = 1;
  1688  0096  1487               	bsf	7,1	;volatile
  1689                           
  1690                           ;Button_src.c: 170:  RC2 = 0;
  1691  0097  1107               	bcf	7,2	;volatile
  1692                           
  1693                           ;Button_src.c: 171:  RC3 = 1;
  1694  0098  1587               	bsf	7,3	;volatile
  1695                           
  1696                           ;Button_src.c: 172:   if (RC4 == 0){
  1697  0099  1A07               	btfsc	7,4	;volatile
  1698  009A  0008               	return
  1699                           
  1700                           ;Button_src.c: 173:       write_cmd(0x1);
  1701  009B  3001               	movlw	1
  1702  009C  160A  118A  2567  120A  118A  	fcall	_write_cmd
  1703  00A1                     l607:	
  1704                           ;Button_src.c: 174:       for(;;){
  1705                           
  1706                           
  1707                           ;Button_src.c: 175:             write_cmd(0x80);
  1708  00A1  3080               	movlw	128
  1709  00A2  160A  118A  2567  120A  118A  	fcall	_write_cmd
  1710                           
  1711                           ;Button_src.c: 176:             write_char('T');
  1712  00A7  3054               	movlw	84
  1713  00A8  160A  118A  2550  120A  118A  	fcall	_write_char
  1714                           
  1715                           ;Button_src.c: 177:             write_char('i');
  1716  00AD  3069               	movlw	105
  1717  00AE  160A  118A  2550  120A  118A  	fcall	_write_char
  1718                           
  1719                           ;Button_src.c: 178:             write_char('m');
  1720  00B3  306D               	movlw	109
  1721  00B4  160A  118A  2550  120A  118A  	fcall	_write_char
  1722                           
  1723                           ;Button_src.c: 179:             write_char('e');
  1724  00B9  3065               	movlw	101
  1725  00BA  160A  118A  2550  120A  118A  	fcall	_write_char
  1726                           
  1727                           ;Button_src.c: 180:             write_char('_');
  1728  00BF  305F               	movlw	95
  1729  00C0  160A  118A  2550  120A  118A  	fcall	_write_char
  1730                           
  1731                           ;Button_src.c: 181:             write_char('S');
  1732  00C5  3053               	movlw	83
  1733  00C6  160A  118A  2550  120A  118A  	fcall	_write_char
  1734                           
  1735                           ;Button_src.c: 182:             write_char('e');
  1736  00CB  3065               	movlw	101
  1737  00CC  160A  118A  2550  120A  118A  	fcall	_write_char
  1738                           
  1739                           ;Button_src.c: 183:             write_char('t');
  1740  00D1  3074               	movlw	116
  1741  00D2  160A  118A  2550  120A  118A  	fcall	_write_char
  1742                           
  1743                           ;Button_src.c: 184:             write_char('t');
  1744  00D7  3074               	movlw	116
  1745  00D8  160A  118A  2550  120A  118A  	fcall	_write_char
  1746                           
  1747                           ;Button_src.c: 185:             write_char('i');
  1748  00DD  3069               	movlw	105
  1749  00DE  160A  118A  2550  120A  118A  	fcall	_write_char
  1750                           
  1751                           ;Button_src.c: 186:             write_char('n');
  1752  00E3  306E               	movlw	110
  1753  00E4  160A  118A  2550  120A  118A  	fcall	_write_char
  1754                           
  1755                           ;Button_src.c: 187:             write_char('g');
  1756  00E9  3067               	movlw	103
  1757  00EA  160A  118A  2550  120A  118A  	fcall	_write_char
  1758                           
  1759                           ;Button_src.c: 188:             write_char('s');
  1760  00EF  3073               	movlw	115
  1761  00F0  160A  118A  2550  120A  118A  	fcall	_write_char
  1762                           
  1763                           ;Button_src.c: 190:             RC0 = 1;
  1764  00F5  1407               	bsf	7,0	;volatile
  1765                           
  1766                           ;Button_src.c: 191:             RC1 = 0;
  1767  00F6  1087               	bcf	7,1	;volatile
  1768                           
  1769                           ;Button_src.c: 192:             RC2 = 1;
  1770  00F7  1507               	bsf	7,2	;volatile
  1771                           
  1772                           ;Button_src.c: 193:             RC3 = 1;
  1773  00F8  1587               	bsf	7,3	;volatile
  1774                           
  1775                           ;Button_src.c: 195:             if(RC7 == 0 && b =='x'){
  1776  00F9  1B87               	btfsc	7,7	;volatile
  1777  00FA  296C               	goto	l4178
  1778  00FB  3078               	movlw	120
  1779  00FC  0656               	xorwf	_b,w
  1780  00FD  1D03               	btfss	3,2
  1781  00FE  296C               	goto	l4178
  1782                           
  1783                           ;Button_src.c: 196:                 if(stats == 1)
  1784  00FF  0333               	decf	_stats,w
  1785  0100  0434               	iorwf	_stats+1,w
  1786  0101  1D03               	btfss	3,2
  1787  0102  2907               	goto	l609
  1788                           
  1789                           ;Button_src.c: 197:                    a++;
  1790  0103  3001               	movlw	1
  1791  0104  00E7               	movwf	??_time_settings
  1792  0105  0867               	movf	??_time_settings,w
  1793  0106  07D7               	addwf	_a,f
  1794  0107                     l609:	
  1795                           
  1796                           ;Button_src.c: 198:                 if(stats == 0){
  1797  0107  0833               	movf	_stats,w
  1798  0108  0434               	iorwf	_stats+1,w
  1799  0109  1D03               	btfss	3,2
  1800  010A  290F               	goto	l610
  1801                           
  1802                           ;Button_src.c: 199:                    stats = 1;
  1803  010B  3001               	movlw	1
  1804  010C  00B3               	movwf	_stats
  1805  010D  3000               	movlw	0
  1806  010E  00B4               	movwf	_stats+1
  1807  010F                     l610:	
  1808                           ;Button_src.c: 200:                 }
  1809                           
  1810                           
  1811                           ;Button_src.c: 202:                     x++ ;
  1812  010F  3001               	movlw	1
  1813  0110  07BF               	addwf	_x,f
  1814  0111  1803               	skipnc
  1815  0112  0AC0               	incf	_x+1,f
  1816  0113  3000               	movlw	0
  1817  0114  07C0               	addwf	_x+1,f
  1818                           
  1819                           ;Button_src.c: 203:                     x = modulus_func(x,10);
  1820  0115  0840               	movf	_x+1,w
  1821  0116  00F8               	movwf	modulus_func@x+1
  1822  0117  083F               	movf	_x,w
  1823  0118  00F7               	movwf	modulus_func@x
  1824  0119  300A               	movlw	10
  1825  011A  00F9               	movwf	modulus_func@y
  1826  011B  3000               	movlw	0
  1827  011C  00FA               	movwf	modulus_func@y+1
  1828  011D  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  1829  0122  0878               	movf	?_modulus_func+1,w
  1830  0123  00C0               	movwf	_x+1
  1831  0124  0877               	movf	?_modulus_func,w
  1832  0125  00BF               	movwf	_x
  1833                           
  1834                           ;Button_src.c: 204:                     if (p == 1){
  1835  0126  032F               	decf	_p,w
  1836  0127  0430               	iorwf	_p+1,w
  1837  0128  1D03               	btfss	3,2
  1838  0129  2943               	goto	l4164
  1839                           
  1840                           ;Button_src.c: 205:                         y = incrementor(y,x,'0');
  1841  012A  083E               	movf	_y+1,w
  1842  012B  00E3               	movwf	incrementor@upper_val+1
  1843  012C  083D               	movf	_y,w
  1844  012D  00E2               	movwf	incrementor@upper_val
  1845  012E  0840               	movf	_x+1,w
  1846  012F  00E5               	movwf	incrementor@lower_val+1
  1847  0130  083F               	movf	_x,w
  1848  0131  00E4               	movwf	incrementor@lower_val
  1849  0132  3030               	movlw	48
  1850  0133  00E7               	movwf	??_time_settings
  1851  0134  0867               	movf	??_time_settings,w
  1852  0135  00E6               	movwf	incrementor@z
  1853  0136  160A  118A  2606  120A  118A  	fcall	_incrementor
  1854  013B  00E8               	movwf	??_time_settings+1
  1855  013C  01E9               	clrf	??_time_settings+2
  1856  013D  0868               	movf	??_time_settings+1,w
  1857  013E  00BD               	movwf	_y
  1858  013F  0869               	movf	??_time_settings+2,w
  1859  0140  00BE               	movwf	_y+1
  1860                           
  1861                           ;Button_src.c: 206:                         p = 0;
  1862  0141  01AF               	clrf	_p
  1863  0142  01B0               	clrf	_p+1
  1864  0143                     l4164:	
  1865                           
  1866                           ;Button_src.c: 208:                     if (x == 9){
  1867  0143  3009               	movlw	9
  1868  0144  063F               	xorwf	_x,w
  1869  0145  0440               	iorwf	_x+1,w
  1870  0146  1D03               	btfss	3,2
  1871  0147  294C               	goto	l4168
  1872                           
  1873                           ;Button_src.c: 209:                         p = 1;
  1874  0148  3001               	movlw	1
  1875  0149  00AF               	movwf	_p
  1876  014A  3000               	movlw	0
  1877  014B  00B0               	movwf	_p+1
  1878  014C                     l4168:	
  1879                           
  1880                           ;Button_src.c: 213:                     a = time_date_hex_terminator(a,'T');
  1881  014C  3054               	movlw	84
  1882  014D  00E7               	movwf	??_time_settings
  1883  014E  0867               	movf	??_time_settings,w
  1884  014F  00F0               	movwf	time_date_hex_terminator@limiter
  1885  0150  0857               	movf	_a,w
  1886  0151  160A  118A  24BF  120A  118A  	fcall	_time_date_hex_terminator
  1887  0156  00E8               	movwf	??_time_settings+1
  1888  0157  0868               	movf	??_time_settings+1,w
  1889  0158  00D7               	movwf	_a
  1890                           
  1891                           ;Button_src.c: 214:                     if(y == 2 && x == 4){
  1892  0159  3002               	movlw	2
  1893  015A  063D               	xorwf	_y,w
  1894  015B  043E               	iorwf	_y+1,w
  1895  015C  1D03               	btfss	3,2
  1896  015D  2967               	goto	l4176
  1897  015E  3004               	movlw	4
  1898  015F  063F               	xorwf	_x,w
  1899  0160  0440               	iorwf	_x+1,w
  1900  0161  1D03               	btfss	3,2
  1901  0162  2967               	goto	l4176
  1902                           
  1903                           ;Button_src.c: 215:                         x = 0;
  1904  0163  01BF               	clrf	_x
  1905  0164  01C0               	clrf	_x+1
  1906                           
  1907                           ;Button_src.c: 216:                         y = 0;
  1908  0165  01BD               	clrf	_y
  1909  0166  01BE               	clrf	_y+1
  1910  0167                     l4176:	
  1911                           
  1912                           ;Button_src.c: 218:                     button_delay();
  1913  0167  160A  118A  24FE  120A  118A  	fcall	_button_delay
  1914  016C                     l4178:	
  1915                           
  1916                           ;Button_src.c: 220:             if(RC7==0 && b == 'y'){
  1917  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1918  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1919  016E  1B87               	btfsc	7,7	;volatile
  1920  016F  29EA               	goto	l4212
  1921  0170  3079               	movlw	121
  1922  0171  0656               	xorwf	_b,w
  1923  0172  1D03               	btfss	3,2
  1924  0173  29EA               	goto	l4212
  1925                           
  1926                           ;Button_src.c: 221:                  if(stats == 1)
  1927  0174  0333               	decf	_stats,w
  1928  0175  0434               	iorwf	_stats+1,w
  1929  0176  1D03               	btfss	3,2
  1930  0177  297C               	goto	l615
  1931                           
  1932                           ;Button_src.c: 222:                    c++;
  1933  0178  3001               	movlw	1
  1934  0179  00E7               	movwf	??_time_settings
  1935  017A  0867               	movf	??_time_settings,w
  1936  017B  07D5               	addwf	_c,f
  1937  017C                     l615:	
  1938                           
  1939                           ;Button_src.c: 223:                 if(stats == 0){
  1940  017C  0833               	movf	_stats,w
  1941  017D  0434               	iorwf	_stats+1,w
  1942  017E  1D03               	btfss	3,2
  1943  017F  2984               	goto	l616
  1944                           
  1945                           ;Button_src.c: 224:                     stats = 1;
  1946  0180  3001               	movlw	1
  1947  0181  00B3               	movwf	_stats
  1948  0182  3000               	movlw	0
  1949  0183  00B4               	movwf	_stats+1
  1950  0184                     l616:	
  1951                           ;Button_src.c: 225:                 }
  1952                           
  1953                           
  1954                           ;Button_src.c: 227:                     t++;
  1955  0184  3001               	movlw	1
  1956  0185  07C3               	addwf	_t,f
  1957  0186  1803               	skipnc
  1958  0187  0AC4               	incf	_t+1,f
  1959  0188  3000               	movlw	0
  1960  0189  07C4               	addwf	_t+1,f
  1961                           
  1962                           ;Button_src.c: 228:                     t = modulus_func(t,10);
  1963  018A  0844               	movf	_t+1,w
  1964  018B  00F8               	movwf	modulus_func@x+1
  1965  018C  0843               	movf	_t,w
  1966  018D  00F7               	movwf	modulus_func@x
  1967  018E  300A               	movlw	10
  1968  018F  00F9               	movwf	modulus_func@y
  1969  0190  3000               	movlw	0
  1970  0191  00FA               	movwf	modulus_func@y+1
  1971  0192  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  1972  0197  0878               	movf	?_modulus_func+1,w
  1973  0198  00C4               	movwf	_t+1
  1974  0199  0877               	movf	?_modulus_func,w
  1975  019A  00C3               	movwf	_t
  1976                           
  1977                           ;Button_src.c: 229:                       if (p == 1){
  1978  019B  032F               	decf	_p,w
  1979  019C  0430               	iorwf	_p+1,w
  1980  019D  1D03               	btfss	3,2
  1981  019E  29B8               	goto	l4196
  1982                           
  1983                           ;Button_src.c: 230:                         w = incrementor(w,t,'0');
  1984  019F  0842               	movf	_w+1,w
  1985  01A0  00E3               	movwf	incrementor@upper_val+1
  1986  01A1  0841               	movf	_w,w
  1987  01A2  00E2               	movwf	incrementor@upper_val
  1988  01A3  0844               	movf	_t+1,w
  1989  01A4  00E5               	movwf	incrementor@lower_val+1
  1990  01A5  0843               	movf	_t,w
  1991  01A6  00E4               	movwf	incrementor@lower_val
  1992  01A7  3030               	movlw	48
  1993  01A8  00E7               	movwf	??_time_settings
  1994  01A9  0867               	movf	??_time_settings,w
  1995  01AA  00E6               	movwf	incrementor@z
  1996  01AB  160A  118A  2606  120A  118A  	fcall	_incrementor
  1997  01B0  00E8               	movwf	??_time_settings+1
  1998  01B1  01E9               	clrf	??_time_settings+2
  1999  01B2  0868               	movf	??_time_settings+1,w
  2000  01B3  00C1               	movwf	_w
  2001  01B4  0869               	movf	??_time_settings+2,w
  2002  01B5  00C2               	movwf	_w+1
  2003                           
  2004                           ;Button_src.c: 231:                         p = 0;
  2005  01B6  01AF               	clrf	_p
  2006  01B7  01B0               	clrf	_p+1
  2007  01B8                     l4196:	
  2008                           
  2009                           ;Button_src.c: 233:                     if (t == 9){
  2010  01B8  3009               	movlw	9
  2011  01B9  0643               	xorwf	_t,w
  2012  01BA  0444               	iorwf	_t+1,w
  2013  01BB  1D03               	btfss	3,2
  2014  01BC  29C1               	goto	l4200
  2015                           
  2016                           ;Button_src.c: 234:                         p = 1;
  2017  01BD  3001               	movlw	1
  2018  01BE  00AF               	movwf	_p
  2019  01BF  3000               	movlw	0
  2020  01C0  00B0               	movwf	_p+1
  2021  01C1                     l4200:	
  2022                           
  2023                           ;Button_src.c: 236:                     w = incrementor(w,t,'9');
  2024  01C1  0842               	movf	_w+1,w
  2025  01C2  00E3               	movwf	incrementor@upper_val+1
  2026  01C3  0841               	movf	_w,w
  2027  01C4  00E2               	movwf	incrementor@upper_val
  2028  01C5  0844               	movf	_t+1,w
  2029  01C6  00E5               	movwf	incrementor@lower_val+1
  2030  01C7  0843               	movf	_t,w
  2031  01C8  00E4               	movwf	incrementor@lower_val
  2032  01C9  3039               	movlw	57
  2033  01CA  00E7               	movwf	??_time_settings
  2034  01CB  0867               	movf	??_time_settings,w
  2035  01CC  00E6               	movwf	incrementor@z
  2036  01CD  160A  118A  2606  120A  118A  	fcall	_incrementor
  2037  01D2  00E8               	movwf	??_time_settings+1
  2038  01D3  01E9               	clrf	??_time_settings+2
  2039  01D4  0868               	movf	??_time_settings+1,w
  2040  01D5  00C1               	movwf	_w
  2041  01D6  0869               	movf	??_time_settings+2,w
  2042  01D7  00C2               	movwf	_w+1
  2043                           
  2044                           ;Button_src.c: 237:                     if(c == (0x59 + 1)){
  2045  01D8  305A               	movlw	90
  2046  01D9  0655               	xorwf	_c,w
  2047  01DA  1903               	btfsc	3,2
  2048                           
  2049                           ;Button_src.c: 238:                         c = 0x00;
  2050  01DB  01D5               	clrf	_c
  2051                           
  2052                           ;Button_src.c: 240:                     if(w == 6){
  2053  01DC  3006               	movlw	6
  2054  01DD  0641               	xorwf	_w,w
  2055  01DE  0442               	iorwf	_w+1,w
  2056  01DF  1D03               	btfss	3,2
  2057  01E0  29E5               	goto	l4210
  2058                           
  2059                           ;Button_src.c: 241:                         w = 0;
  2060  01E1  01C1               	clrf	_w
  2061  01E2  01C2               	clrf	_w+1
  2062                           
  2063                           ;Button_src.c: 242:                         t = 0;
  2064  01E3  01C3               	clrf	_t
  2065  01E4  01C4               	clrf	_t+1
  2066  01E5                     l4210:	
  2067                           
  2068                           ;Button_src.c: 244:                     button_delay();
  2069  01E5  160A  118A  24FE  120A  118A  	fcall	_button_delay
  2070  01EA                     l4212:	
  2071                           
  2072                           ;Button_src.c: 247:              write_cmd(0x88);
  2073  01EA  3088               	movlw	136
  2074  01EB  160A  118A  2567  120A  118A  	fcall	_write_cmd
  2075                           
  2076                           ;Button_src.c: 248:                     table[2] = a;
  2077  01F0  0857               	movf	_a,w
  2078  01F1  00E7               	movwf	??_time_settings
  2079  01F2  0867               	movf	??_time_settings,w
  2080  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  2081  01F4  00A2               	movwf	(_table^(0+128)+2)
  2082                           
  2083                           ;Button_src.c: 249:                     table[1] = c;
  2084  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  2085  01F6  0855               	movf	_c,w
  2086  01F7  00E7               	movwf	??_time_settings
  2087  01F8  0867               	movf	??_time_settings,w
  2088  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  2089  01FA  00A1               	movwf	(_table^(0+128)+1)
  2090                           
  2091                           ;Button_src.c: 254:                     a = time_date_delimiter(a,0x11,'9',4);
  2092  01FB  3011               	movlw	17
  2093  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  2094  01FD  00E7               	movwf	??_time_settings
  2095  01FE  0867               	movf	??_time_settings,w
  2096  01FF  00F0               	movwf	time_date_delimiter@hex
  2097  0200  3039               	movlw	57
  2098  0201  00E8               	movwf	??_time_settings+1
  2099  0202  0868               	movf	??_time_settings+1,w
  2100  0203  00F1               	movwf	time_date_delimiter@limiter
  2101  0204  3004               	movlw	4
  2102  0205  00F2               	movwf	time_date_delimiter@type
  2103  0206  3000               	movlw	0
  2104  0207  00F3               	movwf	time_date_delimiter@type+1
  2105  0208  0857               	movf	_a,w
  2106  0209  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2107  020E  00E9               	movwf	??_time_settings+2
  2108  020F  0869               	movf	??_time_settings+2,w
  2109  0210  00D7               	movwf	_a
  2110                           
  2111                           ;Button_src.c: 255:                     a = time_date_delimiter(a,0x21,'J',4);
  2112  0211  3021               	movlw	33
  2113  0212  00E7               	movwf	??_time_settings
  2114  0213  0867               	movf	??_time_settings,w
  2115  0214  00F0               	movwf	time_date_delimiter@hex
  2116  0215  304A               	movlw	74
  2117  0216  00E8               	movwf	??_time_settings+1
  2118  0217  0868               	movf	??_time_settings+1,w
  2119  0218  00F1               	movwf	time_date_delimiter@limiter
  2120  0219  3004               	movlw	4
  2121  021A  00F2               	movwf	time_date_delimiter@type
  2122  021B  3000               	movlw	0
  2123  021C  00F3               	movwf	time_date_delimiter@type+1
  2124  021D  0857               	movf	_a,w
  2125  021E  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2126  0223  00E9               	movwf	??_time_settings+2
  2127  0224  0869               	movf	??_time_settings+2,w
  2128  0225  00D7               	movwf	_a
  2129                           
  2130                           ;Button_src.c: 257:                     c = time_date_delimiter(c,0x11,'9',5);
  2131  0226  3011               	movlw	17
  2132  0227  00E7               	movwf	??_time_settings
  2133  0228  0867               	movf	??_time_settings,w
  2134  0229  00F0               	movwf	time_date_delimiter@hex
  2135  022A  3039               	movlw	57
  2136  022B  00E8               	movwf	??_time_settings+1
  2137  022C  0868               	movf	??_time_settings+1,w
  2138  022D  00F1               	movwf	time_date_delimiter@limiter
  2139  022E  3005               	movlw	5
  2140  022F  00F2               	movwf	time_date_delimiter@type
  2141  0230  3000               	movlw	0
  2142  0231  00F3               	movwf	time_date_delimiter@type+1
  2143  0232  0855               	movf	_c,w
  2144  0233  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2145  0238  00E9               	movwf	??_time_settings+2
  2146  0239  0869               	movf	??_time_settings+2,w
  2147  023A  00D5               	movwf	_c
  2148                           
  2149                           ;Button_src.c: 258:                     c = time_date_delimiter(c,0x21,'J',5);
  2150  023B  3021               	movlw	33
  2151  023C  00E7               	movwf	??_time_settings
  2152  023D  0867               	movf	??_time_settings,w
  2153  023E  00F0               	movwf	time_date_delimiter@hex
  2154  023F  304A               	movlw	74
  2155  0240  00E8               	movwf	??_time_settings+1
  2156  0241  0868               	movf	??_time_settings+1,w
  2157  0242  00F1               	movwf	time_date_delimiter@limiter
  2158  0243  3005               	movlw	5
  2159  0244  00F2               	movwf	time_date_delimiter@type
  2160  0245  3000               	movlw	0
  2161  0246  00F3               	movwf	time_date_delimiter@type+1
  2162  0247  0855               	movf	_c,w
  2163  0248  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2164  024D  00E9               	movwf	??_time_settings+2
  2165  024E  0869               	movf	??_time_settings+2,w
  2166  024F  00D5               	movwf	_c
  2167                           
  2168                           ;Button_src.c: 259:                     c = time_date_delimiter(c,0x31,'Y',5);
  2169  0250  3031               	movlw	49
  2170  0251  00E7               	movwf	??_time_settings
  2171  0252  0867               	movf	??_time_settings,w
  2172  0253  00F0               	movwf	time_date_delimiter@hex
  2173  0254  3059               	movlw	89
  2174  0255  00E8               	movwf	??_time_settings+1
  2175  0256  0868               	movf	??_time_settings+1,w
  2176  0257  00F1               	movwf	time_date_delimiter@limiter
  2177  0258  3005               	movlw	5
  2178  0259  00F2               	movwf	time_date_delimiter@type
  2179  025A  3000               	movlw	0
  2180  025B  00F3               	movwf	time_date_delimiter@type+1
  2181  025C  0855               	movf	_c,w
  2182  025D  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2183  0262  00E9               	movwf	??_time_settings+2
  2184  0263  0869               	movf	??_time_settings+2,w
  2185  0264  00D5               	movwf	_c
  2186                           
  2187                           ;Button_src.c: 260:                     c = time_date_delimiter(c,0x41,'j',5);
  2188  0265  3041               	movlw	65
  2189  0266  00E7               	movwf	??_time_settings
  2190  0267  0867               	movf	??_time_settings,w
  2191  0268  00F0               	movwf	time_date_delimiter@hex
  2192  0269  306A               	movlw	106
  2193  026A  00E8               	movwf	??_time_settings+1
  2194  026B  0868               	movf	??_time_settings+1,w
  2195  026C  00F1               	movwf	time_date_delimiter@limiter
  2196  026D  3005               	movlw	5
  2197  026E  00F2               	movwf	time_date_delimiter@type
  2198  026F  3000               	movlw	0
  2199  0270  00F3               	movwf	time_date_delimiter@type+1
  2200  0271  0855               	movf	_c,w
  2201  0272  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2202  0277  00E9               	movwf	??_time_settings+2
  2203  0278  0869               	movf	??_time_settings+2,w
  2204  0279  00D5               	movwf	_c
  2205                           
  2206                           ;Button_src.c: 261:                     c = time_date_delimiter(c,0x51,'z',5);
  2207  027A  3051               	movlw	81
  2208  027B  00E7               	movwf	??_time_settings
  2209  027C  0867               	movf	??_time_settings,w
  2210  027D  00F0               	movwf	time_date_delimiter@hex
  2211  027E  307A               	movlw	122
  2212  027F  00E8               	movwf	??_time_settings+1
  2213  0280  0868               	movf	??_time_settings+1,w
  2214  0281  00F1               	movwf	time_date_delimiter@limiter
  2215  0282  3005               	movlw	5
  2216  0283  00F2               	movwf	time_date_delimiter@type
  2217  0284  3000               	movlw	0
  2218  0285  00F3               	movwf	time_date_delimiter@type+1
  2219  0286  0855               	movf	_c,w
  2220  0287  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  2221  028C  00E9               	movwf	??_time_settings+2
  2222  028D  0869               	movf	??_time_settings+2,w
  2223  028E  00D5               	movwf	_c
  2224                           
  2225                           ;Button_src.c: 263:                   RC0 = 0;
  2226  028F  1007               	bcf	7,0	;volatile
  2227                           
  2228                           ;Button_src.c: 264:                   RC1 = 1;
  2229  0290  1487               	bsf	7,1	;volatile
  2230                           
  2231                           ;Button_src.c: 265:                   RC2 = 1;
  2232  0291  1507               	bsf	7,2	;volatile
  2233                           
  2234                           ;Button_src.c: 266:                   RC3 = 1;
  2235  0292  1587               	bsf	7,3	;volatile
  2236                           
  2237                           ;Button_src.c: 267:                     if (RC6 == 0 ){
  2238  0293  1B07               	btfsc	7,6	;volatile
  2239  0294  2AA9               	goto	l621
  2240                           
  2241                           ;Button_src.c: 268:                           write_cmd(0x1);
  2242  0295  3001               	movlw	1
  2243  0296  160A  118A  2567  120A  118A  	fcall	_write_cmd
  2244                           
  2245                           ;Button_src.c: 269:                           a = 0x00;
  2246  029B  01D7               	clrf	_a
  2247                           
  2248                           ;Button_src.c: 270:                           c = 0x00;
  2249  029C  01D5               	clrf	_c
  2250                           
  2251                           ;Button_src.c: 271:                           x = 0;
  2252  029D  01BF               	clrf	_x
  2253  029E  01C0               	clrf	_x+1
  2254                           
  2255                           ;Button_src.c: 272:                           y = 0;
  2256  029F  01BD               	clrf	_y
  2257  02A0  01BE               	clrf	_y+1
  2258                           
  2259                           ;Button_src.c: 273:                           w = 0;
  2260  02A1  01C1               	clrf	_w
  2261  02A2  01C2               	clrf	_w+1
  2262                           
  2263                           ;Button_src.c: 274:                           t = 0;
  2264  02A3  01C3               	clrf	_t
  2265  02A4  01C4               	clrf	_t+1
  2266                           
  2267                           ;Button_src.c: 275:                           set_time();
  2268  02A5  160A  118A  2674   	fcall	_set_time
  2269  02A8  0008               	return
  2270  02A9                     l621:	
  2271                           ;Button_src.c: 277:                             }
  2272                           
  2273                           
  2274                           ;Button_src.c: 278:                   RC0 = 1;
  2275  02A9  1407               	bsf	7,0	;volatile
  2276                           
  2277                           ;Button_src.c: 279:                   RC1 = 1;
  2278  02AA  1487               	bsf	7,1	;volatile
  2279                           
  2280                           ;Button_src.c: 280:                   RC2 = 0;
  2281  02AB  1107               	bcf	7,2	;volatile
  2282                           
  2283                           ;Button_src.c: 281:                   RC3 = 1;
  2284  02AC  1587               	bsf	7,3	;volatile
  2285                           
  2286                           ;Button_src.c: 282:                   z = modulus_func(z,2);
  2287  02AD  083C               	movf	_z+1,w
  2288  02AE  00F8               	movwf	modulus_func@x+1
  2289  02AF  083B               	movf	_z,w
  2290  02B0  00F7               	movwf	modulus_func@x
  2291  02B1  3002               	movlw	2
  2292  02B2  00F9               	movwf	modulus_func@y
  2293  02B3  3000               	movlw	0
  2294  02B4  00FA               	movwf	modulus_func@y+1
  2295  02B5  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  2296  02BA  0878               	movf	?_modulus_func+1,w
  2297  02BB  00BC               	movwf	_z+1
  2298  02BC  0877               	movf	?_modulus_func,w
  2299  02BD  00BB               	movwf	_z
  2300                           
  2301                           ;Button_src.c: 283:                   if(RC4 == 0 && z ==0){
  2302  02BE  1A07               	btfsc	7,4	;volatile
  2303  02BF  2AF9               	goto	l4272
  2304  02C0  083B               	movf	_z,w
  2305  02C1  043C               	iorwf	_z+1,w
  2306  02C2  1D03               	btfss	3,2
  2307  02C3  2AF9               	goto	l4272
  2308                           
  2309                           ;Button_src.c: 284:                       write_cmd(0x90);
  2310  02C4  3090               	movlw	144
  2311  02C5  160A  118A  2567  120A  118A  	fcall	_write_cmd
  2312                           
  2313                           ;Button_src.c: 285:                       write_char('H');
  2314  02CA  3048               	movlw	72
  2315  02CB  160A  118A  2550  120A  118A  	fcall	_write_char
  2316                           
  2317                           ;Button_src.c: 286:                       write_char('o');
  2318  02D0  306F               	movlw	111
  2319  02D1  160A  118A  2550  120A  118A  	fcall	_write_char
  2320                           
  2321                           ;Button_src.c: 287:                       write_char('u');
  2322  02D6  3075               	movlw	117
  2323  02D7  160A  118A  2550  120A  118A  	fcall	_write_char
  2324                           
  2325                           ;Button_src.c: 288:                       write_char('r');
  2326  02DC  3072               	movlw	114
  2327  02DD  160A  118A  2550  120A  118A  	fcall	_write_char
  2328                           
  2329                           ;Button_src.c: 289:                       write_char(':');
  2330  02E2  303A               	movlw	58
  2331  02E3  160A  118A  2550  120A  118A  	fcall	_write_char
  2332                           
  2333                           ;Button_src.c: 290:                       b = 'x';
  2334  02E8  3078               	movlw	120
  2335  02E9  00E7               	movwf	??_time_settings
  2336  02EA  0867               	movf	??_time_settings,w
  2337  02EB  00D6               	movwf	_b
  2338                           
  2339                           ;Button_src.c: 291:                       button_delay();
  2340  02EC  160A  118A  24FE  120A  118A  	fcall	_button_delay
  2341                           
  2342                           ;Button_src.c: 292:                       z++;
  2343  02F1  3001               	movlw	1
  2344  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2345  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  2346  02F4  07BB               	addwf	_z,f
  2347  02F5  1803               	skipnc
  2348  02F6  0ABC               	incf	_z+1,f
  2349  02F7  3000               	movlw	0
  2350  02F8  07BC               	addwf	_z+1,f
  2351  02F9                     l4272:	
  2352                           
  2353                           ;Button_src.c: 294:                   RC0 = 1;
  2354  02F9  1407               	bsf	7,0	;volatile
  2355                           
  2356                           ;Button_src.c: 295:                   RC1 = 1;
  2357  02FA  1487               	bsf	7,1	;volatile
  2358                           
  2359                           ;Button_src.c: 296:                   RC2 = 0;
  2360  02FB  1107               	bcf	7,2	;volatile
  2361                           
  2362                           ;Button_src.c: 297:                   RC3 = 1;
  2363  02FC  1587               	bsf	7,3	;volatile
  2364                           
  2365                           ;Button_src.c: 299:                   if(RC4 == 0&& z ==1){
  2366  02FD  1A07               	btfsc	7,4	;volatile
  2367  02FE  2B36               	goto	l624
  2368  02FF  033B               	decf	_z,w
  2369  0300  043C               	iorwf	_z+1,w
  2370  0301  1D03               	btfss	3,2
  2371  0302  2B36               	goto	l624
  2372                           
  2373                           ;Button_src.c: 300:                     z++;
  2374  0303  3001               	movlw	1
  2375  0304  07BB               	addwf	_z,f
  2376  0305  1803               	skipnc
  2377  0306  0ABC               	incf	_z+1,f
  2378  0307  3000               	movlw	0
  2379  0308  07BC               	addwf	_z+1,f
  2380                           
  2381                           ;Button_src.c: 301:                     button_delay();
  2382  0309  160A  118A  24FE  120A  118A  	fcall	_button_delay
  2383                           
  2384                           ;Button_src.c: 302:                     write_cmd(0x90);
  2385  030E  3090               	movlw	144
  2386  030F  160A  118A  2567  120A  118A  	fcall	_write_cmd
  2387                           
  2388                           ;Button_src.c: 303:                     write_char('M');
  2389  0314  304D               	movlw	77
  2390  0315  160A  118A  2550  120A  118A  	fcall	_write_char
  2391                           
  2392                           ;Button_src.c: 304:                     write_char('i');
  2393  031A  3069               	movlw	105
  2394  031B  160A  118A  2550  120A  118A  	fcall	_write_char
  2395                           
  2396                           ;Button_src.c: 305:                     write_char('n');
  2397  0320  306E               	movlw	110
  2398  0321  160A  118A  2550  120A  118A  	fcall	_write_char
  2399                           
  2400                           ;Button_src.c: 306:                     write_char('s');
  2401  0326  3073               	movlw	115
  2402  0327  160A  118A  2550  120A  118A  	fcall	_write_char
  2403                           
  2404                           ;Button_src.c: 307:                     write_char(':');
  2405  032C  303A               	movlw	58
  2406  032D  160A  118A  2550  120A  118A  	fcall	_write_char
  2407                           
  2408                           ;Button_src.c: 308:                     b = 'y';
  2409  0332  3079               	movlw	121
  2410  0333  00E7               	movwf	??_time_settings
  2411  0334  0867               	movf	??_time_settings,w
  2412  0335  00D6               	movwf	_b
  2413  0336                     l624:	
  2414                           ;Button_src.c: 309:                   }
  2415                           
  2416                           
  2417                           ;Button_src.c: 310:                    write_cmd(0x88);
  2418  0336  3088               	movlw	136
  2419  0337  160A  118A  2567  120A  118A  	fcall	_write_cmd
  2420                           
  2421                           ;Button_src.c: 317:                   RC0 = 1;
  2422  033C  1407               	bsf	7,0	;volatile
  2423                           
  2424                           ;Button_src.c: 318:                   RC1 = 1;
  2425  033D  1487               	bsf	7,1	;volatile
  2426                           
  2427                           ;Button_src.c: 319:                   RC2 = 0;
  2428  033E  1107               	bcf	7,2	;volatile
  2429                           
  2430                           ;Button_src.c: 320:                   RC3 = 1;
  2431  033F  1587               	bsf	7,3	;volatile
  2432                           
  2433                           ;Button_src.c: 322:              write_cmd(0x88);
  2434  0340  3088               	movlw	136
  2435  0341  160A  118A  2567  120A  118A  	fcall	_write_cmd
  2436                           
  2437                           ;Button_src.c: 323:              write_char('T');
  2438  0346  3054               	movlw	84
  2439  0347  160A  118A  2550  120A  118A  	fcall	_write_char
  2440                           
  2441                           ;Button_src.c: 324:              write_char('i');
  2442  034C  3069               	movlw	105
  2443  034D  160A  118A  2550  120A  118A  	fcall	_write_char
  2444                           
  2445                           ;Button_src.c: 325:              write_char('m');
  2446  0352  306D               	movlw	109
  2447  0353  160A  118A  2550  120A  118A  	fcall	_write_char
  2448                           
  2449                           ;Button_src.c: 326:              write_char('e');
  2450  0358  3065               	movlw	101
  2451  0359  160A  118A  2550  120A  118A  	fcall	_write_char
  2452                           
  2453                           ;Button_src.c: 327:              write_char(':');
  2454  035E  303A               	movlw	58
  2455  035F  160A  118A  2550  120A  118A  	fcall	_write_char
  2456                           
  2457                           ;Button_src.c: 328:              write_char(y + '0');
  2458  0364  083D               	movf	_y,w
  2459  0365  3E30               	addlw	48
  2460  0366  160A  118A  2550  120A  118A  	fcall	_write_char
  2461                           
  2462                           ;Button_src.c: 329:              write_char(x + '0');
  2463  036B  083F               	movf	_x,w
  2464  036C  3E30               	addlw	48
  2465  036D  160A  118A  2550  120A  118A  	fcall	_write_char
  2466                           
  2467                           ;Button_src.c: 330:              write_char(':');
  2468  0372  303A               	movlw	58
  2469  0373  160A  118A  2550  120A  118A  	fcall	_write_char
  2470                           
  2471                           ;Button_src.c: 331:              write_char(w + '0');
  2472  0378  0841               	movf	_w,w
  2473  0379  3E30               	addlw	48
  2474  037A  160A  118A  2550  120A  118A  	fcall	_write_char
  2475                           
  2476                           ;Button_src.c: 332:              write_char(t + '0');
  2477  037F  0843               	movf	_t,w
  2478  0380  3E30               	addlw	48
  2479  0381  160A  118A  2550  120A  118A  	fcall	_write_char
  2480                           
  2481                           ;Button_src.c: 334:             RC0 = 0;
  2482  0386  1007               	bcf	7,0	;volatile
  2483                           
  2484                           ;Button_src.c: 335:             RC1 = 1;
  2485  0387  1487               	bsf	7,1	;volatile
  2486                           
  2487                           ;Button_src.c: 336:             RC2 = 1;
  2488  0388  1507               	bsf	7,2	;volatile
  2489                           
  2490                           ;Button_src.c: 337:             RC3 = 1;
  2491  0389  1587               	bsf	7,3	;volatile
  2492                           
  2493                           ;Button_src.c: 338:             if (RC7 == 0 ){
  2494  038A  1B87               	btfsc	7,7	;volatile
  2495  038B  28A1               	goto	l607
  2496                           
  2497                           ;Button_src.c: 339:             a = 0x00;
  2498  038C  01D7               	clrf	_a
  2499                           
  2500                           ;Button_src.c: 340:             c = 0x00;
  2501  038D  01D5               	clrf	_c
  2502                           
  2503                           ;Button_src.c: 341:             x = 0;
  2504  038E  01BF               	clrf	_x
  2505  038F  01C0               	clrf	_x+1
  2506                           
  2507                           ;Button_src.c: 342:             y = 0;
  2508  0390  01BD               	clrf	_y
  2509  0391  01BE               	clrf	_y+1
  2510                           
  2511                           ;Button_src.c: 343:             w = 0;
  2512  0392  01C1               	clrf	_w
  2513  0393  01C2               	clrf	_w+1
  2514                           
  2515                           ;Button_src.c: 344:             t = 0;
  2516  0394  01C3               	clrf	_t
  2517  0395  01C4               	clrf	_t+1
  2518                           
  2519                           ;Button_src.c: 345:             write_cmd(0x1);
  2520  0396  3001               	movlw	1
  2521  0397  160A  118A  2567   	fcall	_write_cmd
  2522                           
  2523                           ;Button_src.c: 346:             break;
  2524  039A  0008               	return
  2525  039B                     __end_of_time_settings:	
  2526                           
  2527                           	psect	text2
  2528  0DAA                     __ptext2:	
  2529 ;; *************** function _thermometer_threshhold_settings *****************
  2530 ;; Defined at:
  2531 ;;		line 23 in file "Button_src.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  i               2    8[BANK0 ] int 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 300/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2545 ;;      Params:         0       0       0       0       0
  2546 ;;      Locals:         0       2       0       0       0
  2547 ;;      Temps:          0       3       0       0       0
  2548 ;;      Totals:         0       5       0       0       0
  2549 ;;Total ram usage:        5 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    3
  2552 ;; This function calls:
  2553 ;;		_button_delay
  2554 ;;		_decrementor
  2555 ;;		_incrementor
  2556 ;;		_modulus_func
  2557 ;;		_write_char
  2558 ;;		_write_cmd
  2559 ;; This function is called by:
  2560 ;;		_main
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           
  2565                           ;psect for function _thermometer_threshhold_settings
  2566  0DAA                     _thermometer_threshhold_settings:	
  2567                           
  2568                           ;Button_src.c: 24:  RC0 = 1;
  2569                           
  2570                           ;incstack = 0
  2571                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2572  0DAA  1407               	bsf	7,0	;volatile
  2573                           
  2574                           ;Button_src.c: 25:  RC1 = 0;
  2575  0DAB  1087               	bcf	7,1	;volatile
  2576                           
  2577                           ;Button_src.c: 26:  RC2 = 1;
  2578  0DAC  1507               	bsf	7,2	;volatile
  2579                           
  2580                           ;Button_src.c: 27:  RC3 = 1;
  2581  0DAD  1587               	bsf	7,3	;volatile
  2582                           
  2583                           ;Button_src.c: 28:   if (RC4 == 0){
  2584  0DAE  1A07               	btfsc	7,4	;volatile
  2585  0DAF  0008               	return
  2586                           
  2587                           ;Button_src.c: 29:       write_cmd(0x1);
  2588  0DB0  3001               	movlw	1
  2589  0DB1  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2590                           
  2591                           ;Button_src.c: 31:             write_cmd(0x80);
  2592                           
  2593                           ;Button_src.c: 30:       for(;;){
  2594  0DB6  3080               	movlw	128
  2595  0DB7  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2596                           
  2597                           ;Button_src.c: 32:             write_char('t');
  2598  0DBC  3074               	movlw	116
  2599  0DBD  160A  118A  2550  120A  158A  	fcall	_write_char
  2600                           
  2601                           ;Button_src.c: 33:             write_char('h');
  2602  0DC2  3068               	movlw	104
  2603  0DC3  160A  118A  2550  120A  158A  	fcall	_write_char
  2604                           
  2605                           ;Button_src.c: 34:             write_char('r');
  2606  0DC8  3072               	movlw	114
  2607  0DC9  160A  118A  2550  120A  158A  	fcall	_write_char
  2608                           
  2609                           ;Button_src.c: 35:             write_char('e');
  2610  0DCE  3065               	movlw	101
  2611  0DCF  160A  118A  2550  120A  158A  	fcall	_write_char
  2612                           
  2613                           ;Button_src.c: 36:             write_char('s');
  2614  0DD4  3073               	movlw	115
  2615  0DD5  160A  118A  2550  120A  158A  	fcall	_write_char
  2616                           
  2617                           ;Button_src.c: 37:             write_char('h');
  2618  0DDA  3068               	movlw	104
  2619  0DDB  160A  118A  2550  120A  158A  	fcall	_write_char
  2620                           
  2621                           ;Button_src.c: 38:             write_char('o');
  2622  0DE0  306F               	movlw	111
  2623  0DE1  160A  118A  2550  120A  158A  	fcall	_write_char
  2624                           
  2625                           ;Button_src.c: 39:             write_char('l');
  2626  0DE6  306C               	movlw	108
  2627  0DE7  160A  118A  2550  120A  158A  	fcall	_write_char
  2628                           
  2629                           ;Button_src.c: 40:             write_char('d');
  2630  0DEC  3064               	movlw	100
  2631  0DED  160A  118A  2550  120A  158A  	fcall	_write_char
  2632                           
  2633                           ;Button_src.c: 42:             write_cmd(0x90);
  2634  0DF2  3090               	movlw	144
  2635  0DF3  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2636                           
  2637                           ;Button_src.c: 43:             write_char('C');
  2638  0DF8  3043               	movlw	67
  2639  0DF9  160A  118A  2550  120A  158A  	fcall	_write_char
  2640                           
  2641                           ;Button_src.c: 44:             write_char('u');
  2642  0DFE  3075               	movlw	117
  2643  0DFF  160A  118A  2550  120A  158A  	fcall	_write_char
  2644                           
  2645                           ;Button_src.c: 45:             write_char('r');
  2646  0E04  3072               	movlw	114
  2647  0E05  160A  118A  2550  120A  158A  	fcall	_write_char
  2648                           
  2649                           ;Button_src.c: 46:             write_char('r');
  2650  0E0A  3072               	movlw	114
  2651  0E0B  160A  118A  2550  120A  158A  	fcall	_write_char
  2652                           
  2653                           ;Button_src.c: 47:             write_char('e');
  2654  0E10  3065               	movlw	101
  2655  0E11  160A  118A  2550  120A  158A  	fcall	_write_char
  2656                           
  2657                           ;Button_src.c: 48:             write_char('n');
  2658  0E16  306E               	movlw	110
  2659  0E17  160A  118A  2550  120A  158A  	fcall	_write_char
  2660                           
  2661                           ;Button_src.c: 49:             write_char('t');
  2662  0E1C  3074               	movlw	116
  2663  0E1D  160A  118A  2550  120A  158A  	fcall	_write_char
  2664                           
  2665                           ;Button_src.c: 50:             write_char(':');
  2666  0E22  303A               	movlw	58
  2667  0E23  160A  118A  2550  120A  158A  	fcall	_write_char
  2668                           
  2669                           ;Button_src.c: 52:             write_char(var1 + '0');
  2670  0E28  0849               	movf	_var1,w
  2671  0E29  3E30               	addlw	48
  2672  0E2A  160A  118A  2550  120A  158A  	fcall	_write_char
  2673                           
  2674                           ;Button_src.c: 53:             write_char(var2 + '0');
  2675  0E2F  0848               	movf	_var2,w
  2676  0E30  3E30               	addlw	48
  2677  0E31  160A  118A  2550  120A  158A  	fcall	_write_char
  2678                           
  2679                           ;Button_src.c: 55:             write_cmd(0x88);
  2680  0E36  3088               	movlw	136
  2681  0E37  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2682                           
  2683                           ;Button_src.c: 56:             write_char('S');
  2684  0E3C  3053               	movlw	83
  2685  0E3D  160A  118A  2550  120A  158A  	fcall	_write_char
  2686                           
  2687                           ;Button_src.c: 57:             write_char('e');
  2688  0E42  3065               	movlw	101
  2689  0E43  160A  118A  2550  120A  158A  	fcall	_write_char
  2690                           
  2691                           ;Button_src.c: 58:             write_char('t');
  2692  0E48  3074               	movlw	116
  2693  0E49  160A  118A  2550  120A  158A  	fcall	_write_char
  2694                           
  2695                           ;Button_src.c: 59:             write_char('_');
  2696  0E4E  305F               	movlw	95
  2697  0E4F  160A  118A  2550  120A  158A  	fcall	_write_char
  2698                           
  2699                           ;Button_src.c: 60:             write_char('t');
  2700  0E54  3074               	movlw	116
  2701  0E55  160A  118A  2550  120A  158A  	fcall	_write_char
  2702                           
  2703                           ;Button_src.c: 61:             write_char('h');
  2704  0E5A  3068               	movlw	104
  2705  0E5B  160A  118A  2550  120A  158A  	fcall	_write_char
  2706                           
  2707                           ;Button_src.c: 62:             write_char('r');
  2708  0E60  3072               	movlw	114
  2709  0E61  160A  118A  2550  120A  158A  	fcall	_write_char
  2710                           
  2711                           ;Button_src.c: 63:             write_char('e');
  2712  0E66  3065               	movlw	101
  2713  0E67  160A  118A  2550  120A  158A  	fcall	_write_char
  2714                           
  2715                           ;Button_src.c: 64:             write_char('s');
  2716  0E6C  3073               	movlw	115
  2717  0E6D  160A  118A  2550  120A  158A  	fcall	_write_char
  2718                           
  2719                           ;Button_src.c: 65:             write_char('h');
  2720  0E72  3068               	movlw	104
  2721  0E73  160A  118A  2550  120A  158A  	fcall	_write_char
  2722                           
  2723                           ;Button_src.c: 66:             write_char('o');
  2724  0E78  306F               	movlw	111
  2725  0E79  160A  118A  2550  120A  158A  	fcall	_write_char
  2726                           
  2727                           ;Button_src.c: 67:             write_char('l');
  2728  0E7E  306C               	movlw	108
  2729  0E7F  160A  118A  2550  120A  158A  	fcall	_write_char
  2730                           
  2731                           ;Button_src.c: 68:             write_char('d');
  2732  0E84  3064               	movlw	100
  2733  0E85  160A  118A  2550  120A  158A  	fcall	_write_char
  2734                           
  2735                           ;Button_src.c: 69:             write_char(':');
  2736  0E8A  303A               	movlw	58
  2737  0E8B  160A  118A  2550  120A  158A  	fcall	_write_char
  2738                           
  2739                           ;Button_src.c: 71:             write_cmd(0x98);
  2740  0E90  3098               	movlw	152
  2741  0E91  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2742                           
  2743                           ;Button_src.c: 72:             RC0 = 1;
  2744  0E96  1407               	bsf	7,0	;volatile
  2745                           
  2746                           ;Button_src.c: 73:             RC1 = 0;
  2747  0E97  1087               	bcf	7,1	;volatile
  2748                           
  2749                           ;Button_src.c: 74:             RC2 = 1;
  2750  0E98  1507               	bsf	7,2	;volatile
  2751                           
  2752                           ;Button_src.c: 75:             RC3 = 1;
  2753  0E99  1587               	bsf	7,3	;volatile
  2754                           
  2755                           ;Button_src.c: 76:             t = 0;
  2756  0E9A  01C3               	clrf	_t
  2757  0E9B  01C4               	clrf	_t+1
  2758                           
  2759                           ;Button_src.c: 77:             w = 0;
  2760  0E9C  01C1               	clrf	_w
  2761  0E9D  01C2               	clrf	_w+1
  2762                           
  2763                           ;Button_src.c: 78:             x = 0;
  2764  0E9E  01BF               	clrf	_x
  2765  0E9F  01C0               	clrf	_x+1
  2766                           
  2767                           ;Button_src.c: 79:             y = 0;
  2768  0EA0  01BD               	clrf	_y
  2769  0EA1  01BE               	clrf	_y+1
  2770                           
  2771                           ;Button_src.c: 80:             x = 0x00;
  2772  0EA2  01BF               	clrf	_x
  2773  0EA3  01C0               	clrf	_x+1
  2774  0EA4                     l3752:	
  2775                           
  2776                           ;Button_src.c: 82:                  RC0 = 1;
  2777  0EA4  1407               	bsf	7,0	;volatile
  2778                           
  2779                           ;Button_src.c: 83:                  RC1 = 0;
  2780  0EA5  1087               	bcf	7,1	;volatile
  2781                           
  2782                           ;Button_src.c: 84:                  RC2 = 1;
  2783  0EA6  1507               	bsf	7,2	;volatile
  2784                           
  2785                           ;Button_src.c: 85:                  RC3 = 1;
  2786  0EA7  1587               	bsf	7,3	;volatile
  2787                           
  2788                           ;Button_src.c: 87:                 if(RC7==0){
  2789  0EA8  1B87               	btfsc	7,7	;volatile
  2790  0EA9  2F03               	goto	l3780
  2791                           
  2792                           ;Button_src.c: 88:                     write_cmd(0x98);
  2793  0EAA  3098               	movlw	152
  2794  0EAB  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2795                           
  2796                           ;Button_src.c: 89:                     x++;
  2797  0EB0  3001               	movlw	1
  2798  0EB1  07BF               	addwf	_x,f
  2799  0EB2  1803               	skipnc
  2800  0EB3  0AC0               	incf	_x+1,f
  2801  0EB4  3000               	movlw	0
  2802  0EB5  07C0               	addwf	_x+1,f
  2803                           
  2804                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2805  0EB6  083D               	movf	_y,w
  2806  0EB7  00E7               	movwf	??_thermometer_threshhold_settings
  2807  0EB8  01E8               	clrf	??_thermometer_threshhold_settings+1
  2808  0EB9  0867               	movf	??_thermometer_threshhold_settings,w
  2809  0EBA  00BD               	movwf	_y
  2810  0EBB  0868               	movf	??_thermometer_threshhold_settings+1,w
  2811  0EBC  00BE               	movwf	_y+1
  2812                           
  2813                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2814  0EBD  0840               	movf	_x+1,w
  2815  0EBE  00F8               	movwf	modulus_func@x+1
  2816  0EBF  083F               	movf	_x,w
  2817  0EC0  00F7               	movwf	modulus_func@x
  2818  0EC1  300A               	movlw	10
  2819  0EC2  00F9               	movwf	modulus_func@y
  2820  0EC3  3000               	movlw	0
  2821  0EC4  00FA               	movwf	modulus_func@y+1
  2822  0EC5  160A  118A  24DD  120A  158A  	fcall	_modulus_func
  2823  0ECA  0877               	movf	?_modulus_func,w
  2824  0ECB  00E7               	movwf	??_thermometer_threshhold_settings
  2825  0ECC  01E8               	clrf	??_thermometer_threshhold_settings+1
  2826  0ECD  0867               	movf	??_thermometer_threshhold_settings,w
  2827  0ECE  00BF               	movwf	_x
  2828  0ECF  0868               	movf	??_thermometer_threshhold_settings+1,w
  2829  0ED0  00C0               	movwf	_x+1
  2830                           
  2831                           ;Button_src.c: 92:                     write_char(y + '0');
  2832  0ED1  083D               	movf	_y,w
  2833  0ED2  3E30               	addlw	48
  2834  0ED3  160A  118A  2550  120A  158A  	fcall	_write_char
  2835                           
  2836                           ;Button_src.c: 93:                     write_char(x + '0');
  2837  0ED8  083F               	movf	_x,w
  2838  0ED9  3E30               	addlw	48
  2839  0EDA  160A  118A  2550  120A  158A  	fcall	_write_char
  2840                           
  2841                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2842  0EDF  083E               	movf	_y+1,w
  2843  0EE0  00E3               	movwf	incrementor@upper_val+1
  2844  0EE1  083D               	movf	_y,w
  2845  0EE2  00E2               	movwf	incrementor@upper_val
  2846  0EE3  0840               	movf	_x+1,w
  2847  0EE4  00E5               	movwf	incrementor@lower_val+1
  2848  0EE5  083F               	movf	_x,w
  2849  0EE6  00E4               	movwf	incrementor@lower_val
  2850  0EE7  3039               	movlw	57
  2851  0EE8  00E7               	movwf	??_thermometer_threshhold_settings
  2852  0EE9  0867               	movf	??_thermometer_threshhold_settings,w
  2853  0EEA  00E6               	movwf	incrementor@z
  2854  0EEB  160A  118A  2606  120A  158A  	fcall	_incrementor
  2855  0EF0  00E8               	movwf	??_thermometer_threshhold_settings+1
  2856  0EF1  01E9               	clrf	??_thermometer_threshhold_settings+2
  2857  0EF2  0868               	movf	??_thermometer_threshhold_settings+1,w
  2858  0EF3  00BD               	movwf	_y
  2859  0EF4  0869               	movf	??_thermometer_threshhold_settings+2,w
  2860  0EF5  00BE               	movwf	_y+1
  2861                           
  2862                           ;Button_src.c: 95:                     t = x;
  2863  0EF6  0840               	movf	_x+1,w
  2864  0EF7  00C4               	movwf	_t+1
  2865  0EF8  083F               	movf	_x,w
  2866  0EF9  00C3               	movwf	_t
  2867                           
  2868                           ;Button_src.c: 96:                     w = y;
  2869  0EFA  083E               	movf	_y+1,w
  2870  0EFB  00C2               	movwf	_w+1
  2871  0EFC  083D               	movf	_y,w
  2872  0EFD  00C1               	movwf	_w
  2873                           
  2874                           ;Button_src.c: 97:                     button_delay();
  2875  0EFE  160A  118A  24FE  120A  158A  	fcall	_button_delay
  2876  0F03                     l3780:	
  2877                           
  2878                           ;Button_src.c: 99:                   RC0 = 0;
  2879  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  2881  0F05  1007               	bcf	7,0	;volatile
  2882                           
  2883                           ;Button_src.c: 100:                     RC1 = 1;
  2884  0F06  1487               	bsf	7,1	;volatile
  2885                           
  2886                           ;Button_src.c: 101:                     RC2 = 1;
  2887  0F07  1507               	bsf	7,2	;volatile
  2888                           
  2889                           ;Button_src.c: 102:                     RC3 = 1;
  2890  0F08  1587               	bsf	7,3	;volatile
  2891                           
  2892                           ;Button_src.c: 103:                     if(RC6 == 0){
  2893  0F09  1B07               	btfsc	7,6	;volatile
  2894  0F0A  2F4D               	goto	l594
  2895                           
  2896                           ;Button_src.c: 104:                         var1 = y;
  2897  0F0B  083D               	movf	_y,w
  2898  0F0C  00E7               	movwf	??_thermometer_threshhold_settings
  2899  0F0D  0867               	movf	??_thermometer_threshhold_settings,w
  2900  0F0E  00C9               	movwf	_var1
  2901                           
  2902                           ;Button_src.c: 105:                         var2 = x;
  2903  0F0F  083F               	movf	_x,w
  2904  0F10  00E7               	movwf	??_thermometer_threshhold_settings
  2905  0F11  0867               	movf	??_thermometer_threshhold_settings,w
  2906  0F12  00C8               	movwf	_var2
  2907                           
  2908                           ;Button_src.c: 107:                         write_cmd(0x1);
  2909  0F13  3001               	movlw	1
  2910  0F14  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2911                           
  2912                           ;Button_src.c: 108:                         write_char('S');
  2913  0F19  3053               	movlw	83
  2914  0F1A  160A  118A  2550  120A  158A  	fcall	_write_char
  2915                           
  2916                           ;Button_src.c: 109:                         write_char('A');
  2917  0F1F  3041               	movlw	65
  2918  0F20  160A  118A  2550  120A  158A  	fcall	_write_char
  2919                           
  2920                           ;Button_src.c: 110:                         write_char('V');
  2921  0F25  3056               	movlw	86
  2922  0F26  160A  118A  2550  120A  158A  	fcall	_write_char
  2923                           
  2924                           ;Button_src.c: 111:                         write_char('E');
  2925  0F2B  3045               	movlw	69
  2926  0F2C  160A  118A  2550  120A  158A  	fcall	_write_char
  2927                           
  2928                           ;Button_src.c: 112:                         write_char('D');
  2929  0F31  3044               	movlw	68
  2930  0F32  160A  118A  2550  120A  158A  	fcall	_write_char
  2931                           
  2932                           ;Button_src.c: 113:                         for(int i=0;i<30000;i++);
  2933  0F37  01EA               	clrf	thermometer_threshhold_settings@i
  2934  0F38  01EB               	clrf	thermometer_threshhold_settings@i+1
  2935  0F39                     l3810:	
  2936  0F39  3001               	movlw	1
  2937  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0F3C  07EA               	addwf	thermometer_threshhold_settings@i,f
  2940  0F3D  1803               	skipnc
  2941  0F3E  0AEB               	incf	thermometer_threshhold_settings@i+1,f
  2942  0F3F  3000               	movlw	0
  2943  0F40  07EB               	addwf	thermometer_threshhold_settings@i+1,f
  2944  0F41  086B               	movf	thermometer_threshhold_settings@i+1,w
  2945  0F42  3A80               	xorlw	128
  2946  0F43  00FF               	movwf	127
  2947  0F44  30F5               	movlw	245
  2948  0F45  027F               	subwf	127,w
  2949  0F46  1D03               	skipz
  2950  0F47  2F4A               	goto	u3055
  2951  0F48  3030               	movlw	48
  2952  0F49  026A               	subwf	thermometer_threshhold_settings@i,w
  2953  0F4A                     u3055:	
  2954  0F4A  1803               	btfsc	3,0
  2955  0F4B  0008               	return
  2956  0F4C  2F39               	goto	l3810
  2957  0F4D                     l594:	
  2958                           ;Button_src.c: 115:                     }
  2959                           
  2960                           
  2961                           ;Button_src.c: 116:                  RC0 = 1;
  2962  0F4D  1407               	bsf	7,0	;volatile
  2963                           
  2964                           ;Button_src.c: 117:                  RC1 = 1;
  2965  0F4E  1487               	bsf	7,1	;volatile
  2966                           
  2967                           ;Button_src.c: 118:                  RC2 = 0;
  2968  0F4F  1107               	bcf	7,2	;volatile
  2969                           
  2970                           ;Button_src.c: 119:                  RC3 = 1;
  2971  0F50  1587               	bsf	7,3	;volatile
  2972                           
  2973                           ;Button_src.c: 121:                  if(RC7 == 0){
  2974  0F51  1B87               	btfsc	7,7	;volatile
  2975  0F52  2FBD               	goto	l3834
  2976                           
  2977                           ;Button_src.c: 122:                     write_cmd(0x98);
  2978  0F53  3098               	movlw	152
  2979  0F54  160A  118A  2567  120A  158A  	fcall	_write_cmd
  2980                           
  2981                           ;Button_src.c: 123:                       t--;
  2982  0F59  3001               	movlw	1
  2983  0F5A  02C3               	subwf	_t,f
  2984  0F5B  3000               	movlw	0
  2985  0F5C  1C03               	skipc
  2986  0F5D  03C4               	decf	_t+1,f
  2987  0F5E  02C4               	subwf	_t+1,f
  2988                           
  2989                           ;Button_src.c: 124:                     w = (unsigned char )w;
  2990  0F5F  0841               	movf	_w,w
  2991  0F60  00E7               	movwf	??_thermometer_threshhold_settings
  2992  0F61  01E8               	clrf	??_thermometer_threshhold_settings+1
  2993  0F62  0867               	movf	??_thermometer_threshhold_settings,w
  2994  0F63  00C1               	movwf	_w
  2995  0F64  0868               	movf	??_thermometer_threshhold_settings+1,w
  2996  0F65  00C2               	movwf	_w+1
  2997                           
  2998                           ;Button_src.c: 125:                     t = (unsigned char )(modulus_func(t,10));
  2999  0F66  0844               	movf	_t+1,w
  3000  0F67  00F8               	movwf	modulus_func@x+1
  3001  0F68  0843               	movf	_t,w
  3002  0F69  00F7               	movwf	modulus_func@x
  3003  0F6A  300A               	movlw	10
  3004  0F6B  00F9               	movwf	modulus_func@y
  3005  0F6C  3000               	movlw	0
  3006  0F6D  00FA               	movwf	modulus_func@y+1
  3007  0F6E  160A  118A  24DD  120A  158A  	fcall	_modulus_func
  3008  0F73  0877               	movf	?_modulus_func,w
  3009  0F74  00E7               	movwf	??_thermometer_threshhold_settings
  3010  0F75  01E8               	clrf	??_thermometer_threshhold_settings+1
  3011  0F76  0867               	movf	??_thermometer_threshhold_settings,w
  3012  0F77  00C3               	movwf	_t
  3013  0F78  0868               	movf	??_thermometer_threshhold_settings+1,w
  3014  0F79  00C4               	movwf	_t+1
  3015                           
  3016                           ;Button_src.c: 126:                     write_char(w + '0');
  3017  0F7A  0841               	movf	_w,w
  3018  0F7B  3E30               	addlw	48
  3019  0F7C  160A  118A  2550  120A  158A  	fcall	_write_char
  3020                           
  3021                           ;Button_src.c: 127:                     write_char(t + '0');
  3022  0F81  0843               	movf	_t,w
  3023  0F82  3E30               	addlw	48
  3024  0F83  160A  118A  2550  120A  158A  	fcall	_write_char
  3025                           
  3026                           ;Button_src.c: 128:                     w = decrementor(w,t,'0');
  3027  0F88  0842               	movf	_w+1,w
  3028  0F89  00E3               	movwf	decrementor@lower_val+1
  3029  0F8A  0841               	movf	_w,w
  3030  0F8B  00E2               	movwf	decrementor@lower_val
  3031  0F8C  0844               	movf	_t+1,w
  3032  0F8D  00E5               	movwf	decrementor@upper_val+1
  3033  0F8E  0843               	movf	_t,w
  3034  0F8F  00E4               	movwf	decrementor@upper_val
  3035  0F90  3030               	movlw	48
  3036  0F91  00E7               	movwf	??_thermometer_threshhold_settings
  3037  0F92  0867               	movf	??_thermometer_threshhold_settings,w
  3038  0F93  00E6               	movwf	decrementor@z
  3039  0F94  160A  118A  262A  120A  158A  	fcall	_decrementor
  3040  0F99  00E8               	movwf	??_thermometer_threshhold_settings+1
  3041  0F9A  01E9               	clrf	??_thermometer_threshhold_settings+2
  3042  0F9B  0868               	movf	??_thermometer_threshhold_settings+1,w
  3043  0F9C  00C1               	movwf	_w
  3044  0F9D  0869               	movf	??_thermometer_threshhold_settings+2,w
  3045  0F9E  00C2               	movwf	_w+1
  3046                           
  3047                           ;Button_src.c: 129:                     if((t + '0')=='0'){
  3048  0F9F  0843               	movf	_t,w
  3049  0FA0  3E30               	addlw	48
  3050  0FA1  00E7               	movwf	??_thermometer_threshhold_settings
  3051  0FA2  0844               	movf	_t+1,w
  3052  0FA3  1803               	skipnc
  3053  0FA4  3E01               	addlw	1
  3054  0FA5  3E00               	addlw	0
  3055  0FA6  00E8               	movwf	??_thermometer_threshhold_settings+1
  3056  0FA7  3030               	movlw	48
  3057  0FA8  0667               	xorwf	??_thermometer_threshhold_settings,w
  3058  0FA9  0468               	iorwf	??_thermometer_threshhold_settings+1,w
  3059  0FAA  1D03               	btfss	3,2
  3060  0FAB  2FB0               	goto	l599
  3061                           
  3062                           ;Button_src.c: 130:                         t = 10;
  3063  0FAC  300A               	movlw	10
  3064  0FAD  00C3               	movwf	_t
  3065  0FAE  3000               	movlw	0
  3066  0FAF  00C4               	movwf	_t+1
  3067  0FB0                     l599:	
  3068                           ;Button_src.c: 131:                     }
  3069                           
  3070                           
  3071                           ;Button_src.c: 133:                     x = t;
  3072  0FB0  0844               	movf	_t+1,w
  3073  0FB1  00C0               	movwf	_x+1
  3074  0FB2  0843               	movf	_t,w
  3075  0FB3  00BF               	movwf	_x
  3076                           
  3077                           ;Button_src.c: 134:                     y = w;
  3078  0FB4  0842               	movf	_w+1,w
  3079  0FB5  00BE               	movwf	_y+1
  3080  0FB6  0841               	movf	_w,w
  3081  0FB7  00BD               	movwf	_y
  3082                           
  3083                           ;Button_src.c: 135:                     button_delay();
  3084  0FB8  160A  118A  24FE  120A  158A  	fcall	_button_delay
  3085  0FBD                     l3834:	
  3086                           
  3087                           ;Button_src.c: 137:                 RC0 = 0;
  3088  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0FBF  1007               	bcf	7,0	;volatile
  3091                           
  3092                           ;Button_src.c: 138:                 RC1 = 1;
  3093  0FC0  1487               	bsf	7,1	;volatile
  3094                           
  3095                           ;Button_src.c: 139:                 RC2 = 1;
  3096  0FC1  1507               	bsf	7,2	;volatile
  3097                           
  3098                           ;Button_src.c: 140:                 RC3 = 1;
  3099  0FC2  1587               	bsf	7,3	;volatile
  3100                           
  3101                           ;Button_src.c: 141:                     if(RC6 == 0){
  3102  0FC3  1B07               	btfsc	7,6	;volatile
  3103  0FC4  2FF5               	goto	l600
  3104                           
  3105                           ;Button_src.c: 142:                         var1 = w;
  3106  0FC5  0841               	movf	_w,w
  3107  0FC6  00E7               	movwf	??_thermometer_threshhold_settings
  3108  0FC7  0867               	movf	??_thermometer_threshhold_settings,w
  3109  0FC8  00C9               	movwf	_var1
  3110                           
  3111                           ;Button_src.c: 143:                         var2 = t;
  3112  0FC9  0843               	movf	_t,w
  3113  0FCA  00E7               	movwf	??_thermometer_threshhold_settings
  3114  0FCB  0867               	movf	??_thermometer_threshhold_settings,w
  3115  0FCC  00C8               	movwf	_var2
  3116                           
  3117                           ;Button_src.c: 145:                         write_cmd(0x1);
  3118  0FCD  3001               	movlw	1
  3119  0FCE  160A  118A  2567  120A  158A  	fcall	_write_cmd
  3120                           
  3121                           ;Button_src.c: 146:                         write_char('S');
  3122  0FD3  3053               	movlw	83
  3123  0FD4  160A  118A  2550  120A  158A  	fcall	_write_char
  3124                           
  3125                           ;Button_src.c: 147:                         write_char('A');
  3126  0FD9  3041               	movlw	65
  3127  0FDA  160A  118A  2550  120A  158A  	fcall	_write_char
  3128                           
  3129                           ;Button_src.c: 148:                         write_char('V');
  3130  0FDF  3056               	movlw	86
  3131  0FE0  160A  118A  2550  120A  158A  	fcall	_write_char
  3132                           
  3133                           ;Button_src.c: 149:                         write_char('E');
  3134  0FE5  3045               	movlw	69
  3135  0FE6  160A  118A  2550  120A  158A  	fcall	_write_char
  3136                           
  3137                           ;Button_src.c: 150:                         write_char('D');
  3138  0FEB  3044               	movlw	68
  3139  0FEC  160A  118A  2550  120A  158A  	fcall	_write_char
  3140                           
  3141                           ;Button_src.c: 151:                         button_delay();
  3142  0FF1  160A  118A  24FE   	fcall	_button_delay
  3143  0FF4  0008               	return
  3144  0FF5                     l600:	
  3145                           ;Button_src.c: 153:                     }
  3146                           
  3147                           
  3148                           ;Button_src.c: 154:             RC0 = 0;
  3149  0FF5  1007               	bcf	7,0	;volatile
  3150                           
  3151                           ;Button_src.c: 155:             RC1 = 1;
  3152  0FF6  1487               	bsf	7,1	;volatile
  3153                           
  3154                           ;Button_src.c: 156:             RC2 = 1;
  3155  0FF7  1507               	bsf	7,2	;volatile
  3156                           
  3157                           ;Button_src.c: 157:             RC3 = 1;
  3158  0FF8  1587               	bsf	7,3	;volatile
  3159                           
  3160                           ;Button_src.c: 158:             if (RC7 == 0 ){
  3161  0FF9  1B87               	btfsc	7,7	;volatile
  3162  0FFA  2EA4               	goto	l3752
  3163                           
  3164                           ;Button_src.c: 159:             write_cmd(0x1);
  3165  0FFB  3001               	movlw	1
  3166  0FFC  160A  118A  2567   	fcall	_write_cmd
  3167  0FFF  0008               	return
  3168  1000                     __end_of_thermometer_threshhold_settings:	
  3169                           
  3170                           	psect	text3
  3171  162A                     __ptext3:	
  3172 ;; *************** function _decrementor *****************
  3173 ;; Defined at:
  3174 ;;		line 19 in file "math_src.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  lower_val       2    0[BANK0 ] int 
  3177 ;;  upper_val       2    2[BANK0 ] int 
  3178 ;;  z               1    4[BANK0 ] unsigned char 
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      unsigned char 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, pclath, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 300/0
  3187 ;;		On exit  : 300/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3190 ;;      Params:         0       5       0       0       0
  3191 ;;      Locals:         0       0       0       0       0
  3192 ;;      Temps:          2       0       0       0       0
  3193 ;;      Totals:         2       5       0       0       0
  3194 ;;Total ram usage:        7 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    2
  3197 ;; This function calls:
  3198 ;;		_modulus_func
  3199 ;; This function is called by:
  3200 ;;		_thermometer_threshhold_settings
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _decrementor
  3206  162A                     _decrementor:	
  3207                           
  3208                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3209                           
  3210                           ;incstack = 0
  3211                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3212  162A  0864               	movf	decrementor@upper_val,w
  3213  162B  3E30               	addlw	48
  3214  162C  00FB               	movwf	??_decrementor
  3215  162D  0865               	movf	decrementor@upper_val+1,w
  3216  162E  1803               	skipnc
  3217  162F  3E01               	addlw	1
  3218  1630  3E00               	addlw	0
  3219  1631  00FC               	movwf	??_decrementor+1
  3220  1632  0866               	movf	decrementor@z,w
  3221  1633  067B               	xorwf	??_decrementor,w
  3222  1634  047C               	iorwf	??_decrementor+1,w
  3223  1635  1D03               	skipz
  3224  1636  2E4C               	goto	l3268
  3225                           
  3226                           ;math_src.c: 21:         lower_val--;
  3227  1637  30FF               	movlw	255
  3228  1638  07E2               	addwf	decrementor@lower_val,f
  3229  1639  1803               	skipnc
  3230  163A  0AE3               	incf	decrementor@lower_val+1,f
  3231  163B  30FF               	movlw	255
  3232  163C  07E3               	addwf	decrementor@lower_val+1,f
  3233                           
  3234                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3235  163D  0863               	movf	decrementor@lower_val+1,w
  3236  163E  00F8               	movwf	modulus_func@x+1
  3237  163F  0862               	movf	decrementor@lower_val,w
  3238  1640  00F7               	movwf	modulus_func@x
  3239  1641  300A               	movlw	10
  3240  1642  00F9               	movwf	modulus_func@y
  3241  1643  3000               	movlw	0
  3242  1644  00FA               	movwf	modulus_func@y+1
  3243  1645  160A  118A  24DD   	fcall	_modulus_func
  3244  1648  0878               	movf	?_modulus_func+1,w
  3245  1649  00E3               	movwf	decrementor@lower_val+1
  3246  164A  0877               	movf	?_modulus_func,w
  3247  164B  00E2               	movwf	decrementor@lower_val
  3248  164C                     l3268:	
  3249                           
  3250                           ;math_src.c: 24:      return lower_val;
  3251  164C  0862               	movf	decrementor@lower_val,w
  3252  164D  0008               	return
  3253  164E                     __end_of_decrementor:	
  3254                           
  3255                           	psect	text4
  3256  17C8                     __ptext4:	
  3257 ;; *************** function _set_upper_threshold *****************
  3258 ;; Defined at:
  3259 ;;		line 4 in file "threshold_src.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  upper_val       2    3[COMMON] int 
  3262 ;;  lower_val       2    5[COMMON] int 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 300/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3274 ;;      Params:         4       0       0       0       0
  3275 ;;      Locals:         0       0       0       0       0
  3276 ;;      Temps:          2       0       0       0       0
  3277 ;;      Totals:         6       0       0       0       0
  3278 ;;Total ram usage:        6 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    2
  3281 ;; This function calls:
  3282 ;;		_write_char
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           
  3289                           ;psect for function _set_upper_threshold
  3290  17C8                     _set_upper_threshold:	
  3291                           
  3292                           ;threshold_src.c: 5:     if(shi == upper_val && ge > lower_val && count == 2){
  3293                           
  3294                           ;incstack = 0
  3295                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3296  17C8  085D               	movf	_shi,w
  3297  17C9  00F7               	movwf	??_set_upper_threshold
  3298  17CA  01F8               	clrf	??_set_upper_threshold+1
  3299  17CB  0874               	movf	set_upper_threshold@upper_val+1,w
  3300  17CC  0678               	xorwf	??_set_upper_threshold+1,w
  3301  17CD  1D03               	skipz
  3302  17CE  2FD1               	goto	u3715
  3303  17CF  0873               	movf	set_upper_threshold@upper_val,w
  3304  17D0  0677               	xorwf	??_set_upper_threshold,w
  3305  17D1                     u3715:	
  3306  17D1  1D03               	skipz
  3307  17D2  0008               	return
  3308  17D3  0876               	movf	set_upper_threshold@lower_val+1,w
  3309  17D4  3A80               	xorlw	128
  3310  17D5  00F7               	movwf	??_set_upper_threshold
  3311  17D6  3080               	movlw	128
  3312  17D7  0277               	subwf	??_set_upper_threshold,w
  3313  17D8  1D03               	skipz
  3314  17D9  2FDC               	goto	u3725
  3315  17DA  085C               	movf	_ge,w
  3316  17DB  0275               	subwf	set_upper_threshold@lower_val,w
  3317  17DC                     u3725:	
  3318  17DC  1803               	skipnc
  3319  17DD  0008               	return
  3320  17DE  3002               	movlw	2
  3321  17DF  1283               	bcf	3,5	;RP0=0, select bank0
  3322  17E0  1303               	bcf	3,6	;RP1=0, select bank0
  3323  17E1  062D               	xorwf	_count,w
  3324  17E2  042E               	iorwf	_count+1,w
  3325  17E3  1D03               	btfss	3,2
  3326  17E4  0008               	return
  3327                           
  3328                           ;threshold_src.c: 6:     buzzer_watcher = 'w';
  3329  17E5  3077               	movlw	119
  3330  17E6  00F7               	movwf	??_set_upper_threshold
  3331  17E7  0877               	movf	??_set_upper_threshold,w
  3332  17E8  00CB               	movwf	_buzzer_watcher
  3333                           
  3334                           ;threshold_src.c: 7:     write_char('W');
  3335  17E9  3057               	movlw	87
  3336  17EA  160A  118A  2550  160A  118A  	fcall	_write_char
  3337                           
  3338                           ;threshold_src.c: 8:     write_char('A');
  3339  17EF  3041               	movlw	65
  3340  17F0  160A  118A  2550  160A  118A  	fcall	_write_char
  3341                           
  3342                           ;threshold_src.c: 9:     write_char('R');
  3343  17F5  3052               	movlw	82
  3344  17F6  160A  118A  2550  160A  118A  	fcall	_write_char
  3345                           
  3346                           ;threshold_src.c: 10:     write_char('M');
  3347  17FB  304D               	movlw	77
  3348  17FC  160A  118A  2550   	fcall	_write_char
  3349  17FF  0008               	return
  3350  1800                     __end_of_set_upper_threshold:	
  3351                           
  3352                           	psect	text5
  3353  0006                     __ptext5:	
  3354 ;; *************** function _set_lower_threshold *****************
  3355 ;; Defined at:
  3356 ;;		line 14 in file "threshold_src.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  upper_val       2    3[COMMON] int 
  3359 ;;  lower_val       2    5[COMMON] int 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 300/0
  3368 ;;		On exit  : 300/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3371 ;;      Params:         4       0       0       0       0
  3372 ;;      Locals:         0       0       0       0       0
  3373 ;;      Temps:          2       0       0       0       0
  3374 ;;      Totals:         6       0       0       0       0
  3375 ;;Total ram usage:        6 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    2
  3378 ;; This function calls:
  3379 ;;		_write_char
  3380 ;; This function is called by:
  3381 ;;		_main
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           
  3386                           ;psect for function _set_lower_threshold
  3387  0006                     _set_lower_threshold:	
  3388                           
  3389                           ;threshold_src.c: 15:     if((shi == upper_val && ge <= lower_val)|| ge == lower_val)
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3393  0006  085D               	movf	_shi,w
  3394  0007  00F7               	movwf	??_set_lower_threshold
  3395  0008  01F8               	clrf	??_set_lower_threshold+1
  3396  0009  0874               	movf	set_lower_threshold@upper_val+1,w
  3397  000A  0678               	xorwf	??_set_lower_threshold+1,w
  3398  000B  1D03               	skipz
  3399  000C  280F               	goto	u3685
  3400  000D  0873               	movf	set_lower_threshold@upper_val,w
  3401  000E  0677               	xorwf	??_set_lower_threshold,w
  3402  000F                     u3685:	
  3403  000F  1D03               	skipz
  3404  0010  281C               	goto	l4328
  3405  0011  0876               	movf	set_lower_threshold@lower_val+1,w
  3406  0012  3A80               	xorlw	128
  3407  0013  00F7               	movwf	??_set_lower_threshold
  3408  0014  3080               	movlw	128
  3409  0015  0277               	subwf	??_set_lower_threshold,w
  3410  0016  1D03               	skipz
  3411  0017  281A               	goto	u3695
  3412  0018  085C               	movf	_ge,w
  3413  0019  0275               	subwf	set_lower_threshold@lower_val,w
  3414  001A                     u3695:	
  3415  001A  1803               	skipnc
  3416  001B  2829               	goto	l4330
  3417  001C                     l4328:	
  3418  001C  1283               	bcf	3,5	;RP0=0, select bank0
  3419  001D  1303               	bcf	3,6	;RP1=0, select bank0
  3420  001E  085C               	movf	_ge,w
  3421  001F  00F7               	movwf	??_set_lower_threshold
  3422  0020  01F8               	clrf	??_set_lower_threshold+1
  3423  0021  0876               	movf	set_lower_threshold@lower_val+1,w
  3424  0022  0678               	xorwf	??_set_lower_threshold+1,w
  3425  0023  1D03               	skipz
  3426  0024  2827               	goto	u3705
  3427  0025  0875               	movf	set_lower_threshold@lower_val,w
  3428  0026  0677               	xorwf	??_set_lower_threshold,w
  3429  0027                     u3705:	
  3430  0027  1D03               	skipz
  3431  0028  0008               	return
  3432  0029                     l4330:	
  3433                           
  3434                           ;threshold_src.c: 16:     {;threshold_src.c: 17:     count = 2;
  3435  0029  3002               	movlw	2
  3436  002A  1283               	bcf	3,5	;RP0=0, select bank0
  3437  002B  1303               	bcf	3,6	;RP1=0, select bank0
  3438  002C  00AD               	movwf	_count
  3439  002D  3000               	movlw	0
  3440  002E  00AE               	movwf	_count+1
  3441                           
  3442                           ;threshold_src.c: 18:     buzzer_watcher = 'x';
  3443  002F  3078               	movlw	120
  3444  0030  00F7               	movwf	??_set_lower_threshold
  3445  0031  0877               	movf	??_set_lower_threshold,w
  3446  0032  00CB               	movwf	_buzzer_watcher
  3447                           
  3448                           ;threshold_src.c: 19:     write_char('O');
  3449  0033  304F               	movlw	79
  3450  0034  160A  118A  2550  120A  118A  	fcall	_write_char
  3451                           
  3452                           ;threshold_src.c: 20:     write_char('K');
  3453  0039  304B               	movlw	75
  3454  003A  160A  118A  2550  120A  118A  	fcall	_write_char
  3455                           
  3456                           ;threshold_src.c: 21:     write_char(' ');
  3457  003F  3020               	movlw	32
  3458  0040  160A  118A  2550  120A  118A  	fcall	_write_char
  3459                           
  3460                           ;threshold_src.c: 22:     write_char(' ');
  3461  0045  3020               	movlw	32
  3462  0046  160A  118A  2550   	fcall	_write_char
  3463  0049  0008               	return
  3464  004A                     __end_of_set_lower_threshold:	
  3465                           
  3466                           	psect	text6
  3467  0801                     __ptext6:	
  3468 ;; *************** function _set_beep_threshhold *****************
  3469 ;; Defined at:
  3470 ;;		line 5 in file "buzzer_src.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  x               1    wreg     unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  x               1    2[COMMON] unsigned char 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 300/0
  3481 ;;		On exit  : 300/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3484 ;;      Params:         0       0       0       0       0
  3485 ;;      Locals:         1       0       0       0       0
  3486 ;;      Temps:          0       0       0       0       0
  3487 ;;      Totals:         1       0       0       0       0
  3488 ;;Total ram usage:        1 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    1
  3491 ;; This function calls:
  3492 ;;		_button_delay
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           
  3499                           ;psect for function _set_beep_threshhold
  3500  0801                     _set_beep_threshhold:	
  3501                           
  3502                           ;incstack = 0
  3503                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3504                           ;set_beep_threshhold@x stored from wreg
  3505  0801  00F2               	movwf	set_beep_threshhold@x
  3506                           
  3507                           ;buzzer_src.c: 6:     if (x == 'w'){
  3508  0802  3077               	movlw	119
  3509  0803  0672               	xorwf	set_beep_threshhold@x,w
  3510  0804  1D03               	btfss	3,2
  3511  0805  281A               	goto	l4366
  3512                           
  3513                           ;buzzer_src.c: 7:         RE2 = 1;
  3514  0806  1509               	bsf	9,2	;volatile
  3515                           
  3516                           ;buzzer_src.c: 8:         button_delay();
  3517  0807  160A  118A  24FE  120A  158A  	fcall	_button_delay
  3518                           
  3519                           ;buzzer_src.c: 9:         RE2 = 0;
  3520  080C  1283               	bcf	3,5	;RP0=0, select bank0
  3521  080D  1303               	bcf	3,6	;RP1=0, select bank0
  3522  080E  1109               	bcf	9,2	;volatile
  3523                           
  3524                           ;buzzer_src.c: 10:         button_delay();
  3525  080F  160A  118A  24FE  120A  158A  	fcall	_button_delay
  3526                           
  3527                           ;buzzer_src.c: 11:         RE2 = 1;
  3528  0814  1283               	bcf	3,5	;RP0=0, select bank0
  3529  0815  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0816  1509               	bsf	9,2	;volatile
  3531                           
  3532                           ;buzzer_src.c: 12:         button_delay();
  3533  0817  160A  118A  24FE   	fcall	_button_delay
  3534  081A                     l4366:	
  3535                           
  3536                           ;buzzer_src.c: 13:         RE2 = 0;
  3537  081A  1283               	bcf	3,5	;RP0=0, select bank0
  3538  081B  1303               	bcf	3,6	;RP1=0, select bank0
  3539  081C  1109               	bcf	9,2	;volatile
  3540  081D  0008               	return
  3541  081E                     __end_of_set_beep_threshhold:	
  3542                           
  3543                           	psect	text7
  3544  14A4                     __ptext7:	
  3545 ;; *************** function _reset_alarm *****************
  3546 ;; Defined at:
  3547 ;;		line 26 in file "threshold_src.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2
  3556 ;; Tracked objects:
  3557 ;;		On entry : 300/0
  3558 ;;		On exit  : 300/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3561 ;;      Params:         0       0       0       0       0
  3562 ;;      Locals:         0       0       0       0       0
  3563 ;;      Temps:          1       0       0       0       0
  3564 ;;      Totals:         1       0       0       0       0
  3565 ;;Total ram usage:        1 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_main
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function _reset_alarm
  3576  14A4                     _reset_alarm:	
  3577                           
  3578                           ;threshold_src.c: 27:     RC0 = 1;
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in _reset_alarm: [wreg+status,2]
  3582  14A4  1407               	bsf	7,0	;volatile
  3583                           
  3584                           ;threshold_src.c: 28:     RC1 = 1;
  3585  14A5  1487               	bsf	7,1	;volatile
  3586                           
  3587                           ;threshold_src.c: 29:     RC2 = 1;
  3588  14A6  1507               	bsf	7,2	;volatile
  3589                           
  3590                           ;threshold_src.c: 30:     RC3 = 0;
  3591  14A7  1187               	bcf	7,3	;volatile
  3592                           
  3593                           ;threshold_src.c: 31:     if(RC4 == 0){
  3594  14A8  1A07               	btfsc	7,4	;volatile
  3595  14A9  0008               	return
  3596                           
  3597                           ;threshold_src.c: 32:         count = 0;
  3598  14AA  01AD               	clrf	_count
  3599  14AB  01AE               	clrf	_count+1
  3600                           
  3601                           ;threshold_src.c: 33:         buzzer_watcher = 'x';
  3602  14AC  3078               	movlw	120
  3603  14AD  00F0               	movwf	??_reset_alarm
  3604  14AE  0870               	movf	??_reset_alarm,w
  3605  14AF  00CB               	movwf	_buzzer_watcher
  3606  14B0  0008               	return
  3607  14B1                     __end_of_reset_alarm:	
  3608                           
  3609                           	psect	text8
  3610  15E3                     __ptext8:	
  3611 ;; *************** function _lcd_init *****************
  3612 ;; Defined at:
  3613 ;;		line 14 in file "LCD_src.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  i               2    0        int 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 300/100
  3624 ;;		On exit  : 300/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3627 ;;      Params:         0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    2
  3634 ;; This function calls:
  3635 ;;		_delay_screen
  3636 ;;		_write_cmd
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _lcd_init
  3644  15E3                     _lcd_init:	
  3645                           
  3646                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3650  15E3  0185               	clrf	5	;volatile
  3651                           
  3652                           ;LCD_src.c: 18:  RA0=0;
  3653  15E4  1283               	bcf	3,5	;RP0=0, select bank0
  3654  15E5  1005               	bcf	5,0	;volatile
  3655                           
  3656                           ;LCD_src.c: 19:  delay_screen();
  3657  15E6  160A  118A  2512  160A  118A  	fcall	_delay_screen
  3658                           
  3659                           ;LCD_src.c: 20:  RA0=1;
  3660  15EB  1283               	bcf	3,5	;RP0=0, select bank0
  3661  15EC  1303               	bcf	3,6	;RP1=0, select bank0
  3662  15ED  1405               	bsf	5,0	;volatile
  3663                           
  3664                           ;LCD_src.c: 21:  RA2=1;
  3665  15EE  1505               	bsf	5,2	;volatile
  3666                           
  3667                           ;LCD_src.c: 22:  write_cmd(0x30);
  3668  15EF  3030               	movlw	48
  3669  15F0  160A  118A  2567  160A  118A  	fcall	_write_cmd
  3670                           
  3671                           ;LCD_src.c: 23:  write_cmd(0x01);
  3672  15F5  3001               	movlw	1
  3673  15F6  160A  118A  2567  160A  118A  	fcall	_write_cmd
  3674                           
  3675                           ;LCD_src.c: 24:  write_cmd(0x06);
  3676  15FB  3006               	movlw	6
  3677  15FC  160A  118A  2567  160A  118A  	fcall	_write_cmd
  3678                           
  3679                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3680  1601  300C               	movlw	12
  3681  1602  160A  118A  2567   	fcall	_write_cmd
  3682  1605  0008               	return
  3683  1606                     __end_of_lcd_init:	
  3684                           
  3685                           	psect	text9
  3686  153A                     __ptext9:	
  3687 ;; *************** function _initialise_buttons *****************
  3688 ;; Defined at:
  3689 ;;		line 11 in file "Button_src.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;		None
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;		None
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  1    wreg      void 
  3696 ;; Registers used:
  3697 ;;		wreg, status,2
  3698 ;; Tracked objects:
  3699 ;;		On entry : 300/0
  3700 ;;		On exit  : 300/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3703 ;;      Params:         0       0       0       0       0
  3704 ;;      Locals:         0       0       0       0       0
  3705 ;;      Temps:          0       0       0       0       0
  3706 ;;      Totals:         0       0       0       0       0
  3707 ;;Total ram usage:        0 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_main
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _initialise_buttons
  3718  153A                     _initialise_buttons:	
  3719                           
  3720                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3724  153A  3006               	movlw	6
  3725  153B  1683               	bsf	3,5	;RP0=1, select bank1
  3726  153C  009F               	movwf	31	;volatile
  3727                           
  3728                           ;Button_src.c: 13:     TRISC = 0xf0;
  3729  153D  30F0               	movlw	240
  3730  153E  0087               	movwf	7	;volatile
  3731                           
  3732                           ;Button_src.c: 14:     a = 0x00;
  3733  153F  1283               	bcf	3,5	;RP0=0, select bank0
  3734  1540  01D7               	clrf	_a
  3735                           
  3736                           ;Button_src.c: 15:     b = 0x00;
  3737  1541  01D6               	clrf	_b
  3738                           
  3739                           ;Button_src.c: 16:     c = 0x00;
  3740  1542  01D5               	clrf	_c
  3741                           
  3742                           ;Button_src.c: 17:     z = 0;
  3743  1543  01BB               	clrf	_z
  3744  1544  01BC               	clrf	_z+1
  3745                           
  3746                           ;Button_src.c: 18:     day_low = 12;
  3747  1545  300C               	movlw	12
  3748  1546  00B9               	movwf	_day_low
  3749  1547  3000               	movlw	0
  3750  1548  00BA               	movwf	_day_low+1
  3751                           
  3752                           ;Button_src.c: 19:     stats = 1;
  3753  1549  3001               	movlw	1
  3754  154A  00B3               	movwf	_stats
  3755  154B  3000               	movlw	0
  3756  154C  00B4               	movwf	_stats+1
  3757                           
  3758                           ;Button_src.c: 20:     p = 0;
  3759  154D  01AF               	clrf	_p
  3760  154E  01B0               	clrf	_p+1
  3761  154F  0008               	return
  3762  1550                     __end_of_initialise_buttons:	
  3763                           
  3764                           	psect	text10
  3765  1487                     __ptext10:	
  3766 ;; *************** function _init_temp *****************
  3767 ;; Defined at:
  3768 ;;		line 6 in file "Thermometer_src.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		status,2
  3777 ;; Tracked objects:
  3778 ;;		On entry : 200/100
  3779 ;;		On exit  : 300/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0
  3785 ;;      Totals:         0       0       0       0       0
  3786 ;;Total ram usage:        0 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		_main
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           
  3796                           ;psect for function _init_temp
  3797  1487                     _init_temp:	
  3798                           
  3799                           ;Thermometer_src.c: 8:     TRISE=0X00;
  3800                           
  3801                           ;incstack = 0
  3802                           ; Regs used in _init_temp: [status,2]
  3803  1487  1683               	bsf	3,5	;RP0=1, select bank1
  3804  1488  0189               	clrf	9	;volatile
  3805                           
  3806                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  3807  1489  1283               	bcf	3,5	;RP0=0, select bank0
  3808  148A  0189               	clrf	9	;volatile
  3809  148B  0008               	return
  3810  148C                     __end_of_init_temp:	
  3811                           
  3812                           	psect	text11
  3813  148C                     __ptext11:	
  3814 ;; *************** function _init *****************
  3815 ;; Defined at:
  3816 ;;		line 5 in file "LCD_src.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		wreg, status,2
  3825 ;; Tracked objects:
  3826 ;;		On entry : 300/0
  3827 ;;		On exit  : 300/100
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3830 ;;      Params:         0       0       0       0       0
  3831 ;;      Locals:         0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0
  3833 ;;      Totals:         0       0       0       0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_main
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           
  3844                           ;psect for function _init
  3845  148C                     _init:	
  3846                           
  3847                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  3848                           
  3849                           ;incstack = 0
  3850                           ; Regs used in _init: [wreg+status,2]
  3851  148C  3007               	movlw	7
  3852  148D  1683               	bsf	3,5	;RP0=1, select bank1
  3853  148E  009F               	movwf	31	;volatile
  3854                           
  3855                           ;LCD_src.c: 8:  TRISA0=1;
  3856  148F  1405               	bsf	5,0	;volatile
  3857                           
  3858                           ;LCD_src.c: 9:  TRISD=0X00;
  3859  1490  0188               	clrf	8	;volatile
  3860                           
  3861                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  3862  1491  0181               	clrf	1	;volatile
  3863                           
  3864                           ;LCD_src.c: 11:  TRISE = 0X00;
  3865  1492  0189               	clrf	9	;volatile
  3866  1493  0008               	return
  3867  1494                     __end_of_init:	
  3868                           
  3869                           	psect	text12
  3870  169C                     __ptext12:	
  3871 ;; *************** function _get_time *****************
  3872 ;; Defined at:
  3873 ;;		line 26 in file "clock_src.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  i               2    6[COMMON] int 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 300/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3887 ;;      Params:         0       0       0       0       0
  3888 ;;      Locals:         2       0       0       0       0
  3889 ;;      Temps:          1       0       0       0       0
  3890 ;;      Totals:         3       0       0       0       0
  3891 ;;Total ram usage:        3 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    1
  3894 ;; This function calls:
  3895 ;;		_time_read_1
  3896 ;;		_time_write_1
  3897 ;; This function is called by:
  3898 ;;		_main
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _get_time
  3904  169C                     _get_time:	
  3905                           
  3906                           ;clock_src.c: 28:    int i;;clock_src.c: 29:    RB5=1;
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3910  169C  1283               	bcf	3,5	;RP0=0, select bank0
  3911  169D  1303               	bcf	3,6	;RP1=0, select bank0
  3912  169E  1686               	bsf	6,5	;volatile
  3913                           
  3914                           ;clock_src.c: 30:    time_write_1(0xbf);
  3915  169F  30BF               	movlw	191
  3916  16A0  160A  118A  264E  160A  118A  	fcall	_time_write_1
  3917                           
  3918                           ;clock_src.c: 31:    for(i=0;i<7;i++)
  3919  16A5  01F6               	clrf	get_time@i
  3920  16A6  01F7               	clrf	get_time@i+1
  3921  16A7                     l3646:	
  3922                           
  3923                           ;clock_src.c: 32:      {;clock_src.c: 33:         table1[i]=time_read_1();
  3924  16A7  160A  118A  26C8  160A  118A  	fcall	_time_read_1
  3925  16AC  00F5               	movwf	??_get_time
  3926  16AD  0876               	movf	get_time@i,w
  3927  16AE  3E20               	addlw	(low (_table1| 0))& (0+255)
  3928  16AF  0084               	movwf	4
  3929  16B0  0875               	movf	??_get_time,w
  3930  16B1  1383               	bcf	3,7	;select IRP bank0
  3931  16B2  0080               	movwf	0
  3932                           
  3933                           ;clock_src.c: 34:      }
  3934  16B3  3001               	movlw	1
  3935  16B4  07F6               	addwf	get_time@i,f
  3936  16B5  1803               	skipnc
  3937  16B6  0AF7               	incf	get_time@i+1,f
  3938  16B7  3000               	movlw	0
  3939  16B8  07F7               	addwf	get_time@i+1,f
  3940  16B9  0877               	movf	get_time@i+1,w
  3941  16BA  3A80               	xorlw	128
  3942  16BB  00FF               	movwf	127
  3943  16BC  3080               	movlw	128
  3944  16BD  027F               	subwf	127,w
  3945  16BE  1D03               	skipz
  3946  16BF  2EC2               	goto	u2995
  3947  16C0  3007               	movlw	7
  3948  16C1  0276               	subwf	get_time@i,w
  3949  16C2                     u2995:	
  3950  16C2  1C03               	skipc
  3951  16C3  2EA7               	goto	l3646
  3952                           
  3953                           ;clock_src.c: 35:    RB5=0;
  3954  16C4  1283               	bcf	3,5	;RP0=0, select bank0
  3955  16C5  1303               	bcf	3,6	;RP1=0, select bank0
  3956  16C6  1286               	bcf	6,5	;volatile
  3957  16C7  0008               	return
  3958  16C8                     __end_of_get_time:	
  3959                           
  3960                           	psect	text13
  3961  16C8                     __ptext13:	
  3962 ;; *************** function _time_read_1 *****************
  3963 ;; Defined at:
  3964 ;;		line 132 in file "clock_src.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;		None
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  j               2    2[COMMON] int 
  3969 ;;  time_rx         1    4[COMMON] unsigned char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      unsigned char 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0, btemp+1
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 300/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3979 ;;      Params:         0       0       0       0       0
  3980 ;;      Locals:         3       0       0       0       0
  3981 ;;      Temps:          2       0       0       0       0
  3982 ;;      Totals:         5       0       0       0       0
  3983 ;;Total ram usage:        5 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; This function calls:
  3986 ;;		Nothing
  3987 ;; This function is called by:
  3988 ;;		_get_time
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           
  3993                           ;psect for function _time_read_1
  3994  16C8                     _time_read_1:	
  3995                           
  3996                           ;clock_src.c: 134:    unsigned char time_rx=0;
  3997                           
  3998                           ;incstack = 0
  3999                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4000  16C8  01F4               	clrf	time_read_1@time_rx
  4001                           
  4002                           ;clock_src.c: 135:    int j;;clock_src.c: 136:    TRISB4=1;
  4003  16C9  1683               	bsf	3,5	;RP0=1, select bank1
  4004  16CA  1303               	bcf	3,6	;RP1=0, select bank1
  4005  16CB  1606               	bsf	6,4	;volatile
  4006                           
  4007                           ;clock_src.c: 137:    for(j=0;j<8;j++)
  4008  16CC  01F2               	clrf	time_read_1@j
  4009  16CD  01F3               	clrf	time_read_1@j+1
  4010  16CE                     l380:	
  4011                           
  4012                           ;clock_src.c: 138:       {;clock_src.c: 139:         RB0=0;
  4013  16CE  1283               	bcf	3,5	;RP0=0, select bank0
  4014  16CF  1303               	bcf	3,6	;RP1=0, select bank0
  4015  16D0  1006               	bcf	6,0	;volatile
  4016                           
  4017                           ;clock_src.c: 140:         time_rx=time_rx>>1;
  4018  16D1  0874               	movf	time_read_1@time_rx,w
  4019  16D2  00F0               	movwf	??_time_read_1
  4020  16D3  1003               	clrc
  4021  16D4  0C70               	rrf	??_time_read_1,w
  4022  16D5  00F1               	movwf	??_time_read_1+1
  4023  16D6  0871               	movf	??_time_read_1+1,w
  4024  16D7  00F4               	movwf	time_read_1@time_rx
  4025                           
  4026                           ;clock_src.c: 141:         if(RB4)time_rx=time_rx|0x80;
  4027  16D8  1E06               	btfss	6,4	;volatile
  4028  16D9  2EDF               	goto	l3232
  4029  16DA  0874               	movf	time_read_1@time_rx,w
  4030  16DB  3880               	iorlw	128
  4031  16DC  00F0               	movwf	??_time_read_1
  4032  16DD  0870               	movf	??_time_read_1,w
  4033  16DE  00F4               	movwf	time_read_1@time_rx
  4034  16DF                     l3232:	
  4035                           
  4036                           ;clock_src.c: 143:        RB0=1;
  4037  16DF  1406               	bsf	6,0	;volatile
  4038                           
  4039                           ;clock_src.c: 144:       }
  4040  16E0  3001               	movlw	1
  4041  16E1  07F2               	addwf	time_read_1@j,f
  4042  16E2  1803               	skipnc
  4043  16E3  0AF3               	incf	time_read_1@j+1,f
  4044  16E4  3000               	movlw	0
  4045  16E5  07F3               	addwf	time_read_1@j+1,f
  4046  16E6  0873               	movf	time_read_1@j+1,w
  4047  16E7  3A80               	xorlw	128
  4048  16E8  00FF               	movwf	127
  4049  16E9  3080               	movlw	128
  4050  16EA  027F               	subwf	127,w
  4051  16EB  1D03               	skipz
  4052  16EC  2EEF               	goto	u2165
  4053  16ED  3008               	movlw	8
  4054  16EE  0272               	subwf	time_read_1@j,w
  4055  16EF                     u2165:	
  4056  16EF  1C03               	skipc
  4057  16F0  2ECE               	goto	l380
  4058                           
  4059                           ;clock_src.c: 145:     TRISB4=0;
  4060  16F1  1683               	bsf	3,5	;RP0=1, select bank1
  4061  16F2  1303               	bcf	3,6	;RP1=0, select bank1
  4062  16F3  1206               	bcf	6,4	;volatile
  4063                           
  4064                           ;clock_src.c: 146:     RB0=0;
  4065  16F4  1283               	bcf	3,5	;RP0=0, select bank0
  4066  16F5  1006               	bcf	6,0	;volatile
  4067                           
  4068                           ;clock_src.c: 147:     return(time_rx);
  4069  16F6  0874               	movf	time_read_1@time_rx,w
  4070  16F7  0008               	return
  4071  16F8                     __end_of_time_read_1:	
  4072                           
  4073                           	psect	text14
  4074  0A29                     __ptext14:	
  4075 ;; *************** function _get_temp *****************
  4076 ;; Defined at:
  4077 ;;		line 89 in file "Thermometer_src.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  i               2    0        int 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 300/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4091 ;;      Params:         0       0       0       0       0
  4092 ;;      Locals:         0       0       0       0       0
  4093 ;;      Temps:          0       4       0       0       0
  4094 ;;      Totals:         0       4       0       0       0
  4095 ;;Total ram usage:        4 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    2
  4098 ;; This function calls:
  4099 ;;		___lbdiv
  4100 ;;		___lbmod
  4101 ;;		___lwdiv
  4102 ;;		___lwmod
  4103 ;;		_delay2
  4104 ;;		_read_byte
  4105 ;;		_reset_temp
  4106 ;;		_write_byte
  4107 ;; This function is called by:
  4108 ;;		_main
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           
  4113                           ;psect for function _get_temp
  4114  0A29                     _get_temp:	
  4115                           
  4116                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4117                           
  4118                           ;incstack = 0
  4119                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4120  0A29  1683               	bsf	3,5	;RP0=1, select bank1
  4121  0A2A  1409               	bsf	9,0	;volatile
  4122                           
  4123                           ;Thermometer_src.c: 93: reset_temp();
  4124  0A2B  160A  118A  275E  120A  158A  	fcall	_reset_temp
  4125                           
  4126                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4127  0A30  30CC               	movlw	204
  4128  0A31  160A  118A  2792  120A  158A  	fcall	_write_byte
  4129                           
  4130                           ;Thermometer_src.c: 95: delay2();
  4131  0A36  160A  118A  2526  120A  158A  	fcall	_delay2
  4132                           
  4133                           ;Thermometer_src.c: 96: write_byte(0X44);
  4134  0A3B  3044               	movlw	68
  4135  0A3C  160A  118A  2792  120A  158A  	fcall	_write_byte
  4136                           
  4137                           ;Thermometer_src.c: 98: reset_temp();
  4138  0A41  160A  118A  275E  120A  158A  	fcall	_reset_temp
  4139                           
  4140                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4141  0A46  30CC               	movlw	204
  4142  0A47  160A  118A  2792  120A  158A  	fcall	_write_byte
  4143                           
  4144                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4145  0A4C  30BE               	movlw	190
  4146  0A4D  160A  118A  2792  120A  158A  	fcall	_write_byte
  4147                           
  4148                           ;Thermometer_src.c: 101: TLV=read_byte();
  4149  0A52  160A  118A  272A  120A  158A  	fcall	_read_byte
  4150  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  4151  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  4152  0A59  00E2               	movwf	??_get_temp
  4153  0A5A  0862               	movf	??_get_temp,w
  4154  0A5B  00E1               	movwf	_TLV
  4155                           
  4156                           ;Thermometer_src.c: 102: THV=read_byte();
  4157  0A5C  160A  118A  272A  120A  158A  	fcall	_read_byte
  4158  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  4159  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  4160  0A63  00E2               	movwf	??_get_temp
  4161  0A64  0862               	movf	??_get_temp,w
  4162  0A65  00E0               	movwf	_THV
  4163                           
  4164                           ;Thermometer_src.c: 103: TRISE0 =1;
  4165  0A66  1683               	bsf	3,5	;RP0=1, select bank1
  4166  0A67  1409               	bsf	9,0	;volatile
  4167                           
  4168                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4169  0A68  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0A69  0860               	movf	_THV,w
  4171  0A6A  00E2               	movwf	??_get_temp
  4172  0A6B  3004               	movlw	4
  4173  0A6C                     u2925:	
  4174  0A6C  1003               	clrc
  4175  0A6D  0DE2               	rlf	??_get_temp,f
  4176  0A6E  3EFF               	addlw	-1
  4177  0A6F  1D03               	skipz
  4178  0A70  2A6C               	goto	u2925
  4179  0A71  303F               	movlw	63
  4180  0A72  0562               	andwf	??_get_temp,w
  4181  0A73  00E3               	movwf	??_get_temp+1
  4182  0A74  0861               	movf	_TLV,w
  4183  0A75  00E4               	movwf	??_get_temp+2
  4184  0A76  3004               	movlw	4
  4185  0A77                     u2935:	
  4186  0A77  1003               	clrc
  4187  0A78  0CE4               	rrf	??_get_temp+2,f
  4188  0A79  3EFF               	addlw	-1
  4189  0A7A  1D03               	skipz
  4190  0A7B  2A77               	goto	u2935
  4191  0A7C  0864               	movf	??_get_temp+2,w
  4192  0A7D  0463               	iorwf	??_get_temp+1,w
  4193  0A7E  00E5               	movwf	??_get_temp+3
  4194  0A7F  0865               	movf	??_get_temp+3,w
  4195  0A80  00DF               	movwf	_TZ
  4196                           
  4197                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4198  0A81  0861               	movf	_TLV,w
  4199  0A82  00E2               	movwf	??_get_temp
  4200  0A83  3003               	movlw	3
  4201  0A84                     u2945:	
  4202  0A84  1003               	clrc
  4203  0A85  0DE2               	rlf	??_get_temp,f
  4204  0A86  3EFF               	addlw	-1
  4205  0A87  1D03               	skipz
  4206  0A88  2A84               	goto	u2945
  4207  0A89  1003               	clrc
  4208  0A8A  0D62               	rlf	??_get_temp,w
  4209  0A8B  00E3               	movwf	??_get_temp+1
  4210  0A8C  0863               	movf	??_get_temp+1,w
  4211  0A8D  00DE               	movwf	_TX
  4212                           
  4213                           ;Thermometer_src.c: 107: ge=TZ%10;
  4214  0A8E  300A               	movlw	10
  4215  0A8F  00E2               	movwf	??_get_temp
  4216  0A90  0862               	movf	??_get_temp,w
  4217  0A91  00F0               	movwf	___lbmod@divisor
  4218  0A92  085F               	movf	_TZ,w
  4219  0A93  160A  118A  25C0  120A  158A  	fcall	___lbmod
  4220  0A98  00E3               	movwf	??_get_temp+1
  4221  0A99  0863               	movf	??_get_temp+1,w
  4222  0A9A  00DC               	movwf	_ge
  4223                           
  4224                           ;Thermometer_src.c: 108: shi=TZ/10;
  4225  0A9B  300A               	movlw	10
  4226  0A9C  00E2               	movwf	??_get_temp
  4227  0A9D  0862               	movf	??_get_temp,w
  4228  0A9E  00F0               	movwf	___lbdiv@divisor
  4229  0A9F  085F               	movf	_TZ,w
  4230  0AA0  160A  118A  259F  120A  158A  	fcall	___lbdiv
  4231  0AA5  00E3               	movwf	??_get_temp+1
  4232  0AA6  0863               	movf	??_get_temp+1,w
  4233  0AA7  00DD               	movwf	_shi
  4234                           
  4235                           ;Thermometer_src.c: 109: wd=0;
  4236  0AA8  01C5               	clrf	_wd
  4237  0AA9  01C6               	clrf	_wd+1
  4238                           
  4239                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4240  0AAA  1FDE               	btfss	_TX,7
  4241  0AAB  2AB4               	goto	l3614
  4242  0AAC  0845               	movf	_wd,w
  4243  0AAD  3E88               	addlw	136
  4244  0AAE  00C5               	movwf	_wd
  4245  0AAF  0846               	movf	_wd+1,w
  4246  0AB0  1803               	skipnc
  4247  0AB1  3E01               	addlw	1
  4248  0AB2  3E13               	addlw	19
  4249  0AB3  00C6               	movwf	_wd+1
  4250  0AB4                     l3614:	
  4251                           
  4252                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4253  0AB4  1F5E               	btfss	_TX,6
  4254  0AB5  2ABE               	goto	l3618
  4255  0AB6  0845               	movf	_wd,w
  4256  0AB7  3EC4               	addlw	196
  4257  0AB8  00C5               	movwf	_wd
  4258  0AB9  0846               	movf	_wd+1,w
  4259  0ABA  1803               	skipnc
  4260  0ABB  3E01               	addlw	1
  4261  0ABC  3E09               	addlw	9
  4262  0ABD  00C6               	movwf	_wd+1
  4263  0ABE                     l3618:	
  4264                           
  4265                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4266  0ABE  1EDE               	btfss	_TX,5
  4267  0ABF  2AC8               	goto	l3622
  4268  0AC0  0845               	movf	_wd,w
  4269  0AC1  3EE2               	addlw	226
  4270  0AC2  00C5               	movwf	_wd
  4271  0AC3  0846               	movf	_wd+1,w
  4272  0AC4  1803               	skipnc
  4273  0AC5  3E01               	addlw	1
  4274  0AC6  3E04               	addlw	4
  4275  0AC7  00C6               	movwf	_wd+1
  4276  0AC8                     l3622:	
  4277                           
  4278                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4279  0AC8  1E5E               	btfss	_TX,4
  4280  0AC9  2AD2               	goto	l3626
  4281  0ACA  0845               	movf	_wd,w
  4282  0ACB  3E71               	addlw	113
  4283  0ACC  00C5               	movwf	_wd
  4284  0ACD  0846               	movf	_wd+1,w
  4285  0ACE  1803               	skipnc
  4286  0ACF  3E01               	addlw	1
  4287  0AD0  3E02               	addlw	2
  4288  0AD1  00C6               	movwf	_wd+1
  4289  0AD2                     l3626:	
  4290                           
  4291                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4292  0AD2  30E8               	movlw	232
  4293  0AD3  00F6               	movwf	___lwdiv@divisor
  4294  0AD4  3003               	movlw	3
  4295  0AD5  00F7               	movwf	___lwdiv@divisor+1
  4296  0AD6  0846               	movf	_wd+1,w
  4297  0AD7  00F9               	movwf	___lwdiv@dividend+1
  4298  0AD8  0845               	movf	_wd,w
  4299  0AD9  00F8               	movwf	___lwdiv@dividend
  4300  0ADA  120A  158A  201E  120A  158A  	fcall	___lwdiv
  4301  0ADF  0876               	movf	?___lwdiv,w
  4302  0AE0  00E2               	movwf	??_get_temp
  4303  0AE1  0862               	movf	??_get_temp,w
  4304  0AE2  00DB               	movwf	_shifen
  4305                           
  4306                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4307  0AE3  3064               	movlw	100
  4308  0AE4  00F6               	movwf	___lwdiv@divisor
  4309  0AE5  3000               	movlw	0
  4310  0AE6  00F7               	movwf	___lwdiv@divisor+1
  4311  0AE7  0846               	movf	_wd+1,w
  4312  0AE8  00F3               	movwf	___lwmod@dividend+1
  4313  0AE9  0845               	movf	_wd,w
  4314  0AEA  00F2               	movwf	___lwmod@dividend
  4315  0AEB  30E8               	movlw	232
  4316  0AEC  00F0               	movwf	___lwmod@divisor
  4317  0AED  3003               	movlw	3
  4318  0AEE  00F1               	movwf	___lwmod@divisor+1
  4319  0AEF  160A  118A  26F8  120A  158A  	fcall	___lwmod
  4320  0AF4  0871               	movf	?___lwmod+1,w
  4321  0AF5  00F9               	movwf	___lwdiv@dividend+1
  4322  0AF6  0870               	movf	?___lwmod,w
  4323  0AF7  00F8               	movwf	___lwdiv@dividend
  4324  0AF8  120A  158A  201E  120A  158A  	fcall	___lwdiv
  4325  0AFD  0876               	movf	?___lwdiv,w
  4326  0AFE  00E2               	movwf	??_get_temp
  4327  0AFF  0862               	movf	??_get_temp,w
  4328  0B00  00DA               	movwf	_baifen
  4329                           
  4330                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4331  0B01  300A               	movlw	10
  4332  0B02  00F6               	movwf	___lwdiv@divisor
  4333  0B03  3000               	movlw	0
  4334  0B04  00F7               	movwf	___lwdiv@divisor+1
  4335  0B05  0846               	movf	_wd+1,w
  4336  0B06  00F3               	movwf	___lwmod@dividend+1
  4337  0B07  0845               	movf	_wd,w
  4338  0B08  00F2               	movwf	___lwmod@dividend
  4339  0B09  3064               	movlw	100
  4340  0B0A  00F0               	movwf	___lwmod@divisor
  4341  0B0B  3000               	movlw	0
  4342  0B0C  00F1               	movwf	___lwmod@divisor+1
  4343  0B0D  160A  118A  26F8  120A  158A  	fcall	___lwmod
  4344  0B12  0871               	movf	?___lwmod+1,w
  4345  0B13  00F9               	movwf	___lwdiv@dividend+1
  4346  0B14  0870               	movf	?___lwmod,w
  4347  0B15  00F8               	movwf	___lwdiv@dividend
  4348  0B16  120A  158A  201E  120A  158A  	fcall	___lwdiv
  4349  0B1B  0876               	movf	?___lwdiv,w
  4350  0B1C  00E2               	movwf	??_get_temp
  4351  0B1D  0862               	movf	??_get_temp,w
  4352  0B1E  00D9               	movwf	_qianfen
  4353                           
  4354                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4355  0B1F  300A               	movlw	10
  4356  0B20  00F0               	movwf	___lwmod@divisor
  4357  0B21  3000               	movlw	0
  4358  0B22  00F1               	movwf	___lwmod@divisor+1
  4359  0B23  0846               	movf	_wd+1,w
  4360  0B24  00F3               	movwf	___lwmod@dividend+1
  4361  0B25  0845               	movf	_wd,w
  4362  0B26  00F2               	movwf	___lwmod@dividend
  4363  0B27  160A  118A  26F8   	fcall	___lwmod
  4364  0B2A  0870               	movf	?___lwmod,w
  4365  0B2B  00E2               	movwf	??_get_temp
  4366  0B2C  0862               	movf	??_get_temp,w
  4367  0B2D  00D8               	movwf	_wanfen
  4368                           
  4369                           ;Thermometer_src.c: 118: __nop();
  4370  0B2E  0000               	nop
  4371  0B2F  0008               	return
  4372  0B30                     __end_of_get_temp:	
  4373                           
  4374                           	psect	text15
  4375  1792                     __ptext15:	
  4376 ;; *************** function _write_byte *****************
  4377 ;; Defined at:
  4378 ;;		line 40 in file "Thermometer_src.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  val             1    wreg     unsigned char 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  val             1    7[COMMON] unsigned char 
  4383 ;;  i               1    8[COMMON] unsigned char 
  4384 ;;  temp            1    6[COMMON] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/100
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4394 ;;      Params:         0       0       0       0       0
  4395 ;;      Locals:         3       0       0       0       0
  4396 ;;      Temps:          2       0       0       0       0
  4397 ;;      Totals:         5       0       0       0       0
  4398 ;;Total ram usage:        5 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    1
  4401 ;; This function calls:
  4402 ;;		_delay_temp
  4403 ;; This function is called by:
  4404 ;;		_get_temp
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           
  4409                           ;psect for function _write_byte
  4410  1792                     _write_byte:	
  4411                           
  4412                           ;incstack = 0
  4413                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4414                           ;write_byte@val stored from wreg
  4415  1792  00F7               	movwf	write_byte@val
  4416                           
  4417                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4418  1793  3008               	movlw	8
  4419  1794  00F4               	movwf	??_write_byte
  4420  1795  0874               	movf	??_write_byte,w
  4421  1796  00F8               	movwf	write_byte@i
  4422  1797                     l3120:	
  4423                           
  4424                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4425  1797  0877               	movf	write_byte@val,w
  4426  1798  3901               	andlw	1
  4427  1799  00F4               	movwf	??_write_byte
  4428  179A  0874               	movf	??_write_byte,w
  4429  179B  00F6               	movwf	write_byte@temp
  4430                           
  4431                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4432  179C  1283               	bcf	3,5	;RP0=0, select bank0
  4433  179D  1303               	bcf	3,6	;RP1=0, select bank0
  4434  179E  1009               	bcf	9,0	;volatile
  4435  179F  1683               	bsf	3,5	;RP0=1, select bank1
  4436  17A0  1009               	bcf	9,0	;volatile
  4437                           
  4438                           ;Thermometer_src.c: 48:    __nop();
  4439  17A1  0000               	nop
  4440                           
  4441                           ;Thermometer_src.c: 49:    __nop();
  4442  17A2  0000               	nop
  4443                           
  4444                           ;Thermometer_src.c: 50:    __nop();
  4445  17A3  0000               	nop
  4446                           
  4447                           ;Thermometer_src.c: 51:    __nop();
  4448  17A4  0000               	nop
  4449                           
  4450                           ;Thermometer_src.c: 52:    __nop();
  4451  17A5  0000               	nop
  4452                           
  4453                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4454  17A6  0376               	decf	write_byte@temp,w
  4455  17A7  1D03               	btfss	3,2
  4456  17A8  2FAC               	goto	l3140
  4457  17A9  1683               	bsf	3,5	;RP0=1, select bank1
  4458  17AA  1303               	bcf	3,6	;RP1=0, select bank1
  4459  17AB  1409               	bsf	9,0	;volatile
  4460  17AC                     l3140:	
  4461                           
  4462                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4463  17AC  3007               	movlw	7
  4464  17AD  00F4               	movwf	??_write_byte
  4465  17AE  0874               	movf	??_write_byte,w
  4466  17AF  00F0               	movwf	delay_temp@y
  4467  17B0  3002               	movlw	2
  4468  17B1  160A  118A  24B1  160A  118A  	fcall	_delay_temp
  4469                           
  4470                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4471  17B6  1683               	bsf	3,5	;RP0=1, select bank1
  4472  17B7  1303               	bcf	3,6	;RP1=0, select bank1
  4473  17B8  1409               	bsf	9,0	;volatile
  4474                           
  4475                           ;Thermometer_src.c: 56:    __nop();
  4476  17B9  0000               	nop
  4477                           
  4478                           ;Thermometer_src.c: 57:    __nop();
  4479  17BA  0000               	nop
  4480                           
  4481                           ;Thermometer_src.c: 58:    val=val>>1;
  4482  17BB  0877               	movf	write_byte@val,w
  4483  17BC  00F4               	movwf	??_write_byte
  4484  17BD  1003               	clrc
  4485  17BE  0C74               	rrf	??_write_byte,w
  4486  17BF  00F5               	movwf	??_write_byte+1
  4487  17C0  0875               	movf	??_write_byte+1,w
  4488  17C1  00F7               	movwf	write_byte@val
  4489                           
  4490                           ;Thermometer_src.c: 59:   }
  4491  17C2  3001               	movlw	1
  4492  17C3  02F8               	subwf	write_byte@i,f
  4493  17C4  0878               	movf	write_byte@i,w
  4494  17C5  1903               	btfsc	3,2
  4495  17C6  0008               	return
  4496  17C7  2F97               	goto	l3120
  4497  17C8                     __end_of_write_byte:	
  4498                           
  4499                           	psect	text16
  4500  175E                     __ptext16:	
  4501 ;; *************** function _reset_temp *****************
  4502 ;; Defined at:
  4503 ;;		line 25 in file "Thermometer_src.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  presence        1    5[COMMON] unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, pclath, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/100
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4517 ;;      Params:         0       0       0       0       0
  4518 ;;      Locals:         1       0       0       0       0
  4519 ;;      Temps:          1       0       0       0       0
  4520 ;;      Totals:         2       0       0       0       0
  4521 ;;Total ram usage:        2 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    1
  4524 ;; This function calls:
  4525 ;;		_delay_temp
  4526 ;; This function is called by:
  4527 ;;		_get_temp
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           
  4532                           ;psect for function _reset_temp
  4533  175E                     _reset_temp:	
  4534                           
  4535                           ;Thermometer_src.c: 27:   char presence=1;
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4539  175E  01F5               	clrf	reset_temp@presence
  4540  175F  0AF5               	incf	reset_temp@presence,f
  4541  1760                     l3112:	
  4542                           ;Thermometer_src.c: 28:   while(presence)
  4543                           
  4544                           
  4545                           ;Thermometer_src.c: 28:   while(presence)
  4546  1760  0875               	movf	reset_temp@presence,w
  4547  1761  1903               	btfsc	3,2
  4548  1762  0008               	return
  4549                           
  4550                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4551  1763  1283               	bcf	3,5	;RP0=0, select bank0
  4552  1764  1303               	bcf	3,6	;RP1=0, select bank0
  4553  1765  1009               	bcf	9,0	;volatile
  4554  1766  1683               	bsf	3,5	;RP0=1, select bank1
  4555  1767  1009               	bcf	9,0	;volatile
  4556                           
  4557                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4558  1768  3046               	movlw	70
  4559  1769  00F4               	movwf	??_reset_temp
  4560  176A  0874               	movf	??_reset_temp,w
  4561  176B  00F0               	movwf	delay_temp@y
  4562  176C  3002               	movlw	2
  4563  176D  160A  118A  24B1  160A  118A  	fcall	_delay_temp
  4564                           
  4565                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4566  1772  1683               	bsf	3,5	;RP0=1, select bank1
  4567  1773  1303               	bcf	3,6	;RP1=0, select bank1
  4568  1774  1409               	bsf	9,0	;volatile
  4569                           
  4570                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4571  1775  3008               	movlw	8
  4572  1776  00F4               	movwf	??_reset_temp
  4573  1777  0874               	movf	??_reset_temp,w
  4574  1778  00F0               	movwf	delay_temp@y
  4575  1779  3002               	movlw	2
  4576  177A  160A  118A  24B1  160A  118A  	fcall	_delay_temp
  4577                           
  4578                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4579  177F  1283               	bcf	3,5	;RP0=0, select bank0
  4580  1780  1303               	bcf	3,6	;RP1=0, select bank0
  4581  1781  1C09               	btfss	9,0	;volatile
  4582  1782  2F86               	goto	l3108
  4583  1783  01F5               	clrf	reset_temp@presence
  4584  1784  0AF5               	incf	reset_temp@presence,f
  4585  1785  2F87               	goto	l3110
  4586  1786                     l3108:	
  4587  1786  01F5               	clrf	reset_temp@presence
  4588  1787                     l3110:	
  4589                           
  4590                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4591  1787  303C               	movlw	60
  4592  1788  00F4               	movwf	??_reset_temp
  4593  1789  0874               	movf	??_reset_temp,w
  4594  178A  00F0               	movwf	delay_temp@y
  4595  178B  3002               	movlw	2
  4596  178C  160A  118A  24B1  160A  118A  	fcall	_delay_temp
  4597  1791  2F60               	goto	l3112
  4598  1792                     __end_of_reset_temp:	
  4599                           
  4600                           	psect	text17
  4601  172A                     __ptext17:	
  4602 ;; *************** function _read_byte *****************
  4603 ;; Defined at:
  4604 ;;		line 62 in file "Thermometer_src.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;		None
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  i               1    6[COMMON] unsigned char 
  4609 ;;  value           1    5[COMMON] unsigned char 
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      unsigned char 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/100
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4619 ;;      Params:         0       0       0       0       0
  4620 ;;      Locals:         2       0       0       0       0
  4621 ;;      Temps:          1       0       0       0       0
  4622 ;;      Totals:         3       0       0       0       0
  4623 ;;Total ram usage:        3 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    1
  4626 ;; This function calls:
  4627 ;;		_delay_temp
  4628 ;; This function is called by:
  4629 ;;		_get_temp
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function _read_byte
  4635  172A                     _read_byte:	
  4636                           
  4637                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4638                           
  4639                           ;incstack = 0
  4640                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4641  172A  01F5               	clrf	read_byte@value
  4642                           
  4643                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4644  172B  3008               	movlw	8
  4645  172C  00F4               	movwf	??_read_byte
  4646  172D  0874               	movf	??_read_byte,w
  4647  172E  00F6               	movwf	read_byte@i
  4648  172F                     l3162:	
  4649                           
  4650                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4651  172F  1003               	clrc
  4652  1730  0CF5               	rrf	read_byte@value,f
  4653                           
  4654                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4655  1731  1283               	bcf	3,5	;RP0=0, select bank0
  4656  1732  1303               	bcf	3,6	;RP1=0, select bank0
  4657  1733  1009               	bcf	9,0	;volatile
  4658  1734  1683               	bsf	3,5	;RP0=1, select bank1
  4659  1735  1009               	bcf	9,0	;volatile
  4660                           
  4661                           ;Thermometer_src.c: 71:    __nop();
  4662  1736  0000               	nop
  4663                           
  4664                           ;Thermometer_src.c: 72:    __nop();
  4665  1737  0000               	nop
  4666                           
  4667                           ;Thermometer_src.c: 73:    __nop();
  4668  1738  0000               	nop
  4669                           
  4670                           ;Thermometer_src.c: 74:    __nop();
  4671  1739  0000               	nop
  4672                           
  4673                           ;Thermometer_src.c: 75:    __nop();
  4674  173A  0000               	nop
  4675                           
  4676                           ;Thermometer_src.c: 76:    __nop();
  4677  173B  0000               	nop
  4678                           
  4679                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4680  173C  1683               	bsf	3,5	;RP0=1, select bank1
  4681  173D  1303               	bcf	3,6	;RP1=0, select bank1
  4682  173E  1409               	bsf	9,0	;volatile
  4683                           
  4684                           ;Thermometer_src.c: 78:    __nop();
  4685  173F  0000               	nop
  4686                           
  4687                           ;Thermometer_src.c: 79:    __nop();
  4688  1740  0000               	nop
  4689                           
  4690                           ;Thermometer_src.c: 80:    __nop();
  4691  1741  0000               	nop
  4692                           
  4693                           ;Thermometer_src.c: 81:    __nop();
  4694  1742  0000               	nop
  4695                           
  4696                           ;Thermometer_src.c: 82:    __nop();
  4697  1743  0000               	nop
  4698                           
  4699                           ;Thermometer_src.c: 83:    j=RE0;
  4700  1744  3000               	movlw	0
  4701  1745  1283               	bcf	3,5	;RP0=0, select bank0
  4702  1746  1303               	bcf	3,6	;RP1=0, select bank0
  4703  1747  1809               	btfsc	9,0	;volatile
  4704  1748  3001               	movlw	1
  4705  1749  00C7               	movwf	read_byte@j
  4706                           
  4707                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4708  174A  0847               	movf	read_byte@j,w
  4709  174B  1D03               	btfss	3,2
  4710  174C  17F5               	bsf	read_byte@value,7
  4711                           
  4712                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4713  174D  3007               	movlw	7
  4714  174E  00F4               	movwf	??_read_byte
  4715  174F  0874               	movf	??_read_byte,w
  4716  1750  00F0               	movwf	delay_temp@y
  4717  1751  3002               	movlw	2
  4718  1752  160A  118A  24B1  160A  118A  	fcall	_delay_temp
  4719                           
  4720                           ;Thermometer_src.c: 86:   }
  4721  1757  3001               	movlw	1
  4722  1758  02F6               	subwf	read_byte@i,f
  4723  1759  0876               	movf	read_byte@i,w
  4724  175A  1D03               	btfss	3,2
  4725  175B  2F2F               	goto	l3162
  4726                           
  4727                           ;Thermometer_src.c: 87:   return(value);
  4728  175C  0875               	movf	read_byte@value,w
  4729  175D  0008               	return
  4730  175E                     __end_of_read_byte:	
  4731                           
  4732                           	psect	text18
  4733  14B1                     __ptext18:	
  4734 ;; *************** function _delay_temp *****************
  4735 ;; Defined at:
  4736 ;;		line 121 in file "Thermometer_src.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  x               1    wreg     unsigned char 
  4739 ;;  y               1    0[COMMON] unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  x               1    2[COMMON] unsigned char 
  4742 ;;  z               1    3[COMMON] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/100
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4752 ;;      Params:         1       0       0       0       0
  4753 ;;      Locals:         2       0       0       0       0
  4754 ;;      Temps:          1       0       0       0       0
  4755 ;;      Totals:         4       0       0       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_reset_temp
  4762 ;;		_write_byte
  4763 ;;		_read_byte
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _delay_temp
  4769  14B1                     _delay_temp:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  4773                           ;delay_temp@x stored from wreg
  4774  14B1  00F2               	movwf	delay_temp@x
  4775  14B2                     l321:	
  4776                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  4777                           
  4778                           
  4779                           ;Thermometer_src.c: 125:  z=y;
  4780  14B2  0870               	movf	delay_temp@y,w
  4781  14B3  00F1               	movwf	??_delay_temp
  4782  14B4  0871               	movf	??_delay_temp,w
  4783  14B5  00F3               	movwf	delay_temp@z
  4784  14B6                     l3038:	
  4785  14B6  3001               	movlw	1
  4786  14B7  02F3               	subwf	delay_temp@z,f
  4787  14B8  1D03               	btfss	3,2
  4788  14B9  2CB6               	goto	l3038
  4789                           
  4790                           ;Thermometer_src.c: 127:  }while(--x);
  4791  14BA  3001               	movlw	1
  4792  14BB  02F2               	subwf	delay_temp@x,f
  4793  14BC  1903               	btfsc	3,2
  4794  14BD  0008               	return
  4795  14BE  2CB2               	goto	l321
  4796  14BF                     __end_of_delay_temp:	
  4797                           
  4798                           	psect	text19
  4799  1526                     __ptext19:	
  4800 ;; *************** function _delay2 *****************
  4801 ;; Defined at:
  4802 ;;		line 130 in file "Thermometer_src.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  i               2    0[COMMON] int 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, btemp+1
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/100
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4816 ;;      Params:         0       0       0       0       0
  4817 ;;      Locals:         2       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0
  4819 ;;      Totals:         2       0       0       0       0
  4820 ;;Total ram usage:        2 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_get_temp
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _delay2
  4831  1526                     _delay2:	
  4832                           
  4833                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  4837  1526  01F0               	clrf	delay2@i
  4838  1527  01F1               	clrf	delay2@i+1
  4839  1528                     l3214:	
  4840                           
  4841                           ;Thermometer_src.c: 132:  }
  4842  1528  3001               	movlw	1
  4843  1529  07F0               	addwf	delay2@i,f
  4844  152A  1803               	skipnc
  4845  152B  0AF1               	incf	delay2@i+1,f
  4846  152C  3000               	movlw	0
  4847  152D  07F1               	addwf	delay2@i+1,f
  4848  152E  0871               	movf	delay2@i+1,w
  4849  152F  3A80               	xorlw	128
  4850  1530  00FF               	movwf	127
  4851  1531  3080               	movlw	128
  4852  1532  027F               	subwf	127,w
  4853  1533  1D03               	skipz
  4854  1534  2D37               	goto	u2145
  4855  1535  3032               	movlw	50
  4856  1536  0270               	subwf	delay2@i,w
  4857  1537                     u2145:	
  4858  1537  1803               	btfsc	3,0
  4859  1538  0008               	return
  4860  1539  2D28               	goto	l3214
  4861  153A                     __end_of_delay2:	
  4862                           
  4863                           	psect	text20
  4864  16F8                     __ptext20:	
  4865 ;; *************** function ___lwmod *****************
  4866 ;; Defined at:
  4867 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  divisor         2    0[COMMON] unsigned int 
  4870 ;;  dividend        2    2[COMMON] unsigned int 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  counter         1    5[COMMON] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  2    0[COMMON] unsigned int 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0
  4877 ;; Tracked objects:
  4878 ;;		On entry : 300/0
  4879 ;;		On exit  : 300/0
  4880 ;;		Unchanged: 300/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4882 ;;      Params:         4       0       0       0       0
  4883 ;;      Locals:         1       0       0       0       0
  4884 ;;      Temps:          1       0       0       0       0
  4885 ;;      Totals:         6       0       0       0       0
  4886 ;;Total ram usage:        6 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_get_temp
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function ___lwmod
  4897  16F8                     ___lwmod:	
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4901  16F8  0870               	movf	___lwmod@divisor,w
  4902  16F9  0471               	iorwf	___lwmod@divisor+1,w
  4903  16FA  1903               	btfsc	3,2
  4904  16FB  2F25               	goto	l3528
  4905  16FC  01F5               	clrf	___lwmod@counter
  4906  16FD  0AF5               	incf	___lwmod@counter,f
  4907  16FE                     l3518:	
  4908  16FE  1BF1               	btfsc	___lwmod@divisor+1,7
  4909  16FF  2F0C               	goto	l3520
  4910  1700  3001               	movlw	1
  4911  1701                     u2875:	
  4912  1701  1003               	clrc
  4913  1702  0DF0               	rlf	___lwmod@divisor,f
  4914  1703  0DF1               	rlf	___lwmod@divisor+1,f
  4915  1704  3EFF               	addlw	-1
  4916  1705  1D03               	skipz
  4917  1706  2F01               	goto	u2875
  4918  1707  3001               	movlw	1
  4919  1708  00F4               	movwf	??___lwmod
  4920  1709  0874               	movf	??___lwmod,w
  4921  170A  07F5               	addwf	___lwmod@counter,f
  4922  170B  2EFE               	goto	l3518
  4923  170C                     l3520:	
  4924  170C  0871               	movf	___lwmod@divisor+1,w
  4925  170D  0273               	subwf	___lwmod@dividend+1,w
  4926  170E  1D03               	skipz
  4927  170F  2F12               	goto	u2895
  4928  1710  0870               	movf	___lwmod@divisor,w
  4929  1711  0272               	subwf	___lwmod@dividend,w
  4930  1712                     u2895:	
  4931  1712  1C03               	skipc
  4932  1713  2F1A               	goto	l3524
  4933  1714  0870               	movf	___lwmod@divisor,w
  4934  1715  02F2               	subwf	___lwmod@dividend,f
  4935  1716  0871               	movf	___lwmod@divisor+1,w
  4936  1717  1C03               	skipc
  4937  1718  03F3               	decf	___lwmod@dividend+1,f
  4938  1719  02F3               	subwf	___lwmod@dividend+1,f
  4939  171A                     l3524:	
  4940  171A  3001               	movlw	1
  4941  171B                     u2905:	
  4942  171B  1003               	clrc
  4943  171C  0CF1               	rrf	___lwmod@divisor+1,f
  4944  171D  0CF0               	rrf	___lwmod@divisor,f
  4945  171E  3EFF               	addlw	-1
  4946  171F  1D03               	skipz
  4947  1720  2F1B               	goto	u2905
  4948  1721  3001               	movlw	1
  4949  1722  02F5               	subwf	___lwmod@counter,f
  4950  1723  1D03               	btfss	3,2
  4951  1724  2F0C               	goto	l3520
  4952  1725                     l3528:	
  4953  1725  0873               	movf	___lwmod@dividend+1,w
  4954  1726  00F1               	movwf	?___lwmod+1
  4955  1727  0872               	movf	___lwmod@dividend,w
  4956  1728  00F0               	movwf	?___lwmod
  4957  1729  0008               	return
  4958  172A                     __end_of___lwmod:	
  4959                           
  4960                           	psect	text21
  4961  081E                     __ptext21:	
  4962 ;; *************** function ___lwdiv *****************
  4963 ;; Defined at:
  4964 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  divisor         2    6[COMMON] unsigned int 
  4967 ;;  dividend        2    8[COMMON] unsigned int 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;  quotient        2   11[COMMON] unsigned int 
  4970 ;;  counter         1   13[COMMON] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  2    6[COMMON] unsigned int 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0
  4975 ;; Tracked objects:
  4976 ;;		On entry : 300/0
  4977 ;;		On exit  : 300/0
  4978 ;;		Unchanged: 300/0
  4979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4980 ;;      Params:         4       0       0       0       0
  4981 ;;      Locals:         3       0       0       0       0
  4982 ;;      Temps:          1       0       0       0       0
  4983 ;;      Totals:         8       0       0       0       0
  4984 ;;Total ram usage:        8 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_get_temp
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function ___lwdiv
  4995  081E                     ___lwdiv:	
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4999  081E  01FB               	clrf	___lwdiv@quotient
  5000  081F  01FC               	clrf	___lwdiv@quotient+1
  5001  0820  0876               	movf	___lwdiv@divisor,w
  5002  0821  0477               	iorwf	___lwdiv@divisor+1,w
  5003  0822  1903               	btfsc	3,2
  5004  0823  2855               	goto	l3506
  5005  0824  01FD               	clrf	___lwdiv@counter
  5006  0825  0AFD               	incf	___lwdiv@counter,f
  5007  0826                     l3494:	
  5008  0826  1BF7               	btfsc	___lwdiv@divisor+1,7
  5009  0827  2834               	goto	l3496
  5010  0828  3001               	movlw	1
  5011  0829                     u2805:	
  5012  0829  1003               	clrc
  5013  082A  0DF6               	rlf	___lwdiv@divisor,f
  5014  082B  0DF7               	rlf	___lwdiv@divisor+1,f
  5015  082C  3EFF               	addlw	-1
  5016  082D  1D03               	skipz
  5017  082E  2829               	goto	u2805
  5018  082F  3001               	movlw	1
  5019  0830  00FA               	movwf	??___lwdiv
  5020  0831  087A               	movf	??___lwdiv,w
  5021  0832  07FD               	addwf	___lwdiv@counter,f
  5022  0833  2826               	goto	l3494
  5023  0834                     l3496:	
  5024  0834  3001               	movlw	1
  5025  0835                     u2825:	
  5026  0835  1003               	clrc
  5027  0836  0DFB               	rlf	___lwdiv@quotient,f
  5028  0837  0DFC               	rlf	___lwdiv@quotient+1,f
  5029  0838  3EFF               	addlw	-1
  5030  0839  1D03               	skipz
  5031  083A  2835               	goto	u2825
  5032  083B  0877               	movf	___lwdiv@divisor+1,w
  5033  083C  0279               	subwf	___lwdiv@dividend+1,w
  5034  083D  1D03               	skipz
  5035  083E  2841               	goto	u2835
  5036  083F  0876               	movf	___lwdiv@divisor,w
  5037  0840  0278               	subwf	___lwdiv@dividend,w
  5038  0841                     u2835:	
  5039  0841  1C03               	skipc
  5040  0842  284A               	goto	l3502
  5041  0843  0876               	movf	___lwdiv@divisor,w
  5042  0844  02F8               	subwf	___lwdiv@dividend,f
  5043  0845  0877               	movf	___lwdiv@divisor+1,w
  5044  0846  1C03               	skipc
  5045  0847  03F9               	decf	___lwdiv@dividend+1,f
  5046  0848  02F9               	subwf	___lwdiv@dividend+1,f
  5047  0849  147B               	bsf	___lwdiv@quotient,0
  5048  084A                     l3502:	
  5049  084A  3001               	movlw	1
  5050  084B                     u2845:	
  5051  084B  1003               	clrc
  5052  084C  0CF7               	rrf	___lwdiv@divisor+1,f
  5053  084D  0CF6               	rrf	___lwdiv@divisor,f
  5054  084E  3EFF               	addlw	-1
  5055  084F  1D03               	skipz
  5056  0850  284B               	goto	u2845
  5057  0851  3001               	movlw	1
  5058  0852  02FD               	subwf	___lwdiv@counter,f
  5059  0853  1D03               	btfss	3,2
  5060  0854  2834               	goto	l3496
  5061  0855                     l3506:	
  5062  0855  087C               	movf	___lwdiv@quotient+1,w
  5063  0856  00F7               	movwf	?___lwdiv+1
  5064  0857  087B               	movf	___lwdiv@quotient,w
  5065  0858  00F6               	movwf	?___lwdiv
  5066  0859  0008               	return
  5067  085A                     __end_of___lwdiv:	
  5068                           
  5069                           	psect	text22
  5070  15C0                     __ptext22:	
  5071 ;; *************** function ___lbmod *****************
  5072 ;; Defined at:
  5073 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  dividend        1    wreg     unsigned char 
  5076 ;;  divisor         1    0[COMMON] unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  dividend        1    4[COMMON] unsigned char 
  5079 ;;  rem             1    6[COMMON] unsigned char 
  5080 ;;  counter         1    5[COMMON] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      unsigned char 
  5083 ;; Registers used:
  5084 ;;		wreg, status,2, status,0
  5085 ;; Tracked objects:
  5086 ;;		On entry : 300/0
  5087 ;;		On exit  : 300/0
  5088 ;;		Unchanged: 300/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5090 ;;      Params:         1       0       0       0       0
  5091 ;;      Locals:         3       0       0       0       0
  5092 ;;      Temps:          3       0       0       0       0
  5093 ;;      Totals:         7       0       0       0       0
  5094 ;;Total ram usage:        7 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_get_temp
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           
  5104                           ;psect for function ___lbmod
  5105  15C0                     ___lbmod:	
  5106                           
  5107                           ;incstack = 0
  5108                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5109                           ;___lbmod@dividend stored from wreg
  5110  15C0  00F4               	movwf	___lbmod@dividend
  5111  15C1  3008               	movlw	8
  5112  15C2  00F1               	movwf	??___lbmod
  5113  15C3  0871               	movf	??___lbmod,w
  5114  15C4  00F5               	movwf	___lbmod@counter
  5115  15C5  01F6               	clrf	___lbmod@rem
  5116  15C6                     l3472:	
  5117  15C6  0874               	movf	___lbmod@dividend,w
  5118  15C7  00F1               	movwf	??___lbmod
  5119  15C8  3007               	movlw	7
  5120  15C9                     u2765:	
  5121  15C9  1003               	clrc
  5122  15CA  0CF1               	rrf	??___lbmod,f
  5123  15CB  3EFF               	addlw	-1
  5124  15CC  1D03               	skipz
  5125  15CD  2DC9               	goto	u2765
  5126  15CE  0876               	movf	___lbmod@rem,w
  5127  15CF  00F2               	movwf	??___lbmod+1
  5128  15D0  0772               	addwf	??___lbmod+1,w
  5129  15D1  0471               	iorwf	??___lbmod,w
  5130  15D2  00F3               	movwf	??___lbmod+2
  5131  15D3  0873               	movf	??___lbmod+2,w
  5132  15D4  00F6               	movwf	___lbmod@rem
  5133  15D5  1003               	clrc
  5134  15D6  0DF4               	rlf	___lbmod@dividend,f
  5135  15D7  0870               	movf	___lbmod@divisor,w
  5136  15D8  0276               	subwf	___lbmod@rem,w
  5137  15D9  1C03               	skipc
  5138  15DA  2DDD               	goto	l1164
  5139  15DB  0870               	movf	___lbmod@divisor,w
  5140  15DC  02F6               	subwf	___lbmod@rem,f
  5141  15DD                     l1164:	
  5142  15DD  3001               	movlw	1
  5143  15DE  02F5               	subwf	___lbmod@counter,f
  5144  15DF  1D03               	btfss	3,2
  5145  15E0  2DC6               	goto	l3472
  5146  15E1  0876               	movf	___lbmod@rem,w
  5147  15E2  0008               	return
  5148  15E3                     __end_of___lbmod:	
  5149                           
  5150                           	psect	text23
  5151  159F                     __ptext23:	
  5152 ;; *************** function ___lbdiv *****************
  5153 ;; Defined at:
  5154 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  dividend        1    wreg     unsigned char 
  5157 ;;  divisor         1    0[COMMON] unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  dividend        1    2[COMMON] unsigned char 
  5160 ;;  quotient        1    4[COMMON] unsigned char 
  5161 ;;  counter         1    3[COMMON] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      unsigned char 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0
  5166 ;; Tracked objects:
  5167 ;;		On entry : 300/0
  5168 ;;		On exit  : 300/0
  5169 ;;		Unchanged: 300/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5171 ;;      Params:         1       0       0       0       0
  5172 ;;      Locals:         3       0       0       0       0
  5173 ;;      Temps:          1       0       0       0       0
  5174 ;;      Totals:         5       0       0       0       0
  5175 ;;Total ram usage:        5 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; This function calls:
  5178 ;;		Nothing
  5179 ;; This function is called by:
  5180 ;;		_get_temp
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function ___lbdiv
  5186  159F                     ___lbdiv:	
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5190                           ;___lbdiv@dividend stored from wreg
  5191  159F  00F2               	movwf	___lbdiv@dividend
  5192  15A0  01F4               	clrf	___lbdiv@quotient
  5193  15A1  0870               	movf	___lbdiv@divisor,w
  5194  15A2  1903               	btfsc	3,2
  5195  15A3  2DBE               	goto	l3464
  5196  15A4  01F3               	clrf	___lbdiv@counter
  5197  15A5  0AF3               	incf	___lbdiv@counter,f
  5198  15A6                     l3452:	
  5199  15A6  1BF0               	btfsc	___lbdiv@divisor,7
  5200  15A7  2DAF               	goto	l3454
  5201  15A8  1003               	clrc
  5202  15A9  0DF0               	rlf	___lbdiv@divisor,f
  5203  15AA  3001               	movlw	1
  5204  15AB  00F1               	movwf	??___lbdiv
  5205  15AC  0871               	movf	??___lbdiv,w
  5206  15AD  07F3               	addwf	___lbdiv@counter,f
  5207  15AE  2DA6               	goto	l3452
  5208  15AF                     l3454:	
  5209  15AF  1003               	clrc
  5210  15B0  0DF4               	rlf	___lbdiv@quotient,f
  5211  15B1  0870               	movf	___lbdiv@divisor,w
  5212  15B2  0272               	subwf	___lbdiv@dividend,w
  5213  15B3  1C03               	skipc
  5214  15B4  2DB9               	goto	L1
  5215  15B5  0870               	movf	___lbdiv@divisor,w
  5216  15B6  02F2               	subwf	___lbdiv@dividend,f
  5217  15B7  1474               	bsf	___lbdiv@quotient,0
  5218  15B8  1003               	clrc
  5219  15B9                     L1:	
  5220  15B9  0CF0               	rrf	___lbdiv@divisor,f
  5221  15BA  3001               	movlw	1
  5222  15BB  02F3               	subwf	___lbdiv@counter,f
  5223  15BC  1D03               	btfss	3,2
  5224  15BD  2DAF               	goto	l3454
  5225  15BE                     l3464:	
  5226  15BE  0874               	movf	___lbdiv@quotient,w
  5227  15BF  0008               	return
  5228  15C0                     __end_of___lbdiv:	
  5229                           
  5230                           	psect	text24
  5231  14CE                     __ptext24:	
  5232 ;; *************** function _ds1302_init *****************
  5233 ;; Defined at:
  5234 ;;		line 6 in file "clock_src.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 300/0
  5245 ;;		On exit  : 300/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5248 ;;      Params:         0       0       0       0       0
  5249 ;;      Locals:         0       0       0       0       0
  5250 ;;      Temps:          0       0       0       0       0
  5251 ;;      Totals:         0       0       0       0       0
  5252 ;;Total ram usage:        0 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    1
  5255 ;; This function calls:
  5256 ;;		_time_write_1
  5257 ;; This function is called by:
  5258 ;;		_main
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _ds1302_init
  5264  14CE                     _ds1302_init:	
  5265                           
  5266                           ;clock_src.c: 8:    RB0=0;
  5267                           
  5268                           ;incstack = 0
  5269                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5270  14CE  1006               	bcf	6,0	;volatile
  5271                           
  5272                           ;clock_src.c: 9:    RB5 =0;
  5273  14CF  1286               	bcf	6,5	;volatile
  5274                           
  5275                           ;clock_src.c: 10:    RB5=1;
  5276  14D0  1686               	bsf	6,5	;volatile
  5277                           
  5278                           ;clock_src.c: 11:    time_write_1(0x8e);
  5279  14D1  308E               	movlw	142
  5280  14D2  160A  118A  264E  160A  118A  	fcall	_time_write_1
  5281                           
  5282                           ;clock_src.c: 12:    time_write_1(0);
  5283  14D7  3000               	movlw	0
  5284  14D8  160A  118A  264E   	fcall	_time_write_1
  5285                           
  5286                           ;clock_src.c: 13:    RB5=0;
  5287  14DB  1286               	bcf	6,5	;volatile
  5288  14DC  0008               	return
  5289  14DD                     __end_of_ds1302_init:	
  5290                           
  5291                           	psect	text25
  5292  157E                     __ptext25:	
  5293 ;; *************** function _display_temp *****************
  5294 ;; Defined at:
  5295 ;;		line 12 in file "Thermometer_src.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      void 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 300/0
  5306 ;;		On exit  : 300/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5309 ;;      Params:         0       0       0       0       0
  5310 ;;      Locals:         0       0       0       0       0
  5311 ;;      Temps:          0       0       0       0       0
  5312 ;;      Totals:         0       0       0       0       0
  5313 ;;Total ram usage:        0 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    2
  5316 ;; This function calls:
  5317 ;;		_write_char
  5318 ;; This function is called by:
  5319 ;;		_main
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _display_temp
  5325  157E                     _display_temp:	
  5326                           
  5327                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5331  157E  085D               	movf	_shi,w
  5332  157F  3E30               	addlw	48
  5333  1580  160A  118A  2550  160A  118A  	fcall	_write_char
  5334                           
  5335                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5336  1585  085C               	movf	_ge,w
  5337  1586  3E30               	addlw	48
  5338  1587  160A  118A  2550  160A  118A  	fcall	_write_char
  5339                           
  5340                           ;Thermometer_src.c: 17:  write_char('.');
  5341  158C  302E               	movlw	46
  5342  158D  160A  118A  2550  160A  118A  	fcall	_write_char
  5343                           
  5344                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5345  1592  085B               	movf	_shifen,w
  5346  1593  3E30               	addlw	48
  5347  1594  160A  118A  2550  160A  118A  	fcall	_write_char
  5348                           
  5349                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5350  1599  085A               	movf	_baifen,w
  5351  159A  3E30               	addlw	48
  5352  159B  160A  118A  2550   	fcall	_write_char
  5353  159E  0008               	return
  5354  159F                     __end_of_display_temp:	
  5355                           
  5356                           	psect	text26
  5357  0986                     __ptext26:	
  5358 ;; *************** function _display_day *****************
  5359 ;; Defined at:
  5360 ;;		line 4 in file "Day_of_week_src.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  num             2    3[COMMON] int 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  1    wreg      void 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 300/0
  5371 ;;		On exit  : 300/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5374 ;;      Params:         2       0       0       0       0
  5375 ;;      Locals:         0       0       0       0       0
  5376 ;;      Temps:          0       0       0       0       0
  5377 ;;      Totals:         2       0       0       0       0
  5378 ;;Total ram usage:        2 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    2
  5381 ;; This function calls:
  5382 ;;		_write_char
  5383 ;; This function is called by:
  5384 ;;		_main
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           
  5389                           ;psect for function _display_day
  5390  0986                     _display_day:	
  5391                           
  5392                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5396  0986  0373               	decf	display_day@num,w
  5397  0987  0474               	iorwf	display_day@num+1,w
  5398  0988  1903               	btfsc	3,2
  5399  0989  298E               	goto	l4382
  5400  098A  0873               	movf	display_day@num,w
  5401  098B  0474               	iorwf	display_day@num+1,w
  5402  098C  1D03               	btfss	3,2
  5403  098D  29A0               	goto	l4384
  5404  098E                     l4382:	
  5405                           
  5406                           ;Day_of_week_src.c: 6:     write_char('M');
  5407  098E  304D               	movlw	77
  5408  098F  160A  118A  2550  120A  158A  	fcall	_write_char
  5409                           
  5410                           ;Day_of_week_src.c: 7:     write_char('o');
  5411  0994  306F               	movlw	111
  5412  0995  160A  118A  2550  120A  158A  	fcall	_write_char
  5413                           
  5414                           ;Day_of_week_src.c: 8:     write_char('n');
  5415  099A  306E               	movlw	110
  5416  099B  160A  118A  2550  120A  158A  	fcall	_write_char
  5417  09A0                     l4384:	
  5418                           
  5419                           ;Day_of_week_src.c: 10:     if(num == 2){
  5420  09A0  3002               	movlw	2
  5421  09A1  0673               	xorwf	display_day@num,w
  5422  09A2  0474               	iorwf	display_day@num+1,w
  5423  09A3  1D03               	btfss	3,2
  5424  09A4  29B7               	goto	l4388
  5425                           
  5426                           ;Day_of_week_src.c: 11:     write_char('T');
  5427  09A5  3054               	movlw	84
  5428  09A6  160A  118A  2550  120A  158A  	fcall	_write_char
  5429                           
  5430                           ;Day_of_week_src.c: 12:     write_char('u');
  5431  09AB  3075               	movlw	117
  5432  09AC  160A  118A  2550  120A  158A  	fcall	_write_char
  5433                           
  5434                           ;Day_of_week_src.c: 13:     write_char('e');
  5435  09B1  3065               	movlw	101
  5436  09B2  160A  118A  2550  120A  158A  	fcall	_write_char
  5437  09B7                     l4388:	
  5438                           
  5439                           ;Day_of_week_src.c: 15:     if(num == 3){
  5440  09B7  3003               	movlw	3
  5441  09B8  0673               	xorwf	display_day@num,w
  5442  09B9  0474               	iorwf	display_day@num+1,w
  5443  09BA  1D03               	btfss	3,2
  5444  09BB  29CE               	goto	l4392
  5445                           
  5446                           ;Day_of_week_src.c: 16:     write_char('W');
  5447  09BC  3057               	movlw	87
  5448  09BD  160A  118A  2550  120A  158A  	fcall	_write_char
  5449                           
  5450                           ;Day_of_week_src.c: 17:     write_char('e');
  5451  09C2  3065               	movlw	101
  5452  09C3  160A  118A  2550  120A  158A  	fcall	_write_char
  5453                           
  5454                           ;Day_of_week_src.c: 18:     write_char('d');
  5455  09C8  3064               	movlw	100
  5456  09C9  160A  118A  2550  120A  158A  	fcall	_write_char
  5457  09CE                     l4392:	
  5458                           
  5459                           ;Day_of_week_src.c: 20:     if(num == 4){
  5460  09CE  3004               	movlw	4
  5461  09CF  0673               	xorwf	display_day@num,w
  5462  09D0  0474               	iorwf	display_day@num+1,w
  5463  09D1  1D03               	btfss	3,2
  5464  09D2  29E5               	goto	l4396
  5465                           
  5466                           ;Day_of_week_src.c: 21:     write_char('T');
  5467  09D3  3054               	movlw	84
  5468  09D4  160A  118A  2550  120A  158A  	fcall	_write_char
  5469                           
  5470                           ;Day_of_week_src.c: 22:     write_char('h');
  5471  09D9  3068               	movlw	104
  5472  09DA  160A  118A  2550  120A  158A  	fcall	_write_char
  5473                           
  5474                           ;Day_of_week_src.c: 23:     write_char('u');
  5475  09DF  3075               	movlw	117
  5476  09E0  160A  118A  2550  120A  158A  	fcall	_write_char
  5477  09E5                     l4396:	
  5478                           
  5479                           ;Day_of_week_src.c: 25:     if(num == 5){
  5480  09E5  3005               	movlw	5
  5481  09E6  0673               	xorwf	display_day@num,w
  5482  09E7  0474               	iorwf	display_day@num+1,w
  5483  09E8  1D03               	btfss	3,2
  5484  09E9  29FC               	goto	l4400
  5485                           
  5486                           ;Day_of_week_src.c: 26:     write_char('F');
  5487  09EA  3046               	movlw	70
  5488  09EB  160A  118A  2550  120A  158A  	fcall	_write_char
  5489                           
  5490                           ;Day_of_week_src.c: 27:     write_char('r');
  5491  09F0  3072               	movlw	114
  5492  09F1  160A  118A  2550  120A  158A  	fcall	_write_char
  5493                           
  5494                           ;Day_of_week_src.c: 28:     write_char('i');
  5495  09F6  3069               	movlw	105
  5496  09F7  160A  118A  2550  120A  158A  	fcall	_write_char
  5497  09FC                     l4400:	
  5498                           
  5499                           ;Day_of_week_src.c: 30:     if(num == 6){
  5500  09FC  3006               	movlw	6
  5501  09FD  0673               	xorwf	display_day@num,w
  5502  09FE  0474               	iorwf	display_day@num+1,w
  5503  09FF  1D03               	btfss	3,2
  5504  0A00  2A13               	goto	l4404
  5505                           
  5506                           ;Day_of_week_src.c: 31:     write_char('S');
  5507  0A01  3053               	movlw	83
  5508  0A02  160A  118A  2550  120A  158A  	fcall	_write_char
  5509                           
  5510                           ;Day_of_week_src.c: 32:     write_char('a');
  5511  0A07  3061               	movlw	97
  5512  0A08  160A  118A  2550  120A  158A  	fcall	_write_char
  5513                           
  5514                           ;Day_of_week_src.c: 33:     write_char('t');
  5515  0A0D  3074               	movlw	116
  5516  0A0E  160A  118A  2550  120A  158A  	fcall	_write_char
  5517  0A13                     l4404:	
  5518                           
  5519                           ;Day_of_week_src.c: 35:     if(num == 7){
  5520  0A13  3007               	movlw	7
  5521  0A14  0673               	xorwf	display_day@num,w
  5522  0A15  0474               	iorwf	display_day@num+1,w
  5523  0A16  1D03               	btfss	3,2
  5524  0A17  0008               	return
  5525                           
  5526                           ;Day_of_week_src.c: 36:     write_char('S');
  5527  0A18  3053               	movlw	83
  5528  0A19  160A  118A  2550  120A  158A  	fcall	_write_char
  5529                           
  5530                           ;Day_of_week_src.c: 37:     write_char('u');
  5531  0A1E  3075               	movlw	117
  5532  0A1F  160A  118A  2550  120A  158A  	fcall	_write_char
  5533                           
  5534                           ;Day_of_week_src.c: 38:     write_char('n');
  5535  0A24  306E               	movlw	110
  5536  0A25  160A  118A  2550   	fcall	_write_char
  5537  0A28  0008               	return
  5538  0A29                     __end_of_display_day:	
  5539                           
  5540                           	psect	text27
  5541  08F0                     __ptext27:	
  5542 ;; *************** function _display_date *****************
  5543 ;; Defined at:
  5544 ;;		line 79 in file "clock_src.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  i               2    5[COMMON] int 
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 300/0
  5555 ;;		On exit  : 300/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5558 ;;      Params:         0       0       0       0       0
  5559 ;;      Locals:         2       0       0       0       0
  5560 ;;      Temps:          2       0       0       0       0
  5561 ;;      Totals:         4       0       0       0       0
  5562 ;;Total ram usage:        4 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    2
  5565 ;; This function calls:
  5566 ;;		_write_char
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function _display_date
  5574  08F0                     _display_date:	
  5575                           
  5576                           ;clock_src.c: 81:      int i;;clock_src.c: 82:      if(RB1==0)
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5580  08F0  1886               	btfsc	6,1	;volatile
  5581  08F1  28FA               	goto	l3658
  5582                           
  5583                           ;clock_src.c: 83:        {;clock_src.c: 84:           table1[0]=table1[3];
  5584  08F2  0823               	movf	_table1+3,w
  5585  08F3  00F3               	movwf	??_display_date
  5586  08F4  0873               	movf	??_display_date,w
  5587  08F5  00A0               	movwf	_table1
  5588                           
  5589                           ;clock_src.c: 85:           table1[1]=table1[4];
  5590  08F6  0824               	movf	_table1+4,w
  5591  08F7  00F3               	movwf	??_display_date
  5592  08F8  0873               	movf	??_display_date,w
  5593  08F9  00A1               	movwf	_table1+1
  5594  08FA                     l3658:	
  5595                           
  5596                           ;clock_src.c: 87:      i=table1[3]&0xf0;
  5597  08FA  0823               	movf	_table1+3,w
  5598  08FB  39F0               	andlw	240
  5599  08FC  00F3               	movwf	??_display_date
  5600  08FD  01F4               	clrf	??_display_date+1
  5601  08FE  0873               	movf	??_display_date,w
  5602  08FF  00F5               	movwf	display_date@i
  5603  0900  0874               	movf	??_display_date+1,w
  5604  0901  00F6               	movwf	display_date@i+1
  5605                           
  5606                           ;clock_src.c: 88:      i=i>>4;
  5607  0902  0E75               	swapf	display_date@i,w
  5608  0903  390F               	andlw	15
  5609  0904  00F5               	movwf	display_date@i
  5610  0905  0E76               	swapf	display_date@i+1,w
  5611  0906  39F0               	andlw	240
  5612  0907  04F5               	iorwf	display_date@i,f
  5613  0908  0E76               	swapf	display_date@i+1,w
  5614  0909  390F               	andlw	15
  5615  090A  00F6               	movwf	display_date@i+1
  5616  090B  30F0               	movlw	240
  5617  090C  1DF6               	btfss	display_date@i+1,3
  5618  090D  3000               	movlw	0
  5619  090E  04F6               	iorwf	display_date@i+1,f
  5620                           
  5621                           ;clock_src.c: 89:      write_char(i + '0');
  5622  090F  0875               	movf	display_date@i,w
  5623  0910  3E30               	addlw	48
  5624  0911  160A  118A  2550  120A  158A  	fcall	_write_char
  5625                           
  5626                           ;clock_src.c: 91:      i=table1[3]&0x0f;
  5627  0916  0823               	movf	_table1+3,w
  5628  0917  390F               	andlw	15
  5629  0918  00F3               	movwf	??_display_date
  5630  0919  01F4               	clrf	??_display_date+1
  5631  091A  0873               	movf	??_display_date,w
  5632  091B  00F5               	movwf	display_date@i
  5633  091C  0874               	movf	??_display_date+1,w
  5634  091D  00F6               	movwf	display_date@i+1
  5635                           
  5636                           ;clock_src.c: 92:      write_char(i + '0');
  5637  091E  0875               	movf	display_date@i,w
  5638  091F  3E30               	addlw	48
  5639  0920  160A  118A  2550  120A  158A  	fcall	_write_char
  5640                           
  5641                           ;clock_src.c: 93:      write_char('/');
  5642  0925  302F               	movlw	47
  5643  0926  160A  118A  2550  120A  158A  	fcall	_write_char
  5644                           
  5645                           ;clock_src.c: 97:      i=table1[4]&0xf0;
  5646  092B  0824               	movf	_table1+4,w
  5647  092C  39F0               	andlw	240
  5648  092D  00F3               	movwf	??_display_date
  5649  092E  01F4               	clrf	??_display_date+1
  5650  092F  0873               	movf	??_display_date,w
  5651  0930  00F5               	movwf	display_date@i
  5652  0931  0874               	movf	??_display_date+1,w
  5653  0932  00F6               	movwf	display_date@i+1
  5654                           
  5655                           ;clock_src.c: 98:      i=i>>4;
  5656  0933  0E75               	swapf	display_date@i,w
  5657  0934  390F               	andlw	15
  5658  0935  00F5               	movwf	display_date@i
  5659  0936  0E76               	swapf	display_date@i+1,w
  5660  0937  39F0               	andlw	240
  5661  0938  04F5               	iorwf	display_date@i,f
  5662  0939  0E76               	swapf	display_date@i+1,w
  5663  093A  390F               	andlw	15
  5664  093B  00F6               	movwf	display_date@i+1
  5665  093C  30F0               	movlw	240
  5666  093D  1DF6               	btfss	display_date@i+1,3
  5667  093E  3000               	movlw	0
  5668  093F  04F6               	iorwf	display_date@i+1,f
  5669                           
  5670                           ;clock_src.c: 99:      write_char(i + '0');
  5671  0940  0875               	movf	display_date@i,w
  5672  0941  3E30               	addlw	48
  5673  0942  160A  118A  2550  120A  158A  	fcall	_write_char
  5674                           
  5675                           ;clock_src.c: 101:      i=table1[4]&0x0f;
  5676  0947  0824               	movf	_table1+4,w
  5677  0948  390F               	andlw	15
  5678  0949  00F3               	movwf	??_display_date
  5679  094A  01F4               	clrf	??_display_date+1
  5680  094B  0873               	movf	??_display_date,w
  5681  094C  00F5               	movwf	display_date@i
  5682  094D  0874               	movf	??_display_date+1,w
  5683  094E  00F6               	movwf	display_date@i+1
  5684                           
  5685                           ;clock_src.c: 102:      write_char(i + '0');
  5686  094F  0875               	movf	display_date@i,w
  5687  0950  3E30               	addlw	48
  5688  0951  160A  118A  2550  120A  158A  	fcall	_write_char
  5689                           
  5690                           ;clock_src.c: 103:      write_char('/');
  5691  0956  302F               	movlw	47
  5692  0957  160A  118A  2550  120A  158A  	fcall	_write_char
  5693                           
  5694                           ;clock_src.c: 107:      i=table1[6]&0xf0;
  5695  095C  0826               	movf	_table1+6,w
  5696  095D  39F0               	andlw	240
  5697  095E  00F3               	movwf	??_display_date
  5698  095F  01F4               	clrf	??_display_date+1
  5699  0960  0873               	movf	??_display_date,w
  5700  0961  00F5               	movwf	display_date@i
  5701  0962  0874               	movf	??_display_date+1,w
  5702  0963  00F6               	movwf	display_date@i+1
  5703                           
  5704                           ;clock_src.c: 108:      i=i>>4;
  5705  0964  0E75               	swapf	display_date@i,w
  5706  0965  390F               	andlw	15
  5707  0966  00F5               	movwf	display_date@i
  5708  0967  0E76               	swapf	display_date@i+1,w
  5709  0968  39F0               	andlw	240
  5710  0969  04F5               	iorwf	display_date@i,f
  5711  096A  0E76               	swapf	display_date@i+1,w
  5712  096B  390F               	andlw	15
  5713  096C  00F6               	movwf	display_date@i+1
  5714  096D  30F0               	movlw	240
  5715  096E  1DF6               	btfss	display_date@i+1,3
  5716  096F  3000               	movlw	0
  5717  0970  04F6               	iorwf	display_date@i+1,f
  5718                           
  5719                           ;clock_src.c: 109:      write_char(i + '0');
  5720  0971  0875               	movf	display_date@i,w
  5721  0972  3E30               	addlw	48
  5722  0973  160A  118A  2550  120A  158A  	fcall	_write_char
  5723                           
  5724                           ;clock_src.c: 111:      i=table1[6]&0x0f;
  5725  0978  0826               	movf	_table1+6,w
  5726  0979  390F               	andlw	15
  5727  097A  00F3               	movwf	??_display_date
  5728  097B  01F4               	clrf	??_display_date+1
  5729  097C  0873               	movf	??_display_date,w
  5730  097D  00F5               	movwf	display_date@i
  5731  097E  0874               	movf	??_display_date+1,w
  5732  097F  00F6               	movwf	display_date@i+1
  5733                           
  5734                           ;clock_src.c: 112:      write_char(i + '0');
  5735  0980  0875               	movf	display_date@i,w
  5736  0981  3E30               	addlw	48
  5737  0982  160A  118A  2550   	fcall	_write_char
  5738  0985  0008               	return
  5739  0986                     __end_of_display_date:	
  5740                           
  5741                           	psect	text28
  5742  085A                     __ptext28:	
  5743 ;; *************** function _display_clock *****************
  5744 ;; Defined at:
  5745 ;;		line 37 in file "clock_src.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;		None
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  i               2    5[COMMON] int 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  1    wreg      void 
  5752 ;; Registers used:
  5753 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5754 ;; Tracked objects:
  5755 ;;		On entry : 300/0
  5756 ;;		On exit  : 300/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5759 ;;      Params:         0       0       0       0       0
  5760 ;;      Locals:         2       0       0       0       0
  5761 ;;      Temps:          2       0       0       0       0
  5762 ;;      Totals:         4       0       0       0       0
  5763 ;;Total ram usage:        4 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    2
  5766 ;; This function calls:
  5767 ;;		_write_char
  5768 ;; This function is called by:
  5769 ;;		_main
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           
  5774                           ;psect for function _display_clock
  5775  085A                     _display_clock:	
  5776                           
  5777                           ;clock_src.c: 39:      int i;;clock_src.c: 40:      if(RB1==0)
  5778                           
  5779                           ;incstack = 0
  5780                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5781  085A  1886               	btfsc	6,1	;volatile
  5782  085B  2864               	goto	l3696
  5783                           
  5784                           ;clock_src.c: 41:        {;clock_src.c: 42:           table1[0]=table1[3];
  5785  085C  0823               	movf	_table1+3,w
  5786  085D  00F3               	movwf	??_display_clock
  5787  085E  0873               	movf	??_display_clock,w
  5788  085F  00A0               	movwf	_table1
  5789                           
  5790                           ;clock_src.c: 43:           table1[1]=table1[4];
  5791  0860  0824               	movf	_table1+4,w
  5792  0861  00F3               	movwf	??_display_clock
  5793  0862  0873               	movf	??_display_clock,w
  5794  0863  00A1               	movwf	_table1+1
  5795  0864                     l3696:	
  5796                           
  5797                           ;clock_src.c: 46:      i=table1[2]&0xf0;
  5798  0864  0822               	movf	_table1+2,w
  5799  0865  39F0               	andlw	240
  5800  0866  00F3               	movwf	??_display_clock
  5801  0867  01F4               	clrf	??_display_clock+1
  5802  0868  0873               	movf	??_display_clock,w
  5803  0869  00F5               	movwf	display_clock@i
  5804  086A  0874               	movf	??_display_clock+1,w
  5805  086B  00F6               	movwf	display_clock@i+1
  5806                           
  5807                           ;clock_src.c: 47:      i=i>>4;
  5808  086C  0E75               	swapf	display_clock@i,w
  5809  086D  390F               	andlw	15
  5810  086E  00F5               	movwf	display_clock@i
  5811  086F  0E76               	swapf	display_clock@i+1,w
  5812  0870  39F0               	andlw	240
  5813  0871  04F5               	iorwf	display_clock@i,f
  5814  0872  0E76               	swapf	display_clock@i+1,w
  5815  0873  390F               	andlw	15
  5816  0874  00F6               	movwf	display_clock@i+1
  5817  0875  30F0               	movlw	240
  5818  0876  1DF6               	btfss	display_clock@i+1,3
  5819  0877  3000               	movlw	0
  5820  0878  04F6               	iorwf	display_clock@i+1,f
  5821                           
  5822                           ;clock_src.c: 48:      write_char(i + '0');
  5823  0879  0875               	movf	display_clock@i,w
  5824  087A  3E30               	addlw	48
  5825  087B  160A  118A  2550  120A  158A  	fcall	_write_char
  5826                           
  5827                           ;clock_src.c: 52:      i=table1[2]&0x0f;
  5828  0880  0822               	movf	_table1+2,w
  5829  0881  390F               	andlw	15
  5830  0882  00F3               	movwf	??_display_clock
  5831  0883  01F4               	clrf	??_display_clock+1
  5832  0884  0873               	movf	??_display_clock,w
  5833  0885  00F5               	movwf	display_clock@i
  5834  0886  0874               	movf	??_display_clock+1,w
  5835  0887  00F6               	movwf	display_clock@i+1
  5836                           
  5837                           ;clock_src.c: 53:      write_char(i + '0');
  5838  0888  0875               	movf	display_clock@i,w
  5839  0889  3E30               	addlw	48
  5840  088A  160A  118A  2550  120A  158A  	fcall	_write_char
  5841                           
  5842                           ;clock_src.c: 54:      write_char(':');
  5843  088F  303A               	movlw	58
  5844  0890  160A  118A  2550  120A  158A  	fcall	_write_char
  5845                           
  5846                           ;clock_src.c: 58:      i=table1[1]&0xf0;
  5847  0895  0821               	movf	_table1+1,w
  5848  0896  39F0               	andlw	240
  5849  0897  00F3               	movwf	??_display_clock
  5850  0898  01F4               	clrf	??_display_clock+1
  5851  0899  0873               	movf	??_display_clock,w
  5852  089A  00F5               	movwf	display_clock@i
  5853  089B  0874               	movf	??_display_clock+1,w
  5854  089C  00F6               	movwf	display_clock@i+1
  5855                           
  5856                           ;clock_src.c: 59:      i=i>>4;
  5857  089D  0E75               	swapf	display_clock@i,w
  5858  089E  390F               	andlw	15
  5859  089F  00F5               	movwf	display_clock@i
  5860  08A0  0E76               	swapf	display_clock@i+1,w
  5861  08A1  39F0               	andlw	240
  5862  08A2  04F5               	iorwf	display_clock@i,f
  5863  08A3  0E76               	swapf	display_clock@i+1,w
  5864  08A4  390F               	andlw	15
  5865  08A5  00F6               	movwf	display_clock@i+1
  5866  08A6  30F0               	movlw	240
  5867  08A7  1DF6               	btfss	display_clock@i+1,3
  5868  08A8  3000               	movlw	0
  5869  08A9  04F6               	iorwf	display_clock@i+1,f
  5870                           
  5871                           ;clock_src.c: 60:      write_char(i + '0');
  5872  08AA  0875               	movf	display_clock@i,w
  5873  08AB  3E30               	addlw	48
  5874  08AC  160A  118A  2550  120A  158A  	fcall	_write_char
  5875                           
  5876                           ;clock_src.c: 63:      i=table1[1]&0x0f;
  5877  08B1  0821               	movf	_table1+1,w
  5878  08B2  390F               	andlw	15
  5879  08B3  00F3               	movwf	??_display_clock
  5880  08B4  01F4               	clrf	??_display_clock+1
  5881  08B5  0873               	movf	??_display_clock,w
  5882  08B6  00F5               	movwf	display_clock@i
  5883  08B7  0874               	movf	??_display_clock+1,w
  5884  08B8  00F6               	movwf	display_clock@i+1
  5885                           
  5886                           ;clock_src.c: 64:      write_char(i + '0');
  5887  08B9  0875               	movf	display_clock@i,w
  5888  08BA  3E30               	addlw	48
  5889  08BB  160A  118A  2550  120A  158A  	fcall	_write_char
  5890                           
  5891                           ;clock_src.c: 65:      write_char(':');
  5892  08C0  303A               	movlw	58
  5893  08C1  160A  118A  2550  120A  158A  	fcall	_write_char
  5894                           
  5895                           ;clock_src.c: 68:      i=table1[0]&0xf0;
  5896  08C6  0820               	movf	_table1,w
  5897  08C7  39F0               	andlw	240
  5898  08C8  00F3               	movwf	??_display_clock
  5899  08C9  01F4               	clrf	??_display_clock+1
  5900  08CA  0873               	movf	??_display_clock,w
  5901  08CB  00F5               	movwf	display_clock@i
  5902  08CC  0874               	movf	??_display_clock+1,w
  5903  08CD  00F6               	movwf	display_clock@i+1
  5904                           
  5905                           ;clock_src.c: 69:      i=i>>4;
  5906  08CE  0E75               	swapf	display_clock@i,w
  5907  08CF  390F               	andlw	15
  5908  08D0  00F5               	movwf	display_clock@i
  5909  08D1  0E76               	swapf	display_clock@i+1,w
  5910  08D2  39F0               	andlw	240
  5911  08D3  04F5               	iorwf	display_clock@i,f
  5912  08D4  0E76               	swapf	display_clock@i+1,w
  5913  08D5  390F               	andlw	15
  5914  08D6  00F6               	movwf	display_clock@i+1
  5915  08D7  30F0               	movlw	240
  5916  08D8  1DF6               	btfss	display_clock@i+1,3
  5917  08D9  3000               	movlw	0
  5918  08DA  04F6               	iorwf	display_clock@i+1,f
  5919                           
  5920                           ;clock_src.c: 70:      write_char(i + '0');
  5921  08DB  0875               	movf	display_clock@i,w
  5922  08DC  3E30               	addlw	48
  5923  08DD  160A  118A  2550  120A  158A  	fcall	_write_char
  5924                           
  5925                           ;clock_src.c: 73:      i=table1[0]&0x0f;
  5926  08E2  0820               	movf	_table1,w
  5927  08E3  390F               	andlw	15
  5928  08E4  00F3               	movwf	??_display_clock
  5929  08E5  01F4               	clrf	??_display_clock+1
  5930  08E6  0873               	movf	??_display_clock,w
  5931  08E7  00F5               	movwf	display_clock@i
  5932  08E8  0874               	movf	??_display_clock+1,w
  5933  08E9  00F6               	movwf	display_clock@i+1
  5934                           
  5935                           ;clock_src.c: 74:      write_char(i + '0');
  5936  08EA  0875               	movf	display_clock@i,w
  5937  08EB  3E30               	addlw	48
  5938  08EC  160A  118A  2550   	fcall	_write_char
  5939  08EF  0008               	return
  5940  08F0                     __end_of_display_clock:	
  5941                           
  5942                           	psect	text29
  5943  039B                     __ptext29:	
  5944 ;; *************** function _date_settings *****************
  5945 ;; Defined at:
  5946 ;;		line 352 in file "Button_src.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 300/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5960 ;;      Params:         0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0
  5962 ;;      Temps:          0       3       0       0       0
  5963 ;;      Totals:         0       3       0       0       0
  5964 ;;Total ram usage:        3 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    3
  5967 ;; This function calls:
  5968 ;;		_button_delay
  5969 ;;		_incrementor
  5970 ;;		_modulus_func
  5971 ;;		_set_time
  5972 ;;		_time_date_delimiter
  5973 ;;		_time_date_hex_terminator
  5974 ;;		_write_char
  5975 ;;		_write_cmd
  5976 ;; This function is called by:
  5977 ;;		_main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _date_settings
  5983  039B                     _date_settings:	
  5984                           
  5985                           ;Button_src.c: 353:  RC0 = 0;
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5989  039B  1283               	bcf	3,5	;RP0=0, select bank0
  5990  039C  1303               	bcf	3,6	;RP1=0, select bank0
  5991  039D  1007               	bcf	7,0	;volatile
  5992                           
  5993                           ;Button_src.c: 354:  RC1 = 1;
  5994  039E  1487               	bsf	7,1	;volatile
  5995                           
  5996                           ;Button_src.c: 355:  RC2 = 1;
  5997  039F  1507               	bsf	7,2	;volatile
  5998                           
  5999                           ;Button_src.c: 356:  RC3 = 1;
  6000  03A0  1587               	bsf	7,3	;volatile
  6001                           
  6002                           ;Button_src.c: 357:   if (RC4 == 0){
  6003  03A1  1A07               	btfsc	7,4	;volatile
  6004  03A2  0008               	return
  6005                           
  6006                           ;Button_src.c: 358:       write_cmd(0x1);
  6007  03A3  3001               	movlw	1
  6008  03A4  160A  118A  2567  120A  118A  	fcall	_write_cmd
  6009  03A9                     l630:	
  6010                           ;Button_src.c: 359:       for(;;){
  6011                           
  6012                           
  6013                           ;Button_src.c: 360:             write_cmd(0x80);
  6014  03A9  3080               	movlw	128
  6015  03AA  160A  118A  2567  120A  118A  	fcall	_write_cmd
  6016                           
  6017                           ;Button_src.c: 361:             write_char('D');
  6018  03AF  3044               	movlw	68
  6019  03B0  160A  118A  2550  120A  118A  	fcall	_write_char
  6020                           
  6021                           ;Button_src.c: 362:             write_char('a');
  6022  03B5  3061               	movlw	97
  6023  03B6  160A  118A  2550  120A  118A  	fcall	_write_char
  6024                           
  6025                           ;Button_src.c: 363:             write_char('t');
  6026  03BB  3074               	movlw	116
  6027  03BC  160A  118A  2550  120A  118A  	fcall	_write_char
  6028                           
  6029                           ;Button_src.c: 364:             write_char('e');
  6030  03C1  3065               	movlw	101
  6031  03C2  160A  118A  2550  120A  118A  	fcall	_write_char
  6032                           
  6033                           ;Button_src.c: 365:             write_char('_');
  6034  03C7  305F               	movlw	95
  6035  03C8  160A  118A  2550  120A  118A  	fcall	_write_char
  6036                           
  6037                           ;Button_src.c: 366:             write_char('S');
  6038  03CD  3053               	movlw	83
  6039  03CE  160A  118A  2550  120A  118A  	fcall	_write_char
  6040                           
  6041                           ;Button_src.c: 367:             write_char('e');
  6042  03D3  3065               	movlw	101
  6043  03D4  160A  118A  2550  120A  118A  	fcall	_write_char
  6044                           
  6045                           ;Button_src.c: 368:             write_char('t');
  6046  03D9  3074               	movlw	116
  6047  03DA  160A  118A  2550  120A  118A  	fcall	_write_char
  6048                           
  6049                           ;Button_src.c: 369:             write_char('t');
  6050  03DF  3074               	movlw	116
  6051  03E0  160A  118A  2550  120A  118A  	fcall	_write_char
  6052                           
  6053                           ;Button_src.c: 370:             write_char('i');
  6054  03E5  3069               	movlw	105
  6055  03E6  160A  118A  2550  120A  118A  	fcall	_write_char
  6056                           
  6057                           ;Button_src.c: 371:             write_char('n');
  6058  03EB  306E               	movlw	110
  6059  03EC  160A  118A  2550  120A  118A  	fcall	_write_char
  6060                           
  6061                           ;Button_src.c: 372:             write_char('g');
  6062  03F1  3067               	movlw	103
  6063  03F2  160A  118A  2550  120A  118A  	fcall	_write_char
  6064                           
  6065                           ;Button_src.c: 373:             write_char('s');
  6066  03F7  3073               	movlw	115
  6067  03F8  160A  118A  2550  120A  118A  	fcall	_write_char
  6068                           
  6069                           ;Button_src.c: 374:             RC0 = 1;
  6070  03FD  1407               	bsf	7,0	;volatile
  6071                           
  6072                           ;Button_src.c: 375:             RC1 = 0;
  6073  03FE  1087               	bcf	7,1	;volatile
  6074                           
  6075                           ;Button_src.c: 376:             RC2 = 1;
  6076  03FF  1507               	bsf	7,2	;volatile
  6077                           
  6078                           ;Button_src.c: 377:             RC3 = 1;
  6079  0400  1587               	bsf	7,3	;volatile
  6080                           
  6081                           ;Button_src.c: 378:             if(RC7 == 0 && b =='x'){
  6082  0401  1B87               	btfsc	7,7	;volatile
  6083  0402  2C73               	goto	l3910
  6084  0403  3078               	movlw	120
  6085  0404  0656               	xorwf	_b,w
  6086  0405  1D03               	btfss	3,2
  6087  0406  2C73               	goto	l3910
  6088                           
  6089                           ;Button_src.c: 379:                 if(stats == 1)
  6090  0407  0333               	decf	_stats,w
  6091  0408  0434               	iorwf	_stats+1,w
  6092  0409  1D03               	btfss	3,2
  6093  040A  2C0F               	goto	l632
  6094                           
  6095                           ;Button_src.c: 380:                     a++;
  6096  040B  3001               	movlw	1
  6097  040C  00E7               	movwf	??_date_settings
  6098  040D  0867               	movf	??_date_settings,w
  6099  040E  07D7               	addwf	_a,f
  6100  040F                     l632:	
  6101                           
  6102                           ;Button_src.c: 381:                 if(stats == 0){
  6103  040F  0833               	movf	_stats,w
  6104  0410  0434               	iorwf	_stats+1,w
  6105  0411  1D03               	btfss	3,2
  6106  0412  2C17               	goto	l633
  6107                           
  6108                           ;Button_src.c: 382:                     stats = 1;
  6109  0413  3001               	movlw	1
  6110  0414  00B3               	movwf	_stats
  6111  0415  3000               	movlw	0
  6112  0416  00B4               	movwf	_stats+1
  6113  0417                     l633:	
  6114                           ;Button_src.c: 383:                 }
  6115                           
  6116                           
  6117                           ;Button_src.c: 385:                     x++ ;
  6118  0417  3001               	movlw	1
  6119  0418  07BF               	addwf	_x,f
  6120  0419  1803               	skipnc
  6121  041A  0AC0               	incf	_x+1,f
  6122  041B  3000               	movlw	0
  6123  041C  07C0               	addwf	_x+1,f
  6124                           
  6125                           ;Button_src.c: 386:                     x = modulus_func(x,10);
  6126  041D  0840               	movf	_x+1,w
  6127  041E  00F8               	movwf	modulus_func@x+1
  6128  041F  083F               	movf	_x,w
  6129  0420  00F7               	movwf	modulus_func@x
  6130  0421  300A               	movlw	10
  6131  0422  00F9               	movwf	modulus_func@y
  6132  0423  3000               	movlw	0
  6133  0424  00FA               	movwf	modulus_func@y+1
  6134  0425  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  6135  042A  0878               	movf	?_modulus_func+1,w
  6136  042B  00C0               	movwf	_x+1
  6137  042C  0877               	movf	?_modulus_func,w
  6138  042D  00BF               	movwf	_x
  6139                           
  6140                           ;Button_src.c: 387:                      if (p == 1){
  6141  042E  032F               	decf	_p,w
  6142  042F  0430               	iorwf	_p+1,w
  6143  0430  1D03               	btfss	3,2
  6144  0431  2C4B               	goto	l3896
  6145                           
  6146                           ;Button_src.c: 388:                         y = incrementor(y,x,'0');
  6147  0432  083E               	movf	_y+1,w
  6148  0433  00E3               	movwf	incrementor@upper_val+1
  6149  0434  083D               	movf	_y,w
  6150  0435  00E2               	movwf	incrementor@upper_val
  6151  0436  0840               	movf	_x+1,w
  6152  0437  00E5               	movwf	incrementor@lower_val+1
  6153  0438  083F               	movf	_x,w
  6154  0439  00E4               	movwf	incrementor@lower_val
  6155  043A  3030               	movlw	48
  6156  043B  00E7               	movwf	??_date_settings
  6157  043C  0867               	movf	??_date_settings,w
  6158  043D  00E6               	movwf	incrementor@z
  6159  043E  160A  118A  2606  120A  118A  	fcall	_incrementor
  6160  0443  00E8               	movwf	??_date_settings+1
  6161  0444  01E9               	clrf	??_date_settings+2
  6162  0445  0868               	movf	??_date_settings+1,w
  6163  0446  00BD               	movwf	_y
  6164  0447  0869               	movf	??_date_settings+2,w
  6165  0448  00BE               	movwf	_y+1
  6166                           
  6167                           ;Button_src.c: 389:                         p = 0;
  6168  0449  01AF               	clrf	_p
  6169  044A  01B0               	clrf	_p+1
  6170  044B                     l3896:	
  6171                           
  6172                           ;Button_src.c: 391:                     if (x == 9){
  6173  044B  3009               	movlw	9
  6174  044C  063F               	xorwf	_x,w
  6175  044D  0440               	iorwf	_x+1,w
  6176  044E  1D03               	btfss	3,2
  6177  044F  2C54               	goto	l3900
  6178                           
  6179                           ;Button_src.c: 392:                         p = 1;
  6180  0450  3001               	movlw	1
  6181  0451  00AF               	movwf	_p
  6182  0452  3000               	movlw	0
  6183  0453  00B0               	movwf	_p+1
  6184  0454                     l3900:	
  6185                           
  6186                           ;Button_src.c: 394:                     a = time_date_hex_terminator(a,'C');
  6187  0454  3043               	movlw	67
  6188  0455  00E7               	movwf	??_date_settings
  6189  0456  0867               	movf	??_date_settings,w
  6190  0457  00F0               	movwf	time_date_hex_terminator@limiter
  6191  0458  0857               	movf	_a,w
  6192  0459  160A  118A  24BF  120A  118A  	fcall	_time_date_hex_terminator
  6193  045E  00E8               	movwf	??_date_settings+1
  6194  045F  0868               	movf	??_date_settings+1,w
  6195  0460  00D7               	movwf	_a
  6196                           
  6197                           ;Button_src.c: 396:                     if(y == 1 && x == 3){
  6198  0461  033D               	decf	_y,w
  6199  0462  043E               	iorwf	_y+1,w
  6200  0463  1D03               	btfss	3,2
  6201  0464  2C6E               	goto	l3908
  6202  0465  3003               	movlw	3
  6203  0466  063F               	xorwf	_x,w
  6204  0467  0440               	iorwf	_x+1,w
  6205  0468  1D03               	btfss	3,2
  6206  0469  2C6E               	goto	l3908
  6207                           
  6208                           ;Button_src.c: 397:                         x = 0;
  6209  046A  01BF               	clrf	_x
  6210  046B  01C0               	clrf	_x+1
  6211                           
  6212                           ;Button_src.c: 398:                         y = 0;
  6213  046C  01BD               	clrf	_y
  6214  046D  01BE               	clrf	_y+1
  6215  046E                     l3908:	
  6216                           
  6217                           ;Button_src.c: 400:                     button_delay();
  6218  046E  160A  118A  24FE  120A  118A  	fcall	_button_delay
  6219  0473                     l3910:	
  6220                           
  6221                           ;Button_src.c: 402:             if(RC7==0 && b == 'y'){
  6222  0473  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0474  1303               	bcf	3,6	;RP1=0, select bank0
  6224  0475  1B87               	btfsc	7,7	;volatile
  6225  0476  2CF9               	goto	l3944
  6226  0477  3079               	movlw	121
  6227  0478  0656               	xorwf	_b,w
  6228  0479  1D03               	btfss	3,2
  6229  047A  2CF9               	goto	l3944
  6230                           
  6231                           ;Button_src.c: 403:                  if(stats == 1)
  6232  047B  0333               	decf	_stats,w
  6233  047C  0434               	iorwf	_stats+1,w
  6234  047D  1D03               	btfss	3,2
  6235  047E  2C83               	goto	l638
  6236                           
  6237                           ;Button_src.c: 404:                     day_hex++;
  6238  047F  3001               	movlw	1
  6239  0480  00E7               	movwf	??_date_settings
  6240  0481  0867               	movf	??_date_settings,w
  6241  0482  07D4               	addwf	_day_hex,f
  6242  0483                     l638:	
  6243                           
  6244                           ;Button_src.c: 405:                 if(stats == 0){
  6245  0483  0833               	movf	_stats,w
  6246  0484  0434               	iorwf	_stats+1,w
  6247  0485  1D03               	btfss	3,2
  6248  0486  2C8B               	goto	l639
  6249                           
  6250                           ;Button_src.c: 406:                     stats = 1;
  6251  0487  3001               	movlw	1
  6252  0488  00B3               	movwf	_stats
  6253  0489  3000               	movlw	0
  6254  048A  00B4               	movwf	_stats+1
  6255  048B                     l639:	
  6256                           ;Button_src.c: 407:                 }
  6257                           
  6258                           
  6259                           ;Button_src.c: 409:                     day_low++;
  6260  048B  3001               	movlw	1
  6261  048C  07B9               	addwf	_day_low,f
  6262  048D  1803               	skipnc
  6263  048E  0ABA               	incf	_day_low+1,f
  6264  048F  3000               	movlw	0
  6265  0490  07BA               	addwf	_day_low+1,f
  6266                           
  6267                           ;Button_src.c: 410:                     day_low = modulus_func(day_low,10);
  6268  0491  083A               	movf	_day_low+1,w
  6269  0492  00F8               	movwf	modulus_func@x+1
  6270  0493  0839               	movf	_day_low,w
  6271  0494  00F7               	movwf	modulus_func@x
  6272  0495  300A               	movlw	10
  6273  0496  00F9               	movwf	modulus_func@y
  6274  0497  3000               	movlw	0
  6275  0498  00FA               	movwf	modulus_func@y+1
  6276  0499  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  6277  049E  0878               	movf	?_modulus_func+1,w
  6278  049F  00BA               	movwf	_day_low+1
  6279  04A0  0877               	movf	?_modulus_func,w
  6280  04A1  00B9               	movwf	_day_low
  6281                           
  6282                           ;Button_src.c: 411:                     day_counter = modulus_func(day_low,8);
  6283  04A2  083A               	movf	_day_low+1,w
  6284  04A3  00F8               	movwf	modulus_func@x+1
  6285  04A4  0839               	movf	_day_low,w
  6286  04A5  00F7               	movwf	modulus_func@x
  6287  04A6  3008               	movlw	8
  6288  04A7  00F9               	movwf	modulus_func@y
  6289  04A8  3000               	movlw	0
  6290  04A9  00FA               	movwf	modulus_func@y+1
  6291  04AA  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  6292  04AF  0878               	movf	?_modulus_func+1,w
  6293  04B0  00A8               	movwf	_day_counter+1
  6294  04B1  0877               	movf	?_modulus_func,w
  6295  04B2  00A7               	movwf	_day_counter
  6296                           
  6297                           ;Button_src.c: 412:                     if (p == 1){
  6298  04B3  032F               	decf	_p,w
  6299  04B4  0430               	iorwf	_p+1,w
  6300  04B5  1D03               	btfss	3,2
  6301  04B6  2CD0               	goto	l3930
  6302                           
  6303                           ;Button_src.c: 413:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6304  04B7  0838               	movf	_day_high+1,w
  6305  04B8  00E3               	movwf	incrementor@upper_val+1
  6306  04B9  0837               	movf	_day_high,w
  6307  04BA  00E2               	movwf	incrementor@upper_val
  6308  04BB  083A               	movf	_day_low+1,w
  6309  04BC  00E5               	movwf	incrementor@lower_val+1
  6310  04BD  0839               	movf	_day_low,w
  6311  04BE  00E4               	movwf	incrementor@lower_val
  6312  04BF  3030               	movlw	48
  6313  04C0  00E7               	movwf	??_date_settings
  6314  04C1  0867               	movf	??_date_settings,w
  6315  04C2  00E6               	movwf	incrementor@z
  6316  04C3  160A  118A  2606  120A  118A  	fcall	_incrementor
  6317  04C8  00E8               	movwf	??_date_settings+1
  6318  04C9  01E9               	clrf	??_date_settings+2
  6319  04CA  0868               	movf	??_date_settings+1,w
  6320  04CB  00B7               	movwf	_day_high
  6321  04CC  0869               	movf	??_date_settings+2,w
  6322  04CD  00B8               	movwf	_day_high+1
  6323                           
  6324                           ;Button_src.c: 414:                         p = 0;
  6325  04CE  01AF               	clrf	_p
  6326  04CF  01B0               	clrf	_p+1
  6327  04D0                     l3930:	
  6328                           
  6329                           ;Button_src.c: 416:                     if (day_low == 9){
  6330  04D0  3009               	movlw	9
  6331  04D1  0639               	xorwf	_day_low,w
  6332  04D2  043A               	iorwf	_day_low+1,w
  6333  04D3  1D03               	btfss	3,2
  6334  04D4  2CD9               	goto	l3934
  6335                           
  6336                           ;Button_src.c: 417:                         p = 1;
  6337  04D5  3001               	movlw	1
  6338  04D6  00AF               	movwf	_p
  6339  04D7  3000               	movlw	0
  6340  04D8  00B0               	movwf	_p+1
  6341  04D9                     l3934:	
  6342                           
  6343                           ;Button_src.c: 419:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6344  04D9  3063               	movlw	99
  6345  04DA  00E7               	movwf	??_date_settings
  6346  04DB  0867               	movf	??_date_settings,w
  6347  04DC  00F0               	movwf	time_date_hex_terminator@limiter
  6348  04DD  0854               	movf	_day_hex,w
  6349  04DE  160A  118A  24BF  120A  118A  	fcall	_time_date_hex_terminator
  6350  04E3  00E8               	movwf	??_date_settings+1
  6351  04E4  0868               	movf	??_date_settings+1,w
  6352  04E5  00D4               	movwf	_day_hex
  6353                           
  6354                           ;Button_src.c: 420:                     if(day_high == 3 && day_low==2 ){
  6355  04E6  3003               	movlw	3
  6356  04E7  0637               	xorwf	_day_high,w
  6357  04E8  0438               	iorwf	_day_high+1,w
  6358  04E9  1D03               	btfss	3,2
  6359  04EA  2CF4               	goto	l3942
  6360  04EB  3002               	movlw	2
  6361  04EC  0639               	xorwf	_day_low,w
  6362  04ED  043A               	iorwf	_day_low+1,w
  6363  04EE  1D03               	btfss	3,2
  6364  04EF  2CF4               	goto	l3942
  6365                           
  6366                           ;Button_src.c: 421:                         day_high = 0;
  6367  04F0  01B7               	clrf	_day_high
  6368  04F1  01B8               	clrf	_day_high+1
  6369                           
  6370                           ;Button_src.c: 422:                         day_low = 0;
  6371  04F2  01B9               	clrf	_day_low
  6372  04F3  01BA               	clrf	_day_low+1
  6373  04F4                     l3942:	
  6374                           
  6375                           ;Button_src.c: 424:                     button_delay();
  6376  04F4  160A  118A  24FE  120A  118A  	fcall	_button_delay
  6377  04F9                     l3944:	
  6378                           
  6379                           ;Button_src.c: 426:             if(RC7==0 && b == 'z'){
  6380  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  6381  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  6382  04FB  1B87               	btfsc	7,7	;volatile
  6383  04FC  2D60               	goto	l3976
  6384  04FD  307A               	movlw	122
  6385  04FE  0656               	xorwf	_b,w
  6386  04FF  1D03               	btfss	3,2
  6387  0500  2D60               	goto	l3976
  6388                           
  6389                           ;Button_src.c: 427:                 if(stats == 1)
  6390  0501  0333               	decf	_stats,w
  6391  0502  0434               	iorwf	_stats+1,w
  6392  0503  1D03               	btfss	3,2
  6393  0504  2D09               	goto	l644
  6394                           
  6395                           ;Button_src.c: 428:                    c++;
  6396  0505  3001               	movlw	1
  6397  0506  00E7               	movwf	??_date_settings
  6398  0507  0867               	movf	??_date_settings,w
  6399  0508  07D5               	addwf	_c,f
  6400  0509                     l644:	
  6401                           
  6402                           ;Button_src.c: 429:                 if(stats == 0){
  6403  0509  0833               	movf	_stats,w
  6404  050A  0434               	iorwf	_stats+1,w
  6405  050B  1D03               	btfss	3,2
  6406  050C  2D11               	goto	l645
  6407                           
  6408                           ;Button_src.c: 430:                     stats = 1;
  6409  050D  3001               	movlw	1
  6410  050E  00B3               	movwf	_stats
  6411  050F  3000               	movlw	0
  6412  0510  00B4               	movwf	_stats+1
  6413  0511                     l645:	
  6414                           ;Button_src.c: 431:                 }
  6415                           
  6416                           
  6417                           ;Button_src.c: 433:                     t++;
  6418  0511  3001               	movlw	1
  6419  0512  07C3               	addwf	_t,f
  6420  0513  1803               	skipnc
  6421  0514  0AC4               	incf	_t+1,f
  6422  0515  3000               	movlw	0
  6423  0516  07C4               	addwf	_t+1,f
  6424                           
  6425                           ;Button_src.c: 434:                     t = modulus_func(t,10);
  6426  0517  0844               	movf	_t+1,w
  6427  0518  00F8               	movwf	modulus_func@x+1
  6428  0519  0843               	movf	_t,w
  6429  051A  00F7               	movwf	modulus_func@x
  6430  051B  300A               	movlw	10
  6431  051C  00F9               	movwf	modulus_func@y
  6432  051D  3000               	movlw	0
  6433  051E  00FA               	movwf	modulus_func@y+1
  6434  051F  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  6435  0524  0878               	movf	?_modulus_func+1,w
  6436  0525  00C4               	movwf	_t+1
  6437  0526  0877               	movf	?_modulus_func,w
  6438  0527  00C3               	movwf	_t
  6439                           
  6440                           ;Button_src.c: 435:                      if (p == 1){
  6441  0528  032F               	decf	_p,w
  6442  0529  0430               	iorwf	_p+1,w
  6443  052A  1D03               	btfss	3,2
  6444  052B  2D45               	goto	l3962
  6445                           
  6446                           ;Button_src.c: 436:                         w = incrementor(w,t,'0');
  6447  052C  0842               	movf	_w+1,w
  6448  052D  00E3               	movwf	incrementor@upper_val+1
  6449  052E  0841               	movf	_w,w
  6450  052F  00E2               	movwf	incrementor@upper_val
  6451  0530  0844               	movf	_t+1,w
  6452  0531  00E5               	movwf	incrementor@lower_val+1
  6453  0532  0843               	movf	_t,w
  6454  0533  00E4               	movwf	incrementor@lower_val
  6455  0534  3030               	movlw	48
  6456  0535  00E7               	movwf	??_date_settings
  6457  0536  0867               	movf	??_date_settings,w
  6458  0537  00E6               	movwf	incrementor@z
  6459  0538  160A  118A  2606  120A  118A  	fcall	_incrementor
  6460  053D  00E8               	movwf	??_date_settings+1
  6461  053E  01E9               	clrf	??_date_settings+2
  6462  053F  0868               	movf	??_date_settings+1,w
  6463  0540  00C1               	movwf	_w
  6464  0541  0869               	movf	??_date_settings+2,w
  6465  0542  00C2               	movwf	_w+1
  6466                           
  6467                           ;Button_src.c: 437:                         p = 0;
  6468  0543  01AF               	clrf	_p
  6469  0544  01B0               	clrf	_p+1
  6470  0545                     l3962:	
  6471                           
  6472                           ;Button_src.c: 439:                     if (t == 9){
  6473  0545  3009               	movlw	9
  6474  0546  0643               	xorwf	_t,w
  6475  0547  0444               	iorwf	_t+1,w
  6476  0548  1D03               	btfss	3,2
  6477  0549  2D4E               	goto	l3966
  6478                           
  6479                           ;Button_src.c: 440:                         p = 1;
  6480  054A  3001               	movlw	1
  6481  054B  00AF               	movwf	_p
  6482  054C  3000               	movlw	0
  6483  054D  00B0               	movwf	_p+1
  6484  054E                     l3966:	
  6485                           
  6486                           ;Button_src.c: 443:                      if(c == (0x59 + 1)){
  6487  054E  305A               	movlw	90
  6488  054F  0655               	xorwf	_c,w
  6489  0550  1903               	btfsc	3,2
  6490                           
  6491                           ;Button_src.c: 444:                         c = 0x00;
  6492  0551  01D5               	clrf	_c
  6493                           
  6494                           ;Button_src.c: 446:                     if(w == 6){
  6495  0552  3006               	movlw	6
  6496  0553  0641               	xorwf	_w,w
  6497  0554  0442               	iorwf	_w+1,w
  6498  0555  1D03               	btfss	3,2
  6499  0556  2D5B               	goto	l3974
  6500                           
  6501                           ;Button_src.c: 447:                         w = 0;
  6502  0557  01C1               	clrf	_w
  6503  0558  01C2               	clrf	_w+1
  6504                           
  6505                           ;Button_src.c: 448:                         t = 0;
  6506  0559  01C3               	clrf	_t
  6507  055A  01C4               	clrf	_t+1
  6508  055B                     l3974:	
  6509                           
  6510                           ;Button_src.c: 450:                     button_delay();
  6511  055B  160A  118A  24FE  120A  118A  	fcall	_button_delay
  6512  0560                     l3976:	
  6513                           
  6514                           ;Button_src.c: 457:                     a = time_date_delimiter(a,0x11,'9',1);
  6515  0560  3011               	movlw	17
  6516  0561  1283               	bcf	3,5	;RP0=0, select bank0
  6517  0562  1303               	bcf	3,6	;RP1=0, select bank0
  6518  0563  00E7               	movwf	??_date_settings
  6519  0564  0867               	movf	??_date_settings,w
  6520  0565  00F0               	movwf	time_date_delimiter@hex
  6521  0566  3039               	movlw	57
  6522  0567  00E8               	movwf	??_date_settings+1
  6523  0568  0868               	movf	??_date_settings+1,w
  6524  0569  00F1               	movwf	time_date_delimiter@limiter
  6525  056A  3001               	movlw	1
  6526  056B  00F2               	movwf	time_date_delimiter@type
  6527  056C  3000               	movlw	0
  6528  056D  00F3               	movwf	time_date_delimiter@type+1
  6529  056E  0857               	movf	_a,w
  6530  056F  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6531  0574  00E9               	movwf	??_date_settings+2
  6532  0575  0869               	movf	??_date_settings+2,w
  6533  0576  00D7               	movwf	_a
  6534                           
  6535                           ;Button_src.c: 459:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6536  0577  3011               	movlw	17
  6537  0578  00E7               	movwf	??_date_settings
  6538  0579  0867               	movf	??_date_settings,w
  6539  057A  00F0               	movwf	time_date_delimiter@hex
  6540  057B  3039               	movlw	57
  6541  057C  00E8               	movwf	??_date_settings+1
  6542  057D  0868               	movf	??_date_settings+1,w
  6543  057E  00F1               	movwf	time_date_delimiter@limiter
  6544  057F  3002               	movlw	2
  6545  0580  00F2               	movwf	time_date_delimiter@type
  6546  0581  3000               	movlw	0
  6547  0582  00F3               	movwf	time_date_delimiter@type+1
  6548  0583  0854               	movf	_day_hex,w
  6549  0584  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6550  0589  00E9               	movwf	??_date_settings+2
  6551  058A  0869               	movf	??_date_settings+2,w
  6552  058B  00D4               	movwf	_day_hex
  6553                           
  6554                           ;Button_src.c: 460:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6555  058C  3021               	movlw	33
  6556  058D  00E7               	movwf	??_date_settings
  6557  058E  0867               	movf	??_date_settings,w
  6558  058F  00F0               	movwf	time_date_delimiter@hex
  6559  0590  304A               	movlw	74
  6560  0591  00E8               	movwf	??_date_settings+1
  6561  0592  0868               	movf	??_date_settings+1,w
  6562  0593  00F1               	movwf	time_date_delimiter@limiter
  6563  0594  3002               	movlw	2
  6564  0595  00F2               	movwf	time_date_delimiter@type
  6565  0596  3000               	movlw	0
  6566  0597  00F3               	movwf	time_date_delimiter@type+1
  6567  0598  0854               	movf	_day_hex,w
  6568  0599  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6569  059E  00E9               	movwf	??_date_settings+2
  6570  059F  0869               	movf	??_date_settings+2,w
  6571  05A0  00D4               	movwf	_day_hex
  6572                           
  6573                           ;Button_src.c: 461:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6574  05A1  3011               	movlw	17
  6575  05A2  00E7               	movwf	??_date_settings
  6576  05A3  0867               	movf	??_date_settings,w
  6577  05A4  00F0               	movwf	time_date_delimiter@hex
  6578  05A5  3039               	movlw	57
  6579  05A6  00E8               	movwf	??_date_settings+1
  6580  05A7  0868               	movf	??_date_settings+1,w
  6581  05A8  00F1               	movwf	time_date_delimiter@limiter
  6582  05A9  3002               	movlw	2
  6583  05AA  00F2               	movwf	time_date_delimiter@type
  6584  05AB  3000               	movlw	0
  6585  05AC  00F3               	movwf	time_date_delimiter@type+1
  6586  05AD  0854               	movf	_day_hex,w
  6587  05AE  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6588  05B3  00E9               	movwf	??_date_settings+2
  6589  05B4  0869               	movf	??_date_settings+2,w
  6590  05B5  00D4               	movwf	_day_hex
  6591                           
  6592                           ;Button_src.c: 462:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6593  05B6  3021               	movlw	33
  6594  05B7  00E7               	movwf	??_date_settings
  6595  05B8  0867               	movf	??_date_settings,w
  6596  05B9  00F0               	movwf	time_date_delimiter@hex
  6597  05BA  304A               	movlw	74
  6598  05BB  00E8               	movwf	??_date_settings+1
  6599  05BC  0868               	movf	??_date_settings+1,w
  6600  05BD  00F1               	movwf	time_date_delimiter@limiter
  6601  05BE  3002               	movlw	2
  6602  05BF  00F2               	movwf	time_date_delimiter@type
  6603  05C0  3000               	movlw	0
  6604  05C1  00F3               	movwf	time_date_delimiter@type+1
  6605  05C2  0854               	movf	_day_hex,w
  6606  05C3  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6607  05C8  00E9               	movwf	??_date_settings+2
  6608  05C9  0869               	movf	??_date_settings+2,w
  6609  05CA  00D4               	movwf	_day_hex
  6610                           
  6611                           ;Button_src.c: 463:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6612  05CB  3031               	movlw	49
  6613  05CC  00E7               	movwf	??_date_settings
  6614  05CD  0867               	movf	??_date_settings,w
  6615  05CE  00F0               	movwf	time_date_delimiter@hex
  6616  05CF  3059               	movlw	89
  6617  05D0  00E8               	movwf	??_date_settings+1
  6618  05D1  0868               	movf	??_date_settings+1,w
  6619  05D2  00F1               	movwf	time_date_delimiter@limiter
  6620  05D3  3002               	movlw	2
  6621  05D4  00F2               	movwf	time_date_delimiter@type
  6622  05D5  3000               	movlw	0
  6623  05D6  00F3               	movwf	time_date_delimiter@type+1
  6624  05D7  0854               	movf	_day_hex,w
  6625  05D8  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6626  05DD  00E9               	movwf	??_date_settings+2
  6627  05DE  0869               	movf	??_date_settings+2,w
  6628  05DF  00D4               	movwf	_day_hex
  6629                           
  6630                           ;Button_src.c: 465:                     c = time_date_delimiter(c,0x11,'9',3);
  6631  05E0  3011               	movlw	17
  6632  05E1  00E7               	movwf	??_date_settings
  6633  05E2  0867               	movf	??_date_settings,w
  6634  05E3  00F0               	movwf	time_date_delimiter@hex
  6635  05E4  3039               	movlw	57
  6636  05E5  00E8               	movwf	??_date_settings+1
  6637  05E6  0868               	movf	??_date_settings+1,w
  6638  05E7  00F1               	movwf	time_date_delimiter@limiter
  6639  05E8  3003               	movlw	3
  6640  05E9  00F2               	movwf	time_date_delimiter@type
  6641  05EA  3000               	movlw	0
  6642  05EB  00F3               	movwf	time_date_delimiter@type+1
  6643  05EC  0855               	movf	_c,w
  6644  05ED  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6645  05F2  00E9               	movwf	??_date_settings+2
  6646  05F3  0869               	movf	??_date_settings+2,w
  6647  05F4  00D5               	movwf	_c
  6648                           
  6649                           ;Button_src.c: 466:                     c = time_date_delimiter(c,0x21,'J',3);
  6650  05F5  3021               	movlw	33
  6651  05F6  00E7               	movwf	??_date_settings
  6652  05F7  0867               	movf	??_date_settings,w
  6653  05F8  00F0               	movwf	time_date_delimiter@hex
  6654  05F9  304A               	movlw	74
  6655  05FA  00E8               	movwf	??_date_settings+1
  6656  05FB  0868               	movf	??_date_settings+1,w
  6657  05FC  00F1               	movwf	time_date_delimiter@limiter
  6658  05FD  3003               	movlw	3
  6659  05FE  00F2               	movwf	time_date_delimiter@type
  6660  05FF  3000               	movlw	0
  6661  0600  00F3               	movwf	time_date_delimiter@type+1
  6662  0601  0855               	movf	_c,w
  6663  0602  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6664  0607  00E9               	movwf	??_date_settings+2
  6665  0608  0869               	movf	??_date_settings+2,w
  6666  0609  00D5               	movwf	_c
  6667                           
  6668                           ;Button_src.c: 467:                     c = time_date_delimiter(c,0x11,'9',3);
  6669  060A  3011               	movlw	17
  6670  060B  00E7               	movwf	??_date_settings
  6671  060C  0867               	movf	??_date_settings,w
  6672  060D  00F0               	movwf	time_date_delimiter@hex
  6673  060E  3039               	movlw	57
  6674  060F  00E8               	movwf	??_date_settings+1
  6675  0610  0868               	movf	??_date_settings+1,w
  6676  0611  00F1               	movwf	time_date_delimiter@limiter
  6677  0612  3003               	movlw	3
  6678  0613  00F2               	movwf	time_date_delimiter@type
  6679  0614  3000               	movlw	0
  6680  0615  00F3               	movwf	time_date_delimiter@type+1
  6681  0616  0855               	movf	_c,w
  6682  0617  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6683  061C  00E9               	movwf	??_date_settings+2
  6684  061D  0869               	movf	??_date_settings+2,w
  6685  061E  00D5               	movwf	_c
  6686                           
  6687                           ;Button_src.c: 468:                     c = time_date_delimiter(c,0x21,'J',3);
  6688  061F  3021               	movlw	33
  6689  0620  00E7               	movwf	??_date_settings
  6690  0621  0867               	movf	??_date_settings,w
  6691  0622  00F0               	movwf	time_date_delimiter@hex
  6692  0623  304A               	movlw	74
  6693  0624  00E8               	movwf	??_date_settings+1
  6694  0625  0868               	movf	??_date_settings+1,w
  6695  0626  00F1               	movwf	time_date_delimiter@limiter
  6696  0627  3003               	movlw	3
  6697  0628  00F2               	movwf	time_date_delimiter@type
  6698  0629  3000               	movlw	0
  6699  062A  00F3               	movwf	time_date_delimiter@type+1
  6700  062B  0855               	movf	_c,w
  6701  062C  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6702  0631  00E9               	movwf	??_date_settings+2
  6703  0632  0869               	movf	??_date_settings+2,w
  6704  0633  00D5               	movwf	_c
  6705                           
  6706                           ;Button_src.c: 469:                     c = time_date_delimiter(c,0x31,'Y',3);
  6707  0634  3031               	movlw	49
  6708  0635  00E7               	movwf	??_date_settings
  6709  0636  0867               	movf	??_date_settings,w
  6710  0637  00F0               	movwf	time_date_delimiter@hex
  6711  0638  3059               	movlw	89
  6712  0639  00E8               	movwf	??_date_settings+1
  6713  063A  0868               	movf	??_date_settings+1,w
  6714  063B  00F1               	movwf	time_date_delimiter@limiter
  6715  063C  3003               	movlw	3
  6716  063D  00F2               	movwf	time_date_delimiter@type
  6717  063E  3000               	movlw	0
  6718  063F  00F3               	movwf	time_date_delimiter@type+1
  6719  0640  0855               	movf	_c,w
  6720  0641  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6721  0646  00E9               	movwf	??_date_settings+2
  6722  0647  0869               	movf	??_date_settings+2,w
  6723  0648  00D5               	movwf	_c
  6724                           
  6725                           ;Button_src.c: 470:                     c = time_date_delimiter(c,0x41,'j',3);
  6726  0649  3041               	movlw	65
  6727  064A  00E7               	movwf	??_date_settings
  6728  064B  0867               	movf	??_date_settings,w
  6729  064C  00F0               	movwf	time_date_delimiter@hex
  6730  064D  306A               	movlw	106
  6731  064E  00E8               	movwf	??_date_settings+1
  6732  064F  0868               	movf	??_date_settings+1,w
  6733  0650  00F1               	movwf	time_date_delimiter@limiter
  6734  0651  3003               	movlw	3
  6735  0652  00F2               	movwf	time_date_delimiter@type
  6736  0653  3000               	movlw	0
  6737  0654  00F3               	movwf	time_date_delimiter@type+1
  6738  0655  0855               	movf	_c,w
  6739  0656  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6740  065B  00E9               	movwf	??_date_settings+2
  6741  065C  0869               	movf	??_date_settings+2,w
  6742  065D  00D5               	movwf	_c
  6743                           
  6744                           ;Button_src.c: 471:                     c = time_date_delimiter(c,0x51,'z',3);
  6745  065E  3051               	movlw	81
  6746  065F  00E7               	movwf	??_date_settings
  6747  0660  0867               	movf	??_date_settings,w
  6748  0661  00F0               	movwf	time_date_delimiter@hex
  6749  0662  307A               	movlw	122
  6750  0663  00E8               	movwf	??_date_settings+1
  6751  0664  0868               	movf	??_date_settings+1,w
  6752  0665  00F1               	movwf	time_date_delimiter@limiter
  6753  0666  3003               	movlw	3
  6754  0667  00F2               	movwf	time_date_delimiter@type
  6755  0668  3000               	movlw	0
  6756  0669  00F3               	movwf	time_date_delimiter@type+1
  6757  066A  0855               	movf	_c,w
  6758  066B  120A  158A  2453  120A  118A  	fcall	_time_date_delimiter
  6759  0670  00E9               	movwf	??_date_settings+2
  6760  0671  0869               	movf	??_date_settings+2,w
  6761  0672  00D5               	movwf	_c
  6762                           
  6763                           ;Button_src.c: 473:               if(stats==0)
  6764  0673  0833               	movf	_stats,w
  6765  0674  0434               	iorwf	_stats+1,w
  6766  0675  1D03               	btfss	3,2
  6767  0676  2E79               	goto	l4006
  6768                           
  6769                           ;Button_src.c: 474:                  table[4] = prev_hex;
  6770  0677  0852               	movf	_prev_hex,w
  6771  0678  2E7E               	goto	L2
  6772  0679                     l4006:	
  6773  0679  0333               	decf	_stats,w
  6774  067A  0434               	iorwf	_stats+1,w
  6775  067B  1D03               	btfss	3,2
  6776  067C  2E82               	goto	l651
  6777                           
  6778                           ;Button_src.c: 476:                  table[4]= a;
  6779  067D  0857               	movf	_a,w
  6780  067E                     L2:	
  6781  067E  00E7               	movwf	??_date_settings
  6782  067F  0867               	movf	??_date_settings,w
  6783  0680  1683               	bsf	3,5	;RP0=1, select bank1
  6784  0681  00A4               	movwf	(_table^(0+128)+4)
  6785  0682                     l651:	
  6786                           
  6787                           ;Button_src.c: 477:               table[6] = c;
  6788  0682  1283               	bcf	3,5	;RP0=0, select bank0
  6789  0683  0855               	movf	_c,w
  6790  0684  00E7               	movwf	??_date_settings
  6791  0685  0867               	movf	??_date_settings,w
  6792  0686  1683               	bsf	3,5	;RP0=1, select bank1
  6793  0687  00A6               	movwf	(_table^(0+128)+6)
  6794                           
  6795                           ;Button_src.c: 478:               table[3] = day_hex;
  6796  0688  1283               	bcf	3,5	;RP0=0, select bank0
  6797  0689  0854               	movf	_day_hex,w
  6798  068A  00E7               	movwf	??_date_settings
  6799  068B  0867               	movf	??_date_settings,w
  6800  068C  1683               	bsf	3,5	;RP0=1, select bank1
  6801  068D  00A3               	movwf	(_table^(0+128)+3)
  6802                           
  6803                           ;Button_src.c: 479:              write_cmd(0x88);
  6804  068E  3088               	movlw	136
  6805  068F  160A  118A  2567  120A  118A  	fcall	_write_cmd
  6806                           
  6807                           ;Button_src.c: 481:                   RC0 = 0;
  6808  0694  1007               	bcf	7,0	;volatile
  6809                           
  6810                           ;Button_src.c: 482:                   RC1 = 1;
  6811  0695  1487               	bsf	7,1	;volatile
  6812                           
  6813                           ;Button_src.c: 483:                   RC2 = 1;
  6814  0696  1507               	bsf	7,2	;volatile
  6815                           
  6816                           ;Button_src.c: 484:                   RC3 = 1;
  6817  0697  1587               	bsf	7,3	;volatile
  6818                           
  6819                           ;Button_src.c: 486:                     if (RC6 == 0 ){
  6820  0698  1B07               	btfsc	7,6	;volatile
  6821  0699  2EB3               	goto	l653
  6822                           
  6823                           ;Button_src.c: 487:                           a = 0x00;
  6824  069A  01D7               	clrf	_a
  6825                           
  6826                           ;Button_src.c: 488:                           c = 0x00;
  6827  069B  01D5               	clrf	_c
  6828                           
  6829                           ;Button_src.c: 489:                           day_hex = 0x00;
  6830  069C  01D4               	clrf	_day_hex
  6831                           
  6832                           ;Button_src.c: 490:                           day_high = 0;
  6833  069D  01B7               	clrf	_day_high
  6834  069E  01B8               	clrf	_day_high+1
  6835                           
  6836                           ;Button_src.c: 491:                           day_low = 0;
  6837  069F  01B9               	clrf	_day_low
  6838  06A0  01BA               	clrf	_day_low+1
  6839                           
  6840                           ;Button_src.c: 492:                           x = 0;
  6841  06A1  01BF               	clrf	_x
  6842  06A2  01C0               	clrf	_x+1
  6843                           
  6844                           ;Button_src.c: 493:                           y = 0;
  6845  06A3  01BD               	clrf	_y
  6846  06A4  01BE               	clrf	_y+1
  6847                           
  6848                           ;Button_src.c: 494:                           w = 0;
  6849  06A5  01C1               	clrf	_w
  6850  06A6  01C2               	clrf	_w+1
  6851                           
  6852                           ;Button_src.c: 495:                           t = 0;
  6853  06A7  01C3               	clrf	_t
  6854  06A8  01C4               	clrf	_t+1
  6855                           
  6856                           ;Button_src.c: 496:                           write_cmd(0x1);
  6857  06A9  3001               	movlw	1
  6858  06AA  160A  118A  2567  120A  118A  	fcall	_write_cmd
  6859                           
  6860                           ;Button_src.c: 497:                           set_time();
  6861  06AF  160A  118A  2674   	fcall	_set_time
  6862  06B2  0008               	return
  6863  06B3                     l653:	
  6864                           ;Button_src.c: 499:                             }
  6865                           
  6866                           
  6867                           ;Button_src.c: 500:                   RC0 = 0;
  6868  06B3  1007               	bcf	7,0	;volatile
  6869                           
  6870                           ;Button_src.c: 501:                   RC1 = 1;
  6871  06B4  1487               	bsf	7,1	;volatile
  6872                           
  6873                           ;Button_src.c: 502:                   RC2 = 1;
  6874  06B5  1507               	bsf	7,2	;volatile
  6875                           
  6876                           ;Button_src.c: 503:                   RC3 = 1;
  6877  06B6  1587               	bsf	7,3	;volatile
  6878                           
  6879                           ;Button_src.c: 504:                   z = modulus_func(z,3);
  6880  06B7  083C               	movf	_z+1,w
  6881  06B8  00F8               	movwf	modulus_func@x+1
  6882  06B9  083B               	movf	_z,w
  6883  06BA  00F7               	movwf	modulus_func@x
  6884  06BB  3003               	movlw	3
  6885  06BC  00F9               	movwf	modulus_func@y
  6886  06BD  3000               	movlw	0
  6887  06BE  00FA               	movwf	modulus_func@y+1
  6888  06BF  160A  118A  24DD  120A  118A  	fcall	_modulus_func
  6889  06C4  0878               	movf	?_modulus_func+1,w
  6890  06C5  00BC               	movwf	_z+1
  6891  06C6  0877               	movf	?_modulus_func,w
  6892  06C7  00BB               	movwf	_z
  6893                           
  6894                           ;Button_src.c: 505:                   if(RC4 == 0 && z ==0){
  6895  06C8  1A07               	btfsc	7,4	;volatile
  6896  06C9  2F09               	goto	l4042
  6897  06CA  083B               	movf	_z,w
  6898  06CB  043C               	iorwf	_z+1,w
  6899  06CC  1D03               	btfss	3,2
  6900  06CD  2F09               	goto	l4042
  6901                           
  6902                           ;Button_src.c: 506:                       write_cmd(0x90);
  6903  06CE  3090               	movlw	144
  6904  06CF  160A  118A  2567  120A  118A  	fcall	_write_cmd
  6905                           
  6906                           ;Button_src.c: 507:                       write_char('D');
  6907  06D4  3044               	movlw	68
  6908  06D5  160A  118A  2550  120A  118A  	fcall	_write_char
  6909                           
  6910                           ;Button_src.c: 508:                       write_char('a');
  6911  06DA  3061               	movlw	97
  6912  06DB  160A  118A  2550  120A  118A  	fcall	_write_char
  6913                           
  6914                           ;Button_src.c: 509:                       write_char('y');
  6915  06E0  3079               	movlw	121
  6916  06E1  160A  118A  2550  120A  118A  	fcall	_write_char
  6917                           
  6918                           ;Button_src.c: 510:                       write_char(':');
  6919  06E6  303A               	movlw	58
  6920  06E7  160A  118A  2550  120A  118A  	fcall	_write_char
  6921                           
  6922                           ;Button_src.c: 511:                       write_char(' ');
  6923  06EC  3020               	movlw	32
  6924  06ED  160A  118A  2550  120A  118A  	fcall	_write_char
  6925                           
  6926                           ;Button_src.c: 512:                       write_char(' ');
  6927  06F2  3020               	movlw	32
  6928  06F3  160A  118A  2550  120A  118A  	fcall	_write_char
  6929                           
  6930                           ;Button_src.c: 513:                       b = 'y';
  6931  06F8  3079               	movlw	121
  6932  06F9  00E7               	movwf	??_date_settings
  6933  06FA  0867               	movf	??_date_settings,w
  6934  06FB  00D6               	movwf	_b
  6935                           
  6936                           ;Button_src.c: 515:                       button_delay();
  6937  06FC  160A  118A  24FE  120A  118A  	fcall	_button_delay
  6938                           
  6939                           ;Button_src.c: 516:                       z++;
  6940  0701  3001               	movlw	1
  6941  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6942  0703  1303               	bcf	3,6	;RP1=0, select bank0
  6943  0704  07BB               	addwf	_z,f
  6944  0705  1803               	skipnc
  6945  0706  0ABC               	incf	_z+1,f
  6946  0707  3000               	movlw	0
  6947  0708  07BC               	addwf	_z+1,f
  6948  0709                     l4042:	
  6949                           
  6950                           ;Button_src.c: 518:                   RC0 = 0;
  6951  0709  1007               	bcf	7,0	;volatile
  6952                           
  6953                           ;Button_src.c: 519:                   RC1 = 1;
  6954  070A  1487               	bsf	7,1	;volatile
  6955                           
  6956                           ;Button_src.c: 520:                   RC2 = 1;
  6957  070B  1507               	bsf	7,2	;volatile
  6958                           
  6959                           ;Button_src.c: 521:                   RC3 = 1;
  6960  070C  1587               	bsf	7,3	;volatile
  6961                           
  6962                           ;Button_src.c: 522:                   if(RC4 == 0&& z ==1){
  6963  070D  1A07               	btfsc	7,4	;volatile
  6964  070E  2F4C               	goto	l4072
  6965  070F  033B               	decf	_z,w
  6966  0710  043C               	iorwf	_z+1,w
  6967  0711  1D03               	btfss	3,2
  6968  0712  2F4C               	goto	l4072
  6969                           
  6970                           ;Button_src.c: 523:                       z++;
  6971  0713  3001               	movlw	1
  6972  0714  07BB               	addwf	_z,f
  6973  0715  1803               	skipnc
  6974  0716  0ABC               	incf	_z+1,f
  6975  0717  3000               	movlw	0
  6976  0718  07BC               	addwf	_z+1,f
  6977                           
  6978                           ;Button_src.c: 524:                       button_delay();
  6979  0719  160A  118A  24FE  120A  118A  	fcall	_button_delay
  6980                           
  6981                           ;Button_src.c: 526:                       write_cmd(0x90);
  6982  071E  3090               	movlw	144
  6983  071F  160A  118A  2567  120A  118A  	fcall	_write_cmd
  6984                           
  6985                           ;Button_src.c: 527:                       write_char('M');
  6986  0724  304D               	movlw	77
  6987  0725  160A  118A  2550  120A  118A  	fcall	_write_char
  6988                           
  6989                           ;Button_src.c: 528:                       write_char('o');
  6990  072A  306F               	movlw	111
  6991  072B  160A  118A  2550  120A  118A  	fcall	_write_char
  6992                           
  6993                           ;Button_src.c: 529:                       write_char('n');
  6994  0730  306E               	movlw	110
  6995  0731  160A  118A  2550  120A  118A  	fcall	_write_char
  6996                           
  6997                           ;Button_src.c: 530:                       write_char('t');
  6998  0736  3074               	movlw	116
  6999  0737  160A  118A  2550  120A  118A  	fcall	_write_char
  7000                           
  7001                           ;Button_src.c: 531:                       write_char('h');
  7002  073C  3068               	movlw	104
  7003  073D  160A  118A  2550  120A  118A  	fcall	_write_char
  7004                           
  7005                           ;Button_src.c: 532:                       write_char(':');
  7006  0742  303A               	movlw	58
  7007  0743  160A  118A  2550  120A  118A  	fcall	_write_char
  7008                           
  7009                           ;Button_src.c: 533:                       b = 'x';
  7010  0748  3078               	movlw	120
  7011  0749  00E7               	movwf	??_date_settings
  7012  074A  0867               	movf	??_date_settings,w
  7013  074B  00D6               	movwf	_b
  7014  074C                     l4072:	
  7015                           
  7016                           ;Button_src.c: 536:                   RC0 = 0;
  7017  074C  1007               	bcf	7,0	;volatile
  7018                           
  7019                           ;Button_src.c: 537:                   RC1 = 1;
  7020  074D  1487               	bsf	7,1	;volatile
  7021                           
  7022                           ;Button_src.c: 538:                   RC2 = 1;
  7023  074E  1507               	bsf	7,2	;volatile
  7024                           
  7025                           ;Button_src.c: 539:                   RC3 = 1;
  7026  074F  1587               	bsf	7,3	;volatile
  7027                           
  7028                           ;Button_src.c: 540:                   if(RC4 == 0&& z ==2){
  7029  0750  1A07               	btfsc	7,4	;volatile
  7030  0751  2F92               	goto	l4102
  7031  0752  3002               	movlw	2
  7032  0753  063B               	xorwf	_z,w
  7033  0754  043C               	iorwf	_z+1,w
  7034  0755  1D03               	btfss	3,2
  7035  0756  2F92               	goto	l4102
  7036                           
  7037                           ;Button_src.c: 541:                       button_delay();
  7038  0757  160A  118A  24FE  120A  118A  	fcall	_button_delay
  7039                           
  7040                           ;Button_src.c: 542:                       z++;
  7041  075C  3001               	movlw	1
  7042  075D  1283               	bcf	3,5	;RP0=0, select bank0
  7043  075E  1303               	bcf	3,6	;RP1=0, select bank0
  7044  075F  07BB               	addwf	_z,f
  7045  0760  1803               	skipnc
  7046  0761  0ABC               	incf	_z+1,f
  7047  0762  3000               	movlw	0
  7048  0763  07BC               	addwf	_z+1,f
  7049                           
  7050                           ;Button_src.c: 544:                       write_cmd(0x90);
  7051  0764  3090               	movlw	144
  7052  0765  160A  118A  2567  120A  118A  	fcall	_write_cmd
  7053                           
  7054                           ;Button_src.c: 545:                       write_char('Y');
  7055  076A  3059               	movlw	89
  7056  076B  160A  118A  2550  120A  118A  	fcall	_write_char
  7057                           
  7058                           ;Button_src.c: 546:                       write_char('e');
  7059  0770  3065               	movlw	101
  7060  0771  160A  118A  2550  120A  118A  	fcall	_write_char
  7061                           
  7062                           ;Button_src.c: 547:                       write_char('a');
  7063  0776  3061               	movlw	97
  7064  0777  160A  118A  2550  120A  118A  	fcall	_write_char
  7065                           
  7066                           ;Button_src.c: 548:                       write_char('r');
  7067  077C  3072               	movlw	114
  7068  077D  160A  118A  2550  120A  118A  	fcall	_write_char
  7069                           
  7070                           ;Button_src.c: 549:                       write_char(':');
  7071  0782  303A               	movlw	58
  7072  0783  160A  118A  2550  120A  118A  	fcall	_write_char
  7073                           
  7074                           ;Button_src.c: 550:                       write_char(' ');
  7075  0788  3020               	movlw	32
  7076  0789  160A  118A  2550  120A  118A  	fcall	_write_char
  7077                           
  7078                           ;Button_src.c: 551:                       b = 'z';
  7079  078E  307A               	movlw	122
  7080  078F  00E7               	movwf	??_date_settings
  7081  0790  0867               	movf	??_date_settings,w
  7082  0791  00D6               	movwf	_b
  7083  0792                     l4102:	
  7084                           
  7085                           ;Button_src.c: 554:               write_cmd(0x88);
  7086  0792  3088               	movlw	136
  7087  0793  160A  118A  2567  120A  118A  	fcall	_write_cmd
  7088                           
  7089                           ;Button_src.c: 555:               write_char(day_high + '0');
  7090  0798  0837               	movf	_day_high,w
  7091  0799  3E30               	addlw	48
  7092  079A  160A  118A  2550  120A  118A  	fcall	_write_char
  7093                           
  7094                           ;Button_src.c: 556:               write_char(day_low + '0');
  7095  079F  0839               	movf	_day_low,w
  7096  07A0  3E30               	addlw	48
  7097  07A1  160A  118A  2550  120A  118A  	fcall	_write_char
  7098                           
  7099                           ;Button_src.c: 557:               write_char('/');
  7100  07A6  302F               	movlw	47
  7101  07A7  160A  118A  2550  120A  118A  	fcall	_write_char
  7102                           
  7103                           ;Button_src.c: 558:               write_char(y + '0');
  7104  07AC  083D               	movf	_y,w
  7105  07AD  3E30               	addlw	48
  7106  07AE  160A  118A  2550  120A  118A  	fcall	_write_char
  7107                           
  7108                           ;Button_src.c: 559:               write_char(x + '0');
  7109  07B3  083F               	movf	_x,w
  7110  07B4  3E30               	addlw	48
  7111  07B5  160A  118A  2550  120A  118A  	fcall	_write_char
  7112                           
  7113                           ;Button_src.c: 560:               write_char('/');
  7114  07BA  302F               	movlw	47
  7115  07BB  160A  118A  2550  120A  118A  	fcall	_write_char
  7116                           
  7117                           ;Button_src.c: 561:               write_char(w+ '0');
  7118  07C0  0841               	movf	_w,w
  7119  07C1  3E30               	addlw	48
  7120  07C2  160A  118A  2550  120A  118A  	fcall	_write_char
  7121                           
  7122                           ;Button_src.c: 562:               write_char(t+ '0');
  7123  07C7  0843               	movf	_t,w
  7124  07C8  3E30               	addlw	48
  7125  07C9  160A  118A  2550  120A  118A  	fcall	_write_char
  7126                           
  7127                           ;Button_src.c: 565:             RC0 = 0;
  7128  07CE  1007               	bcf	7,0	;volatile
  7129                           
  7130                           ;Button_src.c: 566:             RC1 = 1;
  7131  07CF  1487               	bsf	7,1	;volatile
  7132                           
  7133                           ;Button_src.c: 567:             RC2 = 1;
  7134  07D0  1507               	bsf	7,2	;volatile
  7135                           
  7136                           ;Button_src.c: 568:             RC3 = 1;
  7137  07D1  1587               	bsf	7,3	;volatile
  7138                           
  7139                           ;Button_src.c: 569:             if (RC7 == 0 ){
  7140  07D2  1B87               	btfsc	7,7	;volatile
  7141  07D3  2BA9               	goto	l630
  7142                           
  7143                           ;Button_src.c: 570:             a = 0x00;
  7144  07D4  01D7               	clrf	_a
  7145                           
  7146                           ;Button_src.c: 571:             c = 0x00;
  7147  07D5  01D5               	clrf	_c
  7148                           
  7149                           ;Button_src.c: 572:             day_hex = 0x00;
  7150  07D6  01D4               	clrf	_day_hex
  7151                           
  7152                           ;Button_src.c: 573:             x = 0;
  7153  07D7  01BF               	clrf	_x
  7154  07D8  01C0               	clrf	_x+1
  7155                           
  7156                           ;Button_src.c: 574:             y = 0;
  7157  07D9  01BD               	clrf	_y
  7158  07DA  01BE               	clrf	_y+1
  7159                           
  7160                           ;Button_src.c: 575:             w = 0;
  7161  07DB  01C1               	clrf	_w
  7162  07DC  01C2               	clrf	_w+1
  7163                           
  7164                           ;Button_src.c: 576:             t = 0;
  7165  07DD  01C3               	clrf	_t
  7166  07DE  01C4               	clrf	_t+1
  7167                           
  7168                           ;Button_src.c: 577:             day_high = 0;
  7169  07DF  01B7               	clrf	_day_high
  7170  07E0  01B8               	clrf	_day_high+1
  7171                           
  7172                           ;Button_src.c: 578:             day_low = 0;
  7173  07E1  01B9               	clrf	_day_low
  7174  07E2  01BA               	clrf	_day_low+1
  7175                           
  7176                           ;Button_src.c: 579:             write_cmd(0x1);
  7177  07E3  3001               	movlw	1
  7178  07E4  160A  118A  2567   	fcall	_write_cmd
  7179                           
  7180                           ;Button_src.c: 580:             break;
  7181  07E7  0008               	return
  7182  07E8                     __end_of_date_settings:	
  7183                           
  7184                           	psect	text30
  7185  1567                     __ptext30:	
  7186 ;; *************** function _write_cmd *****************
  7187 ;; Defined at:
  7188 ;;		line 41 in file "LCD_src.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  x               1    wreg     unsigned char 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  x               1    2[COMMON] unsigned char 
  7193 ;;  i               2    0        int 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 300/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7203 ;;      Params:         0       0       0       0       0
  7204 ;;      Locals:         1       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0
  7206 ;;      Totals:         1       0       0       0       0
  7207 ;;Total ram usage:        1 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    1
  7210 ;; This function calls:
  7211 ;;		_delay_screen
  7212 ;; This function is called by:
  7213 ;;		_main
  7214 ;;		_lcd_init
  7215 ;;		_thermometer_threshhold_settings
  7216 ;;		_time_settings
  7217 ;;		_date_settings
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           
  7222                           ;psect for function _write_cmd
  7223  1567                     _write_cmd:	
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7227                           ;write_cmd@x stored from wreg
  7228  1567  00F2               	movwf	write_cmd@x
  7229                           
  7230                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7231  1568  1283               	bcf	3,5	;RP0=0, select bank0
  7232  1569  1303               	bcf	3,6	;RP1=0, select bank0
  7233  156A  1285               	bcf	5,5	;volatile
  7234                           
  7235                           ;LCD_src.c: 45:  RA4=0;
  7236  156B  1205               	bcf	5,4	;volatile
  7237                           
  7238                           ;LCD_src.c: 46:  RA3=0;
  7239  156C  1185               	bcf	5,3	;volatile
  7240                           
  7241                           ;LCD_src.c: 47:  delay_screen();
  7242  156D  160A  118A  2512  160A  118A  	fcall	_delay_screen
  7243                           
  7244                           ;LCD_src.c: 48:  RA3=1;
  7245  1572  1283               	bcf	3,5	;RP0=0, select bank0
  7246  1573  1303               	bcf	3,6	;RP1=0, select bank0
  7247  1574  1585               	bsf	5,3	;volatile
  7248                           
  7249                           ;LCD_src.c: 49:  PORTD=x;
  7250  1575  0872               	movf	write_cmd@x,w
  7251  1576  0088               	movwf	8	;volatile
  7252                           
  7253                           ;LCD_src.c: 50:  delay_screen();
  7254  1577  160A  118A  2512   	fcall	_delay_screen
  7255                           
  7256                           ;LCD_src.c: 51:  RA3=0;
  7257  157A  1283               	bcf	3,5	;RP0=0, select bank0
  7258  157B  1303               	bcf	3,6	;RP1=0, select bank0
  7259  157C  1185               	bcf	5,3	;volatile
  7260  157D  0008               	return
  7261  157E                     __end_of_write_cmd:	
  7262                           
  7263                           	psect	text31
  7264  1550                     __ptext31:	
  7265 ;; *************** function _write_char *****************
  7266 ;; Defined at:
  7267 ;;		line 28 in file "LCD_src.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  x               1    wreg     unsigned char 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  x               1    2[COMMON] unsigned char 
  7272 ;;  i               2    0        int 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  1    wreg      void 
  7275 ;; Registers used:
  7276 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 300/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7282 ;;      Params:         0       0       0       0       0
  7283 ;;      Locals:         1       0       0       0       0
  7284 ;;      Temps:          0       0       0       0       0
  7285 ;;      Totals:         1       0       0       0       0
  7286 ;;Total ram usage:        1 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    1
  7289 ;; This function calls:
  7290 ;;		_delay_screen
  7291 ;; This function is called by:
  7292 ;;		_main
  7293 ;;		_display_temp
  7294 ;;		_display_clock
  7295 ;;		_display_date
  7296 ;;		_thermometer_threshhold_settings
  7297 ;;		_time_settings
  7298 ;;		_date_settings
  7299 ;;		_set_upper_threshold
  7300 ;;		_set_lower_threshold
  7301 ;;		_display_day
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _write_char
  7307  1550                     _write_char:	
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7311                           ;write_char@x stored from wreg
  7312  1550  00F2               	movwf	write_char@x
  7313                           
  7314                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7315  1551  1283               	bcf	3,5	;RP0=0, select bank0
  7316  1552  1303               	bcf	3,6	;RP1=0, select bank0
  7317  1553  1685               	bsf	5,5	;volatile
  7318                           
  7319                           ;LCD_src.c: 32:  RA4=0;
  7320  1554  1205               	bcf	5,4	;volatile
  7321                           
  7322                           ;LCD_src.c: 33:  RA3=0;
  7323  1555  1185               	bcf	5,3	;volatile
  7324                           
  7325                           ;LCD_src.c: 34:  delay_screen();
  7326  1556  160A  118A  2512  160A  118A  	fcall	_delay_screen
  7327                           
  7328                           ;LCD_src.c: 35:  RA3=1;
  7329  155B  1283               	bcf	3,5	;RP0=0, select bank0
  7330  155C  1303               	bcf	3,6	;RP1=0, select bank0
  7331  155D  1585               	bsf	5,3	;volatile
  7332                           
  7333                           ;LCD_src.c: 36:  PORTD= x;
  7334  155E  0872               	movf	write_char@x,w
  7335  155F  0088               	movwf	8	;volatile
  7336                           
  7337                           ;LCD_src.c: 37:  delay_screen();
  7338  1560  160A  118A  2512   	fcall	_delay_screen
  7339                           
  7340                           ;LCD_src.c: 38:  RA3=0;
  7341  1563  1283               	bcf	3,5	;RP0=0, select bank0
  7342  1564  1303               	bcf	3,6	;RP1=0, select bank0
  7343  1565  1185               	bcf	5,3	;volatile
  7344  1566  0008               	return
  7345  1567                     __end_of_write_char:	
  7346                           
  7347                           	psect	text32
  7348  1512                     __ptext32:	
  7349 ;; *************** function _delay_screen *****************
  7350 ;; Defined at:
  7351 ;;		line 70 in file "LCD_src.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  i               2    0[COMMON] int 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  1    wreg      void 
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, btemp+1
  7360 ;; Tracked objects:
  7361 ;;		On entry : 300/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7365 ;;      Params:         0       0       0       0       0
  7366 ;;      Locals:         2       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0
  7368 ;;      Totals:         2       0       0       0       0
  7369 ;;Total ram usage:        2 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; This function calls:
  7372 ;;		Nothing
  7373 ;; This function is called by:
  7374 ;;		_lcd_init
  7375 ;;		_write_char
  7376 ;;		_write_cmd
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           
  7381                           ;psect for function _delay_screen
  7382  1512                     _delay_screen:	
  7383                           
  7384                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7388  1512  01F0               	clrf	delay_screen@i
  7389  1513  01F1               	clrf	delay_screen@i+1
  7390  1514                     l3032:	
  7391  1514  3001               	movlw	1
  7392  1515  07F0               	addwf	delay_screen@i,f
  7393  1516  1803               	skipnc
  7394  1517  0AF1               	incf	delay_screen@i+1,f
  7395  1518  3000               	movlw	0
  7396  1519  07F1               	addwf	delay_screen@i+1,f
  7397  151A  0871               	movf	delay_screen@i+1,w
  7398  151B  3A80               	xorlw	128
  7399  151C  00FF               	movwf	127
  7400  151D  3080               	movlw	128
  7401  151E  027F               	subwf	127,w
  7402  151F  1D03               	skipz
  7403  1520  2D23               	goto	u2025
  7404  1521  3005               	movlw	5
  7405  1522  0270               	subwf	delay_screen@i,w
  7406  1523                     u2025:	
  7407  1523  1803               	btfsc	3,0
  7408  1524  0008               	return
  7409  1525  2D14               	goto	l3032
  7410  1526                     __end_of_delay_screen:	
  7411                           
  7412                           	psect	text33
  7413  14BF                     __ptext33:	
  7414 ;; *************** function _time_date_hex_terminator *****************
  7415 ;; Defined at:
  7416 ;;		line 91 in file "math_src.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  val             1    wreg     unsigned char 
  7419 ;;  limiter         1    0[COMMON] unsigned char 
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  val             1    3[COMMON] unsigned char 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;                  1    wreg      unsigned char 
  7424 ;; Registers used:
  7425 ;;		wreg, status,2
  7426 ;; Tracked objects:
  7427 ;;		On entry : 300/0
  7428 ;;		On exit  : 300/0
  7429 ;;		Unchanged: 300/0
  7430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7431 ;;      Params:         1       0       0       0       0
  7432 ;;      Locals:         1       0       0       0       0
  7433 ;;      Temps:          2       0       0       0       0
  7434 ;;      Totals:         4       0       0       0       0
  7435 ;;Total ram usage:        4 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_time_settings
  7441 ;;		_date_settings
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _time_date_hex_terminator
  7447  14BF                     _time_date_hex_terminator:	
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7451                           ;time_date_hex_terminator@val stored from wreg
  7452  14BF  00F3               	movwf	time_date_hex_terminator@val
  7453                           
  7454                           ;math_src.c: 92:     if((val + '0') == limiter){
  7455  14C0  0873               	movf	time_date_hex_terminator@val,w
  7456  14C1  3E30               	addlw	48
  7457  14C2  00F1               	movwf	??_time_date_hex_terminator
  7458  14C3  3000               	movlw	0
  7459  14C4  1803               	skipnc
  7460  14C5  3001               	movlw	1
  7461  14C6  00F2               	movwf	??_time_date_hex_terminator+1
  7462  14C7  0870               	movf	time_date_hex_terminator@limiter,w
  7463  14C8  0671               	xorwf	??_time_date_hex_terminator,w
  7464  14C9  0472               	iorwf	??_time_date_hex_terminator+1,w
  7465  14CA  1903               	btfsc	3,2
  7466                           
  7467                           ;math_src.c: 93:     val = 0x00;
  7468  14CB  01F3               	clrf	time_date_hex_terminator@val
  7469                           
  7470                           ;math_src.c: 95:     return val;
  7471  14CC  0873               	movf	time_date_hex_terminator@val,w
  7472  14CD  0008               	return
  7473  14CE                     __end_of_time_date_hex_terminator:	
  7474                           
  7475                           	psect	text34
  7476  0C53                     __ptext34:	
  7477 ;; *************** function _time_date_delimiter *****************
  7478 ;; Defined at:
  7479 ;;		line 32 in file "math_src.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  val             1    wreg     unsigned char 
  7482 ;;  hex             1    0[COMMON] unsigned char 
  7483 ;;  limiter         1    1[COMMON] unsigned char 
  7484 ;;  type            2    2[COMMON] int 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  val             1    6[COMMON] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      unsigned char 
  7489 ;; Registers used:
  7490 ;;		wreg, status,2, status,0
  7491 ;; Tracked objects:
  7492 ;;		On entry : 300/0
  7493 ;;		On exit  : 300/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7496 ;;      Params:         4       0       0       0       0
  7497 ;;      Locals:         1       0       0       0       0
  7498 ;;      Temps:          2       0       0       0       0
  7499 ;;      Totals:         7       0       0       0       0
  7500 ;;Total ram usage:        7 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; This function calls:
  7503 ;;		Nothing
  7504 ;; This function is called by:
  7505 ;;		_time_settings
  7506 ;;		_date_settings
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _time_date_delimiter
  7512  0C53                     _time_date_delimiter:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7516                           ;time_date_delimiter@val stored from wreg
  7517  0C53  00F6               	movwf	time_date_delimiter@val
  7518                           
  7519                           ;math_src.c: 33:     if((val + '0') == limiter){
  7520  0C54  0876               	movf	time_date_delimiter@val,w
  7521  0C55  3E30               	addlw	48
  7522  0C56  00F4               	movwf	??_time_date_delimiter
  7523  0C57  3000               	movlw	0
  7524  0C58  1803               	skipnc
  7525  0C59  3001               	movlw	1
  7526  0C5A  00F5               	movwf	??_time_date_delimiter+1
  7527  0C5B  0871               	movf	time_date_delimiter@limiter,w
  7528  0C5C  0674               	xorwf	??_time_date_delimiter,w
  7529  0C5D  0475               	iorwf	??_time_date_delimiter+1,w
  7530  0C5E  1D03               	skipz
  7531  0C5F  2DA8               	goto	l3438
  7532                           
  7533                           ;math_src.c: 34:     val = hex;
  7534  0C60  0870               	movf	time_date_delimiter@hex,w
  7535  0C61  00F4               	movwf	??_time_date_delimiter
  7536  0C62  0874               	movf	??_time_date_delimiter,w
  7537  0C63  00F6               	movwf	time_date_delimiter@val
  7538                           
  7539                           ;math_src.c: 35:     stats=0;
  7540  0C64  01B3               	clrf	_stats
  7541  0C65  01B4               	clrf	_stats+1
  7542                           
  7543                           ;math_src.c: 36:     if(limiter == '9' && type ==1)
  7544  0C66  3039               	movlw	57
  7545  0C67  0671               	xorwf	time_date_delimiter@limiter,w
  7546  0C68  1D03               	btfss	3,2
  7547  0C69  2C72               	goto	l3292
  7548  0C6A  0372               	decf	time_date_delimiter@type,w
  7549  0C6B  0473               	iorwf	time_date_delimiter@type+1,w
  7550  0C6C  1D03               	btfss	3,2
  7551  0C6D  2C72               	goto	l3292
  7552                           
  7553                           ;math_src.c: 37:         prev_hex= 0x09;
  7554  0C6E  3009               	movlw	9
  7555  0C6F  00F4               	movwf	??_time_date_delimiter
  7556  0C70  0874               	movf	??_time_date_delimiter,w
  7557  0C71  00D2               	movwf	_prev_hex
  7558  0C72                     l3292:	
  7559                           
  7560                           ;math_src.c: 38:     if(limiter == 'J'&& type ==1)
  7561  0C72  304A               	movlw	74
  7562  0C73  0671               	xorwf	time_date_delimiter@limiter,w
  7563  0C74  1D03               	btfss	3,2
  7564  0C75  2C7E               	goto	l3298
  7565  0C76  0372               	decf	time_date_delimiter@type,w
  7566  0C77  0473               	iorwf	time_date_delimiter@type+1,w
  7567  0C78  1D03               	btfss	3,2
  7568  0C79  2C7E               	goto	l3298
  7569                           
  7570                           ;math_src.c: 39:         prev_hex = 0x19;
  7571  0C7A  3019               	movlw	25
  7572  0C7B  00F4               	movwf	??_time_date_delimiter
  7573  0C7C  0874               	movf	??_time_date_delimiter,w
  7574  0C7D  00D2               	movwf	_prev_hex
  7575  0C7E                     l3298:	
  7576                           
  7577                           ;math_src.c: 40:     if(limiter == 'Y'&& type ==1)
  7578  0C7E  3059               	movlw	89
  7579  0C7F  0671               	xorwf	time_date_delimiter@limiter,w
  7580  0C80  1D03               	btfss	3,2
  7581  0C81  2C8A               	goto	l3304
  7582  0C82  0372               	decf	time_date_delimiter@type,w
  7583  0C83  0473               	iorwf	time_date_delimiter@type+1,w
  7584  0C84  1D03               	btfss	3,2
  7585  0C85  2C8A               	goto	l3304
  7586                           
  7587                           ;math_src.c: 41:         prev_hex = 0x29;
  7588  0C86  3029               	movlw	41
  7589  0C87  00F4               	movwf	??_time_date_delimiter
  7590  0C88  0874               	movf	??_time_date_delimiter,w
  7591  0C89  00D2               	movwf	_prev_hex
  7592  0C8A                     l3304:	
  7593                           
  7594                           ;math_src.c: 42:     if(limiter == 'j'&& type ==1)
  7595  0C8A  306A               	movlw	106
  7596  0C8B  0671               	xorwf	time_date_delimiter@limiter,w
  7597  0C8C  1D03               	btfss	3,2
  7598  0C8D  2C96               	goto	l3310
  7599  0C8E  0372               	decf	time_date_delimiter@type,w
  7600  0C8F  0473               	iorwf	time_date_delimiter@type+1,w
  7601  0C90  1D03               	btfss	3,2
  7602  0C91  2C96               	goto	l3310
  7603                           
  7604                           ;math_src.c: 43:         prev_hex =0x39;
  7605  0C92  3039               	movlw	57
  7606  0C93  00F4               	movwf	??_time_date_delimiter
  7607  0C94  0874               	movf	??_time_date_delimiter,w
  7608  0C95  00D2               	movwf	_prev_hex
  7609  0C96                     l3310:	
  7610                           
  7611                           ;math_src.c: 44:     if(limiter == 'z'&& type ==1)
  7612  0C96  307A               	movlw	122
  7613  0C97  0671               	xorwf	time_date_delimiter@limiter,w
  7614  0C98  1D03               	btfss	3,2
  7615  0C99  2CA2               	goto	l3316
  7616  0C9A  0372               	decf	time_date_delimiter@type,w
  7617  0C9B  0473               	iorwf	time_date_delimiter@type+1,w
  7618  0C9C  1D03               	btfss	3,2
  7619  0C9D  2CA2               	goto	l3316
  7620                           
  7621                           ;math_src.c: 45:         prev_hex = 0x49;
  7622  0C9E  3049               	movlw	73
  7623  0C9F  00F4               	movwf	??_time_date_delimiter
  7624  0CA0  0874               	movf	??_time_date_delimiter,w
  7625  0CA1  00D2               	movwf	_prev_hex
  7626  0CA2                     l3316:	
  7627                           
  7628                           ;math_src.c: 46:     if(limiter == '9' && type ==2)
  7629  0CA2  3039               	movlw	57
  7630  0CA3  0671               	xorwf	time_date_delimiter@limiter,w
  7631  0CA4  1D03               	btfss	3,2
  7632  0CA5  2CAF               	goto	l3322
  7633  0CA6  3002               	movlw	2
  7634  0CA7  0672               	xorwf	time_date_delimiter@type,w
  7635  0CA8  0473               	iorwf	time_date_delimiter@type+1,w
  7636  0CA9  1D03               	btfss	3,2
  7637  0CAA  2CAF               	goto	l3322
  7638                           
  7639                           ;math_src.c: 47:         prev_hex_day= 0x09;
  7640  0CAB  3009               	movlw	9
  7641  0CAC  00F4               	movwf	??_time_date_delimiter
  7642  0CAD  0874               	movf	??_time_date_delimiter,w
  7643  0CAE  00D1               	movwf	_prev_hex_day
  7644  0CAF                     l3322:	
  7645                           
  7646                           ;math_src.c: 48:     if(limiter == 'J'&& type ==2)
  7647  0CAF  304A               	movlw	74
  7648  0CB0  0671               	xorwf	time_date_delimiter@limiter,w
  7649  0CB1  1D03               	btfss	3,2
  7650  0CB2  2CBC               	goto	l3328
  7651  0CB3  3002               	movlw	2
  7652  0CB4  0672               	xorwf	time_date_delimiter@type,w
  7653  0CB5  0473               	iorwf	time_date_delimiter@type+1,w
  7654  0CB6  1D03               	btfss	3,2
  7655  0CB7  2CBC               	goto	l3328
  7656                           
  7657                           ;math_src.c: 49:         prev_hex_day = 0x19;
  7658  0CB8  3019               	movlw	25
  7659  0CB9  00F4               	movwf	??_time_date_delimiter
  7660  0CBA  0874               	movf	??_time_date_delimiter,w
  7661  0CBB  00D1               	movwf	_prev_hex_day
  7662  0CBC                     l3328:	
  7663                           
  7664                           ;math_src.c: 50:     if(limiter == 'Y'&& type ==2)
  7665  0CBC  3059               	movlw	89
  7666  0CBD  0671               	xorwf	time_date_delimiter@limiter,w
  7667  0CBE  1D03               	btfss	3,2
  7668  0CBF  2CC9               	goto	l3334
  7669  0CC0  3002               	movlw	2
  7670  0CC1  0672               	xorwf	time_date_delimiter@type,w
  7671  0CC2  0473               	iorwf	time_date_delimiter@type+1,w
  7672  0CC3  1D03               	btfss	3,2
  7673  0CC4  2CC9               	goto	l3334
  7674                           
  7675                           ;math_src.c: 51:         prev_hex_day = 0x29;
  7676  0CC5  3029               	movlw	41
  7677  0CC6  00F4               	movwf	??_time_date_delimiter
  7678  0CC7  0874               	movf	??_time_date_delimiter,w
  7679  0CC8  00D1               	movwf	_prev_hex_day
  7680  0CC9                     l3334:	
  7681                           
  7682                           ;math_src.c: 52:     if(limiter == 'j'&& type ==2)
  7683  0CC9  306A               	movlw	106
  7684  0CCA  0671               	xorwf	time_date_delimiter@limiter,w
  7685  0CCB  1D03               	btfss	3,2
  7686  0CCC  2CD6               	goto	l3340
  7687  0CCD  3002               	movlw	2
  7688  0CCE  0672               	xorwf	time_date_delimiter@type,w
  7689  0CCF  0473               	iorwf	time_date_delimiter@type+1,w
  7690  0CD0  1D03               	btfss	3,2
  7691  0CD1  2CD6               	goto	l3340
  7692                           
  7693                           ;math_src.c: 53:         prev_hex_day =0x39;
  7694  0CD2  3039               	movlw	57
  7695  0CD3  00F4               	movwf	??_time_date_delimiter
  7696  0CD4  0874               	movf	??_time_date_delimiter,w
  7697  0CD5  00D1               	movwf	_prev_hex_day
  7698  0CD6                     l3340:	
  7699                           
  7700                           ;math_src.c: 54:     if(limiter == 'z'&& type ==2)
  7701  0CD6  307A               	movlw	122
  7702  0CD7  0671               	xorwf	time_date_delimiter@limiter,w
  7703  0CD8  1D03               	btfss	3,2
  7704  0CD9  2CE3               	goto	l3346
  7705  0CDA  3002               	movlw	2
  7706  0CDB  0672               	xorwf	time_date_delimiter@type,w
  7707  0CDC  0473               	iorwf	time_date_delimiter@type+1,w
  7708  0CDD  1D03               	btfss	3,2
  7709  0CDE  2CE3               	goto	l3346
  7710                           
  7711                           ;math_src.c: 55:         prev_hex_day = 0x49;
  7712  0CDF  3049               	movlw	73
  7713  0CE0  00F4               	movwf	??_time_date_delimiter
  7714  0CE1  0874               	movf	??_time_date_delimiter,w
  7715  0CE2  00D1               	movwf	_prev_hex_day
  7716  0CE3                     l3346:	
  7717                           
  7718                           ;math_src.c: 56:     if(limiter == '9' && type ==3)
  7719  0CE3  3039               	movlw	57
  7720  0CE4  0671               	xorwf	time_date_delimiter@limiter,w
  7721  0CE5  1D03               	btfss	3,2
  7722  0CE6  2CF0               	goto	l3352
  7723  0CE7  3003               	movlw	3
  7724  0CE8  0672               	xorwf	time_date_delimiter@type,w
  7725  0CE9  0473               	iorwf	time_date_delimiter@type+1,w
  7726  0CEA  1D03               	btfss	3,2
  7727  0CEB  2CF0               	goto	l3352
  7728                           
  7729                           ;math_src.c: 57:         prev_hex_year= 0x09;
  7730  0CEC  3009               	movlw	9
  7731  0CED  00F4               	movwf	??_time_date_delimiter
  7732  0CEE  0874               	movf	??_time_date_delimiter,w
  7733  0CEF  00D0               	movwf	_prev_hex_year
  7734  0CF0                     l3352:	
  7735                           
  7736                           ;math_src.c: 58:     if(limiter == 'J'&& type ==3)
  7737  0CF0  304A               	movlw	74
  7738  0CF1  0671               	xorwf	time_date_delimiter@limiter,w
  7739  0CF2  1D03               	btfss	3,2
  7740  0CF3  2CFD               	goto	l3358
  7741  0CF4  3003               	movlw	3
  7742  0CF5  0672               	xorwf	time_date_delimiter@type,w
  7743  0CF6  0473               	iorwf	time_date_delimiter@type+1,w
  7744  0CF7  1D03               	btfss	3,2
  7745  0CF8  2CFD               	goto	l3358
  7746                           
  7747                           ;math_src.c: 59:         prev_hex_year = 0x19;
  7748  0CF9  3019               	movlw	25
  7749  0CFA  00F4               	movwf	??_time_date_delimiter
  7750  0CFB  0874               	movf	??_time_date_delimiter,w
  7751  0CFC  00D0               	movwf	_prev_hex_year
  7752  0CFD                     l3358:	
  7753                           
  7754                           ;math_src.c: 60:     if(limiter == 'Y'&& type ==3)
  7755  0CFD  3059               	movlw	89
  7756  0CFE  0671               	xorwf	time_date_delimiter@limiter,w
  7757  0CFF  1D03               	btfss	3,2
  7758  0D00  2D0A               	goto	l3364
  7759  0D01  3003               	movlw	3
  7760  0D02  0672               	xorwf	time_date_delimiter@type,w
  7761  0D03  0473               	iorwf	time_date_delimiter@type+1,w
  7762  0D04  1D03               	btfss	3,2
  7763  0D05  2D0A               	goto	l3364
  7764                           
  7765                           ;math_src.c: 61:         prev_hex_year = 0x29;
  7766  0D06  3029               	movlw	41
  7767  0D07  00F4               	movwf	??_time_date_delimiter
  7768  0D08  0874               	movf	??_time_date_delimiter,w
  7769  0D09  00D0               	movwf	_prev_hex_year
  7770  0D0A                     l3364:	
  7771                           
  7772                           ;math_src.c: 62:     if(limiter == 'j'&& type ==3)
  7773  0D0A  306A               	movlw	106
  7774  0D0B  0671               	xorwf	time_date_delimiter@limiter,w
  7775  0D0C  1D03               	btfss	3,2
  7776  0D0D  2D17               	goto	l3370
  7777  0D0E  3003               	movlw	3
  7778  0D0F  0672               	xorwf	time_date_delimiter@type,w
  7779  0D10  0473               	iorwf	time_date_delimiter@type+1,w
  7780  0D11  1D03               	btfss	3,2
  7781  0D12  2D17               	goto	l3370
  7782                           
  7783                           ;math_src.c: 63:         prev_hex_year =0x39;
  7784  0D13  3039               	movlw	57
  7785  0D14  00F4               	movwf	??_time_date_delimiter
  7786  0D15  0874               	movf	??_time_date_delimiter,w
  7787  0D16  00D0               	movwf	_prev_hex_year
  7788  0D17                     l3370:	
  7789                           
  7790                           ;math_src.c: 64:     if(limiter == 'z'&& type ==3)
  7791  0D17  307A               	movlw	122
  7792  0D18  0671               	xorwf	time_date_delimiter@limiter,w
  7793  0D19  1D03               	btfss	3,2
  7794  0D1A  2D24               	goto	l3376
  7795  0D1B  3003               	movlw	3
  7796  0D1C  0672               	xorwf	time_date_delimiter@type,w
  7797  0D1D  0473               	iorwf	time_date_delimiter@type+1,w
  7798  0D1E  1D03               	btfss	3,2
  7799  0D1F  2D24               	goto	l3376
  7800                           
  7801                           ;math_src.c: 65:         prev_hex_year = 0x49;
  7802  0D20  3049               	movlw	73
  7803  0D21  00F4               	movwf	??_time_date_delimiter
  7804  0D22  0874               	movf	??_time_date_delimiter,w
  7805  0D23  00D0               	movwf	_prev_hex_year
  7806  0D24                     l3376:	
  7807                           
  7808                           ;math_src.c: 66:      if(limiter == '9' && type ==4)
  7809  0D24  3039               	movlw	57
  7810  0D25  0671               	xorwf	time_date_delimiter@limiter,w
  7811  0D26  1D03               	btfss	3,2
  7812  0D27  2D31               	goto	l3382
  7813  0D28  3004               	movlw	4
  7814  0D29  0672               	xorwf	time_date_delimiter@type,w
  7815  0D2A  0473               	iorwf	time_date_delimiter@type+1,w
  7816  0D2B  1D03               	btfss	3,2
  7817  0D2C  2D31               	goto	l3382
  7818                           
  7819                           ;math_src.c: 67:         prev_hex_hours= 0x09;
  7820  0D2D  3009               	movlw	9
  7821  0D2E  00F4               	movwf	??_time_date_delimiter
  7822  0D2F  0874               	movf	??_time_date_delimiter,w
  7823  0D30  00CF               	movwf	_prev_hex_hours
  7824  0D31                     l3382:	
  7825                           
  7826                           ;math_src.c: 68:     if(limiter == 'J'&& type ==4)
  7827  0D31  304A               	movlw	74
  7828  0D32  0671               	xorwf	time_date_delimiter@limiter,w
  7829  0D33  1D03               	btfss	3,2
  7830  0D34  2D3E               	goto	l3388
  7831  0D35  3004               	movlw	4
  7832  0D36  0672               	xorwf	time_date_delimiter@type,w
  7833  0D37  0473               	iorwf	time_date_delimiter@type+1,w
  7834  0D38  1D03               	btfss	3,2
  7835  0D39  2D3E               	goto	l3388
  7836                           
  7837                           ;math_src.c: 69:         prev_hex_hours = 0x19;
  7838  0D3A  3019               	movlw	25
  7839  0D3B  00F4               	movwf	??_time_date_delimiter
  7840  0D3C  0874               	movf	??_time_date_delimiter,w
  7841  0D3D  00CF               	movwf	_prev_hex_hours
  7842  0D3E                     l3388:	
  7843                           
  7844                           ;math_src.c: 70:     if(limiter == 'Y'&& type ==4)
  7845  0D3E  3059               	movlw	89
  7846  0D3F  0671               	xorwf	time_date_delimiter@limiter,w
  7847  0D40  1D03               	btfss	3,2
  7848  0D41  2D4B               	goto	l3394
  7849  0D42  3004               	movlw	4
  7850  0D43  0672               	xorwf	time_date_delimiter@type,w
  7851  0D44  0473               	iorwf	time_date_delimiter@type+1,w
  7852  0D45  1D03               	btfss	3,2
  7853  0D46  2D4B               	goto	l3394
  7854                           
  7855                           ;math_src.c: 71:         prev_hex_hours = 0x29;
  7856  0D47  3029               	movlw	41
  7857  0D48  00F4               	movwf	??_time_date_delimiter
  7858  0D49  0874               	movf	??_time_date_delimiter,w
  7859  0D4A  00CF               	movwf	_prev_hex_hours
  7860  0D4B                     l3394:	
  7861                           
  7862                           ;math_src.c: 72:     if(limiter == 'j'&& type ==4)
  7863  0D4B  306A               	movlw	106
  7864  0D4C  0671               	xorwf	time_date_delimiter@limiter,w
  7865  0D4D  1D03               	btfss	3,2
  7866  0D4E  2D58               	goto	l3400
  7867  0D4F  3004               	movlw	4
  7868  0D50  0672               	xorwf	time_date_delimiter@type,w
  7869  0D51  0473               	iorwf	time_date_delimiter@type+1,w
  7870  0D52  1D03               	btfss	3,2
  7871  0D53  2D58               	goto	l3400
  7872                           
  7873                           ;math_src.c: 73:         prev_hex_hours =0x39;
  7874  0D54  3039               	movlw	57
  7875  0D55  00F4               	movwf	??_time_date_delimiter
  7876  0D56  0874               	movf	??_time_date_delimiter,w
  7877  0D57  00CF               	movwf	_prev_hex_hours
  7878  0D58                     l3400:	
  7879                           
  7880                           ;math_src.c: 74:     if(limiter == 'z'&& type ==4)
  7881  0D58  307A               	movlw	122
  7882  0D59  0671               	xorwf	time_date_delimiter@limiter,w
  7883  0D5A  1D03               	btfss	3,2
  7884  0D5B  2D65               	goto	l3406
  7885  0D5C  3004               	movlw	4
  7886  0D5D  0672               	xorwf	time_date_delimiter@type,w
  7887  0D5E  0473               	iorwf	time_date_delimiter@type+1,w
  7888  0D5F  1D03               	btfss	3,2
  7889  0D60  2D65               	goto	l3406
  7890                           
  7891                           ;math_src.c: 75:         prev_hex_hours = 0x49;
  7892  0D61  3049               	movlw	73
  7893  0D62  00F4               	movwf	??_time_date_delimiter
  7894  0D63  0874               	movf	??_time_date_delimiter,w
  7895  0D64  00CF               	movwf	_prev_hex_hours
  7896  0D65                     l3406:	
  7897                           
  7898                           ;math_src.c: 76:      if(limiter == '9' && type ==5)
  7899  0D65  3039               	movlw	57
  7900  0D66  0671               	xorwf	time_date_delimiter@limiter,w
  7901  0D67  1D03               	btfss	3,2
  7902  0D68  2D72               	goto	l3412
  7903  0D69  3005               	movlw	5
  7904  0D6A  0672               	xorwf	time_date_delimiter@type,w
  7905  0D6B  0473               	iorwf	time_date_delimiter@type+1,w
  7906  0D6C  1D03               	btfss	3,2
  7907  0D6D  2D72               	goto	l3412
  7908                           
  7909                           ;math_src.c: 77:         prev_hex_mins= 0x09;
  7910  0D6E  3009               	movlw	9
  7911  0D6F  00F4               	movwf	??_time_date_delimiter
  7912  0D70  0874               	movf	??_time_date_delimiter,w
  7913  0D71  00CE               	movwf	_prev_hex_mins
  7914  0D72                     l3412:	
  7915                           
  7916                           ;math_src.c: 78:     if(limiter == 'J'&& type ==5)
  7917  0D72  304A               	movlw	74
  7918  0D73  0671               	xorwf	time_date_delimiter@limiter,w
  7919  0D74  1D03               	btfss	3,2
  7920  0D75  2D7F               	goto	l3418
  7921  0D76  3005               	movlw	5
  7922  0D77  0672               	xorwf	time_date_delimiter@type,w
  7923  0D78  0473               	iorwf	time_date_delimiter@type+1,w
  7924  0D79  1D03               	btfss	3,2
  7925  0D7A  2D7F               	goto	l3418
  7926                           
  7927                           ;math_src.c: 79:         prev_hex_mins = 0x19;
  7928  0D7B  3019               	movlw	25
  7929  0D7C  00F4               	movwf	??_time_date_delimiter
  7930  0D7D  0874               	movf	??_time_date_delimiter,w
  7931  0D7E  00CE               	movwf	_prev_hex_mins
  7932  0D7F                     l3418:	
  7933                           
  7934                           ;math_src.c: 80:     if(limiter == 'Y'&& type ==5)
  7935  0D7F  3059               	movlw	89
  7936  0D80  0671               	xorwf	time_date_delimiter@limiter,w
  7937  0D81  1D03               	btfss	3,2
  7938  0D82  2D8C               	goto	l3424
  7939  0D83  3005               	movlw	5
  7940  0D84  0672               	xorwf	time_date_delimiter@type,w
  7941  0D85  0473               	iorwf	time_date_delimiter@type+1,w
  7942  0D86  1D03               	btfss	3,2
  7943  0D87  2D8C               	goto	l3424
  7944                           
  7945                           ;math_src.c: 81:         prev_hex_mins = 0x29;
  7946  0D88  3029               	movlw	41
  7947  0D89  00F4               	movwf	??_time_date_delimiter
  7948  0D8A  0874               	movf	??_time_date_delimiter,w
  7949  0D8B  00CE               	movwf	_prev_hex_mins
  7950  0D8C                     l3424:	
  7951                           
  7952                           ;math_src.c: 82:     if(limiter == 'j'&& type ==5)
  7953  0D8C  306A               	movlw	106
  7954  0D8D  0671               	xorwf	time_date_delimiter@limiter,w
  7955  0D8E  1D03               	btfss	3,2
  7956  0D8F  2D99               	goto	l3430
  7957  0D90  3005               	movlw	5
  7958  0D91  0672               	xorwf	time_date_delimiter@type,w
  7959  0D92  0473               	iorwf	time_date_delimiter@type+1,w
  7960  0D93  1D03               	btfss	3,2
  7961  0D94  2D99               	goto	l3430
  7962                           
  7963                           ;math_src.c: 83:         prev_hex_mins =0x39;
  7964  0D95  3039               	movlw	57
  7965  0D96  00F4               	movwf	??_time_date_delimiter
  7966  0D97  0874               	movf	??_time_date_delimiter,w
  7967  0D98  00CE               	movwf	_prev_hex_mins
  7968  0D99                     l3430:	
  7969                           
  7970                           ;math_src.c: 84:     if(limiter == 'z'&& type ==5)
  7971  0D99  307A               	movlw	122
  7972  0D9A  0671               	xorwf	time_date_delimiter@limiter,w
  7973  0D9B  1D03               	btfss	3,2
  7974  0D9C  2DA6               	goto	l3436
  7975  0D9D  3005               	movlw	5
  7976  0D9E  0672               	xorwf	time_date_delimiter@type,w
  7977  0D9F  0473               	iorwf	time_date_delimiter@type+1,w
  7978  0DA0  1D03               	btfss	3,2
  7979  0DA1  2DA6               	goto	l3436
  7980                           
  7981                           ;math_src.c: 85:         prev_hex_mins = 0x49;
  7982  0DA2  3049               	movlw	73
  7983  0DA3  00F4               	movwf	??_time_date_delimiter
  7984  0DA4  0874               	movf	??_time_date_delimiter,w
  7985  0DA5  00CE               	movwf	_prev_hex_mins
  7986  0DA6                     l3436:	
  7987                           
  7988                           ;math_src.c: 86:     val--;
  7989  0DA6  3001               	movlw	1
  7990  0DA7  02F6               	subwf	time_date_delimiter@val,f
  7991  0DA8                     l3438:	
  7992                           
  7993                           ;math_src.c: 88:     return val;
  7994  0DA8  0876               	movf	time_date_delimiter@val,w
  7995  0DA9  0008               	return
  7996  0DAA                     __end_of_time_date_delimiter:	
  7997                           
  7998                           	psect	text35
  7999  1674                     __ptext35:	
  8000 ;; *************** function _set_time *****************
  8001 ;; Defined at:
  8002 ;;		line 15 in file "clock_src.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;		None
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  i               2    5[COMMON] int 
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      void 
  8009 ;; Registers used:
  8010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8011 ;; Tracked objects:
  8012 ;;		On entry : 300/0
  8013 ;;		On exit  : 300/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8016 ;;      Params:         0       0       0       0       0
  8017 ;;      Locals:         2       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0
  8019 ;;      Totals:         2       0       0       0       0
  8020 ;;Total ram usage:        2 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    1
  8023 ;; This function calls:
  8024 ;;		_time_write_1
  8025 ;; This function is called by:
  8026 ;;		_main
  8027 ;;		_time_settings
  8028 ;;		_date_settings
  8029 ;; This function uses a non-reentrant model
  8030 ;;
  8031                           
  8032                           
  8033                           ;psect for function _set_time
  8034  1674                     _set_time:	
  8035                           
  8036                           ;clock_src.c: 17:    int i;;clock_src.c: 18:    RB5=1;
  8037                           
  8038                           ;incstack = 0
  8039                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8040  1674  1686               	bsf	6,5	;volatile
  8041                           
  8042                           ;clock_src.c: 19:    time_write_1(0xbe);
  8043  1675  30BE               	movlw	190
  8044  1676  160A  118A  264E  160A  118A  	fcall	_time_write_1
  8045                           
  8046                           ;clock_src.c: 20:    for(i=0;i<8;i++)
  8047  167B  01F5               	clrf	set_time@i
  8048  167C  01F6               	clrf	set_time@i+1
  8049  167D                     l3068:	
  8050                           
  8051                           ;clock_src.c: 21:      {;clock_src.c: 22:        time_write_1(table[i]);
  8052  167D  0875               	movf	set_time@i,w
  8053  167E  3EA0               	addlw	(low (_table| 0))& (0+255)
  8054  167F  0084               	movwf	4
  8055  1680  1383               	bcf	3,7	;select IRP bank1
  8056  1681  0800               	movf	0,w
  8057  1682  160A  118A  264E  160A  118A  	fcall	_time_write_1
  8058                           
  8059                           ;clock_src.c: 23:      }
  8060  1687  3001               	movlw	1
  8061  1688  07F5               	addwf	set_time@i,f
  8062  1689  1803               	skipnc
  8063  168A  0AF6               	incf	set_time@i+1,f
  8064  168B  3000               	movlw	0
  8065  168C  07F6               	addwf	set_time@i+1,f
  8066  168D  0876               	movf	set_time@i+1,w
  8067  168E  3A80               	xorlw	128
  8068  168F  00FF               	movwf	127
  8069  1690  3080               	movlw	128
  8070  1691  027F               	subwf	127,w
  8071  1692  1D03               	skipz
  8072  1693  2E96               	goto	u2075
  8073  1694  3008               	movlw	8
  8074  1695  0275               	subwf	set_time@i,w
  8075  1696                     u2075:	
  8076  1696  1C03               	skipc
  8077  1697  2E7D               	goto	l3068
  8078                           
  8079                           ;clock_src.c: 24:    RB5=0;
  8080  1698  1283               	bcf	3,5	;RP0=0, select bank0
  8081  1699  1303               	bcf	3,6	;RP1=0, select bank0
  8082  169A  1286               	bcf	6,5	;volatile
  8083  169B  0008               	return
  8084  169C                     __end_of_set_time:	
  8085                           
  8086                           	psect	text36
  8087  164E                     __ptext36:	
  8088 ;; *************** function _time_write_1 *****************
  8089 ;; Defined at:
  8090 ;;		line 116 in file "clock_src.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;  time_tx         1    wreg     unsigned char 
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  time_tx         1    4[COMMON] unsigned char 
  8095 ;;  j               2    2[COMMON] int 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0, btemp+1
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 300/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8105 ;;      Params:         0       0       0       0       0
  8106 ;;      Locals:         3       0       0       0       0
  8107 ;;      Temps:          2       0       0       0       0
  8108 ;;      Totals:         5       0       0       0       0
  8109 ;;Total ram usage:        5 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_ds1302_init
  8115 ;;		_set_time
  8116 ;;		_get_time
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _time_write_1
  8122  164E                     _time_write_1:	
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8126                           ;time_write_1@time_tx stored from wreg
  8127  164E  00F4               	movwf	time_write_1@time_tx
  8128                           
  8129                           ;clock_src.c: 116: void time_write_1(unsigned char time_tx);clock_src.c: 117: {;clock_sr
      +                          c.c: 118:     int j;;clock_src.c: 119:     for(j=0;j<8;j++)
  8130  164F  01F2               	clrf	time_write_1@j
  8131  1650  01F3               	clrf	time_write_1@j+1
  8132  1651                     l374:	
  8133                           
  8134                           ;clock_src.c: 120:    {;clock_src.c: 121:         RB4=0;
  8135  1651  1283               	bcf	3,5	;RP0=0, select bank0
  8136  1652  1303               	bcf	3,6	;RP1=0, select bank0
  8137  1653  1206               	bcf	6,4	;volatile
  8138                           
  8139                           ;clock_src.c: 122:         RB0=0;
  8140  1654  1006               	bcf	6,0	;volatile
  8141                           
  8142                           ;clock_src.c: 123:         if(time_tx&0x01)
  8143  1655  1874               	btfsc	time_write_1@time_tx,0
  8144                           
  8145                           ;clock_src.c: 124:           {;clock_src.c: 125:             RB4=1;
  8146  1656  1606               	bsf	6,4	;volatile
  8147                           
  8148                           ;clock_src.c: 127:         time_tx=time_tx>>1;
  8149  1657  0874               	movf	time_write_1@time_tx,w
  8150  1658  00F0               	movwf	??_time_write_1
  8151  1659  1003               	clrc
  8152  165A  0C70               	rrf	??_time_write_1,w
  8153  165B  00F1               	movwf	??_time_write_1+1
  8154  165C  0871               	movf	??_time_write_1+1,w
  8155  165D  00F4               	movwf	time_write_1@time_tx
  8156                           
  8157                           ;clock_src.c: 128:         RB0=1;
  8158  165E  1406               	bsf	6,0	;volatile
  8159                           
  8160                           ;clock_src.c: 129:     }
  8161  165F  3001               	movlw	1
  8162  1660  07F2               	addwf	time_write_1@j,f
  8163  1661  1803               	skipnc
  8164  1662  0AF3               	incf	time_write_1@j+1,f
  8165  1663  3000               	movlw	0
  8166  1664  07F3               	addwf	time_write_1@j+1,f
  8167  1665  0873               	movf	time_write_1@j+1,w
  8168  1666  3A80               	xorlw	128
  8169  1667  00FF               	movwf	127
  8170  1668  3080               	movlw	128
  8171  1669  027F               	subwf	127,w
  8172  166A  1D03               	skipz
  8173  166B  2E6E               	goto	u2065
  8174  166C  3008               	movlw	8
  8175  166D  0272               	subwf	time_write_1@j,w
  8176  166E                     u2065:	
  8177  166E  1C03               	skipc
  8178  166F  2E51               	goto	l374
  8179                           
  8180                           ;clock_src.c: 130:       RB0=0;
  8181  1670  1283               	bcf	3,5	;RP0=0, select bank0
  8182  1671  1303               	bcf	3,6	;RP1=0, select bank0
  8183  1672  1006               	bcf	6,0	;volatile
  8184  1673  0008               	return
  8185  1674                     __end_of_time_write_1:	
  8186                           
  8187                           	psect	text37
  8188  1606                     __ptext37:	
  8189 ;; *************** function _incrementor *****************
  8190 ;; Defined at:
  8191 ;;		line 10 in file "math_src.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  upper_val       2    0[BANK0 ] int 
  8194 ;;  lower_val       2    2[BANK0 ] int 
  8195 ;;  z               1    4[BANK0 ] unsigned char 
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;		None
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  1    wreg      unsigned char 
  8200 ;; Registers used:
  8201 ;;		wreg, status,2, status,0, pclath, cstack
  8202 ;; Tracked objects:
  8203 ;;		On entry : 300/0
  8204 ;;		On exit  : 300/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8207 ;;      Params:         0       5       0       0       0
  8208 ;;      Locals:         0       0       0       0       0
  8209 ;;      Temps:          2       0       0       0       0
  8210 ;;      Totals:         2       5       0       0       0
  8211 ;;Total ram usage:        7 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    2
  8214 ;; This function calls:
  8215 ;;		_modulus_func
  8216 ;; This function is called by:
  8217 ;;		_thermometer_threshhold_settings
  8218 ;;		_time_settings
  8219 ;;		_date_settings
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           
  8224                           ;psect for function _incrementor
  8225  1606                     _incrementor:	
  8226                           
  8227                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8231  1606  0864               	movf	incrementor@lower_val,w
  8232  1607  3E30               	addlw	48
  8233  1608  00FB               	movwf	??_incrementor
  8234  1609  0865               	movf	incrementor@lower_val+1,w
  8235  160A  1803               	skipnc
  8236  160B  3E01               	addlw	1
  8237  160C  3E00               	addlw	0
  8238  160D  00FC               	movwf	??_incrementor+1
  8239  160E  0866               	movf	incrementor@z,w
  8240  160F  067B               	xorwf	??_incrementor,w
  8241  1610  047C               	iorwf	??_incrementor+1,w
  8242  1611  1D03               	skipz
  8243  1612  2E28               	goto	l3258
  8244                           
  8245                           ;math_src.c: 12:      upper_val++;
  8246  1613  3001               	movlw	1
  8247  1614  07E2               	addwf	incrementor@upper_val,f
  8248  1615  1803               	skipnc
  8249  1616  0AE3               	incf	incrementor@upper_val+1,f
  8250  1617  3000               	movlw	0
  8251  1618  07E3               	addwf	incrementor@upper_val+1,f
  8252                           
  8253                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8254  1619  0863               	movf	incrementor@upper_val+1,w
  8255  161A  00F8               	movwf	modulus_func@x+1
  8256  161B  0862               	movf	incrementor@upper_val,w
  8257  161C  00F7               	movwf	modulus_func@x
  8258  161D  300A               	movlw	10
  8259  161E  00F9               	movwf	modulus_func@y
  8260  161F  3000               	movlw	0
  8261  1620  00FA               	movwf	modulus_func@y+1
  8262  1621  160A  118A  24DD   	fcall	_modulus_func
  8263  1624  0878               	movf	?_modulus_func+1,w
  8264  1625  00E3               	movwf	incrementor@upper_val+1
  8265  1626  0877               	movf	?_modulus_func,w
  8266  1627  00E2               	movwf	incrementor@upper_val
  8267  1628                     l3258:	
  8268                           
  8269                           ;math_src.c: 15:      return upper_val;
  8270  1628  0862               	movf	incrementor@upper_val,w
  8271  1629  0008               	return
  8272  162A                     __end_of_incrementor:	
  8273                           
  8274                           	psect	text38
  8275  14DD                     __ptext38:	
  8276 ;; *************** function _modulus_func *****************
  8277 ;; Defined at:
  8278 ;;		line 5 in file "math_src.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  x               2    7[COMMON] int 
  8281 ;;  y               2    9[COMMON] int 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  2    7[COMMON] int 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0, pclath, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 300/0
  8290 ;;		On exit  : 300/0
  8291 ;;		Unchanged: 300/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8293 ;;      Params:         4       0       0       0       0
  8294 ;;      Locals:         0       0       0       0       0
  8295 ;;      Temps:          0       0       0       0       0
  8296 ;;      Totals:         4       0       0       0       0
  8297 ;;Total ram usage:        4 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    1
  8300 ;; This function calls:
  8301 ;;		___awmod
  8302 ;; This function is called by:
  8303 ;;		_main
  8304 ;;		_thermometer_threshhold_settings
  8305 ;;		_time_settings
  8306 ;;		_date_settings
  8307 ;;		_incrementor
  8308 ;;		_decrementor
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function _modulus_func
  8314  14DD                     _modulus_func:	
  8315                           
  8316                           ;math_src.c: 6:     x = x % y;
  8317                           
  8318                           ;incstack = 0
  8319                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8320  14DD  087A               	movf	modulus_func@y+1,w
  8321  14DE  00F1               	movwf	___awmod@divisor+1
  8322  14DF  0879               	movf	modulus_func@y,w
  8323  14E0  00F0               	movwf	___awmod@divisor
  8324  14E1  0878               	movf	modulus_func@x+1,w
  8325  14E2  00F3               	movwf	___awmod@dividend+1
  8326  14E3  0877               	movf	modulus_func@x,w
  8327  14E4  00F2               	movwf	___awmod@dividend
  8328  14E5  120A  118A  204A   	fcall	___awmod
  8329  14E8  0871               	movf	?___awmod+1,w
  8330  14E9  00F8               	movwf	modulus_func@x+1
  8331  14EA  0870               	movf	?___awmod,w
  8332  14EB  00F7               	movwf	modulus_func@x
  8333                           
  8334                           ;math_src.c: 7:     return x;
  8335  14EC  0008               	return
  8336  14ED                     __end_of_modulus_func:	
  8337                           
  8338                           	psect	text39
  8339  004A                     __ptext39:	
  8340 ;; *************** function ___awmod *****************
  8341 ;; Defined at:
  8342 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  divisor         2    0[COMMON] int 
  8345 ;;  dividend        2    2[COMMON] int 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;  sign            1    6[COMMON] unsigned char 
  8348 ;;  counter         1    5[COMMON] unsigned char 
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  2    0[COMMON] int 
  8351 ;; Registers used:
  8352 ;;		wreg, status,2, status,0
  8353 ;; Tracked objects:
  8354 ;;		On entry : 300/0
  8355 ;;		On exit  : 300/0
  8356 ;;		Unchanged: 300/0
  8357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8358 ;;      Params:         4       0       0       0       0
  8359 ;;      Locals:         2       0       0       0       0
  8360 ;;      Temps:          1       0       0       0       0
  8361 ;;      Totals:         7       0       0       0       0
  8362 ;;Total ram usage:        7 bytes
  8363 ;; Hardware stack levels used:    1
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		_modulus_func
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           
  8372                           ;psect for function ___awmod
  8373  004A                     ___awmod:	
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8377  004A  01F6               	clrf	___awmod@sign
  8378  004B  1FF3               	btfss	___awmod@dividend+1,7
  8379  004C  2854               	goto	l2990
  8380  004D  09F2               	comf	___awmod@dividend,f
  8381  004E  09F3               	comf	___awmod@dividend+1,f
  8382  004F  0AF2               	incf	___awmod@dividend,f
  8383  0050  1903               	skipnz
  8384  0051  0AF3               	incf	___awmod@dividend+1,f
  8385  0052  01F6               	clrf	___awmod@sign
  8386  0053  0AF6               	incf	___awmod@sign,f
  8387  0054                     l2990:	
  8388  0054  1FF1               	btfss	___awmod@divisor+1,7
  8389  0055  285B               	goto	l2994
  8390  0056  09F0               	comf	___awmod@divisor,f
  8391  0057  09F1               	comf	___awmod@divisor+1,f
  8392  0058  0AF0               	incf	___awmod@divisor,f
  8393  0059  1903               	skipnz
  8394  005A  0AF1               	incf	___awmod@divisor+1,f
  8395  005B                     l2994:	
  8396  005B  0870               	movf	___awmod@divisor,w
  8397  005C  0471               	iorwf	___awmod@divisor+1,w
  8398  005D  1903               	btfsc	3,2
  8399  005E  2888               	goto	l3012
  8400  005F  01F5               	clrf	___awmod@counter
  8401  0060  0AF5               	incf	___awmod@counter,f
  8402  0061                     l3002:	
  8403  0061  1BF1               	btfsc	___awmod@divisor+1,7
  8404  0062  286F               	goto	l3004
  8405  0063  3001               	movlw	1
  8406  0064                     u1965:	
  8407  0064  1003               	clrc
  8408  0065  0DF0               	rlf	___awmod@divisor,f
  8409  0066  0DF1               	rlf	___awmod@divisor+1,f
  8410  0067  3EFF               	addlw	-1
  8411  0068  1D03               	skipz
  8412  0069  2864               	goto	u1965
  8413  006A  3001               	movlw	1
  8414  006B  00F4               	movwf	??___awmod
  8415  006C  0874               	movf	??___awmod,w
  8416  006D  07F5               	addwf	___awmod@counter,f
  8417  006E  2861               	goto	l3002
  8418  006F                     l3004:	
  8419  006F  0871               	movf	___awmod@divisor+1,w
  8420  0070  0273               	subwf	___awmod@dividend+1,w
  8421  0071  1D03               	skipz
  8422  0072  2875               	goto	u1985
  8423  0073  0870               	movf	___awmod@divisor,w
  8424  0074  0272               	subwf	___awmod@dividend,w
  8425  0075                     u1985:	
  8426  0075  1C03               	skipc
  8427  0076  287D               	goto	l3008
  8428  0077  0870               	movf	___awmod@divisor,w
  8429  0078  02F2               	subwf	___awmod@dividend,f
  8430  0079  0871               	movf	___awmod@divisor+1,w
  8431  007A  1C03               	skipc
  8432  007B  03F3               	decf	___awmod@dividend+1,f
  8433  007C  02F3               	subwf	___awmod@dividend+1,f
  8434  007D                     l3008:	
  8435  007D  3001               	movlw	1
  8436  007E                     u1995:	
  8437  007E  1003               	clrc
  8438  007F  0CF1               	rrf	___awmod@divisor+1,f
  8439  0080  0CF0               	rrf	___awmod@divisor,f
  8440  0081  3EFF               	addlw	-1
  8441  0082  1D03               	skipz
  8442  0083  287E               	goto	u1995
  8443  0084  3001               	movlw	1
  8444  0085  02F5               	subwf	___awmod@counter,f
  8445  0086  1D03               	btfss	3,2
  8446  0087  286F               	goto	l3004
  8447  0088                     l3012:	
  8448  0088  0876               	movf	___awmod@sign,w
  8449  0089  1903               	btfsc	3,2
  8450  008A  2890               	goto	l3016
  8451  008B  09F2               	comf	___awmod@dividend,f
  8452  008C  09F3               	comf	___awmod@dividend+1,f
  8453  008D  0AF2               	incf	___awmod@dividend,f
  8454  008E  1903               	skipnz
  8455  008F  0AF3               	incf	___awmod@dividend+1,f
  8456  0090                     l3016:	
  8457  0090  0873               	movf	___awmod@dividend+1,w
  8458  0091  00F1               	movwf	?___awmod+1
  8459  0092  0872               	movf	___awmod@dividend,w
  8460  0093  00F0               	movwf	?___awmod
  8461  0094  0008               	return
  8462  0095                     __end_of___awmod:	
  8463                           
  8464                           	psect	text40
  8465  14FE                     __ptext40:	
  8466 ;; *************** function _button_delay *****************
  8467 ;; Defined at:
  8468 ;;		line 586 in file "Button_src.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;		None
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  i               2    0[COMMON] int 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg, status,2, btemp+1
  8477 ;; Tracked objects:
  8478 ;;		On entry : 300/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8482 ;;      Params:         0       0       0       0       0
  8483 ;;      Locals:         2       0       0       0       0
  8484 ;;      Temps:          0       0       0       0       0
  8485 ;;      Totals:         2       0       0       0       0
  8486 ;;Total ram usage:        2 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		_set_beep_threshhold
  8492 ;;		_thermometer_threshhold_settings
  8493 ;;		_time_settings
  8494 ;;		_date_settings
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           
  8499                           ;psect for function _button_delay
  8500  14FE                     _button_delay:	
  8501                           
  8502                           ;Button_src.c: 587:     for(int i=0;i<10000;i++);
  8503                           
  8504                           ;incstack = 0
  8505                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8506  14FE  01F0               	clrf	button_delay@i
  8507  14FF  01F1               	clrf	button_delay@i+1
  8508  1500                     l3248:	
  8509  1500  3001               	movlw	1
  8510  1501  07F0               	addwf	button_delay@i,f
  8511  1502  1803               	skipnc
  8512  1503  0AF1               	incf	button_delay@i+1,f
  8513  1504  3000               	movlw	0
  8514  1505  07F1               	addwf	button_delay@i+1,f
  8515  1506  0871               	movf	button_delay@i+1,w
  8516  1507  3A80               	xorlw	128
  8517  1508  00FF               	movwf	127
  8518  1509  30A7               	movlw	167
  8519  150A  027F               	subwf	127,w
  8520  150B  1D03               	skipz
  8521  150C  2D0F               	goto	u2175
  8522  150D  3010               	movlw	16
  8523  150E  0270               	subwf	button_delay@i,w
  8524  150F                     u2175:	
  8525  150F  1803               	btfsc	3,0
  8526  1510  0008               	return
  8527  1511  2D00               	goto	l3248
  8528  1512                     __end_of_button_delay:	
  8529  007E                     btemp	set	126	;btemp
  8530  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      78
    BANK1            80      0       8
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   43983
                                             10 BANK0      2     2      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  6     2      4     264
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  6     2      4     286
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       8       7       10.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      64      12        0.0%
ABS                  0      0      64       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 11 12:05:15 2019

                                       _a 0057                                         _b 0056  
                                       _c 0055                                         _p 002F  
                                       _t 0043                                         _w 0041  
                                       _x 003F                                         _y 003D  
                                       _z 003B                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005E                                        _TZ 005F  
                                      _ge 005C                                        _wd 0045  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 0801  
                           ?_display_date 0070                                       l321 14B2  
                                     l600 0FF5                                       l610 010F  
                                     l380 16CE                                       l621 02A9  
                                     l374 1651                                       l630 03A9  
                                     l615 017C                                       l607 00A1  
                                     l632 040F                                       l624 0336  
                                     l616 0184                                       l633 0417  
                                     l609 0107                                       l651 0682  
                                     l644 0509                                       l653 06B3  
                                     l645 0511                                       l638 0483  
                                     l639 048B                                       l594 0F4D  
                                     l599 0FB0                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 0060  
                           ?_display_temp 0070                                       _TLV 0061  
                                     _shi 005D                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0067  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l3002 0061                                      l3004 006F  
                                    l3012 0088                                      l1164 15DD  
                                    l3110 1787                                      l3016 0090  
                                    l3008 007D                                      l3032 1514  
                                    l3112 1760                                      l3120 1797  
                                    l3108 1786                                      l3140 17AC  
                                    l3310 0C96                                      l4102 0792  
                                    l4006 0679                                      l3214 1528  
                                    l3038 14B6                                      l3400 0D58  
                                    l3304 0C8A                                      l3232 16DF  
                                    l4200 01C1                                      l3322 0CAF  
                                    l4042 0709                                      l3162 172F  
                                    l4210 01E5                                      l3068 167D  
                                    l3412 0D72                                      l3340 0CD6  
                                    l3316 0CA2                                      l4212 01EA  
                                    l3430 0D99                                      l3406 0D65  
                                    l3334 0CC9                                      l3502 084A  
                                    l3248 1500                                      l3424 0D8C  
                                    l3352 0CF0                                      l3328 0CBC  
                                    l4072 074C                                      l4400 09FC  
                                    l3520 170C                                      l3258 1628  
                                    l3418 0D7F                                      l3370 0D17  
                                    l3346 0CE3                                      l3506 0855  
                                    l4330 0029                                      l3436 0DA6  
                                    l3364 0D0A                                      l3292 0C72  
                                    l4404 0A13                                      l3452 15A6  
                                    l3524 171A                                      l3268 164C  
                                    l4164 0143                                      l3382 0D31  
                                    l3358 0CFD                                      l3438 0DA8  
                                    l3454 15AF                                      l3518 16FE  
                                    l3622 0AC8                                      l3614 0AB4  
                                    l3376 0D24                                      l3464 15BE  
                                    l3472 15C6                                      l3528 1725  
                                    l4328 001C                                      l4272 02F9  
                                    l4176 0167                                      l4168 014C  
                                    l4424 0B56                                      l3394 0D4B  
                                    l3298 0C7E                                      l3626 0AD2  
                                    l3618 0ABE                                      l3810 0F39  
                                    l4178 016C                                      l3388 0D3E  
                                    l3900 0454                                      l4196 01B8  
                                    l3910 0473                                      l4382 098E  
                                    l3494 0826                                      l3646 16A7  
                                    l4366 081A                                      l4392 09CE  
                                    l4384 09A0                                      l3496 0834  
                                    l3752 0EA4                                      l3930 04D0  
                                    l3658 08FA                                      l3834 0FBD  
                                    l3908 046E                                      l4396 09E5  
                                    l4388 09B7                                      l3780 0F03  
                                    l2990 0054                                      l3942 04F4  
                                    l3934 04D9                                      l4494 0C1F  
                                    l3944 04F9                                      l3696 0864  
                                    l2994 005B                                      l3962 0545  
                                    l3974 055B                                      l3966 054E  
                                    l3976 0560                                      l3896 044B  
                          ?_display_clock 0070                                      u2025 1523  
                                    u2065 166E                                      u2145 1537  
                                    u2075 1696                                      u2165 16EF  
                                    u2175 150F                                      u3055 0F4A  
                                    u2805 0829                                      u2825 0835  
                                    u2905 171B                                      u3705 0027  
                                    u2835 0841                                      u3715 17D1  
                                    u1965 0064                                      u2765 15C9  
                                    u2845 084B                                      u2925 0A6C  
                                    u3725 17DC                                      u2935 0A77  
                                    u1985 0075                                      u2945 0A84  
                                    u1995 007E                                      u2875 1701  
                                    u3685 000F                                      u3845 0C34  
                                    u2895 1712                                      u3695 001A  
                                    u2995 16C2               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0B30  
                                    _init 148C                                      _var1 0049  
                                    _var2 0048                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 0062  
             __size_of_initialise_buttons 0016                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 15C0  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 0095  
                         __end_of___lbmod 15E3                      __end_of_delay_screen 1526  
                         __end_of___lwdiv 085A                           __end_of___lwmod 172A  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 002D                                     _table 00A0  
                                   _stats 0033                                     main@i 006C  
                          write_byte@temp 0076                       _set_lower_threshold 0006  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                    __size_of_decrementor 0024                                     wtemp0 007E  
                         ___lbdiv@divisor 0070                           ___lbdiv@counter 0073  
                           ??_ds1302_init 0075                           __initialization 07E8  
                            __end_of_main 0C53                              __end_of_init 1494  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E8  
                    ?_set_lower_threshold 0073                                    ??_main 007E  
                                  ??_init 0070                      incrementor@lower_val 0064  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0062  
                        __end_of_lcd_init 1606                          __end_of_get_temp 0B30  
                        __end_of_get_time 16C8                                    _baifen 005A  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 1526                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 0031  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 14DD                       _set_upper_threshold 17C8  
                                  _table1 0020                           ___awmod@divisor 0070  
                                  _shifen 005B                                    _wanfen 0058  
                         ___awmod@counter 0075                      __size_of_display_day 00A3  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 169C  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 0986                      __end_of_display_temp 159F  
                          __pcstackCOMMON 0070                              __pidataBANK1 149C  
                   __size_of_delay_screen 0014                      __size_of_incrementor 0024  
                        ___lbdiv@quotient 0074                     ??_set_upper_threshold 0077  
                              __pbssBANK0 0020                              _delay_screen 1512  
                      __size_of_init_temp 0005                        __size_of_read_byte 0034  
                             _ds1302_init 14CE                                _delay_temp 14B1  
                              __pmaintext 0B30                                   ?_delay2 0070  
                           ?_modulus_func 0077                        time_read_1@time_rx 0074  
                            incrementor@z 0066                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 039B  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                               ?_set_time 0070                      __size_of_reset_alarm 000D  
                          ??_modulus_func 007B              set_upper_threshold@lower_val 0075  
              __end_of_initialise_buttons 1550                  _time_date_hex_terminator 14BF  
                                 ___lbdiv 159F                                   ___awmod 004A  
                                 ___lbmod 15C0                           __size_of_delay2 0014  
                                 ___lwdiv 081E                                   ___lwmod 16F8  
                                 _day_hex 0054                                   _day_low 0039  
                                 __ptext1 0095                                   __ptext2 0DAA  
                                 __ptext3 162A                                   __ptext4 17C8  
                                 __ptext5 0006                                   __ptext6 0801  
                                 __ptext7 14A4                                   __ptext8 15E3  
                                 __ptext9 153A                      __end_of_button_delay 1512  
                                 delay2@i 0070                         __end_of_init_temp 148C  
                        ___awmod@dividend 0072                         __end_of_read_byte 175E  
                                 _qianfen 0059                      __size_of_time_read_1 0030  
                                 _lower_t 004C               __end_of_set_beep_threshhold 081E  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 0096  
                                 clrloop0 1495                                ??_lcd_init 0073  
                                 _upper_t 004D                             ??_decrementor 007B  
                              ??_get_temp 0062                                ??_get_time 0075  
                   __size_of_display_temp 0021                      end_of_initialization 07FC  
                          display_day@num 0073                            display_clock@i 0075  
                           ?_time_write_1 0070                               ?_delay_temp 0070  
                              _reset_temp 175E                                ??_set_time 0075  
                     _time_date_delimiter 0C53                      decrementor@lower_val 0062  
                            _display_date 08F0                              _display_temp 157E  
                       __end_of_write_cmd 157E                          ___lbmod@dividend 0074  
                           modulus_func@x 0077                             modulus_func@y 0079  
                   __end_of_display_clock 08F0                    __size_of_date_settings 044D  
                             ___lbmod@rem 0076                      ?_time_date_delimiter 0070  
                    decrementor@upper_val 0064                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 004A                       __end_of_decrementor 164E  
                           ??_display_day 0075                            __end_of_delay2 153A  
                              _write_char 1550                                _write_byte 1792  
                          _var_night_high 0029                       start_initialization 07E8  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 14ED                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 14ED  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 039B                               __pdataBANK1 00A0  
                              read_byte@i 0076                                read_byte@j 0047  
             __end_of_set_upper_threshold 1800                       __end_of_display_day 0A29  
                               ___latbits 0002                             __pcstackBANK0 0062  
                             _decrementor 162A                      set_beep_threshhold@x 0072  
                       __size_of_lcd_init 0023                         __size_of_get_temp 0107  
                       __size_of_get_time 002C                ??_time_date_hex_terminator 0071  
                            _button_delay 14FE                          ___lwdiv@dividend 0078  
                             _day_counter 0027                                  ?___lbdiv 0070  
                          ?_date_settings 0070                                  ?___awmod 0070  
                                ?___lbmod 0070                                  ?___lwdiv 0076  
                                ?___lwmod 0070                         __size_of_set_time 0028  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 162A                      __end_of_time_write_1 1674  
                      _initialise_buttons 153A                           _day_of_week_var 0035  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 1487                                 _read_byte 172A  
                            decrementor@z 0066                       ?_initialise_buttons 0070  
                               clear_ram0 1494                             ??_reset_alarm 0070  
                          _prev_hex_hours 004F                              ??_delay_temp 0071  
                             _display_day 0986   __end_of_thermometer_threshhold_settings 1000  
__size_of_thermometer_threshhold_settings 0256         ??_thermometer_threshhold_settings 0067  
        ?_thermometer_threshhold_settings 0070           _thermometer_threshhold_settings 0DAA  
                    ??_initialise_buttons 0070                    __size_of_time_settings 0306  
        thermometer_threshhold_settings@i 006A                             ??_time_read_1 0070  
                             write_char@x 0072                     __size_of_modulus_func 0010  
                               get_time@i 0076                               write_byte@i 0078  
                      __end_of_delay_temp 14BF                                 _write_cmd 1567  
                              ?_init_temp 0070                                ?_read_byte 0070  
                           _var_night_low 002B                           _buzzer_watcher1 004A  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 001D  
                     __size_of_write_byte 0036                           ??_date_settings 0067  
                    __size_of_ds1302_init 000F                               _incrementor 1606  
                            _modulus_func 14DD                       __end_of_reset_alarm 14B1  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0037  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 1487                                  __ptext11 148C  
                                __ptext20 16F8                                  __ptext12 169C  
                                __ptext21 081E                                  __ptext13 16C8  
                                __ptext30 1567                                  __ptext22 15C0  
                                __ptext14 0A29                                  __ptext31 1550  
                                __ptext23 159F                                  __ptext15 1792  
                                __ptext40 14FE                                  __ptext32 1512  
                                __ptext24 14CE                                  __ptext16 175E  
                                __ptext33 14BF                                  __ptext25 157E  
                                __ptext17 172A                                  __ptext34 0C53  
                                __ptext26 0986                                  __ptext18 14B1  
                                __ptext35 1674                                  __ptext27 08F0  
                                __ptext19 1526                                  __ptext36 164E  
                                __ptext28 085A                                  __ptext37 1606  
                                __ptext29 039B                                  __ptext38 14DD  
                                __ptext39 004A                       __end_of_time_read_1 16F8  
                              ?_write_cmd 0070                                  _lcd_init 15E3  
                                _get_temp 0A29                                  _get_time 169C  
                           _time_settings 0095          __end_of_time_date_hex_terminator 14CE  
                           __size_of_main 0123                             __size_of_init 0008  
                           ?_delay_screen 0070                               _hrs_limiter 0053  
                               set_time@i 0075                             _prev_hex_mins 004E  
                           _prev_hex_year 0050                              ??_reset_temp 0074  
                                _set_time 1674                                  _prev_hex 0052  
              time_date_delimiter@limiter 0071              __size_of_set_lower_threshold 0044  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 0096                            _buzzer_watcher 004B  
                             delay_temp@x 0072                               delay_temp@y 0070  
                             delay_temp@z 0073                            read_byte@value 0075  
             __end_of_time_date_delimiter 0DAA                                  init_ram0 14F1  
                           button_delay@i 0070                               ??_init_temp 0070  
                      __end_of_reset_temp 1792                               ??_read_byte 0074  
                          ?_time_settings 0070                              ?_decrementor 0062  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 14A4                              _time_write_1 164E  
                            _prev_hex_day 0051                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 16C8                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0038  
                           _display_clock 085A                             time_write_1@j 0072  
                      __end_of_write_char 1567                        __end_of_write_byte 17C8  
