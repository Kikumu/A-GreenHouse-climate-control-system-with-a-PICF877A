

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 11 14:35:18 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  1404                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  1404  3400               	retlw	0
   696  1405  3402               	retlw	2
   697  1406  3400               	retlw	0
   698  1407  3412               	retlw	18
   699  1408  3412               	retlw	18
   700  1409  3406               	retlw	6
   701  140A  3419               	retlw	25
   702  140B  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003E                     _RC6	set	62
   706  003F                     _RC7	set	63
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30B0               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3014               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  3004               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30A8               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  244C  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30A8               	movlw	low (__pbssBANK1+8)
   756  07F1  160A  118A  23FC  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  305F               	movlw	low (__pbssBANK0+63)
   762  07F9  160A  118A  23FC   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2C12   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _table1:	
   773  0020                     	ds	7
   774  0027                     _day_counter:	
   775  0027                     	ds	2
   776  0029                     _p:	
   777  0029                     	ds	2
   778  002B                     _stats:	
   779  002B                     	ds	2
   780  002D                     _day_high:	
   781  002D                     	ds	2
   782  002F                     _day_low:	
   783  002F                     	ds	2
   784  0031                     _z:	
   785  0031                     	ds	2
   786  0033                     _y:	
   787  0033                     	ds	2
   788  0035                     _x:	
   789  0035                     	ds	2
   790  0037                     _w:	
   791  0037                     	ds	2
   792  0039                     _t:	
   793  0039                     	ds	2
   794  003B                     _count:	
   795  003B                     	ds	2
   796  003D                     _wd:	
   797  003D                     	ds	2
   798  003F                     read_byte@j:	
   799  003F                     	ds	1
   800  0040                     _prev_hex_mins:	
   801  0040                     	ds	1
   802  0041                     _prev_hex_hours:	
   803  0041                     	ds	1
   804  0042                     _prev_hex_year:	
   805  0042                     	ds	1
   806  0043                     _prev_hex_day:	
   807  0043                     	ds	1
   808  0044                     _prev_hex:	
   809  0044                     	ds	1
   810  0045                     _hrs_limiter:	
   811  0045                     	ds	1
   812  0046                     _day_hex:	
   813  0046                     	ds	1
   814  0047                     _c:	
   815  0047                     	ds	1
   816  0048                     _b:	
   817  0048                     	ds	1
   818  0049                     _a:	
   819  0049                     	ds	1
   820  004A                     _temp_high:	
   821  004A                     	ds	1
   822  004B                     _temp_low:	
   823  004B                     	ds	1
   824  004C                     _alarm__:	
   825  004C                     	ds	1
   826  004D                     _var2:	
   827  004D                     	ds	1
   828  004E                     _var1:	
   829  004E                     	ds	1
   830  004F                     _cooler_state:	
   831  004F                     	ds	1
   832  0050                     _heater_state:	
   833  0050                     	ds	1
   834  0051                     _buzzer_watcher1:	
   835  0051                     	ds	1
   836  0052                     _buzzer_watcher:	
   837  0052                     	ds	1
   838  0053                     _lower_t:	
   839  0053                     	ds	1
   840  0054                     _upper_t:	
   841  0054                     	ds	1
   842  0055                     _wanfen:	
   843  0055                     	ds	1
   844  0056                     _qianfen:	
   845  0056                     	ds	1
   846  0057                     _baifen:	
   847  0057                     	ds	1
   848  0058                     _shifen:	
   849  0058                     	ds	1
   850  0059                     _ge:	
   851  0059                     	ds	1
   852  005A                     _shi:	
   853  005A                     	ds	1
   854  005B                     _TX:	
   855  005B                     	ds	1
   856  005C                     _TZ:	
   857  005C                     	ds	1
   858  005D                     _THV:	
   859  005D                     	ds	1
   860  005E                     _TLV:	
   861  005E                     	ds	1
   862                           
   863                           	psect	bssBANK1
   864  00A0                     __pbssBANK1:	
   865  00A0                     _d_type:	
   866  00A0                     	ds	2
   867  00A2                     _day_of_week_var:	
   868  00A2                     	ds	2
   869  00A4                     _var_night_high:	
   870  00A4                     	ds	2
   871  00A6                     _var_night_low:	
   872  00A6                     	ds	2
   873                           
   874                           	psect	dataBANK1
   875  00A8                     __pdataBANK1:	
   876  00A8                     _table:	
   877  00A8                     	ds	8
   878                           
   879                           	psect	inittext
   880  1448                     init_fetch0:	
   881                           ;	Called with low address in FSR and high address in W
   882                           
   883  1448  087E               	movf	126,w
   884  1449  008A               	movwf	10
   885  144A  087F               	movf	127,w
   886  144B  0082               	movwf	2
   887  144C                     init_ram0:	
   888                           ;Called with:
   889                           ;	high address of idata address in btemp 
   890                           ;	low address of idata address in btemp+1 
   891                           ;	low address of data in FSR
   892                           ;	high address + 1 of data in btemp-1
   893                           
   894  144C  2448  160A  118A   	fcall	init_fetch0
   895  144F  0080               	movwf	0
   896  1450  0A84               	incf	4,f
   897  1451  0804               	movf	4,w
   898  1452  067D               	xorwf	125,w
   899  1453  1903               	btfsc	3,2
   900  1454  3400               	retlw	0
   901  1455  0AFF               	incf	127,f
   902  1456  1903               	btfsc	3,2
   903  1457  0AFE               	incf	126,f
   904  1458  2C4C               	goto	init_ram0
   905                           
   906                           	psect	clrtext
   907  13FC                     clear_ram0:	
   908                           ;	Called with FSR containing the base address, and
   909                           ;	W with the last address+1
   910                           
   911  13FC  0064               	clrwdt	;clear the watchdog before getting into this loop
   912  13FD                     clrloop0:	
   913  13FD  0180               	clrf	0	;clear RAM location pointed to by FSR
   914  13FE  0A84               	incf	4,f	;increment pointer
   915  13FF  0604               	xorwf	4,w	;XOR with final address
   916  1400  1903               	btfsc	3,2	;have we reached the end yet?
   917  1401  3400               	retlw	0	;all done for this memory range, return
   918  1402  0604               	xorwf	4,w	;XOR again to restore value
   919  1403  2BFD               	goto	clrloop0	;do the next byte
   920                           
   921                           	psect	cstackCOMMON
   922  0070                     __pcstackCOMMON:	
   923  0070                     ?_init_temp:	
   924  0070                     ??_init_temp:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_set_time:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_ds1302_init:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_init:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ??_init:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_lcd_init:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_initialise_buttons:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ??_initialise_buttons:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?_get_temp:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_get_time:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_write_cmd:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_write_char:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_display_temp:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_display_date:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_display_clock:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_thermometer_threshhold_settings:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_date_settings:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_time_settings:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_reset_alarm:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_set_beep_threshhold:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?_delay_screen:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ??_delay_screen:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_delay_temp:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_delay2:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ??_delay2:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ?_time_write_1:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ??_time_write_1:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?_time_read_1:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ??_time_read_1:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_button_delay:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ??_button_delay:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_time_date_hex_terminator:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ?_time_date_delimiter:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_main:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_reset_temp:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_write_byte:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_read_byte:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?___lbdiv:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?___lbmod:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?___awmod:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?___lwmod:	
  1045                           ; 2 bytes @ 0x0
  1046                           
  1047  0070                     delay_temp@y:	
  1048                           ; 2 bytes @ 0x0
  1049                           
  1050  0070                     time_date_delimiter@hex:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     time_date_hex_terminator@limiter:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ___lbdiv@divisor:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ___lbmod@divisor:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     delay_screen@i:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     delay2@i:	
  1066                           ; 2 bytes @ 0x0
  1067                           
  1068  0070                     button_delay@i:	
  1069                           ; 2 bytes @ 0x0
  1070                           
  1071  0070                     ___awmod@divisor:	
  1072                           ; 2 bytes @ 0x0
  1073                           
  1074  0070                     ___lwmod@divisor:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 2 bytes @ 0x0
  1079  0070                     	ds	1
  1080  0071                     ??_delay_temp:	
  1081  0071                     ??_time_date_hex_terminator:	
  1082                           ; 1 bytes @ 0x1
  1083                           
  1084  0071                     ??___lbdiv:	
  1085                           ; 1 bytes @ 0x1
  1086                           
  1087  0071                     ??___lbmod:	
  1088                           ; 1 bytes @ 0x1
  1089                           
  1090  0071                     time_date_delimiter@limiter:	
  1091                           ; 1 bytes @ 0x1
  1092                           
  1093                           
  1094                           ; 1 bytes @ 0x1
  1095  0071                     	ds	1
  1096  0072                     ??_write_cmd:	
  1097  0072                     ??_write_char:	
  1098                           ; 1 bytes @ 0x2
  1099                           
  1100  0072                     ??_set_beep_threshhold:	
  1101                           ; 1 bytes @ 0x2
  1102                           
  1103  0072                     write_char@x:	
  1104                           ; 1 bytes @ 0x2
  1105                           
  1106  0072                     write_cmd@x:	
  1107                           ; 1 bytes @ 0x2
  1108                           
  1109  0072                     delay_temp@x:	
  1110                           ; 1 bytes @ 0x2
  1111                           
  1112  0072                     set_beep_threshhold@x:	
  1113                           ; 1 bytes @ 0x2
  1114                           
  1115  0072                     ___lbdiv@dividend:	
  1116                           ; 1 bytes @ 0x2
  1117                           
  1118  0072                     time_write_1@j:	
  1119                           ; 1 bytes @ 0x2
  1120                           
  1121  0072                     time_read_1@j:	
  1122                           ; 2 bytes @ 0x2
  1123                           
  1124  0072                     time_date_delimiter@type:	
  1125                           ; 2 bytes @ 0x2
  1126                           
  1127  0072                     ___awmod@dividend:	
  1128                           ; 2 bytes @ 0x2
  1129                           
  1130  0072                     ___lwmod@dividend:	
  1131                           ; 2 bytes @ 0x2
  1132                           
  1133                           
  1134                           ; 2 bytes @ 0x2
  1135  0072                     	ds	1
  1136  0073                     ??_lcd_init:	
  1137  0073                     ??_display_temp:	
  1138                           ; 1 bytes @ 0x3
  1139                           
  1140  0073                     ??_display_date:	
  1141                           ; 1 bytes @ 0x3
  1142                           
  1143  0073                     ??_display_clock:	
  1144                           ; 1 bytes @ 0x3
  1145                           
  1146  0073                     ?_set_lower_threshold:	
  1147                           ; 1 bytes @ 0x3
  1148                           
  1149  0073                     ?_set_upper_threshold:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     ??_reset_alarm:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155  0073                     ?_display_day:	
  1156                           ; 1 bytes @ 0x3
  1157                           
  1158  0073                     delay_temp@z:	
  1159                           ; 1 bytes @ 0x3
  1160                           
  1161  0073                     time_date_hex_terminator@val:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164  0073                     ___lbdiv@counter:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167  0073                     set_upper_threshold@upper_val:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0073                     set_lower_threshold@upper_val:	
  1171                           ; 2 bytes @ 0x3
  1172                           
  1173  0073                     display_day@num:	
  1174                           ; 2 bytes @ 0x3
  1175                           
  1176                           
  1177                           ; 2 bytes @ 0x3
  1178  0073                     	ds	1
  1179  0074                     ??_time_date_delimiter:	
  1180  0074                     ??_reset_temp:	
  1181                           ; 1 bytes @ 0x4
  1182                           
  1183  0074                     ??_write_byte:	
  1184                           ; 1 bytes @ 0x4
  1185                           
  1186  0074                     ??_read_byte:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189  0074                     ??___awmod:	
  1190                           ; 1 bytes @ 0x4
  1191                           
  1192  0074                     ??___lwmod:	
  1193                           ; 1 bytes @ 0x4
  1194                           
  1195  0074                     time_write_1@time_tx:	
  1196                           ; 1 bytes @ 0x4
  1197                           
  1198  0074                     time_read_1@time_rx:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     ___lbdiv@quotient:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     ___lbmod@dividend:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207                           
  1208                           ; 1 bytes @ 0x4
  1209  0074                     	ds	1
  1210  0075                     ??_set_time:	
  1211  0075                     ??_ds1302_init:	
  1212                           ; 1 bytes @ 0x5
  1213                           
  1214  0075                     ??_get_time:	
  1215                           ; 1 bytes @ 0x5
  1216                           
  1217  0075                     ??_display_day:	
  1218                           ; 1 bytes @ 0x5
  1219                           
  1220  0075                     reset_temp@presence:	
  1221                           ; 1 bytes @ 0x5
  1222                           
  1223  0075                     read_byte@value:	
  1224                           ; 1 bytes @ 0x5
  1225                           
  1226  0075                     ___awmod@counter:	
  1227                           ; 1 bytes @ 0x5
  1228                           
  1229  0075                     ___lbmod@counter:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0075                     ___lwmod@counter:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0075                     set_time@i:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0075                     display_clock@i:	
  1239                           ; 2 bytes @ 0x5
  1240                           
  1241  0075                     display_date@i:	
  1242                           ; 2 bytes @ 0x5
  1243                           
  1244  0075                     set_upper_threshold@lower_val:	
  1245                           ; 2 bytes @ 0x5
  1246                           
  1247  0075                     set_lower_threshold@lower_val:	
  1248                           ; 2 bytes @ 0x5
  1249                           
  1250                           
  1251                           ; 2 bytes @ 0x5
  1252  0075                     	ds	1
  1253  0076                     ?___lwdiv:	
  1254  0076                     write_byte@temp:	
  1255                           ; 2 bytes @ 0x6
  1256                           
  1257  0076                     read_byte@i:	
  1258                           ; 1 bytes @ 0x6
  1259                           
  1260  0076                     time_date_delimiter@val:	
  1261                           ; 1 bytes @ 0x6
  1262                           
  1263  0076                     ___awmod@sign:	
  1264                           ; 1 bytes @ 0x6
  1265                           
  1266  0076                     ___lbmod@rem:	
  1267                           ; 1 bytes @ 0x6
  1268                           
  1269  0076                     get_time@i:	
  1270                           ; 1 bytes @ 0x6
  1271                           
  1272  0076                     ___lwdiv@divisor:	
  1273                           ; 2 bytes @ 0x6
  1274                           
  1275                           
  1276                           ; 2 bytes @ 0x6
  1277  0076                     	ds	1
  1278  0077                     ??_set_lower_threshold:	
  1279  0077                     ??_set_upper_threshold:	
  1280                           ; 1 bytes @ 0x7
  1281                           
  1282  0077                     ?_modulus_func:	
  1283                           ; 1 bytes @ 0x7
  1284                           
  1285  0077                     write_byte@val:	
  1286                           ; 2 bytes @ 0x7
  1287                           
  1288  0077                     modulus_func@x:	
  1289                           ; 1 bytes @ 0x7
  1290                           
  1291                           
  1292                           ; 2 bytes @ 0x7
  1293  0077                     	ds	1
  1294  0078                     write_byte@i:	
  1295  0078                     ___lwdiv@dividend:	
  1296                           ; 1 bytes @ 0x8
  1297                           
  1298                           
  1299                           ; 2 bytes @ 0x8
  1300  0078                     	ds	1
  1301  0079                     modulus_func@y:	
  1302                           
  1303                           ; 2 bytes @ 0x9
  1304  0079                     	ds	1
  1305  007A                     ??___lwdiv:	
  1306                           
  1307                           ; 1 bytes @ 0xA
  1308  007A                     	ds	1
  1309  007B                     ??_modulus_func:	
  1310  007B                     ??_incrementor:	
  1311                           ; 1 bytes @ 0xB
  1312                           
  1313  007B                     ??_decrementor:	
  1314                           ; 1 bytes @ 0xB
  1315                           
  1316  007B                     ___lwdiv@quotient:	
  1317                           ; 1 bytes @ 0xB
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0xB
  1321  007B                     	ds	2
  1322  007D                     ___lwdiv@counter:	
  1323                           
  1324                           ; 1 bytes @ 0xD
  1325  007D                     	ds	1
  1326                           
  1327                           	psect	cstackBANK0
  1328  005F                     __pcstackBANK0:	
  1329  005F                     ??_get_temp:	
  1330  005F                     ?_incrementor:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  005F                     ?_decrementor:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  005F                     incrementor@upper_val:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  005F                     decrementor@lower_val:	
  1340                           ; 2 bytes @ 0x0
  1341                           
  1342                           
  1343                           ; 2 bytes @ 0x0
  1344  005F                     	ds	2
  1345  0061                     incrementor@lower_val:	
  1346  0061                     decrementor@upper_val:	
  1347                           ; 2 bytes @ 0x2
  1348                           
  1349                           
  1350                           ; 2 bytes @ 0x2
  1351  0061                     	ds	2
  1352  0063                     incrementor@z:	
  1353  0063                     decrementor@z:	
  1354                           ; 1 bytes @ 0x4
  1355                           
  1356                           
  1357                           ; 1 bytes @ 0x4
  1358  0063                     	ds	1
  1359  0064                     ??_thermometer_threshhold_settings:	
  1360  0064                     ??_date_settings:	
  1361                           ; 1 bytes @ 0x5
  1362                           
  1363  0064                     ??_time_settings:	
  1364                           ; 1 bytes @ 0x5
  1365                           
  1366                           
  1367                           ; 1 bytes @ 0x5
  1368  0064                     	ds	3
  1369  0067                     thermometer_threshhold_settings@i:	
  1370                           
  1371                           ; 2 bytes @ 0x8
  1372  0067                     	ds	2
  1373  0069                     ??_main:	
  1374                           
  1375                           ; 1 bytes @ 0xA
  1376  0069                     	ds	5
  1377  006E                     main@i:	
  1378                           
  1379                           ; 2 bytes @ 0xF
  1380  006E                     	ds	2
  1381                           
  1382                           	psect	maintext
  1383  0C12                     __pmaintext:	
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 10 in file "mainLogic.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  i               2   15[BANK0 ] int 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : B00/0
  1400 ;;		On exit  : 300/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1403 ;;      Params:         0       0       0       0       0
  1404 ;;      Locals:         0       2       0       0       0
  1405 ;;      Temps:          0       5       0       0       0
  1406 ;;      Totals:         0       7       0       0       0
  1407 ;;Total ram usage:        7 bytes
  1408 ;; Hardware stack levels required when called:    4
  1409 ;; This function calls:
  1410 ;;		_date_settings
  1411 ;;		_display_clock
  1412 ;;		_display_date
  1413 ;;		_display_day
  1414 ;;		_display_temp
  1415 ;;		_ds1302_init
  1416 ;;		_get_temp
  1417 ;;		_get_time
  1418 ;;		_init
  1419 ;;		_init_temp
  1420 ;;		_initialise_buttons
  1421 ;;		_lcd_init
  1422 ;;		_modulus_func
  1423 ;;		_reset_alarm
  1424 ;;		_set_beep_threshhold
  1425 ;;		_set_lower_threshold
  1426 ;;		_set_time
  1427 ;;		_set_upper_threshold
  1428 ;;		_thermometer_threshhold_settings
  1429 ;;		_time_settings
  1430 ;;		_write_char
  1431 ;;		_write_cmd
  1432 ;; This function is called by:
  1433 ;;		Startup code after reset
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function _main
  1439  0C12                     _main:	
  1440                           
  1441                           ;mainLogic.c: 11:     TRISB=0X02;
  1442                           
  1443                           ;incstack = 0
  1444                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1445  0C12  3002               	movlw	2
  1446  0C13  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0C14  0086               	movwf	6	;volatile
  1448                           
  1449                           ;mainLogic.c: 12:     init_temp();
  1450  0C15  120A  158A  2002  120A  158A  	fcall	_init_temp
  1451                           
  1452                           ;mainLogic.c: 13:     set_time();
  1453  0C1A  160A  118A  25C7  120A  158A  	fcall	_set_time
  1454                           
  1455                           ;mainLogic.c: 14:     ds1302_init();
  1456  0C1F  160A  118A  2429  120A  158A  	fcall	_ds1302_init
  1457                           
  1458                           ;mainLogic.c: 16:     init();
  1459  0C24  160A  118A  23F4  120A  158A  	fcall	_init
  1460                           
  1461                           ;mainLogic.c: 17:     lcd_init();
  1462  0C29  120A  118A  2003  120A  158A  	fcall	_lcd_init
  1463                           
  1464                           ;mainLogic.c: 18:     init_temp();
  1465  0C2E  120A  158A  2002  120A  158A  	fcall	_init_temp
  1466                           
  1467                           ;mainLogic.c: 19:     initialise_buttons();
  1468  0C33  160A  118A  2495  120A  158A  	fcall	_initialise_buttons
  1469                           
  1470                           ;mainLogic.c: 20:     var1 = 2;
  1471  0C38  3002               	movlw	2
  1472  0C39  00E9               	movwf	??_main
  1473  0C3A  0869               	movf	??_main,w
  1474  0C3B  00CE               	movwf	_var1
  1475                           
  1476                           ;mainLogic.c: 21:     var2 = 4;
  1477  0C3C  3004               	movlw	4
  1478  0C3D  00E9               	movwf	??_main
  1479  0C3E  0869               	movf	??_main,w
  1480  0C3F  00CD               	movwf	_var2
  1481  0C40                     l4606:	
  1482                           
  1483                           ;mainLogic.c: 25:     get_temp();
  1484  0C40  120A  158A  21B4  120A  158A  	fcall	_get_temp
  1485                           
  1486                           ;mainLogic.c: 26:     get_time();
  1487  0C45  160A  118A  2619  120A  158A  	fcall	_get_time
  1488                           
  1489                           ;mainLogic.c: 27:     write_cmd(0x80);
  1490  0C4A  3080               	movlw	128
  1491  0C4B  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  1492                           
  1493                           ;mainLogic.c: 28:     write_char('T');
  1494  0C50  3054               	movlw	84
  1495  0C51  160A  118A  24A9  120A  158A  	fcall	_write_char
  1496                           
  1497                           ;mainLogic.c: 29:     write_char('e');
  1498  0C56  3065               	movlw	101
  1499  0C57  160A  118A  24A9  120A  158A  	fcall	_write_char
  1500                           
  1501                           ;mainLogic.c: 30:     write_char('m');
  1502  0C5C  306D               	movlw	109
  1503  0C5D  160A  118A  24A9  120A  158A  	fcall	_write_char
  1504                           
  1505                           ;mainLogic.c: 31:     write_char('p');
  1506  0C62  3070               	movlw	112
  1507  0C63  160A  118A  24A9  120A  158A  	fcall	_write_char
  1508                           
  1509                           ;mainLogic.c: 32:     write_char(':');
  1510  0C68  303A               	movlw	58
  1511  0C69  160A  118A  24A9  120A  158A  	fcall	_write_char
  1512                           
  1513                           ;mainLogic.c: 33:     display_temp();
  1514  0C6E  160A  118A  24F4  120A  158A  	fcall	_display_temp
  1515                           
  1516                           ;mainLogic.c: 35:     write_cmd(0x90);
  1517  0C73  3090               	movlw	144
  1518  0C74  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  1519                           
  1520                           ;mainLogic.c: 36:     write_char('D');
  1521  0C79  3044               	movlw	68
  1522  0C7A  160A  118A  24A9  120A  158A  	fcall	_write_char
  1523                           
  1524                           ;mainLogic.c: 37:     write_char('a');
  1525  0C7F  3061               	movlw	97
  1526  0C80  160A  118A  24A9  120A  158A  	fcall	_write_char
  1527                           
  1528                           ;mainLogic.c: 38:     write_char('t');
  1529  0C85  3074               	movlw	116
  1530  0C86  160A  118A  24A9  120A  158A  	fcall	_write_char
  1531                           
  1532                           ;mainLogic.c: 39:     write_char('e');
  1533  0C8B  3065               	movlw	101
  1534  0C8C  160A  118A  24A9  120A  158A  	fcall	_write_char
  1535                           
  1536                           ;mainLogic.c: 40:     write_char(':');
  1537  0C91  303A               	movlw	58
  1538  0C92  160A  118A  24A9  120A  158A  	fcall	_write_char
  1539                           
  1540                           ;mainLogic.c: 41:     write_char(' ');
  1541  0C97  3020               	movlw	32
  1542  0C98  160A  118A  24A9  120A  158A  	fcall	_write_char
  1543                           
  1544                           ;mainLogic.c: 43:     display_date();
  1545  0C9D  120A  158A  2080  120A  158A  	fcall	_display_date
  1546                           
  1547                           ;mainLogic.c: 45:     write_cmd(0x88);
  1548  0CA2  3088               	movlw	136
  1549  0CA3  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  1550                           
  1551                           ;mainLogic.c: 46:     write_char('T');
  1552  0CA8  3054               	movlw	84
  1553  0CA9  160A  118A  24A9  120A  158A  	fcall	_write_char
  1554                           
  1555                           ;mainLogic.c: 47:     write_char('i');
  1556  0CAE  3069               	movlw	105
  1557  0CAF  160A  118A  24A9  120A  158A  	fcall	_write_char
  1558                           
  1559                           ;mainLogic.c: 48:     write_char('m');
  1560  0CB4  306D               	movlw	109
  1561  0CB5  160A  118A  24A9  120A  158A  	fcall	_write_char
  1562                           
  1563                           ;mainLogic.c: 49:     write_char('e');
  1564  0CBA  3065               	movlw	101
  1565  0CBB  160A  118A  24A9  120A  158A  	fcall	_write_char
  1566                           
  1567                           ;mainLogic.c: 50:     write_char(':');
  1568  0CC0  303A               	movlw	58
  1569  0CC1  160A  118A  24A9  120A  158A  	fcall	_write_char
  1570                           
  1571                           ;mainLogic.c: 51:     display_clock();
  1572  0CC6  120A  158A  2116  120A  158A  	fcall	_display_clock
  1573                           
  1574                           ;mainLogic.c: 52:     thermometer_threshhold_settings();
  1575  0CCB  120A  158A  2592  120A  158A  	fcall	_thermometer_threshhold_settings
  1576                           
  1577                           ;mainLogic.c: 53:     date_settings();
  1578  0CD0  120A  118A  2387  120A  158A  	fcall	_date_settings
  1579                           
  1580                           ;mainLogic.c: 54:     time_settings();
  1581  0CD5  120A  118A  2071  120A  158A  	fcall	_time_settings
  1582                           
  1583                           ;mainLogic.c: 55:     write_cmd(0x98);
  1584  0CDA  3098               	movlw	152
  1585  0CDB  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  1586                           
  1587                           ;mainLogic.c: 56:      if((temp_high+'0') == '0' && (temp_low + '0') == '0'){
  1588  0CE0  084A               	movf	_temp_high,w
  1589  0CE1  3E30               	addlw	48
  1590  0CE2  00E9               	movwf	??_main
  1591  0CE3  3000               	movlw	0
  1592  0CE4  1803               	skipnc
  1593  0CE5  3001               	movlw	1
  1594  0CE6  00EA               	movwf	??_main+1
  1595  0CE7  3030               	movlw	48
  1596  0CE8  0669               	xorwf	??_main,w
  1597  0CE9  046A               	iorwf	??_main+1,w
  1598  0CEA  1D03               	btfss	3,2
  1599  0CEB  2D24               	goto	l150
  1600  0CEC  084B               	movf	_temp_low,w
  1601  0CED  3E30               	addlw	48
  1602  0CEE  00E9               	movwf	??_main
  1603  0CEF  3000               	movlw	0
  1604  0CF0  1803               	skipnc
  1605  0CF1  3001               	movlw	1
  1606  0CF2  00EA               	movwf	??_main+1
  1607  0CF3  3030               	movlw	48
  1608  0CF4  0669               	xorwf	??_main,w
  1609  0CF5  046A               	iorwf	??_main+1,w
  1610  0CF6  1D03               	btfss	3,2
  1611  0CF7  2D24               	goto	l150
  1612                           
  1613                           ;mainLogic.c: 57:     alarm__ = set_lower_threshold(var1,var2);
  1614  0CF8  084E               	movf	_var1,w
  1615  0CF9  00E9               	movwf	??_main
  1616  0CFA  01EA               	clrf	??_main+1
  1617  0CFB  0869               	movf	??_main,w
  1618  0CFC  00F3               	movwf	set_lower_threshold@upper_val
  1619  0CFD  086A               	movf	??_main+1,w
  1620  0CFE  00F4               	movwf	set_lower_threshold@upper_val+1
  1621  0CFF  084D               	movf	_var2,w
  1622  0D00  00EB               	movwf	??_main+2
  1623  0D01  01EC               	clrf	??_main+3
  1624  0D02  086B               	movf	??_main+2,w
  1625  0D03  00F5               	movwf	set_lower_threshold@lower_val
  1626  0D04  086C               	movf	??_main+3,w
  1627  0D05  00F6               	movwf	set_lower_threshold@lower_val+1
  1628  0D06  160A  118A  27BE  120A  158A  	fcall	_set_lower_threshold
  1629  0D0B  00ED               	movwf	??_main+4
  1630  0D0C  086D               	movf	??_main+4,w
  1631  0D0D  00CC               	movwf	_alarm__
  1632                           
  1633                           ;mainLogic.c: 58:     alarm__ = set_upper_threshold(var1,var2);
  1634  0D0E  084E               	movf	_var1,w
  1635  0D0F  00E9               	movwf	??_main
  1636  0D10  01EA               	clrf	??_main+1
  1637  0D11  0869               	movf	??_main,w
  1638  0D12  00F3               	movwf	set_upper_threshold@upper_val
  1639  0D13  086A               	movf	??_main+1,w
  1640  0D14  00F4               	movwf	set_upper_threshold@upper_val+1
  1641  0D15  084D               	movf	_var2,w
  1642  0D16  00EB               	movwf	??_main+2
  1643  0D17  01EC               	clrf	??_main+3
  1644  0D18  086B               	movf	??_main+2,w
  1645  0D19  00F5               	movwf	set_upper_threshold@lower_val
  1646  0D1A  086C               	movf	??_main+3,w
  1647  0D1B  00F6               	movwf	set_upper_threshold@lower_val+1
  1648  0D1C  160A  118A  2781  120A  158A  	fcall	_set_upper_threshold
  1649  0D21  00ED               	movwf	??_main+4
  1650  0D22  086D               	movf	??_main+4,w
  1651  0D23  00CC               	movwf	_alarm__
  1652  0D24                     l150:	
  1653                           ;mainLogic.c: 59:     }
  1654                           
  1655                           
  1656                           ;mainLogic.c: 60:     alarm__ = reset_alarm();
  1657  0D24  160A  118A  25EF  120A  158A  	fcall	_reset_alarm
  1658  0D29  00E9               	movwf	??_main
  1659  0D2A  0869               	movf	??_main,w
  1660  0D2B  00CC               	movwf	_alarm__
  1661                           
  1662                           ;mainLogic.c: 61:     set_beep_threshhold(alarm__);
  1663  0D2C  084C               	movf	_alarm__,w
  1664  0D2D  160A  118A  24D7  120A  158A  	fcall	_set_beep_threshhold
  1665                           
  1666                           ;mainLogic.c: 62:     write_char(' ');
  1667  0D32  3020               	movlw	32
  1668  0D33  160A  118A  24A9  120A  158A  	fcall	_write_char
  1669                           
  1670                           ;mainLogic.c: 63:     write_char('H');
  1671  0D38  3048               	movlw	72
  1672  0D39  160A  118A  24A9  120A  158A  	fcall	_write_char
  1673                           
  1674                           ;mainLogic.c: 64:     write_char(':');
  1675  0D3E  303A               	movlw	58
  1676  0D3F  160A  118A  24A9  120A  158A  	fcall	_write_char
  1677                           
  1678                           ;mainLogic.c: 65:     write_char(heater_state);
  1679  0D44  0850               	movf	_heater_state,w
  1680  0D45  160A  118A  24A9  120A  158A  	fcall	_write_char
  1681                           
  1682                           ;mainLogic.c: 66:     write_char('C');
  1683  0D4A  3043               	movlw	67
  1684  0D4B  160A  118A  24A9  120A  158A  	fcall	_write_char
  1685                           
  1686                           ;mainLogic.c: 67:     write_char(':');
  1687  0D50  303A               	movlw	58
  1688  0D51  160A  118A  24A9  120A  158A  	fcall	_write_char
  1689                           
  1690                           ;mainLogic.c: 68:     write_char(cooler_state);
  1691  0D56  084F               	movf	_cooler_state,w
  1692  0D57  160A  118A  24A9  120A  158A  	fcall	_write_char
  1693                           
  1694                           ;mainLogic.c: 69:     for(int i = 0; i < 3; i++)
  1695  0D5C  01EE               	clrf	main@i
  1696  0D5D  01EF               	clrf	main@i+1
  1697  0D5E                     l4674:	
  1698                           
  1699                           ;mainLogic.c: 70:     write_char(' ');
  1700  0D5E  3020               	movlw	32
  1701  0D5F  160A  118A  24A9  120A  158A  	fcall	_write_char
  1702  0D64  3001               	movlw	1
  1703  0D65  07EE               	addwf	main@i,f
  1704  0D66  1803               	skipnc
  1705  0D67  0AEF               	incf	main@i+1,f
  1706  0D68  3000               	movlw	0
  1707  0D69  07EF               	addwf	main@i+1,f
  1708  0D6A  086F               	movf	main@i+1,w
  1709  0D6B  3A80               	xorlw	128
  1710  0D6C  00FF               	movwf	127
  1711  0D6D  3080               	movlw	128
  1712  0D6E  027F               	subwf	127,w
  1713  0D6F  1D03               	skipz
  1714  0D70  2D73               	goto	u3905
  1715  0D71  3003               	movlw	3
  1716  0D72  026E               	subwf	main@i,w
  1717  0D73                     u3905:	
  1718  0D73  1C03               	skipc
  1719  0D74  2D5E               	goto	l4674
  1720                           
  1721                           ;mainLogic.c: 71:     day_counter = modulus_func(day_low,8);
  1722  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  1723  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  1724  0D77  0830               	movf	_day_low+1,w
  1725  0D78  00F8               	movwf	modulus_func@x+1
  1726  0D79  082F               	movf	_day_low,w
  1727  0D7A  00F7               	movwf	modulus_func@x
  1728  0D7B  3008               	movlw	8
  1729  0D7C  00F9               	movwf	modulus_func@y
  1730  0D7D  3000               	movlw	0
  1731  0D7E  00FA               	movwf	modulus_func@y+1
  1732  0D7F  160A  118A  2438  120A  158A  	fcall	_modulus_func
  1733  0D84  0878               	movf	?_modulus_func+1,w
  1734  0D85  00A8               	movwf	_day_counter+1
  1735  0D86  0877               	movf	?_modulus_func,w
  1736  0D87  00A7               	movwf	_day_counter
  1737                           
  1738                           ;mainLogic.c: 72:     display_day(day_counter);
  1739  0D88  0828               	movf	_day_counter+1,w
  1740  0D89  00F4               	movwf	display_day@num+1
  1741  0D8A  0827               	movf	_day_counter,w
  1742  0D8B  00F3               	movwf	display_day@num
  1743  0D8C  120A  158A  2007  120A  158A  	fcall	_display_day
  1744  0D91  2C40               	goto	l4606
  1745  0D92                     __end_of_main:	
  1746                           
  1747                           	psect	text1
  1748  0071                     __ptext1:	
  1749 ;; *************** function _time_settings *****************
  1750 ;; Defined at:
  1751 ;;		line 179 in file "Button_src.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 300/0
  1762 ;;		On exit  : 300/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1765 ;;      Params:         0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0
  1767 ;;      Temps:          0       3       0       0       0
  1768 ;;      Totals:         0       3       0       0       0
  1769 ;;Total ram usage:        3 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    3
  1772 ;; This function calls:
  1773 ;;		_button_delay
  1774 ;;		_incrementor
  1775 ;;		_modulus_func
  1776 ;;		_set_time
  1777 ;;		_time_date_delimiter
  1778 ;;		_time_date_hex_terminator
  1779 ;;		_write_char
  1780 ;;		_write_cmd
  1781 ;; This function is called by:
  1782 ;;		_main
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           
  1787                           ;psect for function _time_settings
  1788  0071                     _time_settings:	
  1789                           
  1790                           ;Button_src.c: 180:  RC0 = 1;
  1791                           
  1792                           ;incstack = 0
  1793                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1794  0071  1407               	bsf	7,0	;volatile
  1795                           
  1796                           ;Button_src.c: 181:  RC1 = 1;
  1797  0072  1487               	bsf	7,1	;volatile
  1798                           
  1799                           ;Button_src.c: 182:  RC2 = 0;
  1800  0073  1107               	bcf	7,2	;volatile
  1801                           
  1802                           ;Button_src.c: 183:  RC3 = 1;
  1803  0074  1587               	bsf	7,3	;volatile
  1804                           
  1805                           ;Button_src.c: 184:   if (RC4 == 0){
  1806  0075  1A07               	btfsc	7,4	;volatile
  1807  0076  0008               	return
  1808                           
  1809                           ;Button_src.c: 185:       write_cmd(0x1);
  1810  0077  3001               	movlw	1
  1811  0078  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  1812  007D                     l692:	
  1813                           ;Button_src.c: 186:       for(;;){
  1814                           
  1815                           
  1816                           ;Button_src.c: 187:             write_cmd(0x80);
  1817  007D  3080               	movlw	128
  1818  007E  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  1819                           
  1820                           ;Button_src.c: 188:             write_char('T');
  1821  0083  3054               	movlw	84
  1822  0084  160A  118A  24A9  120A  118A  	fcall	_write_char
  1823                           
  1824                           ;Button_src.c: 189:             write_char('i');
  1825  0089  3069               	movlw	105
  1826  008A  160A  118A  24A9  120A  118A  	fcall	_write_char
  1827                           
  1828                           ;Button_src.c: 190:             write_char('m');
  1829  008F  306D               	movlw	109
  1830  0090  160A  118A  24A9  120A  118A  	fcall	_write_char
  1831                           
  1832                           ;Button_src.c: 191:             write_char('e');
  1833  0095  3065               	movlw	101
  1834  0096  160A  118A  24A9  120A  118A  	fcall	_write_char
  1835                           
  1836                           ;Button_src.c: 192:             write_char('_');
  1837  009B  305F               	movlw	95
  1838  009C  160A  118A  24A9  120A  118A  	fcall	_write_char
  1839                           
  1840                           ;Button_src.c: 193:             write_char('S');
  1841  00A1  3053               	movlw	83
  1842  00A2  160A  118A  24A9  120A  118A  	fcall	_write_char
  1843                           
  1844                           ;Button_src.c: 194:             write_char('e');
  1845  00A7  3065               	movlw	101
  1846  00A8  160A  118A  24A9  120A  118A  	fcall	_write_char
  1847                           
  1848                           ;Button_src.c: 195:             write_char('t');
  1849  00AD  3074               	movlw	116
  1850  00AE  160A  118A  24A9  120A  118A  	fcall	_write_char
  1851                           
  1852                           ;Button_src.c: 196:             write_char('t');
  1853  00B3  3074               	movlw	116
  1854  00B4  160A  118A  24A9  120A  118A  	fcall	_write_char
  1855                           
  1856                           ;Button_src.c: 197:             write_char('i');
  1857  00B9  3069               	movlw	105
  1858  00BA  160A  118A  24A9  120A  118A  	fcall	_write_char
  1859                           
  1860                           ;Button_src.c: 198:             write_char('n');
  1861  00BF  306E               	movlw	110
  1862  00C0  160A  118A  24A9  120A  118A  	fcall	_write_char
  1863                           
  1864                           ;Button_src.c: 199:             write_char('g');
  1865  00C5  3067               	movlw	103
  1866  00C6  160A  118A  24A9  120A  118A  	fcall	_write_char
  1867                           
  1868                           ;Button_src.c: 200:             write_char('s');
  1869  00CB  3073               	movlw	115
  1870  00CC  160A  118A  24A9  120A  118A  	fcall	_write_char
  1871                           
  1872                           ;Button_src.c: 202:             RC0 = 1;
  1873  00D1  1407               	bsf	7,0	;volatile
  1874                           
  1875                           ;Button_src.c: 203:             RC1 = 0;
  1876  00D2  1087               	bcf	7,1	;volatile
  1877                           
  1878                           ;Button_src.c: 204:             RC2 = 1;
  1879  00D3  1507               	bsf	7,2	;volatile
  1880                           
  1881                           ;Button_src.c: 205:             RC3 = 1;
  1882  00D4  1587               	bsf	7,3	;volatile
  1883                           
  1884                           ;Button_src.c: 207:             if(RC7 == 0 && b =='x'){
  1885  00D5  1B87               	btfsc	7,7	;volatile
  1886  00D6  2948               	goto	l4336
  1887  00D7  3078               	movlw	120
  1888  00D8  0648               	xorwf	_b,w
  1889  00D9  1D03               	btfss	3,2
  1890  00DA  2948               	goto	l4336
  1891                           
  1892                           ;Button_src.c: 208:                 if(stats == 1)
  1893  00DB  032B               	decf	_stats,w
  1894  00DC  042C               	iorwf	_stats+1,w
  1895  00DD  1D03               	btfss	3,2
  1896  00DE  28E3               	goto	l694
  1897                           
  1898                           ;Button_src.c: 209:                    a++;
  1899  00DF  3001               	movlw	1
  1900  00E0  00E4               	movwf	??_time_settings
  1901  00E1  0864               	movf	??_time_settings,w
  1902  00E2  07C9               	addwf	_a,f
  1903  00E3                     l694:	
  1904                           
  1905                           ;Button_src.c: 210:                 if(stats == 0){
  1906  00E3  082B               	movf	_stats,w
  1907  00E4  042C               	iorwf	_stats+1,w
  1908  00E5  1D03               	btfss	3,2
  1909  00E6  28EB               	goto	l695
  1910                           
  1911                           ;Button_src.c: 211:                    stats = 1;
  1912  00E7  3001               	movlw	1
  1913  00E8  00AB               	movwf	_stats
  1914  00E9  3000               	movlw	0
  1915  00EA  00AC               	movwf	_stats+1
  1916  00EB                     l695:	
  1917                           ;Button_src.c: 212:                 }
  1918                           
  1919                           
  1920                           ;Button_src.c: 214:                     x++ ;
  1921  00EB  3001               	movlw	1
  1922  00EC  07B5               	addwf	_x,f
  1923  00ED  1803               	skipnc
  1924  00EE  0AB6               	incf	_x+1,f
  1925  00EF  3000               	movlw	0
  1926  00F0  07B6               	addwf	_x+1,f
  1927                           
  1928                           ;Button_src.c: 215:                     x = modulus_func(x,10);
  1929  00F1  0836               	movf	_x+1,w
  1930  00F2  00F8               	movwf	modulus_func@x+1
  1931  00F3  0835               	movf	_x,w
  1932  00F4  00F7               	movwf	modulus_func@x
  1933  00F5  300A               	movlw	10
  1934  00F6  00F9               	movwf	modulus_func@y
  1935  00F7  3000               	movlw	0
  1936  00F8  00FA               	movwf	modulus_func@y+1
  1937  00F9  160A  118A  2438  120A  118A  	fcall	_modulus_func
  1938  00FE  0878               	movf	?_modulus_func+1,w
  1939  00FF  00B6               	movwf	_x+1
  1940  0100  0877               	movf	?_modulus_func,w
  1941  0101  00B5               	movwf	_x
  1942                           
  1943                           ;Button_src.c: 216:                     if (p == 1){
  1944  0102  0329               	decf	_p,w
  1945  0103  042A               	iorwf	_p+1,w
  1946  0104  1D03               	btfss	3,2
  1947  0105  291F               	goto	l4322
  1948                           
  1949                           ;Button_src.c: 217:                         y = incrementor(y,x,'0');
  1950  0106  0834               	movf	_y+1,w
  1951  0107  00E0               	movwf	incrementor@upper_val+1
  1952  0108  0833               	movf	_y,w
  1953  0109  00DF               	movwf	incrementor@upper_val
  1954  010A  0836               	movf	_x+1,w
  1955  010B  00E2               	movwf	incrementor@lower_val+1
  1956  010C  0835               	movf	_x,w
  1957  010D  00E1               	movwf	incrementor@lower_val
  1958  010E  3030               	movlw	48
  1959  010F  00E4               	movwf	??_time_settings
  1960  0110  0864               	movf	??_time_settings,w
  1961  0111  00E3               	movwf	incrementor@z
  1962  0112  160A  118A  2559  120A  118A  	fcall	_incrementor
  1963  0117  00E5               	movwf	??_time_settings+1
  1964  0118  01E6               	clrf	??_time_settings+2
  1965  0119  0865               	movf	??_time_settings+1,w
  1966  011A  00B3               	movwf	_y
  1967  011B  0866               	movf	??_time_settings+2,w
  1968  011C  00B4               	movwf	_y+1
  1969                           
  1970                           ;Button_src.c: 218:                         p = 0;
  1971  011D  01A9               	clrf	_p
  1972  011E  01AA               	clrf	_p+1
  1973  011F                     l4322:	
  1974                           
  1975                           ;Button_src.c: 220:                     if (x == 9){
  1976  011F  3009               	movlw	9
  1977  0120  0635               	xorwf	_x,w
  1978  0121  0436               	iorwf	_x+1,w
  1979  0122  1D03               	btfss	3,2
  1980  0123  2928               	goto	l4326
  1981                           
  1982                           ;Button_src.c: 221:                         p = 1;
  1983  0124  3001               	movlw	1
  1984  0125  00A9               	movwf	_p
  1985  0126  3000               	movlw	0
  1986  0127  00AA               	movwf	_p+1
  1987  0128                     l4326:	
  1988                           
  1989                           ;Button_src.c: 225:                     a = time_date_hex_terminator(a,'T');
  1990  0128  3054               	movlw	84
  1991  0129  00E4               	movwf	??_time_settings
  1992  012A  0864               	movf	??_time_settings,w
  1993  012B  00F0               	movwf	time_date_hex_terminator@limiter
  1994  012C  0849               	movf	_a,w
  1995  012D  160A  118A  241A  120A  118A  	fcall	_time_date_hex_terminator
  1996  0132  00E5               	movwf	??_time_settings+1
  1997  0133  0865               	movf	??_time_settings+1,w
  1998  0134  00C9               	movwf	_a
  1999                           
  2000                           ;Button_src.c: 226:                     if(y == 2 && x == 4){
  2001  0135  3002               	movlw	2
  2002  0136  0633               	xorwf	_y,w
  2003  0137  0434               	iorwf	_y+1,w
  2004  0138  1D03               	btfss	3,2
  2005  0139  2943               	goto	l4334
  2006  013A  3004               	movlw	4
  2007  013B  0635               	xorwf	_x,w
  2008  013C  0436               	iorwf	_x+1,w
  2009  013D  1D03               	btfss	3,2
  2010  013E  2943               	goto	l4334
  2011                           
  2012                           ;Button_src.c: 227:                         x = 0;
  2013  013F  01B5               	clrf	_x
  2014  0140  01B6               	clrf	_x+1
  2015                           
  2016                           ;Button_src.c: 228:                         y = 0;
  2017  0141  01B3               	clrf	_y
  2018  0142  01B4               	clrf	_y+1
  2019  0143                     l4334:	
  2020                           
  2021                           ;Button_src.c: 230:                     button_delay();
  2022  0143  160A  118A  2459  120A  118A  	fcall	_button_delay
  2023  0148                     l4336:	
  2024                           
  2025                           ;Button_src.c: 232:             if(RC7==0 && b == 'y'){
  2026  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2028  014A  1B87               	btfsc	7,7	;volatile
  2029  014B  29C6               	goto	l4370
  2030  014C  3079               	movlw	121
  2031  014D  0648               	xorwf	_b,w
  2032  014E  1D03               	btfss	3,2
  2033  014F  29C6               	goto	l4370
  2034                           
  2035                           ;Button_src.c: 233:                  if(stats == 1)
  2036  0150  032B               	decf	_stats,w
  2037  0151  042C               	iorwf	_stats+1,w
  2038  0152  1D03               	btfss	3,2
  2039  0153  2958               	goto	l700
  2040                           
  2041                           ;Button_src.c: 234:                    c++;
  2042  0154  3001               	movlw	1
  2043  0155  00E4               	movwf	??_time_settings
  2044  0156  0864               	movf	??_time_settings,w
  2045  0157  07C7               	addwf	_c,f
  2046  0158                     l700:	
  2047                           
  2048                           ;Button_src.c: 235:                 if(stats == 0){
  2049  0158  082B               	movf	_stats,w
  2050  0159  042C               	iorwf	_stats+1,w
  2051  015A  1D03               	btfss	3,2
  2052  015B  2960               	goto	l701
  2053                           
  2054                           ;Button_src.c: 236:                     stats = 1;
  2055  015C  3001               	movlw	1
  2056  015D  00AB               	movwf	_stats
  2057  015E  3000               	movlw	0
  2058  015F  00AC               	movwf	_stats+1
  2059  0160                     l701:	
  2060                           ;Button_src.c: 237:                 }
  2061                           
  2062                           
  2063                           ;Button_src.c: 239:                     t++;
  2064  0160  3001               	movlw	1
  2065  0161  07B9               	addwf	_t,f
  2066  0162  1803               	skipnc
  2067  0163  0ABA               	incf	_t+1,f
  2068  0164  3000               	movlw	0
  2069  0165  07BA               	addwf	_t+1,f
  2070                           
  2071                           ;Button_src.c: 240:                     t = modulus_func(t,10);
  2072  0166  083A               	movf	_t+1,w
  2073  0167  00F8               	movwf	modulus_func@x+1
  2074  0168  0839               	movf	_t,w
  2075  0169  00F7               	movwf	modulus_func@x
  2076  016A  300A               	movlw	10
  2077  016B  00F9               	movwf	modulus_func@y
  2078  016C  3000               	movlw	0
  2079  016D  00FA               	movwf	modulus_func@y+1
  2080  016E  160A  118A  2438  120A  118A  	fcall	_modulus_func
  2081  0173  0878               	movf	?_modulus_func+1,w
  2082  0174  00BA               	movwf	_t+1
  2083  0175  0877               	movf	?_modulus_func,w
  2084  0176  00B9               	movwf	_t
  2085                           
  2086                           ;Button_src.c: 241:                       if (p == 1){
  2087  0177  0329               	decf	_p,w
  2088  0178  042A               	iorwf	_p+1,w
  2089  0179  1D03               	btfss	3,2
  2090  017A  2994               	goto	l4354
  2091                           
  2092                           ;Button_src.c: 242:                         w = incrementor(w,t,'0');
  2093  017B  0838               	movf	_w+1,w
  2094  017C  00E0               	movwf	incrementor@upper_val+1
  2095  017D  0837               	movf	_w,w
  2096  017E  00DF               	movwf	incrementor@upper_val
  2097  017F  083A               	movf	_t+1,w
  2098  0180  00E2               	movwf	incrementor@lower_val+1
  2099  0181  0839               	movf	_t,w
  2100  0182  00E1               	movwf	incrementor@lower_val
  2101  0183  3030               	movlw	48
  2102  0184  00E4               	movwf	??_time_settings
  2103  0185  0864               	movf	??_time_settings,w
  2104  0186  00E3               	movwf	incrementor@z
  2105  0187  160A  118A  2559  120A  118A  	fcall	_incrementor
  2106  018C  00E5               	movwf	??_time_settings+1
  2107  018D  01E6               	clrf	??_time_settings+2
  2108  018E  0865               	movf	??_time_settings+1,w
  2109  018F  00B7               	movwf	_w
  2110  0190  0866               	movf	??_time_settings+2,w
  2111  0191  00B8               	movwf	_w+1
  2112                           
  2113                           ;Button_src.c: 243:                         p = 0;
  2114  0192  01A9               	clrf	_p
  2115  0193  01AA               	clrf	_p+1
  2116  0194                     l4354:	
  2117                           
  2118                           ;Button_src.c: 245:                     if (t == 9){
  2119  0194  3009               	movlw	9
  2120  0195  0639               	xorwf	_t,w
  2121  0196  043A               	iorwf	_t+1,w
  2122  0197  1D03               	btfss	3,2
  2123  0198  299D               	goto	l4358
  2124                           
  2125                           ;Button_src.c: 246:                         p = 1;
  2126  0199  3001               	movlw	1
  2127  019A  00A9               	movwf	_p
  2128  019B  3000               	movlw	0
  2129  019C  00AA               	movwf	_p+1
  2130  019D                     l4358:	
  2131                           
  2132                           ;Button_src.c: 248:                     w = incrementor(w,t,'9');
  2133  019D  0838               	movf	_w+1,w
  2134  019E  00E0               	movwf	incrementor@upper_val+1
  2135  019F  0837               	movf	_w,w
  2136  01A0  00DF               	movwf	incrementor@upper_val
  2137  01A1  083A               	movf	_t+1,w
  2138  01A2  00E2               	movwf	incrementor@lower_val+1
  2139  01A3  0839               	movf	_t,w
  2140  01A4  00E1               	movwf	incrementor@lower_val
  2141  01A5  3039               	movlw	57
  2142  01A6  00E4               	movwf	??_time_settings
  2143  01A7  0864               	movf	??_time_settings,w
  2144  01A8  00E3               	movwf	incrementor@z
  2145  01A9  160A  118A  2559  120A  118A  	fcall	_incrementor
  2146  01AE  00E5               	movwf	??_time_settings+1
  2147  01AF  01E6               	clrf	??_time_settings+2
  2148  01B0  0865               	movf	??_time_settings+1,w
  2149  01B1  00B7               	movwf	_w
  2150  01B2  0866               	movf	??_time_settings+2,w
  2151  01B3  00B8               	movwf	_w+1
  2152                           
  2153                           ;Button_src.c: 249:                     if(c == (0x59 + 1)){
  2154  01B4  305A               	movlw	90
  2155  01B5  0647               	xorwf	_c,w
  2156  01B6  1903               	btfsc	3,2
  2157                           
  2158                           ;Button_src.c: 250:                         c = 0x00;
  2159  01B7  01C7               	clrf	_c
  2160                           
  2161                           ;Button_src.c: 252:                     if(w == 6){
  2162  01B8  3006               	movlw	6
  2163  01B9  0637               	xorwf	_w,w
  2164  01BA  0438               	iorwf	_w+1,w
  2165  01BB  1D03               	btfss	3,2
  2166  01BC  29C1               	goto	l4368
  2167                           
  2168                           ;Button_src.c: 253:                         w = 0;
  2169  01BD  01B7               	clrf	_w
  2170  01BE  01B8               	clrf	_w+1
  2171                           
  2172                           ;Button_src.c: 254:                         t = 0;
  2173  01BF  01B9               	clrf	_t
  2174  01C0  01BA               	clrf	_t+1
  2175  01C1                     l4368:	
  2176                           
  2177                           ;Button_src.c: 256:                     button_delay();
  2178  01C1  160A  118A  2459  120A  118A  	fcall	_button_delay
  2179  01C6                     l4370:	
  2180                           
  2181                           ;Button_src.c: 259:              write_cmd(0x88);
  2182  01C6  3088               	movlw	136
  2183  01C7  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  2184                           
  2185                           ;Button_src.c: 260:               if(stats==0){
  2186  01CC  082B               	movf	_stats,w
  2187  01CD  042C               	iorwf	_stats+1,w
  2188  01CE  1D03               	btfss	3,2
  2189  01CF  29D8               	goto	l4376
  2190                           
  2191                           ;Button_src.c: 261:                   table[2] = prev_hex_hours;
  2192  01D0  0841               	movf	_prev_hex_hours,w
  2193  01D1  00E4               	movwf	??_time_settings
  2194  01D2  0864               	movf	??_time_settings,w
  2195  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2196  01D4  00AA               	movwf	(_table^(0+128)+2)
  2197                           
  2198                           ;Button_src.c: 262:                   table[1] = prev_hex_mins;
  2199  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2200  01D6  0840               	movf	_prev_hex_mins,w
  2201  01D7  29E3               	goto	L1
  2202  01D8                     l4376:	
  2203                           ;Button_src.c: 263:               }
  2204                           
  2205  01D8  032B               	decf	_stats,w
  2206  01D9  042C               	iorwf	_stats+1,w
  2207  01DA  1D03               	btfss	3,2
  2208  01DB  29E7               	goto	l4380
  2209                           
  2210                           ;Button_src.c: 265:               {;Button_src.c: 266:                  table[2]= a;
  2211  01DC  0849               	movf	_a,w
  2212  01DD  00E4               	movwf	??_time_settings
  2213  01DE  0864               	movf	??_time_settings,w
  2214  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2215  01E0  00AA               	movwf	(_table^(0+128)+2)
  2216                           
  2217                           ;Button_src.c: 267:                  table[1] = c;
  2218  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2219  01E2  0847               	movf	_c,w
  2220  01E3                     L1:	
  2221  01E3  00E4               	movwf	??_time_settings
  2222  01E4  0864               	movf	??_time_settings,w
  2223  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2224  01E6  00A9               	movwf	(_table^(0+128)+1)
  2225  01E7                     l4380:	
  2226                           
  2227                           ;Button_src.c: 271:                     a = time_date_delimiter(a,0x11,'9',4);
  2228  01E7  3011               	movlw	17
  2229  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2230  01E9  00E4               	movwf	??_time_settings
  2231  01EA  0864               	movf	??_time_settings,w
  2232  01EB  00F0               	movwf	time_date_delimiter@hex
  2233  01EC  3039               	movlw	57
  2234  01ED  00E5               	movwf	??_time_settings+1
  2235  01EE  0865               	movf	??_time_settings+1,w
  2236  01EF  00F1               	movwf	time_date_delimiter@limiter
  2237  01F0  3004               	movlw	4
  2238  01F1  00F2               	movwf	time_date_delimiter@type
  2239  01F2  3000               	movlw	0
  2240  01F3  00F3               	movwf	time_date_delimiter@type+1
  2241  01F4  0849               	movf	_a,w
  2242  01F5  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2243  01FA  00E6               	movwf	??_time_settings+2
  2244  01FB  0866               	movf	??_time_settings+2,w
  2245  01FC  00C9               	movwf	_a
  2246                           
  2247                           ;Button_src.c: 272:                     a = time_date_delimiter(a,0x21,'J',4);
  2248  01FD  3021               	movlw	33
  2249  01FE  00E4               	movwf	??_time_settings
  2250  01FF  0864               	movf	??_time_settings,w
  2251  0200  00F0               	movwf	time_date_delimiter@hex
  2252  0201  304A               	movlw	74
  2253  0202  00E5               	movwf	??_time_settings+1
  2254  0203  0865               	movf	??_time_settings+1,w
  2255  0204  00F1               	movwf	time_date_delimiter@limiter
  2256  0205  3004               	movlw	4
  2257  0206  00F2               	movwf	time_date_delimiter@type
  2258  0207  3000               	movlw	0
  2259  0208  00F3               	movwf	time_date_delimiter@type+1
  2260  0209  0849               	movf	_a,w
  2261  020A  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2262  020F  00E6               	movwf	??_time_settings+2
  2263  0210  0866               	movf	??_time_settings+2,w
  2264  0211  00C9               	movwf	_a
  2265                           
  2266                           ;Button_src.c: 274:                     c = time_date_delimiter(c,0x11,'9',5);
  2267  0212  3011               	movlw	17
  2268  0213  00E4               	movwf	??_time_settings
  2269  0214  0864               	movf	??_time_settings,w
  2270  0215  00F0               	movwf	time_date_delimiter@hex
  2271  0216  3039               	movlw	57
  2272  0217  00E5               	movwf	??_time_settings+1
  2273  0218  0865               	movf	??_time_settings+1,w
  2274  0219  00F1               	movwf	time_date_delimiter@limiter
  2275  021A  3005               	movlw	5
  2276  021B  00F2               	movwf	time_date_delimiter@type
  2277  021C  3000               	movlw	0
  2278  021D  00F3               	movwf	time_date_delimiter@type+1
  2279  021E  0847               	movf	_c,w
  2280  021F  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2281  0224  00E6               	movwf	??_time_settings+2
  2282  0225  0866               	movf	??_time_settings+2,w
  2283  0226  00C7               	movwf	_c
  2284                           
  2285                           ;Button_src.c: 275:                     c = time_date_delimiter(c,0x21,'J',5);
  2286  0227  3021               	movlw	33
  2287  0228  00E4               	movwf	??_time_settings
  2288  0229  0864               	movf	??_time_settings,w
  2289  022A  00F0               	movwf	time_date_delimiter@hex
  2290  022B  304A               	movlw	74
  2291  022C  00E5               	movwf	??_time_settings+1
  2292  022D  0865               	movf	??_time_settings+1,w
  2293  022E  00F1               	movwf	time_date_delimiter@limiter
  2294  022F  3005               	movlw	5
  2295  0230  00F2               	movwf	time_date_delimiter@type
  2296  0231  3000               	movlw	0
  2297  0232  00F3               	movwf	time_date_delimiter@type+1
  2298  0233  0847               	movf	_c,w
  2299  0234  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2300  0239  00E6               	movwf	??_time_settings+2
  2301  023A  0866               	movf	??_time_settings+2,w
  2302  023B  00C7               	movwf	_c
  2303                           
  2304                           ;Button_src.c: 276:                     c = time_date_delimiter(c,0x31,'Y',5);
  2305  023C  3031               	movlw	49
  2306  023D  00E4               	movwf	??_time_settings
  2307  023E  0864               	movf	??_time_settings,w
  2308  023F  00F0               	movwf	time_date_delimiter@hex
  2309  0240  3059               	movlw	89
  2310  0241  00E5               	movwf	??_time_settings+1
  2311  0242  0865               	movf	??_time_settings+1,w
  2312  0243  00F1               	movwf	time_date_delimiter@limiter
  2313  0244  3005               	movlw	5
  2314  0245  00F2               	movwf	time_date_delimiter@type
  2315  0246  3000               	movlw	0
  2316  0247  00F3               	movwf	time_date_delimiter@type+1
  2317  0248  0847               	movf	_c,w
  2318  0249  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2319  024E  00E6               	movwf	??_time_settings+2
  2320  024F  0866               	movf	??_time_settings+2,w
  2321  0250  00C7               	movwf	_c
  2322                           
  2323                           ;Button_src.c: 277:                     c = time_date_delimiter(c,0x41,'j',5);
  2324  0251  3041               	movlw	65
  2325  0252  00E4               	movwf	??_time_settings
  2326  0253  0864               	movf	??_time_settings,w
  2327  0254  00F0               	movwf	time_date_delimiter@hex
  2328  0255  306A               	movlw	106
  2329  0256  00E5               	movwf	??_time_settings+1
  2330  0257  0865               	movf	??_time_settings+1,w
  2331  0258  00F1               	movwf	time_date_delimiter@limiter
  2332  0259  3005               	movlw	5
  2333  025A  00F2               	movwf	time_date_delimiter@type
  2334  025B  3000               	movlw	0
  2335  025C  00F3               	movwf	time_date_delimiter@type+1
  2336  025D  0847               	movf	_c,w
  2337  025E  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2338  0263  00E6               	movwf	??_time_settings+2
  2339  0264  0866               	movf	??_time_settings+2,w
  2340  0265  00C7               	movwf	_c
  2341                           
  2342                           ;Button_src.c: 278:                     c = time_date_delimiter(c,0x51,'z',5);
  2343  0266  3051               	movlw	81
  2344  0267  00E4               	movwf	??_time_settings
  2345  0268  0864               	movf	??_time_settings,w
  2346  0269  00F0               	movwf	time_date_delimiter@hex
  2347  026A  307A               	movlw	122
  2348  026B  00E5               	movwf	??_time_settings+1
  2349  026C  0865               	movf	??_time_settings+1,w
  2350  026D  00F1               	movwf	time_date_delimiter@limiter
  2351  026E  3005               	movlw	5
  2352  026F  00F2               	movwf	time_date_delimiter@type
  2353  0270  3000               	movlw	0
  2354  0271  00F3               	movwf	time_date_delimiter@type+1
  2355  0272  0847               	movf	_c,w
  2356  0273  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  2357  0278  00E6               	movwf	??_time_settings+2
  2358  0279  0866               	movf	??_time_settings+2,w
  2359  027A  00C7               	movwf	_c
  2360                           
  2361                           ;Button_src.c: 280:                   RC0 = 0;
  2362  027B  1007               	bcf	7,0	;volatile
  2363                           
  2364                           ;Button_src.c: 281:                   RC1 = 1;
  2365  027C  1487               	bsf	7,1	;volatile
  2366                           
  2367                           ;Button_src.c: 282:                   RC2 = 1;
  2368  027D  1507               	bsf	7,2	;volatile
  2369                           
  2370                           ;Button_src.c: 283:                   RC3 = 1;
  2371  027E  1587               	bsf	7,3	;volatile
  2372                           
  2373                           ;Button_src.c: 284:                     if (RC6 == 0 ){
  2374  027F  1B07               	btfsc	7,6	;volatile
  2375  0280  2A95               	goto	l709
  2376                           
  2377                           ;Button_src.c: 285:                           write_cmd(0x1);
  2378  0281  3001               	movlw	1
  2379  0282  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  2380                           
  2381                           ;Button_src.c: 286:                           a = 0x00;
  2382  0287  01C9               	clrf	_a
  2383                           
  2384                           ;Button_src.c: 287:                           c = 0x00;
  2385  0288  01C7               	clrf	_c
  2386                           
  2387                           ;Button_src.c: 288:                           x = 0;
  2388  0289  01B5               	clrf	_x
  2389  028A  01B6               	clrf	_x+1
  2390                           
  2391                           ;Button_src.c: 289:                           y = 0;
  2392  028B  01B3               	clrf	_y
  2393  028C  01B4               	clrf	_y+1
  2394                           
  2395                           ;Button_src.c: 290:                           w = 0;
  2396  028D  01B7               	clrf	_w
  2397  028E  01B8               	clrf	_w+1
  2398                           
  2399                           ;Button_src.c: 291:                           t = 0;
  2400  028F  01B9               	clrf	_t
  2401  0290  01BA               	clrf	_t+1
  2402                           
  2403                           ;Button_src.c: 292:                           set_time();
  2404  0291  160A  118A  25C7   	fcall	_set_time
  2405  0294  0008               	return
  2406  0295                     l709:	
  2407                           ;Button_src.c: 294:                             }
  2408                           
  2409                           
  2410                           ;Button_src.c: 295:                   RC0 = 1;
  2411  0295  1407               	bsf	7,0	;volatile
  2412                           
  2413                           ;Button_src.c: 296:                   RC1 = 1;
  2414  0296  1487               	bsf	7,1	;volatile
  2415                           
  2416                           ;Button_src.c: 297:                   RC2 = 0;
  2417  0297  1107               	bcf	7,2	;volatile
  2418                           
  2419                           ;Button_src.c: 298:                   RC3 = 1;
  2420  0298  1587               	bsf	7,3	;volatile
  2421                           
  2422                           ;Button_src.c: 299:                   z = modulus_func(z,2);
  2423  0299  0832               	movf	_z+1,w
  2424  029A  00F8               	movwf	modulus_func@x+1
  2425  029B  0831               	movf	_z,w
  2426  029C  00F7               	movwf	modulus_func@x
  2427  029D  3002               	movlw	2
  2428  029E  00F9               	movwf	modulus_func@y
  2429  029F  3000               	movlw	0
  2430  02A0  00FA               	movwf	modulus_func@y+1
  2431  02A1  160A  118A  2438  120A  118A  	fcall	_modulus_func
  2432  02A6  0878               	movf	?_modulus_func+1,w
  2433  02A7  00B2               	movwf	_z+1
  2434  02A8  0877               	movf	?_modulus_func,w
  2435  02A9  00B1               	movwf	_z
  2436                           
  2437                           ;Button_src.c: 300:                   if(RC4 == 0 && z ==0){
  2438  02AA  1A07               	btfsc	7,4	;volatile
  2439  02AB  2AE5               	goto	l4434
  2440  02AC  0831               	movf	_z,w
  2441  02AD  0432               	iorwf	_z+1,w
  2442  02AE  1D03               	btfss	3,2
  2443  02AF  2AE5               	goto	l4434
  2444                           
  2445                           ;Button_src.c: 301:                       write_cmd(0x90);
  2446  02B0  3090               	movlw	144
  2447  02B1  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  2448                           
  2449                           ;Button_src.c: 302:                       write_char('H');
  2450  02B6  3048               	movlw	72
  2451  02B7  160A  118A  24A9  120A  118A  	fcall	_write_char
  2452                           
  2453                           ;Button_src.c: 303:                       write_char('o');
  2454  02BC  306F               	movlw	111
  2455  02BD  160A  118A  24A9  120A  118A  	fcall	_write_char
  2456                           
  2457                           ;Button_src.c: 304:                       write_char('u');
  2458  02C2  3075               	movlw	117
  2459  02C3  160A  118A  24A9  120A  118A  	fcall	_write_char
  2460                           
  2461                           ;Button_src.c: 305:                       write_char('r');
  2462  02C8  3072               	movlw	114
  2463  02C9  160A  118A  24A9  120A  118A  	fcall	_write_char
  2464                           
  2465                           ;Button_src.c: 306:                       write_char(':');
  2466  02CE  303A               	movlw	58
  2467  02CF  160A  118A  24A9  120A  118A  	fcall	_write_char
  2468                           
  2469                           ;Button_src.c: 307:                       b = 'x';
  2470  02D4  3078               	movlw	120
  2471  02D5  00E4               	movwf	??_time_settings
  2472  02D6  0864               	movf	??_time_settings,w
  2473  02D7  00C8               	movwf	_b
  2474                           
  2475                           ;Button_src.c: 308:                       button_delay();
  2476  02D8  160A  118A  2459  120A  118A  	fcall	_button_delay
  2477                           
  2478                           ;Button_src.c: 309:                       z++;
  2479  02DD  3001               	movlw	1
  2480  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2481  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2482  02E0  07B1               	addwf	_z,f
  2483  02E1  1803               	skipnc
  2484  02E2  0AB2               	incf	_z+1,f
  2485  02E3  3000               	movlw	0
  2486  02E4  07B2               	addwf	_z+1,f
  2487  02E5                     l4434:	
  2488                           
  2489                           ;Button_src.c: 311:                   RC0 = 1;
  2490  02E5  1407               	bsf	7,0	;volatile
  2491                           
  2492                           ;Button_src.c: 312:                   RC1 = 1;
  2493  02E6  1487               	bsf	7,1	;volatile
  2494                           
  2495                           ;Button_src.c: 313:                   RC2 = 0;
  2496  02E7  1107               	bcf	7,2	;volatile
  2497                           
  2498                           ;Button_src.c: 314:                   RC3 = 1;
  2499  02E8  1587               	bsf	7,3	;volatile
  2500                           
  2501                           ;Button_src.c: 316:                   if(RC4 == 0&& z ==1){
  2502  02E9  1A07               	btfsc	7,4	;volatile
  2503  02EA  2B22               	goto	l712
  2504  02EB  0331               	decf	_z,w
  2505  02EC  0432               	iorwf	_z+1,w
  2506  02ED  1D03               	btfss	3,2
  2507  02EE  2B22               	goto	l712
  2508                           
  2509                           ;Button_src.c: 317:                     z++;
  2510  02EF  3001               	movlw	1
  2511  02F0  07B1               	addwf	_z,f
  2512  02F1  1803               	skipnc
  2513  02F2  0AB2               	incf	_z+1,f
  2514  02F3  3000               	movlw	0
  2515  02F4  07B2               	addwf	_z+1,f
  2516                           
  2517                           ;Button_src.c: 318:                     button_delay();
  2518  02F5  160A  118A  2459  120A  118A  	fcall	_button_delay
  2519                           
  2520                           ;Button_src.c: 319:                     write_cmd(0x90);
  2521  02FA  3090               	movlw	144
  2522  02FB  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  2523                           
  2524                           ;Button_src.c: 320:                     write_char('M');
  2525  0300  304D               	movlw	77
  2526  0301  160A  118A  24A9  120A  118A  	fcall	_write_char
  2527                           
  2528                           ;Button_src.c: 321:                     write_char('i');
  2529  0306  3069               	movlw	105
  2530  0307  160A  118A  24A9  120A  118A  	fcall	_write_char
  2531                           
  2532                           ;Button_src.c: 322:                     write_char('n');
  2533  030C  306E               	movlw	110
  2534  030D  160A  118A  24A9  120A  118A  	fcall	_write_char
  2535                           
  2536                           ;Button_src.c: 323:                     write_char('s');
  2537  0312  3073               	movlw	115
  2538  0313  160A  118A  24A9  120A  118A  	fcall	_write_char
  2539                           
  2540                           ;Button_src.c: 324:                     write_char(':');
  2541  0318  303A               	movlw	58
  2542  0319  160A  118A  24A9  120A  118A  	fcall	_write_char
  2543                           
  2544                           ;Button_src.c: 325:                     b = 'y';
  2545  031E  3079               	movlw	121
  2546  031F  00E4               	movwf	??_time_settings
  2547  0320  0864               	movf	??_time_settings,w
  2548  0321  00C8               	movwf	_b
  2549  0322                     l712:	
  2550                           ;Button_src.c: 326:                   }
  2551                           
  2552                           
  2553                           ;Button_src.c: 327:                    write_cmd(0x88);
  2554  0322  3088               	movlw	136
  2555  0323  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  2556                           
  2557                           ;Button_src.c: 331:                   RC0 = 1;
  2558  0328  1407               	bsf	7,0	;volatile
  2559                           
  2560                           ;Button_src.c: 332:                   RC1 = 1;
  2561  0329  1487               	bsf	7,1	;volatile
  2562                           
  2563                           ;Button_src.c: 333:                   RC2 = 0;
  2564  032A  1107               	bcf	7,2	;volatile
  2565                           
  2566                           ;Button_src.c: 334:                   RC3 = 1;
  2567  032B  1587               	bsf	7,3	;volatile
  2568                           
  2569                           ;Button_src.c: 336:              write_cmd(0x88);
  2570  032C  3088               	movlw	136
  2571  032D  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  2572                           
  2573                           ;Button_src.c: 337:              write_char('T');
  2574  0332  3054               	movlw	84
  2575  0333  160A  118A  24A9  120A  118A  	fcall	_write_char
  2576                           
  2577                           ;Button_src.c: 338:              write_char('i');
  2578  0338  3069               	movlw	105
  2579  0339  160A  118A  24A9  120A  118A  	fcall	_write_char
  2580                           
  2581                           ;Button_src.c: 339:              write_char('m');
  2582  033E  306D               	movlw	109
  2583  033F  160A  118A  24A9  120A  118A  	fcall	_write_char
  2584                           
  2585                           ;Button_src.c: 340:              write_char('e');
  2586  0344  3065               	movlw	101
  2587  0345  160A  118A  24A9  120A  118A  	fcall	_write_char
  2588                           
  2589                           ;Button_src.c: 341:              write_char(':');
  2590  034A  303A               	movlw	58
  2591  034B  160A  118A  24A9  120A  118A  	fcall	_write_char
  2592                           
  2593                           ;Button_src.c: 342:              write_char(y + '0');
  2594  0350  0833               	movf	_y,w
  2595  0351  3E30               	addlw	48
  2596  0352  160A  118A  24A9  120A  118A  	fcall	_write_char
  2597                           
  2598                           ;Button_src.c: 343:              write_char(x + '0');
  2599  0357  0835               	movf	_x,w
  2600  0358  3E30               	addlw	48
  2601  0359  160A  118A  24A9  120A  118A  	fcall	_write_char
  2602                           
  2603                           ;Button_src.c: 344:              write_char(':');
  2604  035E  303A               	movlw	58
  2605  035F  160A  118A  24A9  120A  118A  	fcall	_write_char
  2606                           
  2607                           ;Button_src.c: 345:              write_char(w + '0');
  2608  0364  0837               	movf	_w,w
  2609  0365  3E30               	addlw	48
  2610  0366  160A  118A  24A9  120A  118A  	fcall	_write_char
  2611                           
  2612                           ;Button_src.c: 346:              write_char(t + '0');
  2613  036B  0839               	movf	_t,w
  2614  036C  3E30               	addlw	48
  2615  036D  160A  118A  24A9  120A  118A  	fcall	_write_char
  2616                           
  2617                           ;Button_src.c: 348:             RC0 = 0;
  2618  0372  1007               	bcf	7,0	;volatile
  2619                           
  2620                           ;Button_src.c: 349:             RC1 = 1;
  2621  0373  1487               	bsf	7,1	;volatile
  2622                           
  2623                           ;Button_src.c: 350:             RC2 = 1;
  2624  0374  1507               	bsf	7,2	;volatile
  2625                           
  2626                           ;Button_src.c: 351:             RC3 = 1;
  2627  0375  1587               	bsf	7,3	;volatile
  2628                           
  2629                           ;Button_src.c: 352:             if (RC7 == 0 ){
  2630  0376  1B87               	btfsc	7,7	;volatile
  2631  0377  287D               	goto	l692
  2632                           
  2633                           ;Button_src.c: 353:             a = 0x00;
  2634  0378  01C9               	clrf	_a
  2635                           
  2636                           ;Button_src.c: 354:             c = 0x00;
  2637  0379  01C7               	clrf	_c
  2638                           
  2639                           ;Button_src.c: 355:             x = 0;
  2640  037A  01B5               	clrf	_x
  2641  037B  01B6               	clrf	_x+1
  2642                           
  2643                           ;Button_src.c: 356:             y = 0;
  2644  037C  01B3               	clrf	_y
  2645  037D  01B4               	clrf	_y+1
  2646                           
  2647                           ;Button_src.c: 357:             w = 0;
  2648  037E  01B7               	clrf	_w
  2649  037F  01B8               	clrf	_w+1
  2650                           
  2651                           ;Button_src.c: 358:             t = 0;
  2652  0380  01B9               	clrf	_t
  2653  0381  01BA               	clrf	_t+1
  2654                           
  2655                           ;Button_src.c: 359:             write_cmd(0x1);
  2656  0382  3001               	movlw	1
  2657  0383  160A  118A  24C0   	fcall	_write_cmd
  2658                           
  2659                           ;Button_src.c: 360:             break;
  2660  0386  0008               	return
  2661  0387                     __end_of_time_settings:	
  2662                           
  2663                           	psect	text2
  2664  0D92                     __ptext2:	
  2665 ;; *************** function _thermometer_threshhold_settings *****************
  2666 ;; Defined at:
  2667 ;;		line 23 in file "Button_src.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  i               2    8[BANK0 ] int 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 300/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2681 ;;      Params:         0       0       0       0       0
  2682 ;;      Locals:         0       2       0       0       0
  2683 ;;      Temps:          0       3       0       0       0
  2684 ;;      Totals:         0       5       0       0       0
  2685 ;;Total ram usage:        5 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    3
  2688 ;; This function calls:
  2689 ;;		_button_delay
  2690 ;;		_decrementor
  2691 ;;		_incrementor
  2692 ;;		_modulus_func
  2693 ;;		_write_char
  2694 ;;		_write_cmd
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function _thermometer_threshhold_settings
  2702  0D92                     _thermometer_threshhold_settings:	
  2703                           
  2704                           ;Button_src.c: 24:  RC0 = 1;
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2708  0D92  1407               	bsf	7,0	;volatile
  2709                           
  2710                           ;Button_src.c: 25:  RC1 = 0;
  2711  0D93  1087               	bcf	7,1	;volatile
  2712                           
  2713                           ;Button_src.c: 26:  RC2 = 1;
  2714  0D94  1507               	bsf	7,2	;volatile
  2715                           
  2716                           ;Button_src.c: 27:  RC3 = 1;
  2717  0D95  1587               	bsf	7,3	;volatile
  2718                           
  2719                           ;Button_src.c: 28:   if (RC4 == 0){
  2720  0D96  1A07               	btfsc	7,4	;volatile
  2721  0D97  0008               	return
  2722                           
  2723                           ;Button_src.c: 29:       write_cmd(0x1);
  2724  0D98  3001               	movlw	1
  2725  0D99  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  2726                           
  2727                           ;Button_src.c: 31:             write_cmd(0x80);
  2728                           
  2729                           ;Button_src.c: 30:       for(;;){
  2730  0D9E  3080               	movlw	128
  2731  0D9F  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  2732                           
  2733                           ;Button_src.c: 32:             write_char('t');
  2734  0DA4  3074               	movlw	116
  2735  0DA5  160A  118A  24A9  120A  158A  	fcall	_write_char
  2736                           
  2737                           ;Button_src.c: 33:             write_char('h');
  2738  0DAA  3068               	movlw	104
  2739  0DAB  160A  118A  24A9  120A  158A  	fcall	_write_char
  2740                           
  2741                           ;Button_src.c: 34:             write_char('r');
  2742  0DB0  3072               	movlw	114
  2743  0DB1  160A  118A  24A9  120A  158A  	fcall	_write_char
  2744                           
  2745                           ;Button_src.c: 35:             write_char('e');
  2746  0DB6  3065               	movlw	101
  2747  0DB7  160A  118A  24A9  120A  158A  	fcall	_write_char
  2748                           
  2749                           ;Button_src.c: 36:             write_char('s');
  2750  0DBC  3073               	movlw	115
  2751  0DBD  160A  118A  24A9  120A  158A  	fcall	_write_char
  2752                           
  2753                           ;Button_src.c: 37:             write_char('h');
  2754  0DC2  3068               	movlw	104
  2755  0DC3  160A  118A  24A9  120A  158A  	fcall	_write_char
  2756                           
  2757                           ;Button_src.c: 38:             write_char('o');
  2758  0DC8  306F               	movlw	111
  2759  0DC9  160A  118A  24A9  120A  158A  	fcall	_write_char
  2760                           
  2761                           ;Button_src.c: 39:             write_char('l');
  2762  0DCE  306C               	movlw	108
  2763  0DCF  160A  118A  24A9  120A  158A  	fcall	_write_char
  2764                           
  2765                           ;Button_src.c: 40:             write_char('d');
  2766  0DD4  3064               	movlw	100
  2767  0DD5  160A  118A  24A9  120A  158A  	fcall	_write_char
  2768                           
  2769                           ;Button_src.c: 42:             write_cmd(0x90);
  2770  0DDA  3090               	movlw	144
  2771  0DDB  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  2772                           
  2773                           ;Button_src.c: 43:             write_char('C');
  2774  0DE0  3043               	movlw	67
  2775  0DE1  160A  118A  24A9  120A  158A  	fcall	_write_char
  2776                           
  2777                           ;Button_src.c: 44:             write_char('u');
  2778  0DE6  3075               	movlw	117
  2779  0DE7  160A  118A  24A9  120A  158A  	fcall	_write_char
  2780                           
  2781                           ;Button_src.c: 45:             write_char('r');
  2782  0DEC  3072               	movlw	114
  2783  0DED  160A  118A  24A9  120A  158A  	fcall	_write_char
  2784                           
  2785                           ;Button_src.c: 46:             write_char('r');
  2786  0DF2  3072               	movlw	114
  2787  0DF3  160A  118A  24A9  120A  158A  	fcall	_write_char
  2788                           
  2789                           ;Button_src.c: 47:             write_char('e');
  2790  0DF8  3065               	movlw	101
  2791  0DF9  160A  118A  24A9  120A  158A  	fcall	_write_char
  2792                           
  2793                           ;Button_src.c: 48:             write_char('n');
  2794  0DFE  306E               	movlw	110
  2795  0DFF  160A  118A  24A9  120A  158A  	fcall	_write_char
  2796                           
  2797                           ;Button_src.c: 49:             write_char('t');
  2798  0E04  3074               	movlw	116
  2799  0E05  160A  118A  24A9  120A  158A  	fcall	_write_char
  2800                           
  2801                           ;Button_src.c: 50:             write_char(':');
  2802  0E0A  303A               	movlw	58
  2803  0E0B  160A  118A  24A9  120A  158A  	fcall	_write_char
  2804                           
  2805                           ;Button_src.c: 52:             write_char(var1 + '0');
  2806  0E10  084E               	movf	_var1,w
  2807  0E11  3E30               	addlw	48
  2808  0E12  160A  118A  24A9  120A  158A  	fcall	_write_char
  2809                           
  2810                           ;Button_src.c: 53:             write_char(var2 + '0');
  2811  0E17  084D               	movf	_var2,w
  2812  0E18  3E30               	addlw	48
  2813  0E19  160A  118A  24A9  120A  158A  	fcall	_write_char
  2814                           
  2815                           ;Button_src.c: 55:             write_cmd(0x88);
  2816  0E1E  3088               	movlw	136
  2817  0E1F  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  2818                           
  2819                           ;Button_src.c: 56:             write_char('S');
  2820  0E24  3053               	movlw	83
  2821  0E25  160A  118A  24A9  120A  158A  	fcall	_write_char
  2822                           
  2823                           ;Button_src.c: 57:             write_char('e');
  2824  0E2A  3065               	movlw	101
  2825  0E2B  160A  118A  24A9  120A  158A  	fcall	_write_char
  2826                           
  2827                           ;Button_src.c: 58:             write_char('t');
  2828  0E30  3074               	movlw	116
  2829  0E31  160A  118A  24A9  120A  158A  	fcall	_write_char
  2830                           
  2831                           ;Button_src.c: 59:             write_char('_');
  2832  0E36  305F               	movlw	95
  2833  0E37  160A  118A  24A9  120A  158A  	fcall	_write_char
  2834                           
  2835                           ;Button_src.c: 60:             write_char('t');
  2836  0E3C  3074               	movlw	116
  2837  0E3D  160A  118A  24A9  120A  158A  	fcall	_write_char
  2838                           
  2839                           ;Button_src.c: 61:             write_char('h');
  2840  0E42  3068               	movlw	104
  2841  0E43  160A  118A  24A9  120A  158A  	fcall	_write_char
  2842                           
  2843                           ;Button_src.c: 62:             write_char('r');
  2844  0E48  3072               	movlw	114
  2845  0E49  160A  118A  24A9  120A  158A  	fcall	_write_char
  2846                           
  2847                           ;Button_src.c: 63:             write_char('e');
  2848  0E4E  3065               	movlw	101
  2849  0E4F  160A  118A  24A9  120A  158A  	fcall	_write_char
  2850                           
  2851                           ;Button_src.c: 64:             write_char('s');
  2852  0E54  3073               	movlw	115
  2853  0E55  160A  118A  24A9  120A  158A  	fcall	_write_char
  2854                           
  2855                           ;Button_src.c: 65:             write_char('h');
  2856  0E5A  3068               	movlw	104
  2857  0E5B  160A  118A  24A9  120A  158A  	fcall	_write_char
  2858                           
  2859                           ;Button_src.c: 66:             write_char('o');
  2860  0E60  306F               	movlw	111
  2861  0E61  160A  118A  24A9  120A  158A  	fcall	_write_char
  2862                           
  2863                           ;Button_src.c: 67:             write_char('l');
  2864  0E66  306C               	movlw	108
  2865  0E67  160A  118A  24A9  120A  158A  	fcall	_write_char
  2866                           
  2867                           ;Button_src.c: 68:             write_char('d');
  2868  0E6C  3064               	movlw	100
  2869  0E6D  160A  118A  24A9  120A  158A  	fcall	_write_char
  2870                           
  2871                           ;Button_src.c: 69:             write_char(':');
  2872  0E72  303A               	movlw	58
  2873  0E73  160A  118A  24A9  120A  158A  	fcall	_write_char
  2874                           
  2875                           ;Button_src.c: 71:             write_cmd(0x98);
  2876  0E78  3098               	movlw	152
  2877  0E79  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  2878                           
  2879                           ;Button_src.c: 72:             RC0 = 1;
  2880  0E7E  1407               	bsf	7,0	;volatile
  2881                           
  2882                           ;Button_src.c: 73:             RC1 = 0;
  2883  0E7F  1087               	bcf	7,1	;volatile
  2884                           
  2885                           ;Button_src.c: 74:             RC2 = 1;
  2886  0E80  1507               	bsf	7,2	;volatile
  2887                           
  2888                           ;Button_src.c: 75:             RC3 = 1;
  2889  0E81  1587               	bsf	7,3	;volatile
  2890                           
  2891                           ;Button_src.c: 76:             t = 0;
  2892  0E82  01B9               	clrf	_t
  2893  0E83  01BA               	clrf	_t+1
  2894                           
  2895                           ;Button_src.c: 77:             w = 0;
  2896  0E84  01B7               	clrf	_w
  2897  0E85  01B8               	clrf	_w+1
  2898                           
  2899                           ;Button_src.c: 78:             x = 0;
  2900  0E86  01B5               	clrf	_x
  2901  0E87  01B6               	clrf	_x+1
  2902                           
  2903                           ;Button_src.c: 79:             y = 0;
  2904  0E88  01B3               	clrf	_y
  2905  0E89  01B4               	clrf	_y+1
  2906                           
  2907                           ;Button_src.c: 80:             x = 0x00;
  2908  0E8A  01B5               	clrf	_x
  2909  0E8B  01B6               	clrf	_x+1
  2910  0E8C                     l3892:	
  2911                           
  2912                           ;Button_src.c: 82:                  RC0 = 1;
  2913  0E8C  1407               	bsf	7,0	;volatile
  2914                           
  2915                           ;Button_src.c: 83:                  RC1 = 0;
  2916  0E8D  1087               	bcf	7,1	;volatile
  2917                           
  2918                           ;Button_src.c: 84:                  RC2 = 1;
  2919  0E8E  1507               	bsf	7,2	;volatile
  2920                           
  2921                           ;Button_src.c: 85:                  RC3 = 1;
  2922  0E8F  1587               	bsf	7,3	;volatile
  2923                           
  2924                           ;Button_src.c: 87:                 if(RC7==0){
  2925  0E90  1B87               	btfsc	7,7	;volatile
  2926  0E91  2EEB               	goto	l3920
  2927                           
  2928                           ;Button_src.c: 88:                     write_cmd(0x98);
  2929  0E92  3098               	movlw	152
  2930  0E93  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  2931                           
  2932                           ;Button_src.c: 89:                     x++;
  2933  0E98  3001               	movlw	1
  2934  0E99  07B5               	addwf	_x,f
  2935  0E9A  1803               	skipnc
  2936  0E9B  0AB6               	incf	_x+1,f
  2937  0E9C  3000               	movlw	0
  2938  0E9D  07B6               	addwf	_x+1,f
  2939                           
  2940                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2941  0E9E  0833               	movf	_y,w
  2942  0E9F  00E4               	movwf	??_thermometer_threshhold_settings
  2943  0EA0  01E5               	clrf	??_thermometer_threshhold_settings+1
  2944  0EA1  0864               	movf	??_thermometer_threshhold_settings,w
  2945  0EA2  00B3               	movwf	_y
  2946  0EA3  0865               	movf	??_thermometer_threshhold_settings+1,w
  2947  0EA4  00B4               	movwf	_y+1
  2948                           
  2949                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2950  0EA5  0836               	movf	_x+1,w
  2951  0EA6  00F8               	movwf	modulus_func@x+1
  2952  0EA7  0835               	movf	_x,w
  2953  0EA8  00F7               	movwf	modulus_func@x
  2954  0EA9  300A               	movlw	10
  2955  0EAA  00F9               	movwf	modulus_func@y
  2956  0EAB  3000               	movlw	0
  2957  0EAC  00FA               	movwf	modulus_func@y+1
  2958  0EAD  160A  118A  2438  120A  158A  	fcall	_modulus_func
  2959  0EB2  0877               	movf	?_modulus_func,w
  2960  0EB3  00E4               	movwf	??_thermometer_threshhold_settings
  2961  0EB4  01E5               	clrf	??_thermometer_threshhold_settings+1
  2962  0EB5  0864               	movf	??_thermometer_threshhold_settings,w
  2963  0EB6  00B5               	movwf	_x
  2964  0EB7  0865               	movf	??_thermometer_threshhold_settings+1,w
  2965  0EB8  00B6               	movwf	_x+1
  2966                           
  2967                           ;Button_src.c: 92:                     write_char(y + '0');
  2968  0EB9  0833               	movf	_y,w
  2969  0EBA  3E30               	addlw	48
  2970  0EBB  160A  118A  24A9  120A  158A  	fcall	_write_char
  2971                           
  2972                           ;Button_src.c: 93:                     write_char(x + '0');
  2973  0EC0  0835               	movf	_x,w
  2974  0EC1  3E30               	addlw	48
  2975  0EC2  160A  118A  24A9  120A  158A  	fcall	_write_char
  2976                           
  2977                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2978  0EC7  0834               	movf	_y+1,w
  2979  0EC8  00E0               	movwf	incrementor@upper_val+1
  2980  0EC9  0833               	movf	_y,w
  2981  0ECA  00DF               	movwf	incrementor@upper_val
  2982  0ECB  0836               	movf	_x+1,w
  2983  0ECC  00E2               	movwf	incrementor@lower_val+1
  2984  0ECD  0835               	movf	_x,w
  2985  0ECE  00E1               	movwf	incrementor@lower_val
  2986  0ECF  3039               	movlw	57
  2987  0ED0  00E4               	movwf	??_thermometer_threshhold_settings
  2988  0ED1  0864               	movf	??_thermometer_threshhold_settings,w
  2989  0ED2  00E3               	movwf	incrementor@z
  2990  0ED3  160A  118A  2559  120A  158A  	fcall	_incrementor
  2991  0ED8  00E5               	movwf	??_thermometer_threshhold_settings+1
  2992  0ED9  01E6               	clrf	??_thermometer_threshhold_settings+2
  2993  0EDA  0865               	movf	??_thermometer_threshhold_settings+1,w
  2994  0EDB  00B3               	movwf	_y
  2995  0EDC  0866               	movf	??_thermometer_threshhold_settings+2,w
  2996  0EDD  00B4               	movwf	_y+1
  2997                           
  2998                           ;Button_src.c: 95:                     t = x;
  2999  0EDE  0836               	movf	_x+1,w
  3000  0EDF  00BA               	movwf	_t+1
  3001  0EE0  0835               	movf	_x,w
  3002  0EE1  00B9               	movwf	_t
  3003                           
  3004                           ;Button_src.c: 96:                     w = y;
  3005  0EE2  0834               	movf	_y+1,w
  3006  0EE3  00B8               	movwf	_w+1
  3007  0EE4  0833               	movf	_y,w
  3008  0EE5  00B7               	movwf	_w
  3009                           
  3010                           ;Button_src.c: 97:                     button_delay();
  3011  0EE6  160A  118A  2459  120A  158A  	fcall	_button_delay
  3012  0EEB                     l3920:	
  3013                           
  3014                           ;Button_src.c: 99:                   RC0 = 0;
  3015  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0EED  1007               	bcf	7,0	;volatile
  3018                           
  3019                           ;Button_src.c: 100:                     RC1 = 1;
  3020  0EEE  1487               	bsf	7,1	;volatile
  3021                           
  3022                           ;Button_src.c: 101:                     RC2 = 1;
  3023  0EEF  1507               	bsf	7,2	;volatile
  3024                           
  3025                           ;Button_src.c: 102:                     RC3 = 1;
  3026  0EF0  1587               	bsf	7,3	;volatile
  3027                           
  3028                           ;Button_src.c: 103:                     if(RC6 == 0){
  3029  0EF1  1B07               	btfsc	7,6	;volatile
  3030  0EF2  2F3D               	goto	l679
  3031                           
  3032                           ;Button_src.c: 104:                         var1 = y;
  3033  0EF3  0833               	movf	_y,w
  3034  0EF4  00E4               	movwf	??_thermometer_threshhold_settings
  3035  0EF5  0864               	movf	??_thermometer_threshhold_settings,w
  3036  0EF6  00CE               	movwf	_var1
  3037                           
  3038                           ;Button_src.c: 105:                         var2 = x;
  3039  0EF7  0835               	movf	_x,w
  3040  0EF8  00E4               	movwf	??_thermometer_threshhold_settings
  3041  0EF9  0864               	movf	??_thermometer_threshhold_settings,w
  3042  0EFA  00CD               	movwf	_var2
  3043                           
  3044                           ;Button_src.c: 106:                         x = 0;
  3045  0EFB  01B5               	clrf	_x
  3046  0EFC  01B6               	clrf	_x+1
  3047                           
  3048                           ;Button_src.c: 107:                         y = 0;
  3049  0EFD  01B3               	clrf	_y
  3050  0EFE  01B4               	clrf	_y+1
  3051                           
  3052                           ;Button_src.c: 108:                         w = 0;
  3053  0EFF  01B7               	clrf	_w
  3054  0F00  01B8               	clrf	_w+1
  3055                           
  3056                           ;Button_src.c: 109:                         t = 0;
  3057  0F01  01B9               	clrf	_t
  3058  0F02  01BA               	clrf	_t+1
  3059                           
  3060                           ;Button_src.c: 111:                         write_cmd(0x1);
  3061  0F03  3001               	movlw	1
  3062  0F04  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  3063                           
  3064                           ;Button_src.c: 112:                         write_char('S');
  3065  0F09  3053               	movlw	83
  3066  0F0A  160A  118A  24A9  120A  158A  	fcall	_write_char
  3067                           
  3068                           ;Button_src.c: 113:                         write_char('A');
  3069  0F0F  3041               	movlw	65
  3070  0F10  160A  118A  24A9  120A  158A  	fcall	_write_char
  3071                           
  3072                           ;Button_src.c: 114:                         write_char('V');
  3073  0F15  3056               	movlw	86
  3074  0F16  160A  118A  24A9  120A  158A  	fcall	_write_char
  3075                           
  3076                           ;Button_src.c: 115:                         write_char('E');
  3077  0F1B  3045               	movlw	69
  3078  0F1C  160A  118A  24A9  120A  158A  	fcall	_write_char
  3079                           
  3080                           ;Button_src.c: 116:                         write_char('D');
  3081  0F21  3044               	movlw	68
  3082  0F22  160A  118A  24A9  120A  158A  	fcall	_write_char
  3083                           
  3084                           ;Button_src.c: 117:                         for(int i=0;i<30000;i++);
  3085  0F27  01E7               	clrf	thermometer_threshhold_settings@i
  3086  0F28  01E8               	clrf	thermometer_threshhold_settings@i+1
  3087  0F29                     l3958:	
  3088  0F29  3001               	movlw	1
  3089  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0F2C  07E7               	addwf	thermometer_threshhold_settings@i,f
  3092  0F2D  1803               	skipnc
  3093  0F2E  0AE8               	incf	thermometer_threshhold_settings@i+1,f
  3094  0F2F  3000               	movlw	0
  3095  0F30  07E8               	addwf	thermometer_threshhold_settings@i+1,f
  3096  0F31  0868               	movf	thermometer_threshhold_settings@i+1,w
  3097  0F32  3A80               	xorlw	128
  3098  0F33  00FF               	movwf	127
  3099  0F34  30F5               	movlw	245
  3100  0F35  027F               	subwf	127,w
  3101  0F36  1D03               	skipz
  3102  0F37  2F3A               	goto	u3085
  3103  0F38  3030               	movlw	48
  3104  0F39  0267               	subwf	thermometer_threshhold_settings@i,w
  3105  0F3A                     u3085:	
  3106  0F3A  1803               	btfsc	3,0
  3107  0F3B  0008               	return
  3108  0F3C  2F29               	goto	l3958
  3109  0F3D                     l679:	
  3110                           ;Button_src.c: 119:                     }
  3111                           
  3112                           
  3113                           ;Button_src.c: 120:                  RC0 = 1;
  3114  0F3D  1407               	bsf	7,0	;volatile
  3115                           
  3116                           ;Button_src.c: 121:                  RC1 = 1;
  3117  0F3E  1487               	bsf	7,1	;volatile
  3118                           
  3119                           ;Button_src.c: 122:                  RC2 = 0;
  3120  0F3F  1107               	bcf	7,2	;volatile
  3121                           
  3122                           ;Button_src.c: 123:                  RC3 = 1;
  3123  0F40  1587               	bsf	7,3	;volatile
  3124                           
  3125                           ;Button_src.c: 125:                  if(RC7 == 0){
  3126  0F41  1B87               	btfsc	7,7	;volatile
  3127  0F42  2FAD               	goto	l3982
  3128                           
  3129                           ;Button_src.c: 126:                     write_cmd(0x98);
  3130  0F43  3098               	movlw	152
  3131  0F44  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  3132                           
  3133                           ;Button_src.c: 127:                       t--;
  3134  0F49  3001               	movlw	1
  3135  0F4A  02B9               	subwf	_t,f
  3136  0F4B  3000               	movlw	0
  3137  0F4C  1C03               	skipc
  3138  0F4D  03BA               	decf	_t+1,f
  3139  0F4E  02BA               	subwf	_t+1,f
  3140                           
  3141                           ;Button_src.c: 128:                     w = (unsigned char )w;
  3142  0F4F  0837               	movf	_w,w
  3143  0F50  00E4               	movwf	??_thermometer_threshhold_settings
  3144  0F51  01E5               	clrf	??_thermometer_threshhold_settings+1
  3145  0F52  0864               	movf	??_thermometer_threshhold_settings,w
  3146  0F53  00B7               	movwf	_w
  3147  0F54  0865               	movf	??_thermometer_threshhold_settings+1,w
  3148  0F55  00B8               	movwf	_w+1
  3149                           
  3150                           ;Button_src.c: 129:                     t = (unsigned char )(modulus_func(t,10));
  3151  0F56  083A               	movf	_t+1,w
  3152  0F57  00F8               	movwf	modulus_func@x+1
  3153  0F58  0839               	movf	_t,w
  3154  0F59  00F7               	movwf	modulus_func@x
  3155  0F5A  300A               	movlw	10
  3156  0F5B  00F9               	movwf	modulus_func@y
  3157  0F5C  3000               	movlw	0
  3158  0F5D  00FA               	movwf	modulus_func@y+1
  3159  0F5E  160A  118A  2438  120A  158A  	fcall	_modulus_func
  3160  0F63  0877               	movf	?_modulus_func,w
  3161  0F64  00E4               	movwf	??_thermometer_threshhold_settings
  3162  0F65  01E5               	clrf	??_thermometer_threshhold_settings+1
  3163  0F66  0864               	movf	??_thermometer_threshhold_settings,w
  3164  0F67  00B9               	movwf	_t
  3165  0F68  0865               	movf	??_thermometer_threshhold_settings+1,w
  3166  0F69  00BA               	movwf	_t+1
  3167                           
  3168                           ;Button_src.c: 130:                     write_char(w + '0');
  3169  0F6A  0837               	movf	_w,w
  3170  0F6B  3E30               	addlw	48
  3171  0F6C  160A  118A  24A9  120A  158A  	fcall	_write_char
  3172                           
  3173                           ;Button_src.c: 131:                     write_char(t + '0');
  3174  0F71  0839               	movf	_t,w
  3175  0F72  3E30               	addlw	48
  3176  0F73  160A  118A  24A9  120A  158A  	fcall	_write_char
  3177                           
  3178                           ;Button_src.c: 132:                     w = decrementor(w,t,'0');
  3179  0F78  0838               	movf	_w+1,w
  3180  0F79  00E0               	movwf	decrementor@lower_val+1
  3181  0F7A  0837               	movf	_w,w
  3182  0F7B  00DF               	movwf	decrementor@lower_val
  3183  0F7C  083A               	movf	_t+1,w
  3184  0F7D  00E2               	movwf	decrementor@upper_val+1
  3185  0F7E  0839               	movf	_t,w
  3186  0F7F  00E1               	movwf	decrementor@upper_val
  3187  0F80  3030               	movlw	48
  3188  0F81  00E4               	movwf	??_thermometer_threshhold_settings
  3189  0F82  0864               	movf	??_thermometer_threshhold_settings,w
  3190  0F83  00E3               	movwf	decrementor@z
  3191  0F84  160A  118A  257D  120A  158A  	fcall	_decrementor
  3192  0F89  00E5               	movwf	??_thermometer_threshhold_settings+1
  3193  0F8A  01E6               	clrf	??_thermometer_threshhold_settings+2
  3194  0F8B  0865               	movf	??_thermometer_threshhold_settings+1,w
  3195  0F8C  00B7               	movwf	_w
  3196  0F8D  0866               	movf	??_thermometer_threshhold_settings+2,w
  3197  0F8E  00B8               	movwf	_w+1
  3198                           
  3199                           ;Button_src.c: 133:                     if((t + '0')=='0'){
  3200  0F8F  0839               	movf	_t,w
  3201  0F90  3E30               	addlw	48
  3202  0F91  00E4               	movwf	??_thermometer_threshhold_settings
  3203  0F92  083A               	movf	_t+1,w
  3204  0F93  1803               	skipnc
  3205  0F94  3E01               	addlw	1
  3206  0F95  3E00               	addlw	0
  3207  0F96  00E5               	movwf	??_thermometer_threshhold_settings+1
  3208  0F97  3030               	movlw	48
  3209  0F98  0664               	xorwf	??_thermometer_threshhold_settings,w
  3210  0F99  0465               	iorwf	??_thermometer_threshhold_settings+1,w
  3211  0F9A  1D03               	btfss	3,2
  3212  0F9B  2FA0               	goto	l684
  3213                           
  3214                           ;Button_src.c: 134:                         t = 10;
  3215  0F9C  300A               	movlw	10
  3216  0F9D  00B9               	movwf	_t
  3217  0F9E  3000               	movlw	0
  3218  0F9F  00BA               	movwf	_t+1
  3219  0FA0                     l684:	
  3220                           ;Button_src.c: 135:                     }
  3221                           
  3222                           
  3223                           ;Button_src.c: 137:                     x = t;
  3224  0FA0  083A               	movf	_t+1,w
  3225  0FA1  00B6               	movwf	_x+1
  3226  0FA2  0839               	movf	_t,w
  3227  0FA3  00B5               	movwf	_x
  3228                           
  3229                           ;Button_src.c: 138:                     y = w;
  3230  0FA4  0838               	movf	_w+1,w
  3231  0FA5  00B4               	movwf	_y+1
  3232  0FA6  0837               	movf	_w,w
  3233  0FA7  00B3               	movwf	_y
  3234                           
  3235                           ;Button_src.c: 139:                     button_delay();
  3236  0FA8  160A  118A  2459  120A  158A  	fcall	_button_delay
  3237  0FAD                     l3982:	
  3238                           
  3239                           ;Button_src.c: 141:                 RC0 = 0;
  3240  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0FAF  1007               	bcf	7,0	;volatile
  3243                           
  3244                           ;Button_src.c: 142:                 RC1 = 1;
  3245  0FB0  1487               	bsf	7,1	;volatile
  3246                           
  3247                           ;Button_src.c: 143:                 RC2 = 1;
  3248  0FB1  1507               	bsf	7,2	;volatile
  3249                           
  3250                           ;Button_src.c: 144:                 RC3 = 1;
  3251  0FB2  1587               	bsf	7,3	;volatile
  3252                           
  3253                           ;Button_src.c: 145:                     if(RC6 == 0){
  3254  0FB3  1B07               	btfsc	7,6	;volatile
  3255  0FB4  2FED               	goto	l685
  3256                           
  3257                           ;Button_src.c: 146:                         var1 = w;
  3258  0FB5  0837               	movf	_w,w
  3259  0FB6  00E4               	movwf	??_thermometer_threshhold_settings
  3260  0FB7  0864               	movf	??_thermometer_threshhold_settings,w
  3261  0FB8  00CE               	movwf	_var1
  3262                           
  3263                           ;Button_src.c: 147:                         var2 = t;
  3264  0FB9  0839               	movf	_t,w
  3265  0FBA  00E4               	movwf	??_thermometer_threshhold_settings
  3266  0FBB  0864               	movf	??_thermometer_threshhold_settings,w
  3267  0FBC  00CD               	movwf	_var2
  3268                           
  3269                           ;Button_src.c: 148:                         x = 0;
  3270  0FBD  01B5               	clrf	_x
  3271  0FBE  01B6               	clrf	_x+1
  3272                           
  3273                           ;Button_src.c: 149:                         y = 0;
  3274  0FBF  01B3               	clrf	_y
  3275  0FC0  01B4               	clrf	_y+1
  3276                           
  3277                           ;Button_src.c: 150:                         w = 0;
  3278  0FC1  01B7               	clrf	_w
  3279  0FC2  01B8               	clrf	_w+1
  3280                           
  3281                           ;Button_src.c: 151:                         t = 0;
  3282  0FC3  01B9               	clrf	_t
  3283  0FC4  01BA               	clrf	_t+1
  3284                           
  3285                           ;Button_src.c: 153:                         write_cmd(0x1);
  3286  0FC5  3001               	movlw	1
  3287  0FC6  160A  118A  24C0  120A  158A  	fcall	_write_cmd
  3288                           
  3289                           ;Button_src.c: 154:                         write_char('S');
  3290  0FCB  3053               	movlw	83
  3291  0FCC  160A  118A  24A9  120A  158A  	fcall	_write_char
  3292                           
  3293                           ;Button_src.c: 155:                         write_char('A');
  3294  0FD1  3041               	movlw	65
  3295  0FD2  160A  118A  24A9  120A  158A  	fcall	_write_char
  3296                           
  3297                           ;Button_src.c: 156:                         write_char('V');
  3298  0FD7  3056               	movlw	86
  3299  0FD8  160A  118A  24A9  120A  158A  	fcall	_write_char
  3300                           
  3301                           ;Button_src.c: 157:                         write_char('E');
  3302  0FDD  3045               	movlw	69
  3303  0FDE  160A  118A  24A9  120A  158A  	fcall	_write_char
  3304                           
  3305                           ;Button_src.c: 158:                         write_char('D');
  3306  0FE3  3044               	movlw	68
  3307  0FE4  160A  118A  24A9  120A  158A  	fcall	_write_char
  3308                           
  3309                           ;Button_src.c: 159:                         button_delay();
  3310  0FE9  160A  118A  2459   	fcall	_button_delay
  3311  0FEC  0008               	return
  3312  0FED                     l685:	
  3313                           ;Button_src.c: 161:                     }
  3314                           
  3315                           
  3316                           ;Button_src.c: 162:             RC0 = 0;
  3317  0FED  1007               	bcf	7,0	;volatile
  3318                           
  3319                           ;Button_src.c: 163:             RC1 = 1;
  3320  0FEE  1487               	bsf	7,1	;volatile
  3321                           
  3322                           ;Button_src.c: 164:             RC2 = 1;
  3323  0FEF  1507               	bsf	7,2	;volatile
  3324                           
  3325                           ;Button_src.c: 165:             RC3 = 1;
  3326  0FF0  1587               	bsf	7,3	;volatile
  3327                           
  3328                           ;Button_src.c: 166:             if (RC7 == 0 ){
  3329  0FF1  1B87               	btfsc	7,7	;volatile
  3330  0FF2  2E8C               	goto	l3892
  3331                           
  3332                           ;Button_src.c: 167:                         x = 0;
  3333  0FF3  01B5               	clrf	_x
  3334  0FF4  01B6               	clrf	_x+1
  3335                           
  3336                           ;Button_src.c: 168:                         y = 0;
  3337  0FF5  01B3               	clrf	_y
  3338  0FF6  01B4               	clrf	_y+1
  3339                           
  3340                           ;Button_src.c: 169:                         w = 0;
  3341  0FF7  01B7               	clrf	_w
  3342  0FF8  01B8               	clrf	_w+1
  3343                           
  3344                           ;Button_src.c: 170:                         t = 0;
  3345  0FF9  01B9               	clrf	_t
  3346  0FFA  01BA               	clrf	_t+1
  3347                           
  3348                           ;Button_src.c: 171:             write_cmd(0x1);
  3349  0FFB  3001               	movlw	1
  3350  0FFC  160A  118A  24C0   	fcall	_write_cmd
  3351  0FFF  0008               	return
  3352  1000                     __end_of_thermometer_threshhold_settings:	
  3353                           
  3354                           	psect	text3
  3355  157D                     __ptext3:	
  3356 ;; *************** function _decrementor *****************
  3357 ;; Defined at:
  3358 ;;		line 19 in file "math_src.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  lower_val       2    0[BANK0 ] int 
  3361 ;;  upper_val       2    2[BANK0 ] int 
  3362 ;;  z               1    4[BANK0 ] unsigned char 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      unsigned char 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0, pclath, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 300/0
  3371 ;;		On exit  : 300/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3374 ;;      Params:         0       5       0       0       0
  3375 ;;      Locals:         0       0       0       0       0
  3376 ;;      Temps:          2       0       0       0       0
  3377 ;;      Totals:         2       5       0       0       0
  3378 ;;Total ram usage:        7 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    2
  3381 ;; This function calls:
  3382 ;;		_modulus_func
  3383 ;; This function is called by:
  3384 ;;		_thermometer_threshhold_settings
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           
  3389                           ;psect for function _decrementor
  3390  157D                     _decrementor:	
  3391                           
  3392                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3393                           
  3394                           ;incstack = 0
  3395                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3396  157D  0861               	movf	decrementor@upper_val,w
  3397  157E  3E30               	addlw	48
  3398  157F  00FB               	movwf	??_decrementor
  3399  1580  0862               	movf	decrementor@upper_val+1,w
  3400  1581  1803               	skipnc
  3401  1582  3E01               	addlw	1
  3402  1583  3E00               	addlw	0
  3403  1584  00FC               	movwf	??_decrementor+1
  3404  1585  0863               	movf	decrementor@z,w
  3405  1586  067B               	xorwf	??_decrementor,w
  3406  1587  047C               	iorwf	??_decrementor+1,w
  3407  1588  1D03               	skipz
  3408  1589  2D9F               	goto	l3402
  3409                           
  3410                           ;math_src.c: 21:         lower_val--;
  3411  158A  30FF               	movlw	255
  3412  158B  07DF               	addwf	decrementor@lower_val,f
  3413  158C  1803               	skipnc
  3414  158D  0AE0               	incf	decrementor@lower_val+1,f
  3415  158E  30FF               	movlw	255
  3416  158F  07E0               	addwf	decrementor@lower_val+1,f
  3417                           
  3418                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3419  1590  0860               	movf	decrementor@lower_val+1,w
  3420  1591  00F8               	movwf	modulus_func@x+1
  3421  1592  085F               	movf	decrementor@lower_val,w
  3422  1593  00F7               	movwf	modulus_func@x
  3423  1594  300A               	movlw	10
  3424  1595  00F9               	movwf	modulus_func@y
  3425  1596  3000               	movlw	0
  3426  1597  00FA               	movwf	modulus_func@y+1
  3427  1598  160A  118A  2438   	fcall	_modulus_func
  3428  159B  0878               	movf	?_modulus_func+1,w
  3429  159C  00E0               	movwf	decrementor@lower_val+1
  3430  159D  0877               	movf	?_modulus_func,w
  3431  159E  00DF               	movwf	decrementor@lower_val
  3432  159F                     l3402:	
  3433                           
  3434                           ;math_src.c: 24:      return lower_val;
  3435  159F  085F               	movf	decrementor@lower_val,w
  3436  15A0  0008               	return
  3437  15A1                     __end_of_decrementor:	
  3438                           
  3439                           	psect	text4
  3440  1781                     __ptext4:	
  3441 ;; *************** function _set_upper_threshold *****************
  3442 ;; Defined at:
  3443 ;;		line 4 in file "threshold_src.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  upper_val       2    3[COMMON] int 
  3446 ;;  lower_val       2    5[COMMON] int 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      unsigned char 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 300/0
  3455 ;;		On exit  : 300/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3458 ;;      Params:         4       0       0       0       0
  3459 ;;      Locals:         0       0       0       0       0
  3460 ;;      Temps:          1       0       0       0       0
  3461 ;;      Totals:         5       0       0       0       0
  3462 ;;Total ram usage:        5 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    2
  3465 ;; This function calls:
  3466 ;;		_write_char
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           
  3473                           ;psect for function _set_upper_threshold
  3474  1781                     _set_upper_threshold:	
  3475                           
  3476                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val && count == 2){
  3477                           
  3478                           ;incstack = 0
  3479                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3480  1781  0874               	movf	set_upper_threshold@upper_val+1,w
  3481  1782  3A80               	xorlw	128
  3482  1783  3C80               	sublw	128
  3483  1784  1D03               	skipz
  3484  1785  2F88               	goto	u3755
  3485  1786  0873               	movf	set_upper_threshold@upper_val,w
  3486  1787  025A               	subwf	_shi,w
  3487  1788                     u3755:	
  3488  1788  1C03               	skipc
  3489  1789  2FBA               	goto	l889
  3490  178A  0876               	movf	set_upper_threshold@lower_val+1,w
  3491  178B  3A80               	xorlw	128
  3492  178C  3C80               	sublw	128
  3493  178D  1D03               	skipz
  3494  178E  2F93               	goto	u3765
  3495  178F  0875               	movf	set_upper_threshold@lower_val,w
  3496  1790  1283               	bcf	3,5	;RP0=0, select bank0
  3497  1791  1303               	bcf	3,6	;RP1=0, select bank0
  3498  1792  0259               	subwf	_ge,w
  3499  1793                     u3765:	
  3500  1793  1C03               	skipc
  3501  1794  2FBA               	goto	l889
  3502  1795  3002               	movlw	2
  3503  1796  1283               	bcf	3,5	;RP0=0, select bank0
  3504  1797  1303               	bcf	3,6	;RP1=0, select bank0
  3505  1798  063B               	xorwf	_count,w
  3506  1799  043C               	iorwf	_count+1,w
  3507  179A  1D03               	btfss	3,2
  3508  179B  2FBA               	goto	l889
  3509                           
  3510                           ;threshold_src.c: 7:     heater_state = '0';
  3511  179C  3030               	movlw	48
  3512  179D  00F7               	movwf	??_set_upper_threshold
  3513  179E  0877               	movf	??_set_upper_threshold,w
  3514  179F  00D0               	movwf	_heater_state
  3515                           
  3516                           ;threshold_src.c: 8:     cooler_state = '1';
  3517  17A0  3031               	movlw	49
  3518  17A1  00F7               	movwf	??_set_upper_threshold
  3519  17A2  0877               	movf	??_set_upper_threshold,w
  3520  17A3  00CF               	movwf	_cooler_state
  3521                           
  3522                           ;threshold_src.c: 9:     write_char('W');
  3523  17A4  3057               	movlw	87
  3524  17A5  160A  118A  24A9  160A  118A  	fcall	_write_char
  3525                           
  3526                           ;threshold_src.c: 10:     write_char('A');
  3527  17AA  3041               	movlw	65
  3528  17AB  160A  118A  24A9  160A  118A  	fcall	_write_char
  3529                           
  3530                           ;threshold_src.c: 11:     write_char('R');
  3531  17B0  3052               	movlw	82
  3532  17B1  160A  118A  24A9  160A  118A  	fcall	_write_char
  3533                           
  3534                           ;threshold_src.c: 12:     write_char('M');
  3535  17B6  304D               	movlw	77
  3536  17B7  160A  118A  24A9   	fcall	_write_char
  3537  17BA                     l889:	
  3538                           ;threshold_src.c: 14:     }
  3539                           
  3540                           
  3541                           ;threshold_src.c: 15:     return buzzer_watcher;
  3542  17BA  1283               	bcf	3,5	;RP0=0, select bank0
  3543  17BB  1303               	bcf	3,6	;RP1=0, select bank0
  3544  17BC  0852               	movf	_buzzer_watcher,w
  3545  17BD  0008               	return
  3546  17BE                     __end_of_set_upper_threshold:	
  3547                           
  3548                           	psect	text5
  3549  17BE                     __ptext5:	
  3550 ;; *************** function _set_lower_threshold *****************
  3551 ;; Defined at:
  3552 ;;		line 18 in file "threshold_src.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  upper_val       2    3[COMMON] int 
  3555 ;;  lower_val       2    5[COMMON] int 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      unsigned char 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 300/0
  3564 ;;		On exit  : 300/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3567 ;;      Params:         4       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0
  3569 ;;      Temps:          1       0       0       0       0
  3570 ;;      Totals:         5       0       0       0       0
  3571 ;;Total ram usage:        5 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    2
  3574 ;; This function calls:
  3575 ;;		_write_char
  3576 ;; This function is called by:
  3577 ;;		_main
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function _set_lower_threshold
  3583  17BE                     _set_lower_threshold:	
  3584                           
  3585                           ;threshold_src.c: 19:     if((shi <= upper_val && ge < lower_val))
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3589  17BE  0874               	movf	set_lower_threshold@upper_val+1,w
  3590  17BF  3A80               	xorlw	128
  3591  17C0  00F7               	movwf	??_set_lower_threshold
  3592  17C1  3080               	movlw	128
  3593  17C2  0277               	subwf	??_set_lower_threshold,w
  3594  17C3  1D03               	skipz
  3595  17C4  2FC7               	goto	u3735
  3596  17C5  085A               	movf	_shi,w
  3597  17C6  0273               	subwf	set_lower_threshold@upper_val,w
  3598  17C7                     u3735:	
  3599  17C7  1C03               	skipc
  3600  17C8  2FFC               	goto	l893
  3601  17C9  0876               	movf	set_lower_threshold@lower_val+1,w
  3602  17CA  3A80               	xorlw	128
  3603  17CB  3C80               	sublw	128
  3604  17CC  1D03               	skipz
  3605  17CD  2FD2               	goto	u3745
  3606  17CE  0875               	movf	set_lower_threshold@lower_val,w
  3607  17CF  1283               	bcf	3,5	;RP0=0, select bank0
  3608  17D0  1303               	bcf	3,6	;RP1=0, select bank0
  3609  17D1  0259               	subwf	_ge,w
  3610  17D2                     u3745:	
  3611  17D2  1803               	skipnc
  3612  17D3  2FFC               	goto	l893
  3613                           
  3614                           ;threshold_src.c: 20:     {;threshold_src.c: 21:     count = 2;
  3615  17D4  3002               	movlw	2
  3616  17D5  1283               	bcf	3,5	;RP0=0, select bank0
  3617  17D6  1303               	bcf	3,6	;RP1=0, select bank0
  3618  17D7  00BB               	movwf	_count
  3619  17D8  3000               	movlw	0
  3620  17D9  00BC               	movwf	_count+1
  3621                           
  3622                           ;threshold_src.c: 22:     buzzer_watcher = 'x';
  3623  17DA  3078               	movlw	120
  3624  17DB  00F7               	movwf	??_set_lower_threshold
  3625  17DC  0877               	movf	??_set_lower_threshold,w
  3626  17DD  00D2               	movwf	_buzzer_watcher
  3627                           
  3628                           ;threshold_src.c: 23:     heater_state = '0';
  3629  17DE  3030               	movlw	48
  3630  17DF  00F7               	movwf	??_set_lower_threshold
  3631  17E0  0877               	movf	??_set_lower_threshold,w
  3632  17E1  00D0               	movwf	_heater_state
  3633                           
  3634                           ;threshold_src.c: 24:     cooler_state = '0';
  3635  17E2  3030               	movlw	48
  3636  17E3  00F7               	movwf	??_set_lower_threshold
  3637  17E4  0877               	movf	??_set_lower_threshold,w
  3638  17E5  00CF               	movwf	_cooler_state
  3639                           
  3640                           ;threshold_src.c: 25:     write_char('O');
  3641  17E6  304F               	movlw	79
  3642  17E7  160A  118A  24A9  160A  118A  	fcall	_write_char
  3643                           
  3644                           ;threshold_src.c: 26:     write_char('K');
  3645  17EC  304B               	movlw	75
  3646  17ED  160A  118A  24A9  160A  118A  	fcall	_write_char
  3647                           
  3648                           ;threshold_src.c: 27:     write_char(' ');
  3649  17F2  3020               	movlw	32
  3650  17F3  160A  118A  24A9  160A  118A  	fcall	_write_char
  3651                           
  3652                           ;threshold_src.c: 28:     write_char(' ');
  3653  17F8  3020               	movlw	32
  3654  17F9  160A  118A  24A9   	fcall	_write_char
  3655  17FC                     l893:	
  3656                           ;threshold_src.c: 29:     }
  3657                           
  3658                           
  3659                           ;threshold_src.c: 30:     return buzzer_watcher;
  3660  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  3661  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  3662  17FE  0852               	movf	_buzzer_watcher,w
  3663  17FF  0008               	return
  3664  1800                     __end_of_set_lower_threshold:	
  3665                           
  3666                           	psect	text6
  3667  14D7                     __ptext6:	
  3668 ;; *************** function _set_beep_threshhold *****************
  3669 ;; Defined at:
  3670 ;;		line 5 in file "buzzer_src.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  x               1    wreg     unsigned char 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  x               1    2[COMMON] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 300/0
  3681 ;;		On exit  : 300/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3684 ;;      Params:         0       0       0       0       0
  3685 ;;      Locals:         1       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0
  3687 ;;      Totals:         1       0       0       0       0
  3688 ;;Total ram usage:        1 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		_button_delay
  3693 ;; This function is called by:
  3694 ;;		_main
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function _set_beep_threshhold
  3700  14D7                     _set_beep_threshhold:	
  3701                           
  3702                           ;incstack = 0
  3703                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3704                           ;set_beep_threshhold@x stored from wreg
  3705  14D7  00F2               	movwf	set_beep_threshhold@x
  3706                           
  3707                           ;buzzer_src.c: 6:     if (x == 'w'){
  3708  14D8  3077               	movlw	119
  3709  14D9  0672               	xorwf	set_beep_threshhold@x,w
  3710  14DA  1D03               	btfss	3,2
  3711  14DB  2CF0               	goto	l4550
  3712                           
  3713                           ;buzzer_src.c: 7:         RE2 = 1;
  3714  14DC  1509               	bsf	9,2	;volatile
  3715                           
  3716                           ;buzzer_src.c: 8:         button_delay();
  3717  14DD  160A  118A  2459  160A  118A  	fcall	_button_delay
  3718                           
  3719                           ;buzzer_src.c: 9:         RE2 = 0;
  3720  14E2  1283               	bcf	3,5	;RP0=0, select bank0
  3721  14E3  1303               	bcf	3,6	;RP1=0, select bank0
  3722  14E4  1109               	bcf	9,2	;volatile
  3723                           
  3724                           ;buzzer_src.c: 10:         button_delay();
  3725  14E5  160A  118A  2459  160A  118A  	fcall	_button_delay
  3726                           
  3727                           ;buzzer_src.c: 11:         RE2 = 1;
  3728  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  3729  14EB  1303               	bcf	3,6	;RP1=0, select bank0
  3730  14EC  1509               	bsf	9,2	;volatile
  3731                           
  3732                           ;buzzer_src.c: 12:         button_delay();
  3733  14ED  160A  118A  2459   	fcall	_button_delay
  3734  14F0                     l4550:	
  3735                           
  3736                           ;buzzer_src.c: 13:         RE2 = 0;
  3737  14F0  1283               	bcf	3,5	;RP0=0, select bank0
  3738  14F1  1303               	bcf	3,6	;RP1=0, select bank0
  3739  14F2  1109               	bcf	9,2	;volatile
  3740  14F3  0008               	return
  3741  14F4                     __end_of_set_beep_threshhold:	
  3742                           
  3743                           	psect	text7
  3744  15EF                     __ptext7:	
  3745 ;; *************** function _reset_alarm *****************
  3746 ;; Defined at:
  3747 ;;		line 33 in file "threshold_src.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;		None
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      unsigned char 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 300/0
  3758 ;;		On exit  : 300/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3761 ;;      Params:         0       0       0       0       0
  3762 ;;      Locals:         0       0       0       0       0
  3763 ;;      Temps:          1       0       0       0       0
  3764 ;;      Totals:         1       0       0       0       0
  3765 ;;Total ram usage:        1 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    2
  3768 ;; This function calls:
  3769 ;;		_write_char
  3770 ;; This function is called by:
  3771 ;;		_main
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           
  3776                           ;psect for function _reset_alarm
  3777  15EF                     _reset_alarm:	
  3778                           
  3779                           ;threshold_src.c: 34:     RC0 = 1;
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3783  15EF  1407               	bsf	7,0	;volatile
  3784                           
  3785                           ;threshold_src.c: 35:     RC1 = 1;
  3786  15F0  1487               	bsf	7,1	;volatile
  3787                           
  3788                           ;threshold_src.c: 36:     RC2 = 1;
  3789  15F1  1507               	bsf	7,2	;volatile
  3790                           
  3791                           ;threshold_src.c: 37:     RC3 = 0;
  3792  15F2  1187               	bcf	7,3	;volatile
  3793                           
  3794                           ;threshold_src.c: 38:     if(RC4 == 0){
  3795  15F3  1A07               	btfsc	7,4	;volatile
  3796  15F4  2E17               	goto	l4536
  3797                           
  3798                           ;threshold_src.c: 39:         count = 0;
  3799  15F5  01BB               	clrf	_count
  3800  15F6  01BC               	clrf	_count+1
  3801                           
  3802                           ;threshold_src.c: 40:         buzzer_watcher = 'x';
  3803  15F7  3078               	movlw	120
  3804  15F8  00F3               	movwf	??_reset_alarm
  3805  15F9  0873               	movf	??_reset_alarm,w
  3806  15FA  00D2               	movwf	_buzzer_watcher
  3807                           
  3808                           ;threshold_src.c: 41:         write_char('R');
  3809  15FB  3052               	movlw	82
  3810  15FC  160A  118A  24A9  160A  118A  	fcall	_write_char
  3811                           
  3812                           ;threshold_src.c: 42:         write_char('E');
  3813  1601  3045               	movlw	69
  3814  1602  160A  118A  24A9  160A  118A  	fcall	_write_char
  3815                           
  3816                           ;threshold_src.c: 43:         write_char('S');
  3817  1607  3053               	movlw	83
  3818  1608  160A  118A  24A9  160A  118A  	fcall	_write_char
  3819                           
  3820                           ;threshold_src.c: 44:         write_char('E');
  3821  160D  3045               	movlw	69
  3822  160E  160A  118A  24A9  160A  118A  	fcall	_write_char
  3823                           
  3824                           ;threshold_src.c: 45:         write_char('T');
  3825  1613  3054               	movlw	84
  3826  1614  160A  118A  24A9   	fcall	_write_char
  3827  1617                     l4536:	
  3828                           
  3829                           ;threshold_src.c: 47:     return buzzer_watcher;
  3830  1617  0852               	movf	_buzzer_watcher,w
  3831  1618  0008               	return
  3832  1619                     __end_of_reset_alarm:	
  3833                           
  3834                           	psect	text8
  3835  0003                     __ptext8:	
  3836 ;; *************** function _lcd_init *****************
  3837 ;; Defined at:
  3838 ;;		line 14 in file "LCD_src.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  i               2    0        int 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 300/100
  3849 ;;		On exit  : 300/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3852 ;;      Params:         0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    2
  3859 ;; This function calls:
  3860 ;;		_delay_screen
  3861 ;;		_write_cmd
  3862 ;; This function is called by:
  3863 ;;		_main
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function _lcd_init
  3869  0003                     _lcd_init:	
  3870                           
  3871                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3875  0003  0185               	clrf	5	;volatile
  3876                           
  3877                           ;LCD_src.c: 18:  RA0=0;
  3878  0004  1283               	bcf	3,5	;RP0=0, select bank0
  3879  0005  1005               	bcf	5,0	;volatile
  3880                           
  3881                           ;LCD_src.c: 19:  delay_screen();
  3882  0006  160A  118A  246D  120A  118A  	fcall	_delay_screen
  3883                           
  3884                           ;LCD_src.c: 20:  RA0=1;
  3885  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3886  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3887  000D  1405               	bsf	5,0	;volatile
  3888                           
  3889                           ;LCD_src.c: 21:  RA2=1;
  3890  000E  1505               	bsf	5,2	;volatile
  3891                           
  3892                           ;LCD_src.c: 22:  write_cmd(0x30);
  3893  000F  3030               	movlw	48
  3894  0010  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  3895                           
  3896                           ;LCD_src.c: 23:  write_cmd(0x01);
  3897  0015  3001               	movlw	1
  3898  0016  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  3899                           
  3900                           ;LCD_src.c: 24:  write_cmd(0x06);
  3901  001B  3006               	movlw	6
  3902  001C  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  3903                           
  3904                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3905  0021  300C               	movlw	12
  3906  0022  160A  118A  24C0   	fcall	_write_cmd
  3907  0025  0008               	return
  3908  0026                     __end_of_lcd_init:	
  3909                           
  3910                           	psect	text9
  3911  1495                     __ptext9:	
  3912 ;; *************** function _initialise_buttons *****************
  3913 ;; Defined at:
  3914 ;;		line 11 in file "Button_src.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;		None
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;		None
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2
  3923 ;; Tracked objects:
  3924 ;;		On entry : 300/0
  3925 ;;		On exit  : 300/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3928 ;;      Params:         0       0       0       0       0
  3929 ;;      Locals:         0       0       0       0       0
  3930 ;;      Temps:          0       0       0       0       0
  3931 ;;      Totals:         0       0       0       0       0
  3932 ;;Total ram usage:        0 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; This function calls:
  3935 ;;		Nothing
  3936 ;; This function is called by:
  3937 ;;		_main
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function _initialise_buttons
  3943  1495                     _initialise_buttons:	
  3944                           
  3945                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3946                           
  3947                           ;incstack = 0
  3948                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3949  1495  3006               	movlw	6
  3950  1496  1683               	bsf	3,5	;RP0=1, select bank1
  3951  1497  009F               	movwf	31	;volatile
  3952                           
  3953                           ;Button_src.c: 13:     TRISC = 0xf0;
  3954  1498  30F0               	movlw	240
  3955  1499  0087               	movwf	7	;volatile
  3956                           
  3957                           ;Button_src.c: 14:     a = 0x00;
  3958  149A  1283               	bcf	3,5	;RP0=0, select bank0
  3959  149B  01C9               	clrf	_a
  3960                           
  3961                           ;Button_src.c: 15:     b = 0x00;
  3962  149C  01C8               	clrf	_b
  3963                           
  3964                           ;Button_src.c: 16:     c = 0x00;
  3965  149D  01C7               	clrf	_c
  3966                           
  3967                           ;Button_src.c: 17:     z = 0;
  3968  149E  01B1               	clrf	_z
  3969  149F  01B2               	clrf	_z+1
  3970                           
  3971                           ;Button_src.c: 18:     day_low = 0;
  3972  14A0  01AF               	clrf	_day_low
  3973  14A1  01B0               	clrf	_day_low+1
  3974                           
  3975                           ;Button_src.c: 19:     stats = 1;
  3976  14A2  3001               	movlw	1
  3977  14A3  00AB               	movwf	_stats
  3978  14A4  3000               	movlw	0
  3979  14A5  00AC               	movwf	_stats+1
  3980                           
  3981                           ;Button_src.c: 20:     p = 0;
  3982  14A6  01A9               	clrf	_p
  3983  14A7  01AA               	clrf	_p+1
  3984  14A8  0008               	return
  3985  14A9                     __end_of_initialise_buttons:	
  3986                           
  3987                           	psect	text10
  3988  0802                     __ptext10:	
  3989 ;; *************** function _init_temp *****************
  3990 ;; Defined at:
  3991 ;;		line 6 in file "Thermometer_src.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		status,2
  4000 ;; Tracked objects:
  4001 ;;		On entry : 200/100
  4002 ;;		On exit  : 300/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4005 ;;      Params:         0       0       0       0       0
  4006 ;;      Locals:         0       0       0       0       0
  4007 ;;      Temps:          0       0       0       0       0
  4008 ;;      Totals:         0       0       0       0       0
  4009 ;;Total ram usage:        0 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_main
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _init_temp
  4020  0802                     _init_temp:	
  4021                           
  4022                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in _init_temp: [status,2]
  4026  0802  1683               	bsf	3,5	;RP0=1, select bank1
  4027  0803  0189               	clrf	9	;volatile
  4028                           
  4029                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4030  0804  1283               	bcf	3,5	;RP0=0, select bank0
  4031  0805  0189               	clrf	9	;volatile
  4032  0806  0008               	return
  4033  0807                     __end_of_init_temp:	
  4034                           
  4035                           	psect	text11
  4036  13F4                     __ptext11:	
  4037 ;; *************** function _init *****************
  4038 ;; Defined at:
  4039 ;;		line 5 in file "LCD_src.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;		None
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;		None
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      void 
  4046 ;; Registers used:
  4047 ;;		wreg, status,2
  4048 ;; Tracked objects:
  4049 ;;		On entry : 300/0
  4050 ;;		On exit  : 300/100
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4053 ;;      Params:         0       0       0       0       0
  4054 ;;      Locals:         0       0       0       0       0
  4055 ;;      Temps:          0       0       0       0       0
  4056 ;;      Totals:         0       0       0       0       0
  4057 ;;Total ram usage:        0 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; This function calls:
  4060 ;;		Nothing
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _init
  4068  13F4                     _init:	
  4069                           
  4070                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _init: [wreg+status,2]
  4074  13F4  3007               	movlw	7
  4075  13F5  1683               	bsf	3,5	;RP0=1, select bank1
  4076  13F6  009F               	movwf	31	;volatile
  4077                           
  4078                           ;LCD_src.c: 8:  TRISA0=1;
  4079  13F7  1405               	bsf	5,0	;volatile
  4080                           
  4081                           ;LCD_src.c: 9:  TRISD=0X00;
  4082  13F8  0188               	clrf	8	;volatile
  4083                           
  4084                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4085  13F9  0181               	clrf	1	;volatile
  4086                           
  4087                           ;LCD_src.c: 11:  TRISE = 0X00;
  4088  13FA  0189               	clrf	9	;volatile
  4089  13FB  0008               	return
  4090  13FC                     __end_of_init:	
  4091                           
  4092                           	psect	text12
  4093  1619                     __ptext12:	
  4094 ;; *************** function _get_time *****************
  4095 ;; Defined at:
  4096 ;;		line 23 in file "clock_src.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;		None
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  i               2    6[COMMON] int 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      void 
  4103 ;; Registers used:
  4104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 300/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4110 ;;      Params:         0       0       0       0       0
  4111 ;;      Locals:         2       0       0       0       0
  4112 ;;      Temps:          1       0       0       0       0
  4113 ;;      Totals:         3       0       0       0       0
  4114 ;;Total ram usage:        3 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    1
  4117 ;; This function calls:
  4118 ;;		_time_read_1
  4119 ;;		_time_write_1
  4120 ;; This function is called by:
  4121 ;;		_main
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           
  4126                           ;psect for function _get_time
  4127  1619                     _get_time:	
  4128                           
  4129                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4133  1619  1283               	bcf	3,5	;RP0=0, select bank0
  4134  161A  1303               	bcf	3,6	;RP1=0, select bank0
  4135  161B  1686               	bsf	6,5	;volatile
  4136                           
  4137                           ;clock_src.c: 27:    time_write_1(0xbf);
  4138  161C  30BF               	movlw	191
  4139  161D  160A  118A  25A1  160A  118A  	fcall	_time_write_1
  4140                           
  4141                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4142  1622  01F6               	clrf	get_time@i
  4143  1623  01F7               	clrf	get_time@i+1
  4144  1624                     l3782:	
  4145                           
  4146                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4147  1624  160A  118A  2645  160A  118A  	fcall	_time_read_1
  4148  1629  00F5               	movwf	??_get_time
  4149  162A  0876               	movf	get_time@i,w
  4150  162B  3E20               	addlw	(low (_table1| 0))& (0+255)
  4151  162C  0084               	movwf	4
  4152  162D  0875               	movf	??_get_time,w
  4153  162E  1383               	bcf	3,7	;select IRP bank0
  4154  162F  0080               	movwf	0
  4155                           
  4156                           ;clock_src.c: 31:      }
  4157  1630  3001               	movlw	1
  4158  1631  07F6               	addwf	get_time@i,f
  4159  1632  1803               	skipnc
  4160  1633  0AF7               	incf	get_time@i+1,f
  4161  1634  3000               	movlw	0
  4162  1635  07F7               	addwf	get_time@i+1,f
  4163  1636  0877               	movf	get_time@i+1,w
  4164  1637  3A80               	xorlw	128
  4165  1638  00FF               	movwf	127
  4166  1639  3080               	movlw	128
  4167  163A  027F               	subwf	127,w
  4168  163B  1D03               	skipz
  4169  163C  2E3F               	goto	u3025
  4170  163D  3007               	movlw	7
  4171  163E  0276               	subwf	get_time@i,w
  4172  163F                     u3025:	
  4173  163F  1C03               	skipc
  4174  1640  2E24               	goto	l3782
  4175                           
  4176                           ;clock_src.c: 32:    RB5=0;
  4177  1641  1283               	bcf	3,5	;RP0=0, select bank0
  4178  1642  1303               	bcf	3,6	;RP1=0, select bank0
  4179  1643  1286               	bcf	6,5	;volatile
  4180  1644  0008               	return
  4181  1645                     __end_of_get_time:	
  4182                           
  4183                           	psect	text13
  4184  1645                     __ptext13:	
  4185 ;; *************** function _time_read_1 *****************
  4186 ;; Defined at:
  4187 ;;		line 130 in file "clock_src.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  j               2    2[COMMON] int 
  4192 ;;  time_rx         1    4[COMMON] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      unsigned char 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, btemp+1
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 300/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4202 ;;      Params:         0       0       0       0       0
  4203 ;;      Locals:         3       0       0       0       0
  4204 ;;      Temps:          2       0       0       0       0
  4205 ;;      Totals:         5       0       0       0       0
  4206 ;;Total ram usage:        5 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; This function calls:
  4209 ;;		Nothing
  4210 ;; This function is called by:
  4211 ;;		_get_time
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _time_read_1
  4217  1645                     _time_read_1:	
  4218                           
  4219                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4223  1645  01F4               	clrf	time_read_1@time_rx
  4224                           
  4225                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4226  1646  1683               	bsf	3,5	;RP0=1, select bank1
  4227  1647  1303               	bcf	3,6	;RP1=0, select bank1
  4228  1648  1606               	bsf	6,4	;volatile
  4229                           
  4230                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4231  1649  01F2               	clrf	time_read_1@j
  4232  164A  01F3               	clrf	time_read_1@j+1
  4233  164B                     l443:	
  4234                           
  4235                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4236  164B  1283               	bcf	3,5	;RP0=0, select bank0
  4237  164C  1303               	bcf	3,6	;RP1=0, select bank0
  4238  164D  1006               	bcf	6,0	;volatile
  4239                           
  4240                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4241  164E  0874               	movf	time_read_1@time_rx,w
  4242  164F  00F0               	movwf	??_time_read_1
  4243  1650  1003               	clrc
  4244  1651  0C70               	rrf	??_time_read_1,w
  4245  1652  00F1               	movwf	??_time_read_1+1
  4246  1653  0871               	movf	??_time_read_1+1,w
  4247  1654  00F4               	movwf	time_read_1@time_rx
  4248                           
  4249                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4250  1655  1E06               	btfss	6,4	;volatile
  4251  1656  2E5C               	goto	l3366
  4252  1657  0874               	movf	time_read_1@time_rx,w
  4253  1658  3880               	iorlw	128
  4254  1659  00F0               	movwf	??_time_read_1
  4255  165A  0870               	movf	??_time_read_1,w
  4256  165B  00F4               	movwf	time_read_1@time_rx
  4257  165C                     l3366:	
  4258                           
  4259                           ;clock_src.c: 141:        RB0=1;
  4260  165C  1406               	bsf	6,0	;volatile
  4261                           
  4262                           ;clock_src.c: 142:       }
  4263  165D  3001               	movlw	1
  4264  165E  07F2               	addwf	time_read_1@j,f
  4265  165F  1803               	skipnc
  4266  1660  0AF3               	incf	time_read_1@j+1,f
  4267  1661  3000               	movlw	0
  4268  1662  07F3               	addwf	time_read_1@j+1,f
  4269  1663  0873               	movf	time_read_1@j+1,w
  4270  1664  3A80               	xorlw	128
  4271  1665  00FF               	movwf	127
  4272  1666  3080               	movlw	128
  4273  1667  027F               	subwf	127,w
  4274  1668  1D03               	skipz
  4275  1669  2E6C               	goto	u2195
  4276  166A  3008               	movlw	8
  4277  166B  0272               	subwf	time_read_1@j,w
  4278  166C                     u2195:	
  4279  166C  1C03               	skipc
  4280  166D  2E4B               	goto	l443
  4281                           
  4282                           ;clock_src.c: 143:     TRISB4=0;
  4283  166E  1683               	bsf	3,5	;RP0=1, select bank1
  4284  166F  1303               	bcf	3,6	;RP1=0, select bank1
  4285  1670  1206               	bcf	6,4	;volatile
  4286                           
  4287                           ;clock_src.c: 144:     RB0=0;
  4288  1671  1283               	bcf	3,5	;RP0=0, select bank0
  4289  1672  1006               	bcf	6,0	;volatile
  4290                           
  4291                           ;clock_src.c: 145:     return(time_rx);
  4292  1673  0874               	movf	time_read_1@time_rx,w
  4293  1674  0008               	return
  4294  1675                     __end_of_time_read_1:	
  4295                           
  4296                           	psect	text14
  4297  09B4                     __ptext14:	
  4298 ;; *************** function _get_temp *****************
  4299 ;; Defined at:
  4300 ;;		line 89 in file "Thermometer_src.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  i               2    0        int 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      void 
  4307 ;; Registers used:
  4308 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 300/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4314 ;;      Params:         0       0       0       0       0
  4315 ;;      Locals:         0       0       0       0       0
  4316 ;;      Temps:          0       4       0       0       0
  4317 ;;      Totals:         0       4       0       0       0
  4318 ;;Total ram usage:        4 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    2
  4321 ;; This function calls:
  4322 ;;		___lbdiv
  4323 ;;		___lbmod
  4324 ;;		___lwdiv
  4325 ;;		___lwmod
  4326 ;;		_delay2
  4327 ;;		_read_byte
  4328 ;;		_reset_temp
  4329 ;;		_write_byte
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function _get_temp
  4337  09B4                     _get_temp:	
  4338                           
  4339                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4340                           
  4341                           ;incstack = 0
  4342                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4343  09B4  1683               	bsf	3,5	;RP0=1, select bank1
  4344  09B5  1409               	bsf	9,0	;volatile
  4345                           
  4346                           ;Thermometer_src.c: 93: reset_temp();
  4347  09B6  160A  118A  26DB  120A  158A  	fcall	_reset_temp
  4348                           
  4349                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4350  09BB  30CC               	movlw	204
  4351  09BC  160A  118A  270F  120A  158A  	fcall	_write_byte
  4352                           
  4353                           ;Thermometer_src.c: 95: delay2();
  4354  09C1  160A  118A  2481  120A  158A  	fcall	_delay2
  4355                           
  4356                           ;Thermometer_src.c: 96: write_byte(0X44);
  4357  09C6  3044               	movlw	68
  4358  09C7  160A  118A  270F  120A  158A  	fcall	_write_byte
  4359                           
  4360                           ;Thermometer_src.c: 98: reset_temp();
  4361  09CC  160A  118A  26DB  120A  158A  	fcall	_reset_temp
  4362                           
  4363                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4364  09D1  30CC               	movlw	204
  4365  09D2  160A  118A  270F  120A  158A  	fcall	_write_byte
  4366                           
  4367                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4368  09D7  30BE               	movlw	190
  4369  09D8  160A  118A  270F  120A  158A  	fcall	_write_byte
  4370                           
  4371                           ;Thermometer_src.c: 101: TLV=read_byte();
  4372  09DD  160A  118A  26A7  120A  158A  	fcall	_read_byte
  4373  09E2  1283               	bcf	3,5	;RP0=0, select bank0
  4374  09E3  1303               	bcf	3,6	;RP1=0, select bank0
  4375  09E4  00DF               	movwf	??_get_temp
  4376  09E5  085F               	movf	??_get_temp,w
  4377  09E6  00DE               	movwf	_TLV
  4378                           
  4379                           ;Thermometer_src.c: 102: THV=read_byte();
  4380  09E7  160A  118A  26A7  120A  158A  	fcall	_read_byte
  4381  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  4382  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  4383  09EE  00DF               	movwf	??_get_temp
  4384  09EF  085F               	movf	??_get_temp,w
  4385  09F0  00DD               	movwf	_THV
  4386                           
  4387                           ;Thermometer_src.c: 103: TRISE0 =1;
  4388  09F1  1683               	bsf	3,5	;RP0=1, select bank1
  4389  09F2  1409               	bsf	9,0	;volatile
  4390                           
  4391                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4392  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  4393  09F4  085D               	movf	_THV,w
  4394  09F5  00DF               	movwf	??_get_temp
  4395  09F6  3004               	movlw	4
  4396  09F7                     u2955:	
  4397  09F7  1003               	clrc
  4398  09F8  0DDF               	rlf	??_get_temp,f
  4399  09F9  3EFF               	addlw	-1
  4400  09FA  1D03               	skipz
  4401  09FB  29F7               	goto	u2955
  4402  09FC  303F               	movlw	63
  4403  09FD  055F               	andwf	??_get_temp,w
  4404  09FE  00E0               	movwf	??_get_temp+1
  4405  09FF  085E               	movf	_TLV,w
  4406  0A00  00E1               	movwf	??_get_temp+2
  4407  0A01  3004               	movlw	4
  4408  0A02                     u2965:	
  4409  0A02  1003               	clrc
  4410  0A03  0CE1               	rrf	??_get_temp+2,f
  4411  0A04  3EFF               	addlw	-1
  4412  0A05  1D03               	skipz
  4413  0A06  2A02               	goto	u2965
  4414  0A07  0861               	movf	??_get_temp+2,w
  4415  0A08  0460               	iorwf	??_get_temp+1,w
  4416  0A09  00E2               	movwf	??_get_temp+3
  4417  0A0A  0862               	movf	??_get_temp+3,w
  4418  0A0B  00DC               	movwf	_TZ
  4419                           
  4420                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4421  0A0C  085E               	movf	_TLV,w
  4422  0A0D  00DF               	movwf	??_get_temp
  4423  0A0E  3003               	movlw	3
  4424  0A0F                     u2975:	
  4425  0A0F  1003               	clrc
  4426  0A10  0DDF               	rlf	??_get_temp,f
  4427  0A11  3EFF               	addlw	-1
  4428  0A12  1D03               	skipz
  4429  0A13  2A0F               	goto	u2975
  4430  0A14  1003               	clrc
  4431  0A15  0D5F               	rlf	??_get_temp,w
  4432  0A16  00E0               	movwf	??_get_temp+1
  4433  0A17  0860               	movf	??_get_temp+1,w
  4434  0A18  00DB               	movwf	_TX
  4435                           
  4436                           ;Thermometer_src.c: 107: ge=TZ%10;
  4437  0A19  300A               	movlw	10
  4438  0A1A  00DF               	movwf	??_get_temp
  4439  0A1B  085F               	movf	??_get_temp,w
  4440  0A1C  00F0               	movwf	___lbmod@divisor
  4441  0A1D  085C               	movf	_TZ,w
  4442  0A1E  160A  118A  2536  120A  158A  	fcall	___lbmod
  4443  0A23  00E0               	movwf	??_get_temp+1
  4444  0A24  0860               	movf	??_get_temp+1,w
  4445  0A25  00D9               	movwf	_ge
  4446                           
  4447                           ;Thermometer_src.c: 108: shi=TZ/10;
  4448  0A26  300A               	movlw	10
  4449  0A27  00DF               	movwf	??_get_temp
  4450  0A28  085F               	movf	??_get_temp,w
  4451  0A29  00F0               	movwf	___lbdiv@divisor
  4452  0A2A  085C               	movf	_TZ,w
  4453  0A2B  160A  118A  2515  120A  158A  	fcall	___lbdiv
  4454  0A30  00E0               	movwf	??_get_temp+1
  4455  0A31  0860               	movf	??_get_temp+1,w
  4456  0A32  00DA               	movwf	_shi
  4457                           
  4458                           ;Thermometer_src.c: 109: wd=0;
  4459  0A33  01BD               	clrf	_wd
  4460  0A34  01BE               	clrf	_wd+1
  4461                           
  4462                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4463  0A35  1FDB               	btfss	_TX,7
  4464  0A36  2A3F               	goto	l3750
  4465  0A37  083D               	movf	_wd,w
  4466  0A38  3E88               	addlw	136
  4467  0A39  00BD               	movwf	_wd
  4468  0A3A  083E               	movf	_wd+1,w
  4469  0A3B  1803               	skipnc
  4470  0A3C  3E01               	addlw	1
  4471  0A3D  3E13               	addlw	19
  4472  0A3E  00BE               	movwf	_wd+1
  4473  0A3F                     l3750:	
  4474                           
  4475                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4476  0A3F  1F5B               	btfss	_TX,6
  4477  0A40  2A49               	goto	l3754
  4478  0A41  083D               	movf	_wd,w
  4479  0A42  3EC4               	addlw	196
  4480  0A43  00BD               	movwf	_wd
  4481  0A44  083E               	movf	_wd+1,w
  4482  0A45  1803               	skipnc
  4483  0A46  3E01               	addlw	1
  4484  0A47  3E09               	addlw	9
  4485  0A48  00BE               	movwf	_wd+1
  4486  0A49                     l3754:	
  4487                           
  4488                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4489  0A49  1EDB               	btfss	_TX,5
  4490  0A4A  2A53               	goto	l3758
  4491  0A4B  083D               	movf	_wd,w
  4492  0A4C  3EE2               	addlw	226
  4493  0A4D  00BD               	movwf	_wd
  4494  0A4E  083E               	movf	_wd+1,w
  4495  0A4F  1803               	skipnc
  4496  0A50  3E01               	addlw	1
  4497  0A51  3E04               	addlw	4
  4498  0A52  00BE               	movwf	_wd+1
  4499  0A53                     l3758:	
  4500                           
  4501                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4502  0A53  1E5B               	btfss	_TX,4
  4503  0A54  2A5D               	goto	l3762
  4504  0A55  083D               	movf	_wd,w
  4505  0A56  3E71               	addlw	113
  4506  0A57  00BD               	movwf	_wd
  4507  0A58  083E               	movf	_wd+1,w
  4508  0A59  1803               	skipnc
  4509  0A5A  3E01               	addlw	1
  4510  0A5B  3E02               	addlw	2
  4511  0A5C  00BE               	movwf	_wd+1
  4512  0A5D                     l3762:	
  4513                           
  4514                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4515  0A5D  30E8               	movlw	232
  4516  0A5E  00F6               	movwf	___lwdiv@divisor
  4517  0A5F  3003               	movlw	3
  4518  0A60  00F7               	movwf	___lwdiv@divisor+1
  4519  0A61  083E               	movf	_wd+1,w
  4520  0A62  00F9               	movwf	___lwdiv@dividend+1
  4521  0A63  083D               	movf	_wd,w
  4522  0A64  00F8               	movwf	___lwdiv@dividend
  4523  0A65  160A  118A  2745  120A  158A  	fcall	___lwdiv
  4524  0A6A  0876               	movf	?___lwdiv,w
  4525  0A6B  00DF               	movwf	??_get_temp
  4526  0A6C  085F               	movf	??_get_temp,w
  4527  0A6D  00D8               	movwf	_shifen
  4528                           
  4529                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4530  0A6E  3064               	movlw	100
  4531  0A6F  00F6               	movwf	___lwdiv@divisor
  4532  0A70  3000               	movlw	0
  4533  0A71  00F7               	movwf	___lwdiv@divisor+1
  4534  0A72  083E               	movf	_wd+1,w
  4535  0A73  00F3               	movwf	___lwmod@dividend+1
  4536  0A74  083D               	movf	_wd,w
  4537  0A75  00F2               	movwf	___lwmod@dividend
  4538  0A76  30E8               	movlw	232
  4539  0A77  00F0               	movwf	___lwmod@divisor
  4540  0A78  3003               	movlw	3
  4541  0A79  00F1               	movwf	___lwmod@divisor+1
  4542  0A7A  160A  118A  2675  120A  158A  	fcall	___lwmod
  4543  0A7F  0871               	movf	?___lwmod+1,w
  4544  0A80  00F9               	movwf	___lwdiv@dividend+1
  4545  0A81  0870               	movf	?___lwmod,w
  4546  0A82  00F8               	movwf	___lwdiv@dividend
  4547  0A83  160A  118A  2745  120A  158A  	fcall	___lwdiv
  4548  0A88  0876               	movf	?___lwdiv,w
  4549  0A89  00DF               	movwf	??_get_temp
  4550  0A8A  085F               	movf	??_get_temp,w
  4551  0A8B  00D7               	movwf	_baifen
  4552                           
  4553                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4554  0A8C  300A               	movlw	10
  4555  0A8D  00F6               	movwf	___lwdiv@divisor
  4556  0A8E  3000               	movlw	0
  4557  0A8F  00F7               	movwf	___lwdiv@divisor+1
  4558  0A90  083E               	movf	_wd+1,w
  4559  0A91  00F3               	movwf	___lwmod@dividend+1
  4560  0A92  083D               	movf	_wd,w
  4561  0A93  00F2               	movwf	___lwmod@dividend
  4562  0A94  3064               	movlw	100
  4563  0A95  00F0               	movwf	___lwmod@divisor
  4564  0A96  3000               	movlw	0
  4565  0A97  00F1               	movwf	___lwmod@divisor+1
  4566  0A98  160A  118A  2675  120A  158A  	fcall	___lwmod
  4567  0A9D  0871               	movf	?___lwmod+1,w
  4568  0A9E  00F9               	movwf	___lwdiv@dividend+1
  4569  0A9F  0870               	movf	?___lwmod,w
  4570  0AA0  00F8               	movwf	___lwdiv@dividend
  4571  0AA1  160A  118A  2745  120A  158A  	fcall	___lwdiv
  4572  0AA6  0876               	movf	?___lwdiv,w
  4573  0AA7  00DF               	movwf	??_get_temp
  4574  0AA8  085F               	movf	??_get_temp,w
  4575  0AA9  00D6               	movwf	_qianfen
  4576                           
  4577                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4578  0AAA  300A               	movlw	10
  4579  0AAB  00F0               	movwf	___lwmod@divisor
  4580  0AAC  3000               	movlw	0
  4581  0AAD  00F1               	movwf	___lwmod@divisor+1
  4582  0AAE  083E               	movf	_wd+1,w
  4583  0AAF  00F3               	movwf	___lwmod@dividend+1
  4584  0AB0  083D               	movf	_wd,w
  4585  0AB1  00F2               	movwf	___lwmod@dividend
  4586  0AB2  160A  118A  2675   	fcall	___lwmod
  4587  0AB5  0870               	movf	?___lwmod,w
  4588  0AB6  00DF               	movwf	??_get_temp
  4589  0AB7  085F               	movf	??_get_temp,w
  4590  0AB8  00D5               	movwf	_wanfen
  4591                           
  4592                           ;Thermometer_src.c: 118: __nop();
  4593  0AB9  0000               	nop
  4594  0ABA  0008               	return
  4595  0ABB                     __end_of_get_temp:	
  4596                           
  4597                           	psect	text15
  4598  170F                     __ptext15:	
  4599 ;; *************** function _write_byte *****************
  4600 ;; Defined at:
  4601 ;;		line 40 in file "Thermometer_src.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  val             1    wreg     unsigned char 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  val             1    7[COMMON] unsigned char 
  4606 ;;  i               1    8[COMMON] unsigned char 
  4607 ;;  temp            1    6[COMMON] unsigned char 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      void 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0, pclath, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/100
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4617 ;;      Params:         0       0       0       0       0
  4618 ;;      Locals:         3       0       0       0       0
  4619 ;;      Temps:          2       0       0       0       0
  4620 ;;      Totals:         5       0       0       0       0
  4621 ;;Total ram usage:        5 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    1
  4624 ;; This function calls:
  4625 ;;		_delay_temp
  4626 ;; This function is called by:
  4627 ;;		_get_temp
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _write_byte
  4633  170F                     _write_byte:	
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4637                           ;write_byte@val stored from wreg
  4638  170F  00F7               	movwf	write_byte@val
  4639                           
  4640                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4641  1710  3008               	movlw	8
  4642  1711  00F4               	movwf	??_write_byte
  4643  1712  0874               	movf	??_write_byte,w
  4644  1713  00F8               	movwf	write_byte@i
  4645  1714                     l3254:	
  4646                           
  4647                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4648  1714  0877               	movf	write_byte@val,w
  4649  1715  3901               	andlw	1
  4650  1716  00F4               	movwf	??_write_byte
  4651  1717  0874               	movf	??_write_byte,w
  4652  1718  00F6               	movwf	write_byte@temp
  4653                           
  4654                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4655  1719  1283               	bcf	3,5	;RP0=0, select bank0
  4656  171A  1303               	bcf	3,6	;RP1=0, select bank0
  4657  171B  1009               	bcf	9,0	;volatile
  4658  171C  1683               	bsf	3,5	;RP0=1, select bank1
  4659  171D  1009               	bcf	9,0	;volatile
  4660                           
  4661                           ;Thermometer_src.c: 48:    __nop();
  4662  171E  0000               	nop
  4663                           
  4664                           ;Thermometer_src.c: 49:    __nop();
  4665  171F  0000               	nop
  4666                           
  4667                           ;Thermometer_src.c: 50:    __nop();
  4668  1720  0000               	nop
  4669                           
  4670                           ;Thermometer_src.c: 51:    __nop();
  4671  1721  0000               	nop
  4672                           
  4673                           ;Thermometer_src.c: 52:    __nop();
  4674  1722  0000               	nop
  4675                           
  4676                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4677  1723  0376               	decf	write_byte@temp,w
  4678  1724  1D03               	btfss	3,2
  4679  1725  2F29               	goto	l3274
  4680  1726  1683               	bsf	3,5	;RP0=1, select bank1
  4681  1727  1303               	bcf	3,6	;RP1=0, select bank1
  4682  1728  1409               	bsf	9,0	;volatile
  4683  1729                     l3274:	
  4684                           
  4685                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4686  1729  3007               	movlw	7
  4687  172A  00F4               	movwf	??_write_byte
  4688  172B  0874               	movf	??_write_byte,w
  4689  172C  00F0               	movwf	delay_temp@y
  4690  172D  3002               	movlw	2
  4691  172E  160A  118A  240C  160A  118A  	fcall	_delay_temp
  4692                           
  4693                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4694  1733  1683               	bsf	3,5	;RP0=1, select bank1
  4695  1734  1303               	bcf	3,6	;RP1=0, select bank1
  4696  1735  1409               	bsf	9,0	;volatile
  4697                           
  4698                           ;Thermometer_src.c: 56:    __nop();
  4699  1736  0000               	nop
  4700                           
  4701                           ;Thermometer_src.c: 57:    __nop();
  4702  1737  0000               	nop
  4703                           
  4704                           ;Thermometer_src.c: 58:    val=val>>1;
  4705  1738  0877               	movf	write_byte@val,w
  4706  1739  00F4               	movwf	??_write_byte
  4707  173A  1003               	clrc
  4708  173B  0C74               	rrf	??_write_byte,w
  4709  173C  00F5               	movwf	??_write_byte+1
  4710  173D  0875               	movf	??_write_byte+1,w
  4711  173E  00F7               	movwf	write_byte@val
  4712                           
  4713                           ;Thermometer_src.c: 59:   }
  4714  173F  3001               	movlw	1
  4715  1740  02F8               	subwf	write_byte@i,f
  4716  1741  0878               	movf	write_byte@i,w
  4717  1742  1903               	btfsc	3,2
  4718  1743  0008               	return
  4719  1744  2F14               	goto	l3254
  4720  1745                     __end_of_write_byte:	
  4721                           
  4722                           	psect	text16
  4723  16DB                     __ptext16:	
  4724 ;; *************** function _reset_temp *****************
  4725 ;; Defined at:
  4726 ;;		line 25 in file "Thermometer_src.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;		None
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  presence        1    5[COMMON] unsigned char 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      void 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0, pclath, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/100
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4740 ;;      Params:         0       0       0       0       0
  4741 ;;      Locals:         1       0       0       0       0
  4742 ;;      Temps:          1       0       0       0       0
  4743 ;;      Totals:         2       0       0       0       0
  4744 ;;Total ram usage:        2 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    1
  4747 ;; This function calls:
  4748 ;;		_delay_temp
  4749 ;; This function is called by:
  4750 ;;		_get_temp
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           
  4755                           ;psect for function _reset_temp
  4756  16DB                     _reset_temp:	
  4757                           
  4758                           ;Thermometer_src.c: 27:   char presence=1;
  4759                           
  4760                           ;incstack = 0
  4761                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4762  16DB  01F5               	clrf	reset_temp@presence
  4763  16DC  0AF5               	incf	reset_temp@presence,f
  4764  16DD                     l3246:	
  4765                           ;Thermometer_src.c: 28:   while(presence)
  4766                           
  4767                           
  4768                           ;Thermometer_src.c: 28:   while(presence)
  4769  16DD  0875               	movf	reset_temp@presence,w
  4770  16DE  1903               	btfsc	3,2
  4771  16DF  0008               	return
  4772                           
  4773                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4774  16E0  1283               	bcf	3,5	;RP0=0, select bank0
  4775  16E1  1303               	bcf	3,6	;RP1=0, select bank0
  4776  16E2  1009               	bcf	9,0	;volatile
  4777  16E3  1683               	bsf	3,5	;RP0=1, select bank1
  4778  16E4  1009               	bcf	9,0	;volatile
  4779                           
  4780                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4781  16E5  3046               	movlw	70
  4782  16E6  00F4               	movwf	??_reset_temp
  4783  16E7  0874               	movf	??_reset_temp,w
  4784  16E8  00F0               	movwf	delay_temp@y
  4785  16E9  3002               	movlw	2
  4786  16EA  160A  118A  240C  160A  118A  	fcall	_delay_temp
  4787                           
  4788                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4789  16EF  1683               	bsf	3,5	;RP0=1, select bank1
  4790  16F0  1303               	bcf	3,6	;RP1=0, select bank1
  4791  16F1  1409               	bsf	9,0	;volatile
  4792                           
  4793                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4794  16F2  3008               	movlw	8
  4795  16F3  00F4               	movwf	??_reset_temp
  4796  16F4  0874               	movf	??_reset_temp,w
  4797  16F5  00F0               	movwf	delay_temp@y
  4798  16F6  3002               	movlw	2
  4799  16F7  160A  118A  240C  160A  118A  	fcall	_delay_temp
  4800                           
  4801                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4802  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  4803  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  4804  16FE  1C09               	btfss	9,0	;volatile
  4805  16FF  2F03               	goto	l3242
  4806  1700  01F5               	clrf	reset_temp@presence
  4807  1701  0AF5               	incf	reset_temp@presence,f
  4808  1702  2F04               	goto	l3244
  4809  1703                     l3242:	
  4810  1703  01F5               	clrf	reset_temp@presence
  4811  1704                     l3244:	
  4812                           
  4813                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4814  1704  303C               	movlw	60
  4815  1705  00F4               	movwf	??_reset_temp
  4816  1706  0874               	movf	??_reset_temp,w
  4817  1707  00F0               	movwf	delay_temp@y
  4818  1708  3002               	movlw	2
  4819  1709  160A  118A  240C  160A  118A  	fcall	_delay_temp
  4820  170E  2EDD               	goto	l3246
  4821  170F                     __end_of_reset_temp:	
  4822                           
  4823                           	psect	text17
  4824  16A7                     __ptext17:	
  4825 ;; *************** function _read_byte *****************
  4826 ;; Defined at:
  4827 ;;		line 62 in file "Thermometer_src.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  i               1    6[COMMON] unsigned char 
  4832 ;;  value           1    5[COMMON] unsigned char 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      unsigned char 
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0, pclath, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/100
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4842 ;;      Params:         0       0       0       0       0
  4843 ;;      Locals:         2       0       0       0       0
  4844 ;;      Temps:          1       0       0       0       0
  4845 ;;      Totals:         3       0       0       0       0
  4846 ;;Total ram usage:        3 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    1
  4849 ;; This function calls:
  4850 ;;		_delay_temp
  4851 ;; This function is called by:
  4852 ;;		_get_temp
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function _read_byte
  4858  16A7                     _read_byte:	
  4859                           
  4860                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4861                           
  4862                           ;incstack = 0
  4863                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4864  16A7  01F5               	clrf	read_byte@value
  4865                           
  4866                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4867  16A8  3008               	movlw	8
  4868  16A9  00F4               	movwf	??_read_byte
  4869  16AA  0874               	movf	??_read_byte,w
  4870  16AB  00F6               	movwf	read_byte@i
  4871  16AC                     l3296:	
  4872                           
  4873                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4874  16AC  1003               	clrc
  4875  16AD  0CF5               	rrf	read_byte@value,f
  4876                           
  4877                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4878  16AE  1283               	bcf	3,5	;RP0=0, select bank0
  4879  16AF  1303               	bcf	3,6	;RP1=0, select bank0
  4880  16B0  1009               	bcf	9,0	;volatile
  4881  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  4882  16B2  1009               	bcf	9,0	;volatile
  4883                           
  4884                           ;Thermometer_src.c: 71:    __nop();
  4885  16B3  0000               	nop
  4886                           
  4887                           ;Thermometer_src.c: 72:    __nop();
  4888  16B4  0000               	nop
  4889                           
  4890                           ;Thermometer_src.c: 73:    __nop();
  4891  16B5  0000               	nop
  4892                           
  4893                           ;Thermometer_src.c: 74:    __nop();
  4894  16B6  0000               	nop
  4895                           
  4896                           ;Thermometer_src.c: 75:    __nop();
  4897  16B7  0000               	nop
  4898                           
  4899                           ;Thermometer_src.c: 76:    __nop();
  4900  16B8  0000               	nop
  4901                           
  4902                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4903  16B9  1683               	bsf	3,5	;RP0=1, select bank1
  4904  16BA  1303               	bcf	3,6	;RP1=0, select bank1
  4905  16BB  1409               	bsf	9,0	;volatile
  4906                           
  4907                           ;Thermometer_src.c: 78:    __nop();
  4908  16BC  0000               	nop
  4909                           
  4910                           ;Thermometer_src.c: 79:    __nop();
  4911  16BD  0000               	nop
  4912                           
  4913                           ;Thermometer_src.c: 80:    __nop();
  4914  16BE  0000               	nop
  4915                           
  4916                           ;Thermometer_src.c: 81:    __nop();
  4917  16BF  0000               	nop
  4918                           
  4919                           ;Thermometer_src.c: 82:    __nop();
  4920  16C0  0000               	nop
  4921                           
  4922                           ;Thermometer_src.c: 83:    j=RE0;
  4923  16C1  3000               	movlw	0
  4924  16C2  1283               	bcf	3,5	;RP0=0, select bank0
  4925  16C3  1303               	bcf	3,6	;RP1=0, select bank0
  4926  16C4  1809               	btfsc	9,0	;volatile
  4927  16C5  3001               	movlw	1
  4928  16C6  00BF               	movwf	read_byte@j
  4929                           
  4930                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4931  16C7  083F               	movf	read_byte@j,w
  4932  16C8  1D03               	btfss	3,2
  4933  16C9  17F5               	bsf	read_byte@value,7
  4934                           
  4935                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4936  16CA  3007               	movlw	7
  4937  16CB  00F4               	movwf	??_read_byte
  4938  16CC  0874               	movf	??_read_byte,w
  4939  16CD  00F0               	movwf	delay_temp@y
  4940  16CE  3002               	movlw	2
  4941  16CF  160A  118A  240C  160A  118A  	fcall	_delay_temp
  4942                           
  4943                           ;Thermometer_src.c: 86:   }
  4944  16D4  3001               	movlw	1
  4945  16D5  02F6               	subwf	read_byte@i,f
  4946  16D6  0876               	movf	read_byte@i,w
  4947  16D7  1D03               	btfss	3,2
  4948  16D8  2EAC               	goto	l3296
  4949                           
  4950                           ;Thermometer_src.c: 87:   return(value);
  4951  16D9  0875               	movf	read_byte@value,w
  4952  16DA  0008               	return
  4953  16DB                     __end_of_read_byte:	
  4954                           
  4955                           	psect	text18
  4956  140C                     __ptext18:	
  4957 ;; *************** function _delay_temp *****************
  4958 ;; Defined at:
  4959 ;;		line 121 in file "Thermometer_src.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  x               1    wreg     unsigned char 
  4962 ;;  y               1    0[COMMON] unsigned char 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  x               1    2[COMMON] unsigned char 
  4965 ;;  z               1    3[COMMON] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  1    wreg      void 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/100
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4975 ;;      Params:         1       0       0       0       0
  4976 ;;      Locals:         2       0       0       0       0
  4977 ;;      Temps:          1       0       0       0       0
  4978 ;;      Totals:         4       0       0       0       0
  4979 ;;Total ram usage:        4 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_reset_temp
  4985 ;;		_write_byte
  4986 ;;		_read_byte
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           
  4991                           ;psect for function _delay_temp
  4992  140C                     _delay_temp:	
  4993                           
  4994                           ;incstack = 0
  4995                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  4996                           ;delay_temp@x stored from wreg
  4997  140C  00F2               	movwf	delay_temp@x
  4998  140D                     l334:	
  4999                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5000                           
  5001                           
  5002                           ;Thermometer_src.c: 125:  z=y;
  5003  140D  0870               	movf	delay_temp@y,w
  5004  140E  00F1               	movwf	??_delay_temp
  5005  140F  0871               	movf	??_delay_temp,w
  5006  1410  00F3               	movwf	delay_temp@z
  5007  1411                     l3172:	
  5008  1411  3001               	movlw	1
  5009  1412  02F3               	subwf	delay_temp@z,f
  5010  1413  1D03               	btfss	3,2
  5011  1414  2C11               	goto	l3172
  5012                           
  5013                           ;Thermometer_src.c: 127:  }while(--x);
  5014  1415  3001               	movlw	1
  5015  1416  02F2               	subwf	delay_temp@x,f
  5016  1417  1903               	btfsc	3,2
  5017  1418  0008               	return
  5018  1419  2C0D               	goto	l334
  5019  141A                     __end_of_delay_temp:	
  5020                           
  5021                           	psect	text19
  5022  1481                     __ptext19:	
  5023 ;; *************** function _delay2 *****************
  5024 ;; Defined at:
  5025 ;;		line 130 in file "Thermometer_src.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;		None
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  i               2    0[COMMON] int 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  1    wreg      void 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, btemp+1
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/100
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5039 ;;      Params:         0       0       0       0       0
  5040 ;;      Locals:         2       0       0       0       0
  5041 ;;      Temps:          0       0       0       0       0
  5042 ;;      Totals:         2       0       0       0       0
  5043 ;;Total ram usage:        2 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_get_temp
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _delay2
  5054  1481                     _delay2:	
  5055                           
  5056                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5060  1481  01F0               	clrf	delay2@i
  5061  1482  01F1               	clrf	delay2@i+1
  5062  1483                     l3348:	
  5063                           
  5064                           ;Thermometer_src.c: 132:  }
  5065  1483  3001               	movlw	1
  5066  1484  07F0               	addwf	delay2@i,f
  5067  1485  1803               	skipnc
  5068  1486  0AF1               	incf	delay2@i+1,f
  5069  1487  3000               	movlw	0
  5070  1488  07F1               	addwf	delay2@i+1,f
  5071  1489  0871               	movf	delay2@i+1,w
  5072  148A  3A80               	xorlw	128
  5073  148B  00FF               	movwf	127
  5074  148C  3080               	movlw	128
  5075  148D  027F               	subwf	127,w
  5076  148E  1D03               	skipz
  5077  148F  2C92               	goto	u2175
  5078  1490  3032               	movlw	50
  5079  1491  0270               	subwf	delay2@i,w
  5080  1492                     u2175:	
  5081  1492  1803               	btfsc	3,0
  5082  1493  0008               	return
  5083  1494  2C83               	goto	l3348
  5084  1495                     __end_of_delay2:	
  5085                           
  5086                           	psect	text20
  5087  1675                     __ptext20:	
  5088 ;; *************** function ___lwmod *****************
  5089 ;; Defined at:
  5090 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  divisor         2    0[COMMON] unsigned int 
  5093 ;;  dividend        2    2[COMMON] unsigned int 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  counter         1    5[COMMON] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  2    0[COMMON] unsigned int 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0
  5100 ;; Tracked objects:
  5101 ;;		On entry : 300/0
  5102 ;;		On exit  : 300/0
  5103 ;;		Unchanged: 300/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5105 ;;      Params:         4       0       0       0       0
  5106 ;;      Locals:         1       0       0       0       0
  5107 ;;      Temps:          1       0       0       0       0
  5108 ;;      Totals:         6       0       0       0       0
  5109 ;;Total ram usage:        6 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; This function calls:
  5112 ;;		Nothing
  5113 ;; This function is called by:
  5114 ;;		_get_temp
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function ___lwmod
  5120  1675                     ___lwmod:	
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5124  1675  0870               	movf	___lwmod@divisor,w
  5125  1676  0471               	iorwf	___lwmod@divisor+1,w
  5126  1677  1903               	btfsc	3,2
  5127  1678  2EA2               	goto	l3662
  5128  1679  01F5               	clrf	___lwmod@counter
  5129  167A  0AF5               	incf	___lwmod@counter,f
  5130  167B                     l3652:	
  5131  167B  1BF1               	btfsc	___lwmod@divisor+1,7
  5132  167C  2E89               	goto	l3654
  5133  167D  3001               	movlw	1
  5134  167E                     u2905:	
  5135  167E  1003               	clrc
  5136  167F  0DF0               	rlf	___lwmod@divisor,f
  5137  1680  0DF1               	rlf	___lwmod@divisor+1,f
  5138  1681  3EFF               	addlw	-1
  5139  1682  1D03               	skipz
  5140  1683  2E7E               	goto	u2905
  5141  1684  3001               	movlw	1
  5142  1685  00F4               	movwf	??___lwmod
  5143  1686  0874               	movf	??___lwmod,w
  5144  1687  07F5               	addwf	___lwmod@counter,f
  5145  1688  2E7B               	goto	l3652
  5146  1689                     l3654:	
  5147  1689  0871               	movf	___lwmod@divisor+1,w
  5148  168A  0273               	subwf	___lwmod@dividend+1,w
  5149  168B  1D03               	skipz
  5150  168C  2E8F               	goto	u2925
  5151  168D  0870               	movf	___lwmod@divisor,w
  5152  168E  0272               	subwf	___lwmod@dividend,w
  5153  168F                     u2925:	
  5154  168F  1C03               	skipc
  5155  1690  2E97               	goto	l3658
  5156  1691  0870               	movf	___lwmod@divisor,w
  5157  1692  02F2               	subwf	___lwmod@dividend,f
  5158  1693  0871               	movf	___lwmod@divisor+1,w
  5159  1694  1C03               	skipc
  5160  1695  03F3               	decf	___lwmod@dividend+1,f
  5161  1696  02F3               	subwf	___lwmod@dividend+1,f
  5162  1697                     l3658:	
  5163  1697  3001               	movlw	1
  5164  1698                     u2935:	
  5165  1698  1003               	clrc
  5166  1699  0CF1               	rrf	___lwmod@divisor+1,f
  5167  169A  0CF0               	rrf	___lwmod@divisor,f
  5168  169B  3EFF               	addlw	-1
  5169  169C  1D03               	skipz
  5170  169D  2E98               	goto	u2935
  5171  169E  3001               	movlw	1
  5172  169F  02F5               	subwf	___lwmod@counter,f
  5173  16A0  1D03               	btfss	3,2
  5174  16A1  2E89               	goto	l3654
  5175  16A2                     l3662:	
  5176  16A2  0873               	movf	___lwmod@dividend+1,w
  5177  16A3  00F1               	movwf	?___lwmod+1
  5178  16A4  0872               	movf	___lwmod@dividend,w
  5179  16A5  00F0               	movwf	?___lwmod
  5180  16A6  0008               	return
  5181  16A7                     __end_of___lwmod:	
  5182                           
  5183                           	psect	text21
  5184  1745                     __ptext21:	
  5185 ;; *************** function ___lwdiv *****************
  5186 ;; Defined at:
  5187 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  divisor         2    6[COMMON] unsigned int 
  5190 ;;  dividend        2    8[COMMON] unsigned int 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  quotient        2   11[COMMON] unsigned int 
  5193 ;;  counter         1   13[COMMON] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  2    6[COMMON] unsigned int 
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0
  5198 ;; Tracked objects:
  5199 ;;		On entry : 300/0
  5200 ;;		On exit  : 300/0
  5201 ;;		Unchanged: 300/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5203 ;;      Params:         4       0       0       0       0
  5204 ;;      Locals:         3       0       0       0       0
  5205 ;;      Temps:          1       0       0       0       0
  5206 ;;      Totals:         8       0       0       0       0
  5207 ;;Total ram usage:        8 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; This function calls:
  5210 ;;		Nothing
  5211 ;; This function is called by:
  5212 ;;		_get_temp
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function ___lwdiv
  5218  1745                     ___lwdiv:	
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5222  1745  01FB               	clrf	___lwdiv@quotient
  5223  1746  01FC               	clrf	___lwdiv@quotient+1
  5224  1747  0876               	movf	___lwdiv@divisor,w
  5225  1748  0477               	iorwf	___lwdiv@divisor+1,w
  5226  1749  1903               	btfsc	3,2
  5227  174A  2F7C               	goto	l3640
  5228  174B  01FD               	clrf	___lwdiv@counter
  5229  174C  0AFD               	incf	___lwdiv@counter,f
  5230  174D                     l3628:	
  5231  174D  1BF7               	btfsc	___lwdiv@divisor+1,7
  5232  174E  2F5B               	goto	l3630
  5233  174F  3001               	movlw	1
  5234  1750                     u2835:	
  5235  1750  1003               	clrc
  5236  1751  0DF6               	rlf	___lwdiv@divisor,f
  5237  1752  0DF7               	rlf	___lwdiv@divisor+1,f
  5238  1753  3EFF               	addlw	-1
  5239  1754  1D03               	skipz
  5240  1755  2F50               	goto	u2835
  5241  1756  3001               	movlw	1
  5242  1757  00FA               	movwf	??___lwdiv
  5243  1758  087A               	movf	??___lwdiv,w
  5244  1759  07FD               	addwf	___lwdiv@counter,f
  5245  175A  2F4D               	goto	l3628
  5246  175B                     l3630:	
  5247  175B  3001               	movlw	1
  5248  175C                     u2855:	
  5249  175C  1003               	clrc
  5250  175D  0DFB               	rlf	___lwdiv@quotient,f
  5251  175E  0DFC               	rlf	___lwdiv@quotient+1,f
  5252  175F  3EFF               	addlw	-1
  5253  1760  1D03               	skipz
  5254  1761  2F5C               	goto	u2855
  5255  1762  0877               	movf	___lwdiv@divisor+1,w
  5256  1763  0279               	subwf	___lwdiv@dividend+1,w
  5257  1764  1D03               	skipz
  5258  1765  2F68               	goto	u2865
  5259  1766  0876               	movf	___lwdiv@divisor,w
  5260  1767  0278               	subwf	___lwdiv@dividend,w
  5261  1768                     u2865:	
  5262  1768  1C03               	skipc
  5263  1769  2F71               	goto	l3636
  5264  176A  0876               	movf	___lwdiv@divisor,w
  5265  176B  02F8               	subwf	___lwdiv@dividend,f
  5266  176C  0877               	movf	___lwdiv@divisor+1,w
  5267  176D  1C03               	skipc
  5268  176E  03F9               	decf	___lwdiv@dividend+1,f
  5269  176F  02F9               	subwf	___lwdiv@dividend+1,f
  5270  1770  147B               	bsf	___lwdiv@quotient,0
  5271  1771                     l3636:	
  5272  1771  3001               	movlw	1
  5273  1772                     u2875:	
  5274  1772  1003               	clrc
  5275  1773  0CF7               	rrf	___lwdiv@divisor+1,f
  5276  1774  0CF6               	rrf	___lwdiv@divisor,f
  5277  1775  3EFF               	addlw	-1
  5278  1776  1D03               	skipz
  5279  1777  2F72               	goto	u2875
  5280  1778  3001               	movlw	1
  5281  1779  02FD               	subwf	___lwdiv@counter,f
  5282  177A  1D03               	btfss	3,2
  5283  177B  2F5B               	goto	l3630
  5284  177C                     l3640:	
  5285  177C  087C               	movf	___lwdiv@quotient+1,w
  5286  177D  00F7               	movwf	?___lwdiv+1
  5287  177E  087B               	movf	___lwdiv@quotient,w
  5288  177F  00F6               	movwf	?___lwdiv
  5289  1780  0008               	return
  5290  1781                     __end_of___lwdiv:	
  5291                           
  5292                           	psect	text22
  5293  1536                     __ptext22:	
  5294 ;; *************** function ___lbmod *****************
  5295 ;; Defined at:
  5296 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  dividend        1    wreg     unsigned char 
  5299 ;;  divisor         1    0[COMMON] unsigned char 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  dividend        1    4[COMMON] unsigned char 
  5302 ;;  rem             1    6[COMMON] unsigned char 
  5303 ;;  counter         1    5[COMMON] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      unsigned char 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0
  5308 ;; Tracked objects:
  5309 ;;		On entry : 300/0
  5310 ;;		On exit  : 300/0
  5311 ;;		Unchanged: 300/0
  5312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5313 ;;      Params:         1       0       0       0       0
  5314 ;;      Locals:         3       0       0       0       0
  5315 ;;      Temps:          3       0       0       0       0
  5316 ;;      Totals:         7       0       0       0       0
  5317 ;;Total ram usage:        7 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; This function calls:
  5320 ;;		Nothing
  5321 ;; This function is called by:
  5322 ;;		_get_temp
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           
  5327                           ;psect for function ___lbmod
  5328  1536                     ___lbmod:	
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5332                           ;___lbmod@dividend stored from wreg
  5333  1536  00F4               	movwf	___lbmod@dividend
  5334  1537  3008               	movlw	8
  5335  1538  00F1               	movwf	??___lbmod
  5336  1539  0871               	movf	??___lbmod,w
  5337  153A  00F5               	movwf	___lbmod@counter
  5338  153B  01F6               	clrf	___lbmod@rem
  5339  153C                     l3606:	
  5340  153C  0874               	movf	___lbmod@dividend,w
  5341  153D  00F1               	movwf	??___lbmod
  5342  153E  3007               	movlw	7
  5343  153F                     u2795:	
  5344  153F  1003               	clrc
  5345  1540  0CF1               	rrf	??___lbmod,f
  5346  1541  3EFF               	addlw	-1
  5347  1542  1D03               	skipz
  5348  1543  2D3F               	goto	u2795
  5349  1544  0876               	movf	___lbmod@rem,w
  5350  1545  00F2               	movwf	??___lbmod+1
  5351  1546  0772               	addwf	??___lbmod+1,w
  5352  1547  0471               	iorwf	??___lbmod,w
  5353  1548  00F3               	movwf	??___lbmod+2
  5354  1549  0873               	movf	??___lbmod+2,w
  5355  154A  00F6               	movwf	___lbmod@rem
  5356  154B  1003               	clrc
  5357  154C  0DF4               	rlf	___lbmod@dividend,f
  5358  154D  0870               	movf	___lbmod@divisor,w
  5359  154E  0276               	subwf	___lbmod@rem,w
  5360  154F  1C03               	skipc
  5361  1550  2D53               	goto	l1252
  5362  1551  0870               	movf	___lbmod@divisor,w
  5363  1552  02F6               	subwf	___lbmod@rem,f
  5364  1553                     l1252:	
  5365  1553  3001               	movlw	1
  5366  1554  02F5               	subwf	___lbmod@counter,f
  5367  1555  1D03               	btfss	3,2
  5368  1556  2D3C               	goto	l3606
  5369  1557  0876               	movf	___lbmod@rem,w
  5370  1558  0008               	return
  5371  1559                     __end_of___lbmod:	
  5372                           
  5373                           	psect	text23
  5374  1515                     __ptext23:	
  5375 ;; *************** function ___lbdiv *****************
  5376 ;; Defined at:
  5377 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  dividend        1    wreg     unsigned char 
  5380 ;;  divisor         1    0[COMMON] unsigned char 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  dividend        1    2[COMMON] unsigned char 
  5383 ;;  quotient        1    4[COMMON] unsigned char 
  5384 ;;  counter         1    3[COMMON] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      unsigned char 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0
  5389 ;; Tracked objects:
  5390 ;;		On entry : 300/0
  5391 ;;		On exit  : 300/0
  5392 ;;		Unchanged: 300/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5394 ;;      Params:         1       0       0       0       0
  5395 ;;      Locals:         3       0       0       0       0
  5396 ;;      Temps:          1       0       0       0       0
  5397 ;;      Totals:         5       0       0       0       0
  5398 ;;Total ram usage:        5 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_get_temp
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function ___lbdiv
  5409  1515                     ___lbdiv:	
  5410                           
  5411                           ;incstack = 0
  5412                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5413                           ;___lbdiv@dividend stored from wreg
  5414  1515  00F2               	movwf	___lbdiv@dividend
  5415  1516  01F4               	clrf	___lbdiv@quotient
  5416  1517  0870               	movf	___lbdiv@divisor,w
  5417  1518  1903               	btfsc	3,2
  5418  1519  2D34               	goto	l3598
  5419  151A  01F3               	clrf	___lbdiv@counter
  5420  151B  0AF3               	incf	___lbdiv@counter,f
  5421  151C                     l3586:	
  5422  151C  1BF0               	btfsc	___lbdiv@divisor,7
  5423  151D  2D25               	goto	l3588
  5424  151E  1003               	clrc
  5425  151F  0DF0               	rlf	___lbdiv@divisor,f
  5426  1520  3001               	movlw	1
  5427  1521  00F1               	movwf	??___lbdiv
  5428  1522  0871               	movf	??___lbdiv,w
  5429  1523  07F3               	addwf	___lbdiv@counter,f
  5430  1524  2D1C               	goto	l3586
  5431  1525                     l3588:	
  5432  1525  1003               	clrc
  5433  1526  0DF4               	rlf	___lbdiv@quotient,f
  5434  1527  0870               	movf	___lbdiv@divisor,w
  5435  1528  0272               	subwf	___lbdiv@dividend,w
  5436  1529  1C03               	skipc
  5437  152A  2D2F               	goto	L2
  5438  152B  0870               	movf	___lbdiv@divisor,w
  5439  152C  02F2               	subwf	___lbdiv@dividend,f
  5440  152D  1474               	bsf	___lbdiv@quotient,0
  5441  152E  1003               	clrc
  5442  152F                     L2:	
  5443  152F  0CF0               	rrf	___lbdiv@divisor,f
  5444  1530  3001               	movlw	1
  5445  1531  02F3               	subwf	___lbdiv@counter,f
  5446  1532  1D03               	btfss	3,2
  5447  1533  2D25               	goto	l3588
  5448  1534                     l3598:	
  5449  1534  0874               	movf	___lbdiv@quotient,w
  5450  1535  0008               	return
  5451  1536                     __end_of___lbdiv:	
  5452                           
  5453                           	psect	text24
  5454  1429                     __ptext24:	
  5455 ;; *************** function _ds1302_init *****************
  5456 ;; Defined at:
  5457 ;;		line 3 in file "clock_src.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 300/0
  5468 ;;		On exit  : 300/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5471 ;;      Params:         0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0
  5474 ;;      Totals:         0       0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    1
  5478 ;; This function calls:
  5479 ;;		_time_write_1
  5480 ;; This function is called by:
  5481 ;;		_main
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _ds1302_init
  5487  1429                     _ds1302_init:	
  5488                           
  5489                           ;clock_src.c: 5:    RB0=0;
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5493  1429  1006               	bcf	6,0	;volatile
  5494                           
  5495                           ;clock_src.c: 6:    RB5 =0;
  5496  142A  1286               	bcf	6,5	;volatile
  5497                           
  5498                           ;clock_src.c: 7:    RB5=1;
  5499  142B  1686               	bsf	6,5	;volatile
  5500                           
  5501                           ;clock_src.c: 8:    time_write_1(0x8e);
  5502  142C  308E               	movlw	142
  5503  142D  160A  118A  25A1  160A  118A  	fcall	_time_write_1
  5504                           
  5505                           ;clock_src.c: 9:    time_write_1(0);
  5506  1432  3000               	movlw	0
  5507  1433  160A  118A  25A1   	fcall	_time_write_1
  5508                           
  5509                           ;clock_src.c: 10:    RB5=0;
  5510  1436  1286               	bcf	6,5	;volatile
  5511  1437  0008               	return
  5512  1438                     __end_of_ds1302_init:	
  5513                           
  5514                           	psect	text25
  5515  14F4                     __ptext25:	
  5516 ;; *************** function _display_temp *****************
  5517 ;; Defined at:
  5518 ;;		line 12 in file "Thermometer_src.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;		None
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 300/0
  5529 ;;		On exit  : 300/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5532 ;;      Params:         0       0       0       0       0
  5533 ;;      Locals:         0       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0
  5535 ;;      Totals:         0       0       0       0       0
  5536 ;;Total ram usage:        0 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    2
  5539 ;; This function calls:
  5540 ;;		_write_char
  5541 ;; This function is called by:
  5542 ;;		_main
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           
  5547                           ;psect for function _display_temp
  5548  14F4                     _display_temp:	
  5549                           
  5550                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5551                           
  5552                           ;incstack = 0
  5553                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5554  14F4  085A               	movf	_shi,w
  5555  14F5  3E30               	addlw	48
  5556  14F6  160A  118A  24A9  160A  118A  	fcall	_write_char
  5557                           
  5558                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5559  14FB  0859               	movf	_ge,w
  5560  14FC  3E30               	addlw	48
  5561  14FD  160A  118A  24A9  160A  118A  	fcall	_write_char
  5562                           
  5563                           ;Thermometer_src.c: 17:  write_char('.');
  5564  1502  302E               	movlw	46
  5565  1503  160A  118A  24A9  160A  118A  	fcall	_write_char
  5566                           
  5567                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5568  1508  0858               	movf	_shifen,w
  5569  1509  3E30               	addlw	48
  5570  150A  160A  118A  24A9  160A  118A  	fcall	_write_char
  5571                           
  5572                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5573  150F  0857               	movf	_baifen,w
  5574  1510  3E30               	addlw	48
  5575  1511  160A  118A  24A9   	fcall	_write_char
  5576  1514  0008               	return
  5577  1515                     __end_of_display_temp:	
  5578                           
  5579                           	psect	text26
  5580  0807                     __ptext26:	
  5581 ;; *************** function _display_day *****************
  5582 ;; Defined at:
  5583 ;;		line 4 in file "Day_of_week_src.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  num             2    3[COMMON] int 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;		None
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 300/0
  5594 ;;		On exit  : 300/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5597 ;;      Params:         2       0       0       0       0
  5598 ;;      Locals:         0       0       0       0       0
  5599 ;;      Temps:          0       0       0       0       0
  5600 ;;      Totals:         2       0       0       0       0
  5601 ;;Total ram usage:        2 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    2
  5604 ;; This function calls:
  5605 ;;		_write_char
  5606 ;; This function is called by:
  5607 ;;		_main
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _display_day
  5613  0807                     _display_day:	
  5614                           
  5615                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5619  0807  0373               	decf	display_day@num,w
  5620  0808  0474               	iorwf	display_day@num+1,w
  5621  0809  1903               	btfsc	3,2
  5622  080A  280F               	goto	l4560
  5623  080B  0873               	movf	display_day@num,w
  5624  080C  0474               	iorwf	display_day@num+1,w
  5625  080D  1D03               	btfss	3,2
  5626  080E  281B               	goto	l4562
  5627  080F                     l4560:	
  5628                           
  5629                           ;Day_of_week_src.c: 6:     write_char('M');
  5630  080F  304D               	movlw	77
  5631  0810  160A  118A  24A9  120A  158A  	fcall	_write_char
  5632                           
  5633                           ;Day_of_week_src.c: 7:     write_char('o');
  5634  0815  306F               	movlw	111
  5635  0816  160A  118A  24A9  120A  158A  	fcall	_write_char
  5636  081B                     l4562:	
  5637                           
  5638                           ;Day_of_week_src.c: 10:     if(num == 2){
  5639  081B  3002               	movlw	2
  5640  081C  0673               	xorwf	display_day@num,w
  5641  081D  0474               	iorwf	display_day@num+1,w
  5642  081E  1D03               	btfss	3,2
  5643  081F  282C               	goto	l4566
  5644                           
  5645                           ;Day_of_week_src.c: 11:     write_char('T');
  5646  0820  3054               	movlw	84
  5647  0821  160A  118A  24A9  120A  158A  	fcall	_write_char
  5648                           
  5649                           ;Day_of_week_src.c: 12:     write_char('u');
  5650  0826  3075               	movlw	117
  5651  0827  160A  118A  24A9  120A  158A  	fcall	_write_char
  5652  082C                     l4566:	
  5653                           
  5654                           ;Day_of_week_src.c: 15:     if(num == 3){
  5655  082C  3003               	movlw	3
  5656  082D  0673               	xorwf	display_day@num,w
  5657  082E  0474               	iorwf	display_day@num+1,w
  5658  082F  1D03               	btfss	3,2
  5659  0830  283D               	goto	l4570
  5660                           
  5661                           ;Day_of_week_src.c: 16:     write_char('W');
  5662  0831  3057               	movlw	87
  5663  0832  160A  118A  24A9  120A  158A  	fcall	_write_char
  5664                           
  5665                           ;Day_of_week_src.c: 17:     write_char('e');
  5666  0837  3065               	movlw	101
  5667  0838  160A  118A  24A9  120A  158A  	fcall	_write_char
  5668  083D                     l4570:	
  5669                           
  5670                           ;Day_of_week_src.c: 20:     if(num == 4){
  5671  083D  3004               	movlw	4
  5672  083E  0673               	xorwf	display_day@num,w
  5673  083F  0474               	iorwf	display_day@num+1,w
  5674  0840  1D03               	btfss	3,2
  5675  0841  284E               	goto	l4574
  5676                           
  5677                           ;Day_of_week_src.c: 21:     write_char('T');
  5678  0842  3054               	movlw	84
  5679  0843  160A  118A  24A9  120A  158A  	fcall	_write_char
  5680                           
  5681                           ;Day_of_week_src.c: 22:     write_char('h');
  5682  0848  3068               	movlw	104
  5683  0849  160A  118A  24A9  120A  158A  	fcall	_write_char
  5684  084E                     l4574:	
  5685                           
  5686                           ;Day_of_week_src.c: 25:     if(num == 5){
  5687  084E  3005               	movlw	5
  5688  084F  0673               	xorwf	display_day@num,w
  5689  0850  0474               	iorwf	display_day@num+1,w
  5690  0851  1D03               	btfss	3,2
  5691  0852  285F               	goto	l4578
  5692                           
  5693                           ;Day_of_week_src.c: 26:     write_char('F');
  5694  0853  3046               	movlw	70
  5695  0854  160A  118A  24A9  120A  158A  	fcall	_write_char
  5696                           
  5697                           ;Day_of_week_src.c: 27:     write_char('r');
  5698  0859  3072               	movlw	114
  5699  085A  160A  118A  24A9  120A  158A  	fcall	_write_char
  5700  085F                     l4578:	
  5701                           
  5702                           ;Day_of_week_src.c: 30:     if(num == 6){
  5703  085F  3006               	movlw	6
  5704  0860  0673               	xorwf	display_day@num,w
  5705  0861  0474               	iorwf	display_day@num+1,w
  5706  0862  1D03               	btfss	3,2
  5707  0863  2870               	goto	l4582
  5708                           
  5709                           ;Day_of_week_src.c: 31:     write_char('S');
  5710  0864  3053               	movlw	83
  5711  0865  160A  118A  24A9  120A  158A  	fcall	_write_char
  5712                           
  5713                           ;Day_of_week_src.c: 32:     write_char('a');
  5714  086A  3061               	movlw	97
  5715  086B  160A  118A  24A9  120A  158A  	fcall	_write_char
  5716  0870                     l4582:	
  5717                           
  5718                           ;Day_of_week_src.c: 35:     if(num == 7){
  5719  0870  3007               	movlw	7
  5720  0871  0673               	xorwf	display_day@num,w
  5721  0872  0474               	iorwf	display_day@num+1,w
  5722  0873  1D03               	btfss	3,2
  5723  0874  0008               	return
  5724                           
  5725                           ;Day_of_week_src.c: 36:     write_char('S');
  5726  0875  3053               	movlw	83
  5727  0876  160A  118A  24A9  120A  158A  	fcall	_write_char
  5728                           
  5729                           ;Day_of_week_src.c: 37:     write_char('u');
  5730  087B  3075               	movlw	117
  5731  087C  160A  118A  24A9   	fcall	_write_char
  5732  087F  0008               	return
  5733  0880                     __end_of_display_day:	
  5734                           
  5735                           	psect	text27
  5736  0880                     __ptext27:	
  5737 ;; *************** function _display_date *****************
  5738 ;; Defined at:
  5739 ;;		line 77 in file "clock_src.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;		None
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  i               2    5[COMMON] int 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  1    wreg      void 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5748 ;; Tracked objects:
  5749 ;;		On entry : 300/0
  5750 ;;		On exit  : 300/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5753 ;;      Params:         0       0       0       0       0
  5754 ;;      Locals:         2       0       0       0       0
  5755 ;;      Temps:          2       0       0       0       0
  5756 ;;      Totals:         4       0       0       0       0
  5757 ;;Total ram usage:        4 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    2
  5760 ;; This function calls:
  5761 ;;		_write_char
  5762 ;; This function is called by:
  5763 ;;		_main
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           
  5768                           ;psect for function _display_date
  5769  0880                     _display_date:	
  5770                           
  5771                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5772                           
  5773                           ;incstack = 0
  5774                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5775  0880  1886               	btfsc	6,1	;volatile
  5776  0881  288A               	goto	l3794
  5777                           
  5778                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5779  0882  0823               	movf	_table1+3,w
  5780  0883  00F3               	movwf	??_display_date
  5781  0884  0873               	movf	??_display_date,w
  5782  0885  00A0               	movwf	_table1
  5783                           
  5784                           ;clock_src.c: 83:           table1[1]=table1[4];
  5785  0886  0824               	movf	_table1+4,w
  5786  0887  00F3               	movwf	??_display_date
  5787  0888  0873               	movf	??_display_date,w
  5788  0889  00A1               	movwf	_table1+1
  5789  088A                     l3794:	
  5790                           
  5791                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5792  088A  0823               	movf	_table1+3,w
  5793  088B  39F0               	andlw	240
  5794  088C  00F3               	movwf	??_display_date
  5795  088D  01F4               	clrf	??_display_date+1
  5796  088E  0873               	movf	??_display_date,w
  5797  088F  00F5               	movwf	display_date@i
  5798  0890  0874               	movf	??_display_date+1,w
  5799  0891  00F6               	movwf	display_date@i+1
  5800                           
  5801                           ;clock_src.c: 86:      i=i>>4;
  5802  0892  0E75               	swapf	display_date@i,w
  5803  0893  390F               	andlw	15
  5804  0894  00F5               	movwf	display_date@i
  5805  0895  0E76               	swapf	display_date@i+1,w
  5806  0896  39F0               	andlw	240
  5807  0897  04F5               	iorwf	display_date@i,f
  5808  0898  0E76               	swapf	display_date@i+1,w
  5809  0899  390F               	andlw	15
  5810  089A  00F6               	movwf	display_date@i+1
  5811  089B  30F0               	movlw	240
  5812  089C  1DF6               	btfss	display_date@i+1,3
  5813  089D  3000               	movlw	0
  5814  089E  04F6               	iorwf	display_date@i+1,f
  5815                           
  5816                           ;clock_src.c: 87:      write_char(i + '0');
  5817  089F  0875               	movf	display_date@i,w
  5818  08A0  3E30               	addlw	48
  5819  08A1  160A  118A  24A9  120A  158A  	fcall	_write_char
  5820                           
  5821                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  5822  08A6  0823               	movf	_table1+3,w
  5823  08A7  390F               	andlw	15
  5824  08A8  00F3               	movwf	??_display_date
  5825  08A9  01F4               	clrf	??_display_date+1
  5826  08AA  0873               	movf	??_display_date,w
  5827  08AB  00F5               	movwf	display_date@i
  5828  08AC  0874               	movf	??_display_date+1,w
  5829  08AD  00F6               	movwf	display_date@i+1
  5830                           
  5831                           ;clock_src.c: 90:      write_char(i + '0');
  5832  08AE  0875               	movf	display_date@i,w
  5833  08AF  3E30               	addlw	48
  5834  08B0  160A  118A  24A9  120A  158A  	fcall	_write_char
  5835                           
  5836                           ;clock_src.c: 91:      write_char('/');
  5837  08B5  302F               	movlw	47
  5838  08B6  160A  118A  24A9  120A  158A  	fcall	_write_char
  5839                           
  5840                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  5841  08BB  0824               	movf	_table1+4,w
  5842  08BC  39F0               	andlw	240
  5843  08BD  00F3               	movwf	??_display_date
  5844  08BE  01F4               	clrf	??_display_date+1
  5845  08BF  0873               	movf	??_display_date,w
  5846  08C0  00F5               	movwf	display_date@i
  5847  08C1  0874               	movf	??_display_date+1,w
  5848  08C2  00F6               	movwf	display_date@i+1
  5849                           
  5850                           ;clock_src.c: 96:      i=i>>4;
  5851  08C3  0E75               	swapf	display_date@i,w
  5852  08C4  390F               	andlw	15
  5853  08C5  00F5               	movwf	display_date@i
  5854  08C6  0E76               	swapf	display_date@i+1,w
  5855  08C7  39F0               	andlw	240
  5856  08C8  04F5               	iorwf	display_date@i,f
  5857  08C9  0E76               	swapf	display_date@i+1,w
  5858  08CA  390F               	andlw	15
  5859  08CB  00F6               	movwf	display_date@i+1
  5860  08CC  30F0               	movlw	240
  5861  08CD  1DF6               	btfss	display_date@i+1,3
  5862  08CE  3000               	movlw	0
  5863  08CF  04F6               	iorwf	display_date@i+1,f
  5864                           
  5865                           ;clock_src.c: 97:      write_char(i + '0');
  5866  08D0  0875               	movf	display_date@i,w
  5867  08D1  3E30               	addlw	48
  5868  08D2  160A  118A  24A9  120A  158A  	fcall	_write_char
  5869                           
  5870                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  5871  08D7  0824               	movf	_table1+4,w
  5872  08D8  390F               	andlw	15
  5873  08D9  00F3               	movwf	??_display_date
  5874  08DA  01F4               	clrf	??_display_date+1
  5875  08DB  0873               	movf	??_display_date,w
  5876  08DC  00F5               	movwf	display_date@i
  5877  08DD  0874               	movf	??_display_date+1,w
  5878  08DE  00F6               	movwf	display_date@i+1
  5879                           
  5880                           ;clock_src.c: 100:      write_char(i + '0');
  5881  08DF  0875               	movf	display_date@i,w
  5882  08E0  3E30               	addlw	48
  5883  08E1  160A  118A  24A9  120A  158A  	fcall	_write_char
  5884                           
  5885                           ;clock_src.c: 101:      write_char('/');
  5886  08E6  302F               	movlw	47
  5887  08E7  160A  118A  24A9  120A  158A  	fcall	_write_char
  5888                           
  5889                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  5890  08EC  0826               	movf	_table1+6,w
  5891  08ED  39F0               	andlw	240
  5892  08EE  00F3               	movwf	??_display_date
  5893  08EF  01F4               	clrf	??_display_date+1
  5894  08F0  0873               	movf	??_display_date,w
  5895  08F1  00F5               	movwf	display_date@i
  5896  08F2  0874               	movf	??_display_date+1,w
  5897  08F3  00F6               	movwf	display_date@i+1
  5898                           
  5899                           ;clock_src.c: 106:      i=i>>4;
  5900  08F4  0E75               	swapf	display_date@i,w
  5901  08F5  390F               	andlw	15
  5902  08F6  00F5               	movwf	display_date@i
  5903  08F7  0E76               	swapf	display_date@i+1,w
  5904  08F8  39F0               	andlw	240
  5905  08F9  04F5               	iorwf	display_date@i,f
  5906  08FA  0E76               	swapf	display_date@i+1,w
  5907  08FB  390F               	andlw	15
  5908  08FC  00F6               	movwf	display_date@i+1
  5909  08FD  30F0               	movlw	240
  5910  08FE  1DF6               	btfss	display_date@i+1,3
  5911  08FF  3000               	movlw	0
  5912  0900  04F6               	iorwf	display_date@i+1,f
  5913                           
  5914                           ;clock_src.c: 107:      write_char(i + '0');
  5915  0901  0875               	movf	display_date@i,w
  5916  0902  3E30               	addlw	48
  5917  0903  160A  118A  24A9  120A  158A  	fcall	_write_char
  5918                           
  5919                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  5920  0908  0826               	movf	_table1+6,w
  5921  0909  390F               	andlw	15
  5922  090A  00F3               	movwf	??_display_date
  5923  090B  01F4               	clrf	??_display_date+1
  5924  090C  0873               	movf	??_display_date,w
  5925  090D  00F5               	movwf	display_date@i
  5926  090E  0874               	movf	??_display_date+1,w
  5927  090F  00F6               	movwf	display_date@i+1
  5928                           
  5929                           ;clock_src.c: 110:      write_char(i + '0');
  5930  0910  0875               	movf	display_date@i,w
  5931  0911  3E30               	addlw	48
  5932  0912  160A  118A  24A9   	fcall	_write_char
  5933  0915  0008               	return
  5934  0916                     __end_of_display_date:	
  5935                           
  5936                           	psect	text28
  5937  0916                     __ptext28:	
  5938 ;; *************** function _display_clock *****************
  5939 ;; Defined at:
  5940 ;;		line 34 in file "clock_src.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  i               2    5[COMMON] int 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 300/0
  5951 ;;		On exit  : 300/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5954 ;;      Params:         0       0       0       0       0
  5955 ;;      Locals:         2       0       0       0       0
  5956 ;;      Temps:          2       0       0       0       0
  5957 ;;      Totals:         4       0       0       0       0
  5958 ;;Total ram usage:        4 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    2
  5961 ;; This function calls:
  5962 ;;		_write_char
  5963 ;; This function is called by:
  5964 ;;		_main
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           
  5969                           ;psect for function _display_clock
  5970  0916                     _display_clock:	
  5971                           
  5972                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  5973                           
  5974                           ;incstack = 0
  5975                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5976  0916  1886               	btfsc	6,1	;volatile
  5977  0917  2920               	goto	l3832
  5978                           
  5979                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  5980  0918  0823               	movf	_table1+3,w
  5981  0919  00F3               	movwf	??_display_clock
  5982  091A  0873               	movf	??_display_clock,w
  5983  091B  00A0               	movwf	_table1
  5984                           
  5985                           ;clock_src.c: 40:           table1[1]=table1[4];
  5986  091C  0824               	movf	_table1+4,w
  5987  091D  00F3               	movwf	??_display_clock
  5988  091E  0873               	movf	??_display_clock,w
  5989  091F  00A1               	movwf	_table1+1
  5990  0920                     l3832:	
  5991                           
  5992                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  5993  0920  0822               	movf	_table1+2,w
  5994  0921  39F0               	andlw	240
  5995  0922  00F3               	movwf	??_display_clock
  5996  0923  01F4               	clrf	??_display_clock+1
  5997  0924  0873               	movf	??_display_clock,w
  5998  0925  00F5               	movwf	display_clock@i
  5999  0926  0874               	movf	??_display_clock+1,w
  6000  0927  00F6               	movwf	display_clock@i+1
  6001                           
  6002                           ;clock_src.c: 44:      i=i>>4;
  6003  0928  0E75               	swapf	display_clock@i,w
  6004  0929  390F               	andlw	15
  6005  092A  00F5               	movwf	display_clock@i
  6006  092B  0E76               	swapf	display_clock@i+1,w
  6007  092C  39F0               	andlw	240
  6008  092D  04F5               	iorwf	display_clock@i,f
  6009  092E  0E76               	swapf	display_clock@i+1,w
  6010  092F  390F               	andlw	15
  6011  0930  00F6               	movwf	display_clock@i+1
  6012  0931  30F0               	movlw	240
  6013  0932  1DF6               	btfss	display_clock@i+1,3
  6014  0933  3000               	movlw	0
  6015  0934  04F6               	iorwf	display_clock@i+1,f
  6016                           
  6017                           ;clock_src.c: 45:      write_char(i + '0');
  6018  0935  0875               	movf	display_clock@i,w
  6019  0936  3E30               	addlw	48
  6020  0937  160A  118A  24A9  120A  158A  	fcall	_write_char
  6021                           
  6022                           ;clock_src.c: 46:      temp_high = i;
  6023  093C  0875               	movf	display_clock@i,w
  6024  093D  00F3               	movwf	??_display_clock
  6025  093E  0873               	movf	??_display_clock,w
  6026  093F  00CA               	movwf	_temp_high
  6027                           
  6028                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6029  0940  0822               	movf	_table1+2,w
  6030  0941  390F               	andlw	15
  6031  0942  00F3               	movwf	??_display_clock
  6032  0943  01F4               	clrf	??_display_clock+1
  6033  0944  0873               	movf	??_display_clock,w
  6034  0945  00F5               	movwf	display_clock@i
  6035  0946  0874               	movf	??_display_clock+1,w
  6036  0947  00F6               	movwf	display_clock@i+1
  6037                           
  6038                           ;clock_src.c: 50:      write_char(i + '0');
  6039  0948  0875               	movf	display_clock@i,w
  6040  0949  3E30               	addlw	48
  6041  094A  160A  118A  24A9  120A  158A  	fcall	_write_char
  6042                           
  6043                           ;clock_src.c: 51:      write_char(':');
  6044  094F  303A               	movlw	58
  6045  0950  160A  118A  24A9  120A  158A  	fcall	_write_char
  6046                           
  6047                           ;clock_src.c: 52:      temp_low = i;
  6048  0955  0875               	movf	display_clock@i,w
  6049  0956  00F3               	movwf	??_display_clock
  6050  0957  0873               	movf	??_display_clock,w
  6051  0958  00CB               	movwf	_temp_low
  6052                           
  6053                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6054  0959  0821               	movf	_table1+1,w
  6055  095A  39F0               	andlw	240
  6056  095B  00F3               	movwf	??_display_clock
  6057  095C  01F4               	clrf	??_display_clock+1
  6058  095D  0873               	movf	??_display_clock,w
  6059  095E  00F5               	movwf	display_clock@i
  6060  095F  0874               	movf	??_display_clock+1,w
  6061  0960  00F6               	movwf	display_clock@i+1
  6062                           
  6063                           ;clock_src.c: 56:      i=i>>4;
  6064  0961  0E75               	swapf	display_clock@i,w
  6065  0962  390F               	andlw	15
  6066  0963  00F5               	movwf	display_clock@i
  6067  0964  0E76               	swapf	display_clock@i+1,w
  6068  0965  39F0               	andlw	240
  6069  0966  04F5               	iorwf	display_clock@i,f
  6070  0967  0E76               	swapf	display_clock@i+1,w
  6071  0968  390F               	andlw	15
  6072  0969  00F6               	movwf	display_clock@i+1
  6073  096A  30F0               	movlw	240
  6074  096B  1DF6               	btfss	display_clock@i+1,3
  6075  096C  3000               	movlw	0
  6076  096D  04F6               	iorwf	display_clock@i+1,f
  6077                           
  6078                           ;clock_src.c: 57:      write_char(i + '0');
  6079  096E  0875               	movf	display_clock@i,w
  6080  096F  3E30               	addlw	48
  6081  0970  160A  118A  24A9  120A  158A  	fcall	_write_char
  6082                           
  6083                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6084  0975  0821               	movf	_table1+1,w
  6085  0976  390F               	andlw	15
  6086  0977  00F3               	movwf	??_display_clock
  6087  0978  01F4               	clrf	??_display_clock+1
  6088  0979  0873               	movf	??_display_clock,w
  6089  097A  00F5               	movwf	display_clock@i
  6090  097B  0874               	movf	??_display_clock+1,w
  6091  097C  00F6               	movwf	display_clock@i+1
  6092                           
  6093                           ;clock_src.c: 61:      write_char(i + '0');
  6094  097D  0875               	movf	display_clock@i,w
  6095  097E  3E30               	addlw	48
  6096  097F  160A  118A  24A9  120A  158A  	fcall	_write_char
  6097                           
  6098                           ;clock_src.c: 62:      write_char(':');
  6099  0984  303A               	movlw	58
  6100  0985  160A  118A  24A9  120A  158A  	fcall	_write_char
  6101                           
  6102                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6103  098A  0820               	movf	_table1,w
  6104  098B  39F0               	andlw	240
  6105  098C  00F3               	movwf	??_display_clock
  6106  098D  01F4               	clrf	??_display_clock+1
  6107  098E  0873               	movf	??_display_clock,w
  6108  098F  00F5               	movwf	display_clock@i
  6109  0990  0874               	movf	??_display_clock+1,w
  6110  0991  00F6               	movwf	display_clock@i+1
  6111                           
  6112                           ;clock_src.c: 66:      i=i>>4;
  6113  0992  0E75               	swapf	display_clock@i,w
  6114  0993  390F               	andlw	15
  6115  0994  00F5               	movwf	display_clock@i
  6116  0995  0E76               	swapf	display_clock@i+1,w
  6117  0996  39F0               	andlw	240
  6118  0997  04F5               	iorwf	display_clock@i,f
  6119  0998  0E76               	swapf	display_clock@i+1,w
  6120  0999  390F               	andlw	15
  6121  099A  00F6               	movwf	display_clock@i+1
  6122  099B  30F0               	movlw	240
  6123  099C  1DF6               	btfss	display_clock@i+1,3
  6124  099D  3000               	movlw	0
  6125  099E  04F6               	iorwf	display_clock@i+1,f
  6126                           
  6127                           ;clock_src.c: 67:      write_char(i + '0');
  6128  099F  0875               	movf	display_clock@i,w
  6129  09A0  3E30               	addlw	48
  6130  09A1  160A  118A  24A9  120A  158A  	fcall	_write_char
  6131                           
  6132                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6133  09A6  0820               	movf	_table1,w
  6134  09A7  390F               	andlw	15
  6135  09A8  00F3               	movwf	??_display_clock
  6136  09A9  01F4               	clrf	??_display_clock+1
  6137  09AA  0873               	movf	??_display_clock,w
  6138  09AB  00F5               	movwf	display_clock@i
  6139  09AC  0874               	movf	??_display_clock+1,w
  6140  09AD  00F6               	movwf	display_clock@i+1
  6141                           
  6142                           ;clock_src.c: 71:      write_char(i + '0');
  6143  09AE  0875               	movf	display_clock@i,w
  6144  09AF  3E30               	addlw	48
  6145  09B0  160A  118A  24A9   	fcall	_write_char
  6146  09B3  0008               	return
  6147  09B4                     __end_of_display_clock:	
  6148                           
  6149                           	psect	text29
  6150  0387                     __ptext29:	
  6151 ;; *************** function _date_settings *****************
  6152 ;; Defined at:
  6153 ;;		line 366 in file "Button_src.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;		None
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;		None
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  1    wreg      void 
  6160 ;; Registers used:
  6161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 300/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6167 ;;      Params:         0       0       0       0       0
  6168 ;;      Locals:         0       0       0       0       0
  6169 ;;      Temps:          0       3       0       0       0
  6170 ;;      Totals:         0       3       0       0       0
  6171 ;;Total ram usage:        3 bytes
  6172 ;; Hardware stack levels used:    1
  6173 ;; Hardware stack levels required when called:    3
  6174 ;; This function calls:
  6175 ;;		_button_delay
  6176 ;;		_incrementor
  6177 ;;		_modulus_func
  6178 ;;		_set_time
  6179 ;;		_time_date_delimiter
  6180 ;;		_time_date_hex_terminator
  6181 ;;		_write_char
  6182 ;;		_write_cmd
  6183 ;; This function is called by:
  6184 ;;		_main
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           
  6189                           ;psect for function _date_settings
  6190  0387                     _date_settings:	
  6191                           
  6192                           ;Button_src.c: 367:  RC0 = 0;
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6196  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6197  0388  1303               	bcf	3,6	;RP1=0, select bank0
  6198  0389  1007               	bcf	7,0	;volatile
  6199                           
  6200                           ;Button_src.c: 368:  RC1 = 1;
  6201  038A  1487               	bsf	7,1	;volatile
  6202                           
  6203                           ;Button_src.c: 369:  RC2 = 1;
  6204  038B  1507               	bsf	7,2	;volatile
  6205                           
  6206                           ;Button_src.c: 370:  RC3 = 1;
  6207  038C  1587               	bsf	7,3	;volatile
  6208                           
  6209                           ;Button_src.c: 371:   if (RC4 == 0){
  6210  038D  1A07               	btfsc	7,4	;volatile
  6211  038E  0008               	return
  6212                           
  6213                           ;Button_src.c: 372:       write_cmd(0x1);
  6214  038F  3001               	movlw	1
  6215  0390  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  6216  0395                     l718:	
  6217                           ;Button_src.c: 373:       for(;;){
  6218                           
  6219                           
  6220                           ;Button_src.c: 374:             write_cmd(0x80);
  6221  0395  3080               	movlw	128
  6222  0396  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  6223                           
  6224                           ;Button_src.c: 375:             write_char('D');
  6225  039B  3044               	movlw	68
  6226  039C  160A  118A  24A9  120A  118A  	fcall	_write_char
  6227                           
  6228                           ;Button_src.c: 376:             write_char('a');
  6229  03A1  3061               	movlw	97
  6230  03A2  160A  118A  24A9  120A  118A  	fcall	_write_char
  6231                           
  6232                           ;Button_src.c: 377:             write_char('t');
  6233  03A7  3074               	movlw	116
  6234  03A8  160A  118A  24A9  120A  118A  	fcall	_write_char
  6235                           
  6236                           ;Button_src.c: 378:             write_char('e');
  6237  03AD  3065               	movlw	101
  6238  03AE  160A  118A  24A9  120A  118A  	fcall	_write_char
  6239                           
  6240                           ;Button_src.c: 379:             write_char('_');
  6241  03B3  305F               	movlw	95
  6242  03B4  160A  118A  24A9  120A  118A  	fcall	_write_char
  6243                           
  6244                           ;Button_src.c: 380:             write_char('S');
  6245  03B9  3053               	movlw	83
  6246  03BA  160A  118A  24A9  120A  118A  	fcall	_write_char
  6247                           
  6248                           ;Button_src.c: 381:             write_char('e');
  6249  03BF  3065               	movlw	101
  6250  03C0  160A  118A  24A9  120A  118A  	fcall	_write_char
  6251                           
  6252                           ;Button_src.c: 382:             write_char('t');
  6253  03C5  3074               	movlw	116
  6254  03C6  160A  118A  24A9  120A  118A  	fcall	_write_char
  6255                           
  6256                           ;Button_src.c: 383:             write_char('t');
  6257  03CB  3074               	movlw	116
  6258  03CC  160A  118A  24A9  120A  118A  	fcall	_write_char
  6259                           
  6260                           ;Button_src.c: 384:             write_char('i');
  6261  03D1  3069               	movlw	105
  6262  03D2  160A  118A  24A9  120A  118A  	fcall	_write_char
  6263                           
  6264                           ;Button_src.c: 385:             write_char('n');
  6265  03D7  306E               	movlw	110
  6266  03D8  160A  118A  24A9  120A  118A  	fcall	_write_char
  6267                           
  6268                           ;Button_src.c: 386:             write_char('g');
  6269  03DD  3067               	movlw	103
  6270  03DE  160A  118A  24A9  120A  118A  	fcall	_write_char
  6271                           
  6272                           ;Button_src.c: 387:             write_char('s');
  6273  03E3  3073               	movlw	115
  6274  03E4  160A  118A  24A9  120A  118A  	fcall	_write_char
  6275                           
  6276                           ;Button_src.c: 388:             RC0 = 1;
  6277  03E9  1407               	bsf	7,0	;volatile
  6278                           
  6279                           ;Button_src.c: 389:             RC1 = 0;
  6280  03EA  1087               	bcf	7,1	;volatile
  6281                           
  6282                           ;Button_src.c: 390:             RC2 = 1;
  6283  03EB  1507               	bsf	7,2	;volatile
  6284                           
  6285                           ;Button_src.c: 391:             RC3 = 1;
  6286  03EC  1587               	bsf	7,3	;volatile
  6287                           
  6288                           ;Button_src.c: 392:             if(RC7 == 0 && b =='x'){
  6289  03ED  1B87               	btfsc	7,7	;volatile
  6290  03EE  2C5F               	goto	l4068
  6291  03EF  3078               	movlw	120
  6292  03F0  0648               	xorwf	_b,w
  6293  03F1  1D03               	btfss	3,2
  6294  03F2  2C5F               	goto	l4068
  6295                           
  6296                           ;Button_src.c: 393:                 if(stats == 1)
  6297  03F3  032B               	decf	_stats,w
  6298  03F4  042C               	iorwf	_stats+1,w
  6299  03F5  1D03               	btfss	3,2
  6300  03F6  2BFB               	goto	l720
  6301                           
  6302                           ;Button_src.c: 394:                     a++;
  6303  03F7  3001               	movlw	1
  6304  03F8  00E4               	movwf	??_date_settings
  6305  03F9  0864               	movf	??_date_settings,w
  6306  03FA  07C9               	addwf	_a,f
  6307  03FB                     l720:	
  6308                           
  6309                           ;Button_src.c: 395:                 if(stats == 0){
  6310  03FB  082B               	movf	_stats,w
  6311  03FC  042C               	iorwf	_stats+1,w
  6312  03FD  1D03               	btfss	3,2
  6313  03FE  2C03               	goto	l721
  6314                           
  6315                           ;Button_src.c: 396:                     stats = 1;
  6316  03FF  3001               	movlw	1
  6317  0400  00AB               	movwf	_stats
  6318  0401  3000               	movlw	0
  6319  0402  00AC               	movwf	_stats+1
  6320  0403                     l721:	
  6321                           ;Button_src.c: 397:                 }
  6322                           
  6323                           
  6324                           ;Button_src.c: 399:                     x++ ;
  6325  0403  3001               	movlw	1
  6326  0404  07B5               	addwf	_x,f
  6327  0405  1803               	skipnc
  6328  0406  0AB6               	incf	_x+1,f
  6329  0407  3000               	movlw	0
  6330  0408  07B6               	addwf	_x+1,f
  6331                           
  6332                           ;Button_src.c: 400:                     x = modulus_func(x,10);
  6333  0409  0836               	movf	_x+1,w
  6334  040A  00F8               	movwf	modulus_func@x+1
  6335  040B  0835               	movf	_x,w
  6336  040C  00F7               	movwf	modulus_func@x
  6337  040D  300A               	movlw	10
  6338  040E  00F9               	movwf	modulus_func@y
  6339  040F  3000               	movlw	0
  6340  0410  00FA               	movwf	modulus_func@y+1
  6341  0411  160A  118A  2438  120A  118A  	fcall	_modulus_func
  6342  0416  0878               	movf	?_modulus_func+1,w
  6343  0417  00B6               	movwf	_x+1
  6344  0418  0877               	movf	?_modulus_func,w
  6345  0419  00B5               	movwf	_x
  6346                           
  6347                           ;Button_src.c: 401:                      if (p == 1){
  6348  041A  0329               	decf	_p,w
  6349  041B  042A               	iorwf	_p+1,w
  6350  041C  1D03               	btfss	3,2
  6351  041D  2C37               	goto	l4054
  6352                           
  6353                           ;Button_src.c: 402:                         y = incrementor(y,x,'0');
  6354  041E  0834               	movf	_y+1,w
  6355  041F  00E0               	movwf	incrementor@upper_val+1
  6356  0420  0833               	movf	_y,w
  6357  0421  00DF               	movwf	incrementor@upper_val
  6358  0422  0836               	movf	_x+1,w
  6359  0423  00E2               	movwf	incrementor@lower_val+1
  6360  0424  0835               	movf	_x,w
  6361  0425  00E1               	movwf	incrementor@lower_val
  6362  0426  3030               	movlw	48
  6363  0427  00E4               	movwf	??_date_settings
  6364  0428  0864               	movf	??_date_settings,w
  6365  0429  00E3               	movwf	incrementor@z
  6366  042A  160A  118A  2559  120A  118A  	fcall	_incrementor
  6367  042F  00E5               	movwf	??_date_settings+1
  6368  0430  01E6               	clrf	??_date_settings+2
  6369  0431  0865               	movf	??_date_settings+1,w
  6370  0432  00B3               	movwf	_y
  6371  0433  0866               	movf	??_date_settings+2,w
  6372  0434  00B4               	movwf	_y+1
  6373                           
  6374                           ;Button_src.c: 403:                         p = 0;
  6375  0435  01A9               	clrf	_p
  6376  0436  01AA               	clrf	_p+1
  6377  0437                     l4054:	
  6378                           
  6379                           ;Button_src.c: 405:                     if (x == 9){
  6380  0437  3009               	movlw	9
  6381  0438  0635               	xorwf	_x,w
  6382  0439  0436               	iorwf	_x+1,w
  6383  043A  1D03               	btfss	3,2
  6384  043B  2C40               	goto	l4058
  6385                           
  6386                           ;Button_src.c: 406:                         p = 1;
  6387  043C  3001               	movlw	1
  6388  043D  00A9               	movwf	_p
  6389  043E  3000               	movlw	0
  6390  043F  00AA               	movwf	_p+1
  6391  0440                     l4058:	
  6392                           
  6393                           ;Button_src.c: 408:                     a = time_date_hex_terminator(a,'C');
  6394  0440  3043               	movlw	67
  6395  0441  00E4               	movwf	??_date_settings
  6396  0442  0864               	movf	??_date_settings,w
  6397  0443  00F0               	movwf	time_date_hex_terminator@limiter
  6398  0444  0849               	movf	_a,w
  6399  0445  160A  118A  241A  120A  118A  	fcall	_time_date_hex_terminator
  6400  044A  00E5               	movwf	??_date_settings+1
  6401  044B  0865               	movf	??_date_settings+1,w
  6402  044C  00C9               	movwf	_a
  6403                           
  6404                           ;Button_src.c: 410:                     if(y == 1 && x == 3){
  6405  044D  0333               	decf	_y,w
  6406  044E  0434               	iorwf	_y+1,w
  6407  044F  1D03               	btfss	3,2
  6408  0450  2C5A               	goto	l4066
  6409  0451  3003               	movlw	3
  6410  0452  0635               	xorwf	_x,w
  6411  0453  0436               	iorwf	_x+1,w
  6412  0454  1D03               	btfss	3,2
  6413  0455  2C5A               	goto	l4066
  6414                           
  6415                           ;Button_src.c: 411:                         x = 0;
  6416  0456  01B5               	clrf	_x
  6417  0457  01B6               	clrf	_x+1
  6418                           
  6419                           ;Button_src.c: 412:                         y = 0;
  6420  0458  01B3               	clrf	_y
  6421  0459  01B4               	clrf	_y+1
  6422  045A                     l4066:	
  6423                           
  6424                           ;Button_src.c: 414:                     button_delay();
  6425  045A  160A  118A  2459  120A  118A  	fcall	_button_delay
  6426  045F                     l4068:	
  6427                           
  6428                           ;Button_src.c: 416:             if(RC7==0 && b == 'y'){
  6429  045F  1283               	bcf	3,5	;RP0=0, select bank0
  6430  0460  1303               	bcf	3,6	;RP1=0, select bank0
  6431  0461  1B87               	btfsc	7,7	;volatile
  6432  0462  2CE5               	goto	l4102
  6433  0463  3079               	movlw	121
  6434  0464  0648               	xorwf	_b,w
  6435  0465  1D03               	btfss	3,2
  6436  0466  2CE5               	goto	l4102
  6437                           
  6438                           ;Button_src.c: 417:                  if(stats == 1)
  6439  0467  032B               	decf	_stats,w
  6440  0468  042C               	iorwf	_stats+1,w
  6441  0469  1D03               	btfss	3,2
  6442  046A  2C6F               	goto	l726
  6443                           
  6444                           ;Button_src.c: 418:                     day_hex++;
  6445  046B  3001               	movlw	1
  6446  046C  00E4               	movwf	??_date_settings
  6447  046D  0864               	movf	??_date_settings,w
  6448  046E  07C6               	addwf	_day_hex,f
  6449  046F                     l726:	
  6450                           
  6451                           ;Button_src.c: 419:                 if(stats == 0){
  6452  046F  082B               	movf	_stats,w
  6453  0470  042C               	iorwf	_stats+1,w
  6454  0471  1D03               	btfss	3,2
  6455  0472  2C77               	goto	l727
  6456                           
  6457                           ;Button_src.c: 420:                     stats = 1;
  6458  0473  3001               	movlw	1
  6459  0474  00AB               	movwf	_stats
  6460  0475  3000               	movlw	0
  6461  0476  00AC               	movwf	_stats+1
  6462  0477                     l727:	
  6463                           ;Button_src.c: 421:                 }
  6464                           
  6465                           
  6466                           ;Button_src.c: 423:                     day_low++;
  6467  0477  3001               	movlw	1
  6468  0478  07AF               	addwf	_day_low,f
  6469  0479  1803               	skipnc
  6470  047A  0AB0               	incf	_day_low+1,f
  6471  047B  3000               	movlw	0
  6472  047C  07B0               	addwf	_day_low+1,f
  6473                           
  6474                           ;Button_src.c: 424:                     day_low = modulus_func(day_low,10);
  6475  047D  0830               	movf	_day_low+1,w
  6476  047E  00F8               	movwf	modulus_func@x+1
  6477  047F  082F               	movf	_day_low,w
  6478  0480  00F7               	movwf	modulus_func@x
  6479  0481  300A               	movlw	10
  6480  0482  00F9               	movwf	modulus_func@y
  6481  0483  3000               	movlw	0
  6482  0484  00FA               	movwf	modulus_func@y+1
  6483  0485  160A  118A  2438  120A  118A  	fcall	_modulus_func
  6484  048A  0878               	movf	?_modulus_func+1,w
  6485  048B  00B0               	movwf	_day_low+1
  6486  048C  0877               	movf	?_modulus_func,w
  6487  048D  00AF               	movwf	_day_low
  6488                           
  6489                           ;Button_src.c: 425:                     day_counter = modulus_func(day_low,8);
  6490  048E  0830               	movf	_day_low+1,w
  6491  048F  00F8               	movwf	modulus_func@x+1
  6492  0490  082F               	movf	_day_low,w
  6493  0491  00F7               	movwf	modulus_func@x
  6494  0492  3008               	movlw	8
  6495  0493  00F9               	movwf	modulus_func@y
  6496  0494  3000               	movlw	0
  6497  0495  00FA               	movwf	modulus_func@y+1
  6498  0496  160A  118A  2438  120A  118A  	fcall	_modulus_func
  6499  049B  0878               	movf	?_modulus_func+1,w
  6500  049C  00A8               	movwf	_day_counter+1
  6501  049D  0877               	movf	?_modulus_func,w
  6502  049E  00A7               	movwf	_day_counter
  6503                           
  6504                           ;Button_src.c: 426:                     if (p == 1){
  6505  049F  0329               	decf	_p,w
  6506  04A0  042A               	iorwf	_p+1,w
  6507  04A1  1D03               	btfss	3,2
  6508  04A2  2CBC               	goto	l4088
  6509                           
  6510                           ;Button_src.c: 427:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6511  04A3  082E               	movf	_day_high+1,w
  6512  04A4  00E0               	movwf	incrementor@upper_val+1
  6513  04A5  082D               	movf	_day_high,w
  6514  04A6  00DF               	movwf	incrementor@upper_val
  6515  04A7  0830               	movf	_day_low+1,w
  6516  04A8  00E2               	movwf	incrementor@lower_val+1
  6517  04A9  082F               	movf	_day_low,w
  6518  04AA  00E1               	movwf	incrementor@lower_val
  6519  04AB  3030               	movlw	48
  6520  04AC  00E4               	movwf	??_date_settings
  6521  04AD  0864               	movf	??_date_settings,w
  6522  04AE  00E3               	movwf	incrementor@z
  6523  04AF  160A  118A  2559  120A  118A  	fcall	_incrementor
  6524  04B4  00E5               	movwf	??_date_settings+1
  6525  04B5  01E6               	clrf	??_date_settings+2
  6526  04B6  0865               	movf	??_date_settings+1,w
  6527  04B7  00AD               	movwf	_day_high
  6528  04B8  0866               	movf	??_date_settings+2,w
  6529  04B9  00AE               	movwf	_day_high+1
  6530                           
  6531                           ;Button_src.c: 428:                         p = 0;
  6532  04BA  01A9               	clrf	_p
  6533  04BB  01AA               	clrf	_p+1
  6534  04BC                     l4088:	
  6535                           
  6536                           ;Button_src.c: 430:                     if (day_low == 9){
  6537  04BC  3009               	movlw	9
  6538  04BD  062F               	xorwf	_day_low,w
  6539  04BE  0430               	iorwf	_day_low+1,w
  6540  04BF  1D03               	btfss	3,2
  6541  04C0  2CC5               	goto	l4092
  6542                           
  6543                           ;Button_src.c: 431:                         p = 1;
  6544  04C1  3001               	movlw	1
  6545  04C2  00A9               	movwf	_p
  6546  04C3  3000               	movlw	0
  6547  04C4  00AA               	movwf	_p+1
  6548  04C5                     l4092:	
  6549                           
  6550                           ;Button_src.c: 433:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6551  04C5  3063               	movlw	99
  6552  04C6  00E4               	movwf	??_date_settings
  6553  04C7  0864               	movf	??_date_settings,w
  6554  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6555  04C9  0846               	movf	_day_hex,w
  6556  04CA  160A  118A  241A  120A  118A  	fcall	_time_date_hex_terminator
  6557  04CF  00E5               	movwf	??_date_settings+1
  6558  04D0  0865               	movf	??_date_settings+1,w
  6559  04D1  00C6               	movwf	_day_hex
  6560                           
  6561                           ;Button_src.c: 434:                     if(day_high == 3 && day_low==2 ){
  6562  04D2  3003               	movlw	3
  6563  04D3  062D               	xorwf	_day_high,w
  6564  04D4  042E               	iorwf	_day_high+1,w
  6565  04D5  1D03               	btfss	3,2
  6566  04D6  2CE0               	goto	l4100
  6567  04D7  3002               	movlw	2
  6568  04D8  062F               	xorwf	_day_low,w
  6569  04D9  0430               	iorwf	_day_low+1,w
  6570  04DA  1D03               	btfss	3,2
  6571  04DB  2CE0               	goto	l4100
  6572                           
  6573                           ;Button_src.c: 435:                         day_high = 0;
  6574  04DC  01AD               	clrf	_day_high
  6575  04DD  01AE               	clrf	_day_high+1
  6576                           
  6577                           ;Button_src.c: 436:                         day_low = 0;
  6578  04DE  01AF               	clrf	_day_low
  6579  04DF  01B0               	clrf	_day_low+1
  6580  04E0                     l4100:	
  6581                           
  6582                           ;Button_src.c: 438:                     button_delay();
  6583  04E0  160A  118A  2459  120A  118A  	fcall	_button_delay
  6584  04E5                     l4102:	
  6585                           
  6586                           ;Button_src.c: 440:             if(RC7==0 && b == 'z'){
  6587  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6588  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6589  04E7  1B87               	btfsc	7,7	;volatile
  6590  04E8  2D4C               	goto	l4134
  6591  04E9  307A               	movlw	122
  6592  04EA  0648               	xorwf	_b,w
  6593  04EB  1D03               	btfss	3,2
  6594  04EC  2D4C               	goto	l4134
  6595                           
  6596                           ;Button_src.c: 441:                 if(stats == 1)
  6597  04ED  032B               	decf	_stats,w
  6598  04EE  042C               	iorwf	_stats+1,w
  6599  04EF  1D03               	btfss	3,2
  6600  04F0  2CF5               	goto	l732
  6601                           
  6602                           ;Button_src.c: 442:                    c++;
  6603  04F1  3001               	movlw	1
  6604  04F2  00E4               	movwf	??_date_settings
  6605  04F3  0864               	movf	??_date_settings,w
  6606  04F4  07C7               	addwf	_c,f
  6607  04F5                     l732:	
  6608                           
  6609                           ;Button_src.c: 443:                 if(stats == 0){
  6610  04F5  082B               	movf	_stats,w
  6611  04F6  042C               	iorwf	_stats+1,w
  6612  04F7  1D03               	btfss	3,2
  6613  04F8  2CFD               	goto	l733
  6614                           
  6615                           ;Button_src.c: 444:                     stats = 1;
  6616  04F9  3001               	movlw	1
  6617  04FA  00AB               	movwf	_stats
  6618  04FB  3000               	movlw	0
  6619  04FC  00AC               	movwf	_stats+1
  6620  04FD                     l733:	
  6621                           ;Button_src.c: 445:                 }
  6622                           
  6623                           
  6624                           ;Button_src.c: 447:                     t++;
  6625  04FD  3001               	movlw	1
  6626  04FE  07B9               	addwf	_t,f
  6627  04FF  1803               	skipnc
  6628  0500  0ABA               	incf	_t+1,f
  6629  0501  3000               	movlw	0
  6630  0502  07BA               	addwf	_t+1,f
  6631                           
  6632                           ;Button_src.c: 448:                     t = modulus_func(t,10);
  6633  0503  083A               	movf	_t+1,w
  6634  0504  00F8               	movwf	modulus_func@x+1
  6635  0505  0839               	movf	_t,w
  6636  0506  00F7               	movwf	modulus_func@x
  6637  0507  300A               	movlw	10
  6638  0508  00F9               	movwf	modulus_func@y
  6639  0509  3000               	movlw	0
  6640  050A  00FA               	movwf	modulus_func@y+1
  6641  050B  160A  118A  2438  120A  118A  	fcall	_modulus_func
  6642  0510  0878               	movf	?_modulus_func+1,w
  6643  0511  00BA               	movwf	_t+1
  6644  0512  0877               	movf	?_modulus_func,w
  6645  0513  00B9               	movwf	_t
  6646                           
  6647                           ;Button_src.c: 449:                      if (p == 1){
  6648  0514  0329               	decf	_p,w
  6649  0515  042A               	iorwf	_p+1,w
  6650  0516  1D03               	btfss	3,2
  6651  0517  2D31               	goto	l4120
  6652                           
  6653                           ;Button_src.c: 450:                         w = incrementor(w,t,'0');
  6654  0518  0838               	movf	_w+1,w
  6655  0519  00E0               	movwf	incrementor@upper_val+1
  6656  051A  0837               	movf	_w,w
  6657  051B  00DF               	movwf	incrementor@upper_val
  6658  051C  083A               	movf	_t+1,w
  6659  051D  00E2               	movwf	incrementor@lower_val+1
  6660  051E  0839               	movf	_t,w
  6661  051F  00E1               	movwf	incrementor@lower_val
  6662  0520  3030               	movlw	48
  6663  0521  00E4               	movwf	??_date_settings
  6664  0522  0864               	movf	??_date_settings,w
  6665  0523  00E3               	movwf	incrementor@z
  6666  0524  160A  118A  2559  120A  118A  	fcall	_incrementor
  6667  0529  00E5               	movwf	??_date_settings+1
  6668  052A  01E6               	clrf	??_date_settings+2
  6669  052B  0865               	movf	??_date_settings+1,w
  6670  052C  00B7               	movwf	_w
  6671  052D  0866               	movf	??_date_settings+2,w
  6672  052E  00B8               	movwf	_w+1
  6673                           
  6674                           ;Button_src.c: 451:                         p = 0;
  6675  052F  01A9               	clrf	_p
  6676  0530  01AA               	clrf	_p+1
  6677  0531                     l4120:	
  6678                           
  6679                           ;Button_src.c: 453:                     if (t == 9){
  6680  0531  3009               	movlw	9
  6681  0532  0639               	xorwf	_t,w
  6682  0533  043A               	iorwf	_t+1,w
  6683  0534  1D03               	btfss	3,2
  6684  0535  2D3A               	goto	l4124
  6685                           
  6686                           ;Button_src.c: 454:                         p = 1;
  6687  0536  3001               	movlw	1
  6688  0537  00A9               	movwf	_p
  6689  0538  3000               	movlw	0
  6690  0539  00AA               	movwf	_p+1
  6691  053A                     l4124:	
  6692                           
  6693                           ;Button_src.c: 457:                      if(c == (0x59 + 1)){
  6694  053A  305A               	movlw	90
  6695  053B  0647               	xorwf	_c,w
  6696  053C  1903               	btfsc	3,2
  6697                           
  6698                           ;Button_src.c: 458:                         c = 0x00;
  6699  053D  01C7               	clrf	_c
  6700                           
  6701                           ;Button_src.c: 460:                     if(w == 6){
  6702  053E  3006               	movlw	6
  6703  053F  0637               	xorwf	_w,w
  6704  0540  0438               	iorwf	_w+1,w
  6705  0541  1D03               	btfss	3,2
  6706  0542  2D47               	goto	l4132
  6707                           
  6708                           ;Button_src.c: 461:                         w = 0;
  6709  0543  01B7               	clrf	_w
  6710  0544  01B8               	clrf	_w+1
  6711                           
  6712                           ;Button_src.c: 462:                         t = 0;
  6713  0545  01B9               	clrf	_t
  6714  0546  01BA               	clrf	_t+1
  6715  0547                     l4132:	
  6716                           
  6717                           ;Button_src.c: 464:                     button_delay();
  6718  0547  160A  118A  2459  120A  118A  	fcall	_button_delay
  6719  054C                     l4134:	
  6720                           
  6721                           ;Button_src.c: 471:                     a = time_date_delimiter(a,0x11,'9',1);
  6722  054C  3011               	movlw	17
  6723  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6724  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6725  054F  00E4               	movwf	??_date_settings
  6726  0550  0864               	movf	??_date_settings,w
  6727  0551  00F0               	movwf	time_date_delimiter@hex
  6728  0552  3039               	movlw	57
  6729  0553  00E5               	movwf	??_date_settings+1
  6730  0554  0865               	movf	??_date_settings+1,w
  6731  0555  00F1               	movwf	time_date_delimiter@limiter
  6732  0556  3001               	movlw	1
  6733  0557  00F2               	movwf	time_date_delimiter@type
  6734  0558  3000               	movlw	0
  6735  0559  00F3               	movwf	time_date_delimiter@type+1
  6736  055A  0849               	movf	_a,w
  6737  055B  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6738  0560  00E6               	movwf	??_date_settings+2
  6739  0561  0866               	movf	??_date_settings+2,w
  6740  0562  00C9               	movwf	_a
  6741                           
  6742                           ;Button_src.c: 473:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6743  0563  3011               	movlw	17
  6744  0564  00E4               	movwf	??_date_settings
  6745  0565  0864               	movf	??_date_settings,w
  6746  0566  00F0               	movwf	time_date_delimiter@hex
  6747  0567  3039               	movlw	57
  6748  0568  00E5               	movwf	??_date_settings+1
  6749  0569  0865               	movf	??_date_settings+1,w
  6750  056A  00F1               	movwf	time_date_delimiter@limiter
  6751  056B  3002               	movlw	2
  6752  056C  00F2               	movwf	time_date_delimiter@type
  6753  056D  3000               	movlw	0
  6754  056E  00F3               	movwf	time_date_delimiter@type+1
  6755  056F  0846               	movf	_day_hex,w
  6756  0570  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6757  0575  00E6               	movwf	??_date_settings+2
  6758  0576  0866               	movf	??_date_settings+2,w
  6759  0577  00C6               	movwf	_day_hex
  6760                           
  6761                           ;Button_src.c: 474:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6762  0578  3021               	movlw	33
  6763  0579  00E4               	movwf	??_date_settings
  6764  057A  0864               	movf	??_date_settings,w
  6765  057B  00F0               	movwf	time_date_delimiter@hex
  6766  057C  304A               	movlw	74
  6767  057D  00E5               	movwf	??_date_settings+1
  6768  057E  0865               	movf	??_date_settings+1,w
  6769  057F  00F1               	movwf	time_date_delimiter@limiter
  6770  0580  3002               	movlw	2
  6771  0581  00F2               	movwf	time_date_delimiter@type
  6772  0582  3000               	movlw	0
  6773  0583  00F3               	movwf	time_date_delimiter@type+1
  6774  0584  0846               	movf	_day_hex,w
  6775  0585  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6776  058A  00E6               	movwf	??_date_settings+2
  6777  058B  0866               	movf	??_date_settings+2,w
  6778  058C  00C6               	movwf	_day_hex
  6779                           
  6780                           ;Button_src.c: 475:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6781  058D  3011               	movlw	17
  6782  058E  00E4               	movwf	??_date_settings
  6783  058F  0864               	movf	??_date_settings,w
  6784  0590  00F0               	movwf	time_date_delimiter@hex
  6785  0591  3039               	movlw	57
  6786  0592  00E5               	movwf	??_date_settings+1
  6787  0593  0865               	movf	??_date_settings+1,w
  6788  0594  00F1               	movwf	time_date_delimiter@limiter
  6789  0595  3002               	movlw	2
  6790  0596  00F2               	movwf	time_date_delimiter@type
  6791  0597  3000               	movlw	0
  6792  0598  00F3               	movwf	time_date_delimiter@type+1
  6793  0599  0846               	movf	_day_hex,w
  6794  059A  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6795  059F  00E6               	movwf	??_date_settings+2
  6796  05A0  0866               	movf	??_date_settings+2,w
  6797  05A1  00C6               	movwf	_day_hex
  6798                           
  6799                           ;Button_src.c: 476:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6800  05A2  3021               	movlw	33
  6801  05A3  00E4               	movwf	??_date_settings
  6802  05A4  0864               	movf	??_date_settings,w
  6803  05A5  00F0               	movwf	time_date_delimiter@hex
  6804  05A6  304A               	movlw	74
  6805  05A7  00E5               	movwf	??_date_settings+1
  6806  05A8  0865               	movf	??_date_settings+1,w
  6807  05A9  00F1               	movwf	time_date_delimiter@limiter
  6808  05AA  3002               	movlw	2
  6809  05AB  00F2               	movwf	time_date_delimiter@type
  6810  05AC  3000               	movlw	0
  6811  05AD  00F3               	movwf	time_date_delimiter@type+1
  6812  05AE  0846               	movf	_day_hex,w
  6813  05AF  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6814  05B4  00E6               	movwf	??_date_settings+2
  6815  05B5  0866               	movf	??_date_settings+2,w
  6816  05B6  00C6               	movwf	_day_hex
  6817                           
  6818                           ;Button_src.c: 477:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6819  05B7  3031               	movlw	49
  6820  05B8  00E4               	movwf	??_date_settings
  6821  05B9  0864               	movf	??_date_settings,w
  6822  05BA  00F0               	movwf	time_date_delimiter@hex
  6823  05BB  3059               	movlw	89
  6824  05BC  00E5               	movwf	??_date_settings+1
  6825  05BD  0865               	movf	??_date_settings+1,w
  6826  05BE  00F1               	movwf	time_date_delimiter@limiter
  6827  05BF  3002               	movlw	2
  6828  05C0  00F2               	movwf	time_date_delimiter@type
  6829  05C1  3000               	movlw	0
  6830  05C2  00F3               	movwf	time_date_delimiter@type+1
  6831  05C3  0846               	movf	_day_hex,w
  6832  05C4  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6833  05C9  00E6               	movwf	??_date_settings+2
  6834  05CA  0866               	movf	??_date_settings+2,w
  6835  05CB  00C6               	movwf	_day_hex
  6836                           
  6837                           ;Button_src.c: 479:                     c = time_date_delimiter(c,0x11,'9',3);
  6838  05CC  3011               	movlw	17
  6839  05CD  00E4               	movwf	??_date_settings
  6840  05CE  0864               	movf	??_date_settings,w
  6841  05CF  00F0               	movwf	time_date_delimiter@hex
  6842  05D0  3039               	movlw	57
  6843  05D1  00E5               	movwf	??_date_settings+1
  6844  05D2  0865               	movf	??_date_settings+1,w
  6845  05D3  00F1               	movwf	time_date_delimiter@limiter
  6846  05D4  3003               	movlw	3
  6847  05D5  00F2               	movwf	time_date_delimiter@type
  6848  05D6  3000               	movlw	0
  6849  05D7  00F3               	movwf	time_date_delimiter@type+1
  6850  05D8  0847               	movf	_c,w
  6851  05D9  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6852  05DE  00E6               	movwf	??_date_settings+2
  6853  05DF  0866               	movf	??_date_settings+2,w
  6854  05E0  00C7               	movwf	_c
  6855                           
  6856                           ;Button_src.c: 480:                     c = time_date_delimiter(c,0x21,'J',3);
  6857  05E1  3021               	movlw	33
  6858  05E2  00E4               	movwf	??_date_settings
  6859  05E3  0864               	movf	??_date_settings,w
  6860  05E4  00F0               	movwf	time_date_delimiter@hex
  6861  05E5  304A               	movlw	74
  6862  05E6  00E5               	movwf	??_date_settings+1
  6863  05E7  0865               	movf	??_date_settings+1,w
  6864  05E8  00F1               	movwf	time_date_delimiter@limiter
  6865  05E9  3003               	movlw	3
  6866  05EA  00F2               	movwf	time_date_delimiter@type
  6867  05EB  3000               	movlw	0
  6868  05EC  00F3               	movwf	time_date_delimiter@type+1
  6869  05ED  0847               	movf	_c,w
  6870  05EE  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6871  05F3  00E6               	movwf	??_date_settings+2
  6872  05F4  0866               	movf	??_date_settings+2,w
  6873  05F5  00C7               	movwf	_c
  6874                           
  6875                           ;Button_src.c: 481:                     c = time_date_delimiter(c,0x11,'9',3);
  6876  05F6  3011               	movlw	17
  6877  05F7  00E4               	movwf	??_date_settings
  6878  05F8  0864               	movf	??_date_settings,w
  6879  05F9  00F0               	movwf	time_date_delimiter@hex
  6880  05FA  3039               	movlw	57
  6881  05FB  00E5               	movwf	??_date_settings+1
  6882  05FC  0865               	movf	??_date_settings+1,w
  6883  05FD  00F1               	movwf	time_date_delimiter@limiter
  6884  05FE  3003               	movlw	3
  6885  05FF  00F2               	movwf	time_date_delimiter@type
  6886  0600  3000               	movlw	0
  6887  0601  00F3               	movwf	time_date_delimiter@type+1
  6888  0602  0847               	movf	_c,w
  6889  0603  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6890  0608  00E6               	movwf	??_date_settings+2
  6891  0609  0866               	movf	??_date_settings+2,w
  6892  060A  00C7               	movwf	_c
  6893                           
  6894                           ;Button_src.c: 482:                     c = time_date_delimiter(c,0x21,'J',3);
  6895  060B  3021               	movlw	33
  6896  060C  00E4               	movwf	??_date_settings
  6897  060D  0864               	movf	??_date_settings,w
  6898  060E  00F0               	movwf	time_date_delimiter@hex
  6899  060F  304A               	movlw	74
  6900  0610  00E5               	movwf	??_date_settings+1
  6901  0611  0865               	movf	??_date_settings+1,w
  6902  0612  00F1               	movwf	time_date_delimiter@limiter
  6903  0613  3003               	movlw	3
  6904  0614  00F2               	movwf	time_date_delimiter@type
  6905  0615  3000               	movlw	0
  6906  0616  00F3               	movwf	time_date_delimiter@type+1
  6907  0617  0847               	movf	_c,w
  6908  0618  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6909  061D  00E6               	movwf	??_date_settings+2
  6910  061E  0866               	movf	??_date_settings+2,w
  6911  061F  00C7               	movwf	_c
  6912                           
  6913                           ;Button_src.c: 483:                     c = time_date_delimiter(c,0x31,'Y',3);
  6914  0620  3031               	movlw	49
  6915  0621  00E4               	movwf	??_date_settings
  6916  0622  0864               	movf	??_date_settings,w
  6917  0623  00F0               	movwf	time_date_delimiter@hex
  6918  0624  3059               	movlw	89
  6919  0625  00E5               	movwf	??_date_settings+1
  6920  0626  0865               	movf	??_date_settings+1,w
  6921  0627  00F1               	movwf	time_date_delimiter@limiter
  6922  0628  3003               	movlw	3
  6923  0629  00F2               	movwf	time_date_delimiter@type
  6924  062A  3000               	movlw	0
  6925  062B  00F3               	movwf	time_date_delimiter@type+1
  6926  062C  0847               	movf	_c,w
  6927  062D  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6928  0632  00E6               	movwf	??_date_settings+2
  6929  0633  0866               	movf	??_date_settings+2,w
  6930  0634  00C7               	movwf	_c
  6931                           
  6932                           ;Button_src.c: 484:                     c = time_date_delimiter(c,0x41,'j',3);
  6933  0635  3041               	movlw	65
  6934  0636  00E4               	movwf	??_date_settings
  6935  0637  0864               	movf	??_date_settings,w
  6936  0638  00F0               	movwf	time_date_delimiter@hex
  6937  0639  306A               	movlw	106
  6938  063A  00E5               	movwf	??_date_settings+1
  6939  063B  0865               	movf	??_date_settings+1,w
  6940  063C  00F1               	movwf	time_date_delimiter@limiter
  6941  063D  3003               	movlw	3
  6942  063E  00F2               	movwf	time_date_delimiter@type
  6943  063F  3000               	movlw	0
  6944  0640  00F3               	movwf	time_date_delimiter@type+1
  6945  0641  0847               	movf	_c,w
  6946  0642  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6947  0647  00E6               	movwf	??_date_settings+2
  6948  0648  0866               	movf	??_date_settings+2,w
  6949  0649  00C7               	movwf	_c
  6950                           
  6951                           ;Button_src.c: 485:                     c = time_date_delimiter(c,0x51,'z',3);
  6952  064A  3051               	movlw	81
  6953  064B  00E4               	movwf	??_date_settings
  6954  064C  0864               	movf	??_date_settings,w
  6955  064D  00F0               	movwf	time_date_delimiter@hex
  6956  064E  307A               	movlw	122
  6957  064F  00E5               	movwf	??_date_settings+1
  6958  0650  0865               	movf	??_date_settings+1,w
  6959  0651  00F1               	movwf	time_date_delimiter@limiter
  6960  0652  3003               	movlw	3
  6961  0653  00F2               	movwf	time_date_delimiter@type
  6962  0654  3000               	movlw	0
  6963  0655  00F3               	movwf	time_date_delimiter@type+1
  6964  0656  0847               	movf	_c,w
  6965  0657  120A  158A  22BB  120A  118A  	fcall	_time_date_delimiter
  6966  065C  00E6               	movwf	??_date_settings+2
  6967  065D  0866               	movf	??_date_settings+2,w
  6968  065E  00C7               	movwf	_c
  6969                           
  6970                           ;Button_src.c: 487:               if(stats==0){
  6971  065F  082B               	movf	_stats,w
  6972  0660  042C               	iorwf	_stats+1,w
  6973  0661  1D03               	btfss	3,2
  6974  0662  2E71               	goto	l4164
  6975                           
  6976                           ;Button_src.c: 488:                   table[4] = prev_hex;
  6977  0663  0844               	movf	_prev_hex,w
  6978  0664  00E4               	movwf	??_date_settings
  6979  0665  0864               	movf	??_date_settings,w
  6980  0666  1683               	bsf	3,5	;RP0=1, select bank1
  6981  0667  00AC               	movwf	(_table^(0+128)+4)
  6982                           
  6983                           ;Button_src.c: 489:                   table[6] = prev_hex_year;
  6984  0668  1283               	bcf	3,5	;RP0=0, select bank0
  6985  0669  0842               	movf	_prev_hex_year,w
  6986  066A  00E4               	movwf	??_date_settings
  6987  066B  0864               	movf	??_date_settings,w
  6988  066C  1683               	bsf	3,5	;RP0=1, select bank1
  6989  066D  00AE               	movwf	(_table^(0+128)+6)
  6990                           
  6991                           ;Button_src.c: 490:                   table[3] = prev_hex_day;
  6992  066E  1283               	bcf	3,5	;RP0=0, select bank0
  6993  066F  0843               	movf	_prev_hex_day,w
  6994  0670  2E82               	goto	L3
  6995  0671                     l4164:	
  6996                           ;Button_src.c: 491:               }
  6997                           
  6998  0671  032B               	decf	_stats,w
  6999  0672  042C               	iorwf	_stats+1,w
  7000  0673  1D03               	btfss	3,2
  7001  0674  2E86               	goto	l4168
  7002                           
  7003                           ;Button_src.c: 493:               {;Button_src.c: 494:                  table[4]= a;
  7004  0675  0849               	movf	_a,w
  7005  0676  00E4               	movwf	??_date_settings
  7006  0677  0864               	movf	??_date_settings,w
  7007  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7008  0679  00AC               	movwf	(_table^(0+128)+4)
  7009                           
  7010                           ;Button_src.c: 495:                  table[6] = c;
  7011  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7012  067B  0847               	movf	_c,w
  7013  067C  00E4               	movwf	??_date_settings
  7014  067D  0864               	movf	??_date_settings,w
  7015  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7016  067F  00AE               	movwf	(_table^(0+128)+6)
  7017                           
  7018                           ;Button_src.c: 496:                  table[3] = day_hex;
  7019  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7020  0681  0846               	movf	_day_hex,w
  7021  0682                     L3:	
  7022  0682  00E4               	movwf	??_date_settings
  7023  0683  0864               	movf	??_date_settings,w
  7024  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7025  0685  00AB               	movwf	(_table^(0+128)+3)
  7026  0686                     l4168:	
  7027                           
  7028                           ;Button_src.c: 499:              write_cmd(0x88);
  7029  0686  3088               	movlw	136
  7030  0687  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  7031                           
  7032                           ;Button_src.c: 501:                   RC0 = 0;
  7033  068C  1007               	bcf	7,0	;volatile
  7034                           
  7035                           ;Button_src.c: 502:                   RC1 = 1;
  7036  068D  1487               	bsf	7,1	;volatile
  7037                           
  7038                           ;Button_src.c: 503:                   RC2 = 1;
  7039  068E  1507               	bsf	7,2	;volatile
  7040                           
  7041                           ;Button_src.c: 504:                   RC3 = 1;
  7042  068F  1587               	bsf	7,3	;volatile
  7043                           
  7044                           ;Button_src.c: 506:                     if (RC6 == 0 ){
  7045  0690  1B07               	btfsc	7,6	;volatile
  7046  0691  2EAB               	goto	l741
  7047                           
  7048                           ;Button_src.c: 507:                           a = 0x00;
  7049  0692  01C9               	clrf	_a
  7050                           
  7051                           ;Button_src.c: 508:                           c = 0x00;
  7052  0693  01C7               	clrf	_c
  7053                           
  7054                           ;Button_src.c: 509:                           day_hex = 0x00;
  7055  0694  01C6               	clrf	_day_hex
  7056                           
  7057                           ;Button_src.c: 510:                           day_high = 0;
  7058  0695  01AD               	clrf	_day_high
  7059  0696  01AE               	clrf	_day_high+1
  7060                           
  7061                           ;Button_src.c: 511:                           day_low = 0;
  7062  0697  01AF               	clrf	_day_low
  7063  0698  01B0               	clrf	_day_low+1
  7064                           
  7065                           ;Button_src.c: 512:                           x = 0;
  7066  0699  01B5               	clrf	_x
  7067  069A  01B6               	clrf	_x+1
  7068                           
  7069                           ;Button_src.c: 513:                           y = 0;
  7070  069B  01B3               	clrf	_y
  7071  069C  01B4               	clrf	_y+1
  7072                           
  7073                           ;Button_src.c: 514:                           w = 0;
  7074  069D  01B7               	clrf	_w
  7075  069E  01B8               	clrf	_w+1
  7076                           
  7077                           ;Button_src.c: 515:                           t = 0;
  7078  069F  01B9               	clrf	_t
  7079  06A0  01BA               	clrf	_t+1
  7080                           
  7081                           ;Button_src.c: 516:                           write_cmd(0x1);
  7082  06A1  3001               	movlw	1
  7083  06A2  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  7084                           
  7085                           ;Button_src.c: 517:                           set_time();
  7086  06A7  160A  118A  25C7   	fcall	_set_time
  7087  06AA  0008               	return
  7088  06AB                     l741:	
  7089                           ;Button_src.c: 519:                             }
  7090                           
  7091                           
  7092                           ;Button_src.c: 520:                   RC0 = 0;
  7093  06AB  1007               	bcf	7,0	;volatile
  7094                           
  7095                           ;Button_src.c: 521:                   RC1 = 1;
  7096  06AC  1487               	bsf	7,1	;volatile
  7097                           
  7098                           ;Button_src.c: 522:                   RC2 = 1;
  7099  06AD  1507               	bsf	7,2	;volatile
  7100                           
  7101                           ;Button_src.c: 523:                   RC3 = 1;
  7102  06AE  1587               	bsf	7,3	;volatile
  7103                           
  7104                           ;Button_src.c: 524:                   z = modulus_func(z,3);
  7105  06AF  0832               	movf	_z+1,w
  7106  06B0  00F8               	movwf	modulus_func@x+1
  7107  06B1  0831               	movf	_z,w
  7108  06B2  00F7               	movwf	modulus_func@x
  7109  06B3  3003               	movlw	3
  7110  06B4  00F9               	movwf	modulus_func@y
  7111  06B5  3000               	movlw	0
  7112  06B6  00FA               	movwf	modulus_func@y+1
  7113  06B7  160A  118A  2438  120A  118A  	fcall	_modulus_func
  7114  06BC  0878               	movf	?_modulus_func+1,w
  7115  06BD  00B2               	movwf	_z+1
  7116  06BE  0877               	movf	?_modulus_func,w
  7117  06BF  00B1               	movwf	_z
  7118                           
  7119                           ;Button_src.c: 525:                   if(RC4 == 0 && z ==0){
  7120  06C0  1A07               	btfsc	7,4	;volatile
  7121  06C1  2F01               	goto	l4200
  7122  06C2  0831               	movf	_z,w
  7123  06C3  0432               	iorwf	_z+1,w
  7124  06C4  1D03               	btfss	3,2
  7125  06C5  2F01               	goto	l4200
  7126                           
  7127                           ;Button_src.c: 526:                       write_cmd(0x90);
  7128  06C6  3090               	movlw	144
  7129  06C7  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  7130                           
  7131                           ;Button_src.c: 527:                       write_char('D');
  7132  06CC  3044               	movlw	68
  7133  06CD  160A  118A  24A9  120A  118A  	fcall	_write_char
  7134                           
  7135                           ;Button_src.c: 528:                       write_char('a');
  7136  06D2  3061               	movlw	97
  7137  06D3  160A  118A  24A9  120A  118A  	fcall	_write_char
  7138                           
  7139                           ;Button_src.c: 529:                       write_char('y');
  7140  06D8  3079               	movlw	121
  7141  06D9  160A  118A  24A9  120A  118A  	fcall	_write_char
  7142                           
  7143                           ;Button_src.c: 530:                       write_char(':');
  7144  06DE  303A               	movlw	58
  7145  06DF  160A  118A  24A9  120A  118A  	fcall	_write_char
  7146                           
  7147                           ;Button_src.c: 531:                       write_char(' ');
  7148  06E4  3020               	movlw	32
  7149  06E5  160A  118A  24A9  120A  118A  	fcall	_write_char
  7150                           
  7151                           ;Button_src.c: 532:                       write_char(' ');
  7152  06EA  3020               	movlw	32
  7153  06EB  160A  118A  24A9  120A  118A  	fcall	_write_char
  7154                           
  7155                           ;Button_src.c: 533:                       b = 'y';
  7156  06F0  3079               	movlw	121
  7157  06F1  00E4               	movwf	??_date_settings
  7158  06F2  0864               	movf	??_date_settings,w
  7159  06F3  00C8               	movwf	_b
  7160                           
  7161                           ;Button_src.c: 535:                       button_delay();
  7162  06F4  160A  118A  2459  120A  118A  	fcall	_button_delay
  7163                           
  7164                           ;Button_src.c: 536:                       z++;
  7165  06F9  3001               	movlw	1
  7166  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7167  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7168  06FC  07B1               	addwf	_z,f
  7169  06FD  1803               	skipnc
  7170  06FE  0AB2               	incf	_z+1,f
  7171  06FF  3000               	movlw	0
  7172  0700  07B2               	addwf	_z+1,f
  7173  0701                     l4200:	
  7174                           
  7175                           ;Button_src.c: 538:                   RC0 = 0;
  7176  0701  1007               	bcf	7,0	;volatile
  7177                           
  7178                           ;Button_src.c: 539:                   RC1 = 1;
  7179  0702  1487               	bsf	7,1	;volatile
  7180                           
  7181                           ;Button_src.c: 540:                   RC2 = 1;
  7182  0703  1507               	bsf	7,2	;volatile
  7183                           
  7184                           ;Button_src.c: 541:                   RC3 = 1;
  7185  0704  1587               	bsf	7,3	;volatile
  7186                           
  7187                           ;Button_src.c: 542:                   if(RC4 == 0&& z ==1){
  7188  0705  1A07               	btfsc	7,4	;volatile
  7189  0706  2F44               	goto	l4230
  7190  0707  0331               	decf	_z,w
  7191  0708  0432               	iorwf	_z+1,w
  7192  0709  1D03               	btfss	3,2
  7193  070A  2F44               	goto	l4230
  7194                           
  7195                           ;Button_src.c: 543:                       z++;
  7196  070B  3001               	movlw	1
  7197  070C  07B1               	addwf	_z,f
  7198  070D  1803               	skipnc
  7199  070E  0AB2               	incf	_z+1,f
  7200  070F  3000               	movlw	0
  7201  0710  07B2               	addwf	_z+1,f
  7202                           
  7203                           ;Button_src.c: 544:                       button_delay();
  7204  0711  160A  118A  2459  120A  118A  	fcall	_button_delay
  7205                           
  7206                           ;Button_src.c: 546:                       write_cmd(0x90);
  7207  0716  3090               	movlw	144
  7208  0717  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  7209                           
  7210                           ;Button_src.c: 547:                       write_char('M');
  7211  071C  304D               	movlw	77
  7212  071D  160A  118A  24A9  120A  118A  	fcall	_write_char
  7213                           
  7214                           ;Button_src.c: 548:                       write_char('o');
  7215  0722  306F               	movlw	111
  7216  0723  160A  118A  24A9  120A  118A  	fcall	_write_char
  7217                           
  7218                           ;Button_src.c: 549:                       write_char('n');
  7219  0728  306E               	movlw	110
  7220  0729  160A  118A  24A9  120A  118A  	fcall	_write_char
  7221                           
  7222                           ;Button_src.c: 550:                       write_char('t');
  7223  072E  3074               	movlw	116
  7224  072F  160A  118A  24A9  120A  118A  	fcall	_write_char
  7225                           
  7226                           ;Button_src.c: 551:                       write_char('h');
  7227  0734  3068               	movlw	104
  7228  0735  160A  118A  24A9  120A  118A  	fcall	_write_char
  7229                           
  7230                           ;Button_src.c: 552:                       write_char(':');
  7231  073A  303A               	movlw	58
  7232  073B  160A  118A  24A9  120A  118A  	fcall	_write_char
  7233                           
  7234                           ;Button_src.c: 553:                       b = 'x';
  7235  0740  3078               	movlw	120
  7236  0741  00E4               	movwf	??_date_settings
  7237  0742  0864               	movf	??_date_settings,w
  7238  0743  00C8               	movwf	_b
  7239  0744                     l4230:	
  7240                           
  7241                           ;Button_src.c: 556:                   RC0 = 0;
  7242  0744  1007               	bcf	7,0	;volatile
  7243                           
  7244                           ;Button_src.c: 557:                   RC1 = 1;
  7245  0745  1487               	bsf	7,1	;volatile
  7246                           
  7247                           ;Button_src.c: 558:                   RC2 = 1;
  7248  0746  1507               	bsf	7,2	;volatile
  7249                           
  7250                           ;Button_src.c: 559:                   RC3 = 1;
  7251  0747  1587               	bsf	7,3	;volatile
  7252                           
  7253                           ;Button_src.c: 560:                   if(RC4 == 0&& z ==2){
  7254  0748  1A07               	btfsc	7,4	;volatile
  7255  0749  2F8A               	goto	l4260
  7256  074A  3002               	movlw	2
  7257  074B  0631               	xorwf	_z,w
  7258  074C  0432               	iorwf	_z+1,w
  7259  074D  1D03               	btfss	3,2
  7260  074E  2F8A               	goto	l4260
  7261                           
  7262                           ;Button_src.c: 561:                       button_delay();
  7263  074F  160A  118A  2459  120A  118A  	fcall	_button_delay
  7264                           
  7265                           ;Button_src.c: 562:                       z++;
  7266  0754  3001               	movlw	1
  7267  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7268  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7269  0757  07B1               	addwf	_z,f
  7270  0758  1803               	skipnc
  7271  0759  0AB2               	incf	_z+1,f
  7272  075A  3000               	movlw	0
  7273  075B  07B2               	addwf	_z+1,f
  7274                           
  7275                           ;Button_src.c: 564:                       write_cmd(0x90);
  7276  075C  3090               	movlw	144
  7277  075D  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  7278                           
  7279                           ;Button_src.c: 565:                       write_char('Y');
  7280  0762  3059               	movlw	89
  7281  0763  160A  118A  24A9  120A  118A  	fcall	_write_char
  7282                           
  7283                           ;Button_src.c: 566:                       write_char('e');
  7284  0768  3065               	movlw	101
  7285  0769  160A  118A  24A9  120A  118A  	fcall	_write_char
  7286                           
  7287                           ;Button_src.c: 567:                       write_char('a');
  7288  076E  3061               	movlw	97
  7289  076F  160A  118A  24A9  120A  118A  	fcall	_write_char
  7290                           
  7291                           ;Button_src.c: 568:                       write_char('r');
  7292  0774  3072               	movlw	114
  7293  0775  160A  118A  24A9  120A  118A  	fcall	_write_char
  7294                           
  7295                           ;Button_src.c: 569:                       write_char(':');
  7296  077A  303A               	movlw	58
  7297  077B  160A  118A  24A9  120A  118A  	fcall	_write_char
  7298                           
  7299                           ;Button_src.c: 570:                       write_char(' ');
  7300  0780  3020               	movlw	32
  7301  0781  160A  118A  24A9  120A  118A  	fcall	_write_char
  7302                           
  7303                           ;Button_src.c: 571:                       b = 'z';
  7304  0786  307A               	movlw	122
  7305  0787  00E4               	movwf	??_date_settings
  7306  0788  0864               	movf	??_date_settings,w
  7307  0789  00C8               	movwf	_b
  7308  078A                     l4260:	
  7309                           
  7310                           ;Button_src.c: 574:               write_cmd(0x88);
  7311  078A  3088               	movlw	136
  7312  078B  160A  118A  24C0  120A  118A  	fcall	_write_cmd
  7313                           
  7314                           ;Button_src.c: 575:               write_char(day_high + '0');
  7315  0790  082D               	movf	_day_high,w
  7316  0791  3E30               	addlw	48
  7317  0792  160A  118A  24A9  120A  118A  	fcall	_write_char
  7318                           
  7319                           ;Button_src.c: 576:               write_char(day_low + '0');
  7320  0797  082F               	movf	_day_low,w
  7321  0798  3E30               	addlw	48
  7322  0799  160A  118A  24A9  120A  118A  	fcall	_write_char
  7323                           
  7324                           ;Button_src.c: 577:               write_char('/');
  7325  079E  302F               	movlw	47
  7326  079F  160A  118A  24A9  120A  118A  	fcall	_write_char
  7327                           
  7328                           ;Button_src.c: 578:               write_char(y + '0');
  7329  07A4  0833               	movf	_y,w
  7330  07A5  3E30               	addlw	48
  7331  07A6  160A  118A  24A9  120A  118A  	fcall	_write_char
  7332                           
  7333                           ;Button_src.c: 579:               write_char(x + '0');
  7334  07AB  0835               	movf	_x,w
  7335  07AC  3E30               	addlw	48
  7336  07AD  160A  118A  24A9  120A  118A  	fcall	_write_char
  7337                           
  7338                           ;Button_src.c: 580:               write_char('/');
  7339  07B2  302F               	movlw	47
  7340  07B3  160A  118A  24A9  120A  118A  	fcall	_write_char
  7341                           
  7342                           ;Button_src.c: 581:               write_char(w+ '0');
  7343  07B8  0837               	movf	_w,w
  7344  07B9  3E30               	addlw	48
  7345  07BA  160A  118A  24A9  120A  118A  	fcall	_write_char
  7346                           
  7347                           ;Button_src.c: 582:               write_char(t+ '0');
  7348  07BF  0839               	movf	_t,w
  7349  07C0  3E30               	addlw	48
  7350  07C1  160A  118A  24A9  120A  118A  	fcall	_write_char
  7351                           
  7352                           ;Button_src.c: 585:             RC0 = 0;
  7353  07C6  1007               	bcf	7,0	;volatile
  7354                           
  7355                           ;Button_src.c: 586:             RC1 = 1;
  7356  07C7  1487               	bsf	7,1	;volatile
  7357                           
  7358                           ;Button_src.c: 587:             RC2 = 1;
  7359  07C8  1507               	bsf	7,2	;volatile
  7360                           
  7361                           ;Button_src.c: 588:             RC3 = 1;
  7362  07C9  1587               	bsf	7,3	;volatile
  7363                           
  7364                           ;Button_src.c: 589:             if (RC7 == 0 ){
  7365  07CA  1B87               	btfsc	7,7	;volatile
  7366  07CB  2B95               	goto	l718
  7367                           
  7368                           ;Button_src.c: 590:             a = 0x00;
  7369  07CC  01C9               	clrf	_a
  7370                           
  7371                           ;Button_src.c: 591:             c = 0x00;
  7372  07CD  01C7               	clrf	_c
  7373                           
  7374                           ;Button_src.c: 592:             day_hex = 0x00;
  7375  07CE  01C6               	clrf	_day_hex
  7376                           
  7377                           ;Button_src.c: 593:             x = 0;
  7378  07CF  01B5               	clrf	_x
  7379  07D0  01B6               	clrf	_x+1
  7380                           
  7381                           ;Button_src.c: 594:             y = 0;
  7382  07D1  01B3               	clrf	_y
  7383  07D2  01B4               	clrf	_y+1
  7384                           
  7385                           ;Button_src.c: 595:             w = 0;
  7386  07D3  01B7               	clrf	_w
  7387  07D4  01B8               	clrf	_w+1
  7388                           
  7389                           ;Button_src.c: 596:             t = 0;
  7390  07D5  01B9               	clrf	_t
  7391  07D6  01BA               	clrf	_t+1
  7392                           
  7393                           ;Button_src.c: 597:             day_high = 0;
  7394  07D7  01AD               	clrf	_day_high
  7395  07D8  01AE               	clrf	_day_high+1
  7396                           
  7397                           ;Button_src.c: 598:             day_low = 0;
  7398  07D9  01AF               	clrf	_day_low
  7399  07DA  01B0               	clrf	_day_low+1
  7400                           
  7401                           ;Button_src.c: 599:             write_cmd(0x1);
  7402  07DB  3001               	movlw	1
  7403  07DC  160A  118A  24C0   	fcall	_write_cmd
  7404                           
  7405                           ;Button_src.c: 600:             break;
  7406  07DF  0008               	return
  7407  07E0                     __end_of_date_settings:	
  7408                           
  7409                           	psect	text30
  7410  14C0                     __ptext30:	
  7411 ;; *************** function _write_cmd *****************
  7412 ;; Defined at:
  7413 ;;		line 41 in file "LCD_src.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  x               1    wreg     unsigned char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  x               1    2[COMMON] unsigned char 
  7418 ;;  i               2    0        int 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      void 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 300/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7428 ;;      Params:         0       0       0       0       0
  7429 ;;      Locals:         1       0       0       0       0
  7430 ;;      Temps:          0       0       0       0       0
  7431 ;;      Totals:         1       0       0       0       0
  7432 ;;Total ram usage:        1 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; Hardware stack levels required when called:    1
  7435 ;; This function calls:
  7436 ;;		_delay_screen
  7437 ;; This function is called by:
  7438 ;;		_main
  7439 ;;		_lcd_init
  7440 ;;		_thermometer_threshhold_settings
  7441 ;;		_time_settings
  7442 ;;		_date_settings
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function _write_cmd
  7448  14C0                     _write_cmd:	
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7452                           ;write_cmd@x stored from wreg
  7453  14C0  00F2               	movwf	write_cmd@x
  7454                           
  7455                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7456  14C1  1283               	bcf	3,5	;RP0=0, select bank0
  7457  14C2  1303               	bcf	3,6	;RP1=0, select bank0
  7458  14C3  1285               	bcf	5,5	;volatile
  7459                           
  7460                           ;LCD_src.c: 45:  RA4=0;
  7461  14C4  1205               	bcf	5,4	;volatile
  7462                           
  7463                           ;LCD_src.c: 46:  RA3=0;
  7464  14C5  1185               	bcf	5,3	;volatile
  7465                           
  7466                           ;LCD_src.c: 47:  delay_screen();
  7467  14C6  160A  118A  246D  160A  118A  	fcall	_delay_screen
  7468                           
  7469                           ;LCD_src.c: 48:  RA3=1;
  7470  14CB  1283               	bcf	3,5	;RP0=0, select bank0
  7471  14CC  1303               	bcf	3,6	;RP1=0, select bank0
  7472  14CD  1585               	bsf	5,3	;volatile
  7473                           
  7474                           ;LCD_src.c: 49:  PORTD=x;
  7475  14CE  0872               	movf	write_cmd@x,w
  7476  14CF  0088               	movwf	8	;volatile
  7477                           
  7478                           ;LCD_src.c: 50:  delay_screen();
  7479  14D0  160A  118A  246D   	fcall	_delay_screen
  7480                           
  7481                           ;LCD_src.c: 51:  RA3=0;
  7482  14D3  1283               	bcf	3,5	;RP0=0, select bank0
  7483  14D4  1303               	bcf	3,6	;RP1=0, select bank0
  7484  14D5  1185               	bcf	5,3	;volatile
  7485  14D6  0008               	return
  7486  14D7                     __end_of_write_cmd:	
  7487                           
  7488                           	psect	text31
  7489  14A9                     __ptext31:	
  7490 ;; *************** function _write_char *****************
  7491 ;; Defined at:
  7492 ;;		line 28 in file "LCD_src.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  x               1    wreg     unsigned char 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  x               1    2[COMMON] unsigned char 
  7497 ;;  i               2    0        int 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 300/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7507 ;;      Params:         0       0       0       0       0
  7508 ;;      Locals:         1       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0
  7510 ;;      Totals:         1       0       0       0       0
  7511 ;;Total ram usage:        1 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    1
  7514 ;; This function calls:
  7515 ;;		_delay_screen
  7516 ;; This function is called by:
  7517 ;;		_main
  7518 ;;		_display_temp
  7519 ;;		_display_clock
  7520 ;;		_display_date
  7521 ;;		_thermometer_threshhold_settings
  7522 ;;		_time_settings
  7523 ;;		_date_settings
  7524 ;;		_set_upper_threshold
  7525 ;;		_set_lower_threshold
  7526 ;;		_reset_alarm
  7527 ;;		_display_day
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _write_char
  7533  14A9                     _write_char:	
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7537                           ;write_char@x stored from wreg
  7538  14A9  00F2               	movwf	write_char@x
  7539                           
  7540                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7541  14AA  1283               	bcf	3,5	;RP0=0, select bank0
  7542  14AB  1303               	bcf	3,6	;RP1=0, select bank0
  7543  14AC  1685               	bsf	5,5	;volatile
  7544                           
  7545                           ;LCD_src.c: 32:  RA4=0;
  7546  14AD  1205               	bcf	5,4	;volatile
  7547                           
  7548                           ;LCD_src.c: 33:  RA3=0;
  7549  14AE  1185               	bcf	5,3	;volatile
  7550                           
  7551                           ;LCD_src.c: 34:  delay_screen();
  7552  14AF  160A  118A  246D  160A  118A  	fcall	_delay_screen
  7553                           
  7554                           ;LCD_src.c: 35:  RA3=1;
  7555  14B4  1283               	bcf	3,5	;RP0=0, select bank0
  7556  14B5  1303               	bcf	3,6	;RP1=0, select bank0
  7557  14B6  1585               	bsf	5,3	;volatile
  7558                           
  7559                           ;LCD_src.c: 36:  PORTD= x;
  7560  14B7  0872               	movf	write_char@x,w
  7561  14B8  0088               	movwf	8	;volatile
  7562                           
  7563                           ;LCD_src.c: 37:  delay_screen();
  7564  14B9  160A  118A  246D   	fcall	_delay_screen
  7565                           
  7566                           ;LCD_src.c: 38:  RA3=0;
  7567  14BC  1283               	bcf	3,5	;RP0=0, select bank0
  7568  14BD  1303               	bcf	3,6	;RP1=0, select bank0
  7569  14BE  1185               	bcf	5,3	;volatile
  7570  14BF  0008               	return
  7571  14C0                     __end_of_write_char:	
  7572                           
  7573                           	psect	text32
  7574  146D                     __ptext32:	
  7575 ;; *************** function _delay_screen *****************
  7576 ;; Defined at:
  7577 ;;		line 70 in file "LCD_src.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  i               2    0[COMMON] int 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, status,2, btemp+1
  7586 ;; Tracked objects:
  7587 ;;		On entry : 300/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7591 ;;      Params:         0       0       0       0       0
  7592 ;;      Locals:         2       0       0       0       0
  7593 ;;      Temps:          0       0       0       0       0
  7594 ;;      Totals:         2       0       0       0       0
  7595 ;;Total ram usage:        2 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; This function calls:
  7598 ;;		Nothing
  7599 ;; This function is called by:
  7600 ;;		_lcd_init
  7601 ;;		_write_char
  7602 ;;		_write_cmd
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function _delay_screen
  7608  146D                     _delay_screen:	
  7609                           
  7610                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7614  146D  01F0               	clrf	delay_screen@i
  7615  146E  01F1               	clrf	delay_screen@i+1
  7616  146F                     l3166:	
  7617  146F  3001               	movlw	1
  7618  1470  07F0               	addwf	delay_screen@i,f
  7619  1471  1803               	skipnc
  7620  1472  0AF1               	incf	delay_screen@i+1,f
  7621  1473  3000               	movlw	0
  7622  1474  07F1               	addwf	delay_screen@i+1,f
  7623  1475  0871               	movf	delay_screen@i+1,w
  7624  1476  3A80               	xorlw	128
  7625  1477  00FF               	movwf	127
  7626  1478  3080               	movlw	128
  7627  1479  027F               	subwf	127,w
  7628  147A  1D03               	skipz
  7629  147B  2C7E               	goto	u2055
  7630  147C  3005               	movlw	5
  7631  147D  0270               	subwf	delay_screen@i,w
  7632  147E                     u2055:	
  7633  147E  1803               	btfsc	3,0
  7634  147F  0008               	return
  7635  1480  2C6F               	goto	l3166
  7636  1481                     __end_of_delay_screen:	
  7637                           
  7638                           	psect	text33
  7639  141A                     __ptext33:	
  7640 ;; *************** function _time_date_hex_terminator *****************
  7641 ;; Defined at:
  7642 ;;		line 87 in file "math_src.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  val             1    wreg     unsigned char 
  7645 ;;  limiter         1    0[COMMON] unsigned char 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  val             1    3[COMMON] unsigned char 
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      unsigned char 
  7650 ;; Registers used:
  7651 ;;		wreg, status,2
  7652 ;; Tracked objects:
  7653 ;;		On entry : 300/0
  7654 ;;		On exit  : 300/0
  7655 ;;		Unchanged: 300/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7657 ;;      Params:         1       0       0       0       0
  7658 ;;      Locals:         1       0       0       0       0
  7659 ;;      Temps:          2       0       0       0       0
  7660 ;;      Totals:         4       0       0       0       0
  7661 ;;Total ram usage:        4 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; This function calls:
  7664 ;;		Nothing
  7665 ;; This function is called by:
  7666 ;;		_time_settings
  7667 ;;		_date_settings
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _time_date_hex_terminator
  7673  141A                     _time_date_hex_terminator:	
  7674                           
  7675                           ;incstack = 0
  7676                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7677                           ;time_date_hex_terminator@val stored from wreg
  7678  141A  00F3               	movwf	time_date_hex_terminator@val
  7679                           
  7680                           ;math_src.c: 88:     if((val + '0') == limiter){
  7681  141B  0873               	movf	time_date_hex_terminator@val,w
  7682  141C  3E30               	addlw	48
  7683  141D  00F1               	movwf	??_time_date_hex_terminator
  7684  141E  3000               	movlw	0
  7685  141F  1803               	skipnc
  7686  1420  3001               	movlw	1
  7687  1421  00F2               	movwf	??_time_date_hex_terminator+1
  7688  1422  0870               	movf	time_date_hex_terminator@limiter,w
  7689  1423  0671               	xorwf	??_time_date_hex_terminator,w
  7690  1424  0472               	iorwf	??_time_date_hex_terminator+1,w
  7691  1425  1903               	btfsc	3,2
  7692                           
  7693                           ;math_src.c: 89:     val = 0x00;
  7694  1426  01F3               	clrf	time_date_hex_terminator@val
  7695                           
  7696                           ;math_src.c: 91:     return val;
  7697  1427  0873               	movf	time_date_hex_terminator@val,w
  7698  1428  0008               	return
  7699  1429                     __end_of_time_date_hex_terminator:	
  7700                           
  7701                           	psect	text34
  7702  0ABB                     __ptext34:	
  7703 ;; *************** function _time_date_delimiter *****************
  7704 ;; Defined at:
  7705 ;;		line 28 in file "math_src.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  val             1    wreg     unsigned char 
  7708 ;;  hex             1    0[COMMON] unsigned char 
  7709 ;;  limiter         1    1[COMMON] unsigned char 
  7710 ;;  type            2    2[COMMON] int 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  val             1    6[COMMON] unsigned char 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  1    wreg      unsigned char 
  7715 ;; Registers used:
  7716 ;;		wreg, status,2, status,0
  7717 ;; Tracked objects:
  7718 ;;		On entry : 300/0
  7719 ;;		On exit  : 300/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7722 ;;      Params:         4       0       0       0       0
  7723 ;;      Locals:         1       0       0       0       0
  7724 ;;      Temps:          2       0       0       0       0
  7725 ;;      Totals:         7       0       0       0       0
  7726 ;;Total ram usage:        7 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; This function calls:
  7729 ;;		Nothing
  7730 ;; This function is called by:
  7731 ;;		_time_settings
  7732 ;;		_date_settings
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _time_date_delimiter
  7738  0ABB                     _time_date_delimiter:	
  7739                           
  7740                           ;incstack = 0
  7741                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7742                           ;time_date_delimiter@val stored from wreg
  7743  0ABB  00F6               	movwf	time_date_delimiter@val
  7744                           
  7745                           ;math_src.c: 29:     if((val + '0') == limiter){
  7746  0ABC  0876               	movf	time_date_delimiter@val,w
  7747  0ABD  3E30               	addlw	48
  7748  0ABE  00F4               	movwf	??_time_date_delimiter
  7749  0ABF  3000               	movlw	0
  7750  0AC0  1803               	skipnc
  7751  0AC1  3001               	movlw	1
  7752  0AC2  00F5               	movwf	??_time_date_delimiter+1
  7753  0AC3  0871               	movf	time_date_delimiter@limiter,w
  7754  0AC4  0674               	xorwf	??_time_date_delimiter,w
  7755  0AC5  0475               	iorwf	??_time_date_delimiter+1,w
  7756  0AC6  1D03               	skipz
  7757  0AC7  2C10               	goto	l3572
  7758                           
  7759                           ;math_src.c: 30:     val = hex;
  7760  0AC8  0870               	movf	time_date_delimiter@hex,w
  7761  0AC9  00F4               	movwf	??_time_date_delimiter
  7762  0ACA  0874               	movf	??_time_date_delimiter,w
  7763  0ACB  00F6               	movwf	time_date_delimiter@val
  7764                           
  7765                           ;math_src.c: 31:     stats=0;
  7766  0ACC  01AB               	clrf	_stats
  7767  0ACD  01AC               	clrf	_stats+1
  7768                           
  7769                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7770  0ACE  3039               	movlw	57
  7771  0ACF  0671               	xorwf	time_date_delimiter@limiter,w
  7772  0AD0  1D03               	btfss	3,2
  7773  0AD1  2ADA               	goto	l3426
  7774  0AD2  0372               	decf	time_date_delimiter@type,w
  7775  0AD3  0473               	iorwf	time_date_delimiter@type+1,w
  7776  0AD4  1D03               	btfss	3,2
  7777  0AD5  2ADA               	goto	l3426
  7778                           
  7779                           ;math_src.c: 33:         prev_hex= 0x09;
  7780  0AD6  3009               	movlw	9
  7781  0AD7  00F4               	movwf	??_time_date_delimiter
  7782  0AD8  0874               	movf	??_time_date_delimiter,w
  7783  0AD9  00C4               	movwf	_prev_hex
  7784  0ADA                     l3426:	
  7785                           
  7786                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7787  0ADA  304A               	movlw	74
  7788  0ADB  0671               	xorwf	time_date_delimiter@limiter,w
  7789  0ADC  1D03               	btfss	3,2
  7790  0ADD  2AE6               	goto	l3432
  7791  0ADE  0372               	decf	time_date_delimiter@type,w
  7792  0ADF  0473               	iorwf	time_date_delimiter@type+1,w
  7793  0AE0  1D03               	btfss	3,2
  7794  0AE1  2AE6               	goto	l3432
  7795                           
  7796                           ;math_src.c: 35:         prev_hex = 0x19;
  7797  0AE2  3019               	movlw	25
  7798  0AE3  00F4               	movwf	??_time_date_delimiter
  7799  0AE4  0874               	movf	??_time_date_delimiter,w
  7800  0AE5  00C4               	movwf	_prev_hex
  7801  0AE6                     l3432:	
  7802                           
  7803                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7804  0AE6  3059               	movlw	89
  7805  0AE7  0671               	xorwf	time_date_delimiter@limiter,w
  7806  0AE8  1D03               	btfss	3,2
  7807  0AE9  2AF2               	goto	l3438
  7808  0AEA  0372               	decf	time_date_delimiter@type,w
  7809  0AEB  0473               	iorwf	time_date_delimiter@type+1,w
  7810  0AEC  1D03               	btfss	3,2
  7811  0AED  2AF2               	goto	l3438
  7812                           
  7813                           ;math_src.c: 37:         prev_hex = 0x29;
  7814  0AEE  3029               	movlw	41
  7815  0AEF  00F4               	movwf	??_time_date_delimiter
  7816  0AF0  0874               	movf	??_time_date_delimiter,w
  7817  0AF1  00C4               	movwf	_prev_hex
  7818  0AF2                     l3438:	
  7819                           
  7820                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7821  0AF2  306A               	movlw	106
  7822  0AF3  0671               	xorwf	time_date_delimiter@limiter,w
  7823  0AF4  1D03               	btfss	3,2
  7824  0AF5  2AFE               	goto	l3444
  7825  0AF6  0372               	decf	time_date_delimiter@type,w
  7826  0AF7  0473               	iorwf	time_date_delimiter@type+1,w
  7827  0AF8  1D03               	btfss	3,2
  7828  0AF9  2AFE               	goto	l3444
  7829                           
  7830                           ;math_src.c: 39:         prev_hex =0x39;
  7831  0AFA  3039               	movlw	57
  7832  0AFB  00F4               	movwf	??_time_date_delimiter
  7833  0AFC  0874               	movf	??_time_date_delimiter,w
  7834  0AFD  00C4               	movwf	_prev_hex
  7835  0AFE                     l3444:	
  7836                           
  7837                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7838  0AFE  307A               	movlw	122
  7839  0AFF  0671               	xorwf	time_date_delimiter@limiter,w
  7840  0B00  1D03               	btfss	3,2
  7841  0B01  2B0A               	goto	l3450
  7842  0B02  0372               	decf	time_date_delimiter@type,w
  7843  0B03  0473               	iorwf	time_date_delimiter@type+1,w
  7844  0B04  1D03               	btfss	3,2
  7845  0B05  2B0A               	goto	l3450
  7846                           
  7847                           ;math_src.c: 41:         prev_hex = 0x49;
  7848  0B06  3049               	movlw	73
  7849  0B07  00F4               	movwf	??_time_date_delimiter
  7850  0B08  0874               	movf	??_time_date_delimiter,w
  7851  0B09  00C4               	movwf	_prev_hex
  7852  0B0A                     l3450:	
  7853                           
  7854                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7855  0B0A  3039               	movlw	57
  7856  0B0B  0671               	xorwf	time_date_delimiter@limiter,w
  7857  0B0C  1D03               	btfss	3,2
  7858  0B0D  2B17               	goto	l3456
  7859  0B0E  3002               	movlw	2
  7860  0B0F  0672               	xorwf	time_date_delimiter@type,w
  7861  0B10  0473               	iorwf	time_date_delimiter@type+1,w
  7862  0B11  1D03               	btfss	3,2
  7863  0B12  2B17               	goto	l3456
  7864                           
  7865                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7866  0B13  3009               	movlw	9
  7867  0B14  00F4               	movwf	??_time_date_delimiter
  7868  0B15  0874               	movf	??_time_date_delimiter,w
  7869  0B16  00C3               	movwf	_prev_hex_day
  7870  0B17                     l3456:	
  7871                           
  7872                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7873  0B17  304A               	movlw	74
  7874  0B18  0671               	xorwf	time_date_delimiter@limiter,w
  7875  0B19  1D03               	btfss	3,2
  7876  0B1A  2B24               	goto	l3462
  7877  0B1B  3002               	movlw	2
  7878  0B1C  0672               	xorwf	time_date_delimiter@type,w
  7879  0B1D  0473               	iorwf	time_date_delimiter@type+1,w
  7880  0B1E  1D03               	btfss	3,2
  7881  0B1F  2B24               	goto	l3462
  7882                           
  7883                           ;math_src.c: 45:         prev_hex_day = 0x19;
  7884  0B20  3019               	movlw	25
  7885  0B21  00F4               	movwf	??_time_date_delimiter
  7886  0B22  0874               	movf	??_time_date_delimiter,w
  7887  0B23  00C3               	movwf	_prev_hex_day
  7888  0B24                     l3462:	
  7889                           
  7890                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  7891  0B24  3059               	movlw	89
  7892  0B25  0671               	xorwf	time_date_delimiter@limiter,w
  7893  0B26  1D03               	btfss	3,2
  7894  0B27  2B31               	goto	l3468
  7895  0B28  3002               	movlw	2
  7896  0B29  0672               	xorwf	time_date_delimiter@type,w
  7897  0B2A  0473               	iorwf	time_date_delimiter@type+1,w
  7898  0B2B  1D03               	btfss	3,2
  7899  0B2C  2B31               	goto	l3468
  7900                           
  7901                           ;math_src.c: 47:         prev_hex_day = 0x29;
  7902  0B2D  3029               	movlw	41
  7903  0B2E  00F4               	movwf	??_time_date_delimiter
  7904  0B2F  0874               	movf	??_time_date_delimiter,w
  7905  0B30  00C3               	movwf	_prev_hex_day
  7906  0B31                     l3468:	
  7907                           
  7908                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  7909  0B31  306A               	movlw	106
  7910  0B32  0671               	xorwf	time_date_delimiter@limiter,w
  7911  0B33  1D03               	btfss	3,2
  7912  0B34  2B3E               	goto	l3474
  7913  0B35  3002               	movlw	2
  7914  0B36  0672               	xorwf	time_date_delimiter@type,w
  7915  0B37  0473               	iorwf	time_date_delimiter@type+1,w
  7916  0B38  1D03               	btfss	3,2
  7917  0B39  2B3E               	goto	l3474
  7918                           
  7919                           ;math_src.c: 49:         prev_hex_day =0x39;
  7920  0B3A  3039               	movlw	57
  7921  0B3B  00F4               	movwf	??_time_date_delimiter
  7922  0B3C  0874               	movf	??_time_date_delimiter,w
  7923  0B3D  00C3               	movwf	_prev_hex_day
  7924  0B3E                     l3474:	
  7925                           
  7926                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  7927  0B3E  307A               	movlw	122
  7928  0B3F  0671               	xorwf	time_date_delimiter@limiter,w
  7929  0B40  1D03               	btfss	3,2
  7930  0B41  2B4B               	goto	l3480
  7931  0B42  3002               	movlw	2
  7932  0B43  0672               	xorwf	time_date_delimiter@type,w
  7933  0B44  0473               	iorwf	time_date_delimiter@type+1,w
  7934  0B45  1D03               	btfss	3,2
  7935  0B46  2B4B               	goto	l3480
  7936                           
  7937                           ;math_src.c: 51:         prev_hex_day = 0x49;
  7938  0B47  3049               	movlw	73
  7939  0B48  00F4               	movwf	??_time_date_delimiter
  7940  0B49  0874               	movf	??_time_date_delimiter,w
  7941  0B4A  00C3               	movwf	_prev_hex_day
  7942  0B4B                     l3480:	
  7943                           
  7944                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  7945  0B4B  3039               	movlw	57
  7946  0B4C  0671               	xorwf	time_date_delimiter@limiter,w
  7947  0B4D  1D03               	btfss	3,2
  7948  0B4E  2B58               	goto	l3486
  7949  0B4F  3003               	movlw	3
  7950  0B50  0672               	xorwf	time_date_delimiter@type,w
  7951  0B51  0473               	iorwf	time_date_delimiter@type+1,w
  7952  0B52  1D03               	btfss	3,2
  7953  0B53  2B58               	goto	l3486
  7954                           
  7955                           ;math_src.c: 53:         prev_hex_year= 0x09;
  7956  0B54  3009               	movlw	9
  7957  0B55  00F4               	movwf	??_time_date_delimiter
  7958  0B56  0874               	movf	??_time_date_delimiter,w
  7959  0B57  00C2               	movwf	_prev_hex_year
  7960  0B58                     l3486:	
  7961                           
  7962                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  7963  0B58  304A               	movlw	74
  7964  0B59  0671               	xorwf	time_date_delimiter@limiter,w
  7965  0B5A  1D03               	btfss	3,2
  7966  0B5B  2B65               	goto	l3492
  7967  0B5C  3003               	movlw	3
  7968  0B5D  0672               	xorwf	time_date_delimiter@type,w
  7969  0B5E  0473               	iorwf	time_date_delimiter@type+1,w
  7970  0B5F  1D03               	btfss	3,2
  7971  0B60  2B65               	goto	l3492
  7972                           
  7973                           ;math_src.c: 55:         prev_hex_year = 0x19;
  7974  0B61  3019               	movlw	25
  7975  0B62  00F4               	movwf	??_time_date_delimiter
  7976  0B63  0874               	movf	??_time_date_delimiter,w
  7977  0B64  00C2               	movwf	_prev_hex_year
  7978  0B65                     l3492:	
  7979                           
  7980                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  7981  0B65  3059               	movlw	89
  7982  0B66  0671               	xorwf	time_date_delimiter@limiter,w
  7983  0B67  1D03               	btfss	3,2
  7984  0B68  2B72               	goto	l3498
  7985  0B69  3003               	movlw	3
  7986  0B6A  0672               	xorwf	time_date_delimiter@type,w
  7987  0B6B  0473               	iorwf	time_date_delimiter@type+1,w
  7988  0B6C  1D03               	btfss	3,2
  7989  0B6D  2B72               	goto	l3498
  7990                           
  7991                           ;math_src.c: 57:         prev_hex_year = 0x29;
  7992  0B6E  3029               	movlw	41
  7993  0B6F  00F4               	movwf	??_time_date_delimiter
  7994  0B70  0874               	movf	??_time_date_delimiter,w
  7995  0B71  00C2               	movwf	_prev_hex_year
  7996  0B72                     l3498:	
  7997                           
  7998                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  7999  0B72  306A               	movlw	106
  8000  0B73  0671               	xorwf	time_date_delimiter@limiter,w
  8001  0B74  1D03               	btfss	3,2
  8002  0B75  2B7F               	goto	l3504
  8003  0B76  3003               	movlw	3
  8004  0B77  0672               	xorwf	time_date_delimiter@type,w
  8005  0B78  0473               	iorwf	time_date_delimiter@type+1,w
  8006  0B79  1D03               	btfss	3,2
  8007  0B7A  2B7F               	goto	l3504
  8008                           
  8009                           ;math_src.c: 59:         prev_hex_year =0x39;
  8010  0B7B  3039               	movlw	57
  8011  0B7C  00F4               	movwf	??_time_date_delimiter
  8012  0B7D  0874               	movf	??_time_date_delimiter,w
  8013  0B7E  00C2               	movwf	_prev_hex_year
  8014  0B7F                     l3504:	
  8015                           
  8016                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8017  0B7F  307A               	movlw	122
  8018  0B80  0671               	xorwf	time_date_delimiter@limiter,w
  8019  0B81  1D03               	btfss	3,2
  8020  0B82  2B8C               	goto	l3510
  8021  0B83  3003               	movlw	3
  8022  0B84  0672               	xorwf	time_date_delimiter@type,w
  8023  0B85  0473               	iorwf	time_date_delimiter@type+1,w
  8024  0B86  1D03               	btfss	3,2
  8025  0B87  2B8C               	goto	l3510
  8026                           
  8027                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8028  0B88  3049               	movlw	73
  8029  0B89  00F4               	movwf	??_time_date_delimiter
  8030  0B8A  0874               	movf	??_time_date_delimiter,w
  8031  0B8B  00C2               	movwf	_prev_hex_year
  8032  0B8C                     l3510:	
  8033                           
  8034                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8035  0B8C  3039               	movlw	57
  8036  0B8D  0671               	xorwf	time_date_delimiter@limiter,w
  8037  0B8E  1D03               	btfss	3,2
  8038  0B8F  2B99               	goto	l3516
  8039  0B90  3004               	movlw	4
  8040  0B91  0672               	xorwf	time_date_delimiter@type,w
  8041  0B92  0473               	iorwf	time_date_delimiter@type+1,w
  8042  0B93  1D03               	btfss	3,2
  8043  0B94  2B99               	goto	l3516
  8044                           
  8045                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8046  0B95  3009               	movlw	9
  8047  0B96  00F4               	movwf	??_time_date_delimiter
  8048  0B97  0874               	movf	??_time_date_delimiter,w
  8049  0B98  00C1               	movwf	_prev_hex_hours
  8050  0B99                     l3516:	
  8051                           
  8052                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8053  0B99  304A               	movlw	74
  8054  0B9A  0671               	xorwf	time_date_delimiter@limiter,w
  8055  0B9B  1D03               	btfss	3,2
  8056  0B9C  2BA6               	goto	l3522
  8057  0B9D  3004               	movlw	4
  8058  0B9E  0672               	xorwf	time_date_delimiter@type,w
  8059  0B9F  0473               	iorwf	time_date_delimiter@type+1,w
  8060  0BA0  1D03               	btfss	3,2
  8061  0BA1  2BA6               	goto	l3522
  8062                           
  8063                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8064  0BA2  3019               	movlw	25
  8065  0BA3  00F4               	movwf	??_time_date_delimiter
  8066  0BA4  0874               	movf	??_time_date_delimiter,w
  8067  0BA5  00C1               	movwf	_prev_hex_hours
  8068  0BA6                     l3522:	
  8069                           
  8070                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8071  0BA6  3059               	movlw	89
  8072  0BA7  0671               	xorwf	time_date_delimiter@limiter,w
  8073  0BA8  1D03               	btfss	3,2
  8074  0BA9  2BB3               	goto	l3528
  8075  0BAA  3004               	movlw	4
  8076  0BAB  0672               	xorwf	time_date_delimiter@type,w
  8077  0BAC  0473               	iorwf	time_date_delimiter@type+1,w
  8078  0BAD  1D03               	btfss	3,2
  8079  0BAE  2BB3               	goto	l3528
  8080                           
  8081                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8082  0BAF  3029               	movlw	41
  8083  0BB0  00F4               	movwf	??_time_date_delimiter
  8084  0BB1  0874               	movf	??_time_date_delimiter,w
  8085  0BB2  00C1               	movwf	_prev_hex_hours
  8086  0BB3                     l3528:	
  8087                           
  8088                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8089  0BB3  306A               	movlw	106
  8090  0BB4  0671               	xorwf	time_date_delimiter@limiter,w
  8091  0BB5  1D03               	btfss	3,2
  8092  0BB6  2BC0               	goto	l3534
  8093  0BB7  3004               	movlw	4
  8094  0BB8  0672               	xorwf	time_date_delimiter@type,w
  8095  0BB9  0473               	iorwf	time_date_delimiter@type+1,w
  8096  0BBA  1D03               	btfss	3,2
  8097  0BBB  2BC0               	goto	l3534
  8098                           
  8099                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8100  0BBC  3039               	movlw	57
  8101  0BBD  00F4               	movwf	??_time_date_delimiter
  8102  0BBE  0874               	movf	??_time_date_delimiter,w
  8103  0BBF  00C1               	movwf	_prev_hex_hours
  8104  0BC0                     l3534:	
  8105                           
  8106                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8107  0BC0  307A               	movlw	122
  8108  0BC1  0671               	xorwf	time_date_delimiter@limiter,w
  8109  0BC2  1D03               	btfss	3,2
  8110  0BC3  2BCD               	goto	l3540
  8111  0BC4  3004               	movlw	4
  8112  0BC5  0672               	xorwf	time_date_delimiter@type,w
  8113  0BC6  0473               	iorwf	time_date_delimiter@type+1,w
  8114  0BC7  1D03               	btfss	3,2
  8115  0BC8  2BCD               	goto	l3540
  8116                           
  8117                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8118  0BC9  3049               	movlw	73
  8119  0BCA  00F4               	movwf	??_time_date_delimiter
  8120  0BCB  0874               	movf	??_time_date_delimiter,w
  8121  0BCC  00C1               	movwf	_prev_hex_hours
  8122  0BCD                     l3540:	
  8123                           
  8124                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8125  0BCD  3039               	movlw	57
  8126  0BCE  0671               	xorwf	time_date_delimiter@limiter,w
  8127  0BCF  1D03               	btfss	3,2
  8128  0BD0  2BDA               	goto	l3546
  8129  0BD1  3005               	movlw	5
  8130  0BD2  0672               	xorwf	time_date_delimiter@type,w
  8131  0BD3  0473               	iorwf	time_date_delimiter@type+1,w
  8132  0BD4  1D03               	btfss	3,2
  8133  0BD5  2BDA               	goto	l3546
  8134                           
  8135                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8136  0BD6  3009               	movlw	9
  8137  0BD7  00F4               	movwf	??_time_date_delimiter
  8138  0BD8  0874               	movf	??_time_date_delimiter,w
  8139  0BD9  00C0               	movwf	_prev_hex_mins
  8140  0BDA                     l3546:	
  8141                           
  8142                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8143  0BDA  304A               	movlw	74
  8144  0BDB  0671               	xorwf	time_date_delimiter@limiter,w
  8145  0BDC  1D03               	btfss	3,2
  8146  0BDD  2BE7               	goto	l3552
  8147  0BDE  3005               	movlw	5
  8148  0BDF  0672               	xorwf	time_date_delimiter@type,w
  8149  0BE0  0473               	iorwf	time_date_delimiter@type+1,w
  8150  0BE1  1D03               	btfss	3,2
  8151  0BE2  2BE7               	goto	l3552
  8152                           
  8153                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8154  0BE3  3019               	movlw	25
  8155  0BE4  00F4               	movwf	??_time_date_delimiter
  8156  0BE5  0874               	movf	??_time_date_delimiter,w
  8157  0BE6  00C0               	movwf	_prev_hex_mins
  8158  0BE7                     l3552:	
  8159                           
  8160                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8161  0BE7  3059               	movlw	89
  8162  0BE8  0671               	xorwf	time_date_delimiter@limiter,w
  8163  0BE9  1D03               	btfss	3,2
  8164  0BEA  2BF4               	goto	l3558
  8165  0BEB  3005               	movlw	5
  8166  0BEC  0672               	xorwf	time_date_delimiter@type,w
  8167  0BED  0473               	iorwf	time_date_delimiter@type+1,w
  8168  0BEE  1D03               	btfss	3,2
  8169  0BEF  2BF4               	goto	l3558
  8170                           
  8171                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8172  0BF0  3029               	movlw	41
  8173  0BF1  00F4               	movwf	??_time_date_delimiter
  8174  0BF2  0874               	movf	??_time_date_delimiter,w
  8175  0BF3  00C0               	movwf	_prev_hex_mins
  8176  0BF4                     l3558:	
  8177                           
  8178                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8179  0BF4  306A               	movlw	106
  8180  0BF5  0671               	xorwf	time_date_delimiter@limiter,w
  8181  0BF6  1D03               	btfss	3,2
  8182  0BF7  2C01               	goto	l3564
  8183  0BF8  3005               	movlw	5
  8184  0BF9  0672               	xorwf	time_date_delimiter@type,w
  8185  0BFA  0473               	iorwf	time_date_delimiter@type+1,w
  8186  0BFB  1D03               	btfss	3,2
  8187  0BFC  2C01               	goto	l3564
  8188                           
  8189                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8190  0BFD  3039               	movlw	57
  8191  0BFE  00F4               	movwf	??_time_date_delimiter
  8192  0BFF  0874               	movf	??_time_date_delimiter,w
  8193  0C00  00C0               	movwf	_prev_hex_mins
  8194  0C01                     l3564:	
  8195                           
  8196                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8197  0C01  307A               	movlw	122
  8198  0C02  0671               	xorwf	time_date_delimiter@limiter,w
  8199  0C03  1D03               	btfss	3,2
  8200  0C04  2C0E               	goto	l3570
  8201  0C05  3005               	movlw	5
  8202  0C06  0672               	xorwf	time_date_delimiter@type,w
  8203  0C07  0473               	iorwf	time_date_delimiter@type+1,w
  8204  0C08  1D03               	btfss	3,2
  8205  0C09  2C0E               	goto	l3570
  8206                           
  8207                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8208  0C0A  3049               	movlw	73
  8209  0C0B  00F4               	movwf	??_time_date_delimiter
  8210  0C0C  0874               	movf	??_time_date_delimiter,w
  8211  0C0D  00C0               	movwf	_prev_hex_mins
  8212  0C0E                     l3570:	
  8213                           
  8214                           ;math_src.c: 82:     val--;
  8215  0C0E  3001               	movlw	1
  8216  0C0F  02F6               	subwf	time_date_delimiter@val,f
  8217  0C10                     l3572:	
  8218                           
  8219                           ;math_src.c: 84:     return val;
  8220  0C10  0876               	movf	time_date_delimiter@val,w
  8221  0C11  0008               	return
  8222  0C12                     __end_of_time_date_delimiter:	
  8223                           
  8224                           	psect	text35
  8225  15C7                     __ptext35:	
  8226 ;; *************** function _set_time *****************
  8227 ;; Defined at:
  8228 ;;		line 12 in file "clock_src.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  i               2    5[COMMON] int 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 300/0
  8239 ;;		On exit  : 300/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8242 ;;      Params:         0       0       0       0       0
  8243 ;;      Locals:         2       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0
  8245 ;;      Totals:         2       0       0       0       0
  8246 ;;Total ram usage:        2 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    1
  8249 ;; This function calls:
  8250 ;;		_time_write_1
  8251 ;; This function is called by:
  8252 ;;		_main
  8253 ;;		_time_settings
  8254 ;;		_date_settings
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _set_time
  8260  15C7                     _set_time:	
  8261                           
  8262                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8263                           
  8264                           ;incstack = 0
  8265                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8266  15C7  1686               	bsf	6,5	;volatile
  8267                           
  8268                           ;clock_src.c: 16:    time_write_1(0xbe);
  8269  15C8  30BE               	movlw	190
  8270  15C9  160A  118A  25A1  160A  118A  	fcall	_time_write_1
  8271                           
  8272                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8273  15CE  01F5               	clrf	set_time@i
  8274  15CF  01F6               	clrf	set_time@i+1
  8275  15D0                     l3202:	
  8276                           
  8277                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8278  15D0  0875               	movf	set_time@i,w
  8279  15D1  3EA8               	addlw	(low (_table| 0))& (0+255)
  8280  15D2  0084               	movwf	4
  8281  15D3  1383               	bcf	3,7	;select IRP bank1
  8282  15D4  0800               	movf	0,w
  8283  15D5  160A  118A  25A1  160A  118A  	fcall	_time_write_1
  8284                           
  8285                           ;clock_src.c: 20:      }
  8286  15DA  3001               	movlw	1
  8287  15DB  07F5               	addwf	set_time@i,f
  8288  15DC  1803               	skipnc
  8289  15DD  0AF6               	incf	set_time@i+1,f
  8290  15DE  3000               	movlw	0
  8291  15DF  07F6               	addwf	set_time@i+1,f
  8292  15E0  0876               	movf	set_time@i+1,w
  8293  15E1  3A80               	xorlw	128
  8294  15E2  00FF               	movwf	127
  8295  15E3  3080               	movlw	128
  8296  15E4  027F               	subwf	127,w
  8297  15E5  1D03               	skipz
  8298  15E6  2DE9               	goto	u2105
  8299  15E7  3008               	movlw	8
  8300  15E8  0275               	subwf	set_time@i,w
  8301  15E9                     u2105:	
  8302  15E9  1C03               	skipc
  8303  15EA  2DD0               	goto	l3202
  8304                           
  8305                           ;clock_src.c: 21:    RB5=0;
  8306  15EB  1283               	bcf	3,5	;RP0=0, select bank0
  8307  15EC  1303               	bcf	3,6	;RP1=0, select bank0
  8308  15ED  1286               	bcf	6,5	;volatile
  8309  15EE  0008               	return
  8310  15EF                     __end_of_set_time:	
  8311                           
  8312                           	psect	text36
  8313  15A1                     __ptext36:	
  8314 ;; *************** function _time_write_1 *****************
  8315 ;; Defined at:
  8316 ;;		line 114 in file "clock_src.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  time_tx         1    wreg     unsigned char 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  time_tx         1    4[COMMON] unsigned char 
  8321 ;;  j               2    2[COMMON] int 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      void 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2, status,0, btemp+1
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 300/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8331 ;;      Params:         0       0       0       0       0
  8332 ;;      Locals:         3       0       0       0       0
  8333 ;;      Temps:          2       0       0       0       0
  8334 ;;      Totals:         5       0       0       0       0
  8335 ;;Total ram usage:        5 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_ds1302_init
  8341 ;;		_set_time
  8342 ;;		_get_time
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           
  8347                           ;psect for function _time_write_1
  8348  15A1                     _time_write_1:	
  8349                           
  8350                           ;incstack = 0
  8351                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8352                           ;time_write_1@time_tx stored from wreg
  8353  15A1  00F4               	movwf	time_write_1@time_tx
  8354                           
  8355                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8356  15A2  01F2               	clrf	time_write_1@j
  8357  15A3  01F3               	clrf	time_write_1@j+1
  8358  15A4                     l437:	
  8359                           
  8360                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8361  15A4  1283               	bcf	3,5	;RP0=0, select bank0
  8362  15A5  1303               	bcf	3,6	;RP1=0, select bank0
  8363  15A6  1206               	bcf	6,4	;volatile
  8364                           
  8365                           ;clock_src.c: 120:         RB0=0;
  8366  15A7  1006               	bcf	6,0	;volatile
  8367                           
  8368                           ;clock_src.c: 121:         if(time_tx&0x01)
  8369  15A8  1874               	btfsc	time_write_1@time_tx,0
  8370                           
  8371                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8372  15A9  1606               	bsf	6,4	;volatile
  8373                           
  8374                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8375  15AA  0874               	movf	time_write_1@time_tx,w
  8376  15AB  00F0               	movwf	??_time_write_1
  8377  15AC  1003               	clrc
  8378  15AD  0C70               	rrf	??_time_write_1,w
  8379  15AE  00F1               	movwf	??_time_write_1+1
  8380  15AF  0871               	movf	??_time_write_1+1,w
  8381  15B0  00F4               	movwf	time_write_1@time_tx
  8382                           
  8383                           ;clock_src.c: 126:         RB0=1;
  8384  15B1  1406               	bsf	6,0	;volatile
  8385                           
  8386                           ;clock_src.c: 127:     }
  8387  15B2  3001               	movlw	1
  8388  15B3  07F2               	addwf	time_write_1@j,f
  8389  15B4  1803               	skipnc
  8390  15B5  0AF3               	incf	time_write_1@j+1,f
  8391  15B6  3000               	movlw	0
  8392  15B7  07F3               	addwf	time_write_1@j+1,f
  8393  15B8  0873               	movf	time_write_1@j+1,w
  8394  15B9  3A80               	xorlw	128
  8395  15BA  00FF               	movwf	127
  8396  15BB  3080               	movlw	128
  8397  15BC  027F               	subwf	127,w
  8398  15BD  1D03               	skipz
  8399  15BE  2DC1               	goto	u2095
  8400  15BF  3008               	movlw	8
  8401  15C0  0272               	subwf	time_write_1@j,w
  8402  15C1                     u2095:	
  8403  15C1  1C03               	skipc
  8404  15C2  2DA4               	goto	l437
  8405                           
  8406                           ;clock_src.c: 128:       RB0=0;
  8407  15C3  1283               	bcf	3,5	;RP0=0, select bank0
  8408  15C4  1303               	bcf	3,6	;RP1=0, select bank0
  8409  15C5  1006               	bcf	6,0	;volatile
  8410  15C6  0008               	return
  8411  15C7                     __end_of_time_write_1:	
  8412                           
  8413                           	psect	text37
  8414  1559                     __ptext37:	
  8415 ;; *************** function _incrementor *****************
  8416 ;; Defined at:
  8417 ;;		line 10 in file "math_src.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  upper_val       2    0[BANK0 ] int 
  8420 ;;  lower_val       2    2[BANK0 ] int 
  8421 ;;  z               1    4[BANK0 ] unsigned char 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      unsigned char 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0, pclath, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 300/0
  8430 ;;		On exit  : 300/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8433 ;;      Params:         0       5       0       0       0
  8434 ;;      Locals:         0       0       0       0       0
  8435 ;;      Temps:          2       0       0       0       0
  8436 ;;      Totals:         2       5       0       0       0
  8437 ;;Total ram usage:        7 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    2
  8440 ;; This function calls:
  8441 ;;		_modulus_func
  8442 ;; This function is called by:
  8443 ;;		_thermometer_threshhold_settings
  8444 ;;		_time_settings
  8445 ;;		_date_settings
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _incrementor
  8451  1559                     _incrementor:	
  8452                           
  8453                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8454                           
  8455                           ;incstack = 0
  8456                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8457  1559  0861               	movf	incrementor@lower_val,w
  8458  155A  3E30               	addlw	48
  8459  155B  00FB               	movwf	??_incrementor
  8460  155C  0862               	movf	incrementor@lower_val+1,w
  8461  155D  1803               	skipnc
  8462  155E  3E01               	addlw	1
  8463  155F  3E00               	addlw	0
  8464  1560  00FC               	movwf	??_incrementor+1
  8465  1561  0863               	movf	incrementor@z,w
  8466  1562  067B               	xorwf	??_incrementor,w
  8467  1563  047C               	iorwf	??_incrementor+1,w
  8468  1564  1D03               	skipz
  8469  1565  2D7B               	goto	l3392
  8470                           
  8471                           ;math_src.c: 12:      upper_val++;
  8472  1566  3001               	movlw	1
  8473  1567  07DF               	addwf	incrementor@upper_val,f
  8474  1568  1803               	skipnc
  8475  1569  0AE0               	incf	incrementor@upper_val+1,f
  8476  156A  3000               	movlw	0
  8477  156B  07E0               	addwf	incrementor@upper_val+1,f
  8478                           
  8479                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8480  156C  0860               	movf	incrementor@upper_val+1,w
  8481  156D  00F8               	movwf	modulus_func@x+1
  8482  156E  085F               	movf	incrementor@upper_val,w
  8483  156F  00F7               	movwf	modulus_func@x
  8484  1570  300A               	movlw	10
  8485  1571  00F9               	movwf	modulus_func@y
  8486  1572  3000               	movlw	0
  8487  1573  00FA               	movwf	modulus_func@y+1
  8488  1574  160A  118A  2438   	fcall	_modulus_func
  8489  1577  0878               	movf	?_modulus_func+1,w
  8490  1578  00E0               	movwf	incrementor@upper_val+1
  8491  1579  0877               	movf	?_modulus_func,w
  8492  157A  00DF               	movwf	incrementor@upper_val
  8493  157B                     l3392:	
  8494                           
  8495                           ;math_src.c: 15:      return upper_val;
  8496  157B  085F               	movf	incrementor@upper_val,w
  8497  157C  0008               	return
  8498  157D                     __end_of_incrementor:	
  8499                           
  8500                           	psect	text38
  8501  1438                     __ptext38:	
  8502 ;; *************** function _modulus_func *****************
  8503 ;; Defined at:
  8504 ;;		line 5 in file "math_src.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;  x               2    7[COMMON] int 
  8507 ;;  y               2    9[COMMON] int 
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  2    7[COMMON] int 
  8512 ;; Registers used:
  8513 ;;		wreg, status,2, status,0, pclath, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 300/0
  8516 ;;		On exit  : 300/0
  8517 ;;		Unchanged: 300/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8519 ;;      Params:         4       0       0       0       0
  8520 ;;      Locals:         0       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0
  8522 ;;      Totals:         4       0       0       0       0
  8523 ;;Total ram usage:        4 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    1
  8526 ;; This function calls:
  8527 ;;		___awmod
  8528 ;; This function is called by:
  8529 ;;		_main
  8530 ;;		_thermometer_threshhold_settings
  8531 ;;		_time_settings
  8532 ;;		_date_settings
  8533 ;;		_incrementor
  8534 ;;		_decrementor
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function _modulus_func
  8540  1438                     _modulus_func:	
  8541                           
  8542                           ;math_src.c: 6:     x = x % y;
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8546  1438  087A               	movf	modulus_func@y+1,w
  8547  1439  00F1               	movwf	___awmod@divisor+1
  8548  143A  0879               	movf	modulus_func@y,w
  8549  143B  00F0               	movwf	___awmod@divisor
  8550  143C  0878               	movf	modulus_func@x+1,w
  8551  143D  00F3               	movwf	___awmod@dividend+1
  8552  143E  0877               	movf	modulus_func@x,w
  8553  143F  00F2               	movwf	___awmod@dividend
  8554  1440  120A  118A  2026   	fcall	___awmod
  8555  1443  0871               	movf	?___awmod+1,w
  8556  1444  00F8               	movwf	modulus_func@x+1
  8557  1445  0870               	movf	?___awmod,w
  8558  1446  00F7               	movwf	modulus_func@x
  8559                           
  8560                           ;math_src.c: 7:     return x;
  8561  1447  0008               	return
  8562  1448                     __end_of_modulus_func:	
  8563                           
  8564                           	psect	text39
  8565  0026                     __ptext39:	
  8566 ;; *************** function ___awmod *****************
  8567 ;; Defined at:
  8568 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;  divisor         2    0[COMMON] int 
  8571 ;;  dividend        2    2[COMMON] int 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  sign            1    6[COMMON] unsigned char 
  8574 ;;  counter         1    5[COMMON] unsigned char 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  2    0[COMMON] int 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0
  8579 ;; Tracked objects:
  8580 ;;		On entry : 300/0
  8581 ;;		On exit  : 300/0
  8582 ;;		Unchanged: 300/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8584 ;;      Params:         4       0       0       0       0
  8585 ;;      Locals:         2       0       0       0       0
  8586 ;;      Temps:          1       0       0       0       0
  8587 ;;      Totals:         7       0       0       0       0
  8588 ;;Total ram usage:        7 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_modulus_func
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           
  8598                           ;psect for function ___awmod
  8599  0026                     ___awmod:	
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8603  0026  01F6               	clrf	___awmod@sign
  8604  0027  1FF3               	btfss	___awmod@dividend+1,7
  8605  0028  2830               	goto	l3124
  8606  0029  09F2               	comf	___awmod@dividend,f
  8607  002A  09F3               	comf	___awmod@dividend+1,f
  8608  002B  0AF2               	incf	___awmod@dividend,f
  8609  002C  1903               	skipnz
  8610  002D  0AF3               	incf	___awmod@dividend+1,f
  8611  002E  01F6               	clrf	___awmod@sign
  8612  002F  0AF6               	incf	___awmod@sign,f
  8613  0030                     l3124:	
  8614  0030  1FF1               	btfss	___awmod@divisor+1,7
  8615  0031  2837               	goto	l3128
  8616  0032  09F0               	comf	___awmod@divisor,f
  8617  0033  09F1               	comf	___awmod@divisor+1,f
  8618  0034  0AF0               	incf	___awmod@divisor,f
  8619  0035  1903               	skipnz
  8620  0036  0AF1               	incf	___awmod@divisor+1,f
  8621  0037                     l3128:	
  8622  0037  0870               	movf	___awmod@divisor,w
  8623  0038  0471               	iorwf	___awmod@divisor+1,w
  8624  0039  1903               	btfsc	3,2
  8625  003A  2864               	goto	l3146
  8626  003B  01F5               	clrf	___awmod@counter
  8627  003C  0AF5               	incf	___awmod@counter,f
  8628  003D                     l3136:	
  8629  003D  1BF1               	btfsc	___awmod@divisor+1,7
  8630  003E  284B               	goto	l3138
  8631  003F  3001               	movlw	1
  8632  0040                     u1995:	
  8633  0040  1003               	clrc
  8634  0041  0DF0               	rlf	___awmod@divisor,f
  8635  0042  0DF1               	rlf	___awmod@divisor+1,f
  8636  0043  3EFF               	addlw	-1
  8637  0044  1D03               	skipz
  8638  0045  2840               	goto	u1995
  8639  0046  3001               	movlw	1
  8640  0047  00F4               	movwf	??___awmod
  8641  0048  0874               	movf	??___awmod,w
  8642  0049  07F5               	addwf	___awmod@counter,f
  8643  004A  283D               	goto	l3136
  8644  004B                     l3138:	
  8645  004B  0871               	movf	___awmod@divisor+1,w
  8646  004C  0273               	subwf	___awmod@dividend+1,w
  8647  004D  1D03               	skipz
  8648  004E  2851               	goto	u2015
  8649  004F  0870               	movf	___awmod@divisor,w
  8650  0050  0272               	subwf	___awmod@dividend,w
  8651  0051                     u2015:	
  8652  0051  1C03               	skipc
  8653  0052  2859               	goto	l3142
  8654  0053  0870               	movf	___awmod@divisor,w
  8655  0054  02F2               	subwf	___awmod@dividend,f
  8656  0055  0871               	movf	___awmod@divisor+1,w
  8657  0056  1C03               	skipc
  8658  0057  03F3               	decf	___awmod@dividend+1,f
  8659  0058  02F3               	subwf	___awmod@dividend+1,f
  8660  0059                     l3142:	
  8661  0059  3001               	movlw	1
  8662  005A                     u2025:	
  8663  005A  1003               	clrc
  8664  005B  0CF1               	rrf	___awmod@divisor+1,f
  8665  005C  0CF0               	rrf	___awmod@divisor,f
  8666  005D  3EFF               	addlw	-1
  8667  005E  1D03               	skipz
  8668  005F  285A               	goto	u2025
  8669  0060  3001               	movlw	1
  8670  0061  02F5               	subwf	___awmod@counter,f
  8671  0062  1D03               	btfss	3,2
  8672  0063  284B               	goto	l3138
  8673  0064                     l3146:	
  8674  0064  0876               	movf	___awmod@sign,w
  8675  0065  1903               	btfsc	3,2
  8676  0066  286C               	goto	l3150
  8677  0067  09F2               	comf	___awmod@dividend,f
  8678  0068  09F3               	comf	___awmod@dividend+1,f
  8679  0069  0AF2               	incf	___awmod@dividend,f
  8680  006A  1903               	skipnz
  8681  006B  0AF3               	incf	___awmod@dividend+1,f
  8682  006C                     l3150:	
  8683  006C  0873               	movf	___awmod@dividend+1,w
  8684  006D  00F1               	movwf	?___awmod+1
  8685  006E  0872               	movf	___awmod@dividend,w
  8686  006F  00F0               	movwf	?___awmod
  8687  0070  0008               	return
  8688  0071                     __end_of___awmod:	
  8689                           
  8690                           	psect	text40
  8691  1459                     __ptext40:	
  8692 ;; *************** function _button_delay *****************
  8693 ;; Defined at:
  8694 ;;		line 606 in file "Button_src.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  i               2    0[COMMON] int 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      void 
  8701 ;; Registers used:
  8702 ;;		wreg, status,2, btemp+1
  8703 ;; Tracked objects:
  8704 ;;		On entry : 300/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8708 ;;      Params:         0       0       0       0       0
  8709 ;;      Locals:         2       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0
  8711 ;;      Totals:         2       0       0       0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; This function calls:
  8715 ;;		Nothing
  8716 ;; This function is called by:
  8717 ;;		_set_beep_threshhold
  8718 ;;		_thermometer_threshhold_settings
  8719 ;;		_time_settings
  8720 ;;		_date_settings
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           
  8725                           ;psect for function _button_delay
  8726  1459                     _button_delay:	
  8727                           
  8728                           ;Button_src.c: 607:     for(int i=0;i<10000;i++);
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8732  1459  01F0               	clrf	button_delay@i
  8733  145A  01F1               	clrf	button_delay@i+1
  8734  145B                     l3382:	
  8735  145B  3001               	movlw	1
  8736  145C  07F0               	addwf	button_delay@i,f
  8737  145D  1803               	skipnc
  8738  145E  0AF1               	incf	button_delay@i+1,f
  8739  145F  3000               	movlw	0
  8740  1460  07F1               	addwf	button_delay@i+1,f
  8741  1461  0871               	movf	button_delay@i+1,w
  8742  1462  3A80               	xorlw	128
  8743  1463  00FF               	movwf	127
  8744  1464  30A7               	movlw	167
  8745  1465  027F               	subwf	127,w
  8746  1466  1D03               	skipz
  8747  1467  2C6A               	goto	u2205
  8748  1468  3010               	movlw	16
  8749  1469  0270               	subwf	button_delay@i,w
  8750  146A                     u2205:	
  8751  146A  1803               	btfsc	3,0
  8752  146B  0008               	return
  8753  146C  2C5B               	goto	l3382
  8754  146D                     __end_of_button_delay:	
  8755  007E                     btemp	set	126	;btemp
  8756  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      80
    BANK1            80      0      16
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   44073
                                             10 BANK0      7     7      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     264
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     264
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      10       7       20.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6E      12        0.0%
ABS                  0      0      6E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 11 14:35:18 2019

                                       _a 0049                                         _b 0048  
                                       _c 0047                                         _p 0029  
                                       _t 0039                                         _w 0037  
                                       _x 0035                                         _y 0033  
                                       _z 0031                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005B                                        _TZ 005C  
                                      _ge 0059                                        _wd 003D  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 14D7  
                           ?_display_date 0070                                       l150 0D24  
                                     l334 140D                                       l443 164B  
                                     l700 0158                                       l437 15A4  
                                     l701 0160                                       l720 03FB  
                                     l712 0322                                       l721 0403  
                                     l732 04F5                                       l741 06AB  
                                     l733 04FD                                       l709 0295  
                                     l726 046F                                       l718 0395  
                                     l727 0477                                       l684 0FA0  
                                     l692 007D                                       l685 0FED  
                                     l694 00E3                                       l679 0F3D  
                                     l695 00EB                                       l893 17FC  
                                     l889 17BA                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005D  
                           ?_display_temp 0070                                       _TLV 005E  
                                     _shi 005A                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0064  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1252 1553                                      l3202 15D0  
                                    l3124 0030                                      l4100 04E0  
                                    l3150 006C                                      l3142 0059  
                                    l4102 04E5                                      l3136 003D  
                                    l3128 0037                                      l4200 0701  
                                    l4120 0531                                      l3138 004B  
                                    l3146 0064                                      l3242 1703  
                                    l3402 159F                                      l4132 0547  
                                    l4124 053A                                      l3172 1411  
                                    l3244 1704                                      l3510 0B8C  
                                    l3166 146F                                      l4230 0744  
                                    l4134 054C                                      l4054 0437  
                                    l3246 16DD                                      l3254 1714  
                                    l3504 0B7F                                      l3432 0AE6  
                                    l3522 0BA6                                      l3450 0B0A  
                                    l3426 0ADA                                      l4066 045A  
                                    l4058 0440                                      l3274 1729  
                                    l4322 011F                                      l3540 0BCD  
                                    l3516 0B99                                      l3444 0AFE  
                                    l4260 078A                                      l4164 0671  
                                    l4092 04C5                                      l4068 045F  
                                    l3348 1483                                      l3382 145B  
                                    l3534 0BC0                                      l3462 0B24  
                                    l3438 0AF2                                      l3606 153C  
                                    l3630 175B                                      l3366 165C  
                                    l4334 0143                                      l4326 0128  
                                    l3392 157B                                      l3552 0BE7  
                                    l3528 0BB3                                      l3480 0B4B  
                                    l3456 0B17                                      l4168 0686  
                                    l4088 04BC                                      l3640 177C  
                                    l3296 16AC                                      l4336 0148  
                                    l3570 0C0E                                      l3546 0BDA  
                                    l3474 0B3E                                      l4434 02E5  
                                    l4354 0194                                      l4370 01C6  
                                    l3564 0C01                                      l3492 0B65  
                                    l3468 0B31                                      l3572 0C10  
                                    l3636 1771                                      l3628 174D  
                                    l3652 167B                                      l4380 01E7  
                                    l3558 0BF4                                      l3486 0B58  
                                    l3654 1689                                      l3662 16A2  
                                    l3750 0A3F                                      l4550 14F0  
                                    l4358 019D                                      l4606 0C40  
                                    l3832 0920                                      l4560 080F  
                                    l4536 1617                                      l3920 0EEB  
                                    l4376 01D8                                      l4368 01C1  
                                    l3498 0B72                                      l4570 083D  
                                    l4562 081B                                      l3586 151C  
                                    l3658 1697                                      l3762 0A5D  
                                    l3754 0A49                                      l3588 1525  
                                    l4582 0870                                      l4574 084E  
                                    l4566 082C                                      l3598 1534  
                                    l3758 0A53                                      l3782 1624  
                                    l3794 088A                                      l4578 085F  
                                    l4674 0D5E                                      l3892 0E8C  
                                    l3982 0FAD                                      l3958 0F29  
                          ?_display_clock 0070                                      u2015 0051  
                                    u2025 005A                                      u2105 15E9  
                                    u2205 146A                                      u2055 147E  
                                    u3025 163F                                      u2095 15C1  
                                    u2175 1492                                      u2195 166C  
                                    u3085 0F3A                                      u2905 167E  
                                    u2835 1750                                      u2925 168F  
                                    u2855 175C                                      u2935 1698  
                                    u3735 17C7                                      u2865 1768  
                                    u3745 17D2                                      u3905 0D73  
                                    u1995 0040                                      u2795 153F  
                                    u2875 1772                                      u2955 09F7  
                                    u3755 1788                                      u2965 0A02  
                                    u3765 1793                                      u2975 0A0F  
             time_date_hex_terminator@val 0073                      ?_set_beep_threshhold 0070  
                                    _main 0C12                                      _init 13F4  
                                    _var1 004E                                      _var2 004D  
                                    btemp 007E           time_date_hex_terminator@limiter 0070  
                           write_byte@val 0077                                      start 0000  
                  time_date_delimiter@hex 0070                    time_date_delimiter@val 0076  
                            ?_incrementor 005F               __size_of_initialise_buttons 0014  
                          ??_display_date 0073                                     ?_main 0070  
                          ??_display_temp 0073                                     ?_init 0070  
                         __end_of___lbdiv 1536                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0071                           __end_of___lbmod 1559  
                    __end_of_delay_screen 1481                           __end_of___lwdiv 1781  
                         __end_of___lwmod 16A7                                     _PORTD 0008  
                                   _PORTE 0009                                     _TRISA 0085  
                                   _TRISB 0086                                     _TRISC 0087  
                                   _TRISD 0088                                     _TRISE 0089  
                           __CFG_PWRTE$ON 0000                                     _count 003B  
                                   _table 00A8                                     _stats 002B  
                                   main@i 006E                            write_byte@temp 0076  
                     _set_lower_threshold 17BE                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                     ??_set_beep_threshhold 0072  
                                   status 0003                      __size_of_decrementor 0024  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                         __initialization 07E0                              __end_of_main 0D92  
                            __end_of_init 13FC                   time_date_delimiter@type 0072  
                   __end_of_date_settings 07E0                      ?_set_lower_threshold 0073  
                                  ??_main 0069                                    ??_init 0070  
                    incrementor@lower_val 0061                           ??_display_clock 0073  
                                  _ADCON1 009F                                    _TRISA0 0428  
                                  _TRISB4 0434                                    _TRISE0 0448  
                           ?_button_delay 0070                              ?_reset_alarm 0070  
                    incrementor@upper_val 005F                          __end_of_lcd_init 0026  
                        __end_of_get_temp 0ABB                          __end_of_get_time 1645  
                                  _baifen 0057                                 ??___lbdiv 0071  
                               ??___awmod 0074                                    _delay2 1481  
                               ??___lbmod 0071                     ??_set_lower_threshold 0077  
                                  _d_type 00A0                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 1438  
                     _set_upper_threshold 1781                                    _table1 0020  
                         ___awmod@divisor 0070                                    _shifen 0058  
                                  _wanfen 0055                           ___awmod@counter 0075  
                    __size_of_display_day 0079                              ?_time_read_1 0070  
                     time_write_1@time_tx 0074                             display_date@i 0075  
                        __end_of_set_time 15EF                        reset_temp@presence 0075  
                        ___lbdiv@dividend 0072                      ?_set_upper_threshold 0073  
                         ___lbmod@divisor 0070                   __end_of__initialization 07FC  
                         ___lbmod@counter 0075                            ??_button_delay 0070  
            __size_of_time_date_delimiter 0157                      __end_of_display_date 0916  
                    __end_of_display_temp 1515                            __pcstackCOMMON 0070  
                            __pidataBANK1 1404                     __size_of_delay_screen 0014  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                                __pbssBANK0 0020  
                              __pbssBANK1 00A0                              _delay_screen 146D  
                      __size_of_init_temp 0005                        __size_of_read_byte 0034  
                             _ds1302_init 1429                                _delay_temp 140C  
                              __pmaintext 0C12                                   ?_delay2 0070  
                           ?_modulus_func 0077                        time_read_1@time_rx 0074  
                            incrementor@z 0063                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 0387  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                               ?_set_time 0070                      __size_of_reset_alarm 002A  
                          ??_modulus_func 007B              set_upper_threshold@lower_val 0075  
              __end_of_initialise_buttons 14A9                  _time_date_hex_terminator 141A  
                                 ___lbdiv 1515                                   ___awmod 0026  
                                 ___lbmod 1536                           __size_of_delay2 0014  
                                 ___lwdiv 1745                                   ___lwmod 1675  
                                 _alarm__ 004C                                   _day_hex 0046  
                                 _day_low 002F                              _heater_state 0050  
                                 __ptext1 0071                                   __ptext2 0D92  
                                 __ptext3 157D                                   __ptext4 1781  
                                 __ptext5 17BE                                   __ptext6 14D7  
                                 __ptext7 15EF                                   __ptext8 0003  
                                 __ptext9 1495                      __end_of_button_delay 146D  
                                 delay2@i 0070                         __end_of_init_temp 0807  
                        ___awmod@dividend 0072                         __end_of_read_byte 16DB  
                                 _qianfen 0056                      __size_of_time_read_1 0030  
                                 _lower_t 0053               __end_of_set_beep_threshhold 14F4  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 0096  
                                 clrloop0 13FD                                ??_lcd_init 0073  
                                 _upper_t 0054                             ??_decrementor 007B  
                              ??_get_temp 005F                                ??_get_time 0075  
                   __size_of_display_temp 0021                      end_of_initialization 07FC  
                          display_day@num 0073                            display_clock@i 0075  
                           ?_time_write_1 0070                               ?_delay_temp 0070  
                              _reset_temp 16DB                                ??_set_time 0075  
                     _time_date_delimiter 0ABB                      decrementor@lower_val 005F  
                            _display_date 0880                              _display_temp 14F4  
                       __end_of_write_cmd 14D7                          ___lbmod@dividend 0074  
                            _cooler_state 004F                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 09B4  
                  __size_of_date_settings 0459                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                      decrementor@upper_val 0061  
                          ??_time_write_1 0070               __end_of_set_lower_threshold 1800  
                     __end_of_decrementor 15A1                             ??_display_day 0075  
                          __end_of_delay2 1495                                _write_char 14A9  
                              _write_byte 170F                            _var_night_high 00A4  
                     start_initialization 07E0                             delay_screen@i 0070  
                     __size_of_delay_temp 000E                      __end_of_modulus_func 1448  
                   ??_time_date_delimiter 0074                              ?_ds1302_init 0070  
                             ?_reset_temp 0070                             ??_incrementor 007B  
                              init_fetch0 1448                                  ??_delay2 0070  
                   __size_of_button_delay 0014                             _date_settings 0387  
                             __pdataBANK1 00A8                                read_byte@i 0076  
                              read_byte@j 003F               __end_of_set_upper_threshold 17BE  
                     __end_of_display_day 0880                                 ___latbits 0002  
                           __pcstackBANK0 005F                               _decrementor 157D  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 1459  
                        ___lwdiv@dividend 0078                               _day_counter 0027  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                               ?_write_char 0070  
                             ?_write_byte 0070                       __end_of_incrementor 157D  
                    __end_of_time_write_1 15C7                        _initialise_buttons 1495  
                         _day_of_week_var 00A2                       __size_of_reset_temp 0034  
                        ___lwdiv@quotient 007B                                 _init_temp 0802  
                               _read_byte 16A7                              decrementor@z 0063  
                     ?_initialise_buttons 0070                                 clear_ram0 13FC  
                           ??_reset_alarm 0073                            _prev_hex_hours 0041  
                            ??_delay_temp 0071                                 _temp_high 004A  
                             _display_day 0807   __end_of_thermometer_threshhold_settings 1000  
__size_of_thermometer_threshhold_settings 026E         ??_thermometer_threshhold_settings 0064  
        ?_thermometer_threshhold_settings 0070           _thermometer_threshhold_settings 0D92  
                    ??_initialise_buttons 0070                    __size_of_time_settings 0316  
        thermometer_threshhold_settings@i 0067                             ??_time_read_1 0070  
                             write_char@x 0072                     __size_of_modulus_func 0010  
                               get_time@i 0076                               write_byte@i 0078  
                      __end_of_delay_temp 141A                                 _write_cmd 14C0  
                              ?_init_temp 0070                                ?_read_byte 0070  
                           _var_night_low 00A6                           _buzzer_watcher1 0051  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 001D  
                     __size_of_write_byte 0036                           ??_date_settings 0064  
                    __size_of_ds1302_init 000F                               _incrementor 1559  
                            _modulus_func 1438                       __end_of_reset_alarm 1619  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 002D  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 0802                                  __ptext11 13F4  
                                __ptext20 1675                                  __ptext12 1619  
                                __ptext21 1745                                  __ptext13 1645  
                                __ptext30 14C0                                  __ptext22 1536  
                                __ptext14 09B4                                  __ptext31 14A9  
                                __ptext23 1515                                  __ptext15 170F  
                                __ptext40 1459                                  __ptext32 146D  
                                __ptext24 1429                                  __ptext16 16DB  
                                __ptext33 141A                                  __ptext25 14F4  
                                __ptext17 16A7                                  __ptext34 0ABB  
                                __ptext26 0807                                  __ptext18 140C  
                                __ptext35 15C7                                  __ptext27 0880  
                                __ptext19 1481                                  __ptext36 15A1  
                                __ptext28 0916                                  __ptext37 1559  
                                __ptext29 0387                                  __ptext38 1438  
                                __ptext39 0026                       __end_of_time_read_1 1675  
                              ?_write_cmd 0070                                  _lcd_init 0003  
                                _get_temp 09B4                                  _get_time 1619  
                           _time_settings 0071          __end_of_time_date_hex_terminator 1429  
                           __size_of_main 0180                             __size_of_init 0008  
                           ?_delay_screen 0070                               _hrs_limiter 0045  
                               set_time@i 0075                             _prev_hex_mins 0040  
                           _prev_hex_year 0042                              ??_reset_temp 0074  
                                _set_time 15C7                                  _temp_low 004B  
                                _prev_hex 0044                time_date_delimiter@limiter 0071  
            __size_of_set_lower_threshold 0042                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 009E  
                          _buzzer_watcher 0052                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0C12  
                                init_ram0 144C                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 170F  
                             ??_read_byte 0074                            ?_time_settings 0070  
                            ?_decrementor 005F                          ___lwmod@dividend 0072  
                          ??_delay_screen 0070                               _reset_alarm 15EF  
                            _time_write_1 15A1                              _prev_hex_day 0043  
                            ??_write_char 0072                              ??_write_byte 0074  
                              _OPTION_REG 0081                               _time_read_1 1645  
                            time_read_1@j 0072                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0075                               ??_write_cmd 0072  
            __size_of_set_upper_threshold 003D                             _display_clock 0916  
                           time_write_1@j 0072                        __end_of_write_char 14C0  
                      __end_of_write_byte 1745  
