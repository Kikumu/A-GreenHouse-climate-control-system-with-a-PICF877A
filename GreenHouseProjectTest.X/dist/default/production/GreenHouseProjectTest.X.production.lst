

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 11 11:13:05 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.10
    56                           ; Generated 31/07/2019 GMT
    57                           ; 
    58                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F877A Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0098                     	;# 
   258  0099                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  000E                     	;# 
   285  000F                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0013                     	;# 
   290  0014                     	;# 
   291  0015                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001D                     	;# 
   302  001E                     	;# 
   303  001F                     	;# 
   304  0081                     	;# 
   305  0085                     	;# 
   306  0086                     	;# 
   307  0087                     	;# 
   308  0088                     	;# 
   309  0089                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0000                     	;# 
   330  0001                     	;# 
   331  0002                     	;# 
   332  0003                     	;# 
   333  0004                     	;# 
   334  0005                     	;# 
   335  0006                     	;# 
   336  0007                     	;# 
   337  0008                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000D                     	;# 
   343  000E                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0014                     	;# 
   351  0015                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001D                     	;# 
   362  001E                     	;# 
   363  001F                     	;# 
   364  0081                     	;# 
   365  0085                     	;# 
   366  0086                     	;# 
   367  0087                     	;# 
   368  0088                     	;# 
   369  0089                     	;# 
   370  008C                     	;# 
   371  008D                     	;# 
   372  008E                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  000E                     	;# 
   405  000F                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001D                     	;# 
   422  001E                     	;# 
   423  001F                     	;# 
   424  0081                     	;# 
   425  0085                     	;# 
   426  0086                     	;# 
   427  0087                     	;# 
   428  0088                     	;# 
   429  0089                     	;# 
   430  008C                     	;# 
   431  008D                     	;# 
   432  008E                     	;# 
   433  0091                     	;# 
   434  0092                     	;# 
   435  0093                     	;# 
   436  0094                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000D                     	;# 
   463  000E                     	;# 
   464  000E                     	;# 
   465  000F                     	;# 
   466  0010                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0015                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001B                     	;# 
   480  001C                     	;# 
   481  001D                     	;# 
   482  001E                     	;# 
   483  001F                     	;# 
   484  0081                     	;# 
   485  0085                     	;# 
   486  0086                     	;# 
   487  0087                     	;# 
   488  0088                     	;# 
   489  0089                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  010F                     	;# 
   507  018C                     	;# 
   508  018D                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  000E                     	;# 
   525  000F                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0014                     	;# 
   531  0015                     	;# 
   532  0015                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001B                     	;# 
   540  001C                     	;# 
   541  001D                     	;# 
   542  001E                     	;# 
   543  001F                     	;# 
   544  0081                     	;# 
   545  0085                     	;# 
   546  0086                     	;# 
   547  0087                     	;# 
   548  0088                     	;# 
   549  0089                     	;# 
   550  008C                     	;# 
   551  008D                     	;# 
   552  008E                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0094                     	;# 
   557  0098                     	;# 
   558  0099                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  010F                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  000E                     	;# 
   585  000F                     	;# 
   586  0010                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0014                     	;# 
   591  0015                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0017                     	;# 
   595  0018                     	;# 
   596  0019                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  0081                     	;# 
   605  0085                     	;# 
   606  0086                     	;# 
   607  0087                     	;# 
   608  0088                     	;# 
   609  0089                     	;# 
   610  008C                     	;# 
   611  008D                     	;# 
   612  008E                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0094                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0088                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  0091                     	;# 
   674  0092                     	;# 
   675  0093                     	;# 
   676  0094                     	;# 
   677  0098                     	;# 
   678  0099                     	;# 
   679  009C                     	;# 
   680  009D                     	;# 
   681  009E                     	;# 
   682  009F                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010E                     	;# 
   686  010F                     	;# 
   687  018C                     	;# 
   688  018D                     	;# 
   689                           
   690                           	psect	idataBANK1
   691  1607                     __pidataBANK1:	
   692                           
   693                           ;initializer for _table
   694  1607  3400               	retlw	0
   695  1608  3400               	retlw	0
   696  1609  3440               	retlw	64
   697  160A  3412               	retlw	18
   698  160B  3412               	retlw	18
   699  160C  3406               	retlw	6
   700  160D  3419               	retlw	25
   701  160E  3400               	retlw	0
   702  0009                     _PORTE	set	9
   703  0008                     _PORTD	set	8
   704  003E                     _RC6	set	62
   705  003F                     _RC7	set	63
   706  003C                     _RC4	set	60
   707  003B                     _RC3	set	59
   708  003A                     _RC2	set	58
   709  0039                     _RC1	set	57
   710  0038                     _RC0	set	56
   711  004A                     _RE2	set	74
   712  0034                     _RB4	set	52
   713  0031                     _RB1	set	49
   714  0035                     _RB5	set	53
   715  0030                     _RB0	set	48
   716  0048                     _RE0	set	72
   717  002B                     _RA3	set	43
   718  002C                     _RA4	set	44
   719  002D                     _RA5	set	45
   720  002A                     _RA2	set	42
   721  0028                     _RA0	set	40
   722  0087                     _TRISC	set	135
   723  0085                     _TRISA	set	133
   724  0089                     _TRISE	set	137
   725  0081                     _OPTION_REG	set	129
   726  0088                     _TRISD	set	136
   727  009F                     _ADCON1	set	159
   728  0086                     _TRISB	set	134
   729  0434                     _TRISB4	set	1076
   730  0448                     _TRISE0	set	1096
   731  0428                     _TRISA0	set	1064
   732                           
   733                           ; #config settings
   734  0000                     
   735                           	psect	cinit
   736  07E8                     start_initialization:	
   737  07E8                     __initialization:	
   738                           
   739                           ; Initialize objects allocated to BANK1
   740  07E8  1383               	bcf	3,7	;select IRP bank0
   741  07E9  30A8               	movlw	low (__pdataBANK1+8)
   742  07EA  00FD               	movwf	btemp+-1
   743  07EB  3016               	movlw	high __pidataBANK1
   744  07EC  00FE               	movwf	btemp
   745  07ED  3007               	movlw	low __pidataBANK1
   746  07EE  00FF               	movwf	btemp+1
   747  07EF  30A0               	movlw	low __pdataBANK1
   748  07F0  0084               	movwf	4
   749  07F1  160A  118A  265C  120A  118A  	fcall	init_ram0
   750                           
   751                           ; Clear objects allocated to BANK0
   752  07F6  3020               	movlw	low __pbssBANK0
   753  07F7  0084               	movwf	4
   754  07F8  3062               	movlw	low (__pbssBANK0+66)
   755  07F9  160A  118A  25FF   	fcall	clear_ram0
   756  07FC                     end_of_initialization:	
   757                           ;End of C runtime variable initialization code
   758                           
   759  07FC                     __end_of__initialization:	
   760  07FC  0183               	clrf	3
   761  07FD  120A  158A  2C87   	ljmp	_main	;jump to C main() function
   762                           
   763                           	psect	bssBANK0
   764  0020                     __pbssBANK0:	
   765  0020                     _table1:	
   766  0020                     	ds	7
   767  0027                     _day_counter:	
   768  0027                     	ds	2
   769  0029                     _var_night_high:	
   770  0029                     	ds	2
   771  002B                     _var_night_low:	
   772  002B                     	ds	2
   773  002D                     _count:	
   774  002D                     	ds	2
   775  002F                     _p:	
   776  002F                     	ds	2
   777  0031                     _d_type:	
   778  0031                     	ds	2
   779  0033                     _stats:	
   780  0033                     	ds	2
   781  0035                     _day_of_week_var:	
   782  0035                     	ds	2
   783  0037                     _day_high:	
   784  0037                     	ds	2
   785  0039                     _day_low:	
   786  0039                     	ds	2
   787  003B                     _z:	
   788  003B                     	ds	2
   789  003D                     _y:	
   790  003D                     	ds	2
   791  003F                     _x:	
   792  003F                     	ds	2
   793  0041                     _w:	
   794  0041                     	ds	2
   795  0043                     _t:	
   796  0043                     	ds	2
   797  0045                     _wd:	
   798  0045                     	ds	2
   799  0047                     read_byte@j:	
   800  0047                     	ds	1
   801  0048                     _var2:	
   802  0048                     	ds	1
   803  0049                     _var1:	
   804  0049                     	ds	1
   805  004A                     _buzzer_watcher1:	
   806  004A                     	ds	1
   807  004B                     _buzzer_watcher:	
   808  004B                     	ds	1
   809  004C                     _lower_t:	
   810  004C                     	ds	1
   811  004D                     _upper_t:	
   812  004D                     	ds	1
   813  004E                     _prev_hex_mins:	
   814  004E                     	ds	1
   815  004F                     _prev_hex_hours:	
   816  004F                     	ds	1
   817  0050                     _prev_hex_year:	
   818  0050                     	ds	1
   819  0051                     _prev_hex_day:	
   820  0051                     	ds	1
   821  0052                     _prev_hex:	
   822  0052                     	ds	1
   823  0053                     _hrs_limiter:	
   824  0053                     	ds	1
   825  0054                     _day_hex:	
   826  0054                     	ds	1
   827  0055                     _c:	
   828  0055                     	ds	1
   829  0056                     _b:	
   830  0056                     	ds	1
   831  0057                     _a:	
   832  0057                     	ds	1
   833  0058                     _wanfen:	
   834  0058                     	ds	1
   835  0059                     _qianfen:	
   836  0059                     	ds	1
   837  005A                     _baifen:	
   838  005A                     	ds	1
   839  005B                     _shifen:	
   840  005B                     	ds	1
   841  005C                     _ge:	
   842  005C                     	ds	1
   843  005D                     _shi:	
   844  005D                     	ds	1
   845  005E                     _TX:	
   846  005E                     	ds	1
   847  005F                     _TZ:	
   848  005F                     	ds	1
   849  0060                     _THV:	
   850  0060                     	ds	1
   851  0061                     _TLV:	
   852  0061                     	ds	1
   853                           
   854                           	psect	dataBANK1
   855  00A0                     __pdataBANK1:	
   856  00A0                     _table:	
   857  00A0                     	ds	8
   858                           
   859                           	psect	inittext
   860  1658                     init_fetch0:	
   861                           ;	Called with low address in FSR and high address in W
   862                           
   863  1658  087E               	movf	126,w
   864  1659  008A               	movwf	10
   865  165A  087F               	movf	127,w
   866  165B  0082               	movwf	2
   867  165C                     init_ram0:	
   868                           ;Called with:
   869                           ;	high address of idata address in btemp 
   870                           ;	low address of idata address in btemp+1 
   871                           ;	low address of data in FSR
   872                           ;	high address + 1 of data in btemp-1
   873                           
   874  165C  2658  160A  118A   	fcall	init_fetch0
   875  165F  0080               	movwf	0
   876  1660  0A84               	incf	4,f
   877  1661  0804               	movf	4,w
   878  1662  067D               	xorwf	125,w
   879  1663  1903               	btfsc	3,2
   880  1664  3400               	retlw	0
   881  1665  0AFF               	incf	127,f
   882  1666  1903               	btfsc	3,2
   883  1667  0AFE               	incf	126,f
   884  1668  2E5C               	goto	init_ram0
   885                           
   886                           	psect	clrtext
   887  15FF                     clear_ram0:	
   888                           ;	Called with FSR containing the base address, and
   889                           ;	W with the last address+1
   890                           
   891  15FF  0064               	clrwdt	;clear the watchdog before getting into this loop
   892  1600                     clrloop0:	
   893  1600  0180               	clrf	0	;clear RAM location pointed to by FSR
   894  1601  0A84               	incf	4,f	;increment pointer
   895  1602  0604               	xorwf	4,w	;XOR with final address
   896  1603  1903               	btfsc	3,2	;have we reached the end yet?
   897  1604  3400               	retlw	0	;all done for this memory range, return
   898  1605  0604               	xorwf	4,w	;XOR again to restore value
   899  1606  2E00               	goto	clrloop0	;do the next byte
   900                           
   901                           	psect	cstackCOMMON
   902  0070                     __pcstackCOMMON:	
   903  0070                     ?_init_temp:	
   904  0070                     ??_init_temp:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_set_time:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_ds1302_init:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?_init:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ??_init:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?_lcd_init:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ?_initialise_buttons:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ??_initialise_buttons:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ?_get_temp:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_get_time:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_write_cmd:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_write_char:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_display_temp:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_display_date:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_display_clock:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ?_thermometer_threshhold_settings:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_date_settings:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_time_settings:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_set_beep_threshhold:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_reset_alarm:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ??_reset_alarm:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_delay_screen:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ??_delay_screen:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_delay_temp:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_delay2:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ??_delay2:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_time_write_1:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ??_time_write_1:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_time_read_1:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ??_time_read_1:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_button_delay:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ??_button_delay:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ?_time_date_hex_terminator:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_time_date_delimiter:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ?_main:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_reset_temp:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ?_write_byte:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ?_read_byte:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ?___lbdiv:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?___lbmod:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ?___awmod:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?___lwmod:	
  1028                           ; 2 bytes @ 0x0
  1029                           
  1030  0070                     delay_temp@y:	
  1031                           ; 2 bytes @ 0x0
  1032                           
  1033  0070                     time_date_delimiter@hex:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     time_date_hex_terminator@limiter:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ___lbdiv@divisor:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ___lbmod@divisor:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     delay_screen@i:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     delay2@i:	
  1049                           ; 2 bytes @ 0x0
  1050                           
  1051  0070                     button_delay@i:	
  1052                           ; 2 bytes @ 0x0
  1053                           
  1054  0070                     ___awmod@divisor:	
  1055                           ; 2 bytes @ 0x0
  1056                           
  1057  0070                     ___lwmod@divisor:	
  1058                           ; 2 bytes @ 0x0
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x0
  1062  0070                     	ds	1
  1063  0071                     ??_delay_temp:	
  1064  0071                     ??_time_date_hex_terminator:	
  1065                           ; 1 bytes @ 0x1
  1066                           
  1067  0071                     ??___lbdiv:	
  1068                           ; 1 bytes @ 0x1
  1069                           
  1070  0071                     ??___lbmod:	
  1071                           ; 1 bytes @ 0x1
  1072                           
  1073  0071                     time_date_delimiter@limiter:	
  1074                           ; 1 bytes @ 0x1
  1075                           
  1076                           
  1077                           ; 1 bytes @ 0x1
  1078  0071                     	ds	1
  1079  0072                     ??_write_cmd:	
  1080  0072                     ??_write_char:	
  1081                           ; 1 bytes @ 0x2
  1082                           
  1083  0072                     ??_set_beep_threshhold:	
  1084                           ; 1 bytes @ 0x2
  1085                           
  1086  0072                     ??_time_date_delimiter:	
  1087                           ; 1 bytes @ 0x2
  1088                           
  1089  0072                     write_char@x:	
  1090                           ; 1 bytes @ 0x2
  1091                           
  1092  0072                     write_cmd@x:	
  1093                           ; 1 bytes @ 0x2
  1094                           
  1095  0072                     delay_temp@x:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0072                     set_beep_threshhold@x:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101  0072                     ___lbdiv@dividend:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104  0072                     time_write_1@j:	
  1105                           ; 1 bytes @ 0x2
  1106                           
  1107  0072                     time_read_1@j:	
  1108                           ; 2 bytes @ 0x2
  1109                           
  1110  0072                     ___awmod@dividend:	
  1111                           ; 2 bytes @ 0x2
  1112                           
  1113  0072                     ___lwmod@dividend:	
  1114                           ; 2 bytes @ 0x2
  1115                           
  1116                           
  1117                           ; 2 bytes @ 0x2
  1118  0072                     	ds	1
  1119  0073                     ??_lcd_init:	
  1120  0073                     ??_display_temp:	
  1121                           ; 1 bytes @ 0x3
  1122                           
  1123  0073                     ??_display_date:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126  0073                     ??_display_clock:	
  1127                           ; 1 bytes @ 0x3
  1128                           
  1129  0073                     ?_set_lower_threshold:	
  1130                           ; 1 bytes @ 0x3
  1131                           
  1132  0073                     ?_set_upper_threshold:	
  1133                           ; 1 bytes @ 0x3
  1134                           
  1135  0073                     ?_display_day:	
  1136                           ; 1 bytes @ 0x3
  1137                           
  1138  0073                     delay_temp@z:	
  1139                           ; 1 bytes @ 0x3
  1140                           
  1141  0073                     time_date_hex_terminator@val:	
  1142                           ; 1 bytes @ 0x3
  1143                           
  1144  0073                     ___lbdiv@counter:	
  1145                           ; 1 bytes @ 0x3
  1146                           
  1147  0073                     set_upper_threshold@upper_val:	
  1148                           ; 1 bytes @ 0x3
  1149                           
  1150  0073                     set_lower_threshold@upper_val:	
  1151                           ; 2 bytes @ 0x3
  1152                           
  1153  0073                     display_day@num:	
  1154                           ; 2 bytes @ 0x3
  1155                           
  1156                           
  1157                           ; 2 bytes @ 0x3
  1158  0073                     	ds	1
  1159  0074                     ??_reset_temp:	
  1160  0074                     ??_write_byte:	
  1161                           ; 1 bytes @ 0x4
  1162                           
  1163  0074                     ??_read_byte:	
  1164                           ; 1 bytes @ 0x4
  1165                           
  1166  0074                     ??___awmod:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169  0074                     ??___lwmod:	
  1170                           ; 1 bytes @ 0x4
  1171                           
  1172  0074                     time_write_1@time_tx:	
  1173                           ; 1 bytes @ 0x4
  1174                           
  1175  0074                     time_read_1@time_rx:	
  1176                           ; 1 bytes @ 0x4
  1177                           
  1178  0074                     time_date_delimiter@val:	
  1179                           ; 1 bytes @ 0x4
  1180                           
  1181  0074                     ___lbdiv@quotient:	
  1182                           ; 1 bytes @ 0x4
  1183                           
  1184  0074                     ___lbmod@dividend:	
  1185                           ; 1 bytes @ 0x4
  1186                           
  1187                           
  1188                           ; 1 bytes @ 0x4
  1189  0074                     	ds	1
  1190  0075                     ??_set_time:	
  1191  0075                     ??_ds1302_init:	
  1192                           ; 1 bytes @ 0x5
  1193                           
  1194  0075                     ??_get_time:	
  1195                           ; 1 bytes @ 0x5
  1196                           
  1197  0075                     ??_display_day:	
  1198                           ; 1 bytes @ 0x5
  1199                           
  1200  0075                     reset_temp@presence:	
  1201                           ; 1 bytes @ 0x5
  1202                           
  1203  0075                     read_byte@value:	
  1204                           ; 1 bytes @ 0x5
  1205                           
  1206  0075                     ___awmod@counter:	
  1207                           ; 1 bytes @ 0x5
  1208                           
  1209  0075                     ___lbmod@counter:	
  1210                           ; 1 bytes @ 0x5
  1211                           
  1212  0075                     ___lwmod@counter:	
  1213                           ; 1 bytes @ 0x5
  1214                           
  1215  0075                     set_time@i:	
  1216                           ; 1 bytes @ 0x5
  1217                           
  1218  0075                     display_clock@i:	
  1219                           ; 2 bytes @ 0x5
  1220                           
  1221  0075                     display_date@i:	
  1222                           ; 2 bytes @ 0x5
  1223                           
  1224  0075                     set_upper_threshold@lower_val:	
  1225                           ; 2 bytes @ 0x5
  1226                           
  1227  0075                     set_lower_threshold@lower_val:	
  1228                           ; 2 bytes @ 0x5
  1229                           
  1230                           
  1231                           ; 2 bytes @ 0x5
  1232  0075                     	ds	1
  1233  0076                     ?___lwdiv:	
  1234  0076                     write_byte@temp:	
  1235                           ; 2 bytes @ 0x6
  1236                           
  1237  0076                     read_byte@i:	
  1238                           ; 1 bytes @ 0x6
  1239                           
  1240  0076                     ___awmod@sign:	
  1241                           ; 1 bytes @ 0x6
  1242                           
  1243  0076                     ___lbmod@rem:	
  1244                           ; 1 bytes @ 0x6
  1245                           
  1246  0076                     get_time@i:	
  1247                           ; 1 bytes @ 0x6
  1248                           
  1249  0076                     ___lwdiv@divisor:	
  1250                           ; 2 bytes @ 0x6
  1251                           
  1252                           
  1253                           ; 2 bytes @ 0x6
  1254  0076                     	ds	1
  1255  0077                     ??_set_lower_threshold:	
  1256  0077                     ??_set_upper_threshold:	
  1257                           ; 1 bytes @ 0x7
  1258                           
  1259  0077                     ?_modulus_func:	
  1260                           ; 1 bytes @ 0x7
  1261                           
  1262  0077                     write_byte@val:	
  1263                           ; 2 bytes @ 0x7
  1264                           
  1265  0077                     modulus_func@x:	
  1266                           ; 1 bytes @ 0x7
  1267                           
  1268                           
  1269                           ; 2 bytes @ 0x7
  1270  0077                     	ds	1
  1271  0078                     write_byte@i:	
  1272  0078                     ___lwdiv@dividend:	
  1273                           ; 1 bytes @ 0x8
  1274                           
  1275                           
  1276                           ; 2 bytes @ 0x8
  1277  0078                     	ds	1
  1278  0079                     modulus_func@y:	
  1279                           
  1280                           ; 2 bytes @ 0x9
  1281  0079                     	ds	1
  1282  007A                     ??___lwdiv:	
  1283                           
  1284                           ; 1 bytes @ 0xA
  1285  007A                     	ds	1
  1286  007B                     ??_modulus_func:	
  1287  007B                     ??_incrementor:	
  1288                           ; 1 bytes @ 0xB
  1289                           
  1290  007B                     ??_decrementor:	
  1291                           ; 1 bytes @ 0xB
  1292                           
  1293  007B                     ___lwdiv@quotient:	
  1294                           ; 1 bytes @ 0xB
  1295                           
  1296                           
  1297                           ; 2 bytes @ 0xB
  1298  007B                     	ds	2
  1299  007D                     ___lwdiv@counter:	
  1300                           
  1301                           ; 1 bytes @ 0xD
  1302  007D                     	ds	1
  1303  007E                     ??_main:	
  1304                           
  1305                           	psect	cstackBANK0
  1306  0062                     __pcstackBANK0:	
  1307                           ; 1 bytes @ 0xE
  1308                           
  1309  0062                     ??_get_temp:	
  1310  0062                     ?_incrementor:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0062                     ?_decrementor:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0062                     incrementor@upper_val:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0062                     decrementor@lower_val:	
  1320                           ; 2 bytes @ 0x0
  1321                           
  1322                           
  1323                           ; 2 bytes @ 0x0
  1324  0062                     	ds	2
  1325  0064                     incrementor@lower_val:	
  1326  0064                     decrementor@upper_val:	
  1327                           ; 2 bytes @ 0x2
  1328                           
  1329                           
  1330                           ; 2 bytes @ 0x2
  1331  0064                     	ds	2
  1332  0066                     incrementor@z:	
  1333  0066                     decrementor@z:	
  1334                           ; 1 bytes @ 0x4
  1335                           
  1336                           
  1337                           ; 1 bytes @ 0x4
  1338  0066                     	ds	1
  1339  0067                     ??_thermometer_threshhold_settings:	
  1340  0067                     ??_date_settings:	
  1341                           ; 1 bytes @ 0x5
  1342                           
  1343  0067                     ??_time_settings:	
  1344                           ; 1 bytes @ 0x5
  1345                           
  1346                           
  1347                           ; 1 bytes @ 0x5
  1348  0067                     	ds	3
  1349  006A                     thermometer_threshhold_settings@i:	
  1350                           
  1351                           ; 2 bytes @ 0x8
  1352  006A                     	ds	2
  1353  006C                     main@i:	
  1354                           
  1355                           ; 2 bytes @ 0xA
  1356  006C                     	ds	2
  1357                           
  1358                           	psect	maintext
  1359  0C87                     __pmaintext:	
  1360 ;;
  1361 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1362 ;;
  1363 ;; *************** function _main *****************
  1364 ;; Defined at:
  1365 ;;		line 10 in file "mainLogic.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  i               2   10[BANK0 ] int 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : B00/0
  1376 ;;		On exit  : 300/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1379 ;;      Params:         0       0       0       0       0
  1380 ;;      Locals:         0       2       0       0       0
  1381 ;;      Temps:          0       0       0       0       0
  1382 ;;      Totals:         0       2       0       0       0
  1383 ;;Total ram usage:        2 bytes
  1384 ;; Hardware stack levels required when called:    4
  1385 ;; This function calls:
  1386 ;;		_date_settings
  1387 ;;		_display_clock
  1388 ;;		_display_date
  1389 ;;		_display_day
  1390 ;;		_display_temp
  1391 ;;		_ds1302_init
  1392 ;;		_get_temp
  1393 ;;		_get_time
  1394 ;;		_init
  1395 ;;		_init_temp
  1396 ;;		_initialise_buttons
  1397 ;;		_lcd_init
  1398 ;;		_modulus_func
  1399 ;;		_reset_alarm
  1400 ;;		_set_beep_threshhold
  1401 ;;		_set_lower_threshold
  1402 ;;		_set_time
  1403 ;;		_set_upper_threshold
  1404 ;;		_thermometer_threshhold_settings
  1405 ;;		_time_settings
  1406 ;;		_write_char
  1407 ;;		_write_cmd
  1408 ;; This function is called by:
  1409 ;;		Startup code after reset
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           
  1414                           ;psect for function _main
  1415  0C87                     _main:	
  1416                           
  1417                           ;mainLogic.c: 11:     TRISB=0X02;
  1418                           
  1419                           ;incstack = 0
  1420                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1421  0C87  3002               	movlw	2
  1422  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  1423  0C89  0086               	movwf	6	;volatile
  1424                           
  1425                           ;mainLogic.c: 12:     init_temp();
  1426  0C8A  160A  118A  25F2  120A  158A  	fcall	_init_temp
  1427                           
  1428                           ;mainLogic.c: 13:     set_time();
  1429  0C8F  160A  118A  27D8  120A  158A  	fcall	_set_time
  1430                           
  1431                           ;mainLogic.c: 14:     ds1302_init();
  1432  0C94  160A  118A  2639  120A  158A  	fcall	_ds1302_init
  1433                           
  1434                           ;mainLogic.c: 16:     init();
  1435  0C99  160A  118A  25F7  120A  158A  	fcall	_init
  1436                           
  1437                           ;mainLogic.c: 17:     lcd_init();
  1438  0C9E  160A  118A  276B  120A  158A  	fcall	_lcd_init
  1439                           
  1440                           ;mainLogic.c: 18:     init_temp();
  1441  0CA3  160A  118A  25F2  120A  158A  	fcall	_init_temp
  1442                           
  1443                           ;mainLogic.c: 19:     initialise_buttons();
  1444  0CA8  160A  118A  26A5  120A  158A  	fcall	_initialise_buttons
  1445  0CAD                     l4144:	
  1446                           
  1447                           ;mainLogic.c: 24:     get_temp();
  1448  0CAD  120A  158A  2380  120A  158A  	fcall	_get_temp
  1449                           
  1450                           ;mainLogic.c: 25:     get_time();
  1451  0CB2  120A  158A  2025  120A  158A  	fcall	_get_time
  1452                           
  1453                           ;mainLogic.c: 26:     write_cmd(0x80);
  1454  0CB7  3080               	movlw	128
  1455  0CB8  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  1456                           
  1457                           ;mainLogic.c: 27:     write_char('T');
  1458  0CBD  3054               	movlw	84
  1459  0CBE  160A  118A  26BB  120A  158A  	fcall	_write_char
  1460                           
  1461                           ;mainLogic.c: 28:     write_char('e');
  1462  0CC3  3065               	movlw	101
  1463  0CC4  160A  118A  26BB  120A  158A  	fcall	_write_char
  1464                           
  1465                           ;mainLogic.c: 29:     write_char('m');
  1466  0CC9  306D               	movlw	109
  1467  0CCA  160A  118A  26BB  120A  158A  	fcall	_write_char
  1468                           
  1469                           ;mainLogic.c: 30:     write_char('p');
  1470  0CCF  3070               	movlw	112
  1471  0CD0  160A  118A  26BB  120A  158A  	fcall	_write_char
  1472                           
  1473                           ;mainLogic.c: 31:     write_char(':');
  1474  0CD5  303A               	movlw	58
  1475  0CD6  160A  118A  26BB  120A  158A  	fcall	_write_char
  1476                           
  1477                           ;mainLogic.c: 32:     display_temp();
  1478  0CDB  160A  118A  2706  120A  158A  	fcall	_display_temp
  1479                           
  1480                           ;mainLogic.c: 34:     write_cmd(0x90);
  1481  0CE0  3090               	movlw	144
  1482  0CE1  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  1483                           
  1484                           ;mainLogic.c: 35:     write_char('D');
  1485  0CE6  3044               	movlw	68
  1486  0CE7  160A  118A  26BB  120A  158A  	fcall	_write_char
  1487                           
  1488                           ;mainLogic.c: 36:     write_char('a');
  1489  0CEC  3061               	movlw	97
  1490  0CED  160A  118A  26BB  120A  158A  	fcall	_write_char
  1491                           
  1492                           ;mainLogic.c: 37:     write_char('t');
  1493  0CF2  3074               	movlw	116
  1494  0CF3  160A  118A  26BB  120A  158A  	fcall	_write_char
  1495                           
  1496                           ;mainLogic.c: 38:     write_char('e');
  1497  0CF8  3065               	movlw	101
  1498  0CF9  160A  118A  26BB  120A  158A  	fcall	_write_char
  1499                           
  1500                           ;mainLogic.c: 39:     write_char(':');
  1501  0CFE  303A               	movlw	58
  1502  0CFF  160A  118A  26BB  120A  158A  	fcall	_write_char
  1503                           
  1504                           ;mainLogic.c: 40:     write_char(' ');
  1505  0D04  3020               	movlw	32
  1506  0D05  160A  118A  26BB  120A  158A  	fcall	_write_char
  1507                           
  1508                           ;mainLogic.c: 42:     display_date();
  1509  0D0A  120A  158A  22EA  120A  158A  	fcall	_display_date
  1510                           
  1511                           ;mainLogic.c: 44:     write_cmd(0x88);
  1512  0D0F  3088               	movlw	136
  1513  0D10  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  1514                           
  1515                           ;mainLogic.c: 45:     write_char('T');
  1516  0D15  3054               	movlw	84
  1517  0D16  160A  118A  26BB  120A  158A  	fcall	_write_char
  1518                           
  1519                           ;mainLogic.c: 46:     write_char('i');
  1520  0D1B  3069               	movlw	105
  1521  0D1C  160A  118A  26BB  120A  158A  	fcall	_write_char
  1522                           
  1523                           ;mainLogic.c: 47:     write_char('m');
  1524  0D21  306D               	movlw	109
  1525  0D22  160A  118A  26BB  120A  158A  	fcall	_write_char
  1526                           
  1527                           ;mainLogic.c: 48:     write_char('e');
  1528  0D27  3065               	movlw	101
  1529  0D28  160A  118A  26BB  120A  158A  	fcall	_write_char
  1530                           
  1531                           ;mainLogic.c: 49:     write_char(':');
  1532  0D2D  303A               	movlw	58
  1533  0D2E  160A  118A  26BB  120A  158A  	fcall	_write_char
  1534                           
  1535                           ;mainLogic.c: 50:     display_clock();
  1536  0D33  120A  158A  2254  120A  158A  	fcall	_display_clock
  1537                           
  1538                           ;mainLogic.c: 51:     thermometer_threshhold_settings();
  1539  0D38  120A  158A  25AA  120A  158A  	fcall	_thermometer_threshhold_settings
  1540                           
  1541                           ;mainLogic.c: 52:     date_settings();
  1542  0D3D  120A  118A  23CF  120A  158A  	fcall	_date_settings
  1543                           
  1544                           ;mainLogic.c: 53:     time_settings();
  1545  0D42  120A  118A  20E5  120A  158A  	fcall	_time_settings
  1546                           
  1547                           ;mainLogic.c: 54:     write_cmd(0x98);
  1548  0D47  3098               	movlw	152
  1549  0D48  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  1550                           
  1551                           ;mainLogic.c: 55:     set_lower_threshold(2,4);
  1552  0D4D  3002               	movlw	2
  1553  0D4E  00F3               	movwf	set_lower_threshold@upper_val
  1554  0D4F  3000               	movlw	0
  1555  0D50  00F4               	movwf	set_lower_threshold@upper_val+1
  1556  0D51  3004               	movlw	4
  1557  0D52  00F5               	movwf	set_lower_threshold@lower_val
  1558  0D53  3000               	movlw	0
  1559  0D54  00F6               	movwf	set_lower_threshold@lower_val+1
  1560  0D55  120A  158A  21C5  120A  158A  	fcall	_set_lower_threshold
  1561                           
  1562                           ;mainLogic.c: 56:     set_upper_threshold(2,4);
  1563  0D5A  3002               	movlw	2
  1564  0D5B  00F3               	movwf	set_upper_threshold@upper_val
  1565  0D5C  3000               	movlw	0
  1566  0D5D  00F4               	movwf	set_upper_threshold@upper_val+1
  1567  0D5E  3004               	movlw	4
  1568  0D5F  00F5               	movwf	set_upper_threshold@lower_val
  1569  0D60  3000               	movlw	0
  1570  0D61  00F6               	movwf	set_upper_threshold@lower_val+1
  1571  0D62  120A  158A  2151  120A  158A  	fcall	_set_upper_threshold
  1572                           
  1573                           ;mainLogic.c: 57:     set_beep_threshhold(buzzer_watcher);
  1574  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  1575  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  1576  0D69  084B               	movf	_buzzer_watcher,w
  1577  0D6A  160A  118A  26E9  120A  158A  	fcall	_set_beep_threshhold
  1578                           
  1579                           ;mainLogic.c: 58:     reset_alarm();
  1580  0D6F  160A  118A  260F  120A  158A  	fcall	_reset_alarm
  1581                           
  1582                           ;mainLogic.c: 59:     for(int i = 0; i < 7; i++)
  1583  0D74  01EC               	clrf	main@i
  1584  0D75  01ED               	clrf	main@i+1
  1585  0D76                     l4214:	
  1586                           
  1587                           ;mainLogic.c: 60:     write_char(' ');
  1588  0D76  3020               	movlw	32
  1589  0D77  160A  118A  26BB  120A  158A  	fcall	_write_char
  1590  0D7C  3001               	movlw	1
  1591  0D7D  07EC               	addwf	main@i,f
  1592  0D7E  1803               	skipnc
  1593  0D7F  0AED               	incf	main@i+1,f
  1594  0D80  3000               	movlw	0
  1595  0D81  07ED               	addwf	main@i+1,f
  1596  0D82  086D               	movf	main@i+1,w
  1597  0D83  3A80               	xorlw	128
  1598  0D84  00FF               	movwf	127
  1599  0D85  3080               	movlw	128
  1600  0D86  027F               	subwf	127,w
  1601  0D87  1D03               	skipz
  1602  0D88  2D8B               	goto	u2945
  1603  0D89  3007               	movlw	7
  1604  0D8A  026C               	subwf	main@i,w
  1605  0D8B                     u2945:	
  1606  0D8B  1C03               	skipc
  1607  0D8C  2D76               	goto	l4214
  1608                           
  1609                           ;mainLogic.c: 61:     day_counter = modulus_func(day_low,8);
  1610  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0D8F  083A               	movf	_day_low+1,w
  1613  0D90  00F8               	movwf	modulus_func@x+1
  1614  0D91  0839               	movf	_day_low,w
  1615  0D92  00F7               	movwf	modulus_func@x
  1616  0D93  3008               	movlw	8
  1617  0D94  00F9               	movwf	modulus_func@y
  1618  0D95  3000               	movlw	0
  1619  0D96  00FA               	movwf	modulus_func@y+1
  1620  0D97  160A  118A  2648  120A  158A  	fcall	_modulus_func
  1621  0D9C  0878               	movf	?_modulus_func+1,w
  1622  0D9D  00A8               	movwf	_day_counter+1
  1623  0D9E  0877               	movf	?_modulus_func,w
  1624  0D9F  00A7               	movwf	_day_counter
  1625                           
  1626                           ;mainLogic.c: 62:     display_day(day_counter);
  1627  0DA0  0828               	movf	_day_counter+1,w
  1628  0DA1  00F4               	movwf	display_day@num+1
  1629  0DA2  0827               	movf	_day_counter,w
  1630  0DA3  00F3               	movwf	display_day@num
  1631  0DA4  120A  118A  2042  120A  158A  	fcall	_display_day
  1632  0DA9  2CAD               	goto	l4144
  1633  0DAA                     __end_of_main:	
  1634                           
  1635                           	psect	text1
  1636  00E5                     __ptext1:	
  1637 ;; *************** function _time_settings *****************
  1638 ;; Defined at:
  1639 ;;		line 167 in file "Button_src.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 300/0
  1650 ;;		On exit  : 300/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1653 ;;      Params:         0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0
  1655 ;;      Temps:          0       3       0       0       0
  1656 ;;      Totals:         0       3       0       0       0
  1657 ;;Total ram usage:        3 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    3
  1660 ;; This function calls:
  1661 ;;		_button_delay
  1662 ;;		_incrementor
  1663 ;;		_modulus_func
  1664 ;;		_set_time
  1665 ;;		_time_date_delimiter
  1666 ;;		_time_date_hex_terminator
  1667 ;;		_write_char
  1668 ;;		_write_cmd
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           
  1675                           ;psect for function _time_settings
  1676  00E5                     _time_settings:	
  1677                           
  1678                           ;Button_src.c: 168:  RC0 = 1;
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1682  00E5  1407               	bsf	7,0	;volatile
  1683                           
  1684                           ;Button_src.c: 169:  RC1 = 1;
  1685  00E6  1487               	bsf	7,1	;volatile
  1686                           
  1687                           ;Button_src.c: 170:  RC2 = 0;
  1688  00E7  1107               	bcf	7,2	;volatile
  1689                           
  1690                           ;Button_src.c: 171:  RC3 = 1;
  1691  00E8  1587               	bsf	7,3	;volatile
  1692                           
  1693                           ;Button_src.c: 172:   if (RC4 == 0){
  1694  00E9  1A07               	btfsc	7,4	;volatile
  1695  00EA  0008               	return
  1696                           
  1697                           ;Button_src.c: 173:       write_cmd(0x1);
  1698  00EB  3001               	movlw	1
  1699  00EC  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  1700  00F1                     l607:	
  1701                           ;Button_src.c: 174:       for(;;){
  1702                           
  1703                           
  1704                           ;Button_src.c: 175:             write_cmd(0x80);
  1705  00F1  3080               	movlw	128
  1706  00F2  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  1707                           
  1708                           ;Button_src.c: 176:             write_char('T');
  1709  00F7  3054               	movlw	84
  1710  00F8  160A  118A  26BB  120A  118A  	fcall	_write_char
  1711                           
  1712                           ;Button_src.c: 177:             write_char('i');
  1713  00FD  3069               	movlw	105
  1714  00FE  160A  118A  26BB  120A  118A  	fcall	_write_char
  1715                           
  1716                           ;Button_src.c: 178:             write_char('m');
  1717  0103  306D               	movlw	109
  1718  0104  160A  118A  26BB  120A  118A  	fcall	_write_char
  1719                           
  1720                           ;Button_src.c: 179:             write_char('e');
  1721  0109  3065               	movlw	101
  1722  010A  160A  118A  26BB  120A  118A  	fcall	_write_char
  1723                           
  1724                           ;Button_src.c: 180:             write_char('_');
  1725  010F  305F               	movlw	95
  1726  0110  160A  118A  26BB  120A  118A  	fcall	_write_char
  1727                           
  1728                           ;Button_src.c: 181:             write_char('S');
  1729  0115  3053               	movlw	83
  1730  0116  160A  118A  26BB  120A  118A  	fcall	_write_char
  1731                           
  1732                           ;Button_src.c: 182:             write_char('e');
  1733  011B  3065               	movlw	101
  1734  011C  160A  118A  26BB  120A  118A  	fcall	_write_char
  1735                           
  1736                           ;Button_src.c: 183:             write_char('t');
  1737  0121  3074               	movlw	116
  1738  0122  160A  118A  26BB  120A  118A  	fcall	_write_char
  1739                           
  1740                           ;Button_src.c: 184:             write_char('t');
  1741  0127  3074               	movlw	116
  1742  0128  160A  118A  26BB  120A  118A  	fcall	_write_char
  1743                           
  1744                           ;Button_src.c: 185:             write_char('i');
  1745  012D  3069               	movlw	105
  1746  012E  160A  118A  26BB  120A  118A  	fcall	_write_char
  1747                           
  1748                           ;Button_src.c: 186:             write_char('n');
  1749  0133  306E               	movlw	110
  1750  0134  160A  118A  26BB  120A  118A  	fcall	_write_char
  1751                           
  1752                           ;Button_src.c: 187:             write_char('g');
  1753  0139  3067               	movlw	103
  1754  013A  160A  118A  26BB  120A  118A  	fcall	_write_char
  1755                           
  1756                           ;Button_src.c: 188:             write_char('s');
  1757  013F  3073               	movlw	115
  1758  0140  160A  118A  26BB  120A  118A  	fcall	_write_char
  1759                           
  1760                           ;Button_src.c: 190:             RC0 = 1;
  1761  0145  1407               	bsf	7,0	;volatile
  1762                           
  1763                           ;Button_src.c: 191:             RC1 = 0;
  1764  0146  1087               	bcf	7,1	;volatile
  1765                           
  1766                           ;Button_src.c: 192:             RC2 = 1;
  1767  0147  1507               	bsf	7,2	;volatile
  1768                           
  1769                           ;Button_src.c: 193:             RC3 = 1;
  1770  0148  1587               	bsf	7,3	;volatile
  1771                           
  1772                           ;Button_src.c: 195:             if(RC7 == 0 && b =='x'){
  1773  0149  1B87               	btfsc	7,7	;volatile
  1774  014A  29BC               	goto	l3898
  1775  014B  3078               	movlw	120
  1776  014C  0656               	xorwf	_b,w
  1777  014D  1D03               	btfss	3,2
  1778  014E  29BC               	goto	l3898
  1779                           
  1780                           ;Button_src.c: 196:                 if(stats == 1)
  1781  014F  0333               	decf	_stats,w
  1782  0150  0434               	iorwf	_stats+1,w
  1783  0151  1D03               	btfss	3,2
  1784  0152  2957               	goto	l609
  1785                           
  1786                           ;Button_src.c: 197:                    a++;
  1787  0153  3001               	movlw	1
  1788  0154  00E7               	movwf	??_time_settings
  1789  0155  0867               	movf	??_time_settings,w
  1790  0156  07D7               	addwf	_a,f
  1791  0157                     l609:	
  1792                           
  1793                           ;Button_src.c: 198:                 if(stats == 0){
  1794  0157  0833               	movf	_stats,w
  1795  0158  0434               	iorwf	_stats+1,w
  1796  0159  1D03               	btfss	3,2
  1797  015A  295F               	goto	l610
  1798                           
  1799                           ;Button_src.c: 199:                    stats = 1;
  1800  015B  3001               	movlw	1
  1801  015C  00B3               	movwf	_stats
  1802  015D  3000               	movlw	0
  1803  015E  00B4               	movwf	_stats+1
  1804  015F                     l610:	
  1805                           ;Button_src.c: 200:                 }
  1806                           
  1807                           
  1808                           ;Button_src.c: 202:                     x++ ;
  1809  015F  3001               	movlw	1
  1810  0160  07BF               	addwf	_x,f
  1811  0161  1803               	skipnc
  1812  0162  0AC0               	incf	_x+1,f
  1813  0163  3000               	movlw	0
  1814  0164  07C0               	addwf	_x+1,f
  1815                           
  1816                           ;Button_src.c: 203:                     x = modulus_func(x,10);
  1817  0165  0840               	movf	_x+1,w
  1818  0166  00F8               	movwf	modulus_func@x+1
  1819  0167  083F               	movf	_x,w
  1820  0168  00F7               	movwf	modulus_func@x
  1821  0169  300A               	movlw	10
  1822  016A  00F9               	movwf	modulus_func@y
  1823  016B  3000               	movlw	0
  1824  016C  00FA               	movwf	modulus_func@y+1
  1825  016D  160A  118A  2648  120A  118A  	fcall	_modulus_func
  1826  0172  0878               	movf	?_modulus_func+1,w
  1827  0173  00C0               	movwf	_x+1
  1828  0174  0877               	movf	?_modulus_func,w
  1829  0175  00BF               	movwf	_x
  1830                           
  1831                           ;Button_src.c: 204:                     if (p == 1){
  1832  0176  032F               	decf	_p,w
  1833  0177  0430               	iorwf	_p+1,w
  1834  0178  1D03               	btfss	3,2
  1835  0179  2993               	goto	l3884
  1836                           
  1837                           ;Button_src.c: 205:                         y = incrementor(y,x,'0');
  1838  017A  083E               	movf	_y+1,w
  1839  017B  00E3               	movwf	incrementor@upper_val+1
  1840  017C  083D               	movf	_y,w
  1841  017D  00E2               	movwf	incrementor@upper_val
  1842  017E  0840               	movf	_x+1,w
  1843  017F  00E5               	movwf	incrementor@lower_val+1
  1844  0180  083F               	movf	_x,w
  1845  0181  00E4               	movwf	incrementor@lower_val
  1846  0182  3030               	movlw	48
  1847  0183  00E7               	movwf	??_time_settings
  1848  0184  0867               	movf	??_time_settings,w
  1849  0185  00E6               	movwf	incrementor@z
  1850  0186  160A  118A  278E  120A  118A  	fcall	_incrementor
  1851  018B  00E8               	movwf	??_time_settings+1
  1852  018C  01E9               	clrf	??_time_settings+2
  1853  018D  0868               	movf	??_time_settings+1,w
  1854  018E  00BD               	movwf	_y
  1855  018F  0869               	movf	??_time_settings+2,w
  1856  0190  00BE               	movwf	_y+1
  1857                           
  1858                           ;Button_src.c: 206:                         p = 0;
  1859  0191  01AF               	clrf	_p
  1860  0192  01B0               	clrf	_p+1
  1861  0193                     l3884:	
  1862                           
  1863                           ;Button_src.c: 208:                     if (x == 9){
  1864  0193  3009               	movlw	9
  1865  0194  063F               	xorwf	_x,w
  1866  0195  0440               	iorwf	_x+1,w
  1867  0196  1D03               	btfss	3,2
  1868  0197  299C               	goto	l3888
  1869                           
  1870                           ;Button_src.c: 209:                         p = 1;
  1871  0198  3001               	movlw	1
  1872  0199  00AF               	movwf	_p
  1873  019A  3000               	movlw	0
  1874  019B  00B0               	movwf	_p+1
  1875  019C                     l3888:	
  1876                           
  1877                           ;Button_src.c: 213:                     a = time_date_hex_terminator(a,'T');
  1878  019C  3054               	movlw	84
  1879  019D  00E7               	movwf	??_time_settings
  1880  019E  0867               	movf	??_time_settings,w
  1881  019F  00F0               	movwf	time_date_hex_terminator@limiter
  1882  01A0  0857               	movf	_a,w
  1883  01A1  160A  118A  262A  120A  118A  	fcall	_time_date_hex_terminator
  1884  01A6  00E8               	movwf	??_time_settings+1
  1885  01A7  0868               	movf	??_time_settings+1,w
  1886  01A8  00D7               	movwf	_a
  1887                           
  1888                           ;Button_src.c: 214:                     if(y == 2 && x == 4){
  1889  01A9  3002               	movlw	2
  1890  01AA  063D               	xorwf	_y,w
  1891  01AB  043E               	iorwf	_y+1,w
  1892  01AC  1D03               	btfss	3,2
  1893  01AD  29B7               	goto	l3896
  1894  01AE  3004               	movlw	4
  1895  01AF  063F               	xorwf	_x,w
  1896  01B0  0440               	iorwf	_x+1,w
  1897  01B1  1D03               	btfss	3,2
  1898  01B2  29B7               	goto	l3896
  1899                           
  1900                           ;Button_src.c: 215:                         x = 0;
  1901  01B3  01BF               	clrf	_x
  1902  01B4  01C0               	clrf	_x+1
  1903                           
  1904                           ;Button_src.c: 216:                         y = 0;
  1905  01B5  01BD               	clrf	_y
  1906  01B6  01BE               	clrf	_y+1
  1907  01B7                     l3896:	
  1908                           
  1909                           ;Button_src.c: 218:                     button_delay();
  1910  01B7  160A  118A  2669  120A  118A  	fcall	_button_delay
  1911  01BC                     l3898:	
  1912                           
  1913                           ;Button_src.c: 220:             if(RC7==0 && b == 'y'){
  1914  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1915  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1916  01BE  1B87               	btfsc	7,7	;volatile
  1917  01BF  2A3A               	goto	l3932
  1918  01C0  3079               	movlw	121
  1919  01C1  0656               	xorwf	_b,w
  1920  01C2  1D03               	btfss	3,2
  1921  01C3  2A3A               	goto	l3932
  1922                           
  1923                           ;Button_src.c: 221:                  if(stats == 1)
  1924  01C4  0333               	decf	_stats,w
  1925  01C5  0434               	iorwf	_stats+1,w
  1926  01C6  1D03               	btfss	3,2
  1927  01C7  29CC               	goto	l615
  1928                           
  1929                           ;Button_src.c: 222:                    c++;
  1930  01C8  3001               	movlw	1
  1931  01C9  00E7               	movwf	??_time_settings
  1932  01CA  0867               	movf	??_time_settings,w
  1933  01CB  07D5               	addwf	_c,f
  1934  01CC                     l615:	
  1935                           
  1936                           ;Button_src.c: 223:                 if(stats == 0){
  1937  01CC  0833               	movf	_stats,w
  1938  01CD  0434               	iorwf	_stats+1,w
  1939  01CE  1D03               	btfss	3,2
  1940  01CF  29D4               	goto	l616
  1941                           
  1942                           ;Button_src.c: 224:                     stats = 1;
  1943  01D0  3001               	movlw	1
  1944  01D1  00B3               	movwf	_stats
  1945  01D2  3000               	movlw	0
  1946  01D3  00B4               	movwf	_stats+1
  1947  01D4                     l616:	
  1948                           ;Button_src.c: 225:                 }
  1949                           
  1950                           
  1951                           ;Button_src.c: 227:                     t++;
  1952  01D4  3001               	movlw	1
  1953  01D5  07C3               	addwf	_t,f
  1954  01D6  1803               	skipnc
  1955  01D7  0AC4               	incf	_t+1,f
  1956  01D8  3000               	movlw	0
  1957  01D9  07C4               	addwf	_t+1,f
  1958                           
  1959                           ;Button_src.c: 228:                     t = modulus_func(t,10);
  1960  01DA  0844               	movf	_t+1,w
  1961  01DB  00F8               	movwf	modulus_func@x+1
  1962  01DC  0843               	movf	_t,w
  1963  01DD  00F7               	movwf	modulus_func@x
  1964  01DE  300A               	movlw	10
  1965  01DF  00F9               	movwf	modulus_func@y
  1966  01E0  3000               	movlw	0
  1967  01E1  00FA               	movwf	modulus_func@y+1
  1968  01E2  160A  118A  2648  120A  118A  	fcall	_modulus_func
  1969  01E7  0878               	movf	?_modulus_func+1,w
  1970  01E8  00C4               	movwf	_t+1
  1971  01E9  0877               	movf	?_modulus_func,w
  1972  01EA  00C3               	movwf	_t
  1973                           
  1974                           ;Button_src.c: 229:                       if (p == 1){
  1975  01EB  032F               	decf	_p,w
  1976  01EC  0430               	iorwf	_p+1,w
  1977  01ED  1D03               	btfss	3,2
  1978  01EE  2A08               	goto	l3916
  1979                           
  1980                           ;Button_src.c: 230:                         w = incrementor(w,t,'0');
  1981  01EF  0842               	movf	_w+1,w
  1982  01F0  00E3               	movwf	incrementor@upper_val+1
  1983  01F1  0841               	movf	_w,w
  1984  01F2  00E2               	movwf	incrementor@upper_val
  1985  01F3  0844               	movf	_t+1,w
  1986  01F4  00E5               	movwf	incrementor@lower_val+1
  1987  01F5  0843               	movf	_t,w
  1988  01F6  00E4               	movwf	incrementor@lower_val
  1989  01F7  3030               	movlw	48
  1990  01F8  00E7               	movwf	??_time_settings
  1991  01F9  0867               	movf	??_time_settings,w
  1992  01FA  00E6               	movwf	incrementor@z
  1993  01FB  160A  118A  278E  120A  118A  	fcall	_incrementor
  1994  0200  00E8               	movwf	??_time_settings+1
  1995  0201  01E9               	clrf	??_time_settings+2
  1996  0202  0868               	movf	??_time_settings+1,w
  1997  0203  00C1               	movwf	_w
  1998  0204  0869               	movf	??_time_settings+2,w
  1999  0205  00C2               	movwf	_w+1
  2000                           
  2001                           ;Button_src.c: 231:                         p = 0;
  2002  0206  01AF               	clrf	_p
  2003  0207  01B0               	clrf	_p+1
  2004  0208                     l3916:	
  2005                           
  2006                           ;Button_src.c: 233:                     if (t == 9){
  2007  0208  3009               	movlw	9
  2008  0209  0643               	xorwf	_t,w
  2009  020A  0444               	iorwf	_t+1,w
  2010  020B  1D03               	btfss	3,2
  2011  020C  2A11               	goto	l3920
  2012                           
  2013                           ;Button_src.c: 234:                         p = 1;
  2014  020D  3001               	movlw	1
  2015  020E  00AF               	movwf	_p
  2016  020F  3000               	movlw	0
  2017  0210  00B0               	movwf	_p+1
  2018  0211                     l3920:	
  2019                           
  2020                           ;Button_src.c: 236:                     w = incrementor(w,t,'9');
  2021  0211  0842               	movf	_w+1,w
  2022  0212  00E3               	movwf	incrementor@upper_val+1
  2023  0213  0841               	movf	_w,w
  2024  0214  00E2               	movwf	incrementor@upper_val
  2025  0215  0844               	movf	_t+1,w
  2026  0216  00E5               	movwf	incrementor@lower_val+1
  2027  0217  0843               	movf	_t,w
  2028  0218  00E4               	movwf	incrementor@lower_val
  2029  0219  3039               	movlw	57
  2030  021A  00E7               	movwf	??_time_settings
  2031  021B  0867               	movf	??_time_settings,w
  2032  021C  00E6               	movwf	incrementor@z
  2033  021D  160A  118A  278E  120A  118A  	fcall	_incrementor
  2034  0222  00E8               	movwf	??_time_settings+1
  2035  0223  01E9               	clrf	??_time_settings+2
  2036  0224  0868               	movf	??_time_settings+1,w
  2037  0225  00C1               	movwf	_w
  2038  0226  0869               	movf	??_time_settings+2,w
  2039  0227  00C2               	movwf	_w+1
  2040                           
  2041                           ;Button_src.c: 237:                     if(c == (0x59 + 1)){
  2042  0228  305A               	movlw	90
  2043  0229  0655               	xorwf	_c,w
  2044  022A  1903               	btfsc	3,2
  2045                           
  2046                           ;Button_src.c: 238:                         c = 0x00;
  2047  022B  01D5               	clrf	_c
  2048                           
  2049                           ;Button_src.c: 240:                     if(w == 6){
  2050  022C  3006               	movlw	6
  2051  022D  0641               	xorwf	_w,w
  2052  022E  0442               	iorwf	_w+1,w
  2053  022F  1D03               	btfss	3,2
  2054  0230  2A35               	goto	l3930
  2055                           
  2056                           ;Button_src.c: 241:                         w = 0;
  2057  0231  01C1               	clrf	_w
  2058  0232  01C2               	clrf	_w+1
  2059                           
  2060                           ;Button_src.c: 242:                         t = 0;
  2061  0233  01C3               	clrf	_t
  2062  0234  01C4               	clrf	_t+1
  2063  0235                     l3930:	
  2064                           
  2065                           ;Button_src.c: 244:                     button_delay();
  2066  0235  160A  118A  2669  120A  118A  	fcall	_button_delay
  2067  023A                     l3932:	
  2068                           
  2069                           ;Button_src.c: 247:              write_cmd(0x88);
  2070  023A  3088               	movlw	136
  2071  023B  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  2072                           
  2073                           ;Button_src.c: 248:                     table[2] = a;
  2074  0240  0857               	movf	_a,w
  2075  0241  00E7               	movwf	??_time_settings
  2076  0242  0867               	movf	??_time_settings,w
  2077  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2078  0244  00A2               	movwf	(_table^(0+128)+2)
  2079                           
  2080                           ;Button_src.c: 249:                     table[1] = c;
  2081  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0246  0855               	movf	_c,w
  2083  0247  00E7               	movwf	??_time_settings
  2084  0248  0867               	movf	??_time_settings,w
  2085  0249  1683               	bsf	3,5	;RP0=1, select bank1
  2086  024A  00A1               	movwf	(_table^(0+128)+1)
  2087                           
  2088                           ;Button_src.c: 254:                     a = time_date_delimiter(a,0x11,'9');
  2089  024B  3011               	movlw	17
  2090  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2091  024D  00E7               	movwf	??_time_settings
  2092  024E  0867               	movf	??_time_settings,w
  2093  024F  00F0               	movwf	time_date_delimiter@hex
  2094  0250  3039               	movlw	57
  2095  0251  00E8               	movwf	??_time_settings+1
  2096  0252  0868               	movf	??_time_settings+1,w
  2097  0253  00F1               	movwf	time_date_delimiter@limiter
  2098  0254  0857               	movf	_a,w
  2099  0255  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2100  025A  00E9               	movwf	??_time_settings+2
  2101  025B  0869               	movf	??_time_settings+2,w
  2102  025C  00D7               	movwf	_a
  2103                           
  2104                           ;Button_src.c: 255:                     a = time_date_delimiter(a,0x21,'J');
  2105  025D  3021               	movlw	33
  2106  025E  00E7               	movwf	??_time_settings
  2107  025F  0867               	movf	??_time_settings,w
  2108  0260  00F0               	movwf	time_date_delimiter@hex
  2109  0261  304A               	movlw	74
  2110  0262  00E8               	movwf	??_time_settings+1
  2111  0263  0868               	movf	??_time_settings+1,w
  2112  0264  00F1               	movwf	time_date_delimiter@limiter
  2113  0265  0857               	movf	_a,w
  2114  0266  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2115  026B  00E9               	movwf	??_time_settings+2
  2116  026C  0869               	movf	??_time_settings+2,w
  2117  026D  00D7               	movwf	_a
  2118                           
  2119                           ;Button_src.c: 257:                     c = time_date_delimiter(c,0x11,'9');
  2120  026E  3011               	movlw	17
  2121  026F  00E7               	movwf	??_time_settings
  2122  0270  0867               	movf	??_time_settings,w
  2123  0271  00F0               	movwf	time_date_delimiter@hex
  2124  0272  3039               	movlw	57
  2125  0273  00E8               	movwf	??_time_settings+1
  2126  0274  0868               	movf	??_time_settings+1,w
  2127  0275  00F1               	movwf	time_date_delimiter@limiter
  2128  0276  0855               	movf	_c,w
  2129  0277  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2130  027C  00E9               	movwf	??_time_settings+2
  2131  027D  0869               	movf	??_time_settings+2,w
  2132  027E  00D5               	movwf	_c
  2133                           
  2134                           ;Button_src.c: 258:                     c = time_date_delimiter(c,0x21,'J');
  2135  027F  3021               	movlw	33
  2136  0280  00E7               	movwf	??_time_settings
  2137  0281  0867               	movf	??_time_settings,w
  2138  0282  00F0               	movwf	time_date_delimiter@hex
  2139  0283  304A               	movlw	74
  2140  0284  00E8               	movwf	??_time_settings+1
  2141  0285  0868               	movf	??_time_settings+1,w
  2142  0286  00F1               	movwf	time_date_delimiter@limiter
  2143  0287  0855               	movf	_c,w
  2144  0288  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2145  028D  00E9               	movwf	??_time_settings+2
  2146  028E  0869               	movf	??_time_settings+2,w
  2147  028F  00D5               	movwf	_c
  2148                           
  2149                           ;Button_src.c: 259:                     c = time_date_delimiter(c,0x31,'Y');
  2150  0290  3031               	movlw	49
  2151  0291  00E7               	movwf	??_time_settings
  2152  0292  0867               	movf	??_time_settings,w
  2153  0293  00F0               	movwf	time_date_delimiter@hex
  2154  0294  3059               	movlw	89
  2155  0295  00E8               	movwf	??_time_settings+1
  2156  0296  0868               	movf	??_time_settings+1,w
  2157  0297  00F1               	movwf	time_date_delimiter@limiter
  2158  0298  0855               	movf	_c,w
  2159  0299  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2160  029E  00E9               	movwf	??_time_settings+2
  2161  029F  0869               	movf	??_time_settings+2,w
  2162  02A0  00D5               	movwf	_c
  2163                           
  2164                           ;Button_src.c: 260:                     c = time_date_delimiter(c,0x41,'j');
  2165  02A1  3041               	movlw	65
  2166  02A2  00E7               	movwf	??_time_settings
  2167  02A3  0867               	movf	??_time_settings,w
  2168  02A4  00F0               	movwf	time_date_delimiter@hex
  2169  02A5  306A               	movlw	106
  2170  02A6  00E8               	movwf	??_time_settings+1
  2171  02A7  0868               	movf	??_time_settings+1,w
  2172  02A8  00F1               	movwf	time_date_delimiter@limiter
  2173  02A9  0855               	movf	_c,w
  2174  02AA  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2175  02AF  00E9               	movwf	??_time_settings+2
  2176  02B0  0869               	movf	??_time_settings+2,w
  2177  02B1  00D5               	movwf	_c
  2178                           
  2179                           ;Button_src.c: 261:                     c = time_date_delimiter(c,0x51,'z');
  2180  02B2  3051               	movlw	81
  2181  02B3  00E7               	movwf	??_time_settings
  2182  02B4  0867               	movf	??_time_settings,w
  2183  02B5  00F0               	movwf	time_date_delimiter@hex
  2184  02B6  307A               	movlw	122
  2185  02B7  00E8               	movwf	??_time_settings+1
  2186  02B8  0868               	movf	??_time_settings+1,w
  2187  02B9  00F1               	movwf	time_date_delimiter@limiter
  2188  02BA  0855               	movf	_c,w
  2189  02BB  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  2190  02C0  00E9               	movwf	??_time_settings+2
  2191  02C1  0869               	movf	??_time_settings+2,w
  2192  02C2  00D5               	movwf	_c
  2193                           
  2194                           ;Button_src.c: 263:                   RC0 = 0;
  2195  02C3  1007               	bcf	7,0	;volatile
  2196                           
  2197                           ;Button_src.c: 264:                   RC1 = 1;
  2198  02C4  1487               	bsf	7,1	;volatile
  2199                           
  2200                           ;Button_src.c: 265:                   RC2 = 1;
  2201  02C5  1507               	bsf	7,2	;volatile
  2202                           
  2203                           ;Button_src.c: 266:                   RC3 = 1;
  2204  02C6  1587               	bsf	7,3	;volatile
  2205                           
  2206                           ;Button_src.c: 267:                     if (RC6 == 0 ){
  2207  02C7  1B07               	btfsc	7,6	;volatile
  2208  02C8  2ADD               	goto	l621
  2209                           
  2210                           ;Button_src.c: 268:                           write_cmd(0x1);
  2211  02C9  3001               	movlw	1
  2212  02CA  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  2213                           
  2214                           ;Button_src.c: 269:                           a = 0x00;
  2215  02CF  01D7               	clrf	_a
  2216                           
  2217                           ;Button_src.c: 270:                           c = 0x00;
  2218  02D0  01D5               	clrf	_c
  2219                           
  2220                           ;Button_src.c: 271:                           x = 0;
  2221  02D1  01BF               	clrf	_x
  2222  02D2  01C0               	clrf	_x+1
  2223                           
  2224                           ;Button_src.c: 272:                           y = 0;
  2225  02D3  01BD               	clrf	_y
  2226  02D4  01BE               	clrf	_y+1
  2227                           
  2228                           ;Button_src.c: 273:                           w = 0;
  2229  02D5  01C1               	clrf	_w
  2230  02D6  01C2               	clrf	_w+1
  2231                           
  2232                           ;Button_src.c: 274:                           t = 0;
  2233  02D7  01C3               	clrf	_t
  2234  02D8  01C4               	clrf	_t+1
  2235                           
  2236                           ;Button_src.c: 275:                           set_time();
  2237  02D9  160A  118A  27D8   	fcall	_set_time
  2238  02DC  0008               	return
  2239  02DD                     l621:	
  2240                           ;Button_src.c: 277:                             }
  2241                           
  2242                           
  2243                           ;Button_src.c: 278:                   RC0 = 1;
  2244  02DD  1407               	bsf	7,0	;volatile
  2245                           
  2246                           ;Button_src.c: 279:                   RC1 = 1;
  2247  02DE  1487               	bsf	7,1	;volatile
  2248                           
  2249                           ;Button_src.c: 280:                   RC2 = 0;
  2250  02DF  1107               	bcf	7,2	;volatile
  2251                           
  2252                           ;Button_src.c: 281:                   RC3 = 1;
  2253  02E0  1587               	bsf	7,3	;volatile
  2254                           
  2255                           ;Button_src.c: 282:                   z = modulus_func(z,2);
  2256  02E1  083C               	movf	_z+1,w
  2257  02E2  00F8               	movwf	modulus_func@x+1
  2258  02E3  083B               	movf	_z,w
  2259  02E4  00F7               	movwf	modulus_func@x
  2260  02E5  3002               	movlw	2
  2261  02E6  00F9               	movwf	modulus_func@y
  2262  02E7  3000               	movlw	0
  2263  02E8  00FA               	movwf	modulus_func@y+1
  2264  02E9  160A  118A  2648  120A  118A  	fcall	_modulus_func
  2265  02EE  0878               	movf	?_modulus_func+1,w
  2266  02EF  00BC               	movwf	_z+1
  2267  02F0  0877               	movf	?_modulus_func,w
  2268  02F1  00BB               	movwf	_z
  2269                           
  2270                           ;Button_src.c: 283:                   if(RC4 == 0 && z ==0){
  2271  02F2  1A07               	btfsc	7,4	;volatile
  2272  02F3  2B2D               	goto	l3992
  2273  02F4  083B               	movf	_z,w
  2274  02F5  043C               	iorwf	_z+1,w
  2275  02F6  1D03               	btfss	3,2
  2276  02F7  2B2D               	goto	l3992
  2277                           
  2278                           ;Button_src.c: 284:                       write_cmd(0x90);
  2279  02F8  3090               	movlw	144
  2280  02F9  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  2281                           
  2282                           ;Button_src.c: 285:                       write_char('H');
  2283  02FE  3048               	movlw	72
  2284  02FF  160A  118A  26BB  120A  118A  	fcall	_write_char
  2285                           
  2286                           ;Button_src.c: 286:                       write_char('o');
  2287  0304  306F               	movlw	111
  2288  0305  160A  118A  26BB  120A  118A  	fcall	_write_char
  2289                           
  2290                           ;Button_src.c: 287:                       write_char('u');
  2291  030A  3075               	movlw	117
  2292  030B  160A  118A  26BB  120A  118A  	fcall	_write_char
  2293                           
  2294                           ;Button_src.c: 288:                       write_char('r');
  2295  0310  3072               	movlw	114
  2296  0311  160A  118A  26BB  120A  118A  	fcall	_write_char
  2297                           
  2298                           ;Button_src.c: 289:                       write_char(':');
  2299  0316  303A               	movlw	58
  2300  0317  160A  118A  26BB  120A  118A  	fcall	_write_char
  2301                           
  2302                           ;Button_src.c: 290:                       b = 'x';
  2303  031C  3078               	movlw	120
  2304  031D  00E7               	movwf	??_time_settings
  2305  031E  0867               	movf	??_time_settings,w
  2306  031F  00D6               	movwf	_b
  2307                           
  2308                           ;Button_src.c: 291:                       button_delay();
  2309  0320  160A  118A  2669  120A  118A  	fcall	_button_delay
  2310                           
  2311                           ;Button_src.c: 292:                       z++;
  2312  0325  3001               	movlw	1
  2313  0326  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0327  1303               	bcf	3,6	;RP1=0, select bank0
  2315  0328  07BB               	addwf	_z,f
  2316  0329  1803               	skipnc
  2317  032A  0ABC               	incf	_z+1,f
  2318  032B  3000               	movlw	0
  2319  032C  07BC               	addwf	_z+1,f
  2320  032D                     l3992:	
  2321                           
  2322                           ;Button_src.c: 294:                   RC0 = 1;
  2323  032D  1407               	bsf	7,0	;volatile
  2324                           
  2325                           ;Button_src.c: 295:                   RC1 = 1;
  2326  032E  1487               	bsf	7,1	;volatile
  2327                           
  2328                           ;Button_src.c: 296:                   RC2 = 0;
  2329  032F  1107               	bcf	7,2	;volatile
  2330                           
  2331                           ;Button_src.c: 297:                   RC3 = 1;
  2332  0330  1587               	bsf	7,3	;volatile
  2333                           
  2334                           ;Button_src.c: 299:                   if(RC4 == 0&& z ==1){
  2335  0331  1A07               	btfsc	7,4	;volatile
  2336  0332  2B6A               	goto	l624
  2337  0333  033B               	decf	_z,w
  2338  0334  043C               	iorwf	_z+1,w
  2339  0335  1D03               	btfss	3,2
  2340  0336  2B6A               	goto	l624
  2341                           
  2342                           ;Button_src.c: 300:                     z++;
  2343  0337  3001               	movlw	1
  2344  0338  07BB               	addwf	_z,f
  2345  0339  1803               	skipnc
  2346  033A  0ABC               	incf	_z+1,f
  2347  033B  3000               	movlw	0
  2348  033C  07BC               	addwf	_z+1,f
  2349                           
  2350                           ;Button_src.c: 301:                     button_delay();
  2351  033D  160A  118A  2669  120A  118A  	fcall	_button_delay
  2352                           
  2353                           ;Button_src.c: 302:                     write_cmd(0x90);
  2354  0342  3090               	movlw	144
  2355  0343  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  2356                           
  2357                           ;Button_src.c: 303:                     write_char('M');
  2358  0348  304D               	movlw	77
  2359  0349  160A  118A  26BB  120A  118A  	fcall	_write_char
  2360                           
  2361                           ;Button_src.c: 304:                     write_char('i');
  2362  034E  3069               	movlw	105
  2363  034F  160A  118A  26BB  120A  118A  	fcall	_write_char
  2364                           
  2365                           ;Button_src.c: 305:                     write_char('n');
  2366  0354  306E               	movlw	110
  2367  0355  160A  118A  26BB  120A  118A  	fcall	_write_char
  2368                           
  2369                           ;Button_src.c: 306:                     write_char('s');
  2370  035A  3073               	movlw	115
  2371  035B  160A  118A  26BB  120A  118A  	fcall	_write_char
  2372                           
  2373                           ;Button_src.c: 307:                     write_char(':');
  2374  0360  303A               	movlw	58
  2375  0361  160A  118A  26BB  120A  118A  	fcall	_write_char
  2376                           
  2377                           ;Button_src.c: 308:                     b = 'y';
  2378  0366  3079               	movlw	121
  2379  0367  00E7               	movwf	??_time_settings
  2380  0368  0867               	movf	??_time_settings,w
  2381  0369  00D6               	movwf	_b
  2382  036A                     l624:	
  2383                           ;Button_src.c: 309:                   }
  2384                           
  2385                           
  2386                           ;Button_src.c: 310:                    write_cmd(0x88);
  2387  036A  3088               	movlw	136
  2388  036B  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  2389                           
  2390                           ;Button_src.c: 317:                   RC0 = 1;
  2391  0370  1407               	bsf	7,0	;volatile
  2392                           
  2393                           ;Button_src.c: 318:                   RC1 = 1;
  2394  0371  1487               	bsf	7,1	;volatile
  2395                           
  2396                           ;Button_src.c: 319:                   RC2 = 0;
  2397  0372  1107               	bcf	7,2	;volatile
  2398                           
  2399                           ;Button_src.c: 320:                   RC3 = 1;
  2400  0373  1587               	bsf	7,3	;volatile
  2401                           
  2402                           ;Button_src.c: 322:              write_cmd(0x88);
  2403  0374  3088               	movlw	136
  2404  0375  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  2405                           
  2406                           ;Button_src.c: 323:              write_char('T');
  2407  037A  3054               	movlw	84
  2408  037B  160A  118A  26BB  120A  118A  	fcall	_write_char
  2409                           
  2410                           ;Button_src.c: 324:              write_char('i');
  2411  0380  3069               	movlw	105
  2412  0381  160A  118A  26BB  120A  118A  	fcall	_write_char
  2413                           
  2414                           ;Button_src.c: 325:              write_char('m');
  2415  0386  306D               	movlw	109
  2416  0387  160A  118A  26BB  120A  118A  	fcall	_write_char
  2417                           
  2418                           ;Button_src.c: 326:              write_char('e');
  2419  038C  3065               	movlw	101
  2420  038D  160A  118A  26BB  120A  118A  	fcall	_write_char
  2421                           
  2422                           ;Button_src.c: 327:              write_char(':');
  2423  0392  303A               	movlw	58
  2424  0393  160A  118A  26BB  120A  118A  	fcall	_write_char
  2425                           
  2426                           ;Button_src.c: 328:              write_char(y + '0');
  2427  0398  083D               	movf	_y,w
  2428  0399  3E30               	addlw	48
  2429  039A  160A  118A  26BB  120A  118A  	fcall	_write_char
  2430                           
  2431                           ;Button_src.c: 329:              write_char(x + '0');
  2432  039F  083F               	movf	_x,w
  2433  03A0  3E30               	addlw	48
  2434  03A1  160A  118A  26BB  120A  118A  	fcall	_write_char
  2435                           
  2436                           ;Button_src.c: 330:              write_char(':');
  2437  03A6  303A               	movlw	58
  2438  03A7  160A  118A  26BB  120A  118A  	fcall	_write_char
  2439                           
  2440                           ;Button_src.c: 331:              write_char(w + '0');
  2441  03AC  0841               	movf	_w,w
  2442  03AD  3E30               	addlw	48
  2443  03AE  160A  118A  26BB  120A  118A  	fcall	_write_char
  2444                           
  2445                           ;Button_src.c: 332:              write_char(t + '0');
  2446  03B3  0843               	movf	_t,w
  2447  03B4  3E30               	addlw	48
  2448  03B5  160A  118A  26BB  120A  118A  	fcall	_write_char
  2449                           
  2450                           ;Button_src.c: 334:             RC0 = 0;
  2451  03BA  1007               	bcf	7,0	;volatile
  2452                           
  2453                           ;Button_src.c: 335:             RC1 = 1;
  2454  03BB  1487               	bsf	7,1	;volatile
  2455                           
  2456                           ;Button_src.c: 336:             RC2 = 1;
  2457  03BC  1507               	bsf	7,2	;volatile
  2458                           
  2459                           ;Button_src.c: 337:             RC3 = 1;
  2460  03BD  1587               	bsf	7,3	;volatile
  2461                           
  2462                           ;Button_src.c: 338:             if (RC7 == 0 ){
  2463  03BE  1B87               	btfsc	7,7	;volatile
  2464  03BF  28F1               	goto	l607
  2465                           
  2466                           ;Button_src.c: 339:             a = 0x00;
  2467  03C0  01D7               	clrf	_a
  2468                           
  2469                           ;Button_src.c: 340:             c = 0x00;
  2470  03C1  01D5               	clrf	_c
  2471                           
  2472                           ;Button_src.c: 341:             x = 0;
  2473  03C2  01BF               	clrf	_x
  2474  03C3  01C0               	clrf	_x+1
  2475                           
  2476                           ;Button_src.c: 342:             y = 0;
  2477  03C4  01BD               	clrf	_y
  2478  03C5  01BE               	clrf	_y+1
  2479                           
  2480                           ;Button_src.c: 343:             w = 0;
  2481  03C6  01C1               	clrf	_w
  2482  03C7  01C2               	clrf	_w+1
  2483                           
  2484                           ;Button_src.c: 344:             t = 0;
  2485  03C8  01C3               	clrf	_t
  2486  03C9  01C4               	clrf	_t+1
  2487                           
  2488                           ;Button_src.c: 345:             write_cmd(0x1);
  2489  03CA  3001               	movlw	1
  2490  03CB  160A  118A  26D2   	fcall	_write_cmd
  2491                           
  2492                           ;Button_src.c: 346:             break;
  2493  03CE  0008               	return
  2494  03CF                     __end_of_time_settings:	
  2495                           
  2496                           	psect	text2
  2497  0DAA                     __ptext2:	
  2498 ;; *************** function _thermometer_threshhold_settings *****************
  2499 ;; Defined at:
  2500 ;;		line 23 in file "Button_src.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  i               2    8[BANK0 ] int 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 300/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2514 ;;      Params:         0       0       0       0       0
  2515 ;;      Locals:         0       2       0       0       0
  2516 ;;      Temps:          0       3       0       0       0
  2517 ;;      Totals:         0       5       0       0       0
  2518 ;;Total ram usage:        5 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    3
  2521 ;; This function calls:
  2522 ;;		_button_delay
  2523 ;;		_decrementor
  2524 ;;		_incrementor
  2525 ;;		_modulus_func
  2526 ;;		_write_char
  2527 ;;		_write_cmd
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _thermometer_threshhold_settings
  2535  0DAA                     _thermometer_threshhold_settings:	
  2536                           
  2537                           ;Button_src.c: 24:  RC0 = 1;
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2541  0DAA  1407               	bsf	7,0	;volatile
  2542                           
  2543                           ;Button_src.c: 25:  RC1 = 0;
  2544  0DAB  1087               	bcf	7,1	;volatile
  2545                           
  2546                           ;Button_src.c: 26:  RC2 = 1;
  2547  0DAC  1507               	bsf	7,2	;volatile
  2548                           
  2549                           ;Button_src.c: 27:  RC3 = 1;
  2550  0DAD  1587               	bsf	7,3	;volatile
  2551                           
  2552                           ;Button_src.c: 28:   if (RC4 == 0){
  2553  0DAE  1A07               	btfsc	7,4	;volatile
  2554  0DAF  0008               	return
  2555                           
  2556                           ;Button_src.c: 29:       write_cmd(0x1);
  2557  0DB0  3001               	movlw	1
  2558  0DB1  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2559                           
  2560                           ;Button_src.c: 31:             write_cmd(0x80);
  2561                           
  2562                           ;Button_src.c: 30:       for(;;){
  2563  0DB6  3080               	movlw	128
  2564  0DB7  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2565                           
  2566                           ;Button_src.c: 32:             write_char('t');
  2567  0DBC  3074               	movlw	116
  2568  0DBD  160A  118A  26BB  120A  158A  	fcall	_write_char
  2569                           
  2570                           ;Button_src.c: 33:             write_char('h');
  2571  0DC2  3068               	movlw	104
  2572  0DC3  160A  118A  26BB  120A  158A  	fcall	_write_char
  2573                           
  2574                           ;Button_src.c: 34:             write_char('r');
  2575  0DC8  3072               	movlw	114
  2576  0DC9  160A  118A  26BB  120A  158A  	fcall	_write_char
  2577                           
  2578                           ;Button_src.c: 35:             write_char('e');
  2579  0DCE  3065               	movlw	101
  2580  0DCF  160A  118A  26BB  120A  158A  	fcall	_write_char
  2581                           
  2582                           ;Button_src.c: 36:             write_char('s');
  2583  0DD4  3073               	movlw	115
  2584  0DD5  160A  118A  26BB  120A  158A  	fcall	_write_char
  2585                           
  2586                           ;Button_src.c: 37:             write_char('h');
  2587  0DDA  3068               	movlw	104
  2588  0DDB  160A  118A  26BB  120A  158A  	fcall	_write_char
  2589                           
  2590                           ;Button_src.c: 38:             write_char('o');
  2591  0DE0  306F               	movlw	111
  2592  0DE1  160A  118A  26BB  120A  158A  	fcall	_write_char
  2593                           
  2594                           ;Button_src.c: 39:             write_char('l');
  2595  0DE6  306C               	movlw	108
  2596  0DE7  160A  118A  26BB  120A  158A  	fcall	_write_char
  2597                           
  2598                           ;Button_src.c: 40:             write_char('d');
  2599  0DEC  3064               	movlw	100
  2600  0DED  160A  118A  26BB  120A  158A  	fcall	_write_char
  2601                           
  2602                           ;Button_src.c: 42:             write_cmd(0x90);
  2603  0DF2  3090               	movlw	144
  2604  0DF3  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2605                           
  2606                           ;Button_src.c: 43:             write_char('C');
  2607  0DF8  3043               	movlw	67
  2608  0DF9  160A  118A  26BB  120A  158A  	fcall	_write_char
  2609                           
  2610                           ;Button_src.c: 44:             write_char('u');
  2611  0DFE  3075               	movlw	117
  2612  0DFF  160A  118A  26BB  120A  158A  	fcall	_write_char
  2613                           
  2614                           ;Button_src.c: 45:             write_char('r');
  2615  0E04  3072               	movlw	114
  2616  0E05  160A  118A  26BB  120A  158A  	fcall	_write_char
  2617                           
  2618                           ;Button_src.c: 46:             write_char('r');
  2619  0E0A  3072               	movlw	114
  2620  0E0B  160A  118A  26BB  120A  158A  	fcall	_write_char
  2621                           
  2622                           ;Button_src.c: 47:             write_char('e');
  2623  0E10  3065               	movlw	101
  2624  0E11  160A  118A  26BB  120A  158A  	fcall	_write_char
  2625                           
  2626                           ;Button_src.c: 48:             write_char('n');
  2627  0E16  306E               	movlw	110
  2628  0E17  160A  118A  26BB  120A  158A  	fcall	_write_char
  2629                           
  2630                           ;Button_src.c: 49:             write_char('t');
  2631  0E1C  3074               	movlw	116
  2632  0E1D  160A  118A  26BB  120A  158A  	fcall	_write_char
  2633                           
  2634                           ;Button_src.c: 50:             write_char(':');
  2635  0E22  303A               	movlw	58
  2636  0E23  160A  118A  26BB  120A  158A  	fcall	_write_char
  2637                           
  2638                           ;Button_src.c: 52:             write_char(var1 + '0');
  2639  0E28  0849               	movf	_var1,w
  2640  0E29  3E30               	addlw	48
  2641  0E2A  160A  118A  26BB  120A  158A  	fcall	_write_char
  2642                           
  2643                           ;Button_src.c: 53:             write_char(var2 + '0');
  2644  0E2F  0848               	movf	_var2,w
  2645  0E30  3E30               	addlw	48
  2646  0E31  160A  118A  26BB  120A  158A  	fcall	_write_char
  2647                           
  2648                           ;Button_src.c: 55:             write_cmd(0x88);
  2649  0E36  3088               	movlw	136
  2650  0E37  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2651                           
  2652                           ;Button_src.c: 56:             write_char('S');
  2653  0E3C  3053               	movlw	83
  2654  0E3D  160A  118A  26BB  120A  158A  	fcall	_write_char
  2655                           
  2656                           ;Button_src.c: 57:             write_char('e');
  2657  0E42  3065               	movlw	101
  2658  0E43  160A  118A  26BB  120A  158A  	fcall	_write_char
  2659                           
  2660                           ;Button_src.c: 58:             write_char('t');
  2661  0E48  3074               	movlw	116
  2662  0E49  160A  118A  26BB  120A  158A  	fcall	_write_char
  2663                           
  2664                           ;Button_src.c: 59:             write_char('_');
  2665  0E4E  305F               	movlw	95
  2666  0E4F  160A  118A  26BB  120A  158A  	fcall	_write_char
  2667                           
  2668                           ;Button_src.c: 60:             write_char('t');
  2669  0E54  3074               	movlw	116
  2670  0E55  160A  118A  26BB  120A  158A  	fcall	_write_char
  2671                           
  2672                           ;Button_src.c: 61:             write_char('h');
  2673  0E5A  3068               	movlw	104
  2674  0E5B  160A  118A  26BB  120A  158A  	fcall	_write_char
  2675                           
  2676                           ;Button_src.c: 62:             write_char('r');
  2677  0E60  3072               	movlw	114
  2678  0E61  160A  118A  26BB  120A  158A  	fcall	_write_char
  2679                           
  2680                           ;Button_src.c: 63:             write_char('e');
  2681  0E66  3065               	movlw	101
  2682  0E67  160A  118A  26BB  120A  158A  	fcall	_write_char
  2683                           
  2684                           ;Button_src.c: 64:             write_char('s');
  2685  0E6C  3073               	movlw	115
  2686  0E6D  160A  118A  26BB  120A  158A  	fcall	_write_char
  2687                           
  2688                           ;Button_src.c: 65:             write_char('h');
  2689  0E72  3068               	movlw	104
  2690  0E73  160A  118A  26BB  120A  158A  	fcall	_write_char
  2691                           
  2692                           ;Button_src.c: 66:             write_char('o');
  2693  0E78  306F               	movlw	111
  2694  0E79  160A  118A  26BB  120A  158A  	fcall	_write_char
  2695                           
  2696                           ;Button_src.c: 67:             write_char('l');
  2697  0E7E  306C               	movlw	108
  2698  0E7F  160A  118A  26BB  120A  158A  	fcall	_write_char
  2699                           
  2700                           ;Button_src.c: 68:             write_char('d');
  2701  0E84  3064               	movlw	100
  2702  0E85  160A  118A  26BB  120A  158A  	fcall	_write_char
  2703                           
  2704                           ;Button_src.c: 69:             write_char(':');
  2705  0E8A  303A               	movlw	58
  2706  0E8B  160A  118A  26BB  120A  158A  	fcall	_write_char
  2707                           
  2708                           ;Button_src.c: 71:             write_cmd(0x98);
  2709  0E90  3098               	movlw	152
  2710  0E91  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2711                           
  2712                           ;Button_src.c: 72:             RC0 = 1;
  2713  0E96  1407               	bsf	7,0	;volatile
  2714                           
  2715                           ;Button_src.c: 73:             RC1 = 0;
  2716  0E97  1087               	bcf	7,1	;volatile
  2717                           
  2718                           ;Button_src.c: 74:             RC2 = 1;
  2719  0E98  1507               	bsf	7,2	;volatile
  2720                           
  2721                           ;Button_src.c: 75:             RC3 = 1;
  2722  0E99  1587               	bsf	7,3	;volatile
  2723                           
  2724                           ;Button_src.c: 76:             t = 0;
  2725  0E9A  01C3               	clrf	_t
  2726  0E9B  01C4               	clrf	_t+1
  2727                           
  2728                           ;Button_src.c: 77:             w = 0;
  2729  0E9C  01C1               	clrf	_w
  2730  0E9D  01C2               	clrf	_w+1
  2731                           
  2732                           ;Button_src.c: 78:             x = 0;
  2733  0E9E  01BF               	clrf	_x
  2734  0E9F  01C0               	clrf	_x+1
  2735                           
  2736                           ;Button_src.c: 79:             y = 0;
  2737  0EA0  01BD               	clrf	_y
  2738  0EA1  01BE               	clrf	_y+1
  2739                           
  2740                           ;Button_src.c: 80:             x = 0x00;
  2741  0EA2  01BF               	clrf	_x
  2742  0EA3  01C0               	clrf	_x+1
  2743  0EA4                     l3472:	
  2744                           
  2745                           ;Button_src.c: 82:                  RC0 = 1;
  2746  0EA4  1407               	bsf	7,0	;volatile
  2747                           
  2748                           ;Button_src.c: 83:                  RC1 = 0;
  2749  0EA5  1087               	bcf	7,1	;volatile
  2750                           
  2751                           ;Button_src.c: 84:                  RC2 = 1;
  2752  0EA6  1507               	bsf	7,2	;volatile
  2753                           
  2754                           ;Button_src.c: 85:                  RC3 = 1;
  2755  0EA7  1587               	bsf	7,3	;volatile
  2756                           
  2757                           ;Button_src.c: 87:                 if(RC7==0){
  2758  0EA8  1B87               	btfsc	7,7	;volatile
  2759  0EA9  2F03               	goto	l3500
  2760                           
  2761                           ;Button_src.c: 88:                     write_cmd(0x98);
  2762  0EAA  3098               	movlw	152
  2763  0EAB  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2764                           
  2765                           ;Button_src.c: 89:                     x++;
  2766  0EB0  3001               	movlw	1
  2767  0EB1  07BF               	addwf	_x,f
  2768  0EB2  1803               	skipnc
  2769  0EB3  0AC0               	incf	_x+1,f
  2770  0EB4  3000               	movlw	0
  2771  0EB5  07C0               	addwf	_x+1,f
  2772                           
  2773                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2774  0EB6  083D               	movf	_y,w
  2775  0EB7  00E7               	movwf	??_thermometer_threshhold_settings
  2776  0EB8  01E8               	clrf	??_thermometer_threshhold_settings+1
  2777  0EB9  0867               	movf	??_thermometer_threshhold_settings,w
  2778  0EBA  00BD               	movwf	_y
  2779  0EBB  0868               	movf	??_thermometer_threshhold_settings+1,w
  2780  0EBC  00BE               	movwf	_y+1
  2781                           
  2782                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2783  0EBD  0840               	movf	_x+1,w
  2784  0EBE  00F8               	movwf	modulus_func@x+1
  2785  0EBF  083F               	movf	_x,w
  2786  0EC0  00F7               	movwf	modulus_func@x
  2787  0EC1  300A               	movlw	10
  2788  0EC2  00F9               	movwf	modulus_func@y
  2789  0EC3  3000               	movlw	0
  2790  0EC4  00FA               	movwf	modulus_func@y+1
  2791  0EC5  160A  118A  2648  120A  158A  	fcall	_modulus_func
  2792  0ECA  0877               	movf	?_modulus_func,w
  2793  0ECB  00E7               	movwf	??_thermometer_threshhold_settings
  2794  0ECC  01E8               	clrf	??_thermometer_threshhold_settings+1
  2795  0ECD  0867               	movf	??_thermometer_threshhold_settings,w
  2796  0ECE  00BF               	movwf	_x
  2797  0ECF  0868               	movf	??_thermometer_threshhold_settings+1,w
  2798  0ED0  00C0               	movwf	_x+1
  2799                           
  2800                           ;Button_src.c: 92:                     write_char(y + '0');
  2801  0ED1  083D               	movf	_y,w
  2802  0ED2  3E30               	addlw	48
  2803  0ED3  160A  118A  26BB  120A  158A  	fcall	_write_char
  2804                           
  2805                           ;Button_src.c: 93:                     write_char(x + '0');
  2806  0ED8  083F               	movf	_x,w
  2807  0ED9  3E30               	addlw	48
  2808  0EDA  160A  118A  26BB  120A  158A  	fcall	_write_char
  2809                           
  2810                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2811  0EDF  083E               	movf	_y+1,w
  2812  0EE0  00E3               	movwf	incrementor@upper_val+1
  2813  0EE1  083D               	movf	_y,w
  2814  0EE2  00E2               	movwf	incrementor@upper_val
  2815  0EE3  0840               	movf	_x+1,w
  2816  0EE4  00E5               	movwf	incrementor@lower_val+1
  2817  0EE5  083F               	movf	_x,w
  2818  0EE6  00E4               	movwf	incrementor@lower_val
  2819  0EE7  3039               	movlw	57
  2820  0EE8  00E7               	movwf	??_thermometer_threshhold_settings
  2821  0EE9  0867               	movf	??_thermometer_threshhold_settings,w
  2822  0EEA  00E6               	movwf	incrementor@z
  2823  0EEB  160A  118A  278E  120A  158A  	fcall	_incrementor
  2824  0EF0  00E8               	movwf	??_thermometer_threshhold_settings+1
  2825  0EF1  01E9               	clrf	??_thermometer_threshhold_settings+2
  2826  0EF2  0868               	movf	??_thermometer_threshhold_settings+1,w
  2827  0EF3  00BD               	movwf	_y
  2828  0EF4  0869               	movf	??_thermometer_threshhold_settings+2,w
  2829  0EF5  00BE               	movwf	_y+1
  2830                           
  2831                           ;Button_src.c: 95:                     t = x;
  2832  0EF6  0840               	movf	_x+1,w
  2833  0EF7  00C4               	movwf	_t+1
  2834  0EF8  083F               	movf	_x,w
  2835  0EF9  00C3               	movwf	_t
  2836                           
  2837                           ;Button_src.c: 96:                     w = y;
  2838  0EFA  083E               	movf	_y+1,w
  2839  0EFB  00C2               	movwf	_w+1
  2840  0EFC  083D               	movf	_y,w
  2841  0EFD  00C1               	movwf	_w
  2842                           
  2843                           ;Button_src.c: 97:                     button_delay();
  2844  0EFE  160A  118A  2669  120A  158A  	fcall	_button_delay
  2845  0F03                     l3500:	
  2846                           
  2847                           ;Button_src.c: 99:                   RC0 = 0;
  2848  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  2849  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  2850  0F05  1007               	bcf	7,0	;volatile
  2851                           
  2852                           ;Button_src.c: 100:                     RC1 = 1;
  2853  0F06  1487               	bsf	7,1	;volatile
  2854                           
  2855                           ;Button_src.c: 101:                     RC2 = 1;
  2856  0F07  1507               	bsf	7,2	;volatile
  2857                           
  2858                           ;Button_src.c: 102:                     RC3 = 1;
  2859  0F08  1587               	bsf	7,3	;volatile
  2860                           
  2861                           ;Button_src.c: 103:                     if(RC6 == 0){
  2862  0F09  1B07               	btfsc	7,6	;volatile
  2863  0F0A  2F4D               	goto	l594
  2864                           
  2865                           ;Button_src.c: 104:                         var1 = y;
  2866  0F0B  083D               	movf	_y,w
  2867  0F0C  00E7               	movwf	??_thermometer_threshhold_settings
  2868  0F0D  0867               	movf	??_thermometer_threshhold_settings,w
  2869  0F0E  00C9               	movwf	_var1
  2870                           
  2871                           ;Button_src.c: 105:                         var2 = x;
  2872  0F0F  083F               	movf	_x,w
  2873  0F10  00E7               	movwf	??_thermometer_threshhold_settings
  2874  0F11  0867               	movf	??_thermometer_threshhold_settings,w
  2875  0F12  00C8               	movwf	_var2
  2876                           
  2877                           ;Button_src.c: 107:                         write_cmd(0x1);
  2878  0F13  3001               	movlw	1
  2879  0F14  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2880                           
  2881                           ;Button_src.c: 108:                         write_char('S');
  2882  0F19  3053               	movlw	83
  2883  0F1A  160A  118A  26BB  120A  158A  	fcall	_write_char
  2884                           
  2885                           ;Button_src.c: 109:                         write_char('A');
  2886  0F1F  3041               	movlw	65
  2887  0F20  160A  118A  26BB  120A  158A  	fcall	_write_char
  2888                           
  2889                           ;Button_src.c: 110:                         write_char('V');
  2890  0F25  3056               	movlw	86
  2891  0F26  160A  118A  26BB  120A  158A  	fcall	_write_char
  2892                           
  2893                           ;Button_src.c: 111:                         write_char('E');
  2894  0F2B  3045               	movlw	69
  2895  0F2C  160A  118A  26BB  120A  158A  	fcall	_write_char
  2896                           
  2897                           ;Button_src.c: 112:                         write_char('D');
  2898  0F31  3044               	movlw	68
  2899  0F32  160A  118A  26BB  120A  158A  	fcall	_write_char
  2900                           
  2901                           ;Button_src.c: 113:                         for(int i=0;i<30000;i++);
  2902  0F37  01EA               	clrf	thermometer_threshhold_settings@i
  2903  0F38  01EB               	clrf	thermometer_threshhold_settings@i+1
  2904  0F39                     l3530:	
  2905  0F39  3001               	movlw	1
  2906  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0F3C  07EA               	addwf	thermometer_threshhold_settings@i,f
  2909  0F3D  1803               	skipnc
  2910  0F3E  0AEB               	incf	thermometer_threshhold_settings@i+1,f
  2911  0F3F  3000               	movlw	0
  2912  0F40  07EB               	addwf	thermometer_threshhold_settings@i+1,f
  2913  0F41  086B               	movf	thermometer_threshhold_settings@i+1,w
  2914  0F42  3A80               	xorlw	128
  2915  0F43  00FF               	movwf	127
  2916  0F44  30F5               	movlw	245
  2917  0F45  027F               	subwf	127,w
  2918  0F46  1D03               	skipz
  2919  0F47  2F4A               	goto	u2155
  2920  0F48  3030               	movlw	48
  2921  0F49  026A               	subwf	thermometer_threshhold_settings@i,w
  2922  0F4A                     u2155:	
  2923  0F4A  1803               	btfsc	3,0
  2924  0F4B  0008               	return
  2925  0F4C  2F39               	goto	l3530
  2926  0F4D                     l594:	
  2927                           ;Button_src.c: 115:                     }
  2928                           
  2929                           
  2930                           ;Button_src.c: 116:                  RC0 = 1;
  2931  0F4D  1407               	bsf	7,0	;volatile
  2932                           
  2933                           ;Button_src.c: 117:                  RC1 = 1;
  2934  0F4E  1487               	bsf	7,1	;volatile
  2935                           
  2936                           ;Button_src.c: 118:                  RC2 = 0;
  2937  0F4F  1107               	bcf	7,2	;volatile
  2938                           
  2939                           ;Button_src.c: 119:                  RC3 = 1;
  2940  0F50  1587               	bsf	7,3	;volatile
  2941                           
  2942                           ;Button_src.c: 121:                  if(RC7 == 0){
  2943  0F51  1B87               	btfsc	7,7	;volatile
  2944  0F52  2FBD               	goto	l3554
  2945                           
  2946                           ;Button_src.c: 122:                     write_cmd(0x98);
  2947  0F53  3098               	movlw	152
  2948  0F54  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  2949                           
  2950                           ;Button_src.c: 123:                       t--;
  2951  0F59  3001               	movlw	1
  2952  0F5A  02C3               	subwf	_t,f
  2953  0F5B  3000               	movlw	0
  2954  0F5C  1C03               	skipc
  2955  0F5D  03C4               	decf	_t+1,f
  2956  0F5E  02C4               	subwf	_t+1,f
  2957                           
  2958                           ;Button_src.c: 124:                     w = (unsigned char )w;
  2959  0F5F  0841               	movf	_w,w
  2960  0F60  00E7               	movwf	??_thermometer_threshhold_settings
  2961  0F61  01E8               	clrf	??_thermometer_threshhold_settings+1
  2962  0F62  0867               	movf	??_thermometer_threshhold_settings,w
  2963  0F63  00C1               	movwf	_w
  2964  0F64  0868               	movf	??_thermometer_threshhold_settings+1,w
  2965  0F65  00C2               	movwf	_w+1
  2966                           
  2967                           ;Button_src.c: 125:                     t = (unsigned char )(modulus_func(t,10));
  2968  0F66  0844               	movf	_t+1,w
  2969  0F67  00F8               	movwf	modulus_func@x+1
  2970  0F68  0843               	movf	_t,w
  2971  0F69  00F7               	movwf	modulus_func@x
  2972  0F6A  300A               	movlw	10
  2973  0F6B  00F9               	movwf	modulus_func@y
  2974  0F6C  3000               	movlw	0
  2975  0F6D  00FA               	movwf	modulus_func@y+1
  2976  0F6E  160A  118A  2648  120A  158A  	fcall	_modulus_func
  2977  0F73  0877               	movf	?_modulus_func,w
  2978  0F74  00E7               	movwf	??_thermometer_threshhold_settings
  2979  0F75  01E8               	clrf	??_thermometer_threshhold_settings+1
  2980  0F76  0867               	movf	??_thermometer_threshhold_settings,w
  2981  0F77  00C3               	movwf	_t
  2982  0F78  0868               	movf	??_thermometer_threshhold_settings+1,w
  2983  0F79  00C4               	movwf	_t+1
  2984                           
  2985                           ;Button_src.c: 126:                     write_char(w + '0');
  2986  0F7A  0841               	movf	_w,w
  2987  0F7B  3E30               	addlw	48
  2988  0F7C  160A  118A  26BB  120A  158A  	fcall	_write_char
  2989                           
  2990                           ;Button_src.c: 127:                     write_char(t + '0');
  2991  0F81  0843               	movf	_t,w
  2992  0F82  3E30               	addlw	48
  2993  0F83  160A  118A  26BB  120A  158A  	fcall	_write_char
  2994                           
  2995                           ;Button_src.c: 128:                     w = decrementor(w,t,'0');
  2996  0F88  0842               	movf	_w+1,w
  2997  0F89  00E3               	movwf	decrementor@lower_val+1
  2998  0F8A  0841               	movf	_w,w
  2999  0F8B  00E2               	movwf	decrementor@lower_val
  3000  0F8C  0844               	movf	_t+1,w
  3001  0F8D  00E5               	movwf	decrementor@upper_val+1
  3002  0F8E  0843               	movf	_t,w
  3003  0F8F  00E4               	movwf	decrementor@upper_val
  3004  0F90  3030               	movlw	48
  3005  0F91  00E7               	movwf	??_thermometer_threshhold_settings
  3006  0F92  0867               	movf	??_thermometer_threshhold_settings,w
  3007  0F93  00E6               	movwf	decrementor@z
  3008  0F94  120A  158A  2001  120A  158A  	fcall	_decrementor
  3009  0F99  00E8               	movwf	??_thermometer_threshhold_settings+1
  3010  0F9A  01E9               	clrf	??_thermometer_threshhold_settings+2
  3011  0F9B  0868               	movf	??_thermometer_threshhold_settings+1,w
  3012  0F9C  00C1               	movwf	_w
  3013  0F9D  0869               	movf	??_thermometer_threshhold_settings+2,w
  3014  0F9E  00C2               	movwf	_w+1
  3015                           
  3016                           ;Button_src.c: 129:                     if((t + '0')=='0'){
  3017  0F9F  0843               	movf	_t,w
  3018  0FA0  3E30               	addlw	48
  3019  0FA1  00E7               	movwf	??_thermometer_threshhold_settings
  3020  0FA2  0844               	movf	_t+1,w
  3021  0FA3  1803               	skipnc
  3022  0FA4  3E01               	addlw	1
  3023  0FA5  3E00               	addlw	0
  3024  0FA6  00E8               	movwf	??_thermometer_threshhold_settings+1
  3025  0FA7  3030               	movlw	48
  3026  0FA8  0667               	xorwf	??_thermometer_threshhold_settings,w
  3027  0FA9  0468               	iorwf	??_thermometer_threshhold_settings+1,w
  3028  0FAA  1D03               	btfss	3,2
  3029  0FAB  2FB0               	goto	l599
  3030                           
  3031                           ;Button_src.c: 130:                         t = 10;
  3032  0FAC  300A               	movlw	10
  3033  0FAD  00C3               	movwf	_t
  3034  0FAE  3000               	movlw	0
  3035  0FAF  00C4               	movwf	_t+1
  3036  0FB0                     l599:	
  3037                           ;Button_src.c: 131:                     }
  3038                           
  3039                           
  3040                           ;Button_src.c: 133:                     x = t;
  3041  0FB0  0844               	movf	_t+1,w
  3042  0FB1  00C0               	movwf	_x+1
  3043  0FB2  0843               	movf	_t,w
  3044  0FB3  00BF               	movwf	_x
  3045                           
  3046                           ;Button_src.c: 134:                     y = w;
  3047  0FB4  0842               	movf	_w+1,w
  3048  0FB5  00BE               	movwf	_y+1
  3049  0FB6  0841               	movf	_w,w
  3050  0FB7  00BD               	movwf	_y
  3051                           
  3052                           ;Button_src.c: 135:                     button_delay();
  3053  0FB8  160A  118A  2669  120A  158A  	fcall	_button_delay
  3054  0FBD                     l3554:	
  3055                           
  3056                           ;Button_src.c: 137:                 RC0 = 0;
  3057  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3058  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0FBF  1007               	bcf	7,0	;volatile
  3060                           
  3061                           ;Button_src.c: 138:                 RC1 = 1;
  3062  0FC0  1487               	bsf	7,1	;volatile
  3063                           
  3064                           ;Button_src.c: 139:                 RC2 = 1;
  3065  0FC1  1507               	bsf	7,2	;volatile
  3066                           
  3067                           ;Button_src.c: 140:                 RC3 = 1;
  3068  0FC2  1587               	bsf	7,3	;volatile
  3069                           
  3070                           ;Button_src.c: 141:                     if(RC6 == 0){
  3071  0FC3  1B07               	btfsc	7,6	;volatile
  3072  0FC4  2FF5               	goto	l600
  3073                           
  3074                           ;Button_src.c: 142:                         var1 = w;
  3075  0FC5  0841               	movf	_w,w
  3076  0FC6  00E7               	movwf	??_thermometer_threshhold_settings
  3077  0FC7  0867               	movf	??_thermometer_threshhold_settings,w
  3078  0FC8  00C9               	movwf	_var1
  3079                           
  3080                           ;Button_src.c: 143:                         var2 = t;
  3081  0FC9  0843               	movf	_t,w
  3082  0FCA  00E7               	movwf	??_thermometer_threshhold_settings
  3083  0FCB  0867               	movf	??_thermometer_threshhold_settings,w
  3084  0FCC  00C8               	movwf	_var2
  3085                           
  3086                           ;Button_src.c: 145:                         write_cmd(0x1);
  3087  0FCD  3001               	movlw	1
  3088  0FCE  160A  118A  26D2  120A  158A  	fcall	_write_cmd
  3089                           
  3090                           ;Button_src.c: 146:                         write_char('S');
  3091  0FD3  3053               	movlw	83
  3092  0FD4  160A  118A  26BB  120A  158A  	fcall	_write_char
  3093                           
  3094                           ;Button_src.c: 147:                         write_char('A');
  3095  0FD9  3041               	movlw	65
  3096  0FDA  160A  118A  26BB  120A  158A  	fcall	_write_char
  3097                           
  3098                           ;Button_src.c: 148:                         write_char('V');
  3099  0FDF  3056               	movlw	86
  3100  0FE0  160A  118A  26BB  120A  158A  	fcall	_write_char
  3101                           
  3102                           ;Button_src.c: 149:                         write_char('E');
  3103  0FE5  3045               	movlw	69
  3104  0FE6  160A  118A  26BB  120A  158A  	fcall	_write_char
  3105                           
  3106                           ;Button_src.c: 150:                         write_char('D');
  3107  0FEB  3044               	movlw	68
  3108  0FEC  160A  118A  26BB  120A  158A  	fcall	_write_char
  3109                           
  3110                           ;Button_src.c: 151:                         button_delay();
  3111  0FF1  160A  118A  2669   	fcall	_button_delay
  3112  0FF4  0008               	return
  3113  0FF5                     l600:	
  3114                           ;Button_src.c: 153:                     }
  3115                           
  3116                           
  3117                           ;Button_src.c: 154:             RC0 = 0;
  3118  0FF5  1007               	bcf	7,0	;volatile
  3119                           
  3120                           ;Button_src.c: 155:             RC1 = 1;
  3121  0FF6  1487               	bsf	7,1	;volatile
  3122                           
  3123                           ;Button_src.c: 156:             RC2 = 1;
  3124  0FF7  1507               	bsf	7,2	;volatile
  3125                           
  3126                           ;Button_src.c: 157:             RC3 = 1;
  3127  0FF8  1587               	bsf	7,3	;volatile
  3128                           
  3129                           ;Button_src.c: 158:             if (RC7 == 0 ){
  3130  0FF9  1B87               	btfsc	7,7	;volatile
  3131  0FFA  2EA4               	goto	l3472
  3132                           
  3133                           ;Button_src.c: 159:             write_cmd(0x1);
  3134  0FFB  3001               	movlw	1
  3135  0FFC  160A  118A  26D2   	fcall	_write_cmd
  3136  0FFF  0008               	return
  3137  1000                     __end_of_thermometer_threshhold_settings:	
  3138                           
  3139                           	psect	text3
  3140  0801                     __ptext3:	
  3141 ;; *************** function _decrementor *****************
  3142 ;; Defined at:
  3143 ;;		line 19 in file "math_src.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  lower_val       2    0[BANK0 ] int 
  3146 ;;  upper_val       2    2[BANK0 ] int 
  3147 ;;  z               1    4[BANK0 ] unsigned char 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;		None
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      unsigned char 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0, pclath, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 300/0
  3156 ;;		On exit  : 300/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3159 ;;      Params:         0       5       0       0       0
  3160 ;;      Locals:         0       0       0       0       0
  3161 ;;      Temps:          2       0       0       0       0
  3162 ;;      Totals:         2       5       0       0       0
  3163 ;;Total ram usage:        7 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    2
  3166 ;; This function calls:
  3167 ;;		_modulus_func
  3168 ;; This function is called by:
  3169 ;;		_thermometer_threshhold_settings
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           
  3174                           ;psect for function _decrementor
  3175  0801                     _decrementor:	
  3176                           
  3177                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3181  0801  0864               	movf	decrementor@upper_val,w
  3182  0802  3E30               	addlw	48
  3183  0803  00FB               	movwf	??_decrementor
  3184  0804  0865               	movf	decrementor@upper_val+1,w
  3185  0805  1803               	skipnc
  3186  0806  3E01               	addlw	1
  3187  0807  3E00               	addlw	0
  3188  0808  00FC               	movwf	??_decrementor+1
  3189  0809  0866               	movf	decrementor@z,w
  3190  080A  067B               	xorwf	??_decrementor,w
  3191  080B  047C               	iorwf	??_decrementor+1,w
  3192  080C  1D03               	skipz
  3193  080D  2823               	goto	l3118
  3194                           
  3195                           ;math_src.c: 21:         lower_val--;
  3196  080E  30FF               	movlw	255
  3197  080F  07E2               	addwf	decrementor@lower_val,f
  3198  0810  1803               	skipnc
  3199  0811  0AE3               	incf	decrementor@lower_val+1,f
  3200  0812  30FF               	movlw	255
  3201  0813  07E3               	addwf	decrementor@lower_val+1,f
  3202                           
  3203                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3204  0814  0863               	movf	decrementor@lower_val+1,w
  3205  0815  00F8               	movwf	modulus_func@x+1
  3206  0816  0862               	movf	decrementor@lower_val,w
  3207  0817  00F7               	movwf	modulus_func@x
  3208  0818  300A               	movlw	10
  3209  0819  00F9               	movwf	modulus_func@y
  3210  081A  3000               	movlw	0
  3211  081B  00FA               	movwf	modulus_func@y+1
  3212  081C  160A  118A  2648   	fcall	_modulus_func
  3213  081F  0878               	movf	?_modulus_func+1,w
  3214  0820  00E3               	movwf	decrementor@lower_val+1
  3215  0821  0877               	movf	?_modulus_func,w
  3216  0822  00E2               	movwf	decrementor@lower_val
  3217  0823                     l3118:	
  3218                           
  3219                           ;math_src.c: 24:      return lower_val;
  3220  0823  0862               	movf	decrementor@lower_val,w
  3221  0824  0008               	return
  3222  0825                     __end_of_decrementor:	
  3223                           
  3224                           	psect	text4
  3225  0951                     __ptext4:	
  3226 ;; *************** function _set_upper_threshold *****************
  3227 ;; Defined at:
  3228 ;;		line 4 in file "threshold_src.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  upper_val       2    3[COMMON] int 
  3231 ;;  lower_val       2    5[COMMON] int 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 300/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3243 ;;      Params:         4       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0
  3245 ;;      Temps:          2       0       0       0       0
  3246 ;;      Totals:         6       0       0       0       0
  3247 ;;Total ram usage:        6 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    2
  3250 ;; This function calls:
  3251 ;;		_write_char
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _set_upper_threshold
  3259  0951                     _set_upper_threshold:	
  3260                           
  3261                           ;threshold_src.c: 5:     if(shi == upper_val && ge > lower_val && count == 2){
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3265  0951  085D               	movf	_shi,w
  3266  0952  00F7               	movwf	??_set_upper_threshold
  3267  0953  01F8               	clrf	??_set_upper_threshold+1
  3268  0954  0874               	movf	set_upper_threshold@upper_val+1,w
  3269  0955  0678               	xorwf	??_set_upper_threshold+1,w
  3270  0956  1D03               	skipz
  3271  0957  295A               	goto	u2815
  3272  0958  0873               	movf	set_upper_threshold@upper_val,w
  3273  0959  0677               	xorwf	??_set_upper_threshold,w
  3274  095A                     u2815:	
  3275  095A  1D03               	skipz
  3276  095B  0008               	return
  3277  095C  0876               	movf	set_upper_threshold@lower_val+1,w
  3278  095D  3A80               	xorlw	128
  3279  095E  00F7               	movwf	??_set_upper_threshold
  3280  095F  3080               	movlw	128
  3281  0960  0277               	subwf	??_set_upper_threshold,w
  3282  0961  1D03               	skipz
  3283  0962  2965               	goto	u2825
  3284  0963  085C               	movf	_ge,w
  3285  0964  0275               	subwf	set_upper_threshold@lower_val,w
  3286  0965                     u2825:	
  3287  0965  1803               	skipnc
  3288  0966  0008               	return
  3289  0967  3002               	movlw	2
  3290  0968  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0969  1303               	bcf	3,6	;RP1=0, select bank0
  3292  096A  062D               	xorwf	_count,w
  3293  096B  042E               	iorwf	_count+1,w
  3294  096C  1D03               	btfss	3,2
  3295  096D  0008               	return
  3296                           
  3297                           ;threshold_src.c: 6:     buzzer_watcher = 'w';
  3298  096E  3077               	movlw	119
  3299  096F  00F7               	movwf	??_set_upper_threshold
  3300  0970  0877               	movf	??_set_upper_threshold,w
  3301  0971  00CB               	movwf	_buzzer_watcher
  3302                           
  3303                           ;threshold_src.c: 7:     write_char('W');
  3304  0972  3057               	movlw	87
  3305  0973  160A  118A  26BB  120A  158A  	fcall	_write_char
  3306                           
  3307                           ;threshold_src.c: 8:     write_char('A');
  3308  0978  3041               	movlw	65
  3309  0979  160A  118A  26BB  120A  158A  	fcall	_write_char
  3310                           
  3311                           ;threshold_src.c: 9:     write_char('R');
  3312  097E  3052               	movlw	82
  3313  097F  160A  118A  26BB  120A  158A  	fcall	_write_char
  3314                           
  3315                           ;threshold_src.c: 10:     write_char('M');
  3316  0984  304D               	movlw	77
  3317  0985  160A  118A  26BB   	fcall	_write_char
  3318  0988  0008               	return
  3319  0989                     __end_of_set_upper_threshold:	
  3320                           
  3321                           	psect	text5
  3322  09C5                     __ptext5:	
  3323 ;; *************** function _set_lower_threshold *****************
  3324 ;; Defined at:
  3325 ;;		line 14 in file "threshold_src.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  upper_val       2    3[COMMON] int 
  3328 ;;  lower_val       2    5[COMMON] int 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;		None
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 300/0
  3337 ;;		On exit  : 300/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3340 ;;      Params:         4       0       0       0       0
  3341 ;;      Locals:         0       0       0       0       0
  3342 ;;      Temps:          2       0       0       0       0
  3343 ;;      Totals:         6       0       0       0       0
  3344 ;;Total ram usage:        6 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    2
  3347 ;; This function calls:
  3348 ;;		_write_char
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _set_lower_threshold
  3356  09C5                     _set_lower_threshold:	
  3357                           
  3358                           ;threshold_src.c: 15:     if((shi == upper_val && ge <= lower_val)|| ge == lower_val)
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3362  09C5  085D               	movf	_shi,w
  3363  09C6  00F7               	movwf	??_set_lower_threshold
  3364  09C7  01F8               	clrf	??_set_lower_threshold+1
  3365  09C8  0874               	movf	set_lower_threshold@upper_val+1,w
  3366  09C9  0678               	xorwf	??_set_lower_threshold+1,w
  3367  09CA  1D03               	skipz
  3368  09CB  29CE               	goto	u2785
  3369  09CC  0873               	movf	set_lower_threshold@upper_val,w
  3370  09CD  0677               	xorwf	??_set_lower_threshold,w
  3371  09CE                     u2785:	
  3372  09CE  1D03               	skipz
  3373  09CF  29DB               	goto	l4048
  3374  09D0  0876               	movf	set_lower_threshold@lower_val+1,w
  3375  09D1  3A80               	xorlw	128
  3376  09D2  00F7               	movwf	??_set_lower_threshold
  3377  09D3  3080               	movlw	128
  3378  09D4  0277               	subwf	??_set_lower_threshold,w
  3379  09D5  1D03               	skipz
  3380  09D6  29D9               	goto	u2795
  3381  09D7  085C               	movf	_ge,w
  3382  09D8  0275               	subwf	set_lower_threshold@lower_val,w
  3383  09D9                     u2795:	
  3384  09D9  1803               	skipnc
  3385  09DA  29E8               	goto	l4050
  3386  09DB                     l4048:	
  3387  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  3388  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  3389  09DD  085C               	movf	_ge,w
  3390  09DE  00F7               	movwf	??_set_lower_threshold
  3391  09DF  01F8               	clrf	??_set_lower_threshold+1
  3392  09E0  0876               	movf	set_lower_threshold@lower_val+1,w
  3393  09E1  0678               	xorwf	??_set_lower_threshold+1,w
  3394  09E2  1D03               	skipz
  3395  09E3  29E6               	goto	u2805
  3396  09E4  0875               	movf	set_lower_threshold@lower_val,w
  3397  09E5  0677               	xorwf	??_set_lower_threshold,w
  3398  09E6                     u2805:	
  3399  09E6  1D03               	skipz
  3400  09E7  0008               	return
  3401  09E8                     l4050:	
  3402                           
  3403                           ;threshold_src.c: 16:     {;threshold_src.c: 17:     count = 2;
  3404  09E8  3002               	movlw	2
  3405  09E9  1283               	bcf	3,5	;RP0=0, select bank0
  3406  09EA  1303               	bcf	3,6	;RP1=0, select bank0
  3407  09EB  00AD               	movwf	_count
  3408  09EC  3000               	movlw	0
  3409  09ED  00AE               	movwf	_count+1
  3410                           
  3411                           ;threshold_src.c: 18:     buzzer_watcher = 'x';
  3412  09EE  3078               	movlw	120
  3413  09EF  00F7               	movwf	??_set_lower_threshold
  3414  09F0  0877               	movf	??_set_lower_threshold,w
  3415  09F1  00CB               	movwf	_buzzer_watcher
  3416                           
  3417                           ;threshold_src.c: 19:     write_char('O');
  3418  09F2  304F               	movlw	79
  3419  09F3  160A  118A  26BB  120A  158A  	fcall	_write_char
  3420                           
  3421                           ;threshold_src.c: 20:     write_char('K');
  3422  09F8  304B               	movlw	75
  3423  09F9  160A  118A  26BB  120A  158A  	fcall	_write_char
  3424                           
  3425                           ;threshold_src.c: 21:     write_char(' ');
  3426  09FE  3020               	movlw	32
  3427  09FF  160A  118A  26BB  120A  158A  	fcall	_write_char
  3428                           
  3429                           ;threshold_src.c: 22:     write_char(' ');
  3430  0A04  3020               	movlw	32
  3431  0A05  160A  118A  26BB   	fcall	_write_char
  3432  0A08  0008               	return
  3433  0A09                     __end_of_set_lower_threshold:	
  3434                           
  3435                           	psect	text6
  3436  16E9                     __ptext6:	
  3437 ;; *************** function _set_beep_threshhold *****************
  3438 ;; Defined at:
  3439 ;;		line 5 in file "buzzer_src.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  x               1    wreg     unsigned char 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  x               1    2[COMMON] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 300/0
  3450 ;;		On exit  : 300/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3453 ;;      Params:         0       0       0       0       0
  3454 ;;      Locals:         1       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0
  3456 ;;      Totals:         1       0       0       0       0
  3457 ;;Total ram usage:        1 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    1
  3460 ;; This function calls:
  3461 ;;		_button_delay
  3462 ;; This function is called by:
  3463 ;;		_main
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _set_beep_threshhold
  3469  16E9                     _set_beep_threshhold:	
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3473                           ;set_beep_threshhold@x stored from wreg
  3474  16E9  00F2               	movwf	set_beep_threshhold@x
  3475                           
  3476                           ;buzzer_src.c: 6:     if (x == 'w'){
  3477  16EA  3077               	movlw	119
  3478  16EB  0672               	xorwf	set_beep_threshhold@x,w
  3479  16EC  1D03               	btfss	3,2
  3480  16ED  2F02               	goto	l4086
  3481                           
  3482                           ;buzzer_src.c: 7:         RE2 = 1;
  3483  16EE  1509               	bsf	9,2	;volatile
  3484                           
  3485                           ;buzzer_src.c: 8:         button_delay();
  3486  16EF  160A  118A  2669  160A  118A  	fcall	_button_delay
  3487                           
  3488                           ;buzzer_src.c: 9:         RE2 = 0;
  3489  16F4  1283               	bcf	3,5	;RP0=0, select bank0
  3490  16F5  1303               	bcf	3,6	;RP1=0, select bank0
  3491  16F6  1109               	bcf	9,2	;volatile
  3492                           
  3493                           ;buzzer_src.c: 10:         button_delay();
  3494  16F7  160A  118A  2669  160A  118A  	fcall	_button_delay
  3495                           
  3496                           ;buzzer_src.c: 11:         RE2 = 1;
  3497  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  3498  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  3499  16FE  1509               	bsf	9,2	;volatile
  3500                           
  3501                           ;buzzer_src.c: 12:         button_delay();
  3502  16FF  160A  118A  2669   	fcall	_button_delay
  3503  1702                     l4086:	
  3504                           
  3505                           ;buzzer_src.c: 13:         RE2 = 0;
  3506  1702  1283               	bcf	3,5	;RP0=0, select bank0
  3507  1703  1303               	bcf	3,6	;RP1=0, select bank0
  3508  1704  1109               	bcf	9,2	;volatile
  3509  1705  0008               	return
  3510  1706                     __end_of_set_beep_threshhold:	
  3511                           
  3512                           	psect	text7
  3513  160F                     __ptext7:	
  3514 ;; *************** function _reset_alarm *****************
  3515 ;; Defined at:
  3516 ;;		line 26 in file "threshold_src.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;		None
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;		None
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, status,2
  3525 ;; Tracked objects:
  3526 ;;		On entry : 300/0
  3527 ;;		On exit  : 300/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3530 ;;      Params:         0       0       0       0       0
  3531 ;;      Locals:         0       0       0       0       0
  3532 ;;      Temps:          1       0       0       0       0
  3533 ;;      Totals:         1       0       0       0       0
  3534 ;;Total ram usage:        1 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function _reset_alarm
  3545  160F                     _reset_alarm:	
  3546                           
  3547                           ;threshold_src.c: 27:     RC0 = 1;
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in _reset_alarm: [wreg+status,2]
  3551  160F  1407               	bsf	7,0	;volatile
  3552                           
  3553                           ;threshold_src.c: 28:     RC1 = 1;
  3554  1610  1487               	bsf	7,1	;volatile
  3555                           
  3556                           ;threshold_src.c: 29:     RC2 = 1;
  3557  1611  1507               	bsf	7,2	;volatile
  3558                           
  3559                           ;threshold_src.c: 30:     RC3 = 0;
  3560  1612  1187               	bcf	7,3	;volatile
  3561                           
  3562                           ;threshold_src.c: 31:     if(RC4 == 0){
  3563  1613  1A07               	btfsc	7,4	;volatile
  3564  1614  0008               	return
  3565                           
  3566                           ;threshold_src.c: 32:         count = 0;
  3567  1615  01AD               	clrf	_count
  3568  1616  01AE               	clrf	_count+1
  3569                           
  3570                           ;threshold_src.c: 33:         buzzer_watcher = 'x';
  3571  1617  3078               	movlw	120
  3572  1618  00F0               	movwf	??_reset_alarm
  3573  1619  0870               	movf	??_reset_alarm,w
  3574  161A  00CB               	movwf	_buzzer_watcher
  3575  161B  0008               	return
  3576  161C                     __end_of_reset_alarm:	
  3577                           
  3578                           	psect	text8
  3579  176B                     __ptext8:	
  3580 ;; *************** function _lcd_init *****************
  3581 ;; Defined at:
  3582 ;;		line 14 in file "LCD_src.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  i               2    0        int 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  1    wreg      void 
  3589 ;; Registers used:
  3590 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 300/100
  3593 ;;		On exit  : 300/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3596 ;;      Params:         0       0       0       0       0
  3597 ;;      Locals:         0       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0
  3599 ;;      Totals:         0       0       0       0       0
  3600 ;;Total ram usage:        0 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    2
  3603 ;; This function calls:
  3604 ;;		_delay_screen
  3605 ;;		_write_cmd
  3606 ;; This function is called by:
  3607 ;;		_main
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function _lcd_init
  3613  176B                     _lcd_init:	
  3614                           
  3615                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3616                           
  3617                           ;incstack = 0
  3618                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3619  176B  0185               	clrf	5	;volatile
  3620                           
  3621                           ;LCD_src.c: 18:  RA0=0;
  3622  176C  1283               	bcf	3,5	;RP0=0, select bank0
  3623  176D  1005               	bcf	5,0	;volatile
  3624                           
  3625                           ;LCD_src.c: 19:  delay_screen();
  3626  176E  160A  118A  267D  160A  118A  	fcall	_delay_screen
  3627                           
  3628                           ;LCD_src.c: 20:  RA0=1;
  3629  1773  1283               	bcf	3,5	;RP0=0, select bank0
  3630  1774  1303               	bcf	3,6	;RP1=0, select bank0
  3631  1775  1405               	bsf	5,0	;volatile
  3632                           
  3633                           ;LCD_src.c: 21:  RA2=1;
  3634  1776  1505               	bsf	5,2	;volatile
  3635                           
  3636                           ;LCD_src.c: 22:  write_cmd(0x30);
  3637  1777  3030               	movlw	48
  3638  1778  160A  118A  26D2  160A  118A  	fcall	_write_cmd
  3639                           
  3640                           ;LCD_src.c: 23:  write_cmd(0x01);
  3641  177D  3001               	movlw	1
  3642  177E  160A  118A  26D2  160A  118A  	fcall	_write_cmd
  3643                           
  3644                           ;LCD_src.c: 24:  write_cmd(0x06);
  3645  1783  3006               	movlw	6
  3646  1784  160A  118A  26D2  160A  118A  	fcall	_write_cmd
  3647                           
  3648                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3649  1789  300C               	movlw	12
  3650  178A  160A  118A  26D2   	fcall	_write_cmd
  3651  178D  0008               	return
  3652  178E                     __end_of_lcd_init:	
  3653                           
  3654                           	psect	text9
  3655  16A5                     __ptext9:	
  3656 ;; *************** function _initialise_buttons *****************
  3657 ;; Defined at:
  3658 ;;		line 11 in file "Button_src.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2
  3667 ;; Tracked objects:
  3668 ;;		On entry : 300/0
  3669 ;;		On exit  : 300/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3672 ;;      Params:         0       0       0       0       0
  3673 ;;      Locals:         0       0       0       0       0
  3674 ;;      Temps:          0       0       0       0       0
  3675 ;;      Totals:         0       0       0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_main
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           
  3686                           ;psect for function _initialise_buttons
  3687  16A5                     _initialise_buttons:	
  3688                           
  3689                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3690                           
  3691                           ;incstack = 0
  3692                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3693  16A5  3006               	movlw	6
  3694  16A6  1683               	bsf	3,5	;RP0=1, select bank1
  3695  16A7  009F               	movwf	31	;volatile
  3696                           
  3697                           ;Button_src.c: 13:     TRISC = 0xf0;
  3698  16A8  30F0               	movlw	240
  3699  16A9  0087               	movwf	7	;volatile
  3700                           
  3701                           ;Button_src.c: 14:     a = 0x00;
  3702  16AA  1283               	bcf	3,5	;RP0=0, select bank0
  3703  16AB  01D7               	clrf	_a
  3704                           
  3705                           ;Button_src.c: 15:     b = 0x00;
  3706  16AC  01D6               	clrf	_b
  3707                           
  3708                           ;Button_src.c: 16:     c = 0x00;
  3709  16AD  01D5               	clrf	_c
  3710                           
  3711                           ;Button_src.c: 17:     z = 0;
  3712  16AE  01BB               	clrf	_z
  3713  16AF  01BC               	clrf	_z+1
  3714                           
  3715                           ;Button_src.c: 18:     day_low = 12;
  3716  16B0  300C               	movlw	12
  3717  16B1  00B9               	movwf	_day_low
  3718  16B2  3000               	movlw	0
  3719  16B3  00BA               	movwf	_day_low+1
  3720                           
  3721                           ;Button_src.c: 19:     stats = 1;
  3722  16B4  3001               	movlw	1
  3723  16B5  00B3               	movwf	_stats
  3724  16B6  3000               	movlw	0
  3725  16B7  00B4               	movwf	_stats+1
  3726                           
  3727                           ;Button_src.c: 20:     p = 0;
  3728  16B8  01AF               	clrf	_p
  3729  16B9  01B0               	clrf	_p+1
  3730  16BA  0008               	return
  3731  16BB                     __end_of_initialise_buttons:	
  3732                           
  3733                           	psect	text10
  3734  15F2                     __ptext10:	
  3735 ;; *************** function _init_temp *****************
  3736 ;; Defined at:
  3737 ;;		line 6 in file "Thermometer_src.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		status,2
  3746 ;; Tracked objects:
  3747 ;;		On entry : 200/100
  3748 ;;		On exit  : 300/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3751 ;;      Params:         0       0       0       0       0
  3752 ;;      Locals:         0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0
  3754 ;;      Totals:         0       0       0       0       0
  3755 ;;Total ram usage:        0 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _init_temp
  3766  15F2                     _init_temp:	
  3767                           
  3768                           ;Thermometer_src.c: 8:     TRISE=0X00;
  3769                           
  3770                           ;incstack = 0
  3771                           ; Regs used in _init_temp: [status,2]
  3772  15F2  1683               	bsf	3,5	;RP0=1, select bank1
  3773  15F3  0189               	clrf	9	;volatile
  3774                           
  3775                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  3776  15F4  1283               	bcf	3,5	;RP0=0, select bank0
  3777  15F5  0189               	clrf	9	;volatile
  3778  15F6  0008               	return
  3779  15F7                     __end_of_init_temp:	
  3780                           
  3781                           	psect	text11
  3782  15F7                     __ptext11:	
  3783 ;; *************** function _init *****************
  3784 ;; Defined at:
  3785 ;;		line 5 in file "LCD_src.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;		None
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		wreg, status,2
  3794 ;; Tracked objects:
  3795 ;;		On entry : 300/0
  3796 ;;		On exit  : 300/100
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3799 ;;      Params:         0       0       0       0       0
  3800 ;;      Locals:         0       0       0       0       0
  3801 ;;      Temps:          0       0       0       0       0
  3802 ;;      Totals:         0       0       0       0       0
  3803 ;;Total ram usage:        0 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_main
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _init
  3814  15F7                     _init:	
  3815                           
  3816                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in _init: [wreg+status,2]
  3820  15F7  3007               	movlw	7
  3821  15F8  1683               	bsf	3,5	;RP0=1, select bank1
  3822  15F9  009F               	movwf	31	;volatile
  3823                           
  3824                           ;LCD_src.c: 8:  TRISA0=1;
  3825  15FA  1405               	bsf	5,0	;volatile
  3826                           
  3827                           ;LCD_src.c: 9:  TRISD=0X00;
  3828  15FB  0188               	clrf	8	;volatile
  3829                           
  3830                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  3831  15FC  0181               	clrf	1	;volatile
  3832                           
  3833                           ;LCD_src.c: 11:  TRISE = 0X00;
  3834  15FD  0189               	clrf	9	;volatile
  3835  15FE  0008               	return
  3836  15FF                     __end_of_init:	
  3837                           
  3838                           	psect	text12
  3839  0825                     __ptext12:	
  3840 ;; *************** function _get_time *****************
  3841 ;; Defined at:
  3842 ;;		line 26 in file "clock_src.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;		None
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  i               2    6[COMMON] int 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      void 
  3849 ;; Registers used:
  3850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 300/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3856 ;;      Params:         0       0       0       0       0
  3857 ;;      Locals:         2       0       0       0       0
  3858 ;;      Temps:          1       0       0       0       0
  3859 ;;      Totals:         3       0       0       0       0
  3860 ;;Total ram usage:        3 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    1
  3863 ;; This function calls:
  3864 ;;		_time_read_1
  3865 ;;		_time_write_1
  3866 ;; This function is called by:
  3867 ;;		_main
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _get_time
  3873  0825                     _get_time:	
  3874                           
  3875                           ;clock_src.c: 28:    int i;;clock_src.c: 29:    RB5=1;
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3879  0825  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0826  1303               	bcf	3,6	;RP1=0, select bank0
  3881  0827  1686               	bsf	6,5	;volatile
  3882                           
  3883                           ;clock_src.c: 30:    time_write_1(0xbf);
  3884  0828  30BF               	movlw	191
  3885  0829  160A  118A  27B2  120A  158A  	fcall	_time_write_1
  3886                           
  3887                           ;clock_src.c: 31:    for(i=0;i<7;i++)
  3888  082E  01F6               	clrf	get_time@i
  3889  082F  01F7               	clrf	get_time@i+1
  3890  0830                     l3366:	
  3891                           
  3892                           ;clock_src.c: 32:      {;clock_src.c: 33:         table1[i]=time_read_1();
  3893  0830  120A  158A  2051  120A  158A  	fcall	_time_read_1
  3894  0835  00F5               	movwf	??_get_time
  3895  0836  0876               	movf	get_time@i,w
  3896  0837  3E20               	addlw	(low (_table1| 0))& (0+255)
  3897  0838  0084               	movwf	4
  3898  0839  0875               	movf	??_get_time,w
  3899  083A  1383               	bcf	3,7	;select IRP bank0
  3900  083B  0080               	movwf	0
  3901                           
  3902                           ;clock_src.c: 34:      }
  3903  083C  3001               	movlw	1
  3904  083D  07F6               	addwf	get_time@i,f
  3905  083E  1803               	skipnc
  3906  083F  0AF7               	incf	get_time@i+1,f
  3907  0840  3000               	movlw	0
  3908  0841  07F7               	addwf	get_time@i+1,f
  3909  0842  0877               	movf	get_time@i+1,w
  3910  0843  3A80               	xorlw	128
  3911  0844  00FF               	movwf	127
  3912  0845  3080               	movlw	128
  3913  0846  027F               	subwf	127,w
  3914  0847  1D03               	skipz
  3915  0848  284B               	goto	u2095
  3916  0849  3007               	movlw	7
  3917  084A  0276               	subwf	get_time@i,w
  3918  084B                     u2095:	
  3919  084B  1C03               	skipc
  3920  084C  2830               	goto	l3366
  3921                           
  3922                           ;clock_src.c: 35:    RB5=0;
  3923  084D  1283               	bcf	3,5	;RP0=0, select bank0
  3924  084E  1303               	bcf	3,6	;RP1=0, select bank0
  3925  084F  1286               	bcf	6,5	;volatile
  3926  0850  0008               	return
  3927  0851                     __end_of_get_time:	
  3928                           
  3929                           	psect	text13
  3930  0851                     __ptext13:	
  3931 ;; *************** function _time_read_1 *****************
  3932 ;; Defined at:
  3933 ;;		line 132 in file "clock_src.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  j               2    2[COMMON] int 
  3938 ;;  time_rx         1    4[COMMON] unsigned char 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      unsigned char 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, btemp+1
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 300/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3948 ;;      Params:         0       0       0       0       0
  3949 ;;      Locals:         3       0       0       0       0
  3950 ;;      Temps:          2       0       0       0       0
  3951 ;;      Totals:         5       0       0       0       0
  3952 ;;Total ram usage:        5 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_get_time
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _time_read_1
  3963  0851                     _time_read_1:	
  3964                           
  3965                           ;clock_src.c: 134:    unsigned char time_rx=0;
  3966                           
  3967                           ;incstack = 0
  3968                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  3969  0851  01F4               	clrf	time_read_1@time_rx
  3970                           
  3971                           ;clock_src.c: 135:    int j;;clock_src.c: 136:    TRISB4=1;
  3972  0852  1683               	bsf	3,5	;RP0=1, select bank1
  3973  0853  1303               	bcf	3,6	;RP1=0, select bank1
  3974  0854  1606               	bsf	6,4	;volatile
  3975                           
  3976                           ;clock_src.c: 137:    for(j=0;j<8;j++)
  3977  0855  01F2               	clrf	time_read_1@j
  3978  0856  01F3               	clrf	time_read_1@j+1
  3979  0857                     l380:	
  3980                           
  3981                           ;clock_src.c: 138:       {;clock_src.c: 139:         RB0=0;
  3982  0857  1283               	bcf	3,5	;RP0=0, select bank0
  3983  0858  1303               	bcf	3,6	;RP1=0, select bank0
  3984  0859  1006               	bcf	6,0	;volatile
  3985                           
  3986                           ;clock_src.c: 140:         time_rx=time_rx>>1;
  3987  085A  0874               	movf	time_read_1@time_rx,w
  3988  085B  00F0               	movwf	??_time_read_1
  3989  085C  1003               	clrc
  3990  085D  0C70               	rrf	??_time_read_1,w
  3991  085E  00F1               	movwf	??_time_read_1+1
  3992  085F  0871               	movf	??_time_read_1+1,w
  3993  0860  00F4               	movwf	time_read_1@time_rx
  3994                           
  3995                           ;clock_src.c: 141:         if(RB4)time_rx=time_rx|0x80;
  3996  0861  1E06               	btfss	6,4	;volatile
  3997  0862  2868               	goto	l3082
  3998  0863  0874               	movf	time_read_1@time_rx,w
  3999  0864  3880               	iorlw	128
  4000  0865  00F0               	movwf	??_time_read_1
  4001  0866  0870               	movf	??_time_read_1,w
  4002  0867  00F4               	movwf	time_read_1@time_rx
  4003  0868                     l3082:	
  4004                           
  4005                           ;clock_src.c: 143:        RB0=1;
  4006  0868  1406               	bsf	6,0	;volatile
  4007                           
  4008                           ;clock_src.c: 144:       }
  4009  0869  3001               	movlw	1
  4010  086A  07F2               	addwf	time_read_1@j,f
  4011  086B  1803               	skipnc
  4012  086C  0AF3               	incf	time_read_1@j+1,f
  4013  086D  3000               	movlw	0
  4014  086E  07F3               	addwf	time_read_1@j+1,f
  4015  086F  0873               	movf	time_read_1@j+1,w
  4016  0870  3A80               	xorlw	128
  4017  0871  00FF               	movwf	127
  4018  0872  3080               	movlw	128
  4019  0873  027F               	subwf	127,w
  4020  0874  1D03               	skipz
  4021  0875  2878               	goto	u1715
  4022  0876  3008               	movlw	8
  4023  0877  0272               	subwf	time_read_1@j,w
  4024  0878                     u1715:	
  4025  0878  1C03               	skipc
  4026  0879  2857               	goto	l380
  4027                           
  4028                           ;clock_src.c: 145:     TRISB4=0;
  4029  087A  1683               	bsf	3,5	;RP0=1, select bank1
  4030  087B  1303               	bcf	3,6	;RP1=0, select bank1
  4031  087C  1206               	bcf	6,4	;volatile
  4032                           
  4033                           ;clock_src.c: 146:     RB0=0;
  4034  087D  1283               	bcf	3,5	;RP0=0, select bank0
  4035  087E  1006               	bcf	6,0	;volatile
  4036                           
  4037                           ;clock_src.c: 147:     return(time_rx);
  4038  087F  0874               	movf	time_read_1@time_rx,w
  4039  0880  0008               	return
  4040  0881                     __end_of_time_read_1:	
  4041                           
  4042                           	psect	text14
  4043  0B80                     __ptext14:	
  4044 ;; *************** function _get_temp *****************
  4045 ;; Defined at:
  4046 ;;		line 89 in file "Thermometer_src.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  i               2    0        int 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 300/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4060 ;;      Params:         0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0
  4062 ;;      Temps:          0       4       0       0       0
  4063 ;;      Totals:         0       4       0       0       0
  4064 ;;Total ram usage:        4 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    2
  4067 ;; This function calls:
  4068 ;;		___lbdiv
  4069 ;;		___lbmod
  4070 ;;		___lwdiv
  4071 ;;		___lwmod
  4072 ;;		_delay2
  4073 ;;		_read_byte
  4074 ;;		_reset_temp
  4075 ;;		_write_byte
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _get_temp
  4083  0B80                     _get_temp:	
  4084                           
  4085                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4086                           
  4087                           ;incstack = 0
  4088                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4089  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  4090  0B81  1409               	bsf	9,0	;volatile
  4091                           
  4092                           ;Thermometer_src.c: 93: reset_temp();
  4093  0B82  120A  158A  20E7  120A  158A  	fcall	_reset_temp
  4094                           
  4095                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4096  0B87  30CC               	movlw	204
  4097  0B88  120A  158A  211B  120A  158A  	fcall	_write_byte
  4098                           
  4099                           ;Thermometer_src.c: 95: delay2();
  4100  0B8D  160A  118A  2691  120A  158A  	fcall	_delay2
  4101                           
  4102                           ;Thermometer_src.c: 96: write_byte(0X44);
  4103  0B92  3044               	movlw	68
  4104  0B93  120A  158A  211B  120A  158A  	fcall	_write_byte
  4105                           
  4106                           ;Thermometer_src.c: 98: reset_temp();
  4107  0B98  120A  158A  20E7  120A  158A  	fcall	_reset_temp
  4108                           
  4109                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4110  0B9D  30CC               	movlw	204
  4111  0B9E  120A  158A  211B  120A  158A  	fcall	_write_byte
  4112                           
  4113                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4114  0BA3  30BE               	movlw	190
  4115  0BA4  120A  158A  211B  120A  158A  	fcall	_write_byte
  4116                           
  4117                           ;Thermometer_src.c: 101: TLV=read_byte();
  4118  0BA9  120A  158A  20B3  120A  158A  	fcall	_read_byte
  4119  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  4121  0BB0  00E2               	movwf	??_get_temp
  4122  0BB1  0862               	movf	??_get_temp,w
  4123  0BB2  00E1               	movwf	_TLV
  4124                           
  4125                           ;Thermometer_src.c: 102: THV=read_byte();
  4126  0BB3  120A  158A  20B3  120A  158A  	fcall	_read_byte
  4127  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  4128  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  4129  0BBA  00E2               	movwf	??_get_temp
  4130  0BBB  0862               	movf	??_get_temp,w
  4131  0BBC  00E0               	movwf	_THV
  4132                           
  4133                           ;Thermometer_src.c: 103: TRISE0 =1;
  4134  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  4135  0BBE  1409               	bsf	9,0	;volatile
  4136                           
  4137                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4138  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0BC0  0860               	movf	_THV,w
  4140  0BC1  00E2               	movwf	??_get_temp
  4141  0BC2  3004               	movlw	4
  4142  0BC3                     u2025:	
  4143  0BC3  1003               	clrc
  4144  0BC4  0DE2               	rlf	??_get_temp,f
  4145  0BC5  3EFF               	addlw	-1
  4146  0BC6  1D03               	skipz
  4147  0BC7  2BC3               	goto	u2025
  4148  0BC8  303F               	movlw	63
  4149  0BC9  0562               	andwf	??_get_temp,w
  4150  0BCA  00E3               	movwf	??_get_temp+1
  4151  0BCB  0861               	movf	_TLV,w
  4152  0BCC  00E4               	movwf	??_get_temp+2
  4153  0BCD  3004               	movlw	4
  4154  0BCE                     u2035:	
  4155  0BCE  1003               	clrc
  4156  0BCF  0CE4               	rrf	??_get_temp+2,f
  4157  0BD0  3EFF               	addlw	-1
  4158  0BD1  1D03               	skipz
  4159  0BD2  2BCE               	goto	u2035
  4160  0BD3  0864               	movf	??_get_temp+2,w
  4161  0BD4  0463               	iorwf	??_get_temp+1,w
  4162  0BD5  00E5               	movwf	??_get_temp+3
  4163  0BD6  0865               	movf	??_get_temp+3,w
  4164  0BD7  00DF               	movwf	_TZ
  4165                           
  4166                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4167  0BD8  0861               	movf	_TLV,w
  4168  0BD9  00E2               	movwf	??_get_temp
  4169  0BDA  3003               	movlw	3
  4170  0BDB                     u2045:	
  4171  0BDB  1003               	clrc
  4172  0BDC  0DE2               	rlf	??_get_temp,f
  4173  0BDD  3EFF               	addlw	-1
  4174  0BDE  1D03               	skipz
  4175  0BDF  2BDB               	goto	u2045
  4176  0BE0  1003               	clrc
  4177  0BE1  0D62               	rlf	??_get_temp,w
  4178  0BE2  00E3               	movwf	??_get_temp+1
  4179  0BE3  0863               	movf	??_get_temp+1,w
  4180  0BE4  00DE               	movwf	_TX
  4181                           
  4182                           ;Thermometer_src.c: 107: ge=TZ%10;
  4183  0BE5  300A               	movlw	10
  4184  0BE6  00E2               	movwf	??_get_temp
  4185  0BE7  0862               	movf	??_get_temp,w
  4186  0BE8  00F0               	movwf	___lbmod@divisor
  4187  0BE9  085F               	movf	_TZ,w
  4188  0BEA  160A  118A  2748  120A  158A  	fcall	___lbmod
  4189  0BEF  00E3               	movwf	??_get_temp+1
  4190  0BF0  0863               	movf	??_get_temp+1,w
  4191  0BF1  00DC               	movwf	_ge
  4192                           
  4193                           ;Thermometer_src.c: 108: shi=TZ/10;
  4194  0BF2  300A               	movlw	10
  4195  0BF3  00E2               	movwf	??_get_temp
  4196  0BF4  0862               	movf	??_get_temp,w
  4197  0BF5  00F0               	movwf	___lbdiv@divisor
  4198  0BF6  085F               	movf	_TZ,w
  4199  0BF7  160A  118A  2727  120A  158A  	fcall	___lbdiv
  4200  0BFC  00E3               	movwf	??_get_temp+1
  4201  0BFD  0863               	movf	??_get_temp+1,w
  4202  0BFE  00DD               	movwf	_shi
  4203                           
  4204                           ;Thermometer_src.c: 109: wd=0;
  4205  0BFF  01C5               	clrf	_wd
  4206  0C00  01C6               	clrf	_wd+1
  4207                           
  4208                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4209  0C01  1FDE               	btfss	_TX,7
  4210  0C02  2C0B               	goto	l3334
  4211  0C03  0845               	movf	_wd,w
  4212  0C04  3E88               	addlw	136
  4213  0C05  00C5               	movwf	_wd
  4214  0C06  0846               	movf	_wd+1,w
  4215  0C07  1803               	skipnc
  4216  0C08  3E01               	addlw	1
  4217  0C09  3E13               	addlw	19
  4218  0C0A  00C6               	movwf	_wd+1
  4219  0C0B                     l3334:	
  4220                           
  4221                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4222  0C0B  1F5E               	btfss	_TX,6
  4223  0C0C  2C15               	goto	l3338
  4224  0C0D  0845               	movf	_wd,w
  4225  0C0E  3EC4               	addlw	196
  4226  0C0F  00C5               	movwf	_wd
  4227  0C10  0846               	movf	_wd+1,w
  4228  0C11  1803               	skipnc
  4229  0C12  3E01               	addlw	1
  4230  0C13  3E09               	addlw	9
  4231  0C14  00C6               	movwf	_wd+1
  4232  0C15                     l3338:	
  4233                           
  4234                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4235  0C15  1EDE               	btfss	_TX,5
  4236  0C16  2C1F               	goto	l3342
  4237  0C17  0845               	movf	_wd,w
  4238  0C18  3EE2               	addlw	226
  4239  0C19  00C5               	movwf	_wd
  4240  0C1A  0846               	movf	_wd+1,w
  4241  0C1B  1803               	skipnc
  4242  0C1C  3E01               	addlw	1
  4243  0C1D  3E04               	addlw	4
  4244  0C1E  00C6               	movwf	_wd+1
  4245  0C1F                     l3342:	
  4246                           
  4247                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4248  0C1F  1E5E               	btfss	_TX,4
  4249  0C20  2C29               	goto	l3346
  4250  0C21  0845               	movf	_wd,w
  4251  0C22  3E71               	addlw	113
  4252  0C23  00C5               	movwf	_wd
  4253  0C24  0846               	movf	_wd+1,w
  4254  0C25  1803               	skipnc
  4255  0C26  3E01               	addlw	1
  4256  0C27  3E02               	addlw	2
  4257  0C28  00C6               	movwf	_wd+1
  4258  0C29                     l3346:	
  4259                           
  4260                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4261  0C29  30E8               	movlw	232
  4262  0C2A  00F6               	movwf	___lwdiv@divisor
  4263  0C2B  3003               	movlw	3
  4264  0C2C  00F7               	movwf	___lwdiv@divisor+1
  4265  0C2D  0846               	movf	_wd+1,w
  4266  0C2E  00F9               	movwf	___lwdiv@dividend+1
  4267  0C2F  0845               	movf	_wd,w
  4268  0C30  00F8               	movwf	___lwdiv@dividend
  4269  0C31  120A  158A  2189  120A  158A  	fcall	___lwdiv
  4270  0C36  0876               	movf	?___lwdiv,w
  4271  0C37  00E2               	movwf	??_get_temp
  4272  0C38  0862               	movf	??_get_temp,w
  4273  0C39  00DB               	movwf	_shifen
  4274                           
  4275                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4276  0C3A  3064               	movlw	100
  4277  0C3B  00F6               	movwf	___lwdiv@divisor
  4278  0C3C  3000               	movlw	0
  4279  0C3D  00F7               	movwf	___lwdiv@divisor+1
  4280  0C3E  0846               	movf	_wd+1,w
  4281  0C3F  00F3               	movwf	___lwmod@dividend+1
  4282  0C40  0845               	movf	_wd,w
  4283  0C41  00F2               	movwf	___lwmod@dividend
  4284  0C42  30E8               	movlw	232
  4285  0C43  00F0               	movwf	___lwmod@divisor
  4286  0C44  3003               	movlw	3
  4287  0C45  00F1               	movwf	___lwmod@divisor+1
  4288  0C46  120A  158A  2081  120A  158A  	fcall	___lwmod
  4289  0C4B  0871               	movf	?___lwmod+1,w
  4290  0C4C  00F9               	movwf	___lwdiv@dividend+1
  4291  0C4D  0870               	movf	?___lwmod,w
  4292  0C4E  00F8               	movwf	___lwdiv@dividend
  4293  0C4F  120A  158A  2189  120A  158A  	fcall	___lwdiv
  4294  0C54  0876               	movf	?___lwdiv,w
  4295  0C55  00E2               	movwf	??_get_temp
  4296  0C56  0862               	movf	??_get_temp,w
  4297  0C57  00DA               	movwf	_baifen
  4298                           
  4299                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4300  0C58  300A               	movlw	10
  4301  0C59  00F6               	movwf	___lwdiv@divisor
  4302  0C5A  3000               	movlw	0
  4303  0C5B  00F7               	movwf	___lwdiv@divisor+1
  4304  0C5C  0846               	movf	_wd+1,w
  4305  0C5D  00F3               	movwf	___lwmod@dividend+1
  4306  0C5E  0845               	movf	_wd,w
  4307  0C5F  00F2               	movwf	___lwmod@dividend
  4308  0C60  3064               	movlw	100
  4309  0C61  00F0               	movwf	___lwmod@divisor
  4310  0C62  3000               	movlw	0
  4311  0C63  00F1               	movwf	___lwmod@divisor+1
  4312  0C64  120A  158A  2081  120A  158A  	fcall	___lwmod
  4313  0C69  0871               	movf	?___lwmod+1,w
  4314  0C6A  00F9               	movwf	___lwdiv@dividend+1
  4315  0C6B  0870               	movf	?___lwmod,w
  4316  0C6C  00F8               	movwf	___lwdiv@dividend
  4317  0C6D  120A  158A  2189  120A  158A  	fcall	___lwdiv
  4318  0C72  0876               	movf	?___lwdiv,w
  4319  0C73  00E2               	movwf	??_get_temp
  4320  0C74  0862               	movf	??_get_temp,w
  4321  0C75  00D9               	movwf	_qianfen
  4322                           
  4323                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4324  0C76  300A               	movlw	10
  4325  0C77  00F0               	movwf	___lwmod@divisor
  4326  0C78  3000               	movlw	0
  4327  0C79  00F1               	movwf	___lwmod@divisor+1
  4328  0C7A  0846               	movf	_wd+1,w
  4329  0C7B  00F3               	movwf	___lwmod@dividend+1
  4330  0C7C  0845               	movf	_wd,w
  4331  0C7D  00F2               	movwf	___lwmod@dividend
  4332  0C7E  120A  158A  2081   	fcall	___lwmod
  4333  0C81  0870               	movf	?___lwmod,w
  4334  0C82  00E2               	movwf	??_get_temp
  4335  0C83  0862               	movf	??_get_temp,w
  4336  0C84  00D8               	movwf	_wanfen
  4337                           
  4338                           ;Thermometer_src.c: 118: __nop();
  4339  0C85  0000               	nop
  4340  0C86  0008               	return
  4341  0C87                     __end_of_get_temp:	
  4342                           
  4343                           	psect	text15
  4344  091B                     __ptext15:	
  4345 ;; *************** function _write_byte *****************
  4346 ;; Defined at:
  4347 ;;		line 40 in file "Thermometer_src.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  val             1    wreg     unsigned char 
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  val             1    7[COMMON] unsigned char 
  4352 ;;  i               1    8[COMMON] unsigned char 
  4353 ;;  temp            1    6[COMMON] unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      void 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0, pclath, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/100
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4363 ;;      Params:         0       0       0       0       0
  4364 ;;      Locals:         3       0       0       0       0
  4365 ;;      Temps:          2       0       0       0       0
  4366 ;;      Totals:         5       0       0       0       0
  4367 ;;Total ram usage:        5 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    1
  4370 ;; This function calls:
  4371 ;;		_delay_temp
  4372 ;; This function is called by:
  4373 ;;		_get_temp
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _write_byte
  4379  091B                     _write_byte:	
  4380                           
  4381                           ;incstack = 0
  4382                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4383                           ;write_byte@val stored from wreg
  4384  091B  00F7               	movwf	write_byte@val
  4385                           
  4386                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4387  091C  3008               	movlw	8
  4388  091D  00F4               	movwf	??_write_byte
  4389  091E  0874               	movf	??_write_byte,w
  4390  091F  00F8               	movwf	write_byte@i
  4391  0920                     l2970:	
  4392                           
  4393                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4394  0920  0877               	movf	write_byte@val,w
  4395  0921  3901               	andlw	1
  4396  0922  00F4               	movwf	??_write_byte
  4397  0923  0874               	movf	??_write_byte,w
  4398  0924  00F6               	movwf	write_byte@temp
  4399                           
  4400                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4401  0925  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0926  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0927  1009               	bcf	9,0	;volatile
  4404  0928  1683               	bsf	3,5	;RP0=1, select bank1
  4405  0929  1009               	bcf	9,0	;volatile
  4406                           
  4407                           ;Thermometer_src.c: 48:    __nop();
  4408  092A  0000               	nop
  4409                           
  4410                           ;Thermometer_src.c: 49:    __nop();
  4411  092B  0000               	nop
  4412                           
  4413                           ;Thermometer_src.c: 50:    __nop();
  4414  092C  0000               	nop
  4415                           
  4416                           ;Thermometer_src.c: 51:    __nop();
  4417  092D  0000               	nop
  4418                           
  4419                           ;Thermometer_src.c: 52:    __nop();
  4420  092E  0000               	nop
  4421                           
  4422                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4423  092F  0376               	decf	write_byte@temp,w
  4424  0930  1D03               	btfss	3,2
  4425  0931  2935               	goto	l2990
  4426  0932  1683               	bsf	3,5	;RP0=1, select bank1
  4427  0933  1303               	bcf	3,6	;RP1=0, select bank1
  4428  0934  1409               	bsf	9,0	;volatile
  4429  0935                     l2990:	
  4430                           
  4431                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4432  0935  3007               	movlw	7
  4433  0936  00F4               	movwf	??_write_byte
  4434  0937  0874               	movf	??_write_byte,w
  4435  0938  00F0               	movwf	delay_temp@y
  4436  0939  3002               	movlw	2
  4437  093A  160A  118A  261C  120A  158A  	fcall	_delay_temp
  4438                           
  4439                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4440  093F  1683               	bsf	3,5	;RP0=1, select bank1
  4441  0940  1303               	bcf	3,6	;RP1=0, select bank1
  4442  0941  1409               	bsf	9,0	;volatile
  4443                           
  4444                           ;Thermometer_src.c: 56:    __nop();
  4445  0942  0000               	nop
  4446                           
  4447                           ;Thermometer_src.c: 57:    __nop();
  4448  0943  0000               	nop
  4449                           
  4450                           ;Thermometer_src.c: 58:    val=val>>1;
  4451  0944  0877               	movf	write_byte@val,w
  4452  0945  00F4               	movwf	??_write_byte
  4453  0946  1003               	clrc
  4454  0947  0C74               	rrf	??_write_byte,w
  4455  0948  00F5               	movwf	??_write_byte+1
  4456  0949  0875               	movf	??_write_byte+1,w
  4457  094A  00F7               	movwf	write_byte@val
  4458                           
  4459                           ;Thermometer_src.c: 59:   }
  4460  094B  3001               	movlw	1
  4461  094C  02F8               	subwf	write_byte@i,f
  4462  094D  0878               	movf	write_byte@i,w
  4463  094E  1903               	btfsc	3,2
  4464  094F  0008               	return
  4465  0950  2920               	goto	l2970
  4466  0951                     __end_of_write_byte:	
  4467                           
  4468                           	psect	text16
  4469  08E7                     __ptext16:	
  4470 ;; *************** function _reset_temp *****************
  4471 ;; Defined at:
  4472 ;;		line 25 in file "Thermometer_src.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  presence        1    5[COMMON] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0, pclath, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/100
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4486 ;;      Params:         0       0       0       0       0
  4487 ;;      Locals:         1       0       0       0       0
  4488 ;;      Temps:          1       0       0       0       0
  4489 ;;      Totals:         2       0       0       0       0
  4490 ;;Total ram usage:        2 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    1
  4493 ;; This function calls:
  4494 ;;		_delay_temp
  4495 ;; This function is called by:
  4496 ;;		_get_temp
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _reset_temp
  4502  08E7                     _reset_temp:	
  4503                           
  4504                           ;Thermometer_src.c: 27:   char presence=1;
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4508  08E7  01F5               	clrf	reset_temp@presence
  4509  08E8  0AF5               	incf	reset_temp@presence,f
  4510  08E9                     l2962:	
  4511                           ;Thermometer_src.c: 28:   while(presence)
  4512                           
  4513                           
  4514                           ;Thermometer_src.c: 28:   while(presence)
  4515  08E9  0875               	movf	reset_temp@presence,w
  4516  08EA  1903               	btfsc	3,2
  4517  08EB  0008               	return
  4518                           
  4519                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4520  08EC  1283               	bcf	3,5	;RP0=0, select bank0
  4521  08ED  1303               	bcf	3,6	;RP1=0, select bank0
  4522  08EE  1009               	bcf	9,0	;volatile
  4523  08EF  1683               	bsf	3,5	;RP0=1, select bank1
  4524  08F0  1009               	bcf	9,0	;volatile
  4525                           
  4526                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4527  08F1  3046               	movlw	70
  4528  08F2  00F4               	movwf	??_reset_temp
  4529  08F3  0874               	movf	??_reset_temp,w
  4530  08F4  00F0               	movwf	delay_temp@y
  4531  08F5  3002               	movlw	2
  4532  08F6  160A  118A  261C  120A  158A  	fcall	_delay_temp
  4533                           
  4534                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4535  08FB  1683               	bsf	3,5	;RP0=1, select bank1
  4536  08FC  1303               	bcf	3,6	;RP1=0, select bank1
  4537  08FD  1409               	bsf	9,0	;volatile
  4538                           
  4539                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4540  08FE  3008               	movlw	8
  4541  08FF  00F4               	movwf	??_reset_temp
  4542  0900  0874               	movf	??_reset_temp,w
  4543  0901  00F0               	movwf	delay_temp@y
  4544  0902  3002               	movlw	2
  4545  0903  160A  118A  261C  120A  158A  	fcall	_delay_temp
  4546                           
  4547                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4548  0908  1283               	bcf	3,5	;RP0=0, select bank0
  4549  0909  1303               	bcf	3,6	;RP1=0, select bank0
  4550  090A  1C09               	btfss	9,0	;volatile
  4551  090B  290F               	goto	l2958
  4552  090C  01F5               	clrf	reset_temp@presence
  4553  090D  0AF5               	incf	reset_temp@presence,f
  4554  090E  2910               	goto	l2960
  4555  090F                     l2958:	
  4556  090F  01F5               	clrf	reset_temp@presence
  4557  0910                     l2960:	
  4558                           
  4559                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4560  0910  303C               	movlw	60
  4561  0911  00F4               	movwf	??_reset_temp
  4562  0912  0874               	movf	??_reset_temp,w
  4563  0913  00F0               	movwf	delay_temp@y
  4564  0914  3002               	movlw	2
  4565  0915  160A  118A  261C  120A  158A  	fcall	_delay_temp
  4566  091A  28E9               	goto	l2962
  4567  091B                     __end_of_reset_temp:	
  4568                           
  4569                           	psect	text17
  4570  08B3                     __ptext17:	
  4571 ;; *************** function _read_byte *****************
  4572 ;; Defined at:
  4573 ;;		line 62 in file "Thermometer_src.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;		None
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  i               1    6[COMMON] unsigned char 
  4578 ;;  value           1    5[COMMON] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0, pclath, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/100
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4588 ;;      Params:         0       0       0       0       0
  4589 ;;      Locals:         2       0       0       0       0
  4590 ;;      Temps:          1       0       0       0       0
  4591 ;;      Totals:         3       0       0       0       0
  4592 ;;Total ram usage:        3 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    1
  4595 ;; This function calls:
  4596 ;;		_delay_temp
  4597 ;; This function is called by:
  4598 ;;		_get_temp
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           
  4603                           ;psect for function _read_byte
  4604  08B3                     _read_byte:	
  4605                           
  4606                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4607                           
  4608                           ;incstack = 0
  4609                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4610  08B3  01F5               	clrf	read_byte@value
  4611                           
  4612                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4613  08B4  3008               	movlw	8
  4614  08B5  00F4               	movwf	??_read_byte
  4615  08B6  0874               	movf	??_read_byte,w
  4616  08B7  00F6               	movwf	read_byte@i
  4617  08B8                     l3012:	
  4618                           
  4619                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4620  08B8  1003               	clrc
  4621  08B9  0CF5               	rrf	read_byte@value,f
  4622                           
  4623                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4624  08BA  1283               	bcf	3,5	;RP0=0, select bank0
  4625  08BB  1303               	bcf	3,6	;RP1=0, select bank0
  4626  08BC  1009               	bcf	9,0	;volatile
  4627  08BD  1683               	bsf	3,5	;RP0=1, select bank1
  4628  08BE  1009               	bcf	9,0	;volatile
  4629                           
  4630                           ;Thermometer_src.c: 71:    __nop();
  4631  08BF  0000               	nop
  4632                           
  4633                           ;Thermometer_src.c: 72:    __nop();
  4634  08C0  0000               	nop
  4635                           
  4636                           ;Thermometer_src.c: 73:    __nop();
  4637  08C1  0000               	nop
  4638                           
  4639                           ;Thermometer_src.c: 74:    __nop();
  4640  08C2  0000               	nop
  4641                           
  4642                           ;Thermometer_src.c: 75:    __nop();
  4643  08C3  0000               	nop
  4644                           
  4645                           ;Thermometer_src.c: 76:    __nop();
  4646  08C4  0000               	nop
  4647                           
  4648                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4649  08C5  1683               	bsf	3,5	;RP0=1, select bank1
  4650  08C6  1303               	bcf	3,6	;RP1=0, select bank1
  4651  08C7  1409               	bsf	9,0	;volatile
  4652                           
  4653                           ;Thermometer_src.c: 78:    __nop();
  4654  08C8  0000               	nop
  4655                           
  4656                           ;Thermometer_src.c: 79:    __nop();
  4657  08C9  0000               	nop
  4658                           
  4659                           ;Thermometer_src.c: 80:    __nop();
  4660  08CA  0000               	nop
  4661                           
  4662                           ;Thermometer_src.c: 81:    __nop();
  4663  08CB  0000               	nop
  4664                           
  4665                           ;Thermometer_src.c: 82:    __nop();
  4666  08CC  0000               	nop
  4667                           
  4668                           ;Thermometer_src.c: 83:    j=RE0;
  4669  08CD  3000               	movlw	0
  4670  08CE  1283               	bcf	3,5	;RP0=0, select bank0
  4671  08CF  1303               	bcf	3,6	;RP1=0, select bank0
  4672  08D0  1809               	btfsc	9,0	;volatile
  4673  08D1  3001               	movlw	1
  4674  08D2  00C7               	movwf	read_byte@j
  4675                           
  4676                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4677  08D3  0847               	movf	read_byte@j,w
  4678  08D4  1D03               	btfss	3,2
  4679  08D5  17F5               	bsf	read_byte@value,7
  4680                           
  4681                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4682  08D6  3007               	movlw	7
  4683  08D7  00F4               	movwf	??_read_byte
  4684  08D8  0874               	movf	??_read_byte,w
  4685  08D9  00F0               	movwf	delay_temp@y
  4686  08DA  3002               	movlw	2
  4687  08DB  160A  118A  261C  120A  158A  	fcall	_delay_temp
  4688                           
  4689                           ;Thermometer_src.c: 86:   }
  4690  08E0  3001               	movlw	1
  4691  08E1  02F6               	subwf	read_byte@i,f
  4692  08E2  0876               	movf	read_byte@i,w
  4693  08E3  1D03               	btfss	3,2
  4694  08E4  28B8               	goto	l3012
  4695                           
  4696                           ;Thermometer_src.c: 87:   return(value);
  4697  08E5  0875               	movf	read_byte@value,w
  4698  08E6  0008               	return
  4699  08E7                     __end_of_read_byte:	
  4700                           
  4701                           	psect	text18
  4702  161C                     __ptext18:	
  4703 ;; *************** function _delay_temp *****************
  4704 ;; Defined at:
  4705 ;;		line 121 in file "Thermometer_src.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  x               1    wreg     unsigned char 
  4708 ;;  y               1    0[COMMON] unsigned char 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  x               1    2[COMMON] unsigned char 
  4711 ;;  z               1    3[COMMON] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/100
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4721 ;;      Params:         1       0       0       0       0
  4722 ;;      Locals:         2       0       0       0       0
  4723 ;;      Temps:          1       0       0       0       0
  4724 ;;      Totals:         4       0       0       0       0
  4725 ;;Total ram usage:        4 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_reset_temp
  4731 ;;		_write_byte
  4732 ;;		_read_byte
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _delay_temp
  4738  161C                     _delay_temp:	
  4739                           
  4740                           ;incstack = 0
  4741                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  4742                           ;delay_temp@x stored from wreg
  4743  161C  00F2               	movwf	delay_temp@x
  4744  161D                     l321:	
  4745                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  4746                           
  4747                           
  4748                           ;Thermometer_src.c: 125:  z=y;
  4749  161D  0870               	movf	delay_temp@y,w
  4750  161E  00F1               	movwf	??_delay_temp
  4751  161F  0871               	movf	??_delay_temp,w
  4752  1620  00F3               	movwf	delay_temp@z
  4753  1621                     l2888:	
  4754  1621  3001               	movlw	1
  4755  1622  02F3               	subwf	delay_temp@z,f
  4756  1623  1D03               	btfss	3,2
  4757  1624  2E21               	goto	l2888
  4758                           
  4759                           ;Thermometer_src.c: 127:  }while(--x);
  4760  1625  3001               	movlw	1
  4761  1626  02F2               	subwf	delay_temp@x,f
  4762  1627  1903               	btfsc	3,2
  4763  1628  0008               	return
  4764  1629  2E1D               	goto	l321
  4765  162A                     __end_of_delay_temp:	
  4766                           
  4767                           	psect	text19
  4768  1691                     __ptext19:	
  4769 ;; *************** function _delay2 *****************
  4770 ;; Defined at:
  4771 ;;		line 130 in file "Thermometer_src.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;		None
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  i               2    0[COMMON] int 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, status,2, btemp+1
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/100
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4785 ;;      Params:         0       0       0       0       0
  4786 ;;      Locals:         2       0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0
  4788 ;;      Totals:         2       0       0       0       0
  4789 ;;Total ram usage:        2 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_get_temp
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _delay2
  4800  1691                     _delay2:	
  4801                           
  4802                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  4806  1691  01F0               	clrf	delay2@i
  4807  1692  01F1               	clrf	delay2@i+1
  4808  1693                     l3064:	
  4809                           
  4810                           ;Thermometer_src.c: 132:  }
  4811  1693  3001               	movlw	1
  4812  1694  07F0               	addwf	delay2@i,f
  4813  1695  1803               	skipnc
  4814  1696  0AF1               	incf	delay2@i+1,f
  4815  1697  3000               	movlw	0
  4816  1698  07F1               	addwf	delay2@i+1,f
  4817  1699  0871               	movf	delay2@i+1,w
  4818  169A  3A80               	xorlw	128
  4819  169B  00FF               	movwf	127
  4820  169C  3080               	movlw	128
  4821  169D  027F               	subwf	127,w
  4822  169E  1D03               	skipz
  4823  169F  2EA2               	goto	u1695
  4824  16A0  3032               	movlw	50
  4825  16A1  0270               	subwf	delay2@i,w
  4826  16A2                     u1695:	
  4827  16A2  1803               	btfsc	3,0
  4828  16A3  0008               	return
  4829  16A4  2E93               	goto	l3064
  4830  16A5                     __end_of_delay2:	
  4831                           
  4832                           	psect	text20
  4833  0881                     __ptext20:	
  4834 ;; *************** function ___lwmod *****************
  4835 ;; Defined at:
  4836 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  divisor         2    0[COMMON] unsigned int 
  4839 ;;  dividend        2    2[COMMON] unsigned int 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  counter         1    5[COMMON] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  2    0[COMMON] unsigned int 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0
  4846 ;; Tracked objects:
  4847 ;;		On entry : 300/0
  4848 ;;		On exit  : 300/0
  4849 ;;		Unchanged: 300/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4851 ;;      Params:         4       0       0       0       0
  4852 ;;      Locals:         1       0       0       0       0
  4853 ;;      Temps:          1       0       0       0       0
  4854 ;;      Totals:         6       0       0       0       0
  4855 ;;Total ram usage:        6 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_get_temp
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           
  4865                           ;psect for function ___lwmod
  4866  0881                     ___lwmod:	
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4870  0881  0870               	movf	___lwmod@divisor,w
  4871  0882  0471               	iorwf	___lwmod@divisor+1,w
  4872  0883  1903               	btfsc	3,2
  4873  0884  28AE               	goto	l3248
  4874  0885  01F5               	clrf	___lwmod@counter
  4875  0886  0AF5               	incf	___lwmod@counter,f
  4876  0887                     l3238:	
  4877  0887  1BF1               	btfsc	___lwmod@divisor+1,7
  4878  0888  2895               	goto	l3240
  4879  0889  3001               	movlw	1
  4880  088A                     u1975:	
  4881  088A  1003               	clrc
  4882  088B  0DF0               	rlf	___lwmod@divisor,f
  4883  088C  0DF1               	rlf	___lwmod@divisor+1,f
  4884  088D  3EFF               	addlw	-1
  4885  088E  1D03               	skipz
  4886  088F  288A               	goto	u1975
  4887  0890  3001               	movlw	1
  4888  0891  00F4               	movwf	??___lwmod
  4889  0892  0874               	movf	??___lwmod,w
  4890  0893  07F5               	addwf	___lwmod@counter,f
  4891  0894  2887               	goto	l3238
  4892  0895                     l3240:	
  4893  0895  0871               	movf	___lwmod@divisor+1,w
  4894  0896  0273               	subwf	___lwmod@dividend+1,w
  4895  0897  1D03               	skipz
  4896  0898  289B               	goto	u1995
  4897  0899  0870               	movf	___lwmod@divisor,w
  4898  089A  0272               	subwf	___lwmod@dividend,w
  4899  089B                     u1995:	
  4900  089B  1C03               	skipc
  4901  089C  28A3               	goto	l3244
  4902  089D  0870               	movf	___lwmod@divisor,w
  4903  089E  02F2               	subwf	___lwmod@dividend,f
  4904  089F  0871               	movf	___lwmod@divisor+1,w
  4905  08A0  1C03               	skipc
  4906  08A1  03F3               	decf	___lwmod@dividend+1,f
  4907  08A2  02F3               	subwf	___lwmod@dividend+1,f
  4908  08A3                     l3244:	
  4909  08A3  3001               	movlw	1
  4910  08A4                     u2005:	
  4911  08A4  1003               	clrc
  4912  08A5  0CF1               	rrf	___lwmod@divisor+1,f
  4913  08A6  0CF0               	rrf	___lwmod@divisor,f
  4914  08A7  3EFF               	addlw	-1
  4915  08A8  1D03               	skipz
  4916  08A9  28A4               	goto	u2005
  4917  08AA  3001               	movlw	1
  4918  08AB  02F5               	subwf	___lwmod@counter,f
  4919  08AC  1D03               	btfss	3,2
  4920  08AD  2895               	goto	l3240
  4921  08AE                     l3248:	
  4922  08AE  0873               	movf	___lwmod@dividend+1,w
  4923  08AF  00F1               	movwf	?___lwmod+1
  4924  08B0  0872               	movf	___lwmod@dividend,w
  4925  08B1  00F0               	movwf	?___lwmod
  4926  08B2  0008               	return
  4927  08B3                     __end_of___lwmod:	
  4928                           
  4929                           	psect	text21
  4930  0989                     __ptext21:	
  4931 ;; *************** function ___lwdiv *****************
  4932 ;; Defined at:
  4933 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  divisor         2    6[COMMON] unsigned int 
  4936 ;;  dividend        2    8[COMMON] unsigned int 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  quotient        2   11[COMMON] unsigned int 
  4939 ;;  counter         1   13[COMMON] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  2    6[COMMON] unsigned int 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0
  4944 ;; Tracked objects:
  4945 ;;		On entry : 300/0
  4946 ;;		On exit  : 300/0
  4947 ;;		Unchanged: 300/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4949 ;;      Params:         4       0       0       0       0
  4950 ;;      Locals:         3       0       0       0       0
  4951 ;;      Temps:          1       0       0       0       0
  4952 ;;      Totals:         8       0       0       0       0
  4953 ;;Total ram usage:        8 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; This function calls:
  4956 ;;		Nothing
  4957 ;; This function is called by:
  4958 ;;		_get_temp
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function ___lwdiv
  4964  0989                     ___lwdiv:	
  4965                           
  4966                           ;incstack = 0
  4967                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4968  0989  01FB               	clrf	___lwdiv@quotient
  4969  098A  01FC               	clrf	___lwdiv@quotient+1
  4970  098B  0876               	movf	___lwdiv@divisor,w
  4971  098C  0477               	iorwf	___lwdiv@divisor+1,w
  4972  098D  1903               	btfsc	3,2
  4973  098E  29C0               	goto	l3226
  4974  098F  01FD               	clrf	___lwdiv@counter
  4975  0990  0AFD               	incf	___lwdiv@counter,f
  4976  0991                     l3214:	
  4977  0991  1BF7               	btfsc	___lwdiv@divisor+1,7
  4978  0992  299F               	goto	l3216
  4979  0993  3001               	movlw	1
  4980  0994                     u1905:	
  4981  0994  1003               	clrc
  4982  0995  0DF6               	rlf	___lwdiv@divisor,f
  4983  0996  0DF7               	rlf	___lwdiv@divisor+1,f
  4984  0997  3EFF               	addlw	-1
  4985  0998  1D03               	skipz
  4986  0999  2994               	goto	u1905
  4987  099A  3001               	movlw	1
  4988  099B  00FA               	movwf	??___lwdiv
  4989  099C  087A               	movf	??___lwdiv,w
  4990  099D  07FD               	addwf	___lwdiv@counter,f
  4991  099E  2991               	goto	l3214
  4992  099F                     l3216:	
  4993  099F  3001               	movlw	1
  4994  09A0                     u1925:	
  4995  09A0  1003               	clrc
  4996  09A1  0DFB               	rlf	___lwdiv@quotient,f
  4997  09A2  0DFC               	rlf	___lwdiv@quotient+1,f
  4998  09A3  3EFF               	addlw	-1
  4999  09A4  1D03               	skipz
  5000  09A5  29A0               	goto	u1925
  5001  09A6  0877               	movf	___lwdiv@divisor+1,w
  5002  09A7  0279               	subwf	___lwdiv@dividend+1,w
  5003  09A8  1D03               	skipz
  5004  09A9  29AC               	goto	u1935
  5005  09AA  0876               	movf	___lwdiv@divisor,w
  5006  09AB  0278               	subwf	___lwdiv@dividend,w
  5007  09AC                     u1935:	
  5008  09AC  1C03               	skipc
  5009  09AD  29B5               	goto	l3222
  5010  09AE  0876               	movf	___lwdiv@divisor,w
  5011  09AF  02F8               	subwf	___lwdiv@dividend,f
  5012  09B0  0877               	movf	___lwdiv@divisor+1,w
  5013  09B1  1C03               	skipc
  5014  09B2  03F9               	decf	___lwdiv@dividend+1,f
  5015  09B3  02F9               	subwf	___lwdiv@dividend+1,f
  5016  09B4  147B               	bsf	___lwdiv@quotient,0
  5017  09B5                     l3222:	
  5018  09B5  3001               	movlw	1
  5019  09B6                     u1945:	
  5020  09B6  1003               	clrc
  5021  09B7  0CF7               	rrf	___lwdiv@divisor+1,f
  5022  09B8  0CF6               	rrf	___lwdiv@divisor,f
  5023  09B9  3EFF               	addlw	-1
  5024  09BA  1D03               	skipz
  5025  09BB  29B6               	goto	u1945
  5026  09BC  3001               	movlw	1
  5027  09BD  02FD               	subwf	___lwdiv@counter,f
  5028  09BE  1D03               	btfss	3,2
  5029  09BF  299F               	goto	l3216
  5030  09C0                     l3226:	
  5031  09C0  087C               	movf	___lwdiv@quotient+1,w
  5032  09C1  00F7               	movwf	?___lwdiv+1
  5033  09C2  087B               	movf	___lwdiv@quotient,w
  5034  09C3  00F6               	movwf	?___lwdiv
  5035  09C4  0008               	return
  5036  09C5                     __end_of___lwdiv:	
  5037                           
  5038                           	psect	text22
  5039  1748                     __ptext22:	
  5040 ;; *************** function ___lbmod *****************
  5041 ;; Defined at:
  5042 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  dividend        1    wreg     unsigned char 
  5045 ;;  divisor         1    0[COMMON] unsigned char 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  dividend        1    4[COMMON] unsigned char 
  5048 ;;  rem             1    6[COMMON] unsigned char 
  5049 ;;  counter         1    5[COMMON] unsigned char 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      unsigned char 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, status,0
  5054 ;; Tracked objects:
  5055 ;;		On entry : 300/0
  5056 ;;		On exit  : 300/0
  5057 ;;		Unchanged: 300/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5059 ;;      Params:         1       0       0       0       0
  5060 ;;      Locals:         3       0       0       0       0
  5061 ;;      Temps:          3       0       0       0       0
  5062 ;;      Totals:         7       0       0       0       0
  5063 ;;Total ram usage:        7 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_get_temp
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           
  5073                           ;psect for function ___lbmod
  5074  1748                     ___lbmod:	
  5075                           
  5076                           ;incstack = 0
  5077                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5078                           ;___lbmod@dividend stored from wreg
  5079  1748  00F4               	movwf	___lbmod@dividend
  5080  1749  3008               	movlw	8
  5081  174A  00F1               	movwf	??___lbmod
  5082  174B  0871               	movf	??___lbmod,w
  5083  174C  00F5               	movwf	___lbmod@counter
  5084  174D  01F6               	clrf	___lbmod@rem
  5085  174E                     l3192:	
  5086  174E  0874               	movf	___lbmod@dividend,w
  5087  174F  00F1               	movwf	??___lbmod
  5088  1750  3007               	movlw	7
  5089  1751                     u1865:	
  5090  1751  1003               	clrc
  5091  1752  0CF1               	rrf	??___lbmod,f
  5092  1753  3EFF               	addlw	-1
  5093  1754  1D03               	skipz
  5094  1755  2F51               	goto	u1865
  5095  1756  0876               	movf	___lbmod@rem,w
  5096  1757  00F2               	movwf	??___lbmod+1
  5097  1758  0772               	addwf	??___lbmod+1,w
  5098  1759  0471               	iorwf	??___lbmod,w
  5099  175A  00F3               	movwf	??___lbmod+2
  5100  175B  0873               	movf	??___lbmod+2,w
  5101  175C  00F6               	movwf	___lbmod@rem
  5102  175D  1003               	clrc
  5103  175E  0DF4               	rlf	___lbmod@dividend,f
  5104  175F  0870               	movf	___lbmod@divisor,w
  5105  1760  0276               	subwf	___lbmod@rem,w
  5106  1761  1C03               	skipc
  5107  1762  2F65               	goto	l1144
  5108  1763  0870               	movf	___lbmod@divisor,w
  5109  1764  02F6               	subwf	___lbmod@rem,f
  5110  1765                     l1144:	
  5111  1765  3001               	movlw	1
  5112  1766  02F5               	subwf	___lbmod@counter,f
  5113  1767  1D03               	btfss	3,2
  5114  1768  2F4E               	goto	l3192
  5115  1769  0876               	movf	___lbmod@rem,w
  5116  176A  0008               	return
  5117  176B                     __end_of___lbmod:	
  5118                           
  5119                           	psect	text23
  5120  1727                     __ptext23:	
  5121 ;; *************** function ___lbdiv *****************
  5122 ;; Defined at:
  5123 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  dividend        1    wreg     unsigned char 
  5126 ;;  divisor         1    0[COMMON] unsigned char 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  dividend        1    2[COMMON] unsigned char 
  5129 ;;  quotient        1    4[COMMON] unsigned char 
  5130 ;;  counter         1    3[COMMON] unsigned char 
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      unsigned char 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 300/0
  5137 ;;		On exit  : 300/0
  5138 ;;		Unchanged: 300/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5140 ;;      Params:         1       0       0       0       0
  5141 ;;      Locals:         3       0       0       0       0
  5142 ;;      Temps:          1       0       0       0       0
  5143 ;;      Totals:         5       0       0       0       0
  5144 ;;Total ram usage:        5 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_get_temp
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function ___lbdiv
  5155  1727                     ___lbdiv:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5159                           ;___lbdiv@dividend stored from wreg
  5160  1727  00F2               	movwf	___lbdiv@dividend
  5161  1728  01F4               	clrf	___lbdiv@quotient
  5162  1729  0870               	movf	___lbdiv@divisor,w
  5163  172A  1903               	btfsc	3,2
  5164  172B  2F46               	goto	l3184
  5165  172C  01F3               	clrf	___lbdiv@counter
  5166  172D  0AF3               	incf	___lbdiv@counter,f
  5167  172E                     l3172:	
  5168  172E  1BF0               	btfsc	___lbdiv@divisor,7
  5169  172F  2F37               	goto	l3174
  5170  1730  1003               	clrc
  5171  1731  0DF0               	rlf	___lbdiv@divisor,f
  5172  1732  3001               	movlw	1
  5173  1733  00F1               	movwf	??___lbdiv
  5174  1734  0871               	movf	??___lbdiv,w
  5175  1735  07F3               	addwf	___lbdiv@counter,f
  5176  1736  2F2E               	goto	l3172
  5177  1737                     l3174:	
  5178  1737  1003               	clrc
  5179  1738  0DF4               	rlf	___lbdiv@quotient,f
  5180  1739  0870               	movf	___lbdiv@divisor,w
  5181  173A  0272               	subwf	___lbdiv@dividend,w
  5182  173B  1C03               	skipc
  5183  173C  2F41               	goto	L1
  5184  173D  0870               	movf	___lbdiv@divisor,w
  5185  173E  02F2               	subwf	___lbdiv@dividend,f
  5186  173F  1474               	bsf	___lbdiv@quotient,0
  5187  1740  1003               	clrc
  5188  1741                     L1:	
  5189  1741  0CF0               	rrf	___lbdiv@divisor,f
  5190  1742  3001               	movlw	1
  5191  1743  02F3               	subwf	___lbdiv@counter,f
  5192  1744  1D03               	btfss	3,2
  5193  1745  2F37               	goto	l3174
  5194  1746                     l3184:	
  5195  1746  0874               	movf	___lbdiv@quotient,w
  5196  1747  0008               	return
  5197  1748                     __end_of___lbdiv:	
  5198                           
  5199                           	psect	text24
  5200  1639                     __ptext24:	
  5201 ;; *************** function _ds1302_init *****************
  5202 ;; Defined at:
  5203 ;;		line 6 in file "clock_src.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;		None
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;		None
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      void 
  5210 ;; Registers used:
  5211 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 300/0
  5214 ;;		On exit  : 300/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5217 ;;      Params:         0       0       0       0       0
  5218 ;;      Locals:         0       0       0       0       0
  5219 ;;      Temps:          0       0       0       0       0
  5220 ;;      Totals:         0       0       0       0       0
  5221 ;;Total ram usage:        0 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    1
  5224 ;; This function calls:
  5225 ;;		_time_write_1
  5226 ;; This function is called by:
  5227 ;;		_main
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _ds1302_init
  5233  1639                     _ds1302_init:	
  5234                           
  5235                           ;clock_src.c: 8:    RB0=0;
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5239  1639  1006               	bcf	6,0	;volatile
  5240                           
  5241                           ;clock_src.c: 9:    RB5 =0;
  5242  163A  1286               	bcf	6,5	;volatile
  5243                           
  5244                           ;clock_src.c: 10:    RB5=1;
  5245  163B  1686               	bsf	6,5	;volatile
  5246                           
  5247                           ;clock_src.c: 11:    time_write_1(0x8e);
  5248  163C  308E               	movlw	142
  5249  163D  160A  118A  27B2  160A  118A  	fcall	_time_write_1
  5250                           
  5251                           ;clock_src.c: 12:    time_write_1(0);
  5252  1642  3000               	movlw	0
  5253  1643  160A  118A  27B2   	fcall	_time_write_1
  5254                           
  5255                           ;clock_src.c: 13:    RB5=0;
  5256  1646  1286               	bcf	6,5	;volatile
  5257  1647  0008               	return
  5258  1648                     __end_of_ds1302_init:	
  5259                           
  5260                           	psect	text25
  5261  1706                     __ptext25:	
  5262 ;; *************** function _display_temp *****************
  5263 ;; Defined at:
  5264 ;;		line 12 in file "Thermometer_src.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 300/0
  5275 ;;		On exit  : 300/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5278 ;;      Params:         0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0
  5281 ;;      Totals:         0       0       0       0       0
  5282 ;;Total ram usage:        0 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    2
  5285 ;; This function calls:
  5286 ;;		_write_char
  5287 ;; This function is called by:
  5288 ;;		_main
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           
  5293                           ;psect for function _display_temp
  5294  1706                     _display_temp:	
  5295                           
  5296                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5297                           
  5298                           ;incstack = 0
  5299                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5300  1706  085D               	movf	_shi,w
  5301  1707  3E30               	addlw	48
  5302  1708  160A  118A  26BB  160A  118A  	fcall	_write_char
  5303                           
  5304                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5305  170D  085C               	movf	_ge,w
  5306  170E  3E30               	addlw	48
  5307  170F  160A  118A  26BB  160A  118A  	fcall	_write_char
  5308                           
  5309                           ;Thermometer_src.c: 17:  write_char('.');
  5310  1714  302E               	movlw	46
  5311  1715  160A  118A  26BB  160A  118A  	fcall	_write_char
  5312                           
  5313                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5314  171A  085B               	movf	_shifen,w
  5315  171B  3E30               	addlw	48
  5316  171C  160A  118A  26BB  160A  118A  	fcall	_write_char
  5317                           
  5318                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5319  1721  085A               	movf	_baifen,w
  5320  1722  3E30               	addlw	48
  5321  1723  160A  118A  26BB   	fcall	_write_char
  5322  1726  0008               	return
  5323  1727                     __end_of_display_temp:	
  5324                           
  5325                           	psect	text26
  5326  0042                     __ptext26:	
  5327 ;; *************** function _display_day *****************
  5328 ;; Defined at:
  5329 ;;		line 4 in file "Day_of_week_src.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  num             2    3[COMMON] int 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 300/0
  5340 ;;		On exit  : 300/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5343 ;;      Params:         2       0       0       0       0
  5344 ;;      Locals:         0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0
  5346 ;;      Totals:         2       0       0       0       0
  5347 ;;Total ram usage:        2 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    2
  5350 ;; This function calls:
  5351 ;;		_write_char
  5352 ;; This function is called by:
  5353 ;;		_main
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function _display_day
  5359  0042                     _display_day:	
  5360                           
  5361                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5365  0042  0373               	decf	display_day@num,w
  5366  0043  0474               	iorwf	display_day@num+1,w
  5367  0044  1903               	btfsc	3,2
  5368  0045  284A               	goto	l4102
  5369  0046  0873               	movf	display_day@num,w
  5370  0047  0474               	iorwf	display_day@num+1,w
  5371  0048  1D03               	btfss	3,2
  5372  0049  285C               	goto	l4104
  5373  004A                     l4102:	
  5374                           
  5375                           ;Day_of_week_src.c: 6:     write_char('M');
  5376  004A  304D               	movlw	77
  5377  004B  160A  118A  26BB  120A  118A  	fcall	_write_char
  5378                           
  5379                           ;Day_of_week_src.c: 7:     write_char('o');
  5380  0050  306F               	movlw	111
  5381  0051  160A  118A  26BB  120A  118A  	fcall	_write_char
  5382                           
  5383                           ;Day_of_week_src.c: 8:     write_char('n');
  5384  0056  306E               	movlw	110
  5385  0057  160A  118A  26BB  120A  118A  	fcall	_write_char
  5386  005C                     l4104:	
  5387                           
  5388                           ;Day_of_week_src.c: 10:     if(num == 2){
  5389  005C  3002               	movlw	2
  5390  005D  0673               	xorwf	display_day@num,w
  5391  005E  0474               	iorwf	display_day@num+1,w
  5392  005F  1D03               	btfss	3,2
  5393  0060  2873               	goto	l4108
  5394                           
  5395                           ;Day_of_week_src.c: 11:     write_char('T');
  5396  0061  3054               	movlw	84
  5397  0062  160A  118A  26BB  120A  118A  	fcall	_write_char
  5398                           
  5399                           ;Day_of_week_src.c: 12:     write_char('u');
  5400  0067  3075               	movlw	117
  5401  0068  160A  118A  26BB  120A  118A  	fcall	_write_char
  5402                           
  5403                           ;Day_of_week_src.c: 13:     write_char('e');
  5404  006D  3065               	movlw	101
  5405  006E  160A  118A  26BB  120A  118A  	fcall	_write_char
  5406  0073                     l4108:	
  5407                           
  5408                           ;Day_of_week_src.c: 15:     if(num == 3){
  5409  0073  3003               	movlw	3
  5410  0074  0673               	xorwf	display_day@num,w
  5411  0075  0474               	iorwf	display_day@num+1,w
  5412  0076  1D03               	btfss	3,2
  5413  0077  288A               	goto	l4112
  5414                           
  5415                           ;Day_of_week_src.c: 16:     write_char('W');
  5416  0078  3057               	movlw	87
  5417  0079  160A  118A  26BB  120A  118A  	fcall	_write_char
  5418                           
  5419                           ;Day_of_week_src.c: 17:     write_char('e');
  5420  007E  3065               	movlw	101
  5421  007F  160A  118A  26BB  120A  118A  	fcall	_write_char
  5422                           
  5423                           ;Day_of_week_src.c: 18:     write_char('d');
  5424  0084  3064               	movlw	100
  5425  0085  160A  118A  26BB  120A  118A  	fcall	_write_char
  5426  008A                     l4112:	
  5427                           
  5428                           ;Day_of_week_src.c: 20:     if(num == 4){
  5429  008A  3004               	movlw	4
  5430  008B  0673               	xorwf	display_day@num,w
  5431  008C  0474               	iorwf	display_day@num+1,w
  5432  008D  1D03               	btfss	3,2
  5433  008E  28A1               	goto	l4116
  5434                           
  5435                           ;Day_of_week_src.c: 21:     write_char('T');
  5436  008F  3054               	movlw	84
  5437  0090  160A  118A  26BB  120A  118A  	fcall	_write_char
  5438                           
  5439                           ;Day_of_week_src.c: 22:     write_char('h');
  5440  0095  3068               	movlw	104
  5441  0096  160A  118A  26BB  120A  118A  	fcall	_write_char
  5442                           
  5443                           ;Day_of_week_src.c: 23:     write_char('u');
  5444  009B  3075               	movlw	117
  5445  009C  160A  118A  26BB  120A  118A  	fcall	_write_char
  5446  00A1                     l4116:	
  5447                           
  5448                           ;Day_of_week_src.c: 25:     if(num == 5){
  5449  00A1  3005               	movlw	5
  5450  00A2  0673               	xorwf	display_day@num,w
  5451  00A3  0474               	iorwf	display_day@num+1,w
  5452  00A4  1D03               	btfss	3,2
  5453  00A5  28B8               	goto	l4120
  5454                           
  5455                           ;Day_of_week_src.c: 26:     write_char('F');
  5456  00A6  3046               	movlw	70
  5457  00A7  160A  118A  26BB  120A  118A  	fcall	_write_char
  5458                           
  5459                           ;Day_of_week_src.c: 27:     write_char('r');
  5460  00AC  3072               	movlw	114
  5461  00AD  160A  118A  26BB  120A  118A  	fcall	_write_char
  5462                           
  5463                           ;Day_of_week_src.c: 28:     write_char('i');
  5464  00B2  3069               	movlw	105
  5465  00B3  160A  118A  26BB  120A  118A  	fcall	_write_char
  5466  00B8                     l4120:	
  5467                           
  5468                           ;Day_of_week_src.c: 30:     if(num == 6){
  5469  00B8  3006               	movlw	6
  5470  00B9  0673               	xorwf	display_day@num,w
  5471  00BA  0474               	iorwf	display_day@num+1,w
  5472  00BB  1D03               	btfss	3,2
  5473  00BC  28CF               	goto	l4124
  5474                           
  5475                           ;Day_of_week_src.c: 31:     write_char('S');
  5476  00BD  3053               	movlw	83
  5477  00BE  160A  118A  26BB  120A  118A  	fcall	_write_char
  5478                           
  5479                           ;Day_of_week_src.c: 32:     write_char('a');
  5480  00C3  3061               	movlw	97
  5481  00C4  160A  118A  26BB  120A  118A  	fcall	_write_char
  5482                           
  5483                           ;Day_of_week_src.c: 33:     write_char('t');
  5484  00C9  3074               	movlw	116
  5485  00CA  160A  118A  26BB  120A  118A  	fcall	_write_char
  5486  00CF                     l4124:	
  5487                           
  5488                           ;Day_of_week_src.c: 35:     if(num == 7){
  5489  00CF  3007               	movlw	7
  5490  00D0  0673               	xorwf	display_day@num,w
  5491  00D1  0474               	iorwf	display_day@num+1,w
  5492  00D2  1D03               	btfss	3,2
  5493  00D3  0008               	return
  5494                           
  5495                           ;Day_of_week_src.c: 36:     write_char('S');
  5496  00D4  3053               	movlw	83
  5497  00D5  160A  118A  26BB  120A  118A  	fcall	_write_char
  5498                           
  5499                           ;Day_of_week_src.c: 37:     write_char('u');
  5500  00DA  3075               	movlw	117
  5501  00DB  160A  118A  26BB  120A  118A  	fcall	_write_char
  5502                           
  5503                           ;Day_of_week_src.c: 38:     write_char('n');
  5504  00E0  306E               	movlw	110
  5505  00E1  160A  118A  26BB   	fcall	_write_char
  5506  00E4  0008               	return
  5507  00E5                     __end_of_display_day:	
  5508                           
  5509                           	psect	text27
  5510  0AEA                     __ptext27:	
  5511 ;; *************** function _display_date *****************
  5512 ;; Defined at:
  5513 ;;		line 79 in file "clock_src.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  i               2    5[COMMON] int 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 300/0
  5524 ;;		On exit  : 300/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5527 ;;      Params:         0       0       0       0       0
  5528 ;;      Locals:         2       0       0       0       0
  5529 ;;      Temps:          2       0       0       0       0
  5530 ;;      Totals:         4       0       0       0       0
  5531 ;;Total ram usage:        4 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    2
  5534 ;; This function calls:
  5535 ;;		_write_char
  5536 ;; This function is called by:
  5537 ;;		_main
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function _display_date
  5543  0AEA                     _display_date:	
  5544                           
  5545                           ;clock_src.c: 81:      int i;;clock_src.c: 82:      if(RB1==0)
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5549  0AEA  1886               	btfsc	6,1	;volatile
  5550  0AEB  2AF4               	goto	l3378
  5551                           
  5552                           ;clock_src.c: 83:        {;clock_src.c: 84:           table1[0]=table1[3];
  5553  0AEC  0823               	movf	_table1+3,w
  5554  0AED  00F3               	movwf	??_display_date
  5555  0AEE  0873               	movf	??_display_date,w
  5556  0AEF  00A0               	movwf	_table1
  5557                           
  5558                           ;clock_src.c: 85:           table1[1]=table1[4];
  5559  0AF0  0824               	movf	_table1+4,w
  5560  0AF1  00F3               	movwf	??_display_date
  5561  0AF2  0873               	movf	??_display_date,w
  5562  0AF3  00A1               	movwf	_table1+1
  5563  0AF4                     l3378:	
  5564                           
  5565                           ;clock_src.c: 87:      i=table1[3]&0xf0;
  5566  0AF4  0823               	movf	_table1+3,w
  5567  0AF5  39F0               	andlw	240
  5568  0AF6  00F3               	movwf	??_display_date
  5569  0AF7  01F4               	clrf	??_display_date+1
  5570  0AF8  0873               	movf	??_display_date,w
  5571  0AF9  00F5               	movwf	display_date@i
  5572  0AFA  0874               	movf	??_display_date+1,w
  5573  0AFB  00F6               	movwf	display_date@i+1
  5574                           
  5575                           ;clock_src.c: 88:      i=i>>4;
  5576  0AFC  0E75               	swapf	display_date@i,w
  5577  0AFD  390F               	andlw	15
  5578  0AFE  00F5               	movwf	display_date@i
  5579  0AFF  0E76               	swapf	display_date@i+1,w
  5580  0B00  39F0               	andlw	240
  5581  0B01  04F5               	iorwf	display_date@i,f
  5582  0B02  0E76               	swapf	display_date@i+1,w
  5583  0B03  390F               	andlw	15
  5584  0B04  00F6               	movwf	display_date@i+1
  5585  0B05  30F0               	movlw	240
  5586  0B06  1DF6               	btfss	display_date@i+1,3
  5587  0B07  3000               	movlw	0
  5588  0B08  04F6               	iorwf	display_date@i+1,f
  5589                           
  5590                           ;clock_src.c: 89:      write_char(i + '0');
  5591  0B09  0875               	movf	display_date@i,w
  5592  0B0A  3E30               	addlw	48
  5593  0B0B  160A  118A  26BB  120A  158A  	fcall	_write_char
  5594                           
  5595                           ;clock_src.c: 91:      i=table1[3]&0x0f;
  5596  0B10  0823               	movf	_table1+3,w
  5597  0B11  390F               	andlw	15
  5598  0B12  00F3               	movwf	??_display_date
  5599  0B13  01F4               	clrf	??_display_date+1
  5600  0B14  0873               	movf	??_display_date,w
  5601  0B15  00F5               	movwf	display_date@i
  5602  0B16  0874               	movf	??_display_date+1,w
  5603  0B17  00F6               	movwf	display_date@i+1
  5604                           
  5605                           ;clock_src.c: 92:      write_char(i + '0');
  5606  0B18  0875               	movf	display_date@i,w
  5607  0B19  3E30               	addlw	48
  5608  0B1A  160A  118A  26BB  120A  158A  	fcall	_write_char
  5609                           
  5610                           ;clock_src.c: 93:      write_char('/');
  5611  0B1F  302F               	movlw	47
  5612  0B20  160A  118A  26BB  120A  158A  	fcall	_write_char
  5613                           
  5614                           ;clock_src.c: 97:      i=table1[4]&0xf0;
  5615  0B25  0824               	movf	_table1+4,w
  5616  0B26  39F0               	andlw	240
  5617  0B27  00F3               	movwf	??_display_date
  5618  0B28  01F4               	clrf	??_display_date+1
  5619  0B29  0873               	movf	??_display_date,w
  5620  0B2A  00F5               	movwf	display_date@i
  5621  0B2B  0874               	movf	??_display_date+1,w
  5622  0B2C  00F6               	movwf	display_date@i+1
  5623                           
  5624                           ;clock_src.c: 98:      i=i>>4;
  5625  0B2D  0E75               	swapf	display_date@i,w
  5626  0B2E  390F               	andlw	15
  5627  0B2F  00F5               	movwf	display_date@i
  5628  0B30  0E76               	swapf	display_date@i+1,w
  5629  0B31  39F0               	andlw	240
  5630  0B32  04F5               	iorwf	display_date@i,f
  5631  0B33  0E76               	swapf	display_date@i+1,w
  5632  0B34  390F               	andlw	15
  5633  0B35  00F6               	movwf	display_date@i+1
  5634  0B36  30F0               	movlw	240
  5635  0B37  1DF6               	btfss	display_date@i+1,3
  5636  0B38  3000               	movlw	0
  5637  0B39  04F6               	iorwf	display_date@i+1,f
  5638                           
  5639                           ;clock_src.c: 99:      write_char(i + '0');
  5640  0B3A  0875               	movf	display_date@i,w
  5641  0B3B  3E30               	addlw	48
  5642  0B3C  160A  118A  26BB  120A  158A  	fcall	_write_char
  5643                           
  5644                           ;clock_src.c: 101:      i=table1[4]&0x0f;
  5645  0B41  0824               	movf	_table1+4,w
  5646  0B42  390F               	andlw	15
  5647  0B43  00F3               	movwf	??_display_date
  5648  0B44  01F4               	clrf	??_display_date+1
  5649  0B45  0873               	movf	??_display_date,w
  5650  0B46  00F5               	movwf	display_date@i
  5651  0B47  0874               	movf	??_display_date+1,w
  5652  0B48  00F6               	movwf	display_date@i+1
  5653                           
  5654                           ;clock_src.c: 102:      write_char(i + '0');
  5655  0B49  0875               	movf	display_date@i,w
  5656  0B4A  3E30               	addlw	48
  5657  0B4B  160A  118A  26BB  120A  158A  	fcall	_write_char
  5658                           
  5659                           ;clock_src.c: 103:      write_char('/');
  5660  0B50  302F               	movlw	47
  5661  0B51  160A  118A  26BB  120A  158A  	fcall	_write_char
  5662                           
  5663                           ;clock_src.c: 107:      i=table1[6]&0xf0;
  5664  0B56  0826               	movf	_table1+6,w
  5665  0B57  39F0               	andlw	240
  5666  0B58  00F3               	movwf	??_display_date
  5667  0B59  01F4               	clrf	??_display_date+1
  5668  0B5A  0873               	movf	??_display_date,w
  5669  0B5B  00F5               	movwf	display_date@i
  5670  0B5C  0874               	movf	??_display_date+1,w
  5671  0B5D  00F6               	movwf	display_date@i+1
  5672                           
  5673                           ;clock_src.c: 108:      i=i>>4;
  5674  0B5E  0E75               	swapf	display_date@i,w
  5675  0B5F  390F               	andlw	15
  5676  0B60  00F5               	movwf	display_date@i
  5677  0B61  0E76               	swapf	display_date@i+1,w
  5678  0B62  39F0               	andlw	240
  5679  0B63  04F5               	iorwf	display_date@i,f
  5680  0B64  0E76               	swapf	display_date@i+1,w
  5681  0B65  390F               	andlw	15
  5682  0B66  00F6               	movwf	display_date@i+1
  5683  0B67  30F0               	movlw	240
  5684  0B68  1DF6               	btfss	display_date@i+1,3
  5685  0B69  3000               	movlw	0
  5686  0B6A  04F6               	iorwf	display_date@i+1,f
  5687                           
  5688                           ;clock_src.c: 109:      write_char(i + '0');
  5689  0B6B  0875               	movf	display_date@i,w
  5690  0B6C  3E30               	addlw	48
  5691  0B6D  160A  118A  26BB  120A  158A  	fcall	_write_char
  5692                           
  5693                           ;clock_src.c: 111:      i=table1[6]&0x0f;
  5694  0B72  0826               	movf	_table1+6,w
  5695  0B73  390F               	andlw	15
  5696  0B74  00F3               	movwf	??_display_date
  5697  0B75  01F4               	clrf	??_display_date+1
  5698  0B76  0873               	movf	??_display_date,w
  5699  0B77  00F5               	movwf	display_date@i
  5700  0B78  0874               	movf	??_display_date+1,w
  5701  0B79  00F6               	movwf	display_date@i+1
  5702                           
  5703                           ;clock_src.c: 112:      write_char(i + '0');
  5704  0B7A  0875               	movf	display_date@i,w
  5705  0B7B  3E30               	addlw	48
  5706  0B7C  160A  118A  26BB   	fcall	_write_char
  5707  0B7F  0008               	return
  5708  0B80                     __end_of_display_date:	
  5709                           
  5710                           	psect	text28
  5711  0A54                     __ptext28:	
  5712 ;; *************** function _display_clock *****************
  5713 ;; Defined at:
  5714 ;;		line 37 in file "clock_src.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;		None
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  i               2    5[COMMON] int 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 300/0
  5725 ;;		On exit  : 300/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5728 ;;      Params:         0       0       0       0       0
  5729 ;;      Locals:         2       0       0       0       0
  5730 ;;      Temps:          2       0       0       0       0
  5731 ;;      Totals:         4       0       0       0       0
  5732 ;;Total ram usage:        4 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    2
  5735 ;; This function calls:
  5736 ;;		_write_char
  5737 ;; This function is called by:
  5738 ;;		_main
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function _display_clock
  5744  0A54                     _display_clock:	
  5745                           
  5746                           ;clock_src.c: 39:      int i;;clock_src.c: 40:      if(RB1==0)
  5747                           
  5748                           ;incstack = 0
  5749                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5750  0A54  1886               	btfsc	6,1	;volatile
  5751  0A55  2A5E               	goto	l3416
  5752                           
  5753                           ;clock_src.c: 41:        {;clock_src.c: 42:           table1[0]=table1[3];
  5754  0A56  0823               	movf	_table1+3,w
  5755  0A57  00F3               	movwf	??_display_clock
  5756  0A58  0873               	movf	??_display_clock,w
  5757  0A59  00A0               	movwf	_table1
  5758                           
  5759                           ;clock_src.c: 43:           table1[1]=table1[4];
  5760  0A5A  0824               	movf	_table1+4,w
  5761  0A5B  00F3               	movwf	??_display_clock
  5762  0A5C  0873               	movf	??_display_clock,w
  5763  0A5D  00A1               	movwf	_table1+1
  5764  0A5E                     l3416:	
  5765                           
  5766                           ;clock_src.c: 46:      i=table1[2]&0xf0;
  5767  0A5E  0822               	movf	_table1+2,w
  5768  0A5F  39F0               	andlw	240
  5769  0A60  00F3               	movwf	??_display_clock
  5770  0A61  01F4               	clrf	??_display_clock+1
  5771  0A62  0873               	movf	??_display_clock,w
  5772  0A63  00F5               	movwf	display_clock@i
  5773  0A64  0874               	movf	??_display_clock+1,w
  5774  0A65  00F6               	movwf	display_clock@i+1
  5775                           
  5776                           ;clock_src.c: 47:      i=i>>4;
  5777  0A66  0E75               	swapf	display_clock@i,w
  5778  0A67  390F               	andlw	15
  5779  0A68  00F5               	movwf	display_clock@i
  5780  0A69  0E76               	swapf	display_clock@i+1,w
  5781  0A6A  39F0               	andlw	240
  5782  0A6B  04F5               	iorwf	display_clock@i,f
  5783  0A6C  0E76               	swapf	display_clock@i+1,w
  5784  0A6D  390F               	andlw	15
  5785  0A6E  00F6               	movwf	display_clock@i+1
  5786  0A6F  30F0               	movlw	240
  5787  0A70  1DF6               	btfss	display_clock@i+1,3
  5788  0A71  3000               	movlw	0
  5789  0A72  04F6               	iorwf	display_clock@i+1,f
  5790                           
  5791                           ;clock_src.c: 48:      write_char(i + '0');
  5792  0A73  0875               	movf	display_clock@i,w
  5793  0A74  3E30               	addlw	48
  5794  0A75  160A  118A  26BB  120A  158A  	fcall	_write_char
  5795                           
  5796                           ;clock_src.c: 52:      i=table1[2]&0x0f;
  5797  0A7A  0822               	movf	_table1+2,w
  5798  0A7B  390F               	andlw	15
  5799  0A7C  00F3               	movwf	??_display_clock
  5800  0A7D  01F4               	clrf	??_display_clock+1
  5801  0A7E  0873               	movf	??_display_clock,w
  5802  0A7F  00F5               	movwf	display_clock@i
  5803  0A80  0874               	movf	??_display_clock+1,w
  5804  0A81  00F6               	movwf	display_clock@i+1
  5805                           
  5806                           ;clock_src.c: 53:      write_char(i + '0');
  5807  0A82  0875               	movf	display_clock@i,w
  5808  0A83  3E30               	addlw	48
  5809  0A84  160A  118A  26BB  120A  158A  	fcall	_write_char
  5810                           
  5811                           ;clock_src.c: 54:      write_char(':');
  5812  0A89  303A               	movlw	58
  5813  0A8A  160A  118A  26BB  120A  158A  	fcall	_write_char
  5814                           
  5815                           ;clock_src.c: 58:      i=table1[1]&0xf0;
  5816  0A8F  0821               	movf	_table1+1,w
  5817  0A90  39F0               	andlw	240
  5818  0A91  00F3               	movwf	??_display_clock
  5819  0A92  01F4               	clrf	??_display_clock+1
  5820  0A93  0873               	movf	??_display_clock,w
  5821  0A94  00F5               	movwf	display_clock@i
  5822  0A95  0874               	movf	??_display_clock+1,w
  5823  0A96  00F6               	movwf	display_clock@i+1
  5824                           
  5825                           ;clock_src.c: 59:      i=i>>4;
  5826  0A97  0E75               	swapf	display_clock@i,w
  5827  0A98  390F               	andlw	15
  5828  0A99  00F5               	movwf	display_clock@i
  5829  0A9A  0E76               	swapf	display_clock@i+1,w
  5830  0A9B  39F0               	andlw	240
  5831  0A9C  04F5               	iorwf	display_clock@i,f
  5832  0A9D  0E76               	swapf	display_clock@i+1,w
  5833  0A9E  390F               	andlw	15
  5834  0A9F  00F6               	movwf	display_clock@i+1
  5835  0AA0  30F0               	movlw	240
  5836  0AA1  1DF6               	btfss	display_clock@i+1,3
  5837  0AA2  3000               	movlw	0
  5838  0AA3  04F6               	iorwf	display_clock@i+1,f
  5839                           
  5840                           ;clock_src.c: 60:      write_char(i + '0');
  5841  0AA4  0875               	movf	display_clock@i,w
  5842  0AA5  3E30               	addlw	48
  5843  0AA6  160A  118A  26BB  120A  158A  	fcall	_write_char
  5844                           
  5845                           ;clock_src.c: 63:      i=table1[1]&0x0f;
  5846  0AAB  0821               	movf	_table1+1,w
  5847  0AAC  390F               	andlw	15
  5848  0AAD  00F3               	movwf	??_display_clock
  5849  0AAE  01F4               	clrf	??_display_clock+1
  5850  0AAF  0873               	movf	??_display_clock,w
  5851  0AB0  00F5               	movwf	display_clock@i
  5852  0AB1  0874               	movf	??_display_clock+1,w
  5853  0AB2  00F6               	movwf	display_clock@i+1
  5854                           
  5855                           ;clock_src.c: 64:      write_char(i + '0');
  5856  0AB3  0875               	movf	display_clock@i,w
  5857  0AB4  3E30               	addlw	48
  5858  0AB5  160A  118A  26BB  120A  158A  	fcall	_write_char
  5859                           
  5860                           ;clock_src.c: 65:      write_char(':');
  5861  0ABA  303A               	movlw	58
  5862  0ABB  160A  118A  26BB  120A  158A  	fcall	_write_char
  5863                           
  5864                           ;clock_src.c: 68:      i=table1[0]&0xf0;
  5865  0AC0  0820               	movf	_table1,w
  5866  0AC1  39F0               	andlw	240
  5867  0AC2  00F3               	movwf	??_display_clock
  5868  0AC3  01F4               	clrf	??_display_clock+1
  5869  0AC4  0873               	movf	??_display_clock,w
  5870  0AC5  00F5               	movwf	display_clock@i
  5871  0AC6  0874               	movf	??_display_clock+1,w
  5872  0AC7  00F6               	movwf	display_clock@i+1
  5873                           
  5874                           ;clock_src.c: 69:      i=i>>4;
  5875  0AC8  0E75               	swapf	display_clock@i,w
  5876  0AC9  390F               	andlw	15
  5877  0ACA  00F5               	movwf	display_clock@i
  5878  0ACB  0E76               	swapf	display_clock@i+1,w
  5879  0ACC  39F0               	andlw	240
  5880  0ACD  04F5               	iorwf	display_clock@i,f
  5881  0ACE  0E76               	swapf	display_clock@i+1,w
  5882  0ACF  390F               	andlw	15
  5883  0AD0  00F6               	movwf	display_clock@i+1
  5884  0AD1  30F0               	movlw	240
  5885  0AD2  1DF6               	btfss	display_clock@i+1,3
  5886  0AD3  3000               	movlw	0
  5887  0AD4  04F6               	iorwf	display_clock@i+1,f
  5888                           
  5889                           ;clock_src.c: 70:      write_char(i + '0');
  5890  0AD5  0875               	movf	display_clock@i,w
  5891  0AD6  3E30               	addlw	48
  5892  0AD7  160A  118A  26BB  120A  158A  	fcall	_write_char
  5893                           
  5894                           ;clock_src.c: 73:      i=table1[0]&0x0f;
  5895  0ADC  0820               	movf	_table1,w
  5896  0ADD  390F               	andlw	15
  5897  0ADE  00F3               	movwf	??_display_clock
  5898  0ADF  01F4               	clrf	??_display_clock+1
  5899  0AE0  0873               	movf	??_display_clock,w
  5900  0AE1  00F5               	movwf	display_clock@i
  5901  0AE2  0874               	movf	??_display_clock+1,w
  5902  0AE3  00F6               	movwf	display_clock@i+1
  5903                           
  5904                           ;clock_src.c: 74:      write_char(i + '0');
  5905  0AE4  0875               	movf	display_clock@i,w
  5906  0AE5  3E30               	addlw	48
  5907  0AE6  160A  118A  26BB   	fcall	_write_char
  5908  0AE9  0008               	return
  5909  0AEA                     __end_of_display_clock:	
  5910                           
  5911                           	psect	text29
  5912  03CF                     __ptext29:	
  5913 ;; *************** function _date_settings *****************
  5914 ;; Defined at:
  5915 ;;		line 352 in file "Button_src.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 300/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5929 ;;      Params:         0       0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0
  5931 ;;      Temps:          0       3       0       0       0
  5932 ;;      Totals:         0       3       0       0       0
  5933 ;;Total ram usage:        3 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    3
  5936 ;; This function calls:
  5937 ;;		_button_delay
  5938 ;;		_incrementor
  5939 ;;		_modulus_func
  5940 ;;		_set_time
  5941 ;;		_time_date_delimiter
  5942 ;;		_time_date_hex_terminator
  5943 ;;		_write_char
  5944 ;;		_write_cmd
  5945 ;; This function is called by:
  5946 ;;		_main
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _date_settings
  5952  03CF                     _date_settings:	
  5953                           
  5954                           ;Button_src.c: 353:  RC0 = 0;
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5958  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  5959  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  5960  03D1  1007               	bcf	7,0	;volatile
  5961                           
  5962                           ;Button_src.c: 354:  RC1 = 1;
  5963  03D2  1487               	bsf	7,1	;volatile
  5964                           
  5965                           ;Button_src.c: 355:  RC2 = 1;
  5966  03D3  1507               	bsf	7,2	;volatile
  5967                           
  5968                           ;Button_src.c: 356:  RC3 = 1;
  5969  03D4  1587               	bsf	7,3	;volatile
  5970                           
  5971                           ;Button_src.c: 357:   if (RC4 == 0){
  5972  03D5  1A07               	btfsc	7,4	;volatile
  5973  03D6  0008               	return
  5974                           
  5975                           ;Button_src.c: 358:       write_cmd(0x1);
  5976  03D7  3001               	movlw	1
  5977  03D8  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  5978  03DD                     l630:	
  5979                           ;Button_src.c: 359:       for(;;){
  5980                           
  5981                           
  5982                           ;Button_src.c: 360:             write_cmd(0x80);
  5983  03DD  3080               	movlw	128
  5984  03DE  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  5985                           
  5986                           ;Button_src.c: 361:             write_char('D');
  5987  03E3  3044               	movlw	68
  5988  03E4  160A  118A  26BB  120A  118A  	fcall	_write_char
  5989                           
  5990                           ;Button_src.c: 362:             write_char('a');
  5991  03E9  3061               	movlw	97
  5992  03EA  160A  118A  26BB  120A  118A  	fcall	_write_char
  5993                           
  5994                           ;Button_src.c: 363:             write_char('t');
  5995  03EF  3074               	movlw	116
  5996  03F0  160A  118A  26BB  120A  118A  	fcall	_write_char
  5997                           
  5998                           ;Button_src.c: 364:             write_char('e');
  5999  03F5  3065               	movlw	101
  6000  03F6  160A  118A  26BB  120A  118A  	fcall	_write_char
  6001                           
  6002                           ;Button_src.c: 365:             write_char('_');
  6003  03FB  305F               	movlw	95
  6004  03FC  160A  118A  26BB  120A  118A  	fcall	_write_char
  6005                           
  6006                           ;Button_src.c: 366:             write_char('S');
  6007  0401  3053               	movlw	83
  6008  0402  160A  118A  26BB  120A  118A  	fcall	_write_char
  6009                           
  6010                           ;Button_src.c: 367:             write_char('e');
  6011  0407  3065               	movlw	101
  6012  0408  160A  118A  26BB  120A  118A  	fcall	_write_char
  6013                           
  6014                           ;Button_src.c: 368:             write_char('t');
  6015  040D  3074               	movlw	116
  6016  040E  160A  118A  26BB  120A  118A  	fcall	_write_char
  6017                           
  6018                           ;Button_src.c: 369:             write_char('t');
  6019  0413  3074               	movlw	116
  6020  0414  160A  118A  26BB  120A  118A  	fcall	_write_char
  6021                           
  6022                           ;Button_src.c: 370:             write_char('i');
  6023  0419  3069               	movlw	105
  6024  041A  160A  118A  26BB  120A  118A  	fcall	_write_char
  6025                           
  6026                           ;Button_src.c: 371:             write_char('n');
  6027  041F  306E               	movlw	110
  6028  0420  160A  118A  26BB  120A  118A  	fcall	_write_char
  6029                           
  6030                           ;Button_src.c: 372:             write_char('g');
  6031  0425  3067               	movlw	103
  6032  0426  160A  118A  26BB  120A  118A  	fcall	_write_char
  6033                           
  6034                           ;Button_src.c: 373:             write_char('s');
  6035  042B  3073               	movlw	115
  6036  042C  160A  118A  26BB  120A  118A  	fcall	_write_char
  6037                           
  6038                           ;Button_src.c: 374:             RC0 = 1;
  6039  0431  1407               	bsf	7,0	;volatile
  6040                           
  6041                           ;Button_src.c: 375:             RC1 = 0;
  6042  0432  1087               	bcf	7,1	;volatile
  6043                           
  6044                           ;Button_src.c: 376:             RC2 = 1;
  6045  0433  1507               	bsf	7,2	;volatile
  6046                           
  6047                           ;Button_src.c: 377:             RC3 = 1;
  6048  0434  1587               	bsf	7,3	;volatile
  6049                           
  6050                           ;Button_src.c: 378:             if(RC7 == 0 && b =='x'){
  6051  0435  1B87               	btfsc	7,7	;volatile
  6052  0436  2CA7               	goto	l3630
  6053  0437  3078               	movlw	120
  6054  0438  0656               	xorwf	_b,w
  6055  0439  1D03               	btfss	3,2
  6056  043A  2CA7               	goto	l3630
  6057                           
  6058                           ;Button_src.c: 379:                 if(stats == 1)
  6059  043B  0333               	decf	_stats,w
  6060  043C  0434               	iorwf	_stats+1,w
  6061  043D  1D03               	btfss	3,2
  6062  043E  2C43               	goto	l632
  6063                           
  6064                           ;Button_src.c: 380:                     a++;
  6065  043F  3001               	movlw	1
  6066  0440  00E7               	movwf	??_date_settings
  6067  0441  0867               	movf	??_date_settings,w
  6068  0442  07D7               	addwf	_a,f
  6069  0443                     l632:	
  6070                           
  6071                           ;Button_src.c: 381:                 if(stats == 0){
  6072  0443  0833               	movf	_stats,w
  6073  0444  0434               	iorwf	_stats+1,w
  6074  0445  1D03               	btfss	3,2
  6075  0446  2C4B               	goto	l633
  6076                           
  6077                           ;Button_src.c: 382:                     stats = 1;
  6078  0447  3001               	movlw	1
  6079  0448  00B3               	movwf	_stats
  6080  0449  3000               	movlw	0
  6081  044A  00B4               	movwf	_stats+1
  6082  044B                     l633:	
  6083                           ;Button_src.c: 383:                 }
  6084                           
  6085                           
  6086                           ;Button_src.c: 385:                     x++ ;
  6087  044B  3001               	movlw	1
  6088  044C  07BF               	addwf	_x,f
  6089  044D  1803               	skipnc
  6090  044E  0AC0               	incf	_x+1,f
  6091  044F  3000               	movlw	0
  6092  0450  07C0               	addwf	_x+1,f
  6093                           
  6094                           ;Button_src.c: 386:                     x = modulus_func(x,10);
  6095  0451  0840               	movf	_x+1,w
  6096  0452  00F8               	movwf	modulus_func@x+1
  6097  0453  083F               	movf	_x,w
  6098  0454  00F7               	movwf	modulus_func@x
  6099  0455  300A               	movlw	10
  6100  0456  00F9               	movwf	modulus_func@y
  6101  0457  3000               	movlw	0
  6102  0458  00FA               	movwf	modulus_func@y+1
  6103  0459  160A  118A  2648  120A  118A  	fcall	_modulus_func
  6104  045E  0878               	movf	?_modulus_func+1,w
  6105  045F  00C0               	movwf	_x+1
  6106  0460  0877               	movf	?_modulus_func,w
  6107  0461  00BF               	movwf	_x
  6108                           
  6109                           ;Button_src.c: 387:                      if (p == 1){
  6110  0462  032F               	decf	_p,w
  6111  0463  0430               	iorwf	_p+1,w
  6112  0464  1D03               	btfss	3,2
  6113  0465  2C7F               	goto	l3616
  6114                           
  6115                           ;Button_src.c: 388:                         y = incrementor(y,x,'0');
  6116  0466  083E               	movf	_y+1,w
  6117  0467  00E3               	movwf	incrementor@upper_val+1
  6118  0468  083D               	movf	_y,w
  6119  0469  00E2               	movwf	incrementor@upper_val
  6120  046A  0840               	movf	_x+1,w
  6121  046B  00E5               	movwf	incrementor@lower_val+1
  6122  046C  083F               	movf	_x,w
  6123  046D  00E4               	movwf	incrementor@lower_val
  6124  046E  3030               	movlw	48
  6125  046F  00E7               	movwf	??_date_settings
  6126  0470  0867               	movf	??_date_settings,w
  6127  0471  00E6               	movwf	incrementor@z
  6128  0472  160A  118A  278E  120A  118A  	fcall	_incrementor
  6129  0477  00E8               	movwf	??_date_settings+1
  6130  0478  01E9               	clrf	??_date_settings+2
  6131  0479  0868               	movf	??_date_settings+1,w
  6132  047A  00BD               	movwf	_y
  6133  047B  0869               	movf	??_date_settings+2,w
  6134  047C  00BE               	movwf	_y+1
  6135                           
  6136                           ;Button_src.c: 389:                         p = 0;
  6137  047D  01AF               	clrf	_p
  6138  047E  01B0               	clrf	_p+1
  6139  047F                     l3616:	
  6140                           
  6141                           ;Button_src.c: 391:                     if (x == 9){
  6142  047F  3009               	movlw	9
  6143  0480  063F               	xorwf	_x,w
  6144  0481  0440               	iorwf	_x+1,w
  6145  0482  1D03               	btfss	3,2
  6146  0483  2C88               	goto	l3620
  6147                           
  6148                           ;Button_src.c: 392:                         p = 1;
  6149  0484  3001               	movlw	1
  6150  0485  00AF               	movwf	_p
  6151  0486  3000               	movlw	0
  6152  0487  00B0               	movwf	_p+1
  6153  0488                     l3620:	
  6154                           
  6155                           ;Button_src.c: 394:                     a = time_date_hex_terminator(a,'C');
  6156  0488  3043               	movlw	67
  6157  0489  00E7               	movwf	??_date_settings
  6158  048A  0867               	movf	??_date_settings,w
  6159  048B  00F0               	movwf	time_date_hex_terminator@limiter
  6160  048C  0857               	movf	_a,w
  6161  048D  160A  118A  262A  120A  118A  	fcall	_time_date_hex_terminator
  6162  0492  00E8               	movwf	??_date_settings+1
  6163  0493  0868               	movf	??_date_settings+1,w
  6164  0494  00D7               	movwf	_a
  6165                           
  6166                           ;Button_src.c: 396:                     if(y == 1 && x == 3){
  6167  0495  033D               	decf	_y,w
  6168  0496  043E               	iorwf	_y+1,w
  6169  0497  1D03               	btfss	3,2
  6170  0498  2CA2               	goto	l3628
  6171  0499  3003               	movlw	3
  6172  049A  063F               	xorwf	_x,w
  6173  049B  0440               	iorwf	_x+1,w
  6174  049C  1D03               	btfss	3,2
  6175  049D  2CA2               	goto	l3628
  6176                           
  6177                           ;Button_src.c: 397:                         x = 0;
  6178  049E  01BF               	clrf	_x
  6179  049F  01C0               	clrf	_x+1
  6180                           
  6181                           ;Button_src.c: 398:                         y = 0;
  6182  04A0  01BD               	clrf	_y
  6183  04A1  01BE               	clrf	_y+1
  6184  04A2                     l3628:	
  6185                           
  6186                           ;Button_src.c: 400:                     button_delay();
  6187  04A2  160A  118A  2669  120A  118A  	fcall	_button_delay
  6188  04A7                     l3630:	
  6189                           
  6190                           ;Button_src.c: 402:             if(RC7==0 && b == 'y'){
  6191  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  6192  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  6193  04A9  1B87               	btfsc	7,7	;volatile
  6194  04AA  2D2D               	goto	l3664
  6195  04AB  3079               	movlw	121
  6196  04AC  0656               	xorwf	_b,w
  6197  04AD  1D03               	btfss	3,2
  6198  04AE  2D2D               	goto	l3664
  6199                           
  6200                           ;Button_src.c: 403:                  if(stats == 1)
  6201  04AF  0333               	decf	_stats,w
  6202  04B0  0434               	iorwf	_stats+1,w
  6203  04B1  1D03               	btfss	3,2
  6204  04B2  2CB7               	goto	l638
  6205                           
  6206                           ;Button_src.c: 404:                     day_hex++;
  6207  04B3  3001               	movlw	1
  6208  04B4  00E7               	movwf	??_date_settings
  6209  04B5  0867               	movf	??_date_settings,w
  6210  04B6  07D4               	addwf	_day_hex,f
  6211  04B7                     l638:	
  6212                           
  6213                           ;Button_src.c: 405:                 if(stats == 0){
  6214  04B7  0833               	movf	_stats,w
  6215  04B8  0434               	iorwf	_stats+1,w
  6216  04B9  1D03               	btfss	3,2
  6217  04BA  2CBF               	goto	l639
  6218                           
  6219                           ;Button_src.c: 406:                     stats = 1;
  6220  04BB  3001               	movlw	1
  6221  04BC  00B3               	movwf	_stats
  6222  04BD  3000               	movlw	0
  6223  04BE  00B4               	movwf	_stats+1
  6224  04BF                     l639:	
  6225                           ;Button_src.c: 407:                 }
  6226                           
  6227                           
  6228                           ;Button_src.c: 409:                     day_low++;
  6229  04BF  3001               	movlw	1
  6230  04C0  07B9               	addwf	_day_low,f
  6231  04C1  1803               	skipnc
  6232  04C2  0ABA               	incf	_day_low+1,f
  6233  04C3  3000               	movlw	0
  6234  04C4  07BA               	addwf	_day_low+1,f
  6235                           
  6236                           ;Button_src.c: 410:                     day_low = modulus_func(day_low,10);
  6237  04C5  083A               	movf	_day_low+1,w
  6238  04C6  00F8               	movwf	modulus_func@x+1
  6239  04C7  0839               	movf	_day_low,w
  6240  04C8  00F7               	movwf	modulus_func@x
  6241  04C9  300A               	movlw	10
  6242  04CA  00F9               	movwf	modulus_func@y
  6243  04CB  3000               	movlw	0
  6244  04CC  00FA               	movwf	modulus_func@y+1
  6245  04CD  160A  118A  2648  120A  118A  	fcall	_modulus_func
  6246  04D2  0878               	movf	?_modulus_func+1,w
  6247  04D3  00BA               	movwf	_day_low+1
  6248  04D4  0877               	movf	?_modulus_func,w
  6249  04D5  00B9               	movwf	_day_low
  6250                           
  6251                           ;Button_src.c: 411:                     day_counter = modulus_func(day_low,8);
  6252  04D6  083A               	movf	_day_low+1,w
  6253  04D7  00F8               	movwf	modulus_func@x+1
  6254  04D8  0839               	movf	_day_low,w
  6255  04D9  00F7               	movwf	modulus_func@x
  6256  04DA  3008               	movlw	8
  6257  04DB  00F9               	movwf	modulus_func@y
  6258  04DC  3000               	movlw	0
  6259  04DD  00FA               	movwf	modulus_func@y+1
  6260  04DE  160A  118A  2648  120A  118A  	fcall	_modulus_func
  6261  04E3  0878               	movf	?_modulus_func+1,w
  6262  04E4  00A8               	movwf	_day_counter+1
  6263  04E5  0877               	movf	?_modulus_func,w
  6264  04E6  00A7               	movwf	_day_counter
  6265                           
  6266                           ;Button_src.c: 412:                     if (p == 1){
  6267  04E7  032F               	decf	_p,w
  6268  04E8  0430               	iorwf	_p+1,w
  6269  04E9  1D03               	btfss	3,2
  6270  04EA  2D04               	goto	l3650
  6271                           
  6272                           ;Button_src.c: 413:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6273  04EB  0838               	movf	_day_high+1,w
  6274  04EC  00E3               	movwf	incrementor@upper_val+1
  6275  04ED  0837               	movf	_day_high,w
  6276  04EE  00E2               	movwf	incrementor@upper_val
  6277  04EF  083A               	movf	_day_low+1,w
  6278  04F0  00E5               	movwf	incrementor@lower_val+1
  6279  04F1  0839               	movf	_day_low,w
  6280  04F2  00E4               	movwf	incrementor@lower_val
  6281  04F3  3030               	movlw	48
  6282  04F4  00E7               	movwf	??_date_settings
  6283  04F5  0867               	movf	??_date_settings,w
  6284  04F6  00E6               	movwf	incrementor@z
  6285  04F7  160A  118A  278E  120A  118A  	fcall	_incrementor
  6286  04FC  00E8               	movwf	??_date_settings+1
  6287  04FD  01E9               	clrf	??_date_settings+2
  6288  04FE  0868               	movf	??_date_settings+1,w
  6289  04FF  00B7               	movwf	_day_high
  6290  0500  0869               	movf	??_date_settings+2,w
  6291  0501  00B8               	movwf	_day_high+1
  6292                           
  6293                           ;Button_src.c: 414:                         p = 0;
  6294  0502  01AF               	clrf	_p
  6295  0503  01B0               	clrf	_p+1
  6296  0504                     l3650:	
  6297                           
  6298                           ;Button_src.c: 416:                     if (day_low == 9){
  6299  0504  3009               	movlw	9
  6300  0505  0639               	xorwf	_day_low,w
  6301  0506  043A               	iorwf	_day_low+1,w
  6302  0507  1D03               	btfss	3,2
  6303  0508  2D0D               	goto	l3654
  6304                           
  6305                           ;Button_src.c: 417:                         p = 1;
  6306  0509  3001               	movlw	1
  6307  050A  00AF               	movwf	_p
  6308  050B  3000               	movlw	0
  6309  050C  00B0               	movwf	_p+1
  6310  050D                     l3654:	
  6311                           
  6312                           ;Button_src.c: 419:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6313  050D  3063               	movlw	99
  6314  050E  00E7               	movwf	??_date_settings
  6315  050F  0867               	movf	??_date_settings,w
  6316  0510  00F0               	movwf	time_date_hex_terminator@limiter
  6317  0511  0854               	movf	_day_hex,w
  6318  0512  160A  118A  262A  120A  118A  	fcall	_time_date_hex_terminator
  6319  0517  00E8               	movwf	??_date_settings+1
  6320  0518  0868               	movf	??_date_settings+1,w
  6321  0519  00D4               	movwf	_day_hex
  6322                           
  6323                           ;Button_src.c: 420:                     if(day_high == 3 && day_low==2 ){
  6324  051A  3003               	movlw	3
  6325  051B  0637               	xorwf	_day_high,w
  6326  051C  0438               	iorwf	_day_high+1,w
  6327  051D  1D03               	btfss	3,2
  6328  051E  2D28               	goto	l3662
  6329  051F  3002               	movlw	2
  6330  0520  0639               	xorwf	_day_low,w
  6331  0521  043A               	iorwf	_day_low+1,w
  6332  0522  1D03               	btfss	3,2
  6333  0523  2D28               	goto	l3662
  6334                           
  6335                           ;Button_src.c: 421:                         day_high = 0;
  6336  0524  01B7               	clrf	_day_high
  6337  0525  01B8               	clrf	_day_high+1
  6338                           
  6339                           ;Button_src.c: 422:                         day_low = 0;
  6340  0526  01B9               	clrf	_day_low
  6341  0527  01BA               	clrf	_day_low+1
  6342  0528                     l3662:	
  6343                           
  6344                           ;Button_src.c: 424:                     button_delay();
  6345  0528  160A  118A  2669  120A  118A  	fcall	_button_delay
  6346  052D                     l3664:	
  6347                           
  6348                           ;Button_src.c: 426:             if(RC7==0 && b == 'z'){
  6349  052D  1283               	bcf	3,5	;RP0=0, select bank0
  6350  052E  1303               	bcf	3,6	;RP1=0, select bank0
  6351  052F  1B87               	btfsc	7,7	;volatile
  6352  0530  2D94               	goto	l3696
  6353  0531  307A               	movlw	122
  6354  0532  0656               	xorwf	_b,w
  6355  0533  1D03               	btfss	3,2
  6356  0534  2D94               	goto	l3696
  6357                           
  6358                           ;Button_src.c: 427:                 if(stats == 1)
  6359  0535  0333               	decf	_stats,w
  6360  0536  0434               	iorwf	_stats+1,w
  6361  0537  1D03               	btfss	3,2
  6362  0538  2D3D               	goto	l644
  6363                           
  6364                           ;Button_src.c: 428:                    c++;
  6365  0539  3001               	movlw	1
  6366  053A  00E7               	movwf	??_date_settings
  6367  053B  0867               	movf	??_date_settings,w
  6368  053C  07D5               	addwf	_c,f
  6369  053D                     l644:	
  6370                           
  6371                           ;Button_src.c: 429:                 if(stats == 0){
  6372  053D  0833               	movf	_stats,w
  6373  053E  0434               	iorwf	_stats+1,w
  6374  053F  1D03               	btfss	3,2
  6375  0540  2D45               	goto	l645
  6376                           
  6377                           ;Button_src.c: 430:                     stats = 1;
  6378  0541  3001               	movlw	1
  6379  0542  00B3               	movwf	_stats
  6380  0543  3000               	movlw	0
  6381  0544  00B4               	movwf	_stats+1
  6382  0545                     l645:	
  6383                           ;Button_src.c: 431:                 }
  6384                           
  6385                           
  6386                           ;Button_src.c: 433:                     t++;
  6387  0545  3001               	movlw	1
  6388  0546  07C3               	addwf	_t,f
  6389  0547  1803               	skipnc
  6390  0548  0AC4               	incf	_t+1,f
  6391  0549  3000               	movlw	0
  6392  054A  07C4               	addwf	_t+1,f
  6393                           
  6394                           ;Button_src.c: 434:                     t = modulus_func(t,10);
  6395  054B  0844               	movf	_t+1,w
  6396  054C  00F8               	movwf	modulus_func@x+1
  6397  054D  0843               	movf	_t,w
  6398  054E  00F7               	movwf	modulus_func@x
  6399  054F  300A               	movlw	10
  6400  0550  00F9               	movwf	modulus_func@y
  6401  0551  3000               	movlw	0
  6402  0552  00FA               	movwf	modulus_func@y+1
  6403  0553  160A  118A  2648  120A  118A  	fcall	_modulus_func
  6404  0558  0878               	movf	?_modulus_func+1,w
  6405  0559  00C4               	movwf	_t+1
  6406  055A  0877               	movf	?_modulus_func,w
  6407  055B  00C3               	movwf	_t
  6408                           
  6409                           ;Button_src.c: 435:                      if (p == 1){
  6410  055C  032F               	decf	_p,w
  6411  055D  0430               	iorwf	_p+1,w
  6412  055E  1D03               	btfss	3,2
  6413  055F  2D79               	goto	l3682
  6414                           
  6415                           ;Button_src.c: 436:                         w = incrementor(w,t,'0');
  6416  0560  0842               	movf	_w+1,w
  6417  0561  00E3               	movwf	incrementor@upper_val+1
  6418  0562  0841               	movf	_w,w
  6419  0563  00E2               	movwf	incrementor@upper_val
  6420  0564  0844               	movf	_t+1,w
  6421  0565  00E5               	movwf	incrementor@lower_val+1
  6422  0566  0843               	movf	_t,w
  6423  0567  00E4               	movwf	incrementor@lower_val
  6424  0568  3030               	movlw	48
  6425  0569  00E7               	movwf	??_date_settings
  6426  056A  0867               	movf	??_date_settings,w
  6427  056B  00E6               	movwf	incrementor@z
  6428  056C  160A  118A  278E  120A  118A  	fcall	_incrementor
  6429  0571  00E8               	movwf	??_date_settings+1
  6430  0572  01E9               	clrf	??_date_settings+2
  6431  0573  0868               	movf	??_date_settings+1,w
  6432  0574  00C1               	movwf	_w
  6433  0575  0869               	movf	??_date_settings+2,w
  6434  0576  00C2               	movwf	_w+1
  6435                           
  6436                           ;Button_src.c: 437:                         p = 0;
  6437  0577  01AF               	clrf	_p
  6438  0578  01B0               	clrf	_p+1
  6439  0579                     l3682:	
  6440                           
  6441                           ;Button_src.c: 439:                     if (t == 9){
  6442  0579  3009               	movlw	9
  6443  057A  0643               	xorwf	_t,w
  6444  057B  0444               	iorwf	_t+1,w
  6445  057C  1D03               	btfss	3,2
  6446  057D  2D82               	goto	l3686
  6447                           
  6448                           ;Button_src.c: 440:                         p = 1;
  6449  057E  3001               	movlw	1
  6450  057F  00AF               	movwf	_p
  6451  0580  3000               	movlw	0
  6452  0581  00B0               	movwf	_p+1
  6453  0582                     l3686:	
  6454                           
  6455                           ;Button_src.c: 443:                      if(c == (0x59 + 1)){
  6456  0582  305A               	movlw	90
  6457  0583  0655               	xorwf	_c,w
  6458  0584  1903               	btfsc	3,2
  6459                           
  6460                           ;Button_src.c: 444:                         c = 0x00;
  6461  0585  01D5               	clrf	_c
  6462                           
  6463                           ;Button_src.c: 446:                     if(w == 6){
  6464  0586  3006               	movlw	6
  6465  0587  0641               	xorwf	_w,w
  6466  0588  0442               	iorwf	_w+1,w
  6467  0589  1D03               	btfss	3,2
  6468  058A  2D8F               	goto	l3694
  6469                           
  6470                           ;Button_src.c: 447:                         w = 0;
  6471  058B  01C1               	clrf	_w
  6472  058C  01C2               	clrf	_w+1
  6473                           
  6474                           ;Button_src.c: 448:                         t = 0;
  6475  058D  01C3               	clrf	_t
  6476  058E  01C4               	clrf	_t+1
  6477  058F                     l3694:	
  6478                           
  6479                           ;Button_src.c: 450:                     button_delay();
  6480  058F  160A  118A  2669  120A  118A  	fcall	_button_delay
  6481  0594                     l3696:	
  6482                           
  6483                           ;Button_src.c: 457:                     a = time_date_delimiter(a,0x11,'9');
  6484  0594  3011               	movlw	17
  6485  0595  1283               	bcf	3,5	;RP0=0, select bank0
  6486  0596  1303               	bcf	3,6	;RP1=0, select bank0
  6487  0597  00E7               	movwf	??_date_settings
  6488  0598  0867               	movf	??_date_settings,w
  6489  0599  00F0               	movwf	time_date_delimiter@hex
  6490  059A  3039               	movlw	57
  6491  059B  00E8               	movwf	??_date_settings+1
  6492  059C  0868               	movf	??_date_settings+1,w
  6493  059D  00F1               	movwf	time_date_delimiter@limiter
  6494  059E  0857               	movf	_a,w
  6495  059F  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6496  05A4  00E9               	movwf	??_date_settings+2
  6497  05A5  0869               	movf	??_date_settings+2,w
  6498  05A6  00D7               	movwf	_a
  6499                           
  6500                           ;Button_src.c: 459:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6501  05A7  3011               	movlw	17
  6502  05A8  00E7               	movwf	??_date_settings
  6503  05A9  0867               	movf	??_date_settings,w
  6504  05AA  00F0               	movwf	time_date_delimiter@hex
  6505  05AB  3039               	movlw	57
  6506  05AC  00E8               	movwf	??_date_settings+1
  6507  05AD  0868               	movf	??_date_settings+1,w
  6508  05AE  00F1               	movwf	time_date_delimiter@limiter
  6509  05AF  0854               	movf	_day_hex,w
  6510  05B0  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6511  05B5  00E9               	movwf	??_date_settings+2
  6512  05B6  0869               	movf	??_date_settings+2,w
  6513  05B7  00D4               	movwf	_day_hex
  6514                           
  6515                           ;Button_src.c: 460:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6516  05B8  3021               	movlw	33
  6517  05B9  00E7               	movwf	??_date_settings
  6518  05BA  0867               	movf	??_date_settings,w
  6519  05BB  00F0               	movwf	time_date_delimiter@hex
  6520  05BC  304A               	movlw	74
  6521  05BD  00E8               	movwf	??_date_settings+1
  6522  05BE  0868               	movf	??_date_settings+1,w
  6523  05BF  00F1               	movwf	time_date_delimiter@limiter
  6524  05C0  0854               	movf	_day_hex,w
  6525  05C1  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6526  05C6  00E9               	movwf	??_date_settings+2
  6527  05C7  0869               	movf	??_date_settings+2,w
  6528  05C8  00D4               	movwf	_day_hex
  6529                           
  6530                           ;Button_src.c: 461:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6531  05C9  3011               	movlw	17
  6532  05CA  00E7               	movwf	??_date_settings
  6533  05CB  0867               	movf	??_date_settings,w
  6534  05CC  00F0               	movwf	time_date_delimiter@hex
  6535  05CD  3039               	movlw	57
  6536  05CE  00E8               	movwf	??_date_settings+1
  6537  05CF  0868               	movf	??_date_settings+1,w
  6538  05D0  00F1               	movwf	time_date_delimiter@limiter
  6539  05D1  0854               	movf	_day_hex,w
  6540  05D2  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6541  05D7  00E9               	movwf	??_date_settings+2
  6542  05D8  0869               	movf	??_date_settings+2,w
  6543  05D9  00D4               	movwf	_day_hex
  6544                           
  6545                           ;Button_src.c: 462:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6546  05DA  3021               	movlw	33
  6547  05DB  00E7               	movwf	??_date_settings
  6548  05DC  0867               	movf	??_date_settings,w
  6549  05DD  00F0               	movwf	time_date_delimiter@hex
  6550  05DE  304A               	movlw	74
  6551  05DF  00E8               	movwf	??_date_settings+1
  6552  05E0  0868               	movf	??_date_settings+1,w
  6553  05E1  00F1               	movwf	time_date_delimiter@limiter
  6554  05E2  0854               	movf	_day_hex,w
  6555  05E3  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6556  05E8  00E9               	movwf	??_date_settings+2
  6557  05E9  0869               	movf	??_date_settings+2,w
  6558  05EA  00D4               	movwf	_day_hex
  6559                           
  6560                           ;Button_src.c: 463:                     day_hex = time_date_delimiter(day_hex,0x31,'Y');
  6561  05EB  3031               	movlw	49
  6562  05EC  00E7               	movwf	??_date_settings
  6563  05ED  0867               	movf	??_date_settings,w
  6564  05EE  00F0               	movwf	time_date_delimiter@hex
  6565  05EF  3059               	movlw	89
  6566  05F0  00E8               	movwf	??_date_settings+1
  6567  05F1  0868               	movf	??_date_settings+1,w
  6568  05F2  00F1               	movwf	time_date_delimiter@limiter
  6569  05F3  0854               	movf	_day_hex,w
  6570  05F4  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6571  05F9  00E9               	movwf	??_date_settings+2
  6572  05FA  0869               	movf	??_date_settings+2,w
  6573  05FB  00D4               	movwf	_day_hex
  6574                           
  6575                           ;Button_src.c: 465:                     c = time_date_delimiter(c,0x11,'9');
  6576  05FC  3011               	movlw	17
  6577  05FD  00E7               	movwf	??_date_settings
  6578  05FE  0867               	movf	??_date_settings,w
  6579  05FF  00F0               	movwf	time_date_delimiter@hex
  6580  0600  3039               	movlw	57
  6581  0601  00E8               	movwf	??_date_settings+1
  6582  0602  0868               	movf	??_date_settings+1,w
  6583  0603  00F1               	movwf	time_date_delimiter@limiter
  6584  0604  0855               	movf	_c,w
  6585  0605  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6586  060A  00E9               	movwf	??_date_settings+2
  6587  060B  0869               	movf	??_date_settings+2,w
  6588  060C  00D5               	movwf	_c
  6589                           
  6590                           ;Button_src.c: 466:                     c = time_date_delimiter(c,0x21,'J');
  6591  060D  3021               	movlw	33
  6592  060E  00E7               	movwf	??_date_settings
  6593  060F  0867               	movf	??_date_settings,w
  6594  0610  00F0               	movwf	time_date_delimiter@hex
  6595  0611  304A               	movlw	74
  6596  0612  00E8               	movwf	??_date_settings+1
  6597  0613  0868               	movf	??_date_settings+1,w
  6598  0614  00F1               	movwf	time_date_delimiter@limiter
  6599  0615  0855               	movf	_c,w
  6600  0616  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6601  061B  00E9               	movwf	??_date_settings+2
  6602  061C  0869               	movf	??_date_settings+2,w
  6603  061D  00D5               	movwf	_c
  6604                           
  6605                           ;Button_src.c: 467:                     c = time_date_delimiter(c,0x11,'9');
  6606  061E  3011               	movlw	17
  6607  061F  00E7               	movwf	??_date_settings
  6608  0620  0867               	movf	??_date_settings,w
  6609  0621  00F0               	movwf	time_date_delimiter@hex
  6610  0622  3039               	movlw	57
  6611  0623  00E8               	movwf	??_date_settings+1
  6612  0624  0868               	movf	??_date_settings+1,w
  6613  0625  00F1               	movwf	time_date_delimiter@limiter
  6614  0626  0855               	movf	_c,w
  6615  0627  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6616  062C  00E9               	movwf	??_date_settings+2
  6617  062D  0869               	movf	??_date_settings+2,w
  6618  062E  00D5               	movwf	_c
  6619                           
  6620                           ;Button_src.c: 468:                     c = time_date_delimiter(c,0x21,'J');
  6621  062F  3021               	movlw	33
  6622  0630  00E7               	movwf	??_date_settings
  6623  0631  0867               	movf	??_date_settings,w
  6624  0632  00F0               	movwf	time_date_delimiter@hex
  6625  0633  304A               	movlw	74
  6626  0634  00E8               	movwf	??_date_settings+1
  6627  0635  0868               	movf	??_date_settings+1,w
  6628  0636  00F1               	movwf	time_date_delimiter@limiter
  6629  0637  0855               	movf	_c,w
  6630  0638  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6631  063D  00E9               	movwf	??_date_settings+2
  6632  063E  0869               	movf	??_date_settings+2,w
  6633  063F  00D5               	movwf	_c
  6634                           
  6635                           ;Button_src.c: 469:                     c = time_date_delimiter(c,0x31,'Y');
  6636  0640  3031               	movlw	49
  6637  0641  00E7               	movwf	??_date_settings
  6638  0642  0867               	movf	??_date_settings,w
  6639  0643  00F0               	movwf	time_date_delimiter@hex
  6640  0644  3059               	movlw	89
  6641  0645  00E8               	movwf	??_date_settings+1
  6642  0646  0868               	movf	??_date_settings+1,w
  6643  0647  00F1               	movwf	time_date_delimiter@limiter
  6644  0648  0855               	movf	_c,w
  6645  0649  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6646  064E  00E9               	movwf	??_date_settings+2
  6647  064F  0869               	movf	??_date_settings+2,w
  6648  0650  00D5               	movwf	_c
  6649                           
  6650                           ;Button_src.c: 470:                     c = time_date_delimiter(c,0x41,'j');
  6651  0651  3041               	movlw	65
  6652  0652  00E7               	movwf	??_date_settings
  6653  0653  0867               	movf	??_date_settings,w
  6654  0654  00F0               	movwf	time_date_delimiter@hex
  6655  0655  306A               	movlw	106
  6656  0656  00E8               	movwf	??_date_settings+1
  6657  0657  0868               	movf	??_date_settings+1,w
  6658  0658  00F1               	movwf	time_date_delimiter@limiter
  6659  0659  0855               	movf	_c,w
  6660  065A  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6661  065F  00E9               	movwf	??_date_settings+2
  6662  0660  0869               	movf	??_date_settings+2,w
  6663  0661  00D5               	movwf	_c
  6664                           
  6665                           ;Button_src.c: 471:                     c = time_date_delimiter(c,0x51,'z');
  6666  0662  3051               	movlw	81
  6667  0663  00E7               	movwf	??_date_settings
  6668  0664  0867               	movf	??_date_settings,w
  6669  0665  00F0               	movwf	time_date_delimiter@hex
  6670  0666  307A               	movlw	122
  6671  0667  00E8               	movwf	??_date_settings+1
  6672  0668  0868               	movf	??_date_settings+1,w
  6673  0669  00F1               	movwf	time_date_delimiter@limiter
  6674  066A  0855               	movf	_c,w
  6675  066B  120A  118A  2003  120A  118A  	fcall	_time_date_delimiter
  6676  0670  00E9               	movwf	??_date_settings+2
  6677  0671  0869               	movf	??_date_settings+2,w
  6678  0672  00D5               	movwf	_c
  6679                           
  6680                           ;Button_src.c: 473:               if(stats==0)
  6681  0673  0833               	movf	_stats,w
  6682  0674  0434               	iorwf	_stats+1,w
  6683  0675  1D03               	btfss	3,2
  6684  0676  2E79               	goto	l3726
  6685                           
  6686                           ;Button_src.c: 474:                  table[4] = prev_hex;
  6687  0677  0852               	movf	_prev_hex,w
  6688  0678  2E7E               	goto	L2
  6689  0679                     l3726:	
  6690  0679  0333               	decf	_stats,w
  6691  067A  0434               	iorwf	_stats+1,w
  6692  067B  1D03               	btfss	3,2
  6693  067C  2E82               	goto	l651
  6694                           
  6695                           ;Button_src.c: 476:                  table[4]= a;
  6696  067D  0857               	movf	_a,w
  6697  067E                     L2:	
  6698  067E  00E7               	movwf	??_date_settings
  6699  067F  0867               	movf	??_date_settings,w
  6700  0680  1683               	bsf	3,5	;RP0=1, select bank1
  6701  0681  00A4               	movwf	(_table^(0+128)+4)
  6702  0682                     l651:	
  6703                           
  6704                           ;Button_src.c: 477:               table[6] = c;
  6705  0682  1283               	bcf	3,5	;RP0=0, select bank0
  6706  0683  0855               	movf	_c,w
  6707  0684  00E7               	movwf	??_date_settings
  6708  0685  0867               	movf	??_date_settings,w
  6709  0686  1683               	bsf	3,5	;RP0=1, select bank1
  6710  0687  00A6               	movwf	(_table^(0+128)+6)
  6711                           
  6712                           ;Button_src.c: 478:               table[3] = day_hex;
  6713  0688  1283               	bcf	3,5	;RP0=0, select bank0
  6714  0689  0854               	movf	_day_hex,w
  6715  068A  00E7               	movwf	??_date_settings
  6716  068B  0867               	movf	??_date_settings,w
  6717  068C  1683               	bsf	3,5	;RP0=1, select bank1
  6718  068D  00A3               	movwf	(_table^(0+128)+3)
  6719                           
  6720                           ;Button_src.c: 479:              write_cmd(0x88);
  6721  068E  3088               	movlw	136
  6722  068F  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  6723                           
  6724                           ;Button_src.c: 481:                   RC0 = 0;
  6725  0694  1007               	bcf	7,0	;volatile
  6726                           
  6727                           ;Button_src.c: 482:                   RC1 = 1;
  6728  0695  1487               	bsf	7,1	;volatile
  6729                           
  6730                           ;Button_src.c: 483:                   RC2 = 1;
  6731  0696  1507               	bsf	7,2	;volatile
  6732                           
  6733                           ;Button_src.c: 484:                   RC3 = 1;
  6734  0697  1587               	bsf	7,3	;volatile
  6735                           
  6736                           ;Button_src.c: 486:                     if (RC6 == 0 ){
  6737  0698  1B07               	btfsc	7,6	;volatile
  6738  0699  2EB3               	goto	l653
  6739                           
  6740                           ;Button_src.c: 487:                           a = 0x00;
  6741  069A  01D7               	clrf	_a
  6742                           
  6743                           ;Button_src.c: 488:                           c = 0x00;
  6744  069B  01D5               	clrf	_c
  6745                           
  6746                           ;Button_src.c: 489:                           day_hex = 0x00;
  6747  069C  01D4               	clrf	_day_hex
  6748                           
  6749                           ;Button_src.c: 490:                           day_high = 0;
  6750  069D  01B7               	clrf	_day_high
  6751  069E  01B8               	clrf	_day_high+1
  6752                           
  6753                           ;Button_src.c: 491:                           day_low = 0;
  6754  069F  01B9               	clrf	_day_low
  6755  06A0  01BA               	clrf	_day_low+1
  6756                           
  6757                           ;Button_src.c: 492:                           x = 0;
  6758  06A1  01BF               	clrf	_x
  6759  06A2  01C0               	clrf	_x+1
  6760                           
  6761                           ;Button_src.c: 493:                           y = 0;
  6762  06A3  01BD               	clrf	_y
  6763  06A4  01BE               	clrf	_y+1
  6764                           
  6765                           ;Button_src.c: 494:                           w = 0;
  6766  06A5  01C1               	clrf	_w
  6767  06A6  01C2               	clrf	_w+1
  6768                           
  6769                           ;Button_src.c: 495:                           t = 0;
  6770  06A7  01C3               	clrf	_t
  6771  06A8  01C4               	clrf	_t+1
  6772                           
  6773                           ;Button_src.c: 496:                           write_cmd(0x1);
  6774  06A9  3001               	movlw	1
  6775  06AA  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  6776                           
  6777                           ;Button_src.c: 497:                           set_time();
  6778  06AF  160A  118A  27D8   	fcall	_set_time
  6779  06B2  0008               	return
  6780  06B3                     l653:	
  6781                           ;Button_src.c: 499:                             }
  6782                           
  6783                           
  6784                           ;Button_src.c: 500:                   RC0 = 0;
  6785  06B3  1007               	bcf	7,0	;volatile
  6786                           
  6787                           ;Button_src.c: 501:                   RC1 = 1;
  6788  06B4  1487               	bsf	7,1	;volatile
  6789                           
  6790                           ;Button_src.c: 502:                   RC2 = 1;
  6791  06B5  1507               	bsf	7,2	;volatile
  6792                           
  6793                           ;Button_src.c: 503:                   RC3 = 1;
  6794  06B6  1587               	bsf	7,3	;volatile
  6795                           
  6796                           ;Button_src.c: 504:                   z = modulus_func(z,3);
  6797  06B7  083C               	movf	_z+1,w
  6798  06B8  00F8               	movwf	modulus_func@x+1
  6799  06B9  083B               	movf	_z,w
  6800  06BA  00F7               	movwf	modulus_func@x
  6801  06BB  3003               	movlw	3
  6802  06BC  00F9               	movwf	modulus_func@y
  6803  06BD  3000               	movlw	0
  6804  06BE  00FA               	movwf	modulus_func@y+1
  6805  06BF  160A  118A  2648  120A  118A  	fcall	_modulus_func
  6806  06C4  0878               	movf	?_modulus_func+1,w
  6807  06C5  00BC               	movwf	_z+1
  6808  06C6  0877               	movf	?_modulus_func,w
  6809  06C7  00BB               	movwf	_z
  6810                           
  6811                           ;Button_src.c: 505:                   if(RC4 == 0 && z ==0){
  6812  06C8  1A07               	btfsc	7,4	;volatile
  6813  06C9  2F09               	goto	l3762
  6814  06CA  083B               	movf	_z,w
  6815  06CB  043C               	iorwf	_z+1,w
  6816  06CC  1D03               	btfss	3,2
  6817  06CD  2F09               	goto	l3762
  6818                           
  6819                           ;Button_src.c: 506:                       write_cmd(0x90);
  6820  06CE  3090               	movlw	144
  6821  06CF  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  6822                           
  6823                           ;Button_src.c: 507:                       write_char('D');
  6824  06D4  3044               	movlw	68
  6825  06D5  160A  118A  26BB  120A  118A  	fcall	_write_char
  6826                           
  6827                           ;Button_src.c: 508:                       write_char('a');
  6828  06DA  3061               	movlw	97
  6829  06DB  160A  118A  26BB  120A  118A  	fcall	_write_char
  6830                           
  6831                           ;Button_src.c: 509:                       write_char('y');
  6832  06E0  3079               	movlw	121
  6833  06E1  160A  118A  26BB  120A  118A  	fcall	_write_char
  6834                           
  6835                           ;Button_src.c: 510:                       write_char(':');
  6836  06E6  303A               	movlw	58
  6837  06E7  160A  118A  26BB  120A  118A  	fcall	_write_char
  6838                           
  6839                           ;Button_src.c: 511:                       write_char(' ');
  6840  06EC  3020               	movlw	32
  6841  06ED  160A  118A  26BB  120A  118A  	fcall	_write_char
  6842                           
  6843                           ;Button_src.c: 512:                       write_char(' ');
  6844  06F2  3020               	movlw	32
  6845  06F3  160A  118A  26BB  120A  118A  	fcall	_write_char
  6846                           
  6847                           ;Button_src.c: 513:                       b = 'y';
  6848  06F8  3079               	movlw	121
  6849  06F9  00E7               	movwf	??_date_settings
  6850  06FA  0867               	movf	??_date_settings,w
  6851  06FB  00D6               	movwf	_b
  6852                           
  6853                           ;Button_src.c: 515:                       button_delay();
  6854  06FC  160A  118A  2669  120A  118A  	fcall	_button_delay
  6855                           
  6856                           ;Button_src.c: 516:                       z++;
  6857  0701  3001               	movlw	1
  6858  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6859  0703  1303               	bcf	3,6	;RP1=0, select bank0
  6860  0704  07BB               	addwf	_z,f
  6861  0705  1803               	skipnc
  6862  0706  0ABC               	incf	_z+1,f
  6863  0707  3000               	movlw	0
  6864  0708  07BC               	addwf	_z+1,f
  6865  0709                     l3762:	
  6866                           
  6867                           ;Button_src.c: 518:                   RC0 = 0;
  6868  0709  1007               	bcf	7,0	;volatile
  6869                           
  6870                           ;Button_src.c: 519:                   RC1 = 1;
  6871  070A  1487               	bsf	7,1	;volatile
  6872                           
  6873                           ;Button_src.c: 520:                   RC2 = 1;
  6874  070B  1507               	bsf	7,2	;volatile
  6875                           
  6876                           ;Button_src.c: 521:                   RC3 = 1;
  6877  070C  1587               	bsf	7,3	;volatile
  6878                           
  6879                           ;Button_src.c: 522:                   if(RC4 == 0&& z ==1){
  6880  070D  1A07               	btfsc	7,4	;volatile
  6881  070E  2F4C               	goto	l3792
  6882  070F  033B               	decf	_z,w
  6883  0710  043C               	iorwf	_z+1,w
  6884  0711  1D03               	btfss	3,2
  6885  0712  2F4C               	goto	l3792
  6886                           
  6887                           ;Button_src.c: 523:                       z++;
  6888  0713  3001               	movlw	1
  6889  0714  07BB               	addwf	_z,f
  6890  0715  1803               	skipnc
  6891  0716  0ABC               	incf	_z+1,f
  6892  0717  3000               	movlw	0
  6893  0718  07BC               	addwf	_z+1,f
  6894                           
  6895                           ;Button_src.c: 524:                       button_delay();
  6896  0719  160A  118A  2669  120A  118A  	fcall	_button_delay
  6897                           
  6898                           ;Button_src.c: 526:                       write_cmd(0x90);
  6899  071E  3090               	movlw	144
  6900  071F  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  6901                           
  6902                           ;Button_src.c: 527:                       write_char('M');
  6903  0724  304D               	movlw	77
  6904  0725  160A  118A  26BB  120A  118A  	fcall	_write_char
  6905                           
  6906                           ;Button_src.c: 528:                       write_char('o');
  6907  072A  306F               	movlw	111
  6908  072B  160A  118A  26BB  120A  118A  	fcall	_write_char
  6909                           
  6910                           ;Button_src.c: 529:                       write_char('n');
  6911  0730  306E               	movlw	110
  6912  0731  160A  118A  26BB  120A  118A  	fcall	_write_char
  6913                           
  6914                           ;Button_src.c: 530:                       write_char('t');
  6915  0736  3074               	movlw	116
  6916  0737  160A  118A  26BB  120A  118A  	fcall	_write_char
  6917                           
  6918                           ;Button_src.c: 531:                       write_char('h');
  6919  073C  3068               	movlw	104
  6920  073D  160A  118A  26BB  120A  118A  	fcall	_write_char
  6921                           
  6922                           ;Button_src.c: 532:                       write_char(':');
  6923  0742  303A               	movlw	58
  6924  0743  160A  118A  26BB  120A  118A  	fcall	_write_char
  6925                           
  6926                           ;Button_src.c: 533:                       b = 'x';
  6927  0748  3078               	movlw	120
  6928  0749  00E7               	movwf	??_date_settings
  6929  074A  0867               	movf	??_date_settings,w
  6930  074B  00D6               	movwf	_b
  6931  074C                     l3792:	
  6932                           
  6933                           ;Button_src.c: 536:                   RC0 = 0;
  6934  074C  1007               	bcf	7,0	;volatile
  6935                           
  6936                           ;Button_src.c: 537:                   RC1 = 1;
  6937  074D  1487               	bsf	7,1	;volatile
  6938                           
  6939                           ;Button_src.c: 538:                   RC2 = 1;
  6940  074E  1507               	bsf	7,2	;volatile
  6941                           
  6942                           ;Button_src.c: 539:                   RC3 = 1;
  6943  074F  1587               	bsf	7,3	;volatile
  6944                           
  6945                           ;Button_src.c: 540:                   if(RC4 == 0&& z ==2){
  6946  0750  1A07               	btfsc	7,4	;volatile
  6947  0751  2F92               	goto	l3822
  6948  0752  3002               	movlw	2
  6949  0753  063B               	xorwf	_z,w
  6950  0754  043C               	iorwf	_z+1,w
  6951  0755  1D03               	btfss	3,2
  6952  0756  2F92               	goto	l3822
  6953                           
  6954                           ;Button_src.c: 541:                       button_delay();
  6955  0757  160A  118A  2669  120A  118A  	fcall	_button_delay
  6956                           
  6957                           ;Button_src.c: 542:                       z++;
  6958  075C  3001               	movlw	1
  6959  075D  1283               	bcf	3,5	;RP0=0, select bank0
  6960  075E  1303               	bcf	3,6	;RP1=0, select bank0
  6961  075F  07BB               	addwf	_z,f
  6962  0760  1803               	skipnc
  6963  0761  0ABC               	incf	_z+1,f
  6964  0762  3000               	movlw	0
  6965  0763  07BC               	addwf	_z+1,f
  6966                           
  6967                           ;Button_src.c: 544:                       write_cmd(0x90);
  6968  0764  3090               	movlw	144
  6969  0765  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  6970                           
  6971                           ;Button_src.c: 545:                       write_char('Y');
  6972  076A  3059               	movlw	89
  6973  076B  160A  118A  26BB  120A  118A  	fcall	_write_char
  6974                           
  6975                           ;Button_src.c: 546:                       write_char('e');
  6976  0770  3065               	movlw	101
  6977  0771  160A  118A  26BB  120A  118A  	fcall	_write_char
  6978                           
  6979                           ;Button_src.c: 547:                       write_char('a');
  6980  0776  3061               	movlw	97
  6981  0777  160A  118A  26BB  120A  118A  	fcall	_write_char
  6982                           
  6983                           ;Button_src.c: 548:                       write_char('r');
  6984  077C  3072               	movlw	114
  6985  077D  160A  118A  26BB  120A  118A  	fcall	_write_char
  6986                           
  6987                           ;Button_src.c: 549:                       write_char(':');
  6988  0782  303A               	movlw	58
  6989  0783  160A  118A  26BB  120A  118A  	fcall	_write_char
  6990                           
  6991                           ;Button_src.c: 550:                       write_char(' ');
  6992  0788  3020               	movlw	32
  6993  0789  160A  118A  26BB  120A  118A  	fcall	_write_char
  6994                           
  6995                           ;Button_src.c: 551:                       b = 'z';
  6996  078E  307A               	movlw	122
  6997  078F  00E7               	movwf	??_date_settings
  6998  0790  0867               	movf	??_date_settings,w
  6999  0791  00D6               	movwf	_b
  7000  0792                     l3822:	
  7001                           
  7002                           ;Button_src.c: 554:               write_cmd(0x88);
  7003  0792  3088               	movlw	136
  7004  0793  160A  118A  26D2  120A  118A  	fcall	_write_cmd
  7005                           
  7006                           ;Button_src.c: 555:               write_char(day_high + '0');
  7007  0798  0837               	movf	_day_high,w
  7008  0799  3E30               	addlw	48
  7009  079A  160A  118A  26BB  120A  118A  	fcall	_write_char
  7010                           
  7011                           ;Button_src.c: 556:               write_char(day_low + '0');
  7012  079F  0839               	movf	_day_low,w
  7013  07A0  3E30               	addlw	48
  7014  07A1  160A  118A  26BB  120A  118A  	fcall	_write_char
  7015                           
  7016                           ;Button_src.c: 557:               write_char('/');
  7017  07A6  302F               	movlw	47
  7018  07A7  160A  118A  26BB  120A  118A  	fcall	_write_char
  7019                           
  7020                           ;Button_src.c: 558:               write_char(y + '0');
  7021  07AC  083D               	movf	_y,w
  7022  07AD  3E30               	addlw	48
  7023  07AE  160A  118A  26BB  120A  118A  	fcall	_write_char
  7024                           
  7025                           ;Button_src.c: 559:               write_char(x + '0');
  7026  07B3  083F               	movf	_x,w
  7027  07B4  3E30               	addlw	48
  7028  07B5  160A  118A  26BB  120A  118A  	fcall	_write_char
  7029                           
  7030                           ;Button_src.c: 560:               write_char('/');
  7031  07BA  302F               	movlw	47
  7032  07BB  160A  118A  26BB  120A  118A  	fcall	_write_char
  7033                           
  7034                           ;Button_src.c: 561:               write_char(w+ '0');
  7035  07C0  0841               	movf	_w,w
  7036  07C1  3E30               	addlw	48
  7037  07C2  160A  118A  26BB  120A  118A  	fcall	_write_char
  7038                           
  7039                           ;Button_src.c: 562:               write_char(t+ '0');
  7040  07C7  0843               	movf	_t,w
  7041  07C8  3E30               	addlw	48
  7042  07C9  160A  118A  26BB  120A  118A  	fcall	_write_char
  7043                           
  7044                           ;Button_src.c: 565:             RC0 = 0;
  7045  07CE  1007               	bcf	7,0	;volatile
  7046                           
  7047                           ;Button_src.c: 566:             RC1 = 1;
  7048  07CF  1487               	bsf	7,1	;volatile
  7049                           
  7050                           ;Button_src.c: 567:             RC2 = 1;
  7051  07D0  1507               	bsf	7,2	;volatile
  7052                           
  7053                           ;Button_src.c: 568:             RC3 = 1;
  7054  07D1  1587               	bsf	7,3	;volatile
  7055                           
  7056                           ;Button_src.c: 569:             if (RC7 == 0 ){
  7057  07D2  1B87               	btfsc	7,7	;volatile
  7058  07D3  2BDD               	goto	l630
  7059                           
  7060                           ;Button_src.c: 570:             a = 0x00;
  7061  07D4  01D7               	clrf	_a
  7062                           
  7063                           ;Button_src.c: 571:             c = 0x00;
  7064  07D5  01D5               	clrf	_c
  7065                           
  7066                           ;Button_src.c: 572:             day_hex = 0x00;
  7067  07D6  01D4               	clrf	_day_hex
  7068                           
  7069                           ;Button_src.c: 573:             x = 0;
  7070  07D7  01BF               	clrf	_x
  7071  07D8  01C0               	clrf	_x+1
  7072                           
  7073                           ;Button_src.c: 574:             y = 0;
  7074  07D9  01BD               	clrf	_y
  7075  07DA  01BE               	clrf	_y+1
  7076                           
  7077                           ;Button_src.c: 575:             w = 0;
  7078  07DB  01C1               	clrf	_w
  7079  07DC  01C2               	clrf	_w+1
  7080                           
  7081                           ;Button_src.c: 576:             t = 0;
  7082  07DD  01C3               	clrf	_t
  7083  07DE  01C4               	clrf	_t+1
  7084                           
  7085                           ;Button_src.c: 577:             day_high = 0;
  7086  07DF  01B7               	clrf	_day_high
  7087  07E0  01B8               	clrf	_day_high+1
  7088                           
  7089                           ;Button_src.c: 578:             day_low = 0;
  7090  07E1  01B9               	clrf	_day_low
  7091  07E2  01BA               	clrf	_day_low+1
  7092                           
  7093                           ;Button_src.c: 579:             write_cmd(0x1);
  7094  07E3  3001               	movlw	1
  7095  07E4  160A  118A  26D2   	fcall	_write_cmd
  7096                           
  7097                           ;Button_src.c: 580:             break;
  7098  07E7  0008               	return
  7099  07E8                     __end_of_date_settings:	
  7100                           
  7101                           	psect	text30
  7102  16D2                     __ptext30:	
  7103 ;; *************** function _write_cmd *****************
  7104 ;; Defined at:
  7105 ;;		line 41 in file "LCD_src.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  x               1    wreg     unsigned char 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;  x               1    2[COMMON] unsigned char 
  7110 ;;  i               2    0        int 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 300/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7120 ;;      Params:         0       0       0       0       0
  7121 ;;      Locals:         1       0       0       0       0
  7122 ;;      Temps:          0       0       0       0       0
  7123 ;;      Totals:         1       0       0       0       0
  7124 ;;Total ram usage:        1 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    1
  7127 ;; This function calls:
  7128 ;;		_delay_screen
  7129 ;; This function is called by:
  7130 ;;		_main
  7131 ;;		_lcd_init
  7132 ;;		_thermometer_threshhold_settings
  7133 ;;		_time_settings
  7134 ;;		_date_settings
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _write_cmd
  7140  16D2                     _write_cmd:	
  7141                           
  7142                           ;incstack = 0
  7143                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7144                           ;write_cmd@x stored from wreg
  7145  16D2  00F2               	movwf	write_cmd@x
  7146                           
  7147                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7148  16D3  1283               	bcf	3,5	;RP0=0, select bank0
  7149  16D4  1303               	bcf	3,6	;RP1=0, select bank0
  7150  16D5  1285               	bcf	5,5	;volatile
  7151                           
  7152                           ;LCD_src.c: 45:  RA4=0;
  7153  16D6  1205               	bcf	5,4	;volatile
  7154                           
  7155                           ;LCD_src.c: 46:  RA3=0;
  7156  16D7  1185               	bcf	5,3	;volatile
  7157                           
  7158                           ;LCD_src.c: 47:  delay_screen();
  7159  16D8  160A  118A  267D  160A  118A  	fcall	_delay_screen
  7160                           
  7161                           ;LCD_src.c: 48:  RA3=1;
  7162  16DD  1283               	bcf	3,5	;RP0=0, select bank0
  7163  16DE  1303               	bcf	3,6	;RP1=0, select bank0
  7164  16DF  1585               	bsf	5,3	;volatile
  7165                           
  7166                           ;LCD_src.c: 49:  PORTD=x;
  7167  16E0  0872               	movf	write_cmd@x,w
  7168  16E1  0088               	movwf	8	;volatile
  7169                           
  7170                           ;LCD_src.c: 50:  delay_screen();
  7171  16E2  160A  118A  267D   	fcall	_delay_screen
  7172                           
  7173                           ;LCD_src.c: 51:  RA3=0;
  7174  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  7175  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  7176  16E7  1185               	bcf	5,3	;volatile
  7177  16E8  0008               	return
  7178  16E9                     __end_of_write_cmd:	
  7179                           
  7180                           	psect	text31
  7181  16BB                     __ptext31:	
  7182 ;; *************** function _write_char *****************
  7183 ;; Defined at:
  7184 ;;		line 28 in file "LCD_src.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  x               1    wreg     unsigned char 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  x               1    2[COMMON] unsigned char 
  7189 ;;  i               2    0        int 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  1    wreg      void 
  7192 ;; Registers used:
  7193 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 300/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7199 ;;      Params:         0       0       0       0       0
  7200 ;;      Locals:         1       0       0       0       0
  7201 ;;      Temps:          0       0       0       0       0
  7202 ;;      Totals:         1       0       0       0       0
  7203 ;;Total ram usage:        1 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    1
  7206 ;; This function calls:
  7207 ;;		_delay_screen
  7208 ;; This function is called by:
  7209 ;;		_main
  7210 ;;		_display_temp
  7211 ;;		_display_clock
  7212 ;;		_display_date
  7213 ;;		_thermometer_threshhold_settings
  7214 ;;		_time_settings
  7215 ;;		_date_settings
  7216 ;;		_set_upper_threshold
  7217 ;;		_set_lower_threshold
  7218 ;;		_display_day
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222                           
  7223                           ;psect for function _write_char
  7224  16BB                     _write_char:	
  7225                           
  7226                           ;incstack = 0
  7227                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7228                           ;write_char@x stored from wreg
  7229  16BB  00F2               	movwf	write_char@x
  7230                           
  7231                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7232  16BC  1283               	bcf	3,5	;RP0=0, select bank0
  7233  16BD  1303               	bcf	3,6	;RP1=0, select bank0
  7234  16BE  1685               	bsf	5,5	;volatile
  7235                           
  7236                           ;LCD_src.c: 32:  RA4=0;
  7237  16BF  1205               	bcf	5,4	;volatile
  7238                           
  7239                           ;LCD_src.c: 33:  RA3=0;
  7240  16C0  1185               	bcf	5,3	;volatile
  7241                           
  7242                           ;LCD_src.c: 34:  delay_screen();
  7243  16C1  160A  118A  267D  160A  118A  	fcall	_delay_screen
  7244                           
  7245                           ;LCD_src.c: 35:  RA3=1;
  7246  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  7247  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  7248  16C8  1585               	bsf	5,3	;volatile
  7249                           
  7250                           ;LCD_src.c: 36:  PORTD= x;
  7251  16C9  0872               	movf	write_char@x,w
  7252  16CA  0088               	movwf	8	;volatile
  7253                           
  7254                           ;LCD_src.c: 37:  delay_screen();
  7255  16CB  160A  118A  267D   	fcall	_delay_screen
  7256                           
  7257                           ;LCD_src.c: 38:  RA3=0;
  7258  16CE  1283               	bcf	3,5	;RP0=0, select bank0
  7259  16CF  1303               	bcf	3,6	;RP1=0, select bank0
  7260  16D0  1185               	bcf	5,3	;volatile
  7261  16D1  0008               	return
  7262  16D2                     __end_of_write_char:	
  7263                           
  7264                           	psect	text32
  7265  167D                     __ptext32:	
  7266 ;; *************** function _delay_screen *****************
  7267 ;; Defined at:
  7268 ;;		line 70 in file "LCD_src.c"
  7269 ;; Parameters:    Size  Location     Type
  7270 ;;		None
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  i               2    0[COMMON] int 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  1    wreg      void 
  7275 ;; Registers used:
  7276 ;;		wreg, status,2, btemp+1
  7277 ;; Tracked objects:
  7278 ;;		On entry : 300/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7282 ;;      Params:         0       0       0       0       0
  7283 ;;      Locals:         2       0       0       0       0
  7284 ;;      Temps:          0       0       0       0       0
  7285 ;;      Totals:         2       0       0       0       0
  7286 ;;Total ram usage:        2 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_lcd_init
  7292 ;;		_write_char
  7293 ;;		_write_cmd
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function _delay_screen
  7299  167D                     _delay_screen:	
  7300                           
  7301                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7305  167D  01F0               	clrf	delay_screen@i
  7306  167E  01F1               	clrf	delay_screen@i+1
  7307  167F                     l2882:	
  7308  167F  3001               	movlw	1
  7309  1680  07F0               	addwf	delay_screen@i,f
  7310  1681  1803               	skipnc
  7311  1682  0AF1               	incf	delay_screen@i+1,f
  7312  1683  3000               	movlw	0
  7313  1684  07F1               	addwf	delay_screen@i+1,f
  7314  1685  0871               	movf	delay_screen@i+1,w
  7315  1686  3A80               	xorlw	128
  7316  1687  00FF               	movwf	127
  7317  1688  3080               	movlw	128
  7318  1689  027F               	subwf	127,w
  7319  168A  1D03               	skipz
  7320  168B  2E8E               	goto	u1575
  7321  168C  3005               	movlw	5
  7322  168D  0270               	subwf	delay_screen@i,w
  7323  168E                     u1575:	
  7324  168E  1803               	btfsc	3,0
  7325  168F  0008               	return
  7326  1690  2E7F               	goto	l2882
  7327  1691                     __end_of_delay_screen:	
  7328                           
  7329                           	psect	text33
  7330  162A                     __ptext33:	
  7331 ;; *************** function _time_date_hex_terminator *****************
  7332 ;; Defined at:
  7333 ;;		line 51 in file "math_src.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  val             1    wreg     unsigned char 
  7336 ;;  limiter         1    0[COMMON] unsigned char 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  val             1    3[COMMON] unsigned char 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      unsigned char 
  7341 ;; Registers used:
  7342 ;;		wreg, status,2
  7343 ;; Tracked objects:
  7344 ;;		On entry : 300/0
  7345 ;;		On exit  : 300/0
  7346 ;;		Unchanged: 300/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7348 ;;      Params:         1       0       0       0       0
  7349 ;;      Locals:         1       0       0       0       0
  7350 ;;      Temps:          2       0       0       0       0
  7351 ;;      Totals:         4       0       0       0       0
  7352 ;;Total ram usage:        4 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_time_settings
  7358 ;;		_date_settings
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           
  7363                           ;psect for function _time_date_hex_terminator
  7364  162A                     _time_date_hex_terminator:	
  7365                           
  7366                           ;incstack = 0
  7367                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7368                           ;time_date_hex_terminator@val stored from wreg
  7369  162A  00F3               	movwf	time_date_hex_terminator@val
  7370                           
  7371                           ;math_src.c: 52:     if((val + '0') == limiter){
  7372  162B  0873               	movf	time_date_hex_terminator@val,w
  7373  162C  3E30               	addlw	48
  7374  162D  00F1               	movwf	??_time_date_hex_terminator
  7375  162E  3000               	movlw	0
  7376  162F  1803               	skipnc
  7377  1630  3001               	movlw	1
  7378  1631  00F2               	movwf	??_time_date_hex_terminator+1
  7379  1632  0870               	movf	time_date_hex_terminator@limiter,w
  7380  1633  0671               	xorwf	??_time_date_hex_terminator,w
  7381  1634  0472               	iorwf	??_time_date_hex_terminator+1,w
  7382  1635  1903               	btfsc	3,2
  7383                           
  7384                           ;math_src.c: 53:     val = 0x00;
  7385  1636  01F3               	clrf	time_date_hex_terminator@val
  7386                           
  7387                           ;math_src.c: 55:     return val;
  7388  1637  0873               	movf	time_date_hex_terminator@val,w
  7389  1638  0008               	return
  7390  1639                     __end_of_time_date_hex_terminator:	
  7391                           
  7392                           	psect	text34
  7393  0003                     __ptext34:	
  7394 ;; *************** function _time_date_delimiter *****************
  7395 ;; Defined at:
  7396 ;;		line 32 in file "math_src.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;  val             1    wreg     unsigned char 
  7399 ;;  hex             1    0[COMMON] unsigned char 
  7400 ;;  limiter         1    1[COMMON] unsigned char 
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;  val             1    4[COMMON] unsigned char 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      unsigned char 
  7405 ;; Registers used:
  7406 ;;		wreg, status,2, status,0
  7407 ;; Tracked objects:
  7408 ;;		On entry : 300/0
  7409 ;;		On exit  : 300/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7412 ;;      Params:         2       0       0       0       0
  7413 ;;      Locals:         1       0       0       0       0
  7414 ;;      Temps:          2       0       0       0       0
  7415 ;;      Totals:         5       0       0       0       0
  7416 ;;Total ram usage:        5 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_time_settings
  7422 ;;		_date_settings
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           
  7427                           ;psect for function _time_date_delimiter
  7428  0003                     _time_date_delimiter:	
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7432                           ;time_date_delimiter@val stored from wreg
  7433  0003  00F4               	movwf	time_date_delimiter@val
  7434                           
  7435                           ;math_src.c: 33:     if((val + '0') == limiter){
  7436  0004  0874               	movf	time_date_delimiter@val,w
  7437  0005  3E30               	addlw	48
  7438  0006  00F2               	movwf	??_time_date_delimiter
  7439  0007  3000               	movlw	0
  7440  0008  1803               	skipnc
  7441  0009  3001               	movlw	1
  7442  000A  00F3               	movwf	??_time_date_delimiter+1
  7443  000B  0871               	movf	time_date_delimiter@limiter,w
  7444  000C  0672               	xorwf	??_time_date_delimiter,w
  7445  000D  0473               	iorwf	??_time_date_delimiter+1,w
  7446  000E  1D03               	skipz
  7447  000F  2840               	goto	l3158
  7448                           
  7449                           ;math_src.c: 34:     val = hex;
  7450  0010  0870               	movf	time_date_delimiter@hex,w
  7451  0011  00F2               	movwf	??_time_date_delimiter
  7452  0012  0872               	movf	??_time_date_delimiter,w
  7453  0013  00F4               	movwf	time_date_delimiter@val
  7454                           
  7455                           ;math_src.c: 35:     stats=0;
  7456  0014  01B3               	clrf	_stats
  7457  0015  01B4               	clrf	_stats+1
  7458                           
  7459                           ;math_src.c: 36:     if(limiter == '9')
  7460  0016  3039               	movlw	57
  7461  0017  0671               	xorwf	time_date_delimiter@limiter,w
  7462  0018  1D03               	btfss	3,2
  7463  0019  281E               	goto	l3140
  7464                           
  7465                           ;math_src.c: 37:     prev_hex= 0x09;
  7466  001A  3009               	movlw	9
  7467  001B  00F2               	movwf	??_time_date_delimiter
  7468  001C  0872               	movf	??_time_date_delimiter,w
  7469  001D  00D2               	movwf	_prev_hex
  7470  001E                     l3140:	
  7471                           
  7472                           ;math_src.c: 38:     if(limiter == 'J')
  7473  001E  304A               	movlw	74
  7474  001F  0671               	xorwf	time_date_delimiter@limiter,w
  7475  0020  1D03               	btfss	3,2
  7476  0021  2826               	goto	l3144
  7477                           
  7478                           ;math_src.c: 39:         prev_hex = 0x19;
  7479  0022  3019               	movlw	25
  7480  0023  00F2               	movwf	??_time_date_delimiter
  7481  0024  0872               	movf	??_time_date_delimiter,w
  7482  0025  00D2               	movwf	_prev_hex
  7483  0026                     l3144:	
  7484                           
  7485                           ;math_src.c: 40:     if(limiter == 'Y')
  7486  0026  3059               	movlw	89
  7487  0027  0671               	xorwf	time_date_delimiter@limiter,w
  7488  0028  1D03               	btfss	3,2
  7489  0029  282E               	goto	l3148
  7490                           
  7491                           ;math_src.c: 41:         prev_hex = 0x29;
  7492  002A  3029               	movlw	41
  7493  002B  00F2               	movwf	??_time_date_delimiter
  7494  002C  0872               	movf	??_time_date_delimiter,w
  7495  002D  00D2               	movwf	_prev_hex
  7496  002E                     l3148:	
  7497                           
  7498                           ;math_src.c: 42:     if(limiter == 'j')
  7499  002E  306A               	movlw	106
  7500  002F  0671               	xorwf	time_date_delimiter@limiter,w
  7501  0030  1D03               	btfss	3,2
  7502  0031  2836               	goto	l3152
  7503                           
  7504                           ;math_src.c: 43:         prev_hex =0x39;
  7505  0032  3039               	movlw	57
  7506  0033  00F2               	movwf	??_time_date_delimiter
  7507  0034  0872               	movf	??_time_date_delimiter,w
  7508  0035  00D2               	movwf	_prev_hex
  7509  0036                     l3152:	
  7510                           
  7511                           ;math_src.c: 44:     if(limiter == 'z')
  7512  0036  307A               	movlw	122
  7513  0037  0671               	xorwf	time_date_delimiter@limiter,w
  7514  0038  1D03               	btfss	3,2
  7515  0039  283E               	goto	l3156
  7516                           
  7517                           ;math_src.c: 45:         prev_hex = 0x49;
  7518  003A  3049               	movlw	73
  7519  003B  00F2               	movwf	??_time_date_delimiter
  7520  003C  0872               	movf	??_time_date_delimiter,w
  7521  003D  00D2               	movwf	_prev_hex
  7522  003E                     l3156:	
  7523                           
  7524                           ;math_src.c: 46:     val--;
  7525  003E  3001               	movlw	1
  7526  003F  02F4               	subwf	time_date_delimiter@val,f
  7527  0040                     l3158:	
  7528                           
  7529                           ;math_src.c: 48:     return val;
  7530  0040  0874               	movf	time_date_delimiter@val,w
  7531  0041  0008               	return
  7532  0042                     __end_of_time_date_delimiter:	
  7533                           
  7534                           	psect	text35
  7535  17D8                     __ptext35:	
  7536 ;; *************** function _set_time *****************
  7537 ;; Defined at:
  7538 ;;		line 15 in file "clock_src.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  i               2    5[COMMON] int 
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 300/0
  7549 ;;		On exit  : 300/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7552 ;;      Params:         0       0       0       0       0
  7553 ;;      Locals:         2       0       0       0       0
  7554 ;;      Temps:          0       0       0       0       0
  7555 ;;      Totals:         2       0       0       0       0
  7556 ;;Total ram usage:        2 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    1
  7559 ;; This function calls:
  7560 ;;		_time_write_1
  7561 ;; This function is called by:
  7562 ;;		_main
  7563 ;;		_time_settings
  7564 ;;		_date_settings
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           
  7569                           ;psect for function _set_time
  7570  17D8                     _set_time:	
  7571                           
  7572                           ;clock_src.c: 17:    int i;;clock_src.c: 18:    RB5=1;
  7573                           
  7574                           ;incstack = 0
  7575                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7576  17D8  1686               	bsf	6,5	;volatile
  7577                           
  7578                           ;clock_src.c: 19:    time_write_1(0xbe);
  7579  17D9  30BE               	movlw	190
  7580  17DA  160A  118A  27B2  160A  118A  	fcall	_time_write_1
  7581                           
  7582                           ;clock_src.c: 20:    for(i=0;i<8;i++)
  7583  17DF  01F5               	clrf	set_time@i
  7584  17E0  01F6               	clrf	set_time@i+1
  7585  17E1                     l2918:	
  7586                           
  7587                           ;clock_src.c: 21:      {;clock_src.c: 22:        time_write_1(table[i]);
  7588  17E1  0875               	movf	set_time@i,w
  7589  17E2  3EA0               	addlw	(low (_table| 0))& (0+255)
  7590  17E3  0084               	movwf	4
  7591  17E4  1383               	bcf	3,7	;select IRP bank1
  7592  17E5  0800               	movf	0,w
  7593  17E6  160A  118A  27B2  160A  118A  	fcall	_time_write_1
  7594                           
  7595                           ;clock_src.c: 23:      }
  7596  17EB  3001               	movlw	1
  7597  17EC  07F5               	addwf	set_time@i,f
  7598  17ED  1803               	skipnc
  7599  17EE  0AF6               	incf	set_time@i+1,f
  7600  17EF  3000               	movlw	0
  7601  17F0  07F6               	addwf	set_time@i+1,f
  7602  17F1  0876               	movf	set_time@i+1,w
  7603  17F2  3A80               	xorlw	128
  7604  17F3  00FF               	movwf	127
  7605  17F4  3080               	movlw	128
  7606  17F5  027F               	subwf	127,w
  7607  17F6  1D03               	skipz
  7608  17F7  2FFA               	goto	u1625
  7609  17F8  3008               	movlw	8
  7610  17F9  0275               	subwf	set_time@i,w
  7611  17FA                     u1625:	
  7612  17FA  1C03               	skipc
  7613  17FB  2FE1               	goto	l2918
  7614                           
  7615                           ;clock_src.c: 24:    RB5=0;
  7616  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  7617  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  7618  17FE  1286               	bcf	6,5	;volatile
  7619  17FF  0008               	return
  7620  1800                     __end_of_set_time:	
  7621                           
  7622                           	psect	text36
  7623  17B2                     __ptext36:	
  7624 ;; *************** function _time_write_1 *****************
  7625 ;; Defined at:
  7626 ;;		line 116 in file "clock_src.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  time_tx         1    wreg     unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  time_tx         1    4[COMMON] unsigned char 
  7631 ;;  j               2    2[COMMON] int 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0, btemp+1
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 300/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7641 ;;      Params:         0       0       0       0       0
  7642 ;;      Locals:         3       0       0       0       0
  7643 ;;      Temps:          2       0       0       0       0
  7644 ;;      Totals:         5       0       0       0       0
  7645 ;;Total ram usage:        5 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_ds1302_init
  7651 ;;		_set_time
  7652 ;;		_get_time
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           
  7657                           ;psect for function _time_write_1
  7658  17B2                     _time_write_1:	
  7659                           
  7660                           ;incstack = 0
  7661                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  7662                           ;time_write_1@time_tx stored from wreg
  7663  17B2  00F4               	movwf	time_write_1@time_tx
  7664                           
  7665                           ;clock_src.c: 116: void time_write_1(unsigned char time_tx);clock_src.c: 117: {;clock_sr
      +                          c.c: 118:     int j;;clock_src.c: 119:     for(j=0;j<8;j++)
  7666  17B3  01F2               	clrf	time_write_1@j
  7667  17B4  01F3               	clrf	time_write_1@j+1
  7668  17B5                     l374:	
  7669                           
  7670                           ;clock_src.c: 120:    {;clock_src.c: 121:         RB4=0;
  7671  17B5  1283               	bcf	3,5	;RP0=0, select bank0
  7672  17B6  1303               	bcf	3,6	;RP1=0, select bank0
  7673  17B7  1206               	bcf	6,4	;volatile
  7674                           
  7675                           ;clock_src.c: 122:         RB0=0;
  7676  17B8  1006               	bcf	6,0	;volatile
  7677                           
  7678                           ;clock_src.c: 123:         if(time_tx&0x01)
  7679  17B9  1874               	btfsc	time_write_1@time_tx,0
  7680                           
  7681                           ;clock_src.c: 124:           {;clock_src.c: 125:             RB4=1;
  7682  17BA  1606               	bsf	6,4	;volatile
  7683                           
  7684                           ;clock_src.c: 127:         time_tx=time_tx>>1;
  7685  17BB  0874               	movf	time_write_1@time_tx,w
  7686  17BC  00F0               	movwf	??_time_write_1
  7687  17BD  1003               	clrc
  7688  17BE  0C70               	rrf	??_time_write_1,w
  7689  17BF  00F1               	movwf	??_time_write_1+1
  7690  17C0  0871               	movf	??_time_write_1+1,w
  7691  17C1  00F4               	movwf	time_write_1@time_tx
  7692                           
  7693                           ;clock_src.c: 128:         RB0=1;
  7694  17C2  1406               	bsf	6,0	;volatile
  7695                           
  7696                           ;clock_src.c: 129:     }
  7697  17C3  3001               	movlw	1
  7698  17C4  07F2               	addwf	time_write_1@j,f
  7699  17C5  1803               	skipnc
  7700  17C6  0AF3               	incf	time_write_1@j+1,f
  7701  17C7  3000               	movlw	0
  7702  17C8  07F3               	addwf	time_write_1@j+1,f
  7703  17C9  0873               	movf	time_write_1@j+1,w
  7704  17CA  3A80               	xorlw	128
  7705  17CB  00FF               	movwf	127
  7706  17CC  3080               	movlw	128
  7707  17CD  027F               	subwf	127,w
  7708  17CE  1D03               	skipz
  7709  17CF  2FD2               	goto	u1615
  7710  17D0  3008               	movlw	8
  7711  17D1  0272               	subwf	time_write_1@j,w
  7712  17D2                     u1615:	
  7713  17D2  1C03               	skipc
  7714  17D3  2FB5               	goto	l374
  7715                           
  7716                           ;clock_src.c: 130:       RB0=0;
  7717  17D4  1283               	bcf	3,5	;RP0=0, select bank0
  7718  17D5  1303               	bcf	3,6	;RP1=0, select bank0
  7719  17D6  1006               	bcf	6,0	;volatile
  7720  17D7  0008               	return
  7721  17D8                     __end_of_time_write_1:	
  7722                           
  7723                           	psect	text37
  7724  178E                     __ptext37:	
  7725 ;; *************** function _incrementor *****************
  7726 ;; Defined at:
  7727 ;;		line 10 in file "math_src.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  upper_val       2    0[BANK0 ] int 
  7730 ;;  lower_val       2    2[BANK0 ] int 
  7731 ;;  z               1    4[BANK0 ] unsigned char 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;		None
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      unsigned char 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, pclath, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 300/0
  7740 ;;		On exit  : 300/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7743 ;;      Params:         0       5       0       0       0
  7744 ;;      Locals:         0       0       0       0       0
  7745 ;;      Temps:          2       0       0       0       0
  7746 ;;      Totals:         2       5       0       0       0
  7747 ;;Total ram usage:        7 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    2
  7750 ;; This function calls:
  7751 ;;		_modulus_func
  7752 ;; This function is called by:
  7753 ;;		_thermometer_threshhold_settings
  7754 ;;		_time_settings
  7755 ;;		_date_settings
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _incrementor
  7761  178E                     _incrementor:	
  7762                           
  7763                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  7764                           
  7765                           ;incstack = 0
  7766                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  7767  178E  0864               	movf	incrementor@lower_val,w
  7768  178F  3E30               	addlw	48
  7769  1790  00FB               	movwf	??_incrementor
  7770  1791  0865               	movf	incrementor@lower_val+1,w
  7771  1792  1803               	skipnc
  7772  1793  3E01               	addlw	1
  7773  1794  3E00               	addlw	0
  7774  1795  00FC               	movwf	??_incrementor+1
  7775  1796  0866               	movf	incrementor@z,w
  7776  1797  067B               	xorwf	??_incrementor,w
  7777  1798  047C               	iorwf	??_incrementor+1,w
  7778  1799  1D03               	skipz
  7779  179A  2FB0               	goto	l3108
  7780                           
  7781                           ;math_src.c: 12:      upper_val++;
  7782  179B  3001               	movlw	1
  7783  179C  07E2               	addwf	incrementor@upper_val,f
  7784  179D  1803               	skipnc
  7785  179E  0AE3               	incf	incrementor@upper_val+1,f
  7786  179F  3000               	movlw	0
  7787  17A0  07E3               	addwf	incrementor@upper_val+1,f
  7788                           
  7789                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  7790  17A1  0863               	movf	incrementor@upper_val+1,w
  7791  17A2  00F8               	movwf	modulus_func@x+1
  7792  17A3  0862               	movf	incrementor@upper_val,w
  7793  17A4  00F7               	movwf	modulus_func@x
  7794  17A5  300A               	movlw	10
  7795  17A6  00F9               	movwf	modulus_func@y
  7796  17A7  3000               	movlw	0
  7797  17A8  00FA               	movwf	modulus_func@y+1
  7798  17A9  160A  118A  2648   	fcall	_modulus_func
  7799  17AC  0878               	movf	?_modulus_func+1,w
  7800  17AD  00E3               	movwf	incrementor@upper_val+1
  7801  17AE  0877               	movf	?_modulus_func,w
  7802  17AF  00E2               	movwf	incrementor@upper_val
  7803  17B0                     l3108:	
  7804                           
  7805                           ;math_src.c: 15:      return upper_val;
  7806  17B0  0862               	movf	incrementor@upper_val,w
  7807  17B1  0008               	return
  7808  17B2                     __end_of_incrementor:	
  7809                           
  7810                           	psect	text38
  7811  1648                     __ptext38:	
  7812 ;; *************** function _modulus_func *****************
  7813 ;; Defined at:
  7814 ;;		line 5 in file "math_src.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;  x               2    7[COMMON] int 
  7817 ;;  y               2    9[COMMON] int 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;		None
  7820 ;; Return value:  Size  Location     Type
  7821 ;;                  2    7[COMMON] int 
  7822 ;; Registers used:
  7823 ;;		wreg, status,2, status,0, pclath, cstack
  7824 ;; Tracked objects:
  7825 ;;		On entry : 300/0
  7826 ;;		On exit  : 300/0
  7827 ;;		Unchanged: 300/0
  7828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7829 ;;      Params:         4       0       0       0       0
  7830 ;;      Locals:         0       0       0       0       0
  7831 ;;      Temps:          0       0       0       0       0
  7832 ;;      Totals:         4       0       0       0       0
  7833 ;;Total ram usage:        4 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; Hardware stack levels required when called:    1
  7836 ;; This function calls:
  7837 ;;		___awmod
  7838 ;; This function is called by:
  7839 ;;		_main
  7840 ;;		_thermometer_threshhold_settings
  7841 ;;		_time_settings
  7842 ;;		_date_settings
  7843 ;;		_incrementor
  7844 ;;		_decrementor
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           
  7849                           ;psect for function _modulus_func
  7850  1648                     _modulus_func:	
  7851                           
  7852                           ;math_src.c: 6:     x = x % y;
  7853                           
  7854                           ;incstack = 0
  7855                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  7856  1648  087A               	movf	modulus_func@y+1,w
  7857  1649  00F1               	movwf	___awmod@divisor+1
  7858  164A  0879               	movf	modulus_func@y,w
  7859  164B  00F0               	movwf	___awmod@divisor
  7860  164C  0878               	movf	modulus_func@x+1,w
  7861  164D  00F3               	movwf	___awmod@dividend+1
  7862  164E  0877               	movf	modulus_func@x,w
  7863  164F  00F2               	movwf	___awmod@dividend
  7864  1650  120A  158A  2209   	fcall	___awmod
  7865  1653  0871               	movf	?___awmod+1,w
  7866  1654  00F8               	movwf	modulus_func@x+1
  7867  1655  0870               	movf	?___awmod,w
  7868  1656  00F7               	movwf	modulus_func@x
  7869                           
  7870                           ;math_src.c: 7:     return x;
  7871  1657  0008               	return
  7872  1658                     __end_of_modulus_func:	
  7873                           
  7874                           	psect	text39
  7875  0A09                     __ptext39:	
  7876 ;; *************** function ___awmod *****************
  7877 ;; Defined at:
  7878 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  divisor         2    0[COMMON] int 
  7881 ;;  dividend        2    2[COMMON] int 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  sign            1    6[COMMON] unsigned char 
  7884 ;;  counter         1    5[COMMON] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  2    0[COMMON] int 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0
  7889 ;; Tracked objects:
  7890 ;;		On entry : 300/0
  7891 ;;		On exit  : 300/0
  7892 ;;		Unchanged: 300/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7894 ;;      Params:         4       0       0       0       0
  7895 ;;      Locals:         2       0       0       0       0
  7896 ;;      Temps:          1       0       0       0       0
  7897 ;;      Totals:         7       0       0       0       0
  7898 ;;Total ram usage:        7 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		_modulus_func
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           
  7908                           ;psect for function ___awmod
  7909  0A09                     ___awmod:	
  7910                           
  7911                           ;incstack = 0
  7912                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7913  0A09  01F6               	clrf	___awmod@sign
  7914  0A0A  1FF3               	btfss	___awmod@dividend+1,7
  7915  0A0B  2A13               	goto	l2840
  7916  0A0C  09F2               	comf	___awmod@dividend,f
  7917  0A0D  09F3               	comf	___awmod@dividend+1,f
  7918  0A0E  0AF2               	incf	___awmod@dividend,f
  7919  0A0F  1903               	skipnz
  7920  0A10  0AF3               	incf	___awmod@dividend+1,f
  7921  0A11  01F6               	clrf	___awmod@sign
  7922  0A12  0AF6               	incf	___awmod@sign,f
  7923  0A13                     l2840:	
  7924  0A13  1FF1               	btfss	___awmod@divisor+1,7
  7925  0A14  2A1A               	goto	l2844
  7926  0A15  09F0               	comf	___awmod@divisor,f
  7927  0A16  09F1               	comf	___awmod@divisor+1,f
  7928  0A17  0AF0               	incf	___awmod@divisor,f
  7929  0A18  1903               	skipnz
  7930  0A19  0AF1               	incf	___awmod@divisor+1,f
  7931  0A1A                     l2844:	
  7932  0A1A  0870               	movf	___awmod@divisor,w
  7933  0A1B  0471               	iorwf	___awmod@divisor+1,w
  7934  0A1C  1903               	btfsc	3,2
  7935  0A1D  2A47               	goto	l2862
  7936  0A1E  01F5               	clrf	___awmod@counter
  7937  0A1F  0AF5               	incf	___awmod@counter,f
  7938  0A20                     l2852:	
  7939  0A20  1BF1               	btfsc	___awmod@divisor+1,7
  7940  0A21  2A2E               	goto	l2854
  7941  0A22  3001               	movlw	1
  7942  0A23                     u1515:	
  7943  0A23  1003               	clrc
  7944  0A24  0DF0               	rlf	___awmod@divisor,f
  7945  0A25  0DF1               	rlf	___awmod@divisor+1,f
  7946  0A26  3EFF               	addlw	-1
  7947  0A27  1D03               	skipz
  7948  0A28  2A23               	goto	u1515
  7949  0A29  3001               	movlw	1
  7950  0A2A  00F4               	movwf	??___awmod
  7951  0A2B  0874               	movf	??___awmod,w
  7952  0A2C  07F5               	addwf	___awmod@counter,f
  7953  0A2D  2A20               	goto	l2852
  7954  0A2E                     l2854:	
  7955  0A2E  0871               	movf	___awmod@divisor+1,w
  7956  0A2F  0273               	subwf	___awmod@dividend+1,w
  7957  0A30  1D03               	skipz
  7958  0A31  2A34               	goto	u1535
  7959  0A32  0870               	movf	___awmod@divisor,w
  7960  0A33  0272               	subwf	___awmod@dividend,w
  7961  0A34                     u1535:	
  7962  0A34  1C03               	skipc
  7963  0A35  2A3C               	goto	l2858
  7964  0A36  0870               	movf	___awmod@divisor,w
  7965  0A37  02F2               	subwf	___awmod@dividend,f
  7966  0A38  0871               	movf	___awmod@divisor+1,w
  7967  0A39  1C03               	skipc
  7968  0A3A  03F3               	decf	___awmod@dividend+1,f
  7969  0A3B  02F3               	subwf	___awmod@dividend+1,f
  7970  0A3C                     l2858:	
  7971  0A3C  3001               	movlw	1
  7972  0A3D                     u1545:	
  7973  0A3D  1003               	clrc
  7974  0A3E  0CF1               	rrf	___awmod@divisor+1,f
  7975  0A3F  0CF0               	rrf	___awmod@divisor,f
  7976  0A40  3EFF               	addlw	-1
  7977  0A41  1D03               	skipz
  7978  0A42  2A3D               	goto	u1545
  7979  0A43  3001               	movlw	1
  7980  0A44  02F5               	subwf	___awmod@counter,f
  7981  0A45  1D03               	btfss	3,2
  7982  0A46  2A2E               	goto	l2854
  7983  0A47                     l2862:	
  7984  0A47  0876               	movf	___awmod@sign,w
  7985  0A48  1903               	btfsc	3,2
  7986  0A49  2A4F               	goto	l2866
  7987  0A4A  09F2               	comf	___awmod@dividend,f
  7988  0A4B  09F3               	comf	___awmod@dividend+1,f
  7989  0A4C  0AF2               	incf	___awmod@dividend,f
  7990  0A4D  1903               	skipnz
  7991  0A4E  0AF3               	incf	___awmod@dividend+1,f
  7992  0A4F                     l2866:	
  7993  0A4F  0873               	movf	___awmod@dividend+1,w
  7994  0A50  00F1               	movwf	?___awmod+1
  7995  0A51  0872               	movf	___awmod@dividend,w
  7996  0A52  00F0               	movwf	?___awmod
  7997  0A53  0008               	return
  7998  0A54                     __end_of___awmod:	
  7999                           
  8000                           	psect	text40
  8001  1669                     __ptext40:	
  8002 ;; *************** function _button_delay *****************
  8003 ;; Defined at:
  8004 ;;		line 586 in file "Button_src.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;  i               2    0[COMMON] int 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, btemp+1
  8013 ;; Tracked objects:
  8014 ;;		On entry : 300/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8018 ;;      Params:         0       0       0       0       0
  8019 ;;      Locals:         2       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0
  8021 ;;      Totals:         2       0       0       0       0
  8022 ;;Total ram usage:        2 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		_set_beep_threshhold
  8028 ;;		_thermometer_threshhold_settings
  8029 ;;		_time_settings
  8030 ;;		_date_settings
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           
  8035                           ;psect for function _button_delay
  8036  1669                     _button_delay:	
  8037                           
  8038                           ;Button_src.c: 587:     for(int i=0;i<10000;i++);
  8039                           
  8040                           ;incstack = 0
  8041                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8042  1669  01F0               	clrf	button_delay@i
  8043  166A  01F1               	clrf	button_delay@i+1
  8044  166B                     l3098:	
  8045  166B  3001               	movlw	1
  8046  166C  07F0               	addwf	button_delay@i,f
  8047  166D  1803               	skipnc
  8048  166E  0AF1               	incf	button_delay@i+1,f
  8049  166F  3000               	movlw	0
  8050  1670  07F1               	addwf	button_delay@i+1,f
  8051  1671  0871               	movf	button_delay@i+1,w
  8052  1672  3A80               	xorlw	128
  8053  1673  00FF               	movwf	127
  8054  1674  30A7               	movlw	167
  8055  1675  027F               	subwf	127,w
  8056  1676  1D03               	skipz
  8057  1677  2E7A               	goto	u1725
  8058  1678  3010               	movlw	16
  8059  1679  0270               	subwf	button_delay@i,w
  8060  167A                     u1725:	
  8061  167A  1803               	btfsc	3,0
  8062  167B  0008               	return
  8063  167C  2E6B               	goto	l3098
  8064  167D                     __end_of_button_delay:	
  8065  007E                     btemp	set	126	;btemp
  8066  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      78
    BANK1            80      0       8
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   38963
                                             10 BANK0      2     2      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   10544
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  6     2      4     264
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  6     2      4     286
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   10544
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  5     3      2    3240
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       8       7       10.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      64      12        0.0%
ABS                  0      0      64       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 11 11:13:05 2019

                                       _a 0057                                         _b 0056  
                                       _c 0055                                         _p 002F  
                                       _t 0043                                         _w 0041  
                                       _x 003F                                         _y 003D  
                                       _z 003B                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005E                                        _TZ 005F  
                                      _ge 005C                                        _wd 0045  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 16E9  
                           ?_display_date 0070                                       l321 161D  
                                     l600 0FF5                                       l610 015F  
                                     l380 0857                                       l621 02DD  
                                     l374 17B5                                       l630 03DD  
                                     l615 01CC                                       l607 00F1  
                                     l632 0443                                       l624 036A  
                                     l616 01D4                                       l633 044B  
                                     l609 0157                                       l651 0682  
                                     l644 053D                                       l653 06B3  
                                     l645 0545                                       l638 04B7  
                                     l639 04BF                                       l594 0F4D  
                                     l599 0FB0                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 0060  
                           ?_display_temp 0070                                       _TLV 0061  
                                     _shi 005D                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0067  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1144 1765                                      l3012 08B8  
                                    l3108 17B0                                      l3140 001E  
                                    l4102 004A                                      l3222 09B5  
                                    l3214 0991                                      l3118 0823  
                                    l3152 0036                                      l3144 0026  
                                    l4120 00B8                                      l4112 008A  
                                    l4104 005C                                      l3216 099F  
                                    l3240 0895                                      l3064 1693  
                                    l3226 09C0                                      l3082 0868  
                                    l4050 09E8                                      l3156 003E  
                                    l3148 002E                                      l4124 00CF  
                                    l4116 00A1                                      l4108 0073  
                                    l3172 172E                                      l3244 08A3  
                                    l3500 0F03                                      l3158 0040  
                                    l3174 1737                                      l3238 0887  
                                    l3342 0C1F                                      l3334 0C0B  
                                    l4214 0D76                                      l3416 0A5E  
                                    l3184 1746                                      l3192 174E  
                                    l3248 08AE                                      l4048 09DB  
                                    l4144 0CAD                                      l3098 166B  
                                    l3346 0C29                                      l3338 0C15  
                                    l3530 0F39                                      l3620 0488  
                                    l3630 04A7                                      l3366 0830  
                                    l4086 1702                                      l2840 0A13  
                                    l3616 047F                                      l3472 0EA4  
                                    l3650 0504                                      l3378 0AF4  
                                    l3554 0FBD                                      l2852 0A20  
                                    l2844 0A1A                                      l3628 04A2  
                                    l2854 0A2E                                      l2862 0A47  
                                    l2918 17E1                                      l3822 0792  
                                    l3726 0679                                      l3662 0528  
                                    l3654 050D                                      l3664 052D  
                                    l2960 0910                                      l3920 0211  
                                    l2866 0A4F                                      l2858 0A3C  
                                    l2882 167F                                      l3762 0709  
                                    l3682 0579                                      l2962 08E9  
                                    l2970 0920                                      l3930 0235  
                                    l3916 0208                                      l3932 023A  
                                    l3694 058F                                      l3686 0582  
                                    l2958 090F                                      l2990 0935  
                                    l3792 074C                                      l3696 0594  
                                    l2888 1621                                      l3884 0193  
                                    l3992 032D                                      l3896 01B7  
                                    l3888 019C                            ?_display_clock 0070  
                                    l3898 01BC                                      u2005 08A4  
                                    u2025 0BC3                                      u2035 0BCE  
                                    u2045 0BDB                                      u1515 0A23  
                                    u2155 0F4A                                      u1535 0A34  
                                    u1615 17D2                                      u2095 084B  
                                    u1545 0A3D                                      u1625 17FA  
                                    u1715 0878                                      u1725 167A  
                                    u1575 168E                                      u1905 0994  
                                    u1925 09A0                                      u2805 09E6  
                                    u1935 09AC                                      u1695 16A2  
                                    u2815 095A                                      u1865 1751  
                                    u1945 09B6                                      u2825 0965  
                                    u1975 088A                                      u2785 09CE  
                                    u2945 0D8B                                      u1995 089B  
                                    u2795 09D9               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0C87  
                                    _init 15F7                                      _var1 0049  
                                    _var2 0048                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0074                              ?_incrementor 0062  
             __size_of_initialise_buttons 0016                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 1748  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 0A54  
                         __end_of___lbmod 176B                      __end_of_delay_screen 1691  
                         __end_of___lwdiv 09C5                           __end_of___lwmod 08B3  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 002D                                     _table 00A0  
                                   _stats 0033                                     main@i 006C  
                          write_byte@temp 0076                       _set_lower_threshold 09C5  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                    __size_of_decrementor 0024                                     wtemp0 007E  
                         ___lbdiv@divisor 0070                           ___lbdiv@counter 0073  
                           ??_ds1302_init 0075                           __initialization 07E8  
                            __end_of_main 0DAA                              __end_of_init 15FF  
                   __end_of_date_settings 07E8                      ?_set_lower_threshold 0073  
                                  ??_main 007E                                    ??_init 0070  
                    incrementor@lower_val 0064                           ??_display_clock 0073  
                                  _ADCON1 009F                                    _TRISA0 0428  
                                  _TRISB4 0434                                    _TRISE0 0448  
                           ?_button_delay 0070                              ?_reset_alarm 0070  
                    incrementor@upper_val 0062                          __end_of_lcd_init 178E  
                        __end_of_get_temp 0C87                          __end_of_get_time 0851  
                                  _baifen 005A                                 ??___lbdiv 0071  
                               ??___awmod 0074                                    _delay2 1691  
                               ??___lbmod 0071                     ??_set_lower_threshold 0077  
                                  _d_type 0031                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 1648  
                     _set_upper_threshold 0951                                    _table1 0020  
                         ___awmod@divisor 0070                                    _shifen 005B  
                                  _wanfen 0058                           ___awmod@counter 0075  
                    __size_of_display_day 00A3                              ?_time_read_1 0070  
                     time_write_1@time_tx 0074                             display_date@i 0075  
                        __end_of_set_time 1800                        reset_temp@presence 0075  
                        ___lbdiv@dividend 0072                      ?_set_upper_threshold 0073  
                         ___lbmod@divisor 0070                   __end_of__initialization 07FC  
                         ___lbmod@counter 0075                            ??_button_delay 0070  
            __size_of_time_date_delimiter 003F                      __end_of_display_date 0B80  
                    __end_of_display_temp 1727                            __pcstackCOMMON 0070  
                            __pidataBANK1 1607                     __size_of_delay_screen 0014  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                                __pbssBANK0 0020  
                            _delay_screen 167D                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1639  
                              _delay_temp 161C                                __pmaintext 0C87  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0066  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 03CF                                 ?_get_time 0070  
                      __size_of_write_cmd 0017                                 ?_set_time 0070  
                    __size_of_reset_alarm 000D                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 16BB  
                _time_date_hex_terminator 162A                                   ___lbdiv 1727  
                                 ___awmod 0A09                                   ___lbmod 1748  
                         __size_of_delay2 0014                                   ___lwdiv 0989  
                                 ___lwmod 0881                                   _day_hex 0054  
                                 _day_low 0039                                   __ptext1 00E5  
                                 __ptext2 0DAA                                   __ptext3 0801  
                                 __ptext4 0951                                   __ptext5 09C5  
                                 __ptext6 16E9                                   __ptext7 160F  
                                 __ptext8 176B                                   __ptext9 16A5  
                    __end_of_button_delay 167D                                   delay2@i 0070  
                       __end_of_init_temp 15F7                          ___awmod@dividend 0072  
                       __end_of_read_byte 08E7                                   _qianfen 0059  
                    __size_of_time_read_1 0030                                   _lower_t 004C  
             __end_of_set_beep_threshhold 1706              set_upper_threshold@upper_val 0073  
                   __size_of_display_date 0096                                   clrloop0 1600  
                              ??_lcd_init 0073                                   _upper_t 004D  
                           ??_decrementor 007B                                ??_get_temp 0062  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 08E7  
                              ??_set_time 0075                       _time_date_delimiter 0003  
                    decrementor@lower_val 0062                              _display_date 0AEA  
                            _display_temp 1706                         __end_of_write_cmd 16E9  
                        ___lbmod@dividend 0074                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 0AEA  
                  __size_of_date_settings 0419                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                      decrementor@upper_val 0064  
                          ??_time_write_1 0070               __end_of_set_lower_threshold 0A09  
                     __end_of_decrementor 0825                             ??_display_day 0075  
                          __end_of_delay2 16A5                                _write_char 16BB  
                              _write_byte 091B                            _var_night_high 0029  
                     start_initialization 07E8                             delay_screen@i 0070  
                     __size_of_delay_temp 000E                      __end_of_modulus_func 1658  
                   ??_time_date_delimiter 0072                              ?_ds1302_init 0070  
                             ?_reset_temp 0070                             ??_incrementor 007B  
                              init_fetch0 1658                                  ??_delay2 0070  
                   __size_of_button_delay 0014                             _date_settings 03CF  
                             __pdataBANK1 00A0                                read_byte@i 0076  
                              read_byte@j 0047               __end_of_set_upper_threshold 0989  
                     __end_of_display_day 00E5                                 ___latbits 0002  
                           __pcstackBANK0 0062                               _decrementor 0801  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 1669  
                        ___lwdiv@dividend 0078                               _day_counter 0027  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                               ?_write_char 0070  
                             ?_write_byte 0070                       __end_of_incrementor 17B2  
                    __end_of_time_write_1 17D8                        _initialise_buttons 16A5  
                         _day_of_week_var 0035                       __size_of_reset_temp 0034  
                        ___lwdiv@quotient 007B                                 _init_temp 15F2  
                               _read_byte 08B3                              decrementor@z 0066  
                     ?_initialise_buttons 0070                                 clear_ram0 15FF  
                           ??_reset_alarm 0070                            _prev_hex_hours 004F  
                            ??_delay_temp 0071                               _display_day 0042  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 0256  
       ??_thermometer_threshhold_settings 0067          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0DAA                      ??_initialise_buttons 0070  
                  __size_of_time_settings 02EA          thermometer_threshhold_settings@i 006A  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 162A  
                               _write_cmd 16D2                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 002B  
                         _buzzer_watcher1 004A                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0067                      __size_of_ds1302_init 000F  
                             _incrementor 178E                              _modulus_func 1648  
                     __end_of_reset_alarm 161C                          __size_of___lbdiv 0021  
                        __size_of___awmod 004B                          __size_of___lbmod 0023  
                        __size_of___lwdiv 003C                          __size_of___lwmod 0032  
                                _day_high 0037                           ___lwdiv@divisor 0076  
                         ___lwdiv@counter 007D                                  __ptext10 15F2  
                                __ptext11 15F7                                  __ptext20 0881  
                                __ptext12 0825                                  __ptext21 0989  
                                __ptext13 0851                                  __ptext30 16D2  
                                __ptext22 1748                                  __ptext14 0B80  
                                __ptext31 16BB                                  __ptext23 1727  
                                __ptext15 091B                                  __ptext40 1669  
                                __ptext32 167D                                  __ptext24 1639  
                                __ptext16 08E7                                  __ptext33 162A  
                                __ptext25 1706                                  __ptext17 08B3  
                                __ptext34 0003                                  __ptext26 0042  
                                __ptext18 161C                                  __ptext35 17D8  
                                __ptext27 0AEA                                  __ptext19 1691  
                                __ptext36 17B2                                  __ptext28 0A54  
                                __ptext37 178E                                  __ptext29 03CF  
                                __ptext38 1648                                  __ptext39 0A09  
                     __end_of_time_read_1 0881                                ?_write_cmd 0070  
                                _lcd_init 176B                                  _get_temp 0B80  
                                _get_time 0825                             _time_settings 00E5  
        __end_of_time_date_hex_terminator 1639                             __size_of_main 0123  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0053                                 set_time@i 0075  
                           _prev_hex_mins 004E                             _prev_hex_year 0050  
                            ??_reset_temp 0074                                  _set_time 17D8  
                                _prev_hex 0052                time_date_delimiter@limiter 0071  
            __size_of_set_lower_threshold 0044                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 0096  
                          _buzzer_watcher 004B                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0042  
                                init_ram0 165C                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 091B  
                             ??_read_byte 0074                            ?_time_settings 0070  
                            ?_decrementor 0062                          ___lwmod@dividend 0072  
                          ??_delay_screen 0070                               _reset_alarm 160F  
                            _time_write_1 17B2                              _prev_hex_day 0051  
                            ??_write_char 0072                              ??_write_byte 0074  
                              _OPTION_REG 0081                               _time_read_1 0851  
                            time_read_1@j 0072                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0075                               ??_write_cmd 0072  
            __size_of_set_upper_threshold 0038                             _display_clock 0A54  
                           time_write_1@j 0072                        __end_of_write_char 16D2  
                      __end_of_write_byte 0951  
