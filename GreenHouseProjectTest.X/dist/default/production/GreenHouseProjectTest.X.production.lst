

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Dec 10 23:02:10 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.10
    56                           ; Generated 31/07/2019 GMT
    57                           ; 
    58                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F877A Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0098                     	;# 
   258  0099                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  000E                     	;# 
   285  000F                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0013                     	;# 
   290  0014                     	;# 
   291  0015                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001D                     	;# 
   302  001E                     	;# 
   303  001F                     	;# 
   304  0081                     	;# 
   305  0085                     	;# 
   306  0086                     	;# 
   307  0087                     	;# 
   308  0088                     	;# 
   309  0089                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0000                     	;# 
   330  0001                     	;# 
   331  0002                     	;# 
   332  0003                     	;# 
   333  0004                     	;# 
   334  0005                     	;# 
   335  0006                     	;# 
   336  0007                     	;# 
   337  0008                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000D                     	;# 
   343  000E                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0014                     	;# 
   351  0015                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001D                     	;# 
   362  001E                     	;# 
   363  001F                     	;# 
   364  0081                     	;# 
   365  0085                     	;# 
   366  0086                     	;# 
   367  0087                     	;# 
   368  0088                     	;# 
   369  0089                     	;# 
   370  008C                     	;# 
   371  008D                     	;# 
   372  008E                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  000E                     	;# 
   405  000F                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001D                     	;# 
   422  001E                     	;# 
   423  001F                     	;# 
   424  0081                     	;# 
   425  0085                     	;# 
   426  0086                     	;# 
   427  0087                     	;# 
   428  0088                     	;# 
   429  0089                     	;# 
   430  008C                     	;# 
   431  008D                     	;# 
   432  008E                     	;# 
   433  0091                     	;# 
   434  0092                     	;# 
   435  0093                     	;# 
   436  0094                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000D                     	;# 
   463  000E                     	;# 
   464  000E                     	;# 
   465  000F                     	;# 
   466  0010                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0015                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001B                     	;# 
   480  001C                     	;# 
   481  001D                     	;# 
   482  001E                     	;# 
   483  001F                     	;# 
   484  0081                     	;# 
   485  0085                     	;# 
   486  0086                     	;# 
   487  0087                     	;# 
   488  0088                     	;# 
   489  0089                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  010F                     	;# 
   507  018C                     	;# 
   508  018D                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  000E                     	;# 
   525  000F                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0014                     	;# 
   531  0015                     	;# 
   532  0015                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001B                     	;# 
   540  001C                     	;# 
   541  001D                     	;# 
   542  001E                     	;# 
   543  001F                     	;# 
   544  0081                     	;# 
   545  0085                     	;# 
   546  0086                     	;# 
   547  0087                     	;# 
   548  0088                     	;# 
   549  0089                     	;# 
   550  008C                     	;# 
   551  008D                     	;# 
   552  008E                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0094                     	;# 
   557  0098                     	;# 
   558  0099                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  010F                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  000E                     	;# 
   585  000F                     	;# 
   586  0010                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0014                     	;# 
   591  0015                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0017                     	;# 
   595  0018                     	;# 
   596  0019                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  0081                     	;# 
   605  0085                     	;# 
   606  0086                     	;# 
   607  0087                     	;# 
   608  0088                     	;# 
   609  0089                     	;# 
   610  008C                     	;# 
   611  008D                     	;# 
   612  008E                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0094                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629                           
   630                           	psect	idataBANK0
   631  1631                     __pidataBANK0:	
   632                           
   633                           ;initializer for _table
   634  1631  3400               	retlw	0
   635  1632  3400               	retlw	0
   636  1633  3440               	retlw	64
   637  1634  3412               	retlw	18
   638  1635  3412               	retlw	18
   639  1636  3406               	retlw	6
   640  1637  3419               	retlw	25
   641  1638  3400               	retlw	0
   642  0009                     _PORTE	set	9
   643  0008                     _PORTD	set	8
   644  003E                     _RC6	set	62
   645  003F                     _RC7	set	63
   646  003C                     _RC4	set	60
   647  003B                     _RC3	set	59
   648  003A                     _RC2	set	58
   649  0039                     _RC1	set	57
   650  0038                     _RC0	set	56
   651  004A                     _RE2	set	74
   652  0034                     _RB4	set	52
   653  0031                     _RB1	set	49
   654  0035                     _RB5	set	53
   655  0030                     _RB0	set	48
   656  0048                     _RE0	set	72
   657  002B                     _RA3	set	43
   658  002C                     _RA4	set	44
   659  002D                     _RA5	set	45
   660  002A                     _RA2	set	42
   661  0028                     _RA0	set	40
   662  0087                     _TRISC	set	135
   663  0085                     _TRISA	set	133
   664  0089                     _TRISE	set	137
   665  0081                     _OPTION_REG	set	129
   666  0088                     _TRISD	set	136
   667  009F                     _ADCON1	set	159
   668  0086                     _TRISB	set	134
   669  0434                     _TRISB4	set	1076
   670  0448                     _TRISE0	set	1096
   671  0428                     _TRISA0	set	1064
   672                           
   673                           ; #config settings
   674  0000                     
   675                           	psect	cinit
   676  07E8                     start_initialization:	
   677  07E8                     __initialization:	
   678                           
   679                           ; Initialize objects allocated to BANK0
   680  07E8  1383               	bcf	3,7	;select IRP bank0
   681  07E9  3070               	movlw	low (__pdataBANK0+8)
   682  07EA  00FD               	movwf	btemp+-1
   683  07EB  3016               	movlw	high __pidataBANK0
   684  07EC  00FE               	movwf	btemp
   685  07ED  3031               	movlw	low __pidataBANK0
   686  07EE  00FF               	movwf	btemp+1
   687  07EF  3068               	movlw	low __pdataBANK0
   688  07F0  0084               	movwf	4
   689  07F1  160A  118A  2686  120A  118A  	fcall	init_ram0
   690                           
   691                           ; Clear objects allocated to BANK0
   692  07F6  3020               	movlw	low __pbssBANK0
   693  07F7  0084               	movwf	4
   694  07F8  305C               	movlw	low (__pbssBANK0+60)
   695  07F9  160A  118A  2629   	fcall	clear_ram0
   696  07FC                     end_of_initialization:	
   697                           ;End of C runtime variable initialization code
   698                           
   699  07FC                     __end_of__initialization:	
   700  07FC  0183               	clrf	3
   701  07FD  120A  158A  2C87   	ljmp	_main	;jump to C main() function
   702                           
   703                           	psect	bssBANK0
   704  0020                     __pbssBANK0:	
   705  0020                     _table1:	
   706  0020                     	ds	7
   707  0027                     _day_counter:	
   708  0027                     	ds	2
   709  0029                     _count:	
   710  0029                     	ds	2
   711  002B                     _var_night_high:	
   712  002B                     	ds	2
   713  002D                     _var_night_low:	
   714  002D                     	ds	2
   715  002F                     _p:	
   716  002F                     	ds	2
   717  0031                     _stats:	
   718  0031                     	ds	2
   719  0033                     _day_of_week_var:	
   720  0033                     	ds	2
   721  0035                     _day_high:	
   722  0035                     	ds	2
   723  0037                     _day_low:	
   724  0037                     	ds	2
   725  0039                     _z:	
   726  0039                     	ds	2
   727  003B                     _y:	
   728  003B                     	ds	2
   729  003D                     _x:	
   730  003D                     	ds	2
   731  003F                     _w:	
   732  003F                     	ds	2
   733  0041                     _t:	
   734  0041                     	ds	2
   735  0043                     _wd:	
   736  0043                     	ds	2
   737  0045                     read_byte@j:	
   738  0045                     	ds	1
   739  0046                     _var2:	
   740  0046                     	ds	1
   741  0047                     _var1:	
   742  0047                     	ds	1
   743  0048                     _buzzer_watcher1:	
   744  0048                     	ds	1
   745  0049                     _buzzer_watcher:	
   746  0049                     	ds	1
   747  004A                     _lower_t:	
   748  004A                     	ds	1
   749  004B                     _upper_t:	
   750  004B                     	ds	1
   751  004C                     _prev_hex:	
   752  004C                     	ds	1
   753  004D                     _hrs_limiter:	
   754  004D                     	ds	1
   755  004E                     _day_hex:	
   756  004E                     	ds	1
   757  004F                     _c:	
   758  004F                     	ds	1
   759  0050                     _b:	
   760  0050                     	ds	1
   761  0051                     _a:	
   762  0051                     	ds	1
   763  0052                     _wanfen:	
   764  0052                     	ds	1
   765  0053                     _qianfen:	
   766  0053                     	ds	1
   767  0054                     _baifen:	
   768  0054                     	ds	1
   769  0055                     _shifen:	
   770  0055                     	ds	1
   771  0056                     _ge:	
   772  0056                     	ds	1
   773  0057                     _shi:	
   774  0057                     	ds	1
   775  0058                     _TX:	
   776  0058                     	ds	1
   777  0059                     _TZ:	
   778  0059                     	ds	1
   779  005A                     _THV:	
   780  005A                     	ds	1
   781  005B                     _TLV:	
   782  005B                     	ds	1
   783                           
   784                           	psect	dataBANK0
   785  0068                     __pdataBANK0:	
   786  0068                     _table:	
   787  0068                     	ds	8
   788                           
   789                           	psect	inittext
   790  1682                     init_fetch0:	
   791                           ;	Called with low address in FSR and high address in W
   792                           
   793  1682  087E               	movf	126,w
   794  1683  008A               	movwf	10
   795  1684  087F               	movf	127,w
   796  1685  0082               	movwf	2
   797  1686                     init_ram0:	
   798                           ;Called with:
   799                           ;	high address of idata address in btemp 
   800                           ;	low address of idata address in btemp+1 
   801                           ;	low address of data in FSR
   802                           ;	high address + 1 of data in btemp-1
   803                           
   804  1686  2682  160A  118A   	fcall	init_fetch0
   805  1689  0080               	movwf	0
   806  168A  0A84               	incf	4,f
   807  168B  0804               	movf	4,w
   808  168C  067D               	xorwf	125,w
   809  168D  1903               	btfsc	3,2
   810  168E  3400               	retlw	0
   811  168F  0AFF               	incf	127,f
   812  1690  1903               	btfsc	3,2
   813  1691  0AFE               	incf	126,f
   814  1692  2E86               	goto	init_ram0
   815                           
   816                           	psect	clrtext
   817  1629                     clear_ram0:	
   818                           ;	Called with FSR containing the base address, and
   819                           ;	W with the last address+1
   820                           
   821  1629  0064               	clrwdt	;clear the watchdog before getting into this loop
   822  162A                     clrloop0:	
   823  162A  0180               	clrf	0	;clear RAM location pointed to by FSR
   824  162B  0A84               	incf	4,f	;increment pointer
   825  162C  0604               	xorwf	4,w	;XOR with final address
   826  162D  1903               	btfsc	3,2	;have we reached the end yet?
   827  162E  3400               	retlw	0	;all done for this memory range, return
   828  162F  0604               	xorwf	4,w	;XOR again to restore value
   829  1630  2E2A               	goto	clrloop0	;do the next byte
   830                           
   831                           	psect	cstackCOMMON
   832  0070                     __pcstackCOMMON:	
   833  0070                     ?_init_temp:	
   834  0070                     ??_init_temp:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0070                     ?_set_time:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0070                     ?_ds1302_init:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0070                     ?_init:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0070                     ??_init:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0070                     ?_lcd_init:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0070                     ?_initialise_buttons:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0070                     ??_initialise_buttons:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0070                     ?_get_temp:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ?_get_time:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0070                     ?_write_cmd:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0070                     ?_write_char:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0070                     ?_display_temp:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     ?_display_date:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0070                     ?_display_clock:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0070                     ?_thermometer_threshhold_settings:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0070                     ?_date_settings:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0070                     ?_time_settings:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0070                     ?_set_beep_threshhold:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ?_reset_alarm:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ??_reset_alarm:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_delay_screen:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ??_delay_screen:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_delay_temp:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_delay2:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ??_delay2:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_time_write_1:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ??_time_write_1:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ?_time_read_1:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ??_time_read_1:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_button_delay:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ??_button_delay:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_time_date_hex_terminator:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_time_date_delimiter:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?_main:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_reset_temp:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_write_byte:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_read_byte:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?___lbdiv:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?___lbmod:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?___awmod:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?___lwmod:	
   958                           ; 2 bytes @ 0x0
   959                           
   960  0070                     delay_temp@y:	
   961                           ; 2 bytes @ 0x0
   962                           
   963  0070                     time_date_delimiter@hex:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     time_date_hex_terminator@limiter:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ___lbdiv@divisor:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ___lbmod@divisor:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     delay_screen@i:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     delay2@i:	
   979                           ; 2 bytes @ 0x0
   980                           
   981  0070                     button_delay@i:	
   982                           ; 2 bytes @ 0x0
   983                           
   984  0070                     ___awmod@divisor:	
   985                           ; 2 bytes @ 0x0
   986                           
   987  0070                     ___lwmod@divisor:	
   988                           ; 2 bytes @ 0x0
   989                           
   990                           
   991                           ; 2 bytes @ 0x0
   992  0070                     	ds	1
   993  0071                     ??_delay_temp:	
   994  0071                     ??_time_date_hex_terminator:	
   995                           ; 1 bytes @ 0x1
   996                           
   997  0071                     ??___lbdiv:	
   998                           ; 1 bytes @ 0x1
   999                           
  1000  0071                     ??___lbmod:	
  1001                           ; 1 bytes @ 0x1
  1002                           
  1003  0071                     time_date_delimiter@limiter:	
  1004                           ; 1 bytes @ 0x1
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x1
  1008  0071                     	ds	1
  1009  0072                     ??_write_cmd:	
  1010  0072                     ??_write_char:	
  1011                           ; 1 bytes @ 0x2
  1012                           
  1013  0072                     ??_set_beep_threshhold:	
  1014                           ; 1 bytes @ 0x2
  1015                           
  1016  0072                     ??_time_date_delimiter:	
  1017                           ; 1 bytes @ 0x2
  1018                           
  1019  0072                     write_char@x:	
  1020                           ; 1 bytes @ 0x2
  1021                           
  1022  0072                     write_cmd@x:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  0072                     delay_temp@x:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028  0072                     set_beep_threshhold@x:	
  1029                           ; 1 bytes @ 0x2
  1030                           
  1031  0072                     ___lbdiv@dividend:	
  1032                           ; 1 bytes @ 0x2
  1033                           
  1034  0072                     time_write_1@j:	
  1035                           ; 1 bytes @ 0x2
  1036                           
  1037  0072                     time_read_1@j:	
  1038                           ; 2 bytes @ 0x2
  1039                           
  1040  0072                     ___awmod@dividend:	
  1041                           ; 2 bytes @ 0x2
  1042                           
  1043  0072                     ___lwmod@dividend:	
  1044                           ; 2 bytes @ 0x2
  1045                           
  1046                           
  1047                           ; 2 bytes @ 0x2
  1048  0072                     	ds	1
  1049  0073                     ??_lcd_init:	
  1050  0073                     ??_display_temp:	
  1051                           ; 1 bytes @ 0x3
  1052                           
  1053  0073                     ??_display_date:	
  1054                           ; 1 bytes @ 0x3
  1055                           
  1056  0073                     ??_display_clock:	
  1057                           ; 1 bytes @ 0x3
  1058                           
  1059  0073                     ?_set_lower_threshold:	
  1060                           ; 1 bytes @ 0x3
  1061                           
  1062  0073                     ?_set_upper_threshold:	
  1063                           ; 1 bytes @ 0x3
  1064                           
  1065  0073                     ?_display_day:	
  1066                           ; 1 bytes @ 0x3
  1067                           
  1068  0073                     delay_temp@z:	
  1069                           ; 1 bytes @ 0x3
  1070                           
  1071  0073                     time_date_hex_terminator@val:	
  1072                           ; 1 bytes @ 0x3
  1073                           
  1074  0073                     ___lbdiv@counter:	
  1075                           ; 1 bytes @ 0x3
  1076                           
  1077  0073                     set_upper_threshold@upper_val:	
  1078                           ; 1 bytes @ 0x3
  1079                           
  1080  0073                     set_lower_threshold@upper_val:	
  1081                           ; 2 bytes @ 0x3
  1082                           
  1083  0073                     display_day@num:	
  1084                           ; 2 bytes @ 0x3
  1085                           
  1086                           
  1087                           ; 2 bytes @ 0x3
  1088  0073                     	ds	1
  1089  0074                     ??_reset_temp:	
  1090  0074                     ??_write_byte:	
  1091                           ; 1 bytes @ 0x4
  1092                           
  1093  0074                     ??_read_byte:	
  1094                           ; 1 bytes @ 0x4
  1095                           
  1096  0074                     ??___awmod:	
  1097                           ; 1 bytes @ 0x4
  1098                           
  1099  0074                     ??___lwmod:	
  1100                           ; 1 bytes @ 0x4
  1101                           
  1102  0074                     time_write_1@time_tx:	
  1103                           ; 1 bytes @ 0x4
  1104                           
  1105  0074                     time_read_1@time_rx:	
  1106                           ; 1 bytes @ 0x4
  1107                           
  1108  0074                     time_date_delimiter@val:	
  1109                           ; 1 bytes @ 0x4
  1110                           
  1111  0074                     ___lbdiv@quotient:	
  1112                           ; 1 bytes @ 0x4
  1113                           
  1114  0074                     ___lbmod@dividend:	
  1115                           ; 1 bytes @ 0x4
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x4
  1119  0074                     	ds	1
  1120  0075                     ??_set_time:	
  1121  0075                     ??_ds1302_init:	
  1122                           ; 1 bytes @ 0x5
  1123                           
  1124  0075                     ??_get_time:	
  1125                           ; 1 bytes @ 0x5
  1126                           
  1127  0075                     ??_display_day:	
  1128                           ; 1 bytes @ 0x5
  1129                           
  1130  0075                     reset_temp@presence:	
  1131                           ; 1 bytes @ 0x5
  1132                           
  1133  0075                     read_byte@value:	
  1134                           ; 1 bytes @ 0x5
  1135                           
  1136  0075                     ___awmod@counter:	
  1137                           ; 1 bytes @ 0x5
  1138                           
  1139  0075                     ___lbmod@counter:	
  1140                           ; 1 bytes @ 0x5
  1141                           
  1142  0075                     ___lwmod@counter:	
  1143                           ; 1 bytes @ 0x5
  1144                           
  1145  0075                     set_time@i:	
  1146                           ; 1 bytes @ 0x5
  1147                           
  1148  0075                     display_clock@i:	
  1149                           ; 2 bytes @ 0x5
  1150                           
  1151  0075                     display_date@i:	
  1152                           ; 2 bytes @ 0x5
  1153                           
  1154  0075                     set_upper_threshold@lower_val:	
  1155                           ; 2 bytes @ 0x5
  1156                           
  1157  0075                     set_lower_threshold@lower_val:	
  1158                           ; 2 bytes @ 0x5
  1159                           
  1160                           
  1161                           ; 2 bytes @ 0x5
  1162  0075                     	ds	1
  1163  0076                     ?___lwdiv:	
  1164  0076                     write_byte@temp:	
  1165                           ; 2 bytes @ 0x6
  1166                           
  1167  0076                     read_byte@i:	
  1168                           ; 1 bytes @ 0x6
  1169                           
  1170  0076                     ___awmod@sign:	
  1171                           ; 1 bytes @ 0x6
  1172                           
  1173  0076                     ___lbmod@rem:	
  1174                           ; 1 bytes @ 0x6
  1175                           
  1176  0076                     get_time@i:	
  1177                           ; 1 bytes @ 0x6
  1178                           
  1179  0076                     ___lwdiv@divisor:	
  1180                           ; 2 bytes @ 0x6
  1181                           
  1182                           
  1183                           ; 2 bytes @ 0x6
  1184  0076                     	ds	1
  1185  0077                     ??_set_lower_threshold:	
  1186  0077                     ??_set_upper_threshold:	
  1187                           ; 1 bytes @ 0x7
  1188                           
  1189  0077                     ?_modulus_func:	
  1190                           ; 1 bytes @ 0x7
  1191                           
  1192  0077                     write_byte@val:	
  1193                           ; 2 bytes @ 0x7
  1194                           
  1195  0077                     modulus_func@x:	
  1196                           ; 1 bytes @ 0x7
  1197                           
  1198                           
  1199                           ; 2 bytes @ 0x7
  1200  0077                     	ds	1
  1201  0078                     write_byte@i:	
  1202  0078                     ___lwdiv@dividend:	
  1203                           ; 1 bytes @ 0x8
  1204                           
  1205                           
  1206                           ; 2 bytes @ 0x8
  1207  0078                     	ds	1
  1208  0079                     modulus_func@y:	
  1209                           
  1210                           ; 2 bytes @ 0x9
  1211  0079                     	ds	1
  1212  007A                     ??___lwdiv:	
  1213                           
  1214                           ; 1 bytes @ 0xA
  1215  007A                     	ds	1
  1216  007B                     ??_modulus_func:	
  1217  007B                     ??_incrementor:	
  1218                           ; 1 bytes @ 0xB
  1219                           
  1220  007B                     ??_decrementor:	
  1221                           ; 1 bytes @ 0xB
  1222                           
  1223  007B                     ___lwdiv@quotient:	
  1224                           ; 1 bytes @ 0xB
  1225                           
  1226                           
  1227                           ; 2 bytes @ 0xB
  1228  007B                     	ds	2
  1229  007D                     ___lwdiv@counter:	
  1230                           
  1231                           ; 1 bytes @ 0xD
  1232  007D                     	ds	1
  1233  007E                     ??_main:	
  1234                           
  1235                           	psect	cstackBANK0
  1236  005C                     __pcstackBANK0:	
  1237                           ; 1 bytes @ 0xE
  1238                           
  1239  005C                     ??_get_temp:	
  1240  005C                     ?_incrementor:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243  005C                     ?_decrementor:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246  005C                     incrementor@upper_val:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249  005C                     decrementor@lower_val:	
  1250                           ; 2 bytes @ 0x0
  1251                           
  1252                           
  1253                           ; 2 bytes @ 0x0
  1254  005C                     	ds	2
  1255  005E                     incrementor@lower_val:	
  1256  005E                     decrementor@upper_val:	
  1257                           ; 2 bytes @ 0x2
  1258                           
  1259                           
  1260                           ; 2 bytes @ 0x2
  1261  005E                     	ds	2
  1262  0060                     incrementor@z:	
  1263  0060                     decrementor@z:	
  1264                           ; 1 bytes @ 0x4
  1265                           
  1266                           
  1267                           ; 1 bytes @ 0x4
  1268  0060                     	ds	1
  1269  0061                     ??_thermometer_threshhold_settings:	
  1270  0061                     ??_date_settings:	
  1271                           ; 1 bytes @ 0x5
  1272                           
  1273  0061                     ??_time_settings:	
  1274                           ; 1 bytes @ 0x5
  1275                           
  1276                           
  1277                           ; 1 bytes @ 0x5
  1278  0061                     	ds	3
  1279  0064                     thermometer_threshhold_settings@i:	
  1280                           
  1281                           ; 2 bytes @ 0x8
  1282  0064                     	ds	2
  1283  0066                     main@i:	
  1284                           
  1285                           ; 2 bytes @ 0xA
  1286  0066                     	ds	2
  1287                           
  1288                           	psect	maintext
  1289  0C87                     __pmaintext:	
  1290 ;;
  1291 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1292 ;;
  1293 ;; *************** function _main *****************
  1294 ;; Defined at:
  1295 ;;		line 10 in file "mainLogic.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  i               2   10[BANK0 ] int 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : B00/0
  1306 ;;		On exit  : 300/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       0       0       0       0
  1310 ;;      Locals:         0       2       0       0       0
  1311 ;;      Temps:          0       0       0       0       0
  1312 ;;      Totals:         0       2       0       0       0
  1313 ;;Total ram usage:        2 bytes
  1314 ;; Hardware stack levels required when called:    4
  1315 ;; This function calls:
  1316 ;;		_date_settings
  1317 ;;		_display_clock
  1318 ;;		_display_date
  1319 ;;		_display_day
  1320 ;;		_display_temp
  1321 ;;		_ds1302_init
  1322 ;;		_get_temp
  1323 ;;		_get_time
  1324 ;;		_init
  1325 ;;		_init_temp
  1326 ;;		_initialise_buttons
  1327 ;;		_lcd_init
  1328 ;;		_modulus_func
  1329 ;;		_reset_alarm
  1330 ;;		_set_beep_threshhold
  1331 ;;		_set_lower_threshold
  1332 ;;		_set_time
  1333 ;;		_set_upper_threshold
  1334 ;;		_thermometer_threshhold_settings
  1335 ;;		_time_settings
  1336 ;;		_write_char
  1337 ;;		_write_cmd
  1338 ;; This function is called by:
  1339 ;;		Startup code after reset
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           
  1344                           ;psect for function _main
  1345  0C87                     _main:	
  1346                           
  1347                           ;mainLogic.c: 11:     TRISB=0X02;
  1348                           
  1349                           ;incstack = 0
  1350                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1351  0C87  3002               	movlw	2
  1352  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  1353  0C89  0086               	movwf	6	;volatile
  1354                           
  1355                           ;mainLogic.c: 12:     init_temp();
  1356  0C8A  160A  118A  261C  120A  158A  	fcall	_init_temp
  1357                           
  1358                           ;mainLogic.c: 13:     set_time();
  1359  0C8F  120A  158A  2041  120A  158A  	fcall	_set_time
  1360                           
  1361                           ;mainLogic.c: 14:     ds1302_init();
  1362  0C94  160A  118A  2663  120A  158A  	fcall	_ds1302_init
  1363                           
  1364                           ;mainLogic.c: 16:     init();
  1365  0C99  160A  118A  2621  120A  158A  	fcall	_init
  1366                           
  1367                           ;mainLogic.c: 17:     lcd_init();
  1368  0C9E  160A  118A  2795  120A  158A  	fcall	_lcd_init
  1369                           
  1370                           ;mainLogic.c: 18:     init_temp();
  1371  0CA3  160A  118A  261C  120A  158A  	fcall	_init_temp
  1372                           
  1373                           ;mainLogic.c: 19:     initialise_buttons();
  1374  0CA8  160A  118A  26CF  120A  158A  	fcall	_initialise_buttons
  1375  0CAD                     l4015:	
  1376                           
  1377                           ;mainLogic.c: 24:     get_temp();
  1378  0CAD  120A  158A  2380  120A  158A  	fcall	_get_temp
  1379                           
  1380                           ;mainLogic.c: 25:     get_time();
  1381  0CB2  120A  158A  2069  120A  158A  	fcall	_get_time
  1382                           
  1383                           ;mainLogic.c: 26:     write_cmd(0x80);
  1384  0CB7  3080               	movlw	128
  1385  0CB8  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1386                           
  1387                           ;mainLogic.c: 27:     write_char('T');
  1388  0CBD  3054               	movlw	84
  1389  0CBE  160A  118A  26E5  120A  158A  	fcall	_write_char
  1390                           
  1391                           ;mainLogic.c: 28:     write_char('e');
  1392  0CC3  3065               	movlw	101
  1393  0CC4  160A  118A  26E5  120A  158A  	fcall	_write_char
  1394                           
  1395                           ;mainLogic.c: 29:     write_char('m');
  1396  0CC9  306D               	movlw	109
  1397  0CCA  160A  118A  26E5  120A  158A  	fcall	_write_char
  1398                           
  1399                           ;mainLogic.c: 30:     write_char('p');
  1400  0CCF  3070               	movlw	112
  1401  0CD0  160A  118A  26E5  120A  158A  	fcall	_write_char
  1402                           
  1403                           ;mainLogic.c: 31:     write_char(':');
  1404  0CD5  303A               	movlw	58
  1405  0CD6  160A  118A  26E5  120A  158A  	fcall	_write_char
  1406                           
  1407                           ;mainLogic.c: 32:     display_temp();
  1408  0CDB  160A  118A  2730  120A  158A  	fcall	_display_temp
  1409                           
  1410                           ;mainLogic.c: 34:     write_cmd(0x90);
  1411  0CE0  3090               	movlw	144
  1412  0CE1  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1413                           
  1414                           ;mainLogic.c: 35:     write_char('D');
  1415  0CE6  3044               	movlw	68
  1416  0CE7  160A  118A  26E5  120A  158A  	fcall	_write_char
  1417                           
  1418                           ;mainLogic.c: 36:     write_char('a');
  1419  0CEC  3061               	movlw	97
  1420  0CED  160A  118A  26E5  120A  158A  	fcall	_write_char
  1421                           
  1422                           ;mainLogic.c: 37:     write_char('t');
  1423  0CF2  3074               	movlw	116
  1424  0CF3  160A  118A  26E5  120A  158A  	fcall	_write_char
  1425                           
  1426                           ;mainLogic.c: 38:     write_char('e');
  1427  0CF8  3065               	movlw	101
  1428  0CF9  160A  118A  26E5  120A  158A  	fcall	_write_char
  1429                           
  1430                           ;mainLogic.c: 39:     write_char(':');
  1431  0CFE  303A               	movlw	58
  1432  0CFF  160A  118A  26E5  120A  158A  	fcall	_write_char
  1433                           
  1434                           ;mainLogic.c: 40:     write_char(' ');
  1435  0D04  3020               	movlw	32
  1436  0D05  160A  118A  26E5  120A  158A  	fcall	_write_char
  1437                           
  1438                           ;mainLogic.c: 42:     display_date();
  1439  0D0A  120A  158A  22EA  120A  158A  	fcall	_display_date
  1440                           
  1441                           ;mainLogic.c: 44:     write_cmd(0x88);
  1442  0D0F  3088               	movlw	136
  1443  0D10  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1444                           
  1445                           ;mainLogic.c: 45:     write_char('T');
  1446  0D15  3054               	movlw	84
  1447  0D16  160A  118A  26E5  120A  158A  	fcall	_write_char
  1448                           
  1449                           ;mainLogic.c: 46:     write_char('i');
  1450  0D1B  3069               	movlw	105
  1451  0D1C  160A  118A  26E5  120A  158A  	fcall	_write_char
  1452                           
  1453                           ;mainLogic.c: 47:     write_char('m');
  1454  0D21  306D               	movlw	109
  1455  0D22  160A  118A  26E5  120A  158A  	fcall	_write_char
  1456                           
  1457                           ;mainLogic.c: 48:     write_char('e');
  1458  0D27  3065               	movlw	101
  1459  0D28  160A  118A  26E5  120A  158A  	fcall	_write_char
  1460                           
  1461                           ;mainLogic.c: 49:     write_char(':');
  1462  0D2D  303A               	movlw	58
  1463  0D2E  160A  118A  26E5  120A  158A  	fcall	_write_char
  1464                           
  1465                           ;mainLogic.c: 50:     display_clock();
  1466  0D33  120A  158A  2254  120A  158A  	fcall	_display_clock
  1467                           
  1468                           ;mainLogic.c: 51:     thermometer_threshhold_settings();
  1469  0D38  120A  158A  25AA  120A  158A  	fcall	_thermometer_threshhold_settings
  1470                           
  1471                           ;mainLogic.c: 52:     date_settings();
  1472  0D3D  120A  118A  23D4  120A  158A  	fcall	_date_settings
  1473                           
  1474                           ;mainLogic.c: 53:     time_settings();
  1475  0D42  120A  118A  20EE  120A  158A  	fcall	_time_settings
  1476                           
  1477                           ;mainLogic.c: 54:     write_cmd(0x98);
  1478  0D47  3098               	movlw	152
  1479  0D48  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  1480                           
  1481                           ;mainLogic.c: 55:     set_lower_threshold(2,7);
  1482  0D4D  3002               	movlw	2
  1483  0D4E  00F3               	movwf	set_lower_threshold@upper_val
  1484  0D4F  3000               	movlw	0
  1485  0D50  00F4               	movwf	set_lower_threshold@upper_val+1
  1486  0D51  3007               	movlw	7
  1487  0D52  00F5               	movwf	set_lower_threshold@lower_val
  1488  0D53  3000               	movlw	0
  1489  0D54  00F6               	movwf	set_lower_threshold@lower_val+1
  1490  0D55  120A  118A  2007  120A  158A  	fcall	_set_lower_threshold
  1491                           
  1492                           ;mainLogic.c: 56:     set_upper_threshold(2,7);
  1493  0D5A  3002               	movlw	2
  1494  0D5B  00F3               	movwf	set_upper_threshold@upper_val
  1495  0D5C  3000               	movlw	0
  1496  0D5D  00F4               	movwf	set_upper_threshold@upper_val+1
  1497  0D5E  3007               	movlw	7
  1498  0D5F  00F5               	movwf	set_upper_threshold@lower_val
  1499  0D60  3000               	movlw	0
  1500  0D61  00F6               	movwf	set_upper_threshold@lower_val+1
  1501  0D62  120A  158A  2195  120A  158A  	fcall	_set_upper_threshold
  1502                           
  1503                           ;mainLogic.c: 57:     set_beep_threshhold(buzzer_watcher);
  1504  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0D69  0849               	movf	_buzzer_watcher,w
  1507  0D6A  160A  118A  2713  120A  158A  	fcall	_set_beep_threshhold
  1508                           
  1509                           ;mainLogic.c: 58:     reset_alarm();
  1510  0D6F  160A  118A  2639  120A  158A  	fcall	_reset_alarm
  1511                           
  1512                           ;mainLogic.c: 59:     for(int i = 0; i < 7; i++)
  1513  0D74  01E6               	clrf	main@i
  1514  0D75  01E7               	clrf	main@i+1
  1515  0D76                     l4085:	
  1516                           
  1517                           ;mainLogic.c: 60:     write_char(' ');
  1518  0D76  3020               	movlw	32
  1519  0D77  160A  118A  26E5  120A  158A  	fcall	_write_char
  1520  0D7C  3001               	movlw	1
  1521  0D7D  07E6               	addwf	main@i,f
  1522  0D7E  1803               	skipnc
  1523  0D7F  0AE7               	incf	main@i+1,f
  1524  0D80  3000               	movlw	0
  1525  0D81  07E7               	addwf	main@i+1,f
  1526  0D82  0867               	movf	main@i+1,w
  1527  0D83  3A80               	xorlw	128
  1528  0D84  00FF               	movwf	127
  1529  0D85  3080               	movlw	128
  1530  0D86  027F               	subwf	127,w
  1531  0D87  1D03               	skipz
  1532  0D88  2D8B               	goto	u2845
  1533  0D89  3007               	movlw	7
  1534  0D8A  0266               	subwf	main@i,w
  1535  0D8B                     u2845:	
  1536  0D8B  1C03               	skipc
  1537  0D8C  2D76               	goto	l4085
  1538                           
  1539                           ;mainLogic.c: 61:     day_counter = modulus_func(day_low,8);
  1540  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1542  0D8F  0838               	movf	_day_low+1,w
  1543  0D90  00F8               	movwf	modulus_func@x+1
  1544  0D91  0837               	movf	_day_low,w
  1545  0D92  00F7               	movwf	modulus_func@x
  1546  0D93  3008               	movlw	8
  1547  0D94  00F9               	movwf	modulus_func@y
  1548  0D95  3000               	movlw	0
  1549  0D96  00FA               	movwf	modulus_func@y+1
  1550  0D97  160A  118A  2672  120A  158A  	fcall	_modulus_func
  1551  0D9C  0878               	movf	?_modulus_func+1,w
  1552  0D9D  00A8               	movwf	_day_counter+1
  1553  0D9E  0877               	movf	?_modulus_func,w
  1554  0D9F  00A7               	movwf	_day_counter
  1555                           
  1556                           ;mainLogic.c: 62:     display_day(day_counter);
  1557  0DA0  0828               	movf	_day_counter+1,w
  1558  0DA1  00F4               	movwf	display_day@num+1
  1559  0DA2  0827               	movf	_day_counter,w
  1560  0DA3  00F3               	movwf	display_day@num
  1561  0DA4  120A  118A  204B  120A  158A  	fcall	_display_day
  1562  0DA9  2CAD               	goto	l4015
  1563  0DAA                     __end_of_main:	
  1564                           
  1565                           	psect	text1
  1566  00EE                     __ptext1:	
  1567 ;; *************** function _time_settings *****************
  1568 ;; Defined at:
  1569 ;;		line 167 in file "Button_src.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;		None
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 300/0
  1580 ;;		On exit  : 300/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1583 ;;      Params:         0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0
  1585 ;;      Temps:          0       3       0       0       0
  1586 ;;      Totals:         0       3       0       0       0
  1587 ;;Total ram usage:        3 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    3
  1590 ;; This function calls:
  1591 ;;		_button_delay
  1592 ;;		_incrementor
  1593 ;;		_modulus_func
  1594 ;;		_set_time
  1595 ;;		_time_date_delimiter
  1596 ;;		_time_date_hex_terminator
  1597 ;;		_write_char
  1598 ;;		_write_cmd
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           
  1605                           ;psect for function _time_settings
  1606  00EE                     _time_settings:	
  1607                           
  1608                           ;Button_src.c: 168:  RC0 = 1;
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1612  00EE  1407               	bsf	7,0	;volatile
  1613                           
  1614                           ;Button_src.c: 169:  RC1 = 1;
  1615  00EF  1487               	bsf	7,1	;volatile
  1616                           
  1617                           ;Button_src.c: 170:  RC2 = 0;
  1618  00F0  1107               	bcf	7,2	;volatile
  1619                           
  1620                           ;Button_src.c: 171:  RC3 = 1;
  1621  00F1  1587               	bsf	7,3	;volatile
  1622                           
  1623                           ;Button_src.c: 172:   if (RC4 == 0){
  1624  00F2  1A07               	btfsc	7,4	;volatile
  1625  00F3  0008               	return
  1626                           
  1627                           ;Button_src.c: 173:       write_cmd(0x1);
  1628  00F4  3001               	movlw	1
  1629  00F5  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  1630  00FA                     l567:	
  1631                           ;Button_src.c: 174:       for(;;){
  1632                           
  1633                           
  1634                           ;Button_src.c: 175:             write_cmd(0x80);
  1635  00FA  3080               	movlw	128
  1636  00FB  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  1637                           
  1638                           ;Button_src.c: 176:             write_char('T');
  1639  0100  3054               	movlw	84
  1640  0101  160A  118A  26E5  120A  118A  	fcall	_write_char
  1641                           
  1642                           ;Button_src.c: 177:             write_char('i');
  1643  0106  3069               	movlw	105
  1644  0107  160A  118A  26E5  120A  118A  	fcall	_write_char
  1645                           
  1646                           ;Button_src.c: 178:             write_char('m');
  1647  010C  306D               	movlw	109
  1648  010D  160A  118A  26E5  120A  118A  	fcall	_write_char
  1649                           
  1650                           ;Button_src.c: 179:             write_char('e');
  1651  0112  3065               	movlw	101
  1652  0113  160A  118A  26E5  120A  118A  	fcall	_write_char
  1653                           
  1654                           ;Button_src.c: 180:             write_char('_');
  1655  0118  305F               	movlw	95
  1656  0119  160A  118A  26E5  120A  118A  	fcall	_write_char
  1657                           
  1658                           ;Button_src.c: 181:             write_char('S');
  1659  011E  3053               	movlw	83
  1660  011F  160A  118A  26E5  120A  118A  	fcall	_write_char
  1661                           
  1662                           ;Button_src.c: 182:             write_char('e');
  1663  0124  3065               	movlw	101
  1664  0125  160A  118A  26E5  120A  118A  	fcall	_write_char
  1665                           
  1666                           ;Button_src.c: 183:             write_char('t');
  1667  012A  3074               	movlw	116
  1668  012B  160A  118A  26E5  120A  118A  	fcall	_write_char
  1669                           
  1670                           ;Button_src.c: 184:             write_char('t');
  1671  0130  3074               	movlw	116
  1672  0131  160A  118A  26E5  120A  118A  	fcall	_write_char
  1673                           
  1674                           ;Button_src.c: 185:             write_char('i');
  1675  0136  3069               	movlw	105
  1676  0137  160A  118A  26E5  120A  118A  	fcall	_write_char
  1677                           
  1678                           ;Button_src.c: 186:             write_char('n');
  1679  013C  306E               	movlw	110
  1680  013D  160A  118A  26E5  120A  118A  	fcall	_write_char
  1681                           
  1682                           ;Button_src.c: 187:             write_char('g');
  1683  0142  3067               	movlw	103
  1684  0143  160A  118A  26E5  120A  118A  	fcall	_write_char
  1685                           
  1686                           ;Button_src.c: 188:             write_char('s');
  1687  0148  3073               	movlw	115
  1688  0149  160A  118A  26E5  120A  118A  	fcall	_write_char
  1689                           
  1690                           ;Button_src.c: 190:             RC0 = 1;
  1691  014E  1407               	bsf	7,0	;volatile
  1692                           
  1693                           ;Button_src.c: 191:             RC1 = 0;
  1694  014F  1087               	bcf	7,1	;volatile
  1695                           
  1696                           ;Button_src.c: 192:             RC2 = 1;
  1697  0150  1507               	bsf	7,2	;volatile
  1698                           
  1699                           ;Button_src.c: 193:             RC3 = 1;
  1700  0151  1587               	bsf	7,3	;volatile
  1701                           
  1702                           ;Button_src.c: 195:             if(RC7 == 0 && b =='x'){
  1703  0152  1B87               	btfsc	7,7	;volatile
  1704  0153  29C5               	goto	l3769
  1705  0154  3078               	movlw	120
  1706  0155  0650               	xorwf	_b,w
  1707  0156  1D03               	btfss	3,2
  1708  0157  29C5               	goto	l3769
  1709                           
  1710                           ;Button_src.c: 196:                 if(stats == 1)
  1711  0158  0331               	decf	_stats,w
  1712  0159  0432               	iorwf	_stats+1,w
  1713  015A  1D03               	btfss	3,2
  1714  015B  2960               	goto	l569
  1715                           
  1716                           ;Button_src.c: 197:                    a++;
  1717  015C  3001               	movlw	1
  1718  015D  00E1               	movwf	??_time_settings
  1719  015E  0861               	movf	??_time_settings,w
  1720  015F  07D1               	addwf	_a,f
  1721  0160                     l569:	
  1722                           
  1723                           ;Button_src.c: 198:                 if(stats == 0){
  1724  0160  0831               	movf	_stats,w
  1725  0161  0432               	iorwf	_stats+1,w
  1726  0162  1D03               	btfss	3,2
  1727  0163  2968               	goto	l570
  1728                           
  1729                           ;Button_src.c: 199:                    stats = 1;
  1730  0164  3001               	movlw	1
  1731  0165  00B1               	movwf	_stats
  1732  0166  3000               	movlw	0
  1733  0167  00B2               	movwf	_stats+1
  1734  0168                     l570:	
  1735                           ;Button_src.c: 200:                 }
  1736                           
  1737                           
  1738                           ;Button_src.c: 202:                     x++ ;
  1739  0168  3001               	movlw	1
  1740  0169  07BD               	addwf	_x,f
  1741  016A  1803               	skipnc
  1742  016B  0ABE               	incf	_x+1,f
  1743  016C  3000               	movlw	0
  1744  016D  07BE               	addwf	_x+1,f
  1745                           
  1746                           ;Button_src.c: 203:                     x = modulus_func(x,10);
  1747  016E  083E               	movf	_x+1,w
  1748  016F  00F8               	movwf	modulus_func@x+1
  1749  0170  083D               	movf	_x,w
  1750  0171  00F7               	movwf	modulus_func@x
  1751  0172  300A               	movlw	10
  1752  0173  00F9               	movwf	modulus_func@y
  1753  0174  3000               	movlw	0
  1754  0175  00FA               	movwf	modulus_func@y+1
  1755  0176  160A  118A  2672  120A  118A  	fcall	_modulus_func
  1756  017B  0878               	movf	?_modulus_func+1,w
  1757  017C  00BE               	movwf	_x+1
  1758  017D  0877               	movf	?_modulus_func,w
  1759  017E  00BD               	movwf	_x
  1760                           
  1761                           ;Button_src.c: 204:                     if (p == 1){
  1762  017F  032F               	decf	_p,w
  1763  0180  0430               	iorwf	_p+1,w
  1764  0181  1D03               	btfss	3,2
  1765  0182  299C               	goto	l3755
  1766                           
  1767                           ;Button_src.c: 205:                         y = incrementor(y,x,'0');
  1768  0183  083C               	movf	_y+1,w
  1769  0184  00DD               	movwf	incrementor@upper_val+1
  1770  0185  083B               	movf	_y,w
  1771  0186  00DC               	movwf	incrementor@upper_val
  1772  0187  083E               	movf	_x+1,w
  1773  0188  00DF               	movwf	incrementor@lower_val+1
  1774  0189  083D               	movf	_x,w
  1775  018A  00DE               	movwf	incrementor@lower_val
  1776  018B  3030               	movlw	48
  1777  018C  00E1               	movwf	??_time_settings
  1778  018D  0861               	movf	??_time_settings,w
  1779  018E  00E0               	movwf	incrementor@z
  1780  018F  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1781  0194  00E2               	movwf	??_time_settings+1
  1782  0195  01E3               	clrf	??_time_settings+2
  1783  0196  0862               	movf	??_time_settings+1,w
  1784  0197  00BB               	movwf	_y
  1785  0198  0863               	movf	??_time_settings+2,w
  1786  0199  00BC               	movwf	_y+1
  1787                           
  1788                           ;Button_src.c: 206:                         p = 0;
  1789  019A  01AF               	clrf	_p
  1790  019B  01B0               	clrf	_p+1
  1791  019C                     l3755:	
  1792                           
  1793                           ;Button_src.c: 208:                     if (x == 9){
  1794  019C  3009               	movlw	9
  1795  019D  063D               	xorwf	_x,w
  1796  019E  043E               	iorwf	_x+1,w
  1797  019F  1D03               	btfss	3,2
  1798  01A0  29A5               	goto	l3759
  1799                           
  1800                           ;Button_src.c: 209:                         p = 1;
  1801  01A1  3001               	movlw	1
  1802  01A2  00AF               	movwf	_p
  1803  01A3  3000               	movlw	0
  1804  01A4  00B0               	movwf	_p+1
  1805  01A5                     l3759:	
  1806                           
  1807                           ;Button_src.c: 213:                     a = time_date_hex_terminator(a,'T');
  1808  01A5  3054               	movlw	84
  1809  01A6  00E1               	movwf	??_time_settings
  1810  01A7  0861               	movf	??_time_settings,w
  1811  01A8  00F0               	movwf	time_date_hex_terminator@limiter
  1812  01A9  0851               	movf	_a,w
  1813  01AA  160A  118A  2654  120A  118A  	fcall	_time_date_hex_terminator
  1814  01AF  00E2               	movwf	??_time_settings+1
  1815  01B0  0862               	movf	??_time_settings+1,w
  1816  01B1  00D1               	movwf	_a
  1817                           
  1818                           ;Button_src.c: 214:                     if(y == 2 && x == 4){
  1819  01B2  3002               	movlw	2
  1820  01B3  063B               	xorwf	_y,w
  1821  01B4  043C               	iorwf	_y+1,w
  1822  01B5  1D03               	btfss	3,2
  1823  01B6  29C0               	goto	l3767
  1824  01B7  3004               	movlw	4
  1825  01B8  063D               	xorwf	_x,w
  1826  01B9  043E               	iorwf	_x+1,w
  1827  01BA  1D03               	btfss	3,2
  1828  01BB  29C0               	goto	l3767
  1829                           
  1830                           ;Button_src.c: 215:                         x = 0;
  1831  01BC  01BD               	clrf	_x
  1832  01BD  01BE               	clrf	_x+1
  1833                           
  1834                           ;Button_src.c: 216:                         y = 0;
  1835  01BE  01BB               	clrf	_y
  1836  01BF  01BC               	clrf	_y+1
  1837  01C0                     l3767:	
  1838                           
  1839                           ;Button_src.c: 218:                     button_delay();
  1840  01C0  160A  118A  2693  120A  118A  	fcall	_button_delay
  1841  01C5                     l3769:	
  1842                           
  1843                           ;Button_src.c: 220:             if(RC7==0 && b == 'y'){
  1844  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1845  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1846  01C7  1B87               	btfsc	7,7	;volatile
  1847  01C8  2A43               	goto	l3803
  1848  01C9  3079               	movlw	121
  1849  01CA  0650               	xorwf	_b,w
  1850  01CB  1D03               	btfss	3,2
  1851  01CC  2A43               	goto	l3803
  1852                           
  1853                           ;Button_src.c: 221:                  if(stats == 1)
  1854  01CD  0331               	decf	_stats,w
  1855  01CE  0432               	iorwf	_stats+1,w
  1856  01CF  1D03               	btfss	3,2
  1857  01D0  29D5               	goto	l575
  1858                           
  1859                           ;Button_src.c: 222:                    c++;
  1860  01D1  3001               	movlw	1
  1861  01D2  00E1               	movwf	??_time_settings
  1862  01D3  0861               	movf	??_time_settings,w
  1863  01D4  07CF               	addwf	_c,f
  1864  01D5                     l575:	
  1865                           
  1866                           ;Button_src.c: 223:                 if(stats == 0){
  1867  01D5  0831               	movf	_stats,w
  1868  01D6  0432               	iorwf	_stats+1,w
  1869  01D7  1D03               	btfss	3,2
  1870  01D8  29DD               	goto	l576
  1871                           
  1872                           ;Button_src.c: 224:                     stats = 1;
  1873  01D9  3001               	movlw	1
  1874  01DA  00B1               	movwf	_stats
  1875  01DB  3000               	movlw	0
  1876  01DC  00B2               	movwf	_stats+1
  1877  01DD                     l576:	
  1878                           ;Button_src.c: 225:                 }
  1879                           
  1880                           
  1881                           ;Button_src.c: 227:                     t++;
  1882  01DD  3001               	movlw	1
  1883  01DE  07C1               	addwf	_t,f
  1884  01DF  1803               	skipnc
  1885  01E0  0AC2               	incf	_t+1,f
  1886  01E1  3000               	movlw	0
  1887  01E2  07C2               	addwf	_t+1,f
  1888                           
  1889                           ;Button_src.c: 228:                     t = modulus_func(t,10);
  1890  01E3  0842               	movf	_t+1,w
  1891  01E4  00F8               	movwf	modulus_func@x+1
  1892  01E5  0841               	movf	_t,w
  1893  01E6  00F7               	movwf	modulus_func@x
  1894  01E7  300A               	movlw	10
  1895  01E8  00F9               	movwf	modulus_func@y
  1896  01E9  3000               	movlw	0
  1897  01EA  00FA               	movwf	modulus_func@y+1
  1898  01EB  160A  118A  2672  120A  118A  	fcall	_modulus_func
  1899  01F0  0878               	movf	?_modulus_func+1,w
  1900  01F1  00C2               	movwf	_t+1
  1901  01F2  0877               	movf	?_modulus_func,w
  1902  01F3  00C1               	movwf	_t
  1903                           
  1904                           ;Button_src.c: 229:                       if (p == 1){
  1905  01F4  032F               	decf	_p,w
  1906  01F5  0430               	iorwf	_p+1,w
  1907  01F6  1D03               	btfss	3,2
  1908  01F7  2A11               	goto	l3787
  1909                           
  1910                           ;Button_src.c: 230:                         w = incrementor(w,t,'0');
  1911  01F8  0840               	movf	_w+1,w
  1912  01F9  00DD               	movwf	incrementor@upper_val+1
  1913  01FA  083F               	movf	_w,w
  1914  01FB  00DC               	movwf	incrementor@upper_val
  1915  01FC  0842               	movf	_t+1,w
  1916  01FD  00DF               	movwf	incrementor@lower_val+1
  1917  01FE  0841               	movf	_t,w
  1918  01FF  00DE               	movwf	incrementor@lower_val
  1919  0200  3030               	movlw	48
  1920  0201  00E1               	movwf	??_time_settings
  1921  0202  0861               	movf	??_time_settings,w
  1922  0203  00E0               	movwf	incrementor@z
  1923  0204  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1924  0209  00E2               	movwf	??_time_settings+1
  1925  020A  01E3               	clrf	??_time_settings+2
  1926  020B  0862               	movf	??_time_settings+1,w
  1927  020C  00BF               	movwf	_w
  1928  020D  0863               	movf	??_time_settings+2,w
  1929  020E  00C0               	movwf	_w+1
  1930                           
  1931                           ;Button_src.c: 231:                         p = 0;
  1932  020F  01AF               	clrf	_p
  1933  0210  01B0               	clrf	_p+1
  1934  0211                     l3787:	
  1935                           
  1936                           ;Button_src.c: 233:                     if (t == 9){
  1937  0211  3009               	movlw	9
  1938  0212  0641               	xorwf	_t,w
  1939  0213  0442               	iorwf	_t+1,w
  1940  0214  1D03               	btfss	3,2
  1941  0215  2A1A               	goto	l3791
  1942                           
  1943                           ;Button_src.c: 234:                         p = 1;
  1944  0216  3001               	movlw	1
  1945  0217  00AF               	movwf	_p
  1946  0218  3000               	movlw	0
  1947  0219  00B0               	movwf	_p+1
  1948  021A                     l3791:	
  1949                           
  1950                           ;Button_src.c: 236:                     w = incrementor(w,t,'9');
  1951  021A  0840               	movf	_w+1,w
  1952  021B  00DD               	movwf	incrementor@upper_val+1
  1953  021C  083F               	movf	_w,w
  1954  021D  00DC               	movwf	incrementor@upper_val
  1955  021E  0842               	movf	_t+1,w
  1956  021F  00DF               	movwf	incrementor@lower_val+1
  1957  0220  0841               	movf	_t,w
  1958  0221  00DE               	movwf	incrementor@lower_val
  1959  0222  3039               	movlw	57
  1960  0223  00E1               	movwf	??_time_settings
  1961  0224  0861               	movf	??_time_settings,w
  1962  0225  00E0               	movwf	incrementor@z
  1963  0226  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1964  022B  00E2               	movwf	??_time_settings+1
  1965  022C  01E3               	clrf	??_time_settings+2
  1966  022D  0862               	movf	??_time_settings+1,w
  1967  022E  00BF               	movwf	_w
  1968  022F  0863               	movf	??_time_settings+2,w
  1969  0230  00C0               	movwf	_w+1
  1970                           
  1971                           ;Button_src.c: 237:                     if(c == (0x59 + 1)){
  1972  0231  305A               	movlw	90
  1973  0232  064F               	xorwf	_c,w
  1974  0233  1903               	btfsc	3,2
  1975                           
  1976                           ;Button_src.c: 238:                         c = 0x00;
  1977  0234  01CF               	clrf	_c
  1978                           
  1979                           ;Button_src.c: 240:                     if(w == 6){
  1980  0235  3006               	movlw	6
  1981  0236  063F               	xorwf	_w,w
  1982  0237  0440               	iorwf	_w+1,w
  1983  0238  1D03               	btfss	3,2
  1984  0239  2A3E               	goto	l3801
  1985                           
  1986                           ;Button_src.c: 241:                         w = 0;
  1987  023A  01BF               	clrf	_w
  1988  023B  01C0               	clrf	_w+1
  1989                           
  1990                           ;Button_src.c: 242:                         t = 0;
  1991  023C  01C1               	clrf	_t
  1992  023D  01C2               	clrf	_t+1
  1993  023E                     l3801:	
  1994                           
  1995                           ;Button_src.c: 244:                     button_delay();
  1996  023E  160A  118A  2693  120A  118A  	fcall	_button_delay
  1997  0243                     l3803:	
  1998                           
  1999                           ;Button_src.c: 247:              write_cmd(0x88);
  2000  0243  3088               	movlw	136
  2001  0244  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2002                           
  2003                           ;Button_src.c: 248:                     table[2] = a;
  2004  0249  0851               	movf	_a,w
  2005  024A  00E1               	movwf	??_time_settings
  2006  024B  0861               	movf	??_time_settings,w
  2007  024C  00EA               	movwf	_table+2
  2008                           
  2009                           ;Button_src.c: 249:                     table[1] = c;
  2010  024D  084F               	movf	_c,w
  2011  024E  00E1               	movwf	??_time_settings
  2012  024F  0861               	movf	??_time_settings,w
  2013  0250  00E9               	movwf	_table+1
  2014                           
  2015                           ;Button_src.c: 254:                     a = time_date_delimiter(a,0x11,'9');
  2016  0251  3011               	movlw	17
  2017  0252  00E1               	movwf	??_time_settings
  2018  0253  0861               	movf	??_time_settings,w
  2019  0254  00F0               	movwf	time_date_delimiter@hex
  2020  0255  3039               	movlw	57
  2021  0256  00E2               	movwf	??_time_settings+1
  2022  0257  0862               	movf	??_time_settings+1,w
  2023  0258  00F1               	movwf	time_date_delimiter@limiter
  2024  0259  0851               	movf	_a,w
  2025  025A  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2026  025F  00E3               	movwf	??_time_settings+2
  2027  0260  0863               	movf	??_time_settings+2,w
  2028  0261  00D1               	movwf	_a
  2029                           
  2030                           ;Button_src.c: 255:                     a = time_date_delimiter(a,0x21,'J');
  2031  0262  3021               	movlw	33
  2032  0263  00E1               	movwf	??_time_settings
  2033  0264  0861               	movf	??_time_settings,w
  2034  0265  00F0               	movwf	time_date_delimiter@hex
  2035  0266  304A               	movlw	74
  2036  0267  00E2               	movwf	??_time_settings+1
  2037  0268  0862               	movf	??_time_settings+1,w
  2038  0269  00F1               	movwf	time_date_delimiter@limiter
  2039  026A  0851               	movf	_a,w
  2040  026B  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2041  0270  00E3               	movwf	??_time_settings+2
  2042  0271  0863               	movf	??_time_settings+2,w
  2043  0272  00D1               	movwf	_a
  2044                           
  2045                           ;Button_src.c: 257:                     c = time_date_delimiter(c,0x11,'9');
  2046  0273  3011               	movlw	17
  2047  0274  00E1               	movwf	??_time_settings
  2048  0275  0861               	movf	??_time_settings,w
  2049  0276  00F0               	movwf	time_date_delimiter@hex
  2050  0277  3039               	movlw	57
  2051  0278  00E2               	movwf	??_time_settings+1
  2052  0279  0862               	movf	??_time_settings+1,w
  2053  027A  00F1               	movwf	time_date_delimiter@limiter
  2054  027B  084F               	movf	_c,w
  2055  027C  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2056  0281  00E3               	movwf	??_time_settings+2
  2057  0282  0863               	movf	??_time_settings+2,w
  2058  0283  00CF               	movwf	_c
  2059                           
  2060                           ;Button_src.c: 258:                     c = time_date_delimiter(c,0x21,'J');
  2061  0284  3021               	movlw	33
  2062  0285  00E1               	movwf	??_time_settings
  2063  0286  0861               	movf	??_time_settings,w
  2064  0287  00F0               	movwf	time_date_delimiter@hex
  2065  0288  304A               	movlw	74
  2066  0289  00E2               	movwf	??_time_settings+1
  2067  028A  0862               	movf	??_time_settings+1,w
  2068  028B  00F1               	movwf	time_date_delimiter@limiter
  2069  028C  084F               	movf	_c,w
  2070  028D  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2071  0292  00E3               	movwf	??_time_settings+2
  2072  0293  0863               	movf	??_time_settings+2,w
  2073  0294  00CF               	movwf	_c
  2074                           
  2075                           ;Button_src.c: 259:                     c = time_date_delimiter(c,0x31,'Y');
  2076  0295  3031               	movlw	49
  2077  0296  00E1               	movwf	??_time_settings
  2078  0297  0861               	movf	??_time_settings,w
  2079  0298  00F0               	movwf	time_date_delimiter@hex
  2080  0299  3059               	movlw	89
  2081  029A  00E2               	movwf	??_time_settings+1
  2082  029B  0862               	movf	??_time_settings+1,w
  2083  029C  00F1               	movwf	time_date_delimiter@limiter
  2084  029D  084F               	movf	_c,w
  2085  029E  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2086  02A3  00E3               	movwf	??_time_settings+2
  2087  02A4  0863               	movf	??_time_settings+2,w
  2088  02A5  00CF               	movwf	_c
  2089                           
  2090                           ;Button_src.c: 260:                     c = time_date_delimiter(c,0x41,'j');
  2091  02A6  3041               	movlw	65
  2092  02A7  00E1               	movwf	??_time_settings
  2093  02A8  0861               	movf	??_time_settings,w
  2094  02A9  00F0               	movwf	time_date_delimiter@hex
  2095  02AA  306A               	movlw	106
  2096  02AB  00E2               	movwf	??_time_settings+1
  2097  02AC  0862               	movf	??_time_settings+1,w
  2098  02AD  00F1               	movwf	time_date_delimiter@limiter
  2099  02AE  084F               	movf	_c,w
  2100  02AF  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2101  02B4  00E3               	movwf	??_time_settings+2
  2102  02B5  0863               	movf	??_time_settings+2,w
  2103  02B6  00CF               	movwf	_c
  2104                           
  2105                           ;Button_src.c: 261:                     c = time_date_delimiter(c,0x51,'z');
  2106  02B7  3051               	movlw	81
  2107  02B8  00E1               	movwf	??_time_settings
  2108  02B9  0861               	movf	??_time_settings,w
  2109  02BA  00F0               	movwf	time_date_delimiter@hex
  2110  02BB  307A               	movlw	122
  2111  02BC  00E2               	movwf	??_time_settings+1
  2112  02BD  0862               	movf	??_time_settings+1,w
  2113  02BE  00F1               	movwf	time_date_delimiter@limiter
  2114  02BF  084F               	movf	_c,w
  2115  02C0  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  2116  02C5  00E3               	movwf	??_time_settings+2
  2117  02C6  0863               	movf	??_time_settings+2,w
  2118  02C7  00CF               	movwf	_c
  2119                           
  2120                           ;Button_src.c: 263:                   RC0 = 0;
  2121  02C8  1007               	bcf	7,0	;volatile
  2122                           
  2123                           ;Button_src.c: 264:                   RC1 = 1;
  2124  02C9  1487               	bsf	7,1	;volatile
  2125                           
  2126                           ;Button_src.c: 265:                   RC2 = 1;
  2127  02CA  1507               	bsf	7,2	;volatile
  2128                           
  2129                           ;Button_src.c: 266:                   RC3 = 1;
  2130  02CB  1587               	bsf	7,3	;volatile
  2131                           
  2132                           ;Button_src.c: 267:                     if (RC6 == 0 ){
  2133  02CC  1B07               	btfsc	7,6	;volatile
  2134  02CD  2AE2               	goto	l581
  2135                           
  2136                           ;Button_src.c: 268:                           write_cmd(0x1);
  2137  02CE  3001               	movlw	1
  2138  02CF  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2139                           
  2140                           ;Button_src.c: 269:                           a = 0x00;
  2141  02D4  01D1               	clrf	_a
  2142                           
  2143                           ;Button_src.c: 270:                           c = 0x00;
  2144  02D5  01CF               	clrf	_c
  2145                           
  2146                           ;Button_src.c: 271:                           x = 0;
  2147  02D6  01BD               	clrf	_x
  2148  02D7  01BE               	clrf	_x+1
  2149                           
  2150                           ;Button_src.c: 272:                           y = 0;
  2151  02D8  01BB               	clrf	_y
  2152  02D9  01BC               	clrf	_y+1
  2153                           
  2154                           ;Button_src.c: 273:                           w = 0;
  2155  02DA  01BF               	clrf	_w
  2156  02DB  01C0               	clrf	_w+1
  2157                           
  2158                           ;Button_src.c: 274:                           t = 0;
  2159  02DC  01C1               	clrf	_t
  2160  02DD  01C2               	clrf	_t+1
  2161                           
  2162                           ;Button_src.c: 275:                           set_time();
  2163  02DE  120A  158A  2041   	fcall	_set_time
  2164  02E1  0008               	return
  2165  02E2                     l581:	
  2166                           ;Button_src.c: 277:                             }
  2167                           
  2168                           
  2169                           ;Button_src.c: 278:                   RC0 = 1;
  2170  02E2  1407               	bsf	7,0	;volatile
  2171                           
  2172                           ;Button_src.c: 279:                   RC1 = 1;
  2173  02E3  1487               	bsf	7,1	;volatile
  2174                           
  2175                           ;Button_src.c: 280:                   RC2 = 0;
  2176  02E4  1107               	bcf	7,2	;volatile
  2177                           
  2178                           ;Button_src.c: 281:                   RC3 = 1;
  2179  02E5  1587               	bsf	7,3	;volatile
  2180                           
  2181                           ;Button_src.c: 282:                   z = modulus_func(z,2);
  2182  02E6  083A               	movf	_z+1,w
  2183  02E7  00F8               	movwf	modulus_func@x+1
  2184  02E8  0839               	movf	_z,w
  2185  02E9  00F7               	movwf	modulus_func@x
  2186  02EA  3002               	movlw	2
  2187  02EB  00F9               	movwf	modulus_func@y
  2188  02EC  3000               	movlw	0
  2189  02ED  00FA               	movwf	modulus_func@y+1
  2190  02EE  160A  118A  2672  120A  118A  	fcall	_modulus_func
  2191  02F3  0878               	movf	?_modulus_func+1,w
  2192  02F4  00BA               	movwf	_z+1
  2193  02F5  0877               	movf	?_modulus_func,w
  2194  02F6  00B9               	movwf	_z
  2195                           
  2196                           ;Button_src.c: 283:                   if(RC4 == 0 && z ==0){
  2197  02F7  1A07               	btfsc	7,4	;volatile
  2198  02F8  2B32               	goto	l3863
  2199  02F9  0839               	movf	_z,w
  2200  02FA  043A               	iorwf	_z+1,w
  2201  02FB  1D03               	btfss	3,2
  2202  02FC  2B32               	goto	l3863
  2203                           
  2204                           ;Button_src.c: 284:                       write_cmd(0x90);
  2205  02FD  3090               	movlw	144
  2206  02FE  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2207                           
  2208                           ;Button_src.c: 285:                       write_char('H');
  2209  0303  3048               	movlw	72
  2210  0304  160A  118A  26E5  120A  118A  	fcall	_write_char
  2211                           
  2212                           ;Button_src.c: 286:                       write_char('o');
  2213  0309  306F               	movlw	111
  2214  030A  160A  118A  26E5  120A  118A  	fcall	_write_char
  2215                           
  2216                           ;Button_src.c: 287:                       write_char('u');
  2217  030F  3075               	movlw	117
  2218  0310  160A  118A  26E5  120A  118A  	fcall	_write_char
  2219                           
  2220                           ;Button_src.c: 288:                       write_char('r');
  2221  0315  3072               	movlw	114
  2222  0316  160A  118A  26E5  120A  118A  	fcall	_write_char
  2223                           
  2224                           ;Button_src.c: 289:                       write_char(':');
  2225  031B  303A               	movlw	58
  2226  031C  160A  118A  26E5  120A  118A  	fcall	_write_char
  2227                           
  2228                           ;Button_src.c: 290:                       b = 'x';
  2229  0321  3078               	movlw	120
  2230  0322  00E1               	movwf	??_time_settings
  2231  0323  0861               	movf	??_time_settings,w
  2232  0324  00D0               	movwf	_b
  2233                           
  2234                           ;Button_src.c: 291:                       button_delay();
  2235  0325  160A  118A  2693  120A  118A  	fcall	_button_delay
  2236                           
  2237                           ;Button_src.c: 292:                       z++;
  2238  032A  3001               	movlw	1
  2239  032B  1283               	bcf	3,5	;RP0=0, select bank0
  2240  032C  1303               	bcf	3,6	;RP1=0, select bank0
  2241  032D  07B9               	addwf	_z,f
  2242  032E  1803               	skipnc
  2243  032F  0ABA               	incf	_z+1,f
  2244  0330  3000               	movlw	0
  2245  0331  07BA               	addwf	_z+1,f
  2246  0332                     l3863:	
  2247                           
  2248                           ;Button_src.c: 294:                   RC0 = 1;
  2249  0332  1407               	bsf	7,0	;volatile
  2250                           
  2251                           ;Button_src.c: 295:                   RC1 = 1;
  2252  0333  1487               	bsf	7,1	;volatile
  2253                           
  2254                           ;Button_src.c: 296:                   RC2 = 0;
  2255  0334  1107               	bcf	7,2	;volatile
  2256                           
  2257                           ;Button_src.c: 297:                   RC3 = 1;
  2258  0335  1587               	bsf	7,3	;volatile
  2259                           
  2260                           ;Button_src.c: 299:                   if(RC4 == 0&& z ==1){
  2261  0336  1A07               	btfsc	7,4	;volatile
  2262  0337  2B6F               	goto	l584
  2263  0338  0339               	decf	_z,w
  2264  0339  043A               	iorwf	_z+1,w
  2265  033A  1D03               	btfss	3,2
  2266  033B  2B6F               	goto	l584
  2267                           
  2268                           ;Button_src.c: 300:                     z++;
  2269  033C  3001               	movlw	1
  2270  033D  07B9               	addwf	_z,f
  2271  033E  1803               	skipnc
  2272  033F  0ABA               	incf	_z+1,f
  2273  0340  3000               	movlw	0
  2274  0341  07BA               	addwf	_z+1,f
  2275                           
  2276                           ;Button_src.c: 301:                     button_delay();
  2277  0342  160A  118A  2693  120A  118A  	fcall	_button_delay
  2278                           
  2279                           ;Button_src.c: 302:                     write_cmd(0x90);
  2280  0347  3090               	movlw	144
  2281  0348  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2282                           
  2283                           ;Button_src.c: 303:                     write_char('M');
  2284  034D  304D               	movlw	77
  2285  034E  160A  118A  26E5  120A  118A  	fcall	_write_char
  2286                           
  2287                           ;Button_src.c: 304:                     write_char('i');
  2288  0353  3069               	movlw	105
  2289  0354  160A  118A  26E5  120A  118A  	fcall	_write_char
  2290                           
  2291                           ;Button_src.c: 305:                     write_char('n');
  2292  0359  306E               	movlw	110
  2293  035A  160A  118A  26E5  120A  118A  	fcall	_write_char
  2294                           
  2295                           ;Button_src.c: 306:                     write_char('s');
  2296  035F  3073               	movlw	115
  2297  0360  160A  118A  26E5  120A  118A  	fcall	_write_char
  2298                           
  2299                           ;Button_src.c: 307:                     write_char(':');
  2300  0365  303A               	movlw	58
  2301  0366  160A  118A  26E5  120A  118A  	fcall	_write_char
  2302                           
  2303                           ;Button_src.c: 308:                     b = 'y';
  2304  036B  3079               	movlw	121
  2305  036C  00E1               	movwf	??_time_settings
  2306  036D  0861               	movf	??_time_settings,w
  2307  036E  00D0               	movwf	_b
  2308  036F                     l584:	
  2309                           ;Button_src.c: 309:                   }
  2310                           
  2311                           
  2312                           ;Button_src.c: 310:                    write_cmd(0x88);
  2313  036F  3088               	movlw	136
  2314  0370  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2315                           
  2316                           ;Button_src.c: 317:                   RC0 = 1;
  2317  0375  1407               	bsf	7,0	;volatile
  2318                           
  2319                           ;Button_src.c: 318:                   RC1 = 1;
  2320  0376  1487               	bsf	7,1	;volatile
  2321                           
  2322                           ;Button_src.c: 319:                   RC2 = 0;
  2323  0377  1107               	bcf	7,2	;volatile
  2324                           
  2325                           ;Button_src.c: 320:                   RC3 = 1;
  2326  0378  1587               	bsf	7,3	;volatile
  2327                           
  2328                           ;Button_src.c: 322:              write_cmd(0x88);
  2329  0379  3088               	movlw	136
  2330  037A  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  2331                           
  2332                           ;Button_src.c: 323:              write_char('T');
  2333  037F  3054               	movlw	84
  2334  0380  160A  118A  26E5  120A  118A  	fcall	_write_char
  2335                           
  2336                           ;Button_src.c: 324:              write_char('i');
  2337  0385  3069               	movlw	105
  2338  0386  160A  118A  26E5  120A  118A  	fcall	_write_char
  2339                           
  2340                           ;Button_src.c: 325:              write_char('m');
  2341  038B  306D               	movlw	109
  2342  038C  160A  118A  26E5  120A  118A  	fcall	_write_char
  2343                           
  2344                           ;Button_src.c: 326:              write_char('e');
  2345  0391  3065               	movlw	101
  2346  0392  160A  118A  26E5  120A  118A  	fcall	_write_char
  2347                           
  2348                           ;Button_src.c: 327:              write_char(':');
  2349  0397  303A               	movlw	58
  2350  0398  160A  118A  26E5  120A  118A  	fcall	_write_char
  2351                           
  2352                           ;Button_src.c: 328:              write_char(y + '0');
  2353  039D  083B               	movf	_y,w
  2354  039E  3E30               	addlw	48
  2355  039F  160A  118A  26E5  120A  118A  	fcall	_write_char
  2356                           
  2357                           ;Button_src.c: 329:              write_char(x + '0');
  2358  03A4  083D               	movf	_x,w
  2359  03A5  3E30               	addlw	48
  2360  03A6  160A  118A  26E5  120A  118A  	fcall	_write_char
  2361                           
  2362                           ;Button_src.c: 330:              write_char(':');
  2363  03AB  303A               	movlw	58
  2364  03AC  160A  118A  26E5  120A  118A  	fcall	_write_char
  2365                           
  2366                           ;Button_src.c: 331:              write_char(w + '0');
  2367  03B1  083F               	movf	_w,w
  2368  03B2  3E30               	addlw	48
  2369  03B3  160A  118A  26E5  120A  118A  	fcall	_write_char
  2370                           
  2371                           ;Button_src.c: 332:              write_char(t + '0');
  2372  03B8  0841               	movf	_t,w
  2373  03B9  3E30               	addlw	48
  2374  03BA  160A  118A  26E5  120A  118A  	fcall	_write_char
  2375                           
  2376                           ;Button_src.c: 334:             RC0 = 0;
  2377  03BF  1007               	bcf	7,0	;volatile
  2378                           
  2379                           ;Button_src.c: 335:             RC1 = 1;
  2380  03C0  1487               	bsf	7,1	;volatile
  2381                           
  2382                           ;Button_src.c: 336:             RC2 = 1;
  2383  03C1  1507               	bsf	7,2	;volatile
  2384                           
  2385                           ;Button_src.c: 337:             RC3 = 1;
  2386  03C2  1587               	bsf	7,3	;volatile
  2387                           
  2388                           ;Button_src.c: 338:             if (RC7 == 0 ){
  2389  03C3  1B87               	btfsc	7,7	;volatile
  2390  03C4  28FA               	goto	l567
  2391                           
  2392                           ;Button_src.c: 339:             a = 0x00;
  2393  03C5  01D1               	clrf	_a
  2394                           
  2395                           ;Button_src.c: 340:             c = 0x00;
  2396  03C6  01CF               	clrf	_c
  2397                           
  2398                           ;Button_src.c: 341:             x = 0;
  2399  03C7  01BD               	clrf	_x
  2400  03C8  01BE               	clrf	_x+1
  2401                           
  2402                           ;Button_src.c: 342:             y = 0;
  2403  03C9  01BB               	clrf	_y
  2404  03CA  01BC               	clrf	_y+1
  2405                           
  2406                           ;Button_src.c: 343:             w = 0;
  2407  03CB  01BF               	clrf	_w
  2408  03CC  01C0               	clrf	_w+1
  2409                           
  2410                           ;Button_src.c: 344:             t = 0;
  2411  03CD  01C1               	clrf	_t
  2412  03CE  01C2               	clrf	_t+1
  2413                           
  2414                           ;Button_src.c: 345:             write_cmd(0x1);
  2415  03CF  3001               	movlw	1
  2416  03D0  160A  118A  26FC   	fcall	_write_cmd
  2417                           
  2418                           ;Button_src.c: 346:             break;
  2419  03D3  0008               	return
  2420  03D4                     __end_of_time_settings:	
  2421                           
  2422                           	psect	text2
  2423  0DAA                     __ptext2:	
  2424 ;; *************** function _thermometer_threshhold_settings *****************
  2425 ;; Defined at:
  2426 ;;		line 23 in file "Button_src.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;  i               2    8[BANK0 ] int 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 300/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2440 ;;      Params:         0       0       0       0       0
  2441 ;;      Locals:         0       2       0       0       0
  2442 ;;      Temps:          0       3       0       0       0
  2443 ;;      Totals:         0       5       0       0       0
  2444 ;;Total ram usage:        5 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    3
  2447 ;; This function calls:
  2448 ;;		_button_delay
  2449 ;;		_decrementor
  2450 ;;		_incrementor
  2451 ;;		_modulus_func
  2452 ;;		_write_char
  2453 ;;		_write_cmd
  2454 ;; This function is called by:
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           
  2460                           ;psect for function _thermometer_threshhold_settings
  2461  0DAA                     _thermometer_threshhold_settings:	
  2462                           
  2463                           ;Button_src.c: 24:  RC0 = 1;
  2464                           
  2465                           ;incstack = 0
  2466                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2467  0DAA  1407               	bsf	7,0	;volatile
  2468                           
  2469                           ;Button_src.c: 25:  RC1 = 0;
  2470  0DAB  1087               	bcf	7,1	;volatile
  2471                           
  2472                           ;Button_src.c: 26:  RC2 = 1;
  2473  0DAC  1507               	bsf	7,2	;volatile
  2474                           
  2475                           ;Button_src.c: 27:  RC3 = 1;
  2476  0DAD  1587               	bsf	7,3	;volatile
  2477                           
  2478                           ;Button_src.c: 28:   if (RC4 == 0){
  2479  0DAE  1A07               	btfsc	7,4	;volatile
  2480  0DAF  0008               	return
  2481                           
  2482                           ;Button_src.c: 29:       write_cmd(0x1);
  2483  0DB0  3001               	movlw	1
  2484  0DB1  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2485                           
  2486                           ;Button_src.c: 31:             write_cmd(0x80);
  2487                           
  2488                           ;Button_src.c: 30:       for(;;){
  2489  0DB6  3080               	movlw	128
  2490  0DB7  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2491                           
  2492                           ;Button_src.c: 32:             write_char('t');
  2493  0DBC  3074               	movlw	116
  2494  0DBD  160A  118A  26E5  120A  158A  	fcall	_write_char
  2495                           
  2496                           ;Button_src.c: 33:             write_char('h');
  2497  0DC2  3068               	movlw	104
  2498  0DC3  160A  118A  26E5  120A  158A  	fcall	_write_char
  2499                           
  2500                           ;Button_src.c: 34:             write_char('r');
  2501  0DC8  3072               	movlw	114
  2502  0DC9  160A  118A  26E5  120A  158A  	fcall	_write_char
  2503                           
  2504                           ;Button_src.c: 35:             write_char('e');
  2505  0DCE  3065               	movlw	101
  2506  0DCF  160A  118A  26E5  120A  158A  	fcall	_write_char
  2507                           
  2508                           ;Button_src.c: 36:             write_char('s');
  2509  0DD4  3073               	movlw	115
  2510  0DD5  160A  118A  26E5  120A  158A  	fcall	_write_char
  2511                           
  2512                           ;Button_src.c: 37:             write_char('h');
  2513  0DDA  3068               	movlw	104
  2514  0DDB  160A  118A  26E5  120A  158A  	fcall	_write_char
  2515                           
  2516                           ;Button_src.c: 38:             write_char('o');
  2517  0DE0  306F               	movlw	111
  2518  0DE1  160A  118A  26E5  120A  158A  	fcall	_write_char
  2519                           
  2520                           ;Button_src.c: 39:             write_char('l');
  2521  0DE6  306C               	movlw	108
  2522  0DE7  160A  118A  26E5  120A  158A  	fcall	_write_char
  2523                           
  2524                           ;Button_src.c: 40:             write_char('d');
  2525  0DEC  3064               	movlw	100
  2526  0DED  160A  118A  26E5  120A  158A  	fcall	_write_char
  2527                           
  2528                           ;Button_src.c: 42:             write_cmd(0x90);
  2529  0DF2  3090               	movlw	144
  2530  0DF3  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2531                           
  2532                           ;Button_src.c: 43:             write_char('C');
  2533  0DF8  3043               	movlw	67
  2534  0DF9  160A  118A  26E5  120A  158A  	fcall	_write_char
  2535                           
  2536                           ;Button_src.c: 44:             write_char('u');
  2537  0DFE  3075               	movlw	117
  2538  0DFF  160A  118A  26E5  120A  158A  	fcall	_write_char
  2539                           
  2540                           ;Button_src.c: 45:             write_char('r');
  2541  0E04  3072               	movlw	114
  2542  0E05  160A  118A  26E5  120A  158A  	fcall	_write_char
  2543                           
  2544                           ;Button_src.c: 46:             write_char('r');
  2545  0E0A  3072               	movlw	114
  2546  0E0B  160A  118A  26E5  120A  158A  	fcall	_write_char
  2547                           
  2548                           ;Button_src.c: 47:             write_char('e');
  2549  0E10  3065               	movlw	101
  2550  0E11  160A  118A  26E5  120A  158A  	fcall	_write_char
  2551                           
  2552                           ;Button_src.c: 48:             write_char('n');
  2553  0E16  306E               	movlw	110
  2554  0E17  160A  118A  26E5  120A  158A  	fcall	_write_char
  2555                           
  2556                           ;Button_src.c: 49:             write_char('t');
  2557  0E1C  3074               	movlw	116
  2558  0E1D  160A  118A  26E5  120A  158A  	fcall	_write_char
  2559                           
  2560                           ;Button_src.c: 50:             write_char(':');
  2561  0E22  303A               	movlw	58
  2562  0E23  160A  118A  26E5  120A  158A  	fcall	_write_char
  2563                           
  2564                           ;Button_src.c: 52:             write_char(var1 + '0');
  2565  0E28  0847               	movf	_var1,w
  2566  0E29  3E30               	addlw	48
  2567  0E2A  160A  118A  26E5  120A  158A  	fcall	_write_char
  2568                           
  2569                           ;Button_src.c: 53:             write_char(var2 + '0');
  2570  0E2F  0846               	movf	_var2,w
  2571  0E30  3E30               	addlw	48
  2572  0E31  160A  118A  26E5  120A  158A  	fcall	_write_char
  2573                           
  2574                           ;Button_src.c: 55:             write_cmd(0x88);
  2575  0E36  3088               	movlw	136
  2576  0E37  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2577                           
  2578                           ;Button_src.c: 56:             write_char('S');
  2579  0E3C  3053               	movlw	83
  2580  0E3D  160A  118A  26E5  120A  158A  	fcall	_write_char
  2581                           
  2582                           ;Button_src.c: 57:             write_char('e');
  2583  0E42  3065               	movlw	101
  2584  0E43  160A  118A  26E5  120A  158A  	fcall	_write_char
  2585                           
  2586                           ;Button_src.c: 58:             write_char('t');
  2587  0E48  3074               	movlw	116
  2588  0E49  160A  118A  26E5  120A  158A  	fcall	_write_char
  2589                           
  2590                           ;Button_src.c: 59:             write_char('_');
  2591  0E4E  305F               	movlw	95
  2592  0E4F  160A  118A  26E5  120A  158A  	fcall	_write_char
  2593                           
  2594                           ;Button_src.c: 60:             write_char('t');
  2595  0E54  3074               	movlw	116
  2596  0E55  160A  118A  26E5  120A  158A  	fcall	_write_char
  2597                           
  2598                           ;Button_src.c: 61:             write_char('h');
  2599  0E5A  3068               	movlw	104
  2600  0E5B  160A  118A  26E5  120A  158A  	fcall	_write_char
  2601                           
  2602                           ;Button_src.c: 62:             write_char('r');
  2603  0E60  3072               	movlw	114
  2604  0E61  160A  118A  26E5  120A  158A  	fcall	_write_char
  2605                           
  2606                           ;Button_src.c: 63:             write_char('e');
  2607  0E66  3065               	movlw	101
  2608  0E67  160A  118A  26E5  120A  158A  	fcall	_write_char
  2609                           
  2610                           ;Button_src.c: 64:             write_char('s');
  2611  0E6C  3073               	movlw	115
  2612  0E6D  160A  118A  26E5  120A  158A  	fcall	_write_char
  2613                           
  2614                           ;Button_src.c: 65:             write_char('h');
  2615  0E72  3068               	movlw	104
  2616  0E73  160A  118A  26E5  120A  158A  	fcall	_write_char
  2617                           
  2618                           ;Button_src.c: 66:             write_char('o');
  2619  0E78  306F               	movlw	111
  2620  0E79  160A  118A  26E5  120A  158A  	fcall	_write_char
  2621                           
  2622                           ;Button_src.c: 67:             write_char('l');
  2623  0E7E  306C               	movlw	108
  2624  0E7F  160A  118A  26E5  120A  158A  	fcall	_write_char
  2625                           
  2626                           ;Button_src.c: 68:             write_char('d');
  2627  0E84  3064               	movlw	100
  2628  0E85  160A  118A  26E5  120A  158A  	fcall	_write_char
  2629                           
  2630                           ;Button_src.c: 69:             write_char(':');
  2631  0E8A  303A               	movlw	58
  2632  0E8B  160A  118A  26E5  120A  158A  	fcall	_write_char
  2633                           
  2634                           ;Button_src.c: 71:             write_cmd(0x98);
  2635  0E90  3098               	movlw	152
  2636  0E91  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2637                           
  2638                           ;Button_src.c: 72:             RC0 = 1;
  2639  0E96  1407               	bsf	7,0	;volatile
  2640                           
  2641                           ;Button_src.c: 73:             RC1 = 0;
  2642  0E97  1087               	bcf	7,1	;volatile
  2643                           
  2644                           ;Button_src.c: 74:             RC2 = 1;
  2645  0E98  1507               	bsf	7,2	;volatile
  2646                           
  2647                           ;Button_src.c: 75:             RC3 = 1;
  2648  0E99  1587               	bsf	7,3	;volatile
  2649                           
  2650                           ;Button_src.c: 76:             t = 0;
  2651  0E9A  01C1               	clrf	_t
  2652  0E9B  01C2               	clrf	_t+1
  2653                           
  2654                           ;Button_src.c: 77:             w = 0;
  2655  0E9C  01BF               	clrf	_w
  2656  0E9D  01C0               	clrf	_w+1
  2657                           
  2658                           ;Button_src.c: 78:             x = 0;
  2659  0E9E  01BD               	clrf	_x
  2660  0E9F  01BE               	clrf	_x+1
  2661                           
  2662                           ;Button_src.c: 79:             y = 0;
  2663  0EA0  01BB               	clrf	_y
  2664  0EA1  01BC               	clrf	_y+1
  2665                           
  2666                           ;Button_src.c: 80:             x = 0x00;
  2667  0EA2  01BD               	clrf	_x
  2668  0EA3  01BE               	clrf	_x+1
  2669  0EA4                     l3343:	
  2670                           
  2671                           ;Button_src.c: 82:                  RC0 = 1;
  2672  0EA4  1407               	bsf	7,0	;volatile
  2673                           
  2674                           ;Button_src.c: 83:                  RC1 = 0;
  2675  0EA5  1087               	bcf	7,1	;volatile
  2676                           
  2677                           ;Button_src.c: 84:                  RC2 = 1;
  2678  0EA6  1507               	bsf	7,2	;volatile
  2679                           
  2680                           ;Button_src.c: 85:                  RC3 = 1;
  2681  0EA7  1587               	bsf	7,3	;volatile
  2682                           
  2683                           ;Button_src.c: 87:                 if(RC7==0){
  2684  0EA8  1B87               	btfsc	7,7	;volatile
  2685  0EA9  2F03               	goto	l3371
  2686                           
  2687                           ;Button_src.c: 88:                     write_cmd(0x98);
  2688  0EAA  3098               	movlw	152
  2689  0EAB  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2690                           
  2691                           ;Button_src.c: 89:                     x++;
  2692  0EB0  3001               	movlw	1
  2693  0EB1  07BD               	addwf	_x,f
  2694  0EB2  1803               	skipnc
  2695  0EB3  0ABE               	incf	_x+1,f
  2696  0EB4  3000               	movlw	0
  2697  0EB5  07BE               	addwf	_x+1,f
  2698                           
  2699                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2700  0EB6  083B               	movf	_y,w
  2701  0EB7  00E1               	movwf	??_thermometer_threshhold_settings
  2702  0EB8  01E2               	clrf	??_thermometer_threshhold_settings+1
  2703  0EB9  0861               	movf	??_thermometer_threshhold_settings,w
  2704  0EBA  00BB               	movwf	_y
  2705  0EBB  0862               	movf	??_thermometer_threshhold_settings+1,w
  2706  0EBC  00BC               	movwf	_y+1
  2707                           
  2708                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2709  0EBD  083E               	movf	_x+1,w
  2710  0EBE  00F8               	movwf	modulus_func@x+1
  2711  0EBF  083D               	movf	_x,w
  2712  0EC0  00F7               	movwf	modulus_func@x
  2713  0EC1  300A               	movlw	10
  2714  0EC2  00F9               	movwf	modulus_func@y
  2715  0EC3  3000               	movlw	0
  2716  0EC4  00FA               	movwf	modulus_func@y+1
  2717  0EC5  160A  118A  2672  120A  158A  	fcall	_modulus_func
  2718  0ECA  0877               	movf	?_modulus_func,w
  2719  0ECB  00E1               	movwf	??_thermometer_threshhold_settings
  2720  0ECC  01E2               	clrf	??_thermometer_threshhold_settings+1
  2721  0ECD  0861               	movf	??_thermometer_threshhold_settings,w
  2722  0ECE  00BD               	movwf	_x
  2723  0ECF  0862               	movf	??_thermometer_threshhold_settings+1,w
  2724  0ED0  00BE               	movwf	_x+1
  2725                           
  2726                           ;Button_src.c: 92:                     write_char(y + '0');
  2727  0ED1  083B               	movf	_y,w
  2728  0ED2  3E30               	addlw	48
  2729  0ED3  160A  118A  26E5  120A  158A  	fcall	_write_char
  2730                           
  2731                           ;Button_src.c: 93:                     write_char(x + '0');
  2732  0ED8  083D               	movf	_x,w
  2733  0ED9  3E30               	addlw	48
  2734  0EDA  160A  118A  26E5  120A  158A  	fcall	_write_char
  2735                           
  2736                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2737  0EDF  083C               	movf	_y+1,w
  2738  0EE0  00DD               	movwf	incrementor@upper_val+1
  2739  0EE1  083B               	movf	_y,w
  2740  0EE2  00DC               	movwf	incrementor@upper_val
  2741  0EE3  083E               	movf	_x+1,w
  2742  0EE4  00DF               	movwf	incrementor@lower_val+1
  2743  0EE5  083D               	movf	_x,w
  2744  0EE6  00DE               	movwf	incrementor@lower_val
  2745  0EE7  3039               	movlw	57
  2746  0EE8  00E1               	movwf	??_thermometer_threshhold_settings
  2747  0EE9  0861               	movf	??_thermometer_threshhold_settings,w
  2748  0EEA  00E0               	movwf	incrementor@z
  2749  0EEB  160A  118A  27B8  120A  158A  	fcall	_incrementor
  2750  0EF0  00E2               	movwf	??_thermometer_threshhold_settings+1
  2751  0EF1  01E3               	clrf	??_thermometer_threshhold_settings+2
  2752  0EF2  0862               	movf	??_thermometer_threshhold_settings+1,w
  2753  0EF3  00BB               	movwf	_y
  2754  0EF4  0863               	movf	??_thermometer_threshhold_settings+2,w
  2755  0EF5  00BC               	movwf	_y+1
  2756                           
  2757                           ;Button_src.c: 95:                     t = x;
  2758  0EF6  083E               	movf	_x+1,w
  2759  0EF7  00C2               	movwf	_t+1
  2760  0EF8  083D               	movf	_x,w
  2761  0EF9  00C1               	movwf	_t
  2762                           
  2763                           ;Button_src.c: 96:                     w = y;
  2764  0EFA  083C               	movf	_y+1,w
  2765  0EFB  00C0               	movwf	_w+1
  2766  0EFC  083B               	movf	_y,w
  2767  0EFD  00BF               	movwf	_w
  2768                           
  2769                           ;Button_src.c: 97:                     button_delay();
  2770  0EFE  160A  118A  2693  120A  158A  	fcall	_button_delay
  2771  0F03                     l3371:	
  2772                           
  2773                           ;Button_src.c: 99:                   RC0 = 0;
  2774  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  2775  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  2776  0F05  1007               	bcf	7,0	;volatile
  2777                           
  2778                           ;Button_src.c: 100:                     RC1 = 1;
  2779  0F06  1487               	bsf	7,1	;volatile
  2780                           
  2781                           ;Button_src.c: 101:                     RC2 = 1;
  2782  0F07  1507               	bsf	7,2	;volatile
  2783                           
  2784                           ;Button_src.c: 102:                     RC3 = 1;
  2785  0F08  1587               	bsf	7,3	;volatile
  2786                           
  2787                           ;Button_src.c: 103:                     if(RC6 == 0){
  2788  0F09  1B07               	btfsc	7,6	;volatile
  2789  0F0A  2F4D               	goto	l554
  2790                           
  2791                           ;Button_src.c: 104:                         var1 = y;
  2792  0F0B  083B               	movf	_y,w
  2793  0F0C  00E1               	movwf	??_thermometer_threshhold_settings
  2794  0F0D  0861               	movf	??_thermometer_threshhold_settings,w
  2795  0F0E  00C7               	movwf	_var1
  2796                           
  2797                           ;Button_src.c: 105:                         var2 = x;
  2798  0F0F  083D               	movf	_x,w
  2799  0F10  00E1               	movwf	??_thermometer_threshhold_settings
  2800  0F11  0861               	movf	??_thermometer_threshhold_settings,w
  2801  0F12  00C6               	movwf	_var2
  2802                           
  2803                           ;Button_src.c: 107:                         write_cmd(0x1);
  2804  0F13  3001               	movlw	1
  2805  0F14  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2806                           
  2807                           ;Button_src.c: 108:                         write_char('S');
  2808  0F19  3053               	movlw	83
  2809  0F1A  160A  118A  26E5  120A  158A  	fcall	_write_char
  2810                           
  2811                           ;Button_src.c: 109:                         write_char('A');
  2812  0F1F  3041               	movlw	65
  2813  0F20  160A  118A  26E5  120A  158A  	fcall	_write_char
  2814                           
  2815                           ;Button_src.c: 110:                         write_char('V');
  2816  0F25  3056               	movlw	86
  2817  0F26  160A  118A  26E5  120A  158A  	fcall	_write_char
  2818                           
  2819                           ;Button_src.c: 111:                         write_char('E');
  2820  0F2B  3045               	movlw	69
  2821  0F2C  160A  118A  26E5  120A  158A  	fcall	_write_char
  2822                           
  2823                           ;Button_src.c: 112:                         write_char('D');
  2824  0F31  3044               	movlw	68
  2825  0F32  160A  118A  26E5  120A  158A  	fcall	_write_char
  2826                           
  2827                           ;Button_src.c: 113:                         for(int i=0;i<30000;i++);
  2828  0F37  01E4               	clrf	thermometer_threshhold_settings@i
  2829  0F38  01E5               	clrf	thermometer_threshhold_settings@i+1
  2830  0F39                     l3401:	
  2831  0F39  3001               	movlw	1
  2832  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2833  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2834  0F3C  07E4               	addwf	thermometer_threshhold_settings@i,f
  2835  0F3D  1803               	skipnc
  2836  0F3E  0AE5               	incf	thermometer_threshhold_settings@i+1,f
  2837  0F3F  3000               	movlw	0
  2838  0F40  07E5               	addwf	thermometer_threshhold_settings@i+1,f
  2839  0F41  0865               	movf	thermometer_threshhold_settings@i+1,w
  2840  0F42  3A80               	xorlw	128
  2841  0F43  00FF               	movwf	127
  2842  0F44  30F5               	movlw	245
  2843  0F45  027F               	subwf	127,w
  2844  0F46  1D03               	skipz
  2845  0F47  2F4A               	goto	u2055
  2846  0F48  3030               	movlw	48
  2847  0F49  0264               	subwf	thermometer_threshhold_settings@i,w
  2848  0F4A                     u2055:	
  2849  0F4A  1803               	btfsc	3,0
  2850  0F4B  0008               	return
  2851  0F4C  2F39               	goto	l3401
  2852  0F4D                     l554:	
  2853                           ;Button_src.c: 115:                     }
  2854                           
  2855                           
  2856                           ;Button_src.c: 116:                  RC0 = 1;
  2857  0F4D  1407               	bsf	7,0	;volatile
  2858                           
  2859                           ;Button_src.c: 117:                  RC1 = 1;
  2860  0F4E  1487               	bsf	7,1	;volatile
  2861                           
  2862                           ;Button_src.c: 118:                  RC2 = 0;
  2863  0F4F  1107               	bcf	7,2	;volatile
  2864                           
  2865                           ;Button_src.c: 119:                  RC3 = 1;
  2866  0F50  1587               	bsf	7,3	;volatile
  2867                           
  2868                           ;Button_src.c: 121:                  if(RC7 == 0){
  2869  0F51  1B87               	btfsc	7,7	;volatile
  2870  0F52  2FBD               	goto	l3425
  2871                           
  2872                           ;Button_src.c: 122:                     write_cmd(0x98);
  2873  0F53  3098               	movlw	152
  2874  0F54  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  2875                           
  2876                           ;Button_src.c: 123:                       t--;
  2877  0F59  3001               	movlw	1
  2878  0F5A  02C1               	subwf	_t,f
  2879  0F5B  3000               	movlw	0
  2880  0F5C  1C03               	skipc
  2881  0F5D  03C2               	decf	_t+1,f
  2882  0F5E  02C2               	subwf	_t+1,f
  2883                           
  2884                           ;Button_src.c: 124:                     w = (unsigned char )w;
  2885  0F5F  083F               	movf	_w,w
  2886  0F60  00E1               	movwf	??_thermometer_threshhold_settings
  2887  0F61  01E2               	clrf	??_thermometer_threshhold_settings+1
  2888  0F62  0861               	movf	??_thermometer_threshhold_settings,w
  2889  0F63  00BF               	movwf	_w
  2890  0F64  0862               	movf	??_thermometer_threshhold_settings+1,w
  2891  0F65  00C0               	movwf	_w+1
  2892                           
  2893                           ;Button_src.c: 125:                     t = (unsigned char )(modulus_func(t,10));
  2894  0F66  0842               	movf	_t+1,w
  2895  0F67  00F8               	movwf	modulus_func@x+1
  2896  0F68  0841               	movf	_t,w
  2897  0F69  00F7               	movwf	modulus_func@x
  2898  0F6A  300A               	movlw	10
  2899  0F6B  00F9               	movwf	modulus_func@y
  2900  0F6C  3000               	movlw	0
  2901  0F6D  00FA               	movwf	modulus_func@y+1
  2902  0F6E  160A  118A  2672  120A  158A  	fcall	_modulus_func
  2903  0F73  0877               	movf	?_modulus_func,w
  2904  0F74  00E1               	movwf	??_thermometer_threshhold_settings
  2905  0F75  01E2               	clrf	??_thermometer_threshhold_settings+1
  2906  0F76  0861               	movf	??_thermometer_threshhold_settings,w
  2907  0F77  00C1               	movwf	_t
  2908  0F78  0862               	movf	??_thermometer_threshhold_settings+1,w
  2909  0F79  00C2               	movwf	_t+1
  2910                           
  2911                           ;Button_src.c: 126:                     write_char(w + '0');
  2912  0F7A  083F               	movf	_w,w
  2913  0F7B  3E30               	addlw	48
  2914  0F7C  160A  118A  26E5  120A  158A  	fcall	_write_char
  2915                           
  2916                           ;Button_src.c: 127:                     write_char(t + '0');
  2917  0F81  0841               	movf	_t,w
  2918  0F82  3E30               	addlw	48
  2919  0F83  160A  118A  26E5  120A  158A  	fcall	_write_char
  2920                           
  2921                           ;Button_src.c: 128:                     w = decrementor(w,t,'0');
  2922  0F88  0840               	movf	_w+1,w
  2923  0F89  00DD               	movwf	decrementor@lower_val+1
  2924  0F8A  083F               	movf	_w,w
  2925  0F8B  00DC               	movwf	decrementor@lower_val
  2926  0F8C  0842               	movf	_t+1,w
  2927  0F8D  00DF               	movwf	decrementor@upper_val+1
  2928  0F8E  0841               	movf	_t,w
  2929  0F8F  00DE               	movwf	decrementor@upper_val
  2930  0F90  3030               	movlw	48
  2931  0F91  00E1               	movwf	??_thermometer_threshhold_settings
  2932  0F92  0861               	movf	??_thermometer_threshhold_settings,w
  2933  0F93  00E0               	movwf	decrementor@z
  2934  0F94  160A  118A  27DC  120A  158A  	fcall	_decrementor
  2935  0F99  00E2               	movwf	??_thermometer_threshhold_settings+1
  2936  0F9A  01E3               	clrf	??_thermometer_threshhold_settings+2
  2937  0F9B  0862               	movf	??_thermometer_threshhold_settings+1,w
  2938  0F9C  00BF               	movwf	_w
  2939  0F9D  0863               	movf	??_thermometer_threshhold_settings+2,w
  2940  0F9E  00C0               	movwf	_w+1
  2941                           
  2942                           ;Button_src.c: 129:                     if((t + '0')=='0'){
  2943  0F9F  0841               	movf	_t,w
  2944  0FA0  3E30               	addlw	48
  2945  0FA1  00E1               	movwf	??_thermometer_threshhold_settings
  2946  0FA2  0842               	movf	_t+1,w
  2947  0FA3  1803               	skipnc
  2948  0FA4  3E01               	addlw	1
  2949  0FA5  3E00               	addlw	0
  2950  0FA6  00E2               	movwf	??_thermometer_threshhold_settings+1
  2951  0FA7  3030               	movlw	48
  2952  0FA8  0661               	xorwf	??_thermometer_threshhold_settings,w
  2953  0FA9  0462               	iorwf	??_thermometer_threshhold_settings+1,w
  2954  0FAA  1D03               	btfss	3,2
  2955  0FAB  2FB0               	goto	l559
  2956                           
  2957                           ;Button_src.c: 130:                         t = 10;
  2958  0FAC  300A               	movlw	10
  2959  0FAD  00C1               	movwf	_t
  2960  0FAE  3000               	movlw	0
  2961  0FAF  00C2               	movwf	_t+1
  2962  0FB0                     l559:	
  2963                           ;Button_src.c: 131:                     }
  2964                           
  2965                           
  2966                           ;Button_src.c: 133:                     x = t;
  2967  0FB0  0842               	movf	_t+1,w
  2968  0FB1  00BE               	movwf	_x+1
  2969  0FB2  0841               	movf	_t,w
  2970  0FB3  00BD               	movwf	_x
  2971                           
  2972                           ;Button_src.c: 134:                     y = w;
  2973  0FB4  0840               	movf	_w+1,w
  2974  0FB5  00BC               	movwf	_y+1
  2975  0FB6  083F               	movf	_w,w
  2976  0FB7  00BB               	movwf	_y
  2977                           
  2978                           ;Button_src.c: 135:                     button_delay();
  2979  0FB8  160A  118A  2693  120A  158A  	fcall	_button_delay
  2980  0FBD                     l3425:	
  2981                           
  2982                           ;Button_src.c: 137:                 RC0 = 0;
  2983  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2984  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2985  0FBF  1007               	bcf	7,0	;volatile
  2986                           
  2987                           ;Button_src.c: 138:                 RC1 = 1;
  2988  0FC0  1487               	bsf	7,1	;volatile
  2989                           
  2990                           ;Button_src.c: 139:                 RC2 = 1;
  2991  0FC1  1507               	bsf	7,2	;volatile
  2992                           
  2993                           ;Button_src.c: 140:                 RC3 = 1;
  2994  0FC2  1587               	bsf	7,3	;volatile
  2995                           
  2996                           ;Button_src.c: 141:                     if(RC6 == 0){
  2997  0FC3  1B07               	btfsc	7,6	;volatile
  2998  0FC4  2FF5               	goto	l560
  2999                           
  3000                           ;Button_src.c: 142:                         var1 = w;
  3001  0FC5  083F               	movf	_w,w
  3002  0FC6  00E1               	movwf	??_thermometer_threshhold_settings
  3003  0FC7  0861               	movf	??_thermometer_threshhold_settings,w
  3004  0FC8  00C7               	movwf	_var1
  3005                           
  3006                           ;Button_src.c: 143:                         var2 = t;
  3007  0FC9  0841               	movf	_t,w
  3008  0FCA  00E1               	movwf	??_thermometer_threshhold_settings
  3009  0FCB  0861               	movf	??_thermometer_threshhold_settings,w
  3010  0FCC  00C6               	movwf	_var2
  3011                           
  3012                           ;Button_src.c: 145:                         write_cmd(0x1);
  3013  0FCD  3001               	movlw	1
  3014  0FCE  160A  118A  26FC  120A  158A  	fcall	_write_cmd
  3015                           
  3016                           ;Button_src.c: 146:                         write_char('S');
  3017  0FD3  3053               	movlw	83
  3018  0FD4  160A  118A  26E5  120A  158A  	fcall	_write_char
  3019                           
  3020                           ;Button_src.c: 147:                         write_char('A');
  3021  0FD9  3041               	movlw	65
  3022  0FDA  160A  118A  26E5  120A  158A  	fcall	_write_char
  3023                           
  3024                           ;Button_src.c: 148:                         write_char('V');
  3025  0FDF  3056               	movlw	86
  3026  0FE0  160A  118A  26E5  120A  158A  	fcall	_write_char
  3027                           
  3028                           ;Button_src.c: 149:                         write_char('E');
  3029  0FE5  3045               	movlw	69
  3030  0FE6  160A  118A  26E5  120A  158A  	fcall	_write_char
  3031                           
  3032                           ;Button_src.c: 150:                         write_char('D');
  3033  0FEB  3044               	movlw	68
  3034  0FEC  160A  118A  26E5  120A  158A  	fcall	_write_char
  3035                           
  3036                           ;Button_src.c: 151:                         button_delay();
  3037  0FF1  160A  118A  2693   	fcall	_button_delay
  3038  0FF4  0008               	return
  3039  0FF5                     l560:	
  3040                           ;Button_src.c: 153:                     }
  3041                           
  3042                           
  3043                           ;Button_src.c: 154:             RC0 = 0;
  3044  0FF5  1007               	bcf	7,0	;volatile
  3045                           
  3046                           ;Button_src.c: 155:             RC1 = 1;
  3047  0FF6  1487               	bsf	7,1	;volatile
  3048                           
  3049                           ;Button_src.c: 156:             RC2 = 1;
  3050  0FF7  1507               	bsf	7,2	;volatile
  3051                           
  3052                           ;Button_src.c: 157:             RC3 = 1;
  3053  0FF8  1587               	bsf	7,3	;volatile
  3054                           
  3055                           ;Button_src.c: 158:             if (RC7 == 0 ){
  3056  0FF9  1B87               	btfsc	7,7	;volatile
  3057  0FFA  2EA4               	goto	l3343
  3058                           
  3059                           ;Button_src.c: 159:             write_cmd(0x1);
  3060  0FFB  3001               	movlw	1
  3061  0FFC  160A  118A  26FC   	fcall	_write_cmd
  3062  0FFF  0008               	return
  3063  1000                     __end_of_thermometer_threshhold_settings:	
  3064                           
  3065                           	psect	text3
  3066  17DC                     __ptext3:	
  3067 ;; *************** function _decrementor *****************
  3068 ;; Defined at:
  3069 ;;		line 19 in file "math_src.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  lower_val       2    0[BANK0 ] int 
  3072 ;;  upper_val       2    2[BANK0 ] int 
  3073 ;;  z               1    4[BANK0 ] unsigned char 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      unsigned char 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0, pclath, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 300/0
  3082 ;;		On exit  : 300/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3085 ;;      Params:         0       5       0       0       0
  3086 ;;      Locals:         0       0       0       0       0
  3087 ;;      Temps:          2       0       0       0       0
  3088 ;;      Totals:         2       5       0       0       0
  3089 ;;Total ram usage:        7 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		_modulus_func
  3094 ;; This function is called by:
  3095 ;;		_thermometer_threshhold_settings
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _decrementor
  3101  17DC                     _decrementor:	
  3102                           
  3103                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3107  17DC  085E               	movf	decrementor@upper_val,w
  3108  17DD  3E30               	addlw	48
  3109  17DE  00FB               	movwf	??_decrementor
  3110  17DF  085F               	movf	decrementor@upper_val+1,w
  3111  17E0  1803               	skipnc
  3112  17E1  3E01               	addlw	1
  3113  17E2  3E00               	addlw	0
  3114  17E3  00FC               	movwf	??_decrementor+1
  3115  17E4  0860               	movf	decrementor@z,w
  3116  17E5  067B               	xorwf	??_decrementor,w
  3117  17E6  047C               	iorwf	??_decrementor+1,w
  3118  17E7  1D03               	skipz
  3119  17E8  2FFE               	goto	l3007
  3120                           
  3121                           ;math_src.c: 21:         lower_val--;
  3122  17E9  30FF               	movlw	255
  3123  17EA  07DC               	addwf	decrementor@lower_val,f
  3124  17EB  1803               	skipnc
  3125  17EC  0ADD               	incf	decrementor@lower_val+1,f
  3126  17ED  30FF               	movlw	255
  3127  17EE  07DD               	addwf	decrementor@lower_val+1,f
  3128                           
  3129                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3130  17EF  085D               	movf	decrementor@lower_val+1,w
  3131  17F0  00F8               	movwf	modulus_func@x+1
  3132  17F1  085C               	movf	decrementor@lower_val,w
  3133  17F2  00F7               	movwf	modulus_func@x
  3134  17F3  300A               	movlw	10
  3135  17F4  00F9               	movwf	modulus_func@y
  3136  17F5  3000               	movlw	0
  3137  17F6  00FA               	movwf	modulus_func@y+1
  3138  17F7  160A  118A  2672   	fcall	_modulus_func
  3139  17FA  0878               	movf	?_modulus_func+1,w
  3140  17FB  00DD               	movwf	decrementor@lower_val+1
  3141  17FC  0877               	movf	?_modulus_func,w
  3142  17FD  00DC               	movwf	decrementor@lower_val
  3143  17FE                     l3007:	
  3144                           
  3145                           ;math_src.c: 24:      return lower_val;
  3146  17FE  085C               	movf	decrementor@lower_val,w
  3147  17FF  0008               	return
  3148  1800                     __end_of_decrementor:	
  3149                           
  3150                           	psect	text4
  3151  0995                     __ptext4:	
  3152 ;; *************** function _set_upper_threshold *****************
  3153 ;; Defined at:
  3154 ;;		line 4 in file "threshold_src.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  upper_val       2    3[COMMON] int 
  3157 ;;  lower_val       2    5[COMMON] int 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;		None
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  1    wreg      void 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : 300/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3169 ;;      Params:         4       0       0       0       0
  3170 ;;      Locals:         0       0       0       0       0
  3171 ;;      Temps:          2       0       0       0       0
  3172 ;;      Totals:         6       0       0       0       0
  3173 ;;Total ram usage:        6 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    2
  3176 ;; This function calls:
  3177 ;;		_write_char
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           
  3184                           ;psect for function _set_upper_threshold
  3185  0995                     _set_upper_threshold:	
  3186                           
  3187                           ;threshold_src.c: 5:     if(shi == upper_val && ge > lower_val && count == 2){
  3188                           
  3189                           ;incstack = 0
  3190                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3191  0995  0857               	movf	_shi,w
  3192  0996  00F7               	movwf	??_set_upper_threshold
  3193  0997  01F8               	clrf	??_set_upper_threshold+1
  3194  0998  0874               	movf	set_upper_threshold@upper_val+1,w
  3195  0999  0678               	xorwf	??_set_upper_threshold+1,w
  3196  099A  1D03               	skipz
  3197  099B  299E               	goto	u2715
  3198  099C  0873               	movf	set_upper_threshold@upper_val,w
  3199  099D  0677               	xorwf	??_set_upper_threshold,w
  3200  099E                     u2715:	
  3201  099E  1D03               	skipz
  3202  099F  0008               	return
  3203  09A0  0876               	movf	set_upper_threshold@lower_val+1,w
  3204  09A1  3A80               	xorlw	128
  3205  09A2  00F7               	movwf	??_set_upper_threshold
  3206  09A3  3080               	movlw	128
  3207  09A4  0277               	subwf	??_set_upper_threshold,w
  3208  09A5  1D03               	skipz
  3209  09A6  29A9               	goto	u2725
  3210  09A7  0856               	movf	_ge,w
  3211  09A8  0275               	subwf	set_upper_threshold@lower_val,w
  3212  09A9                     u2725:	
  3213  09A9  1803               	skipnc
  3214  09AA  0008               	return
  3215  09AB  3002               	movlw	2
  3216  09AC  1283               	bcf	3,5	;RP0=0, select bank0
  3217  09AD  1303               	bcf	3,6	;RP1=0, select bank0
  3218  09AE  0629               	xorwf	_count,w
  3219  09AF  042A               	iorwf	_count+1,w
  3220  09B0  1D03               	btfss	3,2
  3221  09B1  0008               	return
  3222                           
  3223                           ;threshold_src.c: 6:     buzzer_watcher = 'w';
  3224  09B2  3077               	movlw	119
  3225  09B3  00F7               	movwf	??_set_upper_threshold
  3226  09B4  0877               	movf	??_set_upper_threshold,w
  3227  09B5  00C9               	movwf	_buzzer_watcher
  3228                           
  3229                           ;threshold_src.c: 7:     write_char('W');
  3230  09B6  3057               	movlw	87
  3231  09B7  160A  118A  26E5  120A  158A  	fcall	_write_char
  3232                           
  3233                           ;threshold_src.c: 8:     write_char('A');
  3234  09BC  3041               	movlw	65
  3235  09BD  160A  118A  26E5  120A  158A  	fcall	_write_char
  3236                           
  3237                           ;threshold_src.c: 9:     write_char('R');
  3238  09C2  3052               	movlw	82
  3239  09C3  160A  118A  26E5  120A  158A  	fcall	_write_char
  3240                           
  3241                           ;threshold_src.c: 10:     write_char('M');
  3242  09C8  304D               	movlw	77
  3243  09C9  160A  118A  26E5   	fcall	_write_char
  3244  09CC  0008               	return
  3245  09CD                     __end_of_set_upper_threshold:	
  3246                           
  3247                           	psect	text5
  3248  0007                     __ptext5:	
  3249 ;; *************** function _set_lower_threshold *****************
  3250 ;; Defined at:
  3251 ;;		line 14 in file "threshold_src.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  upper_val       2    3[COMMON] int 
  3254 ;;  lower_val       2    5[COMMON] int 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;		None
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3261 ;; Tracked objects:
  3262 ;;		On entry : 300/0
  3263 ;;		On exit  : 300/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3266 ;;      Params:         4       0       0       0       0
  3267 ;;      Locals:         0       0       0       0       0
  3268 ;;      Temps:          2       0       0       0       0
  3269 ;;      Totals:         6       0       0       0       0
  3270 ;;Total ram usage:        6 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    2
  3273 ;; This function calls:
  3274 ;;		_write_char
  3275 ;; This function is called by:
  3276 ;;		_main
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           
  3281                           ;psect for function _set_lower_threshold
  3282  0007                     _set_lower_threshold:	
  3283                           
  3284                           ;threshold_src.c: 15:     if((shi == upper_val && ge <= lower_val)|| ge == lower_val)
  3285                           
  3286                           ;incstack = 0
  3287                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3288  0007  0857               	movf	_shi,w
  3289  0008  00F7               	movwf	??_set_lower_threshold
  3290  0009  01F8               	clrf	??_set_lower_threshold+1
  3291  000A  0874               	movf	set_lower_threshold@upper_val+1,w
  3292  000B  0678               	xorwf	??_set_lower_threshold+1,w
  3293  000C  1D03               	skipz
  3294  000D  2810               	goto	u2685
  3295  000E  0873               	movf	set_lower_threshold@upper_val,w
  3296  000F  0677               	xorwf	??_set_lower_threshold,w
  3297  0010                     u2685:	
  3298  0010  1D03               	skipz
  3299  0011  281D               	goto	l3919
  3300  0012  0876               	movf	set_lower_threshold@lower_val+1,w
  3301  0013  3A80               	xorlw	128
  3302  0014  00F7               	movwf	??_set_lower_threshold
  3303  0015  3080               	movlw	128
  3304  0016  0277               	subwf	??_set_lower_threshold,w
  3305  0017  1D03               	skipz
  3306  0018  281B               	goto	u2695
  3307  0019  0856               	movf	_ge,w
  3308  001A  0275               	subwf	set_lower_threshold@lower_val,w
  3309  001B                     u2695:	
  3310  001B  1803               	skipnc
  3311  001C  282A               	goto	l3921
  3312  001D                     l3919:	
  3313  001D  1283               	bcf	3,5	;RP0=0, select bank0
  3314  001E  1303               	bcf	3,6	;RP1=0, select bank0
  3315  001F  0856               	movf	_ge,w
  3316  0020  00F7               	movwf	??_set_lower_threshold
  3317  0021  01F8               	clrf	??_set_lower_threshold+1
  3318  0022  0876               	movf	set_lower_threshold@lower_val+1,w
  3319  0023  0678               	xorwf	??_set_lower_threshold+1,w
  3320  0024  1D03               	skipz
  3321  0025  2828               	goto	u2705
  3322  0026  0875               	movf	set_lower_threshold@lower_val,w
  3323  0027  0677               	xorwf	??_set_lower_threshold,w
  3324  0028                     u2705:	
  3325  0028  1D03               	skipz
  3326  0029  0008               	return
  3327  002A                     l3921:	
  3328                           
  3329                           ;threshold_src.c: 16:     {;threshold_src.c: 17:     count = 2;
  3330  002A  3002               	movlw	2
  3331  002B  1283               	bcf	3,5	;RP0=0, select bank0
  3332  002C  1303               	bcf	3,6	;RP1=0, select bank0
  3333  002D  00A9               	movwf	_count
  3334  002E  3000               	movlw	0
  3335  002F  00AA               	movwf	_count+1
  3336                           
  3337                           ;threshold_src.c: 18:     buzzer_watcher = 'x';
  3338  0030  3078               	movlw	120
  3339  0031  00F7               	movwf	??_set_lower_threshold
  3340  0032  0877               	movf	??_set_lower_threshold,w
  3341  0033  00C9               	movwf	_buzzer_watcher
  3342                           
  3343                           ;threshold_src.c: 19:     write_char('O');
  3344  0034  304F               	movlw	79
  3345  0035  160A  118A  26E5  120A  118A  	fcall	_write_char
  3346                           
  3347                           ;threshold_src.c: 20:     write_char('K');
  3348  003A  304B               	movlw	75
  3349  003B  160A  118A  26E5  120A  118A  	fcall	_write_char
  3350                           
  3351                           ;threshold_src.c: 21:     write_char(' ');
  3352  0040  3020               	movlw	32
  3353  0041  160A  118A  26E5  120A  118A  	fcall	_write_char
  3354                           
  3355                           ;threshold_src.c: 22:     write_char(' ');
  3356  0046  3020               	movlw	32
  3357  0047  160A  118A  26E5   	fcall	_write_char
  3358  004A  0008               	return
  3359  004B                     __end_of_set_lower_threshold:	
  3360                           
  3361                           	psect	text6
  3362  1713                     __ptext6:	
  3363 ;; *************** function _set_beep_threshhold *****************
  3364 ;; Defined at:
  3365 ;;		line 5 in file "buzzer_src.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  x               1    wreg     unsigned char 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  x               1    2[COMMON] unsigned char 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      void 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 300/0
  3376 ;;		On exit  : 300/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3379 ;;      Params:         0       0       0       0       0
  3380 ;;      Locals:         1       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0
  3382 ;;      Totals:         1       0       0       0       0
  3383 ;;Total ram usage:        1 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    1
  3386 ;; This function calls:
  3387 ;;		_button_delay
  3388 ;; This function is called by:
  3389 ;;		_main
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function _set_beep_threshhold
  3395  1713                     _set_beep_threshhold:	
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3399                           ;set_beep_threshhold@x stored from wreg
  3400  1713  00F2               	movwf	set_beep_threshhold@x
  3401                           
  3402                           ;buzzer_src.c: 6:     if (x == 'w'){
  3403  1714  3077               	movlw	119
  3404  1715  0672               	xorwf	set_beep_threshhold@x,w
  3405  1716  1D03               	btfss	3,2
  3406  1717  2F2C               	goto	l3957
  3407                           
  3408                           ;buzzer_src.c: 7:         RE2 = 1;
  3409  1718  1509               	bsf	9,2	;volatile
  3410                           
  3411                           ;buzzer_src.c: 8:         button_delay();
  3412  1719  160A  118A  2693  160A  118A  	fcall	_button_delay
  3413                           
  3414                           ;buzzer_src.c: 9:         RE2 = 0;
  3415  171E  1283               	bcf	3,5	;RP0=0, select bank0
  3416  171F  1303               	bcf	3,6	;RP1=0, select bank0
  3417  1720  1109               	bcf	9,2	;volatile
  3418                           
  3419                           ;buzzer_src.c: 10:         button_delay();
  3420  1721  160A  118A  2693  160A  118A  	fcall	_button_delay
  3421                           
  3422                           ;buzzer_src.c: 11:         RE2 = 1;
  3423  1726  1283               	bcf	3,5	;RP0=0, select bank0
  3424  1727  1303               	bcf	3,6	;RP1=0, select bank0
  3425  1728  1509               	bsf	9,2	;volatile
  3426                           
  3427                           ;buzzer_src.c: 12:         button_delay();
  3428  1729  160A  118A  2693   	fcall	_button_delay
  3429  172C                     l3957:	
  3430                           
  3431                           ;buzzer_src.c: 13:         RE2 = 0;
  3432  172C  1283               	bcf	3,5	;RP0=0, select bank0
  3433  172D  1303               	bcf	3,6	;RP1=0, select bank0
  3434  172E  1109               	bcf	9,2	;volatile
  3435  172F  0008               	return
  3436  1730                     __end_of_set_beep_threshhold:	
  3437                           
  3438                           	psect	text7
  3439  1639                     __ptext7:	
  3440 ;; *************** function _reset_alarm *****************
  3441 ;; Defined at:
  3442 ;;		line 26 in file "threshold_src.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2
  3451 ;; Tracked objects:
  3452 ;;		On entry : 300/0
  3453 ;;		On exit  : 300/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3456 ;;      Params:         0       0       0       0       0
  3457 ;;      Locals:         0       0       0       0       0
  3458 ;;      Temps:          1       0       0       0       0
  3459 ;;      Totals:         1       0       0       0       0
  3460 ;;Total ram usage:        1 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_main
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           
  3470                           ;psect for function _reset_alarm
  3471  1639                     _reset_alarm:	
  3472                           
  3473                           ;threshold_src.c: 27:     RC0 = 1;
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _reset_alarm: [wreg+status,2]
  3477  1639  1407               	bsf	7,0	;volatile
  3478                           
  3479                           ;threshold_src.c: 28:     RC1 = 1;
  3480  163A  1487               	bsf	7,1	;volatile
  3481                           
  3482                           ;threshold_src.c: 29:     RC2 = 1;
  3483  163B  1507               	bsf	7,2	;volatile
  3484                           
  3485                           ;threshold_src.c: 30:     RC3 = 0;
  3486  163C  1187               	bcf	7,3	;volatile
  3487                           
  3488                           ;threshold_src.c: 31:     if(RC4 == 0){
  3489  163D  1A07               	btfsc	7,4	;volatile
  3490  163E  0008               	return
  3491                           
  3492                           ;threshold_src.c: 32:         count = 0;
  3493  163F  01A9               	clrf	_count
  3494  1640  01AA               	clrf	_count+1
  3495                           
  3496                           ;threshold_src.c: 33:         buzzer_watcher = 'x';
  3497  1641  3078               	movlw	120
  3498  1642  00F0               	movwf	??_reset_alarm
  3499  1643  0870               	movf	??_reset_alarm,w
  3500  1644  00C9               	movwf	_buzzer_watcher
  3501  1645  0008               	return
  3502  1646                     __end_of_reset_alarm:	
  3503                           
  3504                           	psect	text8
  3505  1795                     __ptext8:	
  3506 ;; *************** function _lcd_init *****************
  3507 ;; Defined at:
  3508 ;;		line 14 in file "LCD_src.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  i               2    0        int 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 300/100
  3519 ;;		On exit  : 300/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3522 ;;      Params:         0       0       0       0       0
  3523 ;;      Locals:         0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0
  3525 ;;      Totals:         0       0       0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    2
  3529 ;; This function calls:
  3530 ;;		_delay_screen
  3531 ;;		_write_cmd
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function _lcd_init
  3539  1795                     _lcd_init:	
  3540                           
  3541                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3545  1795  0185               	clrf	5	;volatile
  3546                           
  3547                           ;LCD_src.c: 18:  RA0=0;
  3548  1796  1283               	bcf	3,5	;RP0=0, select bank0
  3549  1797  1005               	bcf	5,0	;volatile
  3550                           
  3551                           ;LCD_src.c: 19:  delay_screen();
  3552  1798  160A  118A  26A7  160A  118A  	fcall	_delay_screen
  3553                           
  3554                           ;LCD_src.c: 20:  RA0=1;
  3555  179D  1283               	bcf	3,5	;RP0=0, select bank0
  3556  179E  1303               	bcf	3,6	;RP1=0, select bank0
  3557  179F  1405               	bsf	5,0	;volatile
  3558                           
  3559                           ;LCD_src.c: 21:  RA2=1;
  3560  17A0  1505               	bsf	5,2	;volatile
  3561                           
  3562                           ;LCD_src.c: 22:  write_cmd(0x30);
  3563  17A1  3030               	movlw	48
  3564  17A2  160A  118A  26FC  160A  118A  	fcall	_write_cmd
  3565                           
  3566                           ;LCD_src.c: 23:  write_cmd(0x01);
  3567  17A7  3001               	movlw	1
  3568  17A8  160A  118A  26FC  160A  118A  	fcall	_write_cmd
  3569                           
  3570                           ;LCD_src.c: 24:  write_cmd(0x06);
  3571  17AD  3006               	movlw	6
  3572  17AE  160A  118A  26FC  160A  118A  	fcall	_write_cmd
  3573                           
  3574                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3575  17B3  300C               	movlw	12
  3576  17B4  160A  118A  26FC   	fcall	_write_cmd
  3577  17B7  0008               	return
  3578  17B8                     __end_of_lcd_init:	
  3579                           
  3580                           	psect	text9
  3581  16CF                     __ptext9:	
  3582 ;; *************** function _initialise_buttons *****************
  3583 ;; Defined at:
  3584 ;;		line 11 in file "Button_src.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;		None
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;		None
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, status,2
  3593 ;; Tracked objects:
  3594 ;;		On entry : 300/0
  3595 ;;		On exit  : 300/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3598 ;;      Params:         0       0       0       0       0
  3599 ;;      Locals:         0       0       0       0       0
  3600 ;;      Temps:          0       0       0       0       0
  3601 ;;      Totals:         0       0       0       0       0
  3602 ;;Total ram usage:        0 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_main
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function _initialise_buttons
  3613  16CF                     _initialise_buttons:	
  3614                           
  3615                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3616                           
  3617                           ;incstack = 0
  3618                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3619  16CF  3006               	movlw	6
  3620  16D0  1683               	bsf	3,5	;RP0=1, select bank1
  3621  16D1  009F               	movwf	31	;volatile
  3622                           
  3623                           ;Button_src.c: 13:     TRISC = 0xf0;
  3624  16D2  30F0               	movlw	240
  3625  16D3  0087               	movwf	7	;volatile
  3626                           
  3627                           ;Button_src.c: 14:     a = 0x00;
  3628  16D4  1283               	bcf	3,5	;RP0=0, select bank0
  3629  16D5  01D1               	clrf	_a
  3630                           
  3631                           ;Button_src.c: 15:     b = 0x00;
  3632  16D6  01D0               	clrf	_b
  3633                           
  3634                           ;Button_src.c: 16:     c = 0x00;
  3635  16D7  01CF               	clrf	_c
  3636                           
  3637                           ;Button_src.c: 17:     z = 0;
  3638  16D8  01B9               	clrf	_z
  3639  16D9  01BA               	clrf	_z+1
  3640                           
  3641                           ;Button_src.c: 18:     day_low = 12;
  3642  16DA  300C               	movlw	12
  3643  16DB  00B7               	movwf	_day_low
  3644  16DC  3000               	movlw	0
  3645  16DD  00B8               	movwf	_day_low+1
  3646                           
  3647                           ;Button_src.c: 19:     stats = 1;
  3648  16DE  3001               	movlw	1
  3649  16DF  00B1               	movwf	_stats
  3650  16E0  3000               	movlw	0
  3651  16E1  00B2               	movwf	_stats+1
  3652                           
  3653                           ;Button_src.c: 20:     p = 0;
  3654  16E2  01AF               	clrf	_p
  3655  16E3  01B0               	clrf	_p+1
  3656  16E4  0008               	return
  3657  16E5                     __end_of_initialise_buttons:	
  3658                           
  3659                           	psect	text10
  3660  161C                     __ptext10:	
  3661 ;; *************** function _init_temp *****************
  3662 ;; Defined at:
  3663 ;;		line 6 in file "Thermometer_src.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		status,2
  3672 ;; Tracked objects:
  3673 ;;		On entry : 200/100
  3674 ;;		On exit  : 300/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3677 ;;      Params:         0       0       0       0       0
  3678 ;;      Locals:         0       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0
  3680 ;;      Totals:         0       0       0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_main
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           
  3691                           ;psect for function _init_temp
  3692  161C                     _init_temp:	
  3693                           
  3694                           ;Thermometer_src.c: 8:     TRISE=0X00;
  3695                           
  3696                           ;incstack = 0
  3697                           ; Regs used in _init_temp: [status,2]
  3698  161C  1683               	bsf	3,5	;RP0=1, select bank1
  3699  161D  0189               	clrf	9	;volatile
  3700                           
  3701                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  3702  161E  1283               	bcf	3,5	;RP0=0, select bank0
  3703  161F  0189               	clrf	9	;volatile
  3704  1620  0008               	return
  3705  1621                     __end_of_init_temp:	
  3706                           
  3707                           	psect	text11
  3708  1621                     __ptext11:	
  3709 ;; *************** function _init *****************
  3710 ;; Defined at:
  3711 ;;		line 5 in file "LCD_src.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;		None
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      void 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2
  3720 ;; Tracked objects:
  3721 ;;		On entry : 300/0
  3722 ;;		On exit  : 300/100
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3725 ;;      Params:         0       0       0       0       0
  3726 ;;      Locals:         0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0
  3728 ;;      Totals:         0       0       0       0       0
  3729 ;;Total ram usage:        0 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_main
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           
  3739                           ;psect for function _init
  3740  1621                     _init:	
  3741                           
  3742                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  3743                           
  3744                           ;incstack = 0
  3745                           ; Regs used in _init: [wreg+status,2]
  3746  1621  3007               	movlw	7
  3747  1622  1683               	bsf	3,5	;RP0=1, select bank1
  3748  1623  009F               	movwf	31	;volatile
  3749                           
  3750                           ;LCD_src.c: 8:  TRISA0=1;
  3751  1624  1405               	bsf	5,0	;volatile
  3752                           
  3753                           ;LCD_src.c: 9:  TRISD=0X00;
  3754  1625  0188               	clrf	8	;volatile
  3755                           
  3756                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  3757  1626  0181               	clrf	1	;volatile
  3758                           
  3759                           ;LCD_src.c: 11:  TRISE = 0X00;
  3760  1627  0189               	clrf	9	;volatile
  3761  1628  0008               	return
  3762  1629                     __end_of_init:	
  3763                           
  3764                           	psect	text12
  3765  0869                     __ptext12:	
  3766 ;; *************** function _get_time *****************
  3767 ;; Defined at:
  3768 ;;		line 26 in file "clock_src.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;  i               2    6[COMMON] int 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 300/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         0       0       0       0       0
  3783 ;;      Locals:         2       0       0       0       0
  3784 ;;      Temps:          1       0       0       0       0
  3785 ;;      Totals:         3       0       0       0       0
  3786 ;;Total ram usage:        3 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    1
  3789 ;; This function calls:
  3790 ;;		_time_read_1
  3791 ;;		_time_write_1
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _get_time
  3799  0869                     _get_time:	
  3800                           
  3801                           ;clock_src.c: 28:    int i;;clock_src.c: 29:    RB5=1;
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3805  0869  1283               	bcf	3,5	;RP0=0, select bank0
  3806  086A  1303               	bcf	3,6	;RP1=0, select bank0
  3807  086B  1686               	bsf	6,5	;volatile
  3808                           
  3809                           ;clock_src.c: 30:    time_write_1(0xbf);
  3810  086C  30BF               	movlw	191
  3811  086D  120A  158A  201B  120A  158A  	fcall	_time_write_1
  3812                           
  3813                           ;clock_src.c: 31:    for(i=0;i<7;i++)
  3814  0872  01F6               	clrf	get_time@i
  3815  0873  01F7               	clrf	get_time@i+1
  3816  0874                     l3237:	
  3817                           
  3818                           ;clock_src.c: 32:      {;clock_src.c: 33:         table1[i]=time_read_1();
  3819  0874  120A  158A  2095  120A  158A  	fcall	_time_read_1
  3820  0879  00F5               	movwf	??_get_time
  3821  087A  0876               	movf	get_time@i,w
  3822  087B  3E20               	addlw	(low (_table1| 0))& (0+255)
  3823  087C  0084               	movwf	4
  3824  087D  0875               	movf	??_get_time,w
  3825  087E  1383               	bcf	3,7	;select IRP bank0
  3826  087F  0080               	movwf	0
  3827                           
  3828                           ;clock_src.c: 34:      }
  3829  0880  3001               	movlw	1
  3830  0881  07F6               	addwf	get_time@i,f
  3831  0882  1803               	skipnc
  3832  0883  0AF7               	incf	get_time@i+1,f
  3833  0884  3000               	movlw	0
  3834  0885  07F7               	addwf	get_time@i+1,f
  3835  0886  0877               	movf	get_time@i+1,w
  3836  0887  3A80               	xorlw	128
  3837  0888  00FF               	movwf	127
  3838  0889  3080               	movlw	128
  3839  088A  027F               	subwf	127,w
  3840  088B  1D03               	skipz
  3841  088C  288F               	goto	u1995
  3842  088D  3007               	movlw	7
  3843  088E  0276               	subwf	get_time@i,w
  3844  088F                     u1995:	
  3845  088F  1C03               	skipc
  3846  0890  2874               	goto	l3237
  3847                           
  3848                           ;clock_src.c: 35:    RB5=0;
  3849  0891  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0892  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0893  1286               	bcf	6,5	;volatile
  3852  0894  0008               	return
  3853  0895                     __end_of_get_time:	
  3854                           
  3855                           	psect	text13
  3856  0895                     __ptext13:	
  3857 ;; *************** function _time_read_1 *****************
  3858 ;; Defined at:
  3859 ;;		line 132 in file "clock_src.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  j               2    2[COMMON] int 
  3864 ;;  time_rx         1    4[COMMON] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      unsigned char 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, btemp+1
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 300/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3874 ;;      Params:         0       0       0       0       0
  3875 ;;      Locals:         3       0       0       0       0
  3876 ;;      Temps:          2       0       0       0       0
  3877 ;;      Totals:         5       0       0       0       0
  3878 ;;Total ram usage:        5 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		_get_time
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function _time_read_1
  3889  0895                     _time_read_1:	
  3890                           
  3891                           ;clock_src.c: 134:    unsigned char time_rx=0;
  3892                           
  3893                           ;incstack = 0
  3894                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  3895  0895  01F4               	clrf	time_read_1@time_rx
  3896                           
  3897                           ;clock_src.c: 135:    int j;;clock_src.c: 136:    TRISB4=1;
  3898  0896  1683               	bsf	3,5	;RP0=1, select bank1
  3899  0897  1303               	bcf	3,6	;RP1=0, select bank1
  3900  0898  1606               	bsf	6,4	;volatile
  3901                           
  3902                           ;clock_src.c: 137:    for(j=0;j<8;j++)
  3903  0899  01F2               	clrf	time_read_1@j
  3904  089A  01F3               	clrf	time_read_1@j+1
  3905  089B                     l360:	
  3906                           
  3907                           ;clock_src.c: 138:       {;clock_src.c: 139:         RB0=0;
  3908  089B  1283               	bcf	3,5	;RP0=0, select bank0
  3909  089C  1303               	bcf	3,6	;RP1=0, select bank0
  3910  089D  1006               	bcf	6,0	;volatile
  3911                           
  3912                           ;clock_src.c: 140:         time_rx=time_rx>>1;
  3913  089E  0874               	movf	time_read_1@time_rx,w
  3914  089F  00F0               	movwf	??_time_read_1
  3915  08A0  1003               	clrc
  3916  08A1  0C70               	rrf	??_time_read_1,w
  3917  08A2  00F1               	movwf	??_time_read_1+1
  3918  08A3  0871               	movf	??_time_read_1+1,w
  3919  08A4  00F4               	movwf	time_read_1@time_rx
  3920                           
  3921                           ;clock_src.c: 141:         if(RB4)time_rx=time_rx|0x80;
  3922  08A5  1E06               	btfss	6,4	;volatile
  3923  08A6  28AC               	goto	l2971
  3924  08A7  0874               	movf	time_read_1@time_rx,w
  3925  08A8  3880               	iorlw	128
  3926  08A9  00F0               	movwf	??_time_read_1
  3927  08AA  0870               	movf	??_time_read_1,w
  3928  08AB  00F4               	movwf	time_read_1@time_rx
  3929  08AC                     l2971:	
  3930                           
  3931                           ;clock_src.c: 143:        RB0=1;
  3932  08AC  1406               	bsf	6,0	;volatile
  3933                           
  3934                           ;clock_src.c: 144:       }
  3935  08AD  3001               	movlw	1
  3936  08AE  07F2               	addwf	time_read_1@j,f
  3937  08AF  1803               	skipnc
  3938  08B0  0AF3               	incf	time_read_1@j+1,f
  3939  08B1  3000               	movlw	0
  3940  08B2  07F3               	addwf	time_read_1@j+1,f
  3941  08B3  0873               	movf	time_read_1@j+1,w
  3942  08B4  3A80               	xorlw	128
  3943  08B5  00FF               	movwf	127
  3944  08B6  3080               	movlw	128
  3945  08B7  027F               	subwf	127,w
  3946  08B8  1D03               	skipz
  3947  08B9  28BC               	goto	u1665
  3948  08BA  3008               	movlw	8
  3949  08BB  0272               	subwf	time_read_1@j,w
  3950  08BC                     u1665:	
  3951  08BC  1C03               	skipc
  3952  08BD  289B               	goto	l360
  3953                           
  3954                           ;clock_src.c: 145:     TRISB4=0;
  3955  08BE  1683               	bsf	3,5	;RP0=1, select bank1
  3956  08BF  1303               	bcf	3,6	;RP1=0, select bank1
  3957  08C0  1206               	bcf	6,4	;volatile
  3958                           
  3959                           ;clock_src.c: 146:     RB0=0;
  3960  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  3961  08C2  1006               	bcf	6,0	;volatile
  3962                           
  3963                           ;clock_src.c: 147:     return(time_rx);
  3964  08C3  0874               	movf	time_read_1@time_rx,w
  3965  08C4  0008               	return
  3966  08C5                     __end_of_time_read_1:	
  3967                           
  3968                           	psect	text14
  3969  0B80                     __ptext14:	
  3970 ;; *************** function _get_temp *****************
  3971 ;; Defined at:
  3972 ;;		line 89 in file "Thermometer_src.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  i               2    0        int 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      void 
  3979 ;; Registers used:
  3980 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 300/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3986 ;;      Params:         0       0       0       0       0
  3987 ;;      Locals:         0       0       0       0       0
  3988 ;;      Temps:          0       4       0       0       0
  3989 ;;      Totals:         0       4       0       0       0
  3990 ;;Total ram usage:        4 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    2
  3993 ;; This function calls:
  3994 ;;		___lbdiv
  3995 ;;		___lbmod
  3996 ;;		___lwdiv
  3997 ;;		___lwmod
  3998 ;;		_delay2
  3999 ;;		_read_byte
  4000 ;;		_reset_temp
  4001 ;;		_write_byte
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _get_temp
  4009  0B80                     _get_temp:	
  4010                           
  4011                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4015  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  4016  0B81  1409               	bsf	9,0	;volatile
  4017                           
  4018                           ;Thermometer_src.c: 93: reset_temp();
  4019  0B82  120A  158A  212B  120A  158A  	fcall	_reset_temp
  4020                           
  4021                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4022  0B87  30CC               	movlw	204
  4023  0B88  120A  158A  215F  120A  158A  	fcall	_write_byte
  4024                           
  4025                           ;Thermometer_src.c: 95: delay2();
  4026  0B8D  160A  118A  26BB  120A  158A  	fcall	_delay2
  4027                           
  4028                           ;Thermometer_src.c: 96: write_byte(0X44);
  4029  0B92  3044               	movlw	68
  4030  0B93  120A  158A  215F  120A  158A  	fcall	_write_byte
  4031                           
  4032                           ;Thermometer_src.c: 98: reset_temp();
  4033  0B98  120A  158A  212B  120A  158A  	fcall	_reset_temp
  4034                           
  4035                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4036  0B9D  30CC               	movlw	204
  4037  0B9E  120A  158A  215F  120A  158A  	fcall	_write_byte
  4038                           
  4039                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4040  0BA3  30BE               	movlw	190
  4041  0BA4  120A  158A  215F  120A  158A  	fcall	_write_byte
  4042                           
  4043                           ;Thermometer_src.c: 101: TLV=read_byte();
  4044  0BA9  120A  158A  20F7  120A  158A  	fcall	_read_byte
  4045  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  4046  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  4047  0BB0  00DC               	movwf	??_get_temp
  4048  0BB1  085C               	movf	??_get_temp,w
  4049  0BB2  00DB               	movwf	_TLV
  4050                           
  4051                           ;Thermometer_src.c: 102: THV=read_byte();
  4052  0BB3  120A  158A  20F7  120A  158A  	fcall	_read_byte
  4053  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  4054  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  4055  0BBA  00DC               	movwf	??_get_temp
  4056  0BBB  085C               	movf	??_get_temp,w
  4057  0BBC  00DA               	movwf	_THV
  4058                           
  4059                           ;Thermometer_src.c: 103: TRISE0 =1;
  4060  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  4061  0BBE  1409               	bsf	9,0	;volatile
  4062                           
  4063                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4064  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  4065  0BC0  085A               	movf	_THV,w
  4066  0BC1  00DC               	movwf	??_get_temp
  4067  0BC2  3004               	movlw	4
  4068  0BC3                     u1925:	
  4069  0BC3  1003               	clrc
  4070  0BC4  0DDC               	rlf	??_get_temp,f
  4071  0BC5  3EFF               	addlw	-1
  4072  0BC6  1D03               	skipz
  4073  0BC7  2BC3               	goto	u1925
  4074  0BC8  303F               	movlw	63
  4075  0BC9  055C               	andwf	??_get_temp,w
  4076  0BCA  00DD               	movwf	??_get_temp+1
  4077  0BCB  085B               	movf	_TLV,w
  4078  0BCC  00DE               	movwf	??_get_temp+2
  4079  0BCD  3004               	movlw	4
  4080  0BCE                     u1935:	
  4081  0BCE  1003               	clrc
  4082  0BCF  0CDE               	rrf	??_get_temp+2,f
  4083  0BD0  3EFF               	addlw	-1
  4084  0BD1  1D03               	skipz
  4085  0BD2  2BCE               	goto	u1935
  4086  0BD3  085E               	movf	??_get_temp+2,w
  4087  0BD4  045D               	iorwf	??_get_temp+1,w
  4088  0BD5  00DF               	movwf	??_get_temp+3
  4089  0BD6  085F               	movf	??_get_temp+3,w
  4090  0BD7  00D9               	movwf	_TZ
  4091                           
  4092                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4093  0BD8  085B               	movf	_TLV,w
  4094  0BD9  00DC               	movwf	??_get_temp
  4095  0BDA  3003               	movlw	3
  4096  0BDB                     u1945:	
  4097  0BDB  1003               	clrc
  4098  0BDC  0DDC               	rlf	??_get_temp,f
  4099  0BDD  3EFF               	addlw	-1
  4100  0BDE  1D03               	skipz
  4101  0BDF  2BDB               	goto	u1945
  4102  0BE0  1003               	clrc
  4103  0BE1  0D5C               	rlf	??_get_temp,w
  4104  0BE2  00DD               	movwf	??_get_temp+1
  4105  0BE3  085D               	movf	??_get_temp+1,w
  4106  0BE4  00D8               	movwf	_TX
  4107                           
  4108                           ;Thermometer_src.c: 107: ge=TZ%10;
  4109  0BE5  300A               	movlw	10
  4110  0BE6  00DC               	movwf	??_get_temp
  4111  0BE7  085C               	movf	??_get_temp,w
  4112  0BE8  00F0               	movwf	___lbmod@divisor
  4113  0BE9  0859               	movf	_TZ,w
  4114  0BEA  160A  118A  2772  120A  158A  	fcall	___lbmod
  4115  0BEF  00DD               	movwf	??_get_temp+1
  4116  0BF0  085D               	movf	??_get_temp+1,w
  4117  0BF1  00D6               	movwf	_ge
  4118                           
  4119                           ;Thermometer_src.c: 108: shi=TZ/10;
  4120  0BF2  300A               	movlw	10
  4121  0BF3  00DC               	movwf	??_get_temp
  4122  0BF4  085C               	movf	??_get_temp,w
  4123  0BF5  00F0               	movwf	___lbdiv@divisor
  4124  0BF6  0859               	movf	_TZ,w
  4125  0BF7  160A  118A  2751  120A  158A  	fcall	___lbdiv
  4126  0BFC  00DD               	movwf	??_get_temp+1
  4127  0BFD  085D               	movf	??_get_temp+1,w
  4128  0BFE  00D7               	movwf	_shi
  4129                           
  4130                           ;Thermometer_src.c: 109: wd=0;
  4131  0BFF  01C3               	clrf	_wd
  4132  0C00  01C4               	clrf	_wd+1
  4133                           
  4134                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4135  0C01  1FD8               	btfss	_TX,7
  4136  0C02  2C0B               	goto	l3205
  4137  0C03  0843               	movf	_wd,w
  4138  0C04  3E88               	addlw	136
  4139  0C05  00C3               	movwf	_wd
  4140  0C06  0844               	movf	_wd+1,w
  4141  0C07  1803               	skipnc
  4142  0C08  3E01               	addlw	1
  4143  0C09  3E13               	addlw	19
  4144  0C0A  00C4               	movwf	_wd+1
  4145  0C0B                     l3205:	
  4146                           
  4147                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4148  0C0B  1F58               	btfss	_TX,6
  4149  0C0C  2C15               	goto	l3209
  4150  0C0D  0843               	movf	_wd,w
  4151  0C0E  3EC4               	addlw	196
  4152  0C0F  00C3               	movwf	_wd
  4153  0C10  0844               	movf	_wd+1,w
  4154  0C11  1803               	skipnc
  4155  0C12  3E01               	addlw	1
  4156  0C13  3E09               	addlw	9
  4157  0C14  00C4               	movwf	_wd+1
  4158  0C15                     l3209:	
  4159                           
  4160                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4161  0C15  1ED8               	btfss	_TX,5
  4162  0C16  2C1F               	goto	l3213
  4163  0C17  0843               	movf	_wd,w
  4164  0C18  3EE2               	addlw	226
  4165  0C19  00C3               	movwf	_wd
  4166  0C1A  0844               	movf	_wd+1,w
  4167  0C1B  1803               	skipnc
  4168  0C1C  3E01               	addlw	1
  4169  0C1D  3E04               	addlw	4
  4170  0C1E  00C4               	movwf	_wd+1
  4171  0C1F                     l3213:	
  4172                           
  4173                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4174  0C1F  1E58               	btfss	_TX,4
  4175  0C20  2C29               	goto	l3217
  4176  0C21  0843               	movf	_wd,w
  4177  0C22  3E71               	addlw	113
  4178  0C23  00C3               	movwf	_wd
  4179  0C24  0844               	movf	_wd+1,w
  4180  0C25  1803               	skipnc
  4181  0C26  3E01               	addlw	1
  4182  0C27  3E02               	addlw	2
  4183  0C28  00C4               	movwf	_wd+1
  4184  0C29                     l3217:	
  4185                           
  4186                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4187  0C29  30E8               	movlw	232
  4188  0C2A  00F6               	movwf	___lwdiv@divisor
  4189  0C2B  3003               	movlw	3
  4190  0C2C  00F7               	movwf	___lwdiv@divisor+1
  4191  0C2D  0844               	movf	_wd+1,w
  4192  0C2E  00F9               	movwf	___lwdiv@dividend+1
  4193  0C2F  0843               	movf	_wd,w
  4194  0C30  00F8               	movwf	___lwdiv@dividend
  4195  0C31  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4196  0C36  0876               	movf	?___lwdiv,w
  4197  0C37  00DC               	movwf	??_get_temp
  4198  0C38  085C               	movf	??_get_temp,w
  4199  0C39  00D5               	movwf	_shifen
  4200                           
  4201                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4202  0C3A  3064               	movlw	100
  4203  0C3B  00F6               	movwf	___lwdiv@divisor
  4204  0C3C  3000               	movlw	0
  4205  0C3D  00F7               	movwf	___lwdiv@divisor+1
  4206  0C3E  0844               	movf	_wd+1,w
  4207  0C3F  00F3               	movwf	___lwmod@dividend+1
  4208  0C40  0843               	movf	_wd,w
  4209  0C41  00F2               	movwf	___lwmod@dividend
  4210  0C42  30E8               	movlw	232
  4211  0C43  00F0               	movwf	___lwmod@divisor
  4212  0C44  3003               	movlw	3
  4213  0C45  00F1               	movwf	___lwmod@divisor+1
  4214  0C46  120A  158A  20C5  120A  158A  	fcall	___lwmod
  4215  0C4B  0871               	movf	?___lwmod+1,w
  4216  0C4C  00F9               	movwf	___lwdiv@dividend+1
  4217  0C4D  0870               	movf	?___lwmod,w
  4218  0C4E  00F8               	movwf	___lwdiv@dividend
  4219  0C4F  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4220  0C54  0876               	movf	?___lwdiv,w
  4221  0C55  00DC               	movwf	??_get_temp
  4222  0C56  085C               	movf	??_get_temp,w
  4223  0C57  00D4               	movwf	_baifen
  4224                           
  4225                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4226  0C58  300A               	movlw	10
  4227  0C59  00F6               	movwf	___lwdiv@divisor
  4228  0C5A  3000               	movlw	0
  4229  0C5B  00F7               	movwf	___lwdiv@divisor+1
  4230  0C5C  0844               	movf	_wd+1,w
  4231  0C5D  00F3               	movwf	___lwmod@dividend+1
  4232  0C5E  0843               	movf	_wd,w
  4233  0C5F  00F2               	movwf	___lwmod@dividend
  4234  0C60  3064               	movlw	100
  4235  0C61  00F0               	movwf	___lwmod@divisor
  4236  0C62  3000               	movlw	0
  4237  0C63  00F1               	movwf	___lwmod@divisor+1
  4238  0C64  120A  158A  20C5  120A  158A  	fcall	___lwmod
  4239  0C69  0871               	movf	?___lwmod+1,w
  4240  0C6A  00F9               	movwf	___lwdiv@dividend+1
  4241  0C6B  0870               	movf	?___lwmod,w
  4242  0C6C  00F8               	movwf	___lwdiv@dividend
  4243  0C6D  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4244  0C72  0876               	movf	?___lwdiv,w
  4245  0C73  00DC               	movwf	??_get_temp
  4246  0C74  085C               	movf	??_get_temp,w
  4247  0C75  00D3               	movwf	_qianfen
  4248                           
  4249                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4250  0C76  300A               	movlw	10
  4251  0C77  00F0               	movwf	___lwmod@divisor
  4252  0C78  3000               	movlw	0
  4253  0C79  00F1               	movwf	___lwmod@divisor+1
  4254  0C7A  0844               	movf	_wd+1,w
  4255  0C7B  00F3               	movwf	___lwmod@dividend+1
  4256  0C7C  0843               	movf	_wd,w
  4257  0C7D  00F2               	movwf	___lwmod@dividend
  4258  0C7E  120A  158A  20C5   	fcall	___lwmod
  4259  0C81  0870               	movf	?___lwmod,w
  4260  0C82  00DC               	movwf	??_get_temp
  4261  0C83  085C               	movf	??_get_temp,w
  4262  0C84  00D2               	movwf	_wanfen
  4263                           
  4264                           ;Thermometer_src.c: 118: __nop();
  4265  0C85  0000               	nop
  4266  0C86  0008               	return
  4267  0C87                     __end_of_get_temp:	
  4268                           
  4269                           	psect	text15
  4270  095F                     __ptext15:	
  4271 ;; *************** function _write_byte *****************
  4272 ;; Defined at:
  4273 ;;		line 40 in file "Thermometer_src.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  val             1    wreg     unsigned char 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  val             1    7[COMMON] unsigned char 
  4278 ;;  i               1    8[COMMON] unsigned char 
  4279 ;;  temp            1    6[COMMON] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0, pclath, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/100
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4289 ;;      Params:         0       0       0       0       0
  4290 ;;      Locals:         3       0       0       0       0
  4291 ;;      Temps:          2       0       0       0       0
  4292 ;;      Totals:         5       0       0       0       0
  4293 ;;Total ram usage:        5 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    1
  4296 ;; This function calls:
  4297 ;;		_delay_temp
  4298 ;; This function is called by:
  4299 ;;		_get_temp
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _write_byte
  4305  095F                     _write_byte:	
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4309                           ;write_byte@val stored from wreg
  4310  095F  00F7               	movwf	write_byte@val
  4311                           
  4312                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4313  0960  3008               	movlw	8
  4314  0961  00F4               	movwf	??_write_byte
  4315  0962  0874               	movf	??_write_byte,w
  4316  0963  00F8               	movwf	write_byte@i
  4317  0964                     l2859:	
  4318                           
  4319                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4320  0964  0877               	movf	write_byte@val,w
  4321  0965  3901               	andlw	1
  4322  0966  00F4               	movwf	??_write_byte
  4323  0967  0874               	movf	??_write_byte,w
  4324  0968  00F6               	movwf	write_byte@temp
  4325                           
  4326                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4327  0969  1283               	bcf	3,5	;RP0=0, select bank0
  4328  096A  1303               	bcf	3,6	;RP1=0, select bank0
  4329  096B  1009               	bcf	9,0	;volatile
  4330  096C  1683               	bsf	3,5	;RP0=1, select bank1
  4331  096D  1009               	bcf	9,0	;volatile
  4332                           
  4333                           ;Thermometer_src.c: 48:    __nop();
  4334  096E  0000               	nop
  4335                           
  4336                           ;Thermometer_src.c: 49:    __nop();
  4337  096F  0000               	nop
  4338                           
  4339                           ;Thermometer_src.c: 50:    __nop();
  4340  0970  0000               	nop
  4341                           
  4342                           ;Thermometer_src.c: 51:    __nop();
  4343  0971  0000               	nop
  4344                           
  4345                           ;Thermometer_src.c: 52:    __nop();
  4346  0972  0000               	nop
  4347                           
  4348                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4349  0973  0376               	decf	write_byte@temp,w
  4350  0974  1D03               	btfss	3,2
  4351  0975  2979               	goto	l2879
  4352  0976  1683               	bsf	3,5	;RP0=1, select bank1
  4353  0977  1303               	bcf	3,6	;RP1=0, select bank1
  4354  0978  1409               	bsf	9,0	;volatile
  4355  0979                     l2879:	
  4356                           
  4357                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4358  0979  3007               	movlw	7
  4359  097A  00F4               	movwf	??_write_byte
  4360  097B  0874               	movf	??_write_byte,w
  4361  097C  00F0               	movwf	delay_temp@y
  4362  097D  3002               	movlw	2
  4363  097E  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4364                           
  4365                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4366  0983  1683               	bsf	3,5	;RP0=1, select bank1
  4367  0984  1303               	bcf	3,6	;RP1=0, select bank1
  4368  0985  1409               	bsf	9,0	;volatile
  4369                           
  4370                           ;Thermometer_src.c: 56:    __nop();
  4371  0986  0000               	nop
  4372                           
  4373                           ;Thermometer_src.c: 57:    __nop();
  4374  0987  0000               	nop
  4375                           
  4376                           ;Thermometer_src.c: 58:    val=val>>1;
  4377  0988  0877               	movf	write_byte@val,w
  4378  0989  00F4               	movwf	??_write_byte
  4379  098A  1003               	clrc
  4380  098B  0C74               	rrf	??_write_byte,w
  4381  098C  00F5               	movwf	??_write_byte+1
  4382  098D  0875               	movf	??_write_byte+1,w
  4383  098E  00F7               	movwf	write_byte@val
  4384                           
  4385                           ;Thermometer_src.c: 59:   }
  4386  098F  3001               	movlw	1
  4387  0990  02F8               	subwf	write_byte@i,f
  4388  0991  0878               	movf	write_byte@i,w
  4389  0992  1903               	btfsc	3,2
  4390  0993  0008               	return
  4391  0994  2964               	goto	l2859
  4392  0995                     __end_of_write_byte:	
  4393                           
  4394                           	psect	text16
  4395  092B                     __ptext16:	
  4396 ;; *************** function _reset_temp *****************
  4397 ;; Defined at:
  4398 ;;		line 25 in file "Thermometer_src.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  presence        1    5[COMMON] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0, pclath, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/100
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4412 ;;      Params:         0       0       0       0       0
  4413 ;;      Locals:         1       0       0       0       0
  4414 ;;      Temps:          1       0       0       0       0
  4415 ;;      Totals:         2       0       0       0       0
  4416 ;;Total ram usage:        2 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    1
  4419 ;; This function calls:
  4420 ;;		_delay_temp
  4421 ;; This function is called by:
  4422 ;;		_get_temp
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _reset_temp
  4428  092B                     _reset_temp:	
  4429                           
  4430                           ;Thermometer_src.c: 27:   char presence=1;
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4434  092B  01F5               	clrf	reset_temp@presence
  4435  092C  0AF5               	incf	reset_temp@presence,f
  4436  092D                     l2851:	
  4437                           ;Thermometer_src.c: 28:   while(presence)
  4438                           
  4439                           
  4440                           ;Thermometer_src.c: 28:   while(presence)
  4441  092D  0875               	movf	reset_temp@presence,w
  4442  092E  1903               	btfsc	3,2
  4443  092F  0008               	return
  4444                           
  4445                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4446  0930  1283               	bcf	3,5	;RP0=0, select bank0
  4447  0931  1303               	bcf	3,6	;RP1=0, select bank0
  4448  0932  1009               	bcf	9,0	;volatile
  4449  0933  1683               	bsf	3,5	;RP0=1, select bank1
  4450  0934  1009               	bcf	9,0	;volatile
  4451                           
  4452                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4453  0935  3046               	movlw	70
  4454  0936  00F4               	movwf	??_reset_temp
  4455  0937  0874               	movf	??_reset_temp,w
  4456  0938  00F0               	movwf	delay_temp@y
  4457  0939  3002               	movlw	2
  4458  093A  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4459                           
  4460                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4461  093F  1683               	bsf	3,5	;RP0=1, select bank1
  4462  0940  1303               	bcf	3,6	;RP1=0, select bank1
  4463  0941  1409               	bsf	9,0	;volatile
  4464                           
  4465                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4466  0942  3008               	movlw	8
  4467  0943  00F4               	movwf	??_reset_temp
  4468  0944  0874               	movf	??_reset_temp,w
  4469  0945  00F0               	movwf	delay_temp@y
  4470  0946  3002               	movlw	2
  4471  0947  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4472                           
  4473                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4474  094C  1283               	bcf	3,5	;RP0=0, select bank0
  4475  094D  1303               	bcf	3,6	;RP1=0, select bank0
  4476  094E  1C09               	btfss	9,0	;volatile
  4477  094F  2953               	goto	l2847
  4478  0950  01F5               	clrf	reset_temp@presence
  4479  0951  0AF5               	incf	reset_temp@presence,f
  4480  0952  2954               	goto	l2849
  4481  0953                     l2847:	
  4482  0953  01F5               	clrf	reset_temp@presence
  4483  0954                     l2849:	
  4484                           
  4485                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4486  0954  303C               	movlw	60
  4487  0955  00F4               	movwf	??_reset_temp
  4488  0956  0874               	movf	??_reset_temp,w
  4489  0957  00F0               	movwf	delay_temp@y
  4490  0958  3002               	movlw	2
  4491  0959  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4492  095E  292D               	goto	l2851
  4493  095F                     __end_of_reset_temp:	
  4494                           
  4495                           	psect	text17
  4496  08F7                     __ptext17:	
  4497 ;; *************** function _read_byte *****************
  4498 ;; Defined at:
  4499 ;;		line 62 in file "Thermometer_src.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;		None
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  i               1    6[COMMON] unsigned char 
  4504 ;;  value           1    5[COMMON] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      unsigned char 
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/100
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4514 ;;      Params:         0       0       0       0       0
  4515 ;;      Locals:         2       0       0       0       0
  4516 ;;      Temps:          1       0       0       0       0
  4517 ;;      Totals:         3       0       0       0       0
  4518 ;;Total ram usage:        3 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    1
  4521 ;; This function calls:
  4522 ;;		_delay_temp
  4523 ;; This function is called by:
  4524 ;;		_get_temp
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           
  4529                           ;psect for function _read_byte
  4530  08F7                     _read_byte:	
  4531                           
  4532                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4533                           
  4534                           ;incstack = 0
  4535                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4536  08F7  01F5               	clrf	read_byte@value
  4537                           
  4538                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4539  08F8  3008               	movlw	8
  4540  08F9  00F4               	movwf	??_read_byte
  4541  08FA  0874               	movf	??_read_byte,w
  4542  08FB  00F6               	movwf	read_byte@i
  4543  08FC                     l2901:	
  4544                           
  4545                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4546  08FC  1003               	clrc
  4547  08FD  0CF5               	rrf	read_byte@value,f
  4548                           
  4549                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4550  08FE  1283               	bcf	3,5	;RP0=0, select bank0
  4551  08FF  1303               	bcf	3,6	;RP1=0, select bank0
  4552  0900  1009               	bcf	9,0	;volatile
  4553  0901  1683               	bsf	3,5	;RP0=1, select bank1
  4554  0902  1009               	bcf	9,0	;volatile
  4555                           
  4556                           ;Thermometer_src.c: 71:    __nop();
  4557  0903  0000               	nop
  4558                           
  4559                           ;Thermometer_src.c: 72:    __nop();
  4560  0904  0000               	nop
  4561                           
  4562                           ;Thermometer_src.c: 73:    __nop();
  4563  0905  0000               	nop
  4564                           
  4565                           ;Thermometer_src.c: 74:    __nop();
  4566  0906  0000               	nop
  4567                           
  4568                           ;Thermometer_src.c: 75:    __nop();
  4569  0907  0000               	nop
  4570                           
  4571                           ;Thermometer_src.c: 76:    __nop();
  4572  0908  0000               	nop
  4573                           
  4574                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4575  0909  1683               	bsf	3,5	;RP0=1, select bank1
  4576  090A  1303               	bcf	3,6	;RP1=0, select bank1
  4577  090B  1409               	bsf	9,0	;volatile
  4578                           
  4579                           ;Thermometer_src.c: 78:    __nop();
  4580  090C  0000               	nop
  4581                           
  4582                           ;Thermometer_src.c: 79:    __nop();
  4583  090D  0000               	nop
  4584                           
  4585                           ;Thermometer_src.c: 80:    __nop();
  4586  090E  0000               	nop
  4587                           
  4588                           ;Thermometer_src.c: 81:    __nop();
  4589  090F  0000               	nop
  4590                           
  4591                           ;Thermometer_src.c: 82:    __nop();
  4592  0910  0000               	nop
  4593                           
  4594                           ;Thermometer_src.c: 83:    j=RE0;
  4595  0911  3000               	movlw	0
  4596  0912  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0913  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0914  1809               	btfsc	9,0	;volatile
  4599  0915  3001               	movlw	1
  4600  0916  00C5               	movwf	read_byte@j
  4601                           
  4602                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4603  0917  0845               	movf	read_byte@j,w
  4604  0918  1D03               	btfss	3,2
  4605  0919  17F5               	bsf	read_byte@value,7
  4606                           
  4607                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4608  091A  3007               	movlw	7
  4609  091B  00F4               	movwf	??_read_byte
  4610  091C  0874               	movf	??_read_byte,w
  4611  091D  00F0               	movwf	delay_temp@y
  4612  091E  3002               	movlw	2
  4613  091F  160A  118A  2646  120A  158A  	fcall	_delay_temp
  4614                           
  4615                           ;Thermometer_src.c: 86:   }
  4616  0924  3001               	movlw	1
  4617  0925  02F6               	subwf	read_byte@i,f
  4618  0926  0876               	movf	read_byte@i,w
  4619  0927  1D03               	btfss	3,2
  4620  0928  28FC               	goto	l2901
  4621                           
  4622                           ;Thermometer_src.c: 87:   return(value);
  4623  0929  0875               	movf	read_byte@value,w
  4624  092A  0008               	return
  4625  092B                     __end_of_read_byte:	
  4626                           
  4627                           	psect	text18
  4628  1646                     __ptext18:	
  4629 ;; *************** function _delay_temp *****************
  4630 ;; Defined at:
  4631 ;;		line 121 in file "Thermometer_src.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;  x               1    wreg     unsigned char 
  4634 ;;  y               1    0[COMMON] unsigned char 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  x               1    2[COMMON] unsigned char 
  4637 ;;  z               1    3[COMMON] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/100
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4647 ;;      Params:         1       0       0       0       0
  4648 ;;      Locals:         2       0       0       0       0
  4649 ;;      Temps:          1       0       0       0       0
  4650 ;;      Totals:         4       0       0       0       0
  4651 ;;Total ram usage:        4 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; This function calls:
  4654 ;;		Nothing
  4655 ;; This function is called by:
  4656 ;;		_reset_temp
  4657 ;;		_write_byte
  4658 ;;		_read_byte
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           
  4663                           ;psect for function _delay_temp
  4664  1646                     _delay_temp:	
  4665                           
  4666                           ;incstack = 0
  4667                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  4668                           ;delay_temp@x stored from wreg
  4669  1646  00F2               	movwf	delay_temp@x
  4670  1647                     l301:	
  4671                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  4672                           
  4673                           
  4674                           ;Thermometer_src.c: 125:  z=y;
  4675  1647  0870               	movf	delay_temp@y,w
  4676  1648  00F1               	movwf	??_delay_temp
  4677  1649  0871               	movf	??_delay_temp,w
  4678  164A  00F3               	movwf	delay_temp@z
  4679  164B                     l2777:	
  4680  164B  3001               	movlw	1
  4681  164C  02F3               	subwf	delay_temp@z,f
  4682  164D  1D03               	btfss	3,2
  4683  164E  2E4B               	goto	l2777
  4684                           
  4685                           ;Thermometer_src.c: 127:  }while(--x);
  4686  164F  3001               	movlw	1
  4687  1650  02F2               	subwf	delay_temp@x,f
  4688  1651  1903               	btfsc	3,2
  4689  1652  0008               	return
  4690  1653  2E47               	goto	l301
  4691  1654                     __end_of_delay_temp:	
  4692                           
  4693                           	psect	text19
  4694  16BB                     __ptext19:	
  4695 ;; *************** function _delay2 *****************
  4696 ;; Defined at:
  4697 ;;		line 130 in file "Thermometer_src.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;		None
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  i               2    0[COMMON] int 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  1    wreg      void 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, btemp+1
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/100
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4711 ;;      Params:         0       0       0       0       0
  4712 ;;      Locals:         2       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0
  4714 ;;      Totals:         2       0       0       0       0
  4715 ;;Total ram usage:        2 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_get_temp
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           
  4725                           ;psect for function _delay2
  4726  16BB                     _delay2:	
  4727                           
  4728                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  4729                           
  4730                           ;incstack = 0
  4731                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  4732  16BB  01F0               	clrf	delay2@i
  4733  16BC  01F1               	clrf	delay2@i+1
  4734  16BD                     l2953:	
  4735                           
  4736                           ;Thermometer_src.c: 132:  }
  4737  16BD  3001               	movlw	1
  4738  16BE  07F0               	addwf	delay2@i,f
  4739  16BF  1803               	skipnc
  4740  16C0  0AF1               	incf	delay2@i+1,f
  4741  16C1  3000               	movlw	0
  4742  16C2  07F1               	addwf	delay2@i+1,f
  4743  16C3  0871               	movf	delay2@i+1,w
  4744  16C4  3A80               	xorlw	128
  4745  16C5  00FF               	movwf	127
  4746  16C6  3080               	movlw	128
  4747  16C7  027F               	subwf	127,w
  4748  16C8  1D03               	skipz
  4749  16C9  2ECC               	goto	u1645
  4750  16CA  3032               	movlw	50
  4751  16CB  0270               	subwf	delay2@i,w
  4752  16CC                     u1645:	
  4753  16CC  1803               	btfsc	3,0
  4754  16CD  0008               	return
  4755  16CE  2EBD               	goto	l2953
  4756  16CF                     __end_of_delay2:	
  4757                           
  4758                           	psect	text20
  4759  08C5                     __ptext20:	
  4760 ;; *************** function ___lwmod *****************
  4761 ;; Defined at:
  4762 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  divisor         2    0[COMMON] unsigned int 
  4765 ;;  dividend        2    2[COMMON] unsigned int 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  counter         1    5[COMMON] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  2    0[COMMON] unsigned int 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0
  4772 ;; Tracked objects:
  4773 ;;		On entry : 300/0
  4774 ;;		On exit  : 300/0
  4775 ;;		Unchanged: 300/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4777 ;;      Params:         4       0       0       0       0
  4778 ;;      Locals:         1       0       0       0       0
  4779 ;;      Temps:          1       0       0       0       0
  4780 ;;      Totals:         6       0       0       0       0
  4781 ;;Total ram usage:        6 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_get_temp
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function ___lwmod
  4792  08C5                     ___lwmod:	
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4796  08C5  0870               	movf	___lwmod@divisor,w
  4797  08C6  0471               	iorwf	___lwmod@divisor+1,w
  4798  08C7  1903               	btfsc	3,2
  4799  08C8  28F2               	goto	l3119
  4800  08C9  01F5               	clrf	___lwmod@counter
  4801  08CA  0AF5               	incf	___lwmod@counter,f
  4802  08CB                     l3109:	
  4803  08CB  1BF1               	btfsc	___lwmod@divisor+1,7
  4804  08CC  28D9               	goto	l3111
  4805  08CD  3001               	movlw	1
  4806  08CE                     u1875:	
  4807  08CE  1003               	clrc
  4808  08CF  0DF0               	rlf	___lwmod@divisor,f
  4809  08D0  0DF1               	rlf	___lwmod@divisor+1,f
  4810  08D1  3EFF               	addlw	-1
  4811  08D2  1D03               	skipz
  4812  08D3  28CE               	goto	u1875
  4813  08D4  3001               	movlw	1
  4814  08D5  00F4               	movwf	??___lwmod
  4815  08D6  0874               	movf	??___lwmod,w
  4816  08D7  07F5               	addwf	___lwmod@counter,f
  4817  08D8  28CB               	goto	l3109
  4818  08D9                     l3111:	
  4819  08D9  0871               	movf	___lwmod@divisor+1,w
  4820  08DA  0273               	subwf	___lwmod@dividend+1,w
  4821  08DB  1D03               	skipz
  4822  08DC  28DF               	goto	u1895
  4823  08DD  0870               	movf	___lwmod@divisor,w
  4824  08DE  0272               	subwf	___lwmod@dividend,w
  4825  08DF                     u1895:	
  4826  08DF  1C03               	skipc
  4827  08E0  28E7               	goto	l3115
  4828  08E1  0870               	movf	___lwmod@divisor,w
  4829  08E2  02F2               	subwf	___lwmod@dividend,f
  4830  08E3  0871               	movf	___lwmod@divisor+1,w
  4831  08E4  1C03               	skipc
  4832  08E5  03F3               	decf	___lwmod@dividend+1,f
  4833  08E6  02F3               	subwf	___lwmod@dividend+1,f
  4834  08E7                     l3115:	
  4835  08E7  3001               	movlw	1
  4836  08E8                     u1905:	
  4837  08E8  1003               	clrc
  4838  08E9  0CF1               	rrf	___lwmod@divisor+1,f
  4839  08EA  0CF0               	rrf	___lwmod@divisor,f
  4840  08EB  3EFF               	addlw	-1
  4841  08EC  1D03               	skipz
  4842  08ED  28E8               	goto	u1905
  4843  08EE  3001               	movlw	1
  4844  08EF  02F5               	subwf	___lwmod@counter,f
  4845  08F0  1D03               	btfss	3,2
  4846  08F1  28D9               	goto	l3111
  4847  08F2                     l3119:	
  4848  08F2  0873               	movf	___lwmod@dividend+1,w
  4849  08F3  00F1               	movwf	?___lwmod+1
  4850  08F4  0872               	movf	___lwmod@dividend,w
  4851  08F5  00F0               	movwf	?___lwmod
  4852  08F6  0008               	return
  4853  08F7                     __end_of___lwmod:	
  4854                           
  4855                           	psect	text21
  4856  09CD                     __ptext21:	
  4857 ;; *************** function ___lwdiv *****************
  4858 ;; Defined at:
  4859 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  divisor         2    6[COMMON] unsigned int 
  4862 ;;  dividend        2    8[COMMON] unsigned int 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  quotient        2   11[COMMON] unsigned int 
  4865 ;;  counter         1   13[COMMON] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  2    6[COMMON] unsigned int 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 300/0
  4872 ;;		On exit  : 300/0
  4873 ;;		Unchanged: 300/0
  4874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4875 ;;      Params:         4       0       0       0       0
  4876 ;;      Locals:         3       0       0       0       0
  4877 ;;      Temps:          1       0       0       0       0
  4878 ;;      Totals:         8       0       0       0       0
  4879 ;;Total ram usage:        8 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_get_temp
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           
  4889                           ;psect for function ___lwdiv
  4890  09CD                     ___lwdiv:	
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4894  09CD  01FB               	clrf	___lwdiv@quotient
  4895  09CE  01FC               	clrf	___lwdiv@quotient+1
  4896  09CF  0876               	movf	___lwdiv@divisor,w
  4897  09D0  0477               	iorwf	___lwdiv@divisor+1,w
  4898  09D1  1903               	btfsc	3,2
  4899  09D2  2A04               	goto	l3097
  4900  09D3  01FD               	clrf	___lwdiv@counter
  4901  09D4  0AFD               	incf	___lwdiv@counter,f
  4902  09D5                     l3085:	
  4903  09D5  1BF7               	btfsc	___lwdiv@divisor+1,7
  4904  09D6  29E3               	goto	l3087
  4905  09D7  3001               	movlw	1
  4906  09D8                     u1805:	
  4907  09D8  1003               	clrc
  4908  09D9  0DF6               	rlf	___lwdiv@divisor,f
  4909  09DA  0DF7               	rlf	___lwdiv@divisor+1,f
  4910  09DB  3EFF               	addlw	-1
  4911  09DC  1D03               	skipz
  4912  09DD  29D8               	goto	u1805
  4913  09DE  3001               	movlw	1
  4914  09DF  00FA               	movwf	??___lwdiv
  4915  09E0  087A               	movf	??___lwdiv,w
  4916  09E1  07FD               	addwf	___lwdiv@counter,f
  4917  09E2  29D5               	goto	l3085
  4918  09E3                     l3087:	
  4919  09E3  3001               	movlw	1
  4920  09E4                     u1825:	
  4921  09E4  1003               	clrc
  4922  09E5  0DFB               	rlf	___lwdiv@quotient,f
  4923  09E6  0DFC               	rlf	___lwdiv@quotient+1,f
  4924  09E7  3EFF               	addlw	-1
  4925  09E8  1D03               	skipz
  4926  09E9  29E4               	goto	u1825
  4927  09EA  0877               	movf	___lwdiv@divisor+1,w
  4928  09EB  0279               	subwf	___lwdiv@dividend+1,w
  4929  09EC  1D03               	skipz
  4930  09ED  29F0               	goto	u1835
  4931  09EE  0876               	movf	___lwdiv@divisor,w
  4932  09EF  0278               	subwf	___lwdiv@dividend,w
  4933  09F0                     u1835:	
  4934  09F0  1C03               	skipc
  4935  09F1  29F9               	goto	l3093
  4936  09F2  0876               	movf	___lwdiv@divisor,w
  4937  09F3  02F8               	subwf	___lwdiv@dividend,f
  4938  09F4  0877               	movf	___lwdiv@divisor+1,w
  4939  09F5  1C03               	skipc
  4940  09F6  03F9               	decf	___lwdiv@dividend+1,f
  4941  09F7  02F9               	subwf	___lwdiv@dividend+1,f
  4942  09F8  147B               	bsf	___lwdiv@quotient,0
  4943  09F9                     l3093:	
  4944  09F9  3001               	movlw	1
  4945  09FA                     u1845:	
  4946  09FA  1003               	clrc
  4947  09FB  0CF7               	rrf	___lwdiv@divisor+1,f
  4948  09FC  0CF6               	rrf	___lwdiv@divisor,f
  4949  09FD  3EFF               	addlw	-1
  4950  09FE  1D03               	skipz
  4951  09FF  29FA               	goto	u1845
  4952  0A00  3001               	movlw	1
  4953  0A01  02FD               	subwf	___lwdiv@counter,f
  4954  0A02  1D03               	btfss	3,2
  4955  0A03  29E3               	goto	l3087
  4956  0A04                     l3097:	
  4957  0A04  087C               	movf	___lwdiv@quotient+1,w
  4958  0A05  00F7               	movwf	?___lwdiv+1
  4959  0A06  087B               	movf	___lwdiv@quotient,w
  4960  0A07  00F6               	movwf	?___lwdiv
  4961  0A08  0008               	return
  4962  0A09                     __end_of___lwdiv:	
  4963                           
  4964                           	psect	text22
  4965  1772                     __ptext22:	
  4966 ;; *************** function ___lbmod *****************
  4967 ;; Defined at:
  4968 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  dividend        1    wreg     unsigned char 
  4971 ;;  divisor         1    0[COMMON] unsigned char 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  dividend        1    4[COMMON] unsigned char 
  4974 ;;  rem             1    6[COMMON] unsigned char 
  4975 ;;  counter         1    5[COMMON] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      unsigned char 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0
  4980 ;; Tracked objects:
  4981 ;;		On entry : 300/0
  4982 ;;		On exit  : 300/0
  4983 ;;		Unchanged: 300/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4985 ;;      Params:         1       0       0       0       0
  4986 ;;      Locals:         3       0       0       0       0
  4987 ;;      Temps:          3       0       0       0       0
  4988 ;;      Totals:         7       0       0       0       0
  4989 ;;Total ram usage:        7 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_get_temp
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           
  4999                           ;psect for function ___lbmod
  5000  1772                     ___lbmod:	
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5004                           ;___lbmod@dividend stored from wreg
  5005  1772  00F4               	movwf	___lbmod@dividend
  5006  1773  3008               	movlw	8
  5007  1774  00F1               	movwf	??___lbmod
  5008  1775  0871               	movf	??___lbmod,w
  5009  1776  00F5               	movwf	___lbmod@counter
  5010  1777  01F6               	clrf	___lbmod@rem
  5011  1778                     l3063:	
  5012  1778  0874               	movf	___lbmod@dividend,w
  5013  1779  00F1               	movwf	??___lbmod
  5014  177A  3007               	movlw	7
  5015  177B                     u1765:	
  5016  177B  1003               	clrc
  5017  177C  0CF1               	rrf	??___lbmod,f
  5018  177D  3EFF               	addlw	-1
  5019  177E  1D03               	skipz
  5020  177F  2F7B               	goto	u1765
  5021  1780  0876               	movf	___lbmod@rem,w
  5022  1781  00F2               	movwf	??___lbmod+1
  5023  1782  0772               	addwf	??___lbmod+1,w
  5024  1783  0471               	iorwf	??___lbmod,w
  5025  1784  00F3               	movwf	??___lbmod+2
  5026  1785  0873               	movf	??___lbmod+2,w
  5027  1786  00F6               	movwf	___lbmod@rem
  5028  1787  1003               	clrc
  5029  1788  0DF4               	rlf	___lbmod@dividend,f
  5030  1789  0870               	movf	___lbmod@divisor,w
  5031  178A  0276               	subwf	___lbmod@rem,w
  5032  178B  1C03               	skipc
  5033  178C  2F8F               	goto	l1051
  5034  178D  0870               	movf	___lbmod@divisor,w
  5035  178E  02F6               	subwf	___lbmod@rem,f
  5036  178F                     l1051:	
  5037  178F  3001               	movlw	1
  5038  1790  02F5               	subwf	___lbmod@counter,f
  5039  1791  1D03               	btfss	3,2
  5040  1792  2F78               	goto	l3063
  5041  1793  0876               	movf	___lbmod@rem,w
  5042  1794  0008               	return
  5043  1795                     __end_of___lbmod:	
  5044                           
  5045                           	psect	text23
  5046  1751                     __ptext23:	
  5047 ;; *************** function ___lbdiv *****************
  5048 ;; Defined at:
  5049 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  dividend        1    wreg     unsigned char 
  5052 ;;  divisor         1    0[COMMON] unsigned char 
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  dividend        1    2[COMMON] unsigned char 
  5055 ;;  quotient        1    4[COMMON] unsigned char 
  5056 ;;  counter         1    3[COMMON] unsigned char 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      unsigned char 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0
  5061 ;; Tracked objects:
  5062 ;;		On entry : 300/0
  5063 ;;		On exit  : 300/0
  5064 ;;		Unchanged: 300/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5066 ;;      Params:         1       0       0       0       0
  5067 ;;      Locals:         3       0       0       0       0
  5068 ;;      Temps:          1       0       0       0       0
  5069 ;;      Totals:         5       0       0       0       0
  5070 ;;Total ram usage:        5 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_get_temp
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function ___lbdiv
  5081  1751                     ___lbdiv:	
  5082                           
  5083                           ;incstack = 0
  5084                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5085                           ;___lbdiv@dividend stored from wreg
  5086  1751  00F2               	movwf	___lbdiv@dividend
  5087  1752  01F4               	clrf	___lbdiv@quotient
  5088  1753  0870               	movf	___lbdiv@divisor,w
  5089  1754  1903               	btfsc	3,2
  5090  1755  2F70               	goto	l3055
  5091  1756  01F3               	clrf	___lbdiv@counter
  5092  1757  0AF3               	incf	___lbdiv@counter,f
  5093  1758                     l3043:	
  5094  1758  1BF0               	btfsc	___lbdiv@divisor,7
  5095  1759  2F61               	goto	l3045
  5096  175A  1003               	clrc
  5097  175B  0DF0               	rlf	___lbdiv@divisor,f
  5098  175C  3001               	movlw	1
  5099  175D  00F1               	movwf	??___lbdiv
  5100  175E  0871               	movf	??___lbdiv,w
  5101  175F  07F3               	addwf	___lbdiv@counter,f
  5102  1760  2F58               	goto	l3043
  5103  1761                     l3045:	
  5104  1761  1003               	clrc
  5105  1762  0DF4               	rlf	___lbdiv@quotient,f
  5106  1763  0870               	movf	___lbdiv@divisor,w
  5107  1764  0272               	subwf	___lbdiv@dividend,w
  5108  1765  1C03               	skipc
  5109  1766  2F6B               	goto	L1
  5110  1767  0870               	movf	___lbdiv@divisor,w
  5111  1768  02F2               	subwf	___lbdiv@dividend,f
  5112  1769  1474               	bsf	___lbdiv@quotient,0
  5113  176A  1003               	clrc
  5114  176B                     L1:	
  5115  176B  0CF0               	rrf	___lbdiv@divisor,f
  5116  176C  3001               	movlw	1
  5117  176D  02F3               	subwf	___lbdiv@counter,f
  5118  176E  1D03               	btfss	3,2
  5119  176F  2F61               	goto	l3045
  5120  1770                     l3055:	
  5121  1770  0874               	movf	___lbdiv@quotient,w
  5122  1771  0008               	return
  5123  1772                     __end_of___lbdiv:	
  5124                           
  5125                           	psect	text24
  5126  1663                     __ptext24:	
  5127 ;; *************** function _ds1302_init *****************
  5128 ;; Defined at:
  5129 ;;		line 6 in file "clock_src.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 300/0
  5140 ;;		On exit  : 300/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5143 ;;      Params:         0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0
  5146 ;;      Totals:         0       0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    1
  5150 ;; This function calls:
  5151 ;;		_time_write_1
  5152 ;; This function is called by:
  5153 ;;		_main
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _ds1302_init
  5159  1663                     _ds1302_init:	
  5160                           
  5161                           ;clock_src.c: 8:    RB0=0;
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5165  1663  1006               	bcf	6,0	;volatile
  5166                           
  5167                           ;clock_src.c: 9:    RB5 =0;
  5168  1664  1286               	bcf	6,5	;volatile
  5169                           
  5170                           ;clock_src.c: 10:    RB5=1;
  5171  1665  1686               	bsf	6,5	;volatile
  5172                           
  5173                           ;clock_src.c: 11:    time_write_1(0x8e);
  5174  1666  308E               	movlw	142
  5175  1667  120A  158A  201B  160A  118A  	fcall	_time_write_1
  5176                           
  5177                           ;clock_src.c: 12:    time_write_1(0);
  5178  166C  3000               	movlw	0
  5179  166D  120A  158A  201B   	fcall	_time_write_1
  5180                           
  5181                           ;clock_src.c: 13:    RB5=0;
  5182  1670  1286               	bcf	6,5	;volatile
  5183  1671  0008               	return
  5184  1672                     __end_of_ds1302_init:	
  5185                           
  5186                           	psect	text25
  5187  1730                     __ptext25:	
  5188 ;; *************** function _display_temp *****************
  5189 ;; Defined at:
  5190 ;;		line 12 in file "Thermometer_src.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;		None
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      void 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 300/0
  5201 ;;		On exit  : 300/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5204 ;;      Params:         0       0       0       0       0
  5205 ;;      Locals:         0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0
  5207 ;;      Totals:         0       0       0       0       0
  5208 ;;Total ram usage:        0 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    2
  5211 ;; This function calls:
  5212 ;;		_write_char
  5213 ;; This function is called by:
  5214 ;;		_main
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           
  5219                           ;psect for function _display_temp
  5220  1730                     _display_temp:	
  5221                           
  5222                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5223                           
  5224                           ;incstack = 0
  5225                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5226  1730  0857               	movf	_shi,w
  5227  1731  3E30               	addlw	48
  5228  1732  160A  118A  26E5  160A  118A  	fcall	_write_char
  5229                           
  5230                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5231  1737  0856               	movf	_ge,w
  5232  1738  3E30               	addlw	48
  5233  1739  160A  118A  26E5  160A  118A  	fcall	_write_char
  5234                           
  5235                           ;Thermometer_src.c: 17:  write_char('.');
  5236  173E  302E               	movlw	46
  5237  173F  160A  118A  26E5  160A  118A  	fcall	_write_char
  5238                           
  5239                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5240  1744  0855               	movf	_shifen,w
  5241  1745  3E30               	addlw	48
  5242  1746  160A  118A  26E5  160A  118A  	fcall	_write_char
  5243                           
  5244                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5245  174B  0854               	movf	_baifen,w
  5246  174C  3E30               	addlw	48
  5247  174D  160A  118A  26E5   	fcall	_write_char
  5248  1750  0008               	return
  5249  1751                     __end_of_display_temp:	
  5250                           
  5251                           	psect	text26
  5252  004B                     __ptext26:	
  5253 ;; *************** function _display_day *****************
  5254 ;; Defined at:
  5255 ;;		line 4 in file "Day_of_week_src.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  num             2    3[COMMON] int 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 300/0
  5266 ;;		On exit  : 300/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5269 ;;      Params:         2       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0
  5272 ;;      Totals:         2       0       0       0       0
  5273 ;;Total ram usage:        2 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    2
  5276 ;; This function calls:
  5277 ;;		_write_char
  5278 ;; This function is called by:
  5279 ;;		_main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _display_day
  5285  004B                     _display_day:	
  5286                           
  5287                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5291  004B  0373               	decf	display_day@num,w
  5292  004C  0474               	iorwf	display_day@num+1,w
  5293  004D  1903               	btfsc	3,2
  5294  004E  2853               	goto	l3973
  5295  004F  0873               	movf	display_day@num,w
  5296  0050  0474               	iorwf	display_day@num+1,w
  5297  0051  1D03               	btfss	3,2
  5298  0052  2865               	goto	l3975
  5299  0053                     l3973:	
  5300                           
  5301                           ;Day_of_week_src.c: 6:     write_char('M');
  5302  0053  304D               	movlw	77
  5303  0054  160A  118A  26E5  120A  118A  	fcall	_write_char
  5304                           
  5305                           ;Day_of_week_src.c: 7:     write_char('o');
  5306  0059  306F               	movlw	111
  5307  005A  160A  118A  26E5  120A  118A  	fcall	_write_char
  5308                           
  5309                           ;Day_of_week_src.c: 8:     write_char('n');
  5310  005F  306E               	movlw	110
  5311  0060  160A  118A  26E5  120A  118A  	fcall	_write_char
  5312  0065                     l3975:	
  5313                           
  5314                           ;Day_of_week_src.c: 10:     if(num == 2){
  5315  0065  3002               	movlw	2
  5316  0066  0673               	xorwf	display_day@num,w
  5317  0067  0474               	iorwf	display_day@num+1,w
  5318  0068  1D03               	btfss	3,2
  5319  0069  287C               	goto	l3979
  5320                           
  5321                           ;Day_of_week_src.c: 11:     write_char('T');
  5322  006A  3054               	movlw	84
  5323  006B  160A  118A  26E5  120A  118A  	fcall	_write_char
  5324                           
  5325                           ;Day_of_week_src.c: 12:     write_char('u');
  5326  0070  3075               	movlw	117
  5327  0071  160A  118A  26E5  120A  118A  	fcall	_write_char
  5328                           
  5329                           ;Day_of_week_src.c: 13:     write_char('e');
  5330  0076  3065               	movlw	101
  5331  0077  160A  118A  26E5  120A  118A  	fcall	_write_char
  5332  007C                     l3979:	
  5333                           
  5334                           ;Day_of_week_src.c: 15:     if(num == 3){
  5335  007C  3003               	movlw	3
  5336  007D  0673               	xorwf	display_day@num,w
  5337  007E  0474               	iorwf	display_day@num+1,w
  5338  007F  1D03               	btfss	3,2
  5339  0080  2893               	goto	l3983
  5340                           
  5341                           ;Day_of_week_src.c: 16:     write_char('W');
  5342  0081  3057               	movlw	87
  5343  0082  160A  118A  26E5  120A  118A  	fcall	_write_char
  5344                           
  5345                           ;Day_of_week_src.c: 17:     write_char('e');
  5346  0087  3065               	movlw	101
  5347  0088  160A  118A  26E5  120A  118A  	fcall	_write_char
  5348                           
  5349                           ;Day_of_week_src.c: 18:     write_char('d');
  5350  008D  3064               	movlw	100
  5351  008E  160A  118A  26E5  120A  118A  	fcall	_write_char
  5352  0093                     l3983:	
  5353                           
  5354                           ;Day_of_week_src.c: 20:     if(num == 4){
  5355  0093  3004               	movlw	4
  5356  0094  0673               	xorwf	display_day@num,w
  5357  0095  0474               	iorwf	display_day@num+1,w
  5358  0096  1D03               	btfss	3,2
  5359  0097  28AA               	goto	l3987
  5360                           
  5361                           ;Day_of_week_src.c: 21:     write_char('T');
  5362  0098  3054               	movlw	84
  5363  0099  160A  118A  26E5  120A  118A  	fcall	_write_char
  5364                           
  5365                           ;Day_of_week_src.c: 22:     write_char('h');
  5366  009E  3068               	movlw	104
  5367  009F  160A  118A  26E5  120A  118A  	fcall	_write_char
  5368                           
  5369                           ;Day_of_week_src.c: 23:     write_char('u');
  5370  00A4  3075               	movlw	117
  5371  00A5  160A  118A  26E5  120A  118A  	fcall	_write_char
  5372  00AA                     l3987:	
  5373                           
  5374                           ;Day_of_week_src.c: 25:     if(num == 5){
  5375  00AA  3005               	movlw	5
  5376  00AB  0673               	xorwf	display_day@num,w
  5377  00AC  0474               	iorwf	display_day@num+1,w
  5378  00AD  1D03               	btfss	3,2
  5379  00AE  28C1               	goto	l3991
  5380                           
  5381                           ;Day_of_week_src.c: 26:     write_char('F');
  5382  00AF  3046               	movlw	70
  5383  00B0  160A  118A  26E5  120A  118A  	fcall	_write_char
  5384                           
  5385                           ;Day_of_week_src.c: 27:     write_char('r');
  5386  00B5  3072               	movlw	114
  5387  00B6  160A  118A  26E5  120A  118A  	fcall	_write_char
  5388                           
  5389                           ;Day_of_week_src.c: 28:     write_char('i');
  5390  00BB  3069               	movlw	105
  5391  00BC  160A  118A  26E5  120A  118A  	fcall	_write_char
  5392  00C1                     l3991:	
  5393                           
  5394                           ;Day_of_week_src.c: 30:     if(num == 6){
  5395  00C1  3006               	movlw	6
  5396  00C2  0673               	xorwf	display_day@num,w
  5397  00C3  0474               	iorwf	display_day@num+1,w
  5398  00C4  1D03               	btfss	3,2
  5399  00C5  28D8               	goto	l3995
  5400                           
  5401                           ;Day_of_week_src.c: 31:     write_char('S');
  5402  00C6  3053               	movlw	83
  5403  00C7  160A  118A  26E5  120A  118A  	fcall	_write_char
  5404                           
  5405                           ;Day_of_week_src.c: 32:     write_char('a');
  5406  00CC  3061               	movlw	97
  5407  00CD  160A  118A  26E5  120A  118A  	fcall	_write_char
  5408                           
  5409                           ;Day_of_week_src.c: 33:     write_char('t');
  5410  00D2  3074               	movlw	116
  5411  00D3  160A  118A  26E5  120A  118A  	fcall	_write_char
  5412  00D8                     l3995:	
  5413                           
  5414                           ;Day_of_week_src.c: 35:     if(num == 7){
  5415  00D8  3007               	movlw	7
  5416  00D9  0673               	xorwf	display_day@num,w
  5417  00DA  0474               	iorwf	display_day@num+1,w
  5418  00DB  1D03               	btfss	3,2
  5419  00DC  0008               	return
  5420                           
  5421                           ;Day_of_week_src.c: 36:     write_char('S');
  5422  00DD  3053               	movlw	83
  5423  00DE  160A  118A  26E5  120A  118A  	fcall	_write_char
  5424                           
  5425                           ;Day_of_week_src.c: 37:     write_char('u');
  5426  00E3  3075               	movlw	117
  5427  00E4  160A  118A  26E5  120A  118A  	fcall	_write_char
  5428                           
  5429                           ;Day_of_week_src.c: 38:     write_char('n');
  5430  00E9  306E               	movlw	110
  5431  00EA  160A  118A  26E5   	fcall	_write_char
  5432  00ED  0008               	return
  5433  00EE                     __end_of_display_day:	
  5434                           
  5435                           	psect	text27
  5436  0AEA                     __ptext27:	
  5437 ;; *************** function _display_date *****************
  5438 ;; Defined at:
  5439 ;;		line 79 in file "clock_src.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  i               2    5[COMMON] int 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 300/0
  5450 ;;		On exit  : 300/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5453 ;;      Params:         0       0       0       0       0
  5454 ;;      Locals:         2       0       0       0       0
  5455 ;;      Temps:          2       0       0       0       0
  5456 ;;      Totals:         4       0       0       0       0
  5457 ;;Total ram usage:        4 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		_write_char
  5462 ;; This function is called by:
  5463 ;;		_main
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           
  5468                           ;psect for function _display_date
  5469  0AEA                     _display_date:	
  5470                           
  5471                           ;clock_src.c: 81:      int i;;clock_src.c: 82:      if(RB1==0)
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5475  0AEA  1886               	btfsc	6,1	;volatile
  5476  0AEB  2AF4               	goto	l3249
  5477                           
  5478                           ;clock_src.c: 83:        {;clock_src.c: 84:           table1[0]=table1[3];
  5479  0AEC  0823               	movf	_table1+3,w
  5480  0AED  00F3               	movwf	??_display_date
  5481  0AEE  0873               	movf	??_display_date,w
  5482  0AEF  00A0               	movwf	_table1
  5483                           
  5484                           ;clock_src.c: 85:           table1[1]=table1[4];
  5485  0AF0  0824               	movf	_table1+4,w
  5486  0AF1  00F3               	movwf	??_display_date
  5487  0AF2  0873               	movf	??_display_date,w
  5488  0AF3  00A1               	movwf	_table1+1
  5489  0AF4                     l3249:	
  5490                           
  5491                           ;clock_src.c: 87:      i=table1[3]&0xf0;
  5492  0AF4  0823               	movf	_table1+3,w
  5493  0AF5  39F0               	andlw	240
  5494  0AF6  00F3               	movwf	??_display_date
  5495  0AF7  01F4               	clrf	??_display_date+1
  5496  0AF8  0873               	movf	??_display_date,w
  5497  0AF9  00F5               	movwf	display_date@i
  5498  0AFA  0874               	movf	??_display_date+1,w
  5499  0AFB  00F6               	movwf	display_date@i+1
  5500                           
  5501                           ;clock_src.c: 88:      i=i>>4;
  5502  0AFC  0E75               	swapf	display_date@i,w
  5503  0AFD  390F               	andlw	15
  5504  0AFE  00F5               	movwf	display_date@i
  5505  0AFF  0E76               	swapf	display_date@i+1,w
  5506  0B00  39F0               	andlw	240
  5507  0B01  04F5               	iorwf	display_date@i,f
  5508  0B02  0E76               	swapf	display_date@i+1,w
  5509  0B03  390F               	andlw	15
  5510  0B04  00F6               	movwf	display_date@i+1
  5511  0B05  30F0               	movlw	240
  5512  0B06  1DF6               	btfss	display_date@i+1,3
  5513  0B07  3000               	movlw	0
  5514  0B08  04F6               	iorwf	display_date@i+1,f
  5515                           
  5516                           ;clock_src.c: 89:      write_char(i + '0');
  5517  0B09  0875               	movf	display_date@i,w
  5518  0B0A  3E30               	addlw	48
  5519  0B0B  160A  118A  26E5  120A  158A  	fcall	_write_char
  5520                           
  5521                           ;clock_src.c: 91:      i=table1[3]&0x0f;
  5522  0B10  0823               	movf	_table1+3,w
  5523  0B11  390F               	andlw	15
  5524  0B12  00F3               	movwf	??_display_date
  5525  0B13  01F4               	clrf	??_display_date+1
  5526  0B14  0873               	movf	??_display_date,w
  5527  0B15  00F5               	movwf	display_date@i
  5528  0B16  0874               	movf	??_display_date+1,w
  5529  0B17  00F6               	movwf	display_date@i+1
  5530                           
  5531                           ;clock_src.c: 92:      write_char(i + '0');
  5532  0B18  0875               	movf	display_date@i,w
  5533  0B19  3E30               	addlw	48
  5534  0B1A  160A  118A  26E5  120A  158A  	fcall	_write_char
  5535                           
  5536                           ;clock_src.c: 93:      write_char('/');
  5537  0B1F  302F               	movlw	47
  5538  0B20  160A  118A  26E5  120A  158A  	fcall	_write_char
  5539                           
  5540                           ;clock_src.c: 97:      i=table1[4]&0xf0;
  5541  0B25  0824               	movf	_table1+4,w
  5542  0B26  39F0               	andlw	240
  5543  0B27  00F3               	movwf	??_display_date
  5544  0B28  01F4               	clrf	??_display_date+1
  5545  0B29  0873               	movf	??_display_date,w
  5546  0B2A  00F5               	movwf	display_date@i
  5547  0B2B  0874               	movf	??_display_date+1,w
  5548  0B2C  00F6               	movwf	display_date@i+1
  5549                           
  5550                           ;clock_src.c: 98:      i=i>>4;
  5551  0B2D  0E75               	swapf	display_date@i,w
  5552  0B2E  390F               	andlw	15
  5553  0B2F  00F5               	movwf	display_date@i
  5554  0B30  0E76               	swapf	display_date@i+1,w
  5555  0B31  39F0               	andlw	240
  5556  0B32  04F5               	iorwf	display_date@i,f
  5557  0B33  0E76               	swapf	display_date@i+1,w
  5558  0B34  390F               	andlw	15
  5559  0B35  00F6               	movwf	display_date@i+1
  5560  0B36  30F0               	movlw	240
  5561  0B37  1DF6               	btfss	display_date@i+1,3
  5562  0B38  3000               	movlw	0
  5563  0B39  04F6               	iorwf	display_date@i+1,f
  5564                           
  5565                           ;clock_src.c: 99:      write_char(i + '0');
  5566  0B3A  0875               	movf	display_date@i,w
  5567  0B3B  3E30               	addlw	48
  5568  0B3C  160A  118A  26E5  120A  158A  	fcall	_write_char
  5569                           
  5570                           ;clock_src.c: 101:      i=table1[4]&0x0f;
  5571  0B41  0824               	movf	_table1+4,w
  5572  0B42  390F               	andlw	15
  5573  0B43  00F3               	movwf	??_display_date
  5574  0B44  01F4               	clrf	??_display_date+1
  5575  0B45  0873               	movf	??_display_date,w
  5576  0B46  00F5               	movwf	display_date@i
  5577  0B47  0874               	movf	??_display_date+1,w
  5578  0B48  00F6               	movwf	display_date@i+1
  5579                           
  5580                           ;clock_src.c: 102:      write_char(i + '0');
  5581  0B49  0875               	movf	display_date@i,w
  5582  0B4A  3E30               	addlw	48
  5583  0B4B  160A  118A  26E5  120A  158A  	fcall	_write_char
  5584                           
  5585                           ;clock_src.c: 103:      write_char('/');
  5586  0B50  302F               	movlw	47
  5587  0B51  160A  118A  26E5  120A  158A  	fcall	_write_char
  5588                           
  5589                           ;clock_src.c: 107:      i=table1[6]&0xf0;
  5590  0B56  0826               	movf	_table1+6,w
  5591  0B57  39F0               	andlw	240
  5592  0B58  00F3               	movwf	??_display_date
  5593  0B59  01F4               	clrf	??_display_date+1
  5594  0B5A  0873               	movf	??_display_date,w
  5595  0B5B  00F5               	movwf	display_date@i
  5596  0B5C  0874               	movf	??_display_date+1,w
  5597  0B5D  00F6               	movwf	display_date@i+1
  5598                           
  5599                           ;clock_src.c: 108:      i=i>>4;
  5600  0B5E  0E75               	swapf	display_date@i,w
  5601  0B5F  390F               	andlw	15
  5602  0B60  00F5               	movwf	display_date@i
  5603  0B61  0E76               	swapf	display_date@i+1,w
  5604  0B62  39F0               	andlw	240
  5605  0B63  04F5               	iorwf	display_date@i,f
  5606  0B64  0E76               	swapf	display_date@i+1,w
  5607  0B65  390F               	andlw	15
  5608  0B66  00F6               	movwf	display_date@i+1
  5609  0B67  30F0               	movlw	240
  5610  0B68  1DF6               	btfss	display_date@i+1,3
  5611  0B69  3000               	movlw	0
  5612  0B6A  04F6               	iorwf	display_date@i+1,f
  5613                           
  5614                           ;clock_src.c: 109:      write_char(i + '0');
  5615  0B6B  0875               	movf	display_date@i,w
  5616  0B6C  3E30               	addlw	48
  5617  0B6D  160A  118A  26E5  120A  158A  	fcall	_write_char
  5618                           
  5619                           ;clock_src.c: 111:      i=table1[6]&0x0f;
  5620  0B72  0826               	movf	_table1+6,w
  5621  0B73  390F               	andlw	15
  5622  0B74  00F3               	movwf	??_display_date
  5623  0B75  01F4               	clrf	??_display_date+1
  5624  0B76  0873               	movf	??_display_date,w
  5625  0B77  00F5               	movwf	display_date@i
  5626  0B78  0874               	movf	??_display_date+1,w
  5627  0B79  00F6               	movwf	display_date@i+1
  5628                           
  5629                           ;clock_src.c: 112:      write_char(i + '0');
  5630  0B7A  0875               	movf	display_date@i,w
  5631  0B7B  3E30               	addlw	48
  5632  0B7C  160A  118A  26E5   	fcall	_write_char
  5633  0B7F  0008               	return
  5634  0B80                     __end_of_display_date:	
  5635                           
  5636                           	psect	text28
  5637  0A54                     __ptext28:	
  5638 ;; *************** function _display_clock *****************
  5639 ;; Defined at:
  5640 ;;		line 37 in file "clock_src.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  i               2    5[COMMON] int 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 300/0
  5651 ;;		On exit  : 300/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5654 ;;      Params:         0       0       0       0       0
  5655 ;;      Locals:         2       0       0       0       0
  5656 ;;      Temps:          2       0       0       0       0
  5657 ;;      Totals:         4       0       0       0       0
  5658 ;;Total ram usage:        4 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    2
  5661 ;; This function calls:
  5662 ;;		_write_char
  5663 ;; This function is called by:
  5664 ;;		_main
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _display_clock
  5670  0A54                     _display_clock:	
  5671                           
  5672                           ;clock_src.c: 39:      int i;;clock_src.c: 40:      if(RB1==0)
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5676  0A54  1886               	btfsc	6,1	;volatile
  5677  0A55  2A5E               	goto	l3287
  5678                           
  5679                           ;clock_src.c: 41:        {;clock_src.c: 42:           table1[0]=table1[3];
  5680  0A56  0823               	movf	_table1+3,w
  5681  0A57  00F3               	movwf	??_display_clock
  5682  0A58  0873               	movf	??_display_clock,w
  5683  0A59  00A0               	movwf	_table1
  5684                           
  5685                           ;clock_src.c: 43:           table1[1]=table1[4];
  5686  0A5A  0824               	movf	_table1+4,w
  5687  0A5B  00F3               	movwf	??_display_clock
  5688  0A5C  0873               	movf	??_display_clock,w
  5689  0A5D  00A1               	movwf	_table1+1
  5690  0A5E                     l3287:	
  5691                           
  5692                           ;clock_src.c: 46:      i=table1[2]&0xf0;
  5693  0A5E  0822               	movf	_table1+2,w
  5694  0A5F  39F0               	andlw	240
  5695  0A60  00F3               	movwf	??_display_clock
  5696  0A61  01F4               	clrf	??_display_clock+1
  5697  0A62  0873               	movf	??_display_clock,w
  5698  0A63  00F5               	movwf	display_clock@i
  5699  0A64  0874               	movf	??_display_clock+1,w
  5700  0A65  00F6               	movwf	display_clock@i+1
  5701                           
  5702                           ;clock_src.c: 47:      i=i>>4;
  5703  0A66  0E75               	swapf	display_clock@i,w
  5704  0A67  390F               	andlw	15
  5705  0A68  00F5               	movwf	display_clock@i
  5706  0A69  0E76               	swapf	display_clock@i+1,w
  5707  0A6A  39F0               	andlw	240
  5708  0A6B  04F5               	iorwf	display_clock@i,f
  5709  0A6C  0E76               	swapf	display_clock@i+1,w
  5710  0A6D  390F               	andlw	15
  5711  0A6E  00F6               	movwf	display_clock@i+1
  5712  0A6F  30F0               	movlw	240
  5713  0A70  1DF6               	btfss	display_clock@i+1,3
  5714  0A71  3000               	movlw	0
  5715  0A72  04F6               	iorwf	display_clock@i+1,f
  5716                           
  5717                           ;clock_src.c: 48:      write_char(i + '0');
  5718  0A73  0875               	movf	display_clock@i,w
  5719  0A74  3E30               	addlw	48
  5720  0A75  160A  118A  26E5  120A  158A  	fcall	_write_char
  5721                           
  5722                           ;clock_src.c: 52:      i=table1[2]&0x0f;
  5723  0A7A  0822               	movf	_table1+2,w
  5724  0A7B  390F               	andlw	15
  5725  0A7C  00F3               	movwf	??_display_clock
  5726  0A7D  01F4               	clrf	??_display_clock+1
  5727  0A7E  0873               	movf	??_display_clock,w
  5728  0A7F  00F5               	movwf	display_clock@i
  5729  0A80  0874               	movf	??_display_clock+1,w
  5730  0A81  00F6               	movwf	display_clock@i+1
  5731                           
  5732                           ;clock_src.c: 53:      write_char(i + '0');
  5733  0A82  0875               	movf	display_clock@i,w
  5734  0A83  3E30               	addlw	48
  5735  0A84  160A  118A  26E5  120A  158A  	fcall	_write_char
  5736                           
  5737                           ;clock_src.c: 54:      write_char(':');
  5738  0A89  303A               	movlw	58
  5739  0A8A  160A  118A  26E5  120A  158A  	fcall	_write_char
  5740                           
  5741                           ;clock_src.c: 58:      i=table1[1]&0xf0;
  5742  0A8F  0821               	movf	_table1+1,w
  5743  0A90  39F0               	andlw	240
  5744  0A91  00F3               	movwf	??_display_clock
  5745  0A92  01F4               	clrf	??_display_clock+1
  5746  0A93  0873               	movf	??_display_clock,w
  5747  0A94  00F5               	movwf	display_clock@i
  5748  0A95  0874               	movf	??_display_clock+1,w
  5749  0A96  00F6               	movwf	display_clock@i+1
  5750                           
  5751                           ;clock_src.c: 59:      i=i>>4;
  5752  0A97  0E75               	swapf	display_clock@i,w
  5753  0A98  390F               	andlw	15
  5754  0A99  00F5               	movwf	display_clock@i
  5755  0A9A  0E76               	swapf	display_clock@i+1,w
  5756  0A9B  39F0               	andlw	240
  5757  0A9C  04F5               	iorwf	display_clock@i,f
  5758  0A9D  0E76               	swapf	display_clock@i+1,w
  5759  0A9E  390F               	andlw	15
  5760  0A9F  00F6               	movwf	display_clock@i+1
  5761  0AA0  30F0               	movlw	240
  5762  0AA1  1DF6               	btfss	display_clock@i+1,3
  5763  0AA2  3000               	movlw	0
  5764  0AA3  04F6               	iorwf	display_clock@i+1,f
  5765                           
  5766                           ;clock_src.c: 60:      write_char(i + '0');
  5767  0AA4  0875               	movf	display_clock@i,w
  5768  0AA5  3E30               	addlw	48
  5769  0AA6  160A  118A  26E5  120A  158A  	fcall	_write_char
  5770                           
  5771                           ;clock_src.c: 63:      i=table1[1]&0x0f;
  5772  0AAB  0821               	movf	_table1+1,w
  5773  0AAC  390F               	andlw	15
  5774  0AAD  00F3               	movwf	??_display_clock
  5775  0AAE  01F4               	clrf	??_display_clock+1
  5776  0AAF  0873               	movf	??_display_clock,w
  5777  0AB0  00F5               	movwf	display_clock@i
  5778  0AB1  0874               	movf	??_display_clock+1,w
  5779  0AB2  00F6               	movwf	display_clock@i+1
  5780                           
  5781                           ;clock_src.c: 64:      write_char(i + '0');
  5782  0AB3  0875               	movf	display_clock@i,w
  5783  0AB4  3E30               	addlw	48
  5784  0AB5  160A  118A  26E5  120A  158A  	fcall	_write_char
  5785                           
  5786                           ;clock_src.c: 65:      write_char(':');
  5787  0ABA  303A               	movlw	58
  5788  0ABB  160A  118A  26E5  120A  158A  	fcall	_write_char
  5789                           
  5790                           ;clock_src.c: 68:      i=table1[0]&0xf0;
  5791  0AC0  0820               	movf	_table1,w
  5792  0AC1  39F0               	andlw	240
  5793  0AC2  00F3               	movwf	??_display_clock
  5794  0AC3  01F4               	clrf	??_display_clock+1
  5795  0AC4  0873               	movf	??_display_clock,w
  5796  0AC5  00F5               	movwf	display_clock@i
  5797  0AC6  0874               	movf	??_display_clock+1,w
  5798  0AC7  00F6               	movwf	display_clock@i+1
  5799                           
  5800                           ;clock_src.c: 69:      i=i>>4;
  5801  0AC8  0E75               	swapf	display_clock@i,w
  5802  0AC9  390F               	andlw	15
  5803  0ACA  00F5               	movwf	display_clock@i
  5804  0ACB  0E76               	swapf	display_clock@i+1,w
  5805  0ACC  39F0               	andlw	240
  5806  0ACD  04F5               	iorwf	display_clock@i,f
  5807  0ACE  0E76               	swapf	display_clock@i+1,w
  5808  0ACF  390F               	andlw	15
  5809  0AD0  00F6               	movwf	display_clock@i+1
  5810  0AD1  30F0               	movlw	240
  5811  0AD2  1DF6               	btfss	display_clock@i+1,3
  5812  0AD3  3000               	movlw	0
  5813  0AD4  04F6               	iorwf	display_clock@i+1,f
  5814                           
  5815                           ;clock_src.c: 70:      write_char(i + '0');
  5816  0AD5  0875               	movf	display_clock@i,w
  5817  0AD6  3E30               	addlw	48
  5818  0AD7  160A  118A  26E5  120A  158A  	fcall	_write_char
  5819                           
  5820                           ;clock_src.c: 73:      i=table1[0]&0x0f;
  5821  0ADC  0820               	movf	_table1,w
  5822  0ADD  390F               	andlw	15
  5823  0ADE  00F3               	movwf	??_display_clock
  5824  0ADF  01F4               	clrf	??_display_clock+1
  5825  0AE0  0873               	movf	??_display_clock,w
  5826  0AE1  00F5               	movwf	display_clock@i
  5827  0AE2  0874               	movf	??_display_clock+1,w
  5828  0AE3  00F6               	movwf	display_clock@i+1
  5829                           
  5830                           ;clock_src.c: 74:      write_char(i + '0');
  5831  0AE4  0875               	movf	display_clock@i,w
  5832  0AE5  3E30               	addlw	48
  5833  0AE6  160A  118A  26E5   	fcall	_write_char
  5834  0AE9  0008               	return
  5835  0AEA                     __end_of_display_clock:	
  5836                           
  5837                           	psect	text29
  5838  03D4                     __ptext29:	
  5839 ;; *************** function _date_settings *****************
  5840 ;; Defined at:
  5841 ;;		line 352 in file "Button_src.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 300/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5855 ;;      Params:         0       0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0
  5857 ;;      Temps:          0       3       0       0       0
  5858 ;;      Totals:         0       3       0       0       0
  5859 ;;Total ram usage:        3 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    3
  5862 ;; This function calls:
  5863 ;;		_button_delay
  5864 ;;		_incrementor
  5865 ;;		_modulus_func
  5866 ;;		_set_time
  5867 ;;		_time_date_delimiter
  5868 ;;		_time_date_hex_terminator
  5869 ;;		_write_char
  5870 ;;		_write_cmd
  5871 ;; This function is called by:
  5872 ;;		_main
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function _date_settings
  5878  03D4                     _date_settings:	
  5879                           
  5880                           ;Button_src.c: 353:  RC0 = 0;
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5884  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  5885  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  5886  03D6  1007               	bcf	7,0	;volatile
  5887                           
  5888                           ;Button_src.c: 354:  RC1 = 1;
  5889  03D7  1487               	bsf	7,1	;volatile
  5890                           
  5891                           ;Button_src.c: 355:  RC2 = 1;
  5892  03D8  1507               	bsf	7,2	;volatile
  5893                           
  5894                           ;Button_src.c: 356:  RC3 = 1;
  5895  03D9  1587               	bsf	7,3	;volatile
  5896                           
  5897                           ;Button_src.c: 357:   if (RC4 == 0){
  5898  03DA  1A07               	btfsc	7,4	;volatile
  5899  03DB  0008               	return
  5900                           
  5901                           ;Button_src.c: 358:       write_cmd(0x1);
  5902  03DC  3001               	movlw	1
  5903  03DD  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  5904  03E2                     l590:	
  5905                           ;Button_src.c: 359:       for(;;){
  5906                           
  5907                           
  5908                           ;Button_src.c: 360:             write_cmd(0x80);
  5909  03E2  3080               	movlw	128
  5910  03E3  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  5911                           
  5912                           ;Button_src.c: 361:             write_char('D');
  5913  03E8  3044               	movlw	68
  5914  03E9  160A  118A  26E5  120A  118A  	fcall	_write_char
  5915                           
  5916                           ;Button_src.c: 362:             write_char('a');
  5917  03EE  3061               	movlw	97
  5918  03EF  160A  118A  26E5  120A  118A  	fcall	_write_char
  5919                           
  5920                           ;Button_src.c: 363:             write_char('t');
  5921  03F4  3074               	movlw	116
  5922  03F5  160A  118A  26E5  120A  118A  	fcall	_write_char
  5923                           
  5924                           ;Button_src.c: 364:             write_char('e');
  5925  03FA  3065               	movlw	101
  5926  03FB  160A  118A  26E5  120A  118A  	fcall	_write_char
  5927                           
  5928                           ;Button_src.c: 365:             write_char('_');
  5929  0400  305F               	movlw	95
  5930  0401  160A  118A  26E5  120A  118A  	fcall	_write_char
  5931                           
  5932                           ;Button_src.c: 366:             write_char('S');
  5933  0406  3053               	movlw	83
  5934  0407  160A  118A  26E5  120A  118A  	fcall	_write_char
  5935                           
  5936                           ;Button_src.c: 367:             write_char('e');
  5937  040C  3065               	movlw	101
  5938  040D  160A  118A  26E5  120A  118A  	fcall	_write_char
  5939                           
  5940                           ;Button_src.c: 368:             write_char('t');
  5941  0412  3074               	movlw	116
  5942  0413  160A  118A  26E5  120A  118A  	fcall	_write_char
  5943                           
  5944                           ;Button_src.c: 369:             write_char('t');
  5945  0418  3074               	movlw	116
  5946  0419  160A  118A  26E5  120A  118A  	fcall	_write_char
  5947                           
  5948                           ;Button_src.c: 370:             write_char('i');
  5949  041E  3069               	movlw	105
  5950  041F  160A  118A  26E5  120A  118A  	fcall	_write_char
  5951                           
  5952                           ;Button_src.c: 371:             write_char('n');
  5953  0424  306E               	movlw	110
  5954  0425  160A  118A  26E5  120A  118A  	fcall	_write_char
  5955                           
  5956                           ;Button_src.c: 372:             write_char('g');
  5957  042A  3067               	movlw	103
  5958  042B  160A  118A  26E5  120A  118A  	fcall	_write_char
  5959                           
  5960                           ;Button_src.c: 373:             write_char('s');
  5961  0430  3073               	movlw	115
  5962  0431  160A  118A  26E5  120A  118A  	fcall	_write_char
  5963                           
  5964                           ;Button_src.c: 374:             RC0 = 1;
  5965  0436  1407               	bsf	7,0	;volatile
  5966                           
  5967                           ;Button_src.c: 375:             RC1 = 0;
  5968  0437  1087               	bcf	7,1	;volatile
  5969                           
  5970                           ;Button_src.c: 376:             RC2 = 1;
  5971  0438  1507               	bsf	7,2	;volatile
  5972                           
  5973                           ;Button_src.c: 377:             RC3 = 1;
  5974  0439  1587               	bsf	7,3	;volatile
  5975                           
  5976                           ;Button_src.c: 378:             if(RC7 == 0 && b =='x'){
  5977  043A  1B87               	btfsc	7,7	;volatile
  5978  043B  2CAC               	goto	l3501
  5979  043C  3078               	movlw	120
  5980  043D  0650               	xorwf	_b,w
  5981  043E  1D03               	btfss	3,2
  5982  043F  2CAC               	goto	l3501
  5983                           
  5984                           ;Button_src.c: 379:                 if(stats == 1)
  5985  0440  0331               	decf	_stats,w
  5986  0441  0432               	iorwf	_stats+1,w
  5987  0442  1D03               	btfss	3,2
  5988  0443  2C48               	goto	l592
  5989                           
  5990                           ;Button_src.c: 380:                     a++;
  5991  0444  3001               	movlw	1
  5992  0445  00E1               	movwf	??_date_settings
  5993  0446  0861               	movf	??_date_settings,w
  5994  0447  07D1               	addwf	_a,f
  5995  0448                     l592:	
  5996                           
  5997                           ;Button_src.c: 381:                 if(stats == 0){
  5998  0448  0831               	movf	_stats,w
  5999  0449  0432               	iorwf	_stats+1,w
  6000  044A  1D03               	btfss	3,2
  6001  044B  2C50               	goto	l593
  6002                           
  6003                           ;Button_src.c: 382:                     stats = 1;
  6004  044C  3001               	movlw	1
  6005  044D  00B1               	movwf	_stats
  6006  044E  3000               	movlw	0
  6007  044F  00B2               	movwf	_stats+1
  6008  0450                     l593:	
  6009                           ;Button_src.c: 383:                 }
  6010                           
  6011                           
  6012                           ;Button_src.c: 385:                     x++ ;
  6013  0450  3001               	movlw	1
  6014  0451  07BD               	addwf	_x,f
  6015  0452  1803               	skipnc
  6016  0453  0ABE               	incf	_x+1,f
  6017  0454  3000               	movlw	0
  6018  0455  07BE               	addwf	_x+1,f
  6019                           
  6020                           ;Button_src.c: 386:                     x = modulus_func(x,10);
  6021  0456  083E               	movf	_x+1,w
  6022  0457  00F8               	movwf	modulus_func@x+1
  6023  0458  083D               	movf	_x,w
  6024  0459  00F7               	movwf	modulus_func@x
  6025  045A  300A               	movlw	10
  6026  045B  00F9               	movwf	modulus_func@y
  6027  045C  3000               	movlw	0
  6028  045D  00FA               	movwf	modulus_func@y+1
  6029  045E  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6030  0463  0878               	movf	?_modulus_func+1,w
  6031  0464  00BE               	movwf	_x+1
  6032  0465  0877               	movf	?_modulus_func,w
  6033  0466  00BD               	movwf	_x
  6034                           
  6035                           ;Button_src.c: 387:                      if (p == 1){
  6036  0467  032F               	decf	_p,w
  6037  0468  0430               	iorwf	_p+1,w
  6038  0469  1D03               	btfss	3,2
  6039  046A  2C84               	goto	l3487
  6040                           
  6041                           ;Button_src.c: 388:                         y = incrementor(y,x,'0');
  6042  046B  083C               	movf	_y+1,w
  6043  046C  00DD               	movwf	incrementor@upper_val+1
  6044  046D  083B               	movf	_y,w
  6045  046E  00DC               	movwf	incrementor@upper_val
  6046  046F  083E               	movf	_x+1,w
  6047  0470  00DF               	movwf	incrementor@lower_val+1
  6048  0471  083D               	movf	_x,w
  6049  0472  00DE               	movwf	incrementor@lower_val
  6050  0473  3030               	movlw	48
  6051  0474  00E1               	movwf	??_date_settings
  6052  0475  0861               	movf	??_date_settings,w
  6053  0476  00E0               	movwf	incrementor@z
  6054  0477  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6055  047C  00E2               	movwf	??_date_settings+1
  6056  047D  01E3               	clrf	??_date_settings+2
  6057  047E  0862               	movf	??_date_settings+1,w
  6058  047F  00BB               	movwf	_y
  6059  0480  0863               	movf	??_date_settings+2,w
  6060  0481  00BC               	movwf	_y+1
  6061                           
  6062                           ;Button_src.c: 389:                         p = 0;
  6063  0482  01AF               	clrf	_p
  6064  0483  01B0               	clrf	_p+1
  6065  0484                     l3487:	
  6066                           
  6067                           ;Button_src.c: 391:                     if (x == 9){
  6068  0484  3009               	movlw	9
  6069  0485  063D               	xorwf	_x,w
  6070  0486  043E               	iorwf	_x+1,w
  6071  0487  1D03               	btfss	3,2
  6072  0488  2C8D               	goto	l3491
  6073                           
  6074                           ;Button_src.c: 392:                         p = 1;
  6075  0489  3001               	movlw	1
  6076  048A  00AF               	movwf	_p
  6077  048B  3000               	movlw	0
  6078  048C  00B0               	movwf	_p+1
  6079  048D                     l3491:	
  6080                           
  6081                           ;Button_src.c: 394:                     a = time_date_hex_terminator(a,'C');
  6082  048D  3043               	movlw	67
  6083  048E  00E1               	movwf	??_date_settings
  6084  048F  0861               	movf	??_date_settings,w
  6085  0490  00F0               	movwf	time_date_hex_terminator@limiter
  6086  0491  0851               	movf	_a,w
  6087  0492  160A  118A  2654  120A  118A  	fcall	_time_date_hex_terminator
  6088  0497  00E2               	movwf	??_date_settings+1
  6089  0498  0862               	movf	??_date_settings+1,w
  6090  0499  00D1               	movwf	_a
  6091                           
  6092                           ;Button_src.c: 396:                     if(y == 1 && x == 3){
  6093  049A  033B               	decf	_y,w
  6094  049B  043C               	iorwf	_y+1,w
  6095  049C  1D03               	btfss	3,2
  6096  049D  2CA7               	goto	l3499
  6097  049E  3003               	movlw	3
  6098  049F  063D               	xorwf	_x,w
  6099  04A0  043E               	iorwf	_x+1,w
  6100  04A1  1D03               	btfss	3,2
  6101  04A2  2CA7               	goto	l3499
  6102                           
  6103                           ;Button_src.c: 397:                         x = 0;
  6104  04A3  01BD               	clrf	_x
  6105  04A4  01BE               	clrf	_x+1
  6106                           
  6107                           ;Button_src.c: 398:                         y = 0;
  6108  04A5  01BB               	clrf	_y
  6109  04A6  01BC               	clrf	_y+1
  6110  04A7                     l3499:	
  6111                           
  6112                           ;Button_src.c: 400:                     button_delay();
  6113  04A7  160A  118A  2693  120A  118A  	fcall	_button_delay
  6114  04AC                     l3501:	
  6115                           
  6116                           ;Button_src.c: 402:             if(RC7==0 && b == 'y'){
  6117  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  6118  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  6119  04AE  1B87               	btfsc	7,7	;volatile
  6120  04AF  2D32               	goto	l3535
  6121  04B0  3079               	movlw	121
  6122  04B1  0650               	xorwf	_b,w
  6123  04B2  1D03               	btfss	3,2
  6124  04B3  2D32               	goto	l3535
  6125                           
  6126                           ;Button_src.c: 403:                  if(stats == 1)
  6127  04B4  0331               	decf	_stats,w
  6128  04B5  0432               	iorwf	_stats+1,w
  6129  04B6  1D03               	btfss	3,2
  6130  04B7  2CBC               	goto	l598
  6131                           
  6132                           ;Button_src.c: 404:                     day_hex++;
  6133  04B8  3001               	movlw	1
  6134  04B9  00E1               	movwf	??_date_settings
  6135  04BA  0861               	movf	??_date_settings,w
  6136  04BB  07CE               	addwf	_day_hex,f
  6137  04BC                     l598:	
  6138                           
  6139                           ;Button_src.c: 405:                 if(stats == 0){
  6140  04BC  0831               	movf	_stats,w
  6141  04BD  0432               	iorwf	_stats+1,w
  6142  04BE  1D03               	btfss	3,2
  6143  04BF  2CC4               	goto	l599
  6144                           
  6145                           ;Button_src.c: 406:                     stats = 1;
  6146  04C0  3001               	movlw	1
  6147  04C1  00B1               	movwf	_stats
  6148  04C2  3000               	movlw	0
  6149  04C3  00B2               	movwf	_stats+1
  6150  04C4                     l599:	
  6151                           ;Button_src.c: 407:                 }
  6152                           
  6153                           
  6154                           ;Button_src.c: 409:                     day_low++;
  6155  04C4  3001               	movlw	1
  6156  04C5  07B7               	addwf	_day_low,f
  6157  04C6  1803               	skipnc
  6158  04C7  0AB8               	incf	_day_low+1,f
  6159  04C8  3000               	movlw	0
  6160  04C9  07B8               	addwf	_day_low+1,f
  6161                           
  6162                           ;Button_src.c: 410:                     day_low = modulus_func(day_low,10);
  6163  04CA  0838               	movf	_day_low+1,w
  6164  04CB  00F8               	movwf	modulus_func@x+1
  6165  04CC  0837               	movf	_day_low,w
  6166  04CD  00F7               	movwf	modulus_func@x
  6167  04CE  300A               	movlw	10
  6168  04CF  00F9               	movwf	modulus_func@y
  6169  04D0  3000               	movlw	0
  6170  04D1  00FA               	movwf	modulus_func@y+1
  6171  04D2  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6172  04D7  0878               	movf	?_modulus_func+1,w
  6173  04D8  00B8               	movwf	_day_low+1
  6174  04D9  0877               	movf	?_modulus_func,w
  6175  04DA  00B7               	movwf	_day_low
  6176                           
  6177                           ;Button_src.c: 411:                     day_counter = modulus_func(day_low,8);
  6178  04DB  0838               	movf	_day_low+1,w
  6179  04DC  00F8               	movwf	modulus_func@x+1
  6180  04DD  0837               	movf	_day_low,w
  6181  04DE  00F7               	movwf	modulus_func@x
  6182  04DF  3008               	movlw	8
  6183  04E0  00F9               	movwf	modulus_func@y
  6184  04E1  3000               	movlw	0
  6185  04E2  00FA               	movwf	modulus_func@y+1
  6186  04E3  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6187  04E8  0878               	movf	?_modulus_func+1,w
  6188  04E9  00A8               	movwf	_day_counter+1
  6189  04EA  0877               	movf	?_modulus_func,w
  6190  04EB  00A7               	movwf	_day_counter
  6191                           
  6192                           ;Button_src.c: 412:                     if (p == 1){
  6193  04EC  032F               	decf	_p,w
  6194  04ED  0430               	iorwf	_p+1,w
  6195  04EE  1D03               	btfss	3,2
  6196  04EF  2D09               	goto	l3521
  6197                           
  6198                           ;Button_src.c: 413:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6199  04F0  0836               	movf	_day_high+1,w
  6200  04F1  00DD               	movwf	incrementor@upper_val+1
  6201  04F2  0835               	movf	_day_high,w
  6202  04F3  00DC               	movwf	incrementor@upper_val
  6203  04F4  0838               	movf	_day_low+1,w
  6204  04F5  00DF               	movwf	incrementor@lower_val+1
  6205  04F6  0837               	movf	_day_low,w
  6206  04F7  00DE               	movwf	incrementor@lower_val
  6207  04F8  3030               	movlw	48
  6208  04F9  00E1               	movwf	??_date_settings
  6209  04FA  0861               	movf	??_date_settings,w
  6210  04FB  00E0               	movwf	incrementor@z
  6211  04FC  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6212  0501  00E2               	movwf	??_date_settings+1
  6213  0502  01E3               	clrf	??_date_settings+2
  6214  0503  0862               	movf	??_date_settings+1,w
  6215  0504  00B5               	movwf	_day_high
  6216  0505  0863               	movf	??_date_settings+2,w
  6217  0506  00B6               	movwf	_day_high+1
  6218                           
  6219                           ;Button_src.c: 414:                         p = 0;
  6220  0507  01AF               	clrf	_p
  6221  0508  01B0               	clrf	_p+1
  6222  0509                     l3521:	
  6223                           
  6224                           ;Button_src.c: 416:                     if (day_low == 9){
  6225  0509  3009               	movlw	9
  6226  050A  0637               	xorwf	_day_low,w
  6227  050B  0438               	iorwf	_day_low+1,w
  6228  050C  1D03               	btfss	3,2
  6229  050D  2D12               	goto	l3525
  6230                           
  6231                           ;Button_src.c: 417:                         p = 1;
  6232  050E  3001               	movlw	1
  6233  050F  00AF               	movwf	_p
  6234  0510  3000               	movlw	0
  6235  0511  00B0               	movwf	_p+1
  6236  0512                     l3525:	
  6237                           
  6238                           ;Button_src.c: 419:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6239  0512  3063               	movlw	99
  6240  0513  00E1               	movwf	??_date_settings
  6241  0514  0861               	movf	??_date_settings,w
  6242  0515  00F0               	movwf	time_date_hex_terminator@limiter
  6243  0516  084E               	movf	_day_hex,w
  6244  0517  160A  118A  2654  120A  118A  	fcall	_time_date_hex_terminator
  6245  051C  00E2               	movwf	??_date_settings+1
  6246  051D  0862               	movf	??_date_settings+1,w
  6247  051E  00CE               	movwf	_day_hex
  6248                           
  6249                           ;Button_src.c: 420:                     if(day_high == 3 && day_low==2 ){
  6250  051F  3003               	movlw	3
  6251  0520  0635               	xorwf	_day_high,w
  6252  0521  0436               	iorwf	_day_high+1,w
  6253  0522  1D03               	btfss	3,2
  6254  0523  2D2D               	goto	l3533
  6255  0524  3002               	movlw	2
  6256  0525  0637               	xorwf	_day_low,w
  6257  0526  0438               	iorwf	_day_low+1,w
  6258  0527  1D03               	btfss	3,2
  6259  0528  2D2D               	goto	l3533
  6260                           
  6261                           ;Button_src.c: 421:                         day_high = 0;
  6262  0529  01B5               	clrf	_day_high
  6263  052A  01B6               	clrf	_day_high+1
  6264                           
  6265                           ;Button_src.c: 422:                         day_low = 0;
  6266  052B  01B7               	clrf	_day_low
  6267  052C  01B8               	clrf	_day_low+1
  6268  052D                     l3533:	
  6269                           
  6270                           ;Button_src.c: 424:                     button_delay();
  6271  052D  160A  118A  2693  120A  118A  	fcall	_button_delay
  6272  0532                     l3535:	
  6273                           
  6274                           ;Button_src.c: 426:             if(RC7==0 && b == 'z'){
  6275  0532  1283               	bcf	3,5	;RP0=0, select bank0
  6276  0533  1303               	bcf	3,6	;RP1=0, select bank0
  6277  0534  1B87               	btfsc	7,7	;volatile
  6278  0535  2D99               	goto	l3567
  6279  0536  307A               	movlw	122
  6280  0537  0650               	xorwf	_b,w
  6281  0538  1D03               	btfss	3,2
  6282  0539  2D99               	goto	l3567
  6283                           
  6284                           ;Button_src.c: 427:                 if(stats == 1)
  6285  053A  0331               	decf	_stats,w
  6286  053B  0432               	iorwf	_stats+1,w
  6287  053C  1D03               	btfss	3,2
  6288  053D  2D42               	goto	l604
  6289                           
  6290                           ;Button_src.c: 428:                    c++;
  6291  053E  3001               	movlw	1
  6292  053F  00E1               	movwf	??_date_settings
  6293  0540  0861               	movf	??_date_settings,w
  6294  0541  07CF               	addwf	_c,f
  6295  0542                     l604:	
  6296                           
  6297                           ;Button_src.c: 429:                 if(stats == 0){
  6298  0542  0831               	movf	_stats,w
  6299  0543  0432               	iorwf	_stats+1,w
  6300  0544  1D03               	btfss	3,2
  6301  0545  2D4A               	goto	l605
  6302                           
  6303                           ;Button_src.c: 430:                     stats = 1;
  6304  0546  3001               	movlw	1
  6305  0547  00B1               	movwf	_stats
  6306  0548  3000               	movlw	0
  6307  0549  00B2               	movwf	_stats+1
  6308  054A                     l605:	
  6309                           ;Button_src.c: 431:                 }
  6310                           
  6311                           
  6312                           ;Button_src.c: 433:                     t++;
  6313  054A  3001               	movlw	1
  6314  054B  07C1               	addwf	_t,f
  6315  054C  1803               	skipnc
  6316  054D  0AC2               	incf	_t+1,f
  6317  054E  3000               	movlw	0
  6318  054F  07C2               	addwf	_t+1,f
  6319                           
  6320                           ;Button_src.c: 434:                     t = modulus_func(t,10);
  6321  0550  0842               	movf	_t+1,w
  6322  0551  00F8               	movwf	modulus_func@x+1
  6323  0552  0841               	movf	_t,w
  6324  0553  00F7               	movwf	modulus_func@x
  6325  0554  300A               	movlw	10
  6326  0555  00F9               	movwf	modulus_func@y
  6327  0556  3000               	movlw	0
  6328  0557  00FA               	movwf	modulus_func@y+1
  6329  0558  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6330  055D  0878               	movf	?_modulus_func+1,w
  6331  055E  00C2               	movwf	_t+1
  6332  055F  0877               	movf	?_modulus_func,w
  6333  0560  00C1               	movwf	_t
  6334                           
  6335                           ;Button_src.c: 435:                      if (p == 1){
  6336  0561  032F               	decf	_p,w
  6337  0562  0430               	iorwf	_p+1,w
  6338  0563  1D03               	btfss	3,2
  6339  0564  2D7E               	goto	l3553
  6340                           
  6341                           ;Button_src.c: 436:                         w = incrementor(w,t,'0');
  6342  0565  0840               	movf	_w+1,w
  6343  0566  00DD               	movwf	incrementor@upper_val+1
  6344  0567  083F               	movf	_w,w
  6345  0568  00DC               	movwf	incrementor@upper_val
  6346  0569  0842               	movf	_t+1,w
  6347  056A  00DF               	movwf	incrementor@lower_val+1
  6348  056B  0841               	movf	_t,w
  6349  056C  00DE               	movwf	incrementor@lower_val
  6350  056D  3030               	movlw	48
  6351  056E  00E1               	movwf	??_date_settings
  6352  056F  0861               	movf	??_date_settings,w
  6353  0570  00E0               	movwf	incrementor@z
  6354  0571  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6355  0576  00E2               	movwf	??_date_settings+1
  6356  0577  01E3               	clrf	??_date_settings+2
  6357  0578  0862               	movf	??_date_settings+1,w
  6358  0579  00BF               	movwf	_w
  6359  057A  0863               	movf	??_date_settings+2,w
  6360  057B  00C0               	movwf	_w+1
  6361                           
  6362                           ;Button_src.c: 437:                         p = 0;
  6363  057C  01AF               	clrf	_p
  6364  057D  01B0               	clrf	_p+1
  6365  057E                     l3553:	
  6366                           
  6367                           ;Button_src.c: 439:                     if (t == 9){
  6368  057E  3009               	movlw	9
  6369  057F  0641               	xorwf	_t,w
  6370  0580  0442               	iorwf	_t+1,w
  6371  0581  1D03               	btfss	3,2
  6372  0582  2D87               	goto	l3557
  6373                           
  6374                           ;Button_src.c: 440:                         p = 1;
  6375  0583  3001               	movlw	1
  6376  0584  00AF               	movwf	_p
  6377  0585  3000               	movlw	0
  6378  0586  00B0               	movwf	_p+1
  6379  0587                     l3557:	
  6380                           
  6381                           ;Button_src.c: 443:                      if(c == (0x59 + 1)){
  6382  0587  305A               	movlw	90
  6383  0588  064F               	xorwf	_c,w
  6384  0589  1903               	btfsc	3,2
  6385                           
  6386                           ;Button_src.c: 444:                         c = 0x00;
  6387  058A  01CF               	clrf	_c
  6388                           
  6389                           ;Button_src.c: 446:                     if(w == 6){
  6390  058B  3006               	movlw	6
  6391  058C  063F               	xorwf	_w,w
  6392  058D  0440               	iorwf	_w+1,w
  6393  058E  1D03               	btfss	3,2
  6394  058F  2D94               	goto	l3565
  6395                           
  6396                           ;Button_src.c: 447:                         w = 0;
  6397  0590  01BF               	clrf	_w
  6398  0591  01C0               	clrf	_w+1
  6399                           
  6400                           ;Button_src.c: 448:                         t = 0;
  6401  0592  01C1               	clrf	_t
  6402  0593  01C2               	clrf	_t+1
  6403  0594                     l3565:	
  6404                           
  6405                           ;Button_src.c: 450:                     button_delay();
  6406  0594  160A  118A  2693  120A  118A  	fcall	_button_delay
  6407  0599                     l3567:	
  6408                           
  6409                           ;Button_src.c: 457:                     a = time_date_delimiter(a,0x11,'9');
  6410  0599  3011               	movlw	17
  6411  059A  1283               	bcf	3,5	;RP0=0, select bank0
  6412  059B  1303               	bcf	3,6	;RP1=0, select bank0
  6413  059C  00E1               	movwf	??_date_settings
  6414  059D  0861               	movf	??_date_settings,w
  6415  059E  00F0               	movwf	time_date_delimiter@hex
  6416  059F  3039               	movlw	57
  6417  05A0  00E2               	movwf	??_date_settings+1
  6418  05A1  0862               	movf	??_date_settings+1,w
  6419  05A2  00F1               	movwf	time_date_delimiter@limiter
  6420  05A3  0851               	movf	_a,w
  6421  05A4  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6422  05A9  00E3               	movwf	??_date_settings+2
  6423  05AA  0863               	movf	??_date_settings+2,w
  6424  05AB  00D1               	movwf	_a
  6425                           
  6426                           ;Button_src.c: 459:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6427  05AC  3011               	movlw	17
  6428  05AD  00E1               	movwf	??_date_settings
  6429  05AE  0861               	movf	??_date_settings,w
  6430  05AF  00F0               	movwf	time_date_delimiter@hex
  6431  05B0  3039               	movlw	57
  6432  05B1  00E2               	movwf	??_date_settings+1
  6433  05B2  0862               	movf	??_date_settings+1,w
  6434  05B3  00F1               	movwf	time_date_delimiter@limiter
  6435  05B4  084E               	movf	_day_hex,w
  6436  05B5  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6437  05BA  00E3               	movwf	??_date_settings+2
  6438  05BB  0863               	movf	??_date_settings+2,w
  6439  05BC  00CE               	movwf	_day_hex
  6440                           
  6441                           ;Button_src.c: 460:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6442  05BD  3021               	movlw	33
  6443  05BE  00E1               	movwf	??_date_settings
  6444  05BF  0861               	movf	??_date_settings,w
  6445  05C0  00F0               	movwf	time_date_delimiter@hex
  6446  05C1  304A               	movlw	74
  6447  05C2  00E2               	movwf	??_date_settings+1
  6448  05C3  0862               	movf	??_date_settings+1,w
  6449  05C4  00F1               	movwf	time_date_delimiter@limiter
  6450  05C5  084E               	movf	_day_hex,w
  6451  05C6  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6452  05CB  00E3               	movwf	??_date_settings+2
  6453  05CC  0863               	movf	??_date_settings+2,w
  6454  05CD  00CE               	movwf	_day_hex
  6455                           
  6456                           ;Button_src.c: 461:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6457  05CE  3011               	movlw	17
  6458  05CF  00E1               	movwf	??_date_settings
  6459  05D0  0861               	movf	??_date_settings,w
  6460  05D1  00F0               	movwf	time_date_delimiter@hex
  6461  05D2  3039               	movlw	57
  6462  05D3  00E2               	movwf	??_date_settings+1
  6463  05D4  0862               	movf	??_date_settings+1,w
  6464  05D5  00F1               	movwf	time_date_delimiter@limiter
  6465  05D6  084E               	movf	_day_hex,w
  6466  05D7  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6467  05DC  00E3               	movwf	??_date_settings+2
  6468  05DD  0863               	movf	??_date_settings+2,w
  6469  05DE  00CE               	movwf	_day_hex
  6470                           
  6471                           ;Button_src.c: 462:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6472  05DF  3021               	movlw	33
  6473  05E0  00E1               	movwf	??_date_settings
  6474  05E1  0861               	movf	??_date_settings,w
  6475  05E2  00F0               	movwf	time_date_delimiter@hex
  6476  05E3  304A               	movlw	74
  6477  05E4  00E2               	movwf	??_date_settings+1
  6478  05E5  0862               	movf	??_date_settings+1,w
  6479  05E6  00F1               	movwf	time_date_delimiter@limiter
  6480  05E7  084E               	movf	_day_hex,w
  6481  05E8  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6482  05ED  00E3               	movwf	??_date_settings+2
  6483  05EE  0863               	movf	??_date_settings+2,w
  6484  05EF  00CE               	movwf	_day_hex
  6485                           
  6486                           ;Button_src.c: 463:                     day_hex = time_date_delimiter(day_hex,0x31,'Y');
  6487  05F0  3031               	movlw	49
  6488  05F1  00E1               	movwf	??_date_settings
  6489  05F2  0861               	movf	??_date_settings,w
  6490  05F3  00F0               	movwf	time_date_delimiter@hex
  6491  05F4  3059               	movlw	89
  6492  05F5  00E2               	movwf	??_date_settings+1
  6493  05F6  0862               	movf	??_date_settings+1,w
  6494  05F7  00F1               	movwf	time_date_delimiter@limiter
  6495  05F8  084E               	movf	_day_hex,w
  6496  05F9  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6497  05FE  00E3               	movwf	??_date_settings+2
  6498  05FF  0863               	movf	??_date_settings+2,w
  6499  0600  00CE               	movwf	_day_hex
  6500                           
  6501                           ;Button_src.c: 465:                     c = time_date_delimiter(c,0x11,'9');
  6502  0601  3011               	movlw	17
  6503  0602  00E1               	movwf	??_date_settings
  6504  0603  0861               	movf	??_date_settings,w
  6505  0604  00F0               	movwf	time_date_delimiter@hex
  6506  0605  3039               	movlw	57
  6507  0606  00E2               	movwf	??_date_settings+1
  6508  0607  0862               	movf	??_date_settings+1,w
  6509  0608  00F1               	movwf	time_date_delimiter@limiter
  6510  0609  084F               	movf	_c,w
  6511  060A  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6512  060F  00E3               	movwf	??_date_settings+2
  6513  0610  0863               	movf	??_date_settings+2,w
  6514  0611  00CF               	movwf	_c
  6515                           
  6516                           ;Button_src.c: 466:                     c = time_date_delimiter(c,0x21,'J');
  6517  0612  3021               	movlw	33
  6518  0613  00E1               	movwf	??_date_settings
  6519  0614  0861               	movf	??_date_settings,w
  6520  0615  00F0               	movwf	time_date_delimiter@hex
  6521  0616  304A               	movlw	74
  6522  0617  00E2               	movwf	??_date_settings+1
  6523  0618  0862               	movf	??_date_settings+1,w
  6524  0619  00F1               	movwf	time_date_delimiter@limiter
  6525  061A  084F               	movf	_c,w
  6526  061B  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6527  0620  00E3               	movwf	??_date_settings+2
  6528  0621  0863               	movf	??_date_settings+2,w
  6529  0622  00CF               	movwf	_c
  6530                           
  6531                           ;Button_src.c: 467:                     c = time_date_delimiter(c,0x11,'9');
  6532  0623  3011               	movlw	17
  6533  0624  00E1               	movwf	??_date_settings
  6534  0625  0861               	movf	??_date_settings,w
  6535  0626  00F0               	movwf	time_date_delimiter@hex
  6536  0627  3039               	movlw	57
  6537  0628  00E2               	movwf	??_date_settings+1
  6538  0629  0862               	movf	??_date_settings+1,w
  6539  062A  00F1               	movwf	time_date_delimiter@limiter
  6540  062B  084F               	movf	_c,w
  6541  062C  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6542  0631  00E3               	movwf	??_date_settings+2
  6543  0632  0863               	movf	??_date_settings+2,w
  6544  0633  00CF               	movwf	_c
  6545                           
  6546                           ;Button_src.c: 468:                     c = time_date_delimiter(c,0x21,'J');
  6547  0634  3021               	movlw	33
  6548  0635  00E1               	movwf	??_date_settings
  6549  0636  0861               	movf	??_date_settings,w
  6550  0637  00F0               	movwf	time_date_delimiter@hex
  6551  0638  304A               	movlw	74
  6552  0639  00E2               	movwf	??_date_settings+1
  6553  063A  0862               	movf	??_date_settings+1,w
  6554  063B  00F1               	movwf	time_date_delimiter@limiter
  6555  063C  084F               	movf	_c,w
  6556  063D  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6557  0642  00E3               	movwf	??_date_settings+2
  6558  0643  0863               	movf	??_date_settings+2,w
  6559  0644  00CF               	movwf	_c
  6560                           
  6561                           ;Button_src.c: 469:                     c = time_date_delimiter(c,0x31,'Y');
  6562  0645  3031               	movlw	49
  6563  0646  00E1               	movwf	??_date_settings
  6564  0647  0861               	movf	??_date_settings,w
  6565  0648  00F0               	movwf	time_date_delimiter@hex
  6566  0649  3059               	movlw	89
  6567  064A  00E2               	movwf	??_date_settings+1
  6568  064B  0862               	movf	??_date_settings+1,w
  6569  064C  00F1               	movwf	time_date_delimiter@limiter
  6570  064D  084F               	movf	_c,w
  6571  064E  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6572  0653  00E3               	movwf	??_date_settings+2
  6573  0654  0863               	movf	??_date_settings+2,w
  6574  0655  00CF               	movwf	_c
  6575                           
  6576                           ;Button_src.c: 470:                     c = time_date_delimiter(c,0x41,'j');
  6577  0656  3041               	movlw	65
  6578  0657  00E1               	movwf	??_date_settings
  6579  0658  0861               	movf	??_date_settings,w
  6580  0659  00F0               	movwf	time_date_delimiter@hex
  6581  065A  306A               	movlw	106
  6582  065B  00E2               	movwf	??_date_settings+1
  6583  065C  0862               	movf	??_date_settings+1,w
  6584  065D  00F1               	movwf	time_date_delimiter@limiter
  6585  065E  084F               	movf	_c,w
  6586  065F  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6587  0664  00E3               	movwf	??_date_settings+2
  6588  0665  0863               	movf	??_date_settings+2,w
  6589  0666  00CF               	movwf	_c
  6590                           
  6591                           ;Button_src.c: 471:                     c = time_date_delimiter(c,0x51,'z');
  6592  0667  3051               	movlw	81
  6593  0668  00E1               	movwf	??_date_settings
  6594  0669  0861               	movf	??_date_settings,w
  6595  066A  00F0               	movwf	time_date_delimiter@hex
  6596  066B  307A               	movlw	122
  6597  066C  00E2               	movwf	??_date_settings+1
  6598  066D  0862               	movf	??_date_settings+1,w
  6599  066E  00F1               	movwf	time_date_delimiter@limiter
  6600  066F  084F               	movf	_c,w
  6601  0670  120A  158A  2000  120A  118A  	fcall	_time_date_delimiter
  6602  0675  00E3               	movwf	??_date_settings+2
  6603  0676  0863               	movf	??_date_settings+2,w
  6604  0677  00CF               	movwf	_c
  6605                           
  6606                           ;Button_src.c: 473:                     if(stats==0)
  6607  0678  0831               	movf	_stats,w
  6608  0679  0432               	iorwf	_stats+1,w
  6609  067A  1D03               	btfss	3,2
  6610  067B  2E7E               	goto	l3597
  6611                           
  6612                           ;Button_src.c: 474:                         table[4] = prev_hex;
  6613  067C  084C               	movf	_prev_hex,w
  6614  067D  2E83               	goto	L2
  6615  067E                     l3597:	
  6616  067E  0331               	decf	_stats,w
  6617  067F  0432               	iorwf	_stats+1,w
  6618  0680  1D03               	btfss	3,2
  6619  0681  2E86               	goto	l611
  6620                           
  6621                           ;Button_src.c: 476:                         table[4]= a;
  6622  0682  0851               	movf	_a,w
  6623  0683                     L2:	
  6624  0683  00E1               	movwf	??_date_settings
  6625  0684  0861               	movf	??_date_settings,w
  6626  0685  00EC               	movwf	_table+4
  6627  0686                     l611:	
  6628                           
  6629                           ;Button_src.c: 477:              table[6] = c;
  6630  0686  084F               	movf	_c,w
  6631  0687  00E1               	movwf	??_date_settings
  6632  0688  0861               	movf	??_date_settings,w
  6633  0689  00EE               	movwf	_table+6
  6634                           
  6635                           ;Button_src.c: 478:              table[3] = day_hex;
  6636  068A  084E               	movf	_day_hex,w
  6637  068B  00E1               	movwf	??_date_settings
  6638  068C  0861               	movf	??_date_settings,w
  6639  068D  00EB               	movwf	_table+3
  6640                           
  6641                           ;Button_src.c: 479:              write_cmd(0x88);
  6642  068E  3088               	movlw	136
  6643  068F  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6644                           
  6645                           ;Button_src.c: 481:                   RC0 = 0;
  6646  0694  1007               	bcf	7,0	;volatile
  6647                           
  6648                           ;Button_src.c: 482:                   RC1 = 1;
  6649  0695  1487               	bsf	7,1	;volatile
  6650                           
  6651                           ;Button_src.c: 483:                   RC2 = 1;
  6652  0696  1507               	bsf	7,2	;volatile
  6653                           
  6654                           ;Button_src.c: 484:                   RC3 = 1;
  6655  0697  1587               	bsf	7,3	;volatile
  6656                           
  6657                           ;Button_src.c: 486:                     if (RC6 == 0 ){
  6658  0698  1B07               	btfsc	7,6	;volatile
  6659  0699  2EB3               	goto	l613
  6660                           
  6661                           ;Button_src.c: 487:                           a = 0x00;
  6662  069A  01D1               	clrf	_a
  6663                           
  6664                           ;Button_src.c: 488:                           c = 0x00;
  6665  069B  01CF               	clrf	_c
  6666                           
  6667                           ;Button_src.c: 489:                           day_hex = 0x00;
  6668  069C  01CE               	clrf	_day_hex
  6669                           
  6670                           ;Button_src.c: 490:                           day_high = 0;
  6671  069D  01B5               	clrf	_day_high
  6672  069E  01B6               	clrf	_day_high+1
  6673                           
  6674                           ;Button_src.c: 491:                           day_low = 0;
  6675  069F  01B7               	clrf	_day_low
  6676  06A0  01B8               	clrf	_day_low+1
  6677                           
  6678                           ;Button_src.c: 492:                           x = 0;
  6679  06A1  01BD               	clrf	_x
  6680  06A2  01BE               	clrf	_x+1
  6681                           
  6682                           ;Button_src.c: 493:                           y = 0;
  6683  06A3  01BB               	clrf	_y
  6684  06A4  01BC               	clrf	_y+1
  6685                           
  6686                           ;Button_src.c: 494:                           w = 0;
  6687  06A5  01BF               	clrf	_w
  6688  06A6  01C0               	clrf	_w+1
  6689                           
  6690                           ;Button_src.c: 495:                           t = 0;
  6691  06A7  01C1               	clrf	_t
  6692  06A8  01C2               	clrf	_t+1
  6693                           
  6694                           ;Button_src.c: 496:                           write_cmd(0x1);
  6695  06A9  3001               	movlw	1
  6696  06AA  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6697                           
  6698                           ;Button_src.c: 497:                           set_time();
  6699  06AF  120A  158A  2041   	fcall	_set_time
  6700  06B2  0008               	return
  6701  06B3                     l613:	
  6702                           ;Button_src.c: 499:                             }
  6703                           
  6704                           
  6705                           ;Button_src.c: 500:                   RC0 = 0;
  6706  06B3  1007               	bcf	7,0	;volatile
  6707                           
  6708                           ;Button_src.c: 501:                   RC1 = 1;
  6709  06B4  1487               	bsf	7,1	;volatile
  6710                           
  6711                           ;Button_src.c: 502:                   RC2 = 1;
  6712  06B5  1507               	bsf	7,2	;volatile
  6713                           
  6714                           ;Button_src.c: 503:                   RC3 = 1;
  6715  06B6  1587               	bsf	7,3	;volatile
  6716                           
  6717                           ;Button_src.c: 504:                   z = modulus_func(z,3);
  6718  06B7  083A               	movf	_z+1,w
  6719  06B8  00F8               	movwf	modulus_func@x+1
  6720  06B9  0839               	movf	_z,w
  6721  06BA  00F7               	movwf	modulus_func@x
  6722  06BB  3003               	movlw	3
  6723  06BC  00F9               	movwf	modulus_func@y
  6724  06BD  3000               	movlw	0
  6725  06BE  00FA               	movwf	modulus_func@y+1
  6726  06BF  160A  118A  2672  120A  118A  	fcall	_modulus_func
  6727  06C4  0878               	movf	?_modulus_func+1,w
  6728  06C5  00BA               	movwf	_z+1
  6729  06C6  0877               	movf	?_modulus_func,w
  6730  06C7  00B9               	movwf	_z
  6731                           
  6732                           ;Button_src.c: 505:                   if(RC4 == 0 && z ==0){
  6733  06C8  1A07               	btfsc	7,4	;volatile
  6734  06C9  2F09               	goto	l3633
  6735  06CA  0839               	movf	_z,w
  6736  06CB  043A               	iorwf	_z+1,w
  6737  06CC  1D03               	btfss	3,2
  6738  06CD  2F09               	goto	l3633
  6739                           
  6740                           ;Button_src.c: 506:                       write_cmd(0x90);
  6741  06CE  3090               	movlw	144
  6742  06CF  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6743                           
  6744                           ;Button_src.c: 507:                       write_char('D');
  6745  06D4  3044               	movlw	68
  6746  06D5  160A  118A  26E5  120A  118A  	fcall	_write_char
  6747                           
  6748                           ;Button_src.c: 508:                       write_char('a');
  6749  06DA  3061               	movlw	97
  6750  06DB  160A  118A  26E5  120A  118A  	fcall	_write_char
  6751                           
  6752                           ;Button_src.c: 509:                       write_char('y');
  6753  06E0  3079               	movlw	121
  6754  06E1  160A  118A  26E5  120A  118A  	fcall	_write_char
  6755                           
  6756                           ;Button_src.c: 510:                       write_char(':');
  6757  06E6  303A               	movlw	58
  6758  06E7  160A  118A  26E5  120A  118A  	fcall	_write_char
  6759                           
  6760                           ;Button_src.c: 511:                       write_char(' ');
  6761  06EC  3020               	movlw	32
  6762  06ED  160A  118A  26E5  120A  118A  	fcall	_write_char
  6763                           
  6764                           ;Button_src.c: 512:                       write_char(' ');
  6765  06F2  3020               	movlw	32
  6766  06F3  160A  118A  26E5  120A  118A  	fcall	_write_char
  6767                           
  6768                           ;Button_src.c: 513:                       b = 'y';
  6769  06F8  3079               	movlw	121
  6770  06F9  00E1               	movwf	??_date_settings
  6771  06FA  0861               	movf	??_date_settings,w
  6772  06FB  00D0               	movwf	_b
  6773                           
  6774                           ;Button_src.c: 515:                       button_delay();
  6775  06FC  160A  118A  2693  120A  118A  	fcall	_button_delay
  6776                           
  6777                           ;Button_src.c: 516:                       z++;
  6778  0701  3001               	movlw	1
  6779  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6780  0703  1303               	bcf	3,6	;RP1=0, select bank0
  6781  0704  07B9               	addwf	_z,f
  6782  0705  1803               	skipnc
  6783  0706  0ABA               	incf	_z+1,f
  6784  0707  3000               	movlw	0
  6785  0708  07BA               	addwf	_z+1,f
  6786  0709                     l3633:	
  6787                           
  6788                           ;Button_src.c: 518:                   RC0 = 0;
  6789  0709  1007               	bcf	7,0	;volatile
  6790                           
  6791                           ;Button_src.c: 519:                   RC1 = 1;
  6792  070A  1487               	bsf	7,1	;volatile
  6793                           
  6794                           ;Button_src.c: 520:                   RC2 = 1;
  6795  070B  1507               	bsf	7,2	;volatile
  6796                           
  6797                           ;Button_src.c: 521:                   RC3 = 1;
  6798  070C  1587               	bsf	7,3	;volatile
  6799                           
  6800                           ;Button_src.c: 522:                   if(RC4 == 0&& z ==1){
  6801  070D  1A07               	btfsc	7,4	;volatile
  6802  070E  2F4C               	goto	l3663
  6803  070F  0339               	decf	_z,w
  6804  0710  043A               	iorwf	_z+1,w
  6805  0711  1D03               	btfss	3,2
  6806  0712  2F4C               	goto	l3663
  6807                           
  6808                           ;Button_src.c: 523:                       z++;
  6809  0713  3001               	movlw	1
  6810  0714  07B9               	addwf	_z,f
  6811  0715  1803               	skipnc
  6812  0716  0ABA               	incf	_z+1,f
  6813  0717  3000               	movlw	0
  6814  0718  07BA               	addwf	_z+1,f
  6815                           
  6816                           ;Button_src.c: 524:                       button_delay();
  6817  0719  160A  118A  2693  120A  118A  	fcall	_button_delay
  6818                           
  6819                           ;Button_src.c: 526:                       write_cmd(0x90);
  6820  071E  3090               	movlw	144
  6821  071F  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6822                           
  6823                           ;Button_src.c: 527:                       write_char('M');
  6824  0724  304D               	movlw	77
  6825  0725  160A  118A  26E5  120A  118A  	fcall	_write_char
  6826                           
  6827                           ;Button_src.c: 528:                       write_char('o');
  6828  072A  306F               	movlw	111
  6829  072B  160A  118A  26E5  120A  118A  	fcall	_write_char
  6830                           
  6831                           ;Button_src.c: 529:                       write_char('n');
  6832  0730  306E               	movlw	110
  6833  0731  160A  118A  26E5  120A  118A  	fcall	_write_char
  6834                           
  6835                           ;Button_src.c: 530:                       write_char('t');
  6836  0736  3074               	movlw	116
  6837  0737  160A  118A  26E5  120A  118A  	fcall	_write_char
  6838                           
  6839                           ;Button_src.c: 531:                       write_char('h');
  6840  073C  3068               	movlw	104
  6841  073D  160A  118A  26E5  120A  118A  	fcall	_write_char
  6842                           
  6843                           ;Button_src.c: 532:                       write_char(':');
  6844  0742  303A               	movlw	58
  6845  0743  160A  118A  26E5  120A  118A  	fcall	_write_char
  6846                           
  6847                           ;Button_src.c: 533:                       b = 'x';
  6848  0748  3078               	movlw	120
  6849  0749  00E1               	movwf	??_date_settings
  6850  074A  0861               	movf	??_date_settings,w
  6851  074B  00D0               	movwf	_b
  6852  074C                     l3663:	
  6853                           
  6854                           ;Button_src.c: 536:                   RC0 = 0;
  6855  074C  1007               	bcf	7,0	;volatile
  6856                           
  6857                           ;Button_src.c: 537:                   RC1 = 1;
  6858  074D  1487               	bsf	7,1	;volatile
  6859                           
  6860                           ;Button_src.c: 538:                   RC2 = 1;
  6861  074E  1507               	bsf	7,2	;volatile
  6862                           
  6863                           ;Button_src.c: 539:                   RC3 = 1;
  6864  074F  1587               	bsf	7,3	;volatile
  6865                           
  6866                           ;Button_src.c: 540:                   if(RC4 == 0&& z ==2){
  6867  0750  1A07               	btfsc	7,4	;volatile
  6868  0751  2F92               	goto	l3693
  6869  0752  3002               	movlw	2
  6870  0753  0639               	xorwf	_z,w
  6871  0754  043A               	iorwf	_z+1,w
  6872  0755  1D03               	btfss	3,2
  6873  0756  2F92               	goto	l3693
  6874                           
  6875                           ;Button_src.c: 541:                       button_delay();
  6876  0757  160A  118A  2693  120A  118A  	fcall	_button_delay
  6877                           
  6878                           ;Button_src.c: 542:                       z++;
  6879  075C  3001               	movlw	1
  6880  075D  1283               	bcf	3,5	;RP0=0, select bank0
  6881  075E  1303               	bcf	3,6	;RP1=0, select bank0
  6882  075F  07B9               	addwf	_z,f
  6883  0760  1803               	skipnc
  6884  0761  0ABA               	incf	_z+1,f
  6885  0762  3000               	movlw	0
  6886  0763  07BA               	addwf	_z+1,f
  6887                           
  6888                           ;Button_src.c: 544:                       write_cmd(0x90);
  6889  0764  3090               	movlw	144
  6890  0765  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6891                           
  6892                           ;Button_src.c: 545:                       write_char('Y');
  6893  076A  3059               	movlw	89
  6894  076B  160A  118A  26E5  120A  118A  	fcall	_write_char
  6895                           
  6896                           ;Button_src.c: 546:                       write_char('e');
  6897  0770  3065               	movlw	101
  6898  0771  160A  118A  26E5  120A  118A  	fcall	_write_char
  6899                           
  6900                           ;Button_src.c: 547:                       write_char('a');
  6901  0776  3061               	movlw	97
  6902  0777  160A  118A  26E5  120A  118A  	fcall	_write_char
  6903                           
  6904                           ;Button_src.c: 548:                       write_char('r');
  6905  077C  3072               	movlw	114
  6906  077D  160A  118A  26E5  120A  118A  	fcall	_write_char
  6907                           
  6908                           ;Button_src.c: 549:                       write_char(':');
  6909  0782  303A               	movlw	58
  6910  0783  160A  118A  26E5  120A  118A  	fcall	_write_char
  6911                           
  6912                           ;Button_src.c: 550:                       write_char(' ');
  6913  0788  3020               	movlw	32
  6914  0789  160A  118A  26E5  120A  118A  	fcall	_write_char
  6915                           
  6916                           ;Button_src.c: 551:                       b = 'z';
  6917  078E  307A               	movlw	122
  6918  078F  00E1               	movwf	??_date_settings
  6919  0790  0861               	movf	??_date_settings,w
  6920  0791  00D0               	movwf	_b
  6921  0792                     l3693:	
  6922                           
  6923                           ;Button_src.c: 554:               write_cmd(0x88);
  6924  0792  3088               	movlw	136
  6925  0793  160A  118A  26FC  120A  118A  	fcall	_write_cmd
  6926                           
  6927                           ;Button_src.c: 555:               write_char(day_high + '0');
  6928  0798  0835               	movf	_day_high,w
  6929  0799  3E30               	addlw	48
  6930  079A  160A  118A  26E5  120A  118A  	fcall	_write_char
  6931                           
  6932                           ;Button_src.c: 556:               write_char(day_low + '0');
  6933  079F  0837               	movf	_day_low,w
  6934  07A0  3E30               	addlw	48
  6935  07A1  160A  118A  26E5  120A  118A  	fcall	_write_char
  6936                           
  6937                           ;Button_src.c: 557:               write_char('/');
  6938  07A6  302F               	movlw	47
  6939  07A7  160A  118A  26E5  120A  118A  	fcall	_write_char
  6940                           
  6941                           ;Button_src.c: 558:               write_char(y + '0');
  6942  07AC  083B               	movf	_y,w
  6943  07AD  3E30               	addlw	48
  6944  07AE  160A  118A  26E5  120A  118A  	fcall	_write_char
  6945                           
  6946                           ;Button_src.c: 559:               write_char(x + '0');
  6947  07B3  083D               	movf	_x,w
  6948  07B4  3E30               	addlw	48
  6949  07B5  160A  118A  26E5  120A  118A  	fcall	_write_char
  6950                           
  6951                           ;Button_src.c: 560:               write_char('/');
  6952  07BA  302F               	movlw	47
  6953  07BB  160A  118A  26E5  120A  118A  	fcall	_write_char
  6954                           
  6955                           ;Button_src.c: 561:               write_char(w+ '0');
  6956  07C0  083F               	movf	_w,w
  6957  07C1  3E30               	addlw	48
  6958  07C2  160A  118A  26E5  120A  118A  	fcall	_write_char
  6959                           
  6960                           ;Button_src.c: 562:               write_char(t+ '0');
  6961  07C7  0841               	movf	_t,w
  6962  07C8  3E30               	addlw	48
  6963  07C9  160A  118A  26E5  120A  118A  	fcall	_write_char
  6964                           
  6965                           ;Button_src.c: 565:             RC0 = 0;
  6966  07CE  1007               	bcf	7,0	;volatile
  6967                           
  6968                           ;Button_src.c: 566:             RC1 = 1;
  6969  07CF  1487               	bsf	7,1	;volatile
  6970                           
  6971                           ;Button_src.c: 567:             RC2 = 1;
  6972  07D0  1507               	bsf	7,2	;volatile
  6973                           
  6974                           ;Button_src.c: 568:             RC3 = 1;
  6975  07D1  1587               	bsf	7,3	;volatile
  6976                           
  6977                           ;Button_src.c: 569:             if (RC7 == 0 ){
  6978  07D2  1B87               	btfsc	7,7	;volatile
  6979  07D3  2BE2               	goto	l590
  6980                           
  6981                           ;Button_src.c: 570:             a = 0x00;
  6982  07D4  01D1               	clrf	_a
  6983                           
  6984                           ;Button_src.c: 571:             c = 0x00;
  6985  07D5  01CF               	clrf	_c
  6986                           
  6987                           ;Button_src.c: 572:             day_hex = 0x00;
  6988  07D6  01CE               	clrf	_day_hex
  6989                           
  6990                           ;Button_src.c: 573:             x = 0;
  6991  07D7  01BD               	clrf	_x
  6992  07D8  01BE               	clrf	_x+1
  6993                           
  6994                           ;Button_src.c: 574:             y = 0;
  6995  07D9  01BB               	clrf	_y
  6996  07DA  01BC               	clrf	_y+1
  6997                           
  6998                           ;Button_src.c: 575:             w = 0;
  6999  07DB  01BF               	clrf	_w
  7000  07DC  01C0               	clrf	_w+1
  7001                           
  7002                           ;Button_src.c: 576:             t = 0;
  7003  07DD  01C1               	clrf	_t
  7004  07DE  01C2               	clrf	_t+1
  7005                           
  7006                           ;Button_src.c: 577:             day_high = 0;
  7007  07DF  01B5               	clrf	_day_high
  7008  07E0  01B6               	clrf	_day_high+1
  7009                           
  7010                           ;Button_src.c: 578:             day_low = 0;
  7011  07E1  01B7               	clrf	_day_low
  7012  07E2  01B8               	clrf	_day_low+1
  7013                           
  7014                           ;Button_src.c: 579:             write_cmd(0x1);
  7015  07E3  3001               	movlw	1
  7016  07E4  160A  118A  26FC   	fcall	_write_cmd
  7017                           
  7018                           ;Button_src.c: 580:             break;
  7019  07E7  0008               	return
  7020  07E8                     __end_of_date_settings:	
  7021                           
  7022                           	psect	text30
  7023  16FC                     __ptext30:	
  7024 ;; *************** function _write_cmd *****************
  7025 ;; Defined at:
  7026 ;;		line 41 in file "LCD_src.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  x               1    wreg     unsigned char 
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  x               1    2[COMMON] unsigned char 
  7031 ;;  i               2    0        int 
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      void 
  7034 ;; Registers used:
  7035 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 300/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7041 ;;      Params:         0       0       0       0       0
  7042 ;;      Locals:         1       0       0       0       0
  7043 ;;      Temps:          0       0       0       0       0
  7044 ;;      Totals:         1       0       0       0       0
  7045 ;;Total ram usage:        1 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    1
  7048 ;; This function calls:
  7049 ;;		_delay_screen
  7050 ;; This function is called by:
  7051 ;;		_main
  7052 ;;		_lcd_init
  7053 ;;		_thermometer_threshhold_settings
  7054 ;;		_time_settings
  7055 ;;		_date_settings
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           
  7060                           ;psect for function _write_cmd
  7061  16FC                     _write_cmd:	
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7065                           ;write_cmd@x stored from wreg
  7066  16FC  00F2               	movwf	write_cmd@x
  7067                           
  7068                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7069  16FD  1283               	bcf	3,5	;RP0=0, select bank0
  7070  16FE  1303               	bcf	3,6	;RP1=0, select bank0
  7071  16FF  1285               	bcf	5,5	;volatile
  7072                           
  7073                           ;LCD_src.c: 45:  RA4=0;
  7074  1700  1205               	bcf	5,4	;volatile
  7075                           
  7076                           ;LCD_src.c: 46:  RA3=0;
  7077  1701  1185               	bcf	5,3	;volatile
  7078                           
  7079                           ;LCD_src.c: 47:  delay_screen();
  7080  1702  160A  118A  26A7  160A  118A  	fcall	_delay_screen
  7081                           
  7082                           ;LCD_src.c: 48:  RA3=1;
  7083  1707  1283               	bcf	3,5	;RP0=0, select bank0
  7084  1708  1303               	bcf	3,6	;RP1=0, select bank0
  7085  1709  1585               	bsf	5,3	;volatile
  7086                           
  7087                           ;LCD_src.c: 49:  PORTD=x;
  7088  170A  0872               	movf	write_cmd@x,w
  7089  170B  0088               	movwf	8	;volatile
  7090                           
  7091                           ;LCD_src.c: 50:  delay_screen();
  7092  170C  160A  118A  26A7   	fcall	_delay_screen
  7093                           
  7094                           ;LCD_src.c: 51:  RA3=0;
  7095  170F  1283               	bcf	3,5	;RP0=0, select bank0
  7096  1710  1303               	bcf	3,6	;RP1=0, select bank0
  7097  1711  1185               	bcf	5,3	;volatile
  7098  1712  0008               	return
  7099  1713                     __end_of_write_cmd:	
  7100                           
  7101                           	psect	text31
  7102  16E5                     __ptext31:	
  7103 ;; *************** function _write_char *****************
  7104 ;; Defined at:
  7105 ;;		line 28 in file "LCD_src.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  x               1    wreg     unsigned char 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;  x               1    2[COMMON] unsigned char 
  7110 ;;  i               2    0        int 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 300/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7120 ;;      Params:         0       0       0       0       0
  7121 ;;      Locals:         1       0       0       0       0
  7122 ;;      Temps:          0       0       0       0       0
  7123 ;;      Totals:         1       0       0       0       0
  7124 ;;Total ram usage:        1 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    1
  7127 ;; This function calls:
  7128 ;;		_delay_screen
  7129 ;; This function is called by:
  7130 ;;		_main
  7131 ;;		_display_temp
  7132 ;;		_display_clock
  7133 ;;		_display_date
  7134 ;;		_thermometer_threshhold_settings
  7135 ;;		_time_settings
  7136 ;;		_date_settings
  7137 ;;		_set_upper_threshold
  7138 ;;		_set_lower_threshold
  7139 ;;		_display_day
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function _write_char
  7145  16E5                     _write_char:	
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7149                           ;write_char@x stored from wreg
  7150  16E5  00F2               	movwf	write_char@x
  7151                           
  7152                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7153  16E6  1283               	bcf	3,5	;RP0=0, select bank0
  7154  16E7  1303               	bcf	3,6	;RP1=0, select bank0
  7155  16E8  1685               	bsf	5,5	;volatile
  7156                           
  7157                           ;LCD_src.c: 32:  RA4=0;
  7158  16E9  1205               	bcf	5,4	;volatile
  7159                           
  7160                           ;LCD_src.c: 33:  RA3=0;
  7161  16EA  1185               	bcf	5,3	;volatile
  7162                           
  7163                           ;LCD_src.c: 34:  delay_screen();
  7164  16EB  160A  118A  26A7  160A  118A  	fcall	_delay_screen
  7165                           
  7166                           ;LCD_src.c: 35:  RA3=1;
  7167  16F0  1283               	bcf	3,5	;RP0=0, select bank0
  7168  16F1  1303               	bcf	3,6	;RP1=0, select bank0
  7169  16F2  1585               	bsf	5,3	;volatile
  7170                           
  7171                           ;LCD_src.c: 36:  PORTD= x;
  7172  16F3  0872               	movf	write_char@x,w
  7173  16F4  0088               	movwf	8	;volatile
  7174                           
  7175                           ;LCD_src.c: 37:  delay_screen();
  7176  16F5  160A  118A  26A7   	fcall	_delay_screen
  7177                           
  7178                           ;LCD_src.c: 38:  RA3=0;
  7179  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  7180  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  7181  16FA  1185               	bcf	5,3	;volatile
  7182  16FB  0008               	return
  7183  16FC                     __end_of_write_char:	
  7184                           
  7185                           	psect	text32
  7186  16A7                     __ptext32:	
  7187 ;; *************** function _delay_screen *****************
  7188 ;; Defined at:
  7189 ;;		line 70 in file "LCD_src.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  i               2    0[COMMON] int 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, btemp+1
  7198 ;; Tracked objects:
  7199 ;;		On entry : 300/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7203 ;;      Params:         0       0       0       0       0
  7204 ;;      Locals:         2       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0
  7206 ;;      Totals:         2       0       0       0       0
  7207 ;;Total ram usage:        2 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_lcd_init
  7213 ;;		_write_char
  7214 ;;		_write_cmd
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           
  7219                           ;psect for function _delay_screen
  7220  16A7                     _delay_screen:	
  7221                           
  7222                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7223                           
  7224                           ;incstack = 0
  7225                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7226  16A7  01F0               	clrf	delay_screen@i
  7227  16A8  01F1               	clrf	delay_screen@i+1
  7228  16A9                     l2771:	
  7229  16A9  3001               	movlw	1
  7230  16AA  07F0               	addwf	delay_screen@i,f
  7231  16AB  1803               	skipnc
  7232  16AC  0AF1               	incf	delay_screen@i+1,f
  7233  16AD  3000               	movlw	0
  7234  16AE  07F1               	addwf	delay_screen@i+1,f
  7235  16AF  0871               	movf	delay_screen@i+1,w
  7236  16B0  3A80               	xorlw	128
  7237  16B1  00FF               	movwf	127
  7238  16B2  3080               	movlw	128
  7239  16B3  027F               	subwf	127,w
  7240  16B4  1D03               	skipz
  7241  16B5  2EB8               	goto	u1525
  7242  16B6  3005               	movlw	5
  7243  16B7  0270               	subwf	delay_screen@i,w
  7244  16B8                     u1525:	
  7245  16B8  1803               	btfsc	3,0
  7246  16B9  0008               	return
  7247  16BA  2EA9               	goto	l2771
  7248  16BB                     __end_of_delay_screen:	
  7249                           
  7250                           	psect	text33
  7251  1654                     __ptext33:	
  7252 ;; *************** function _time_date_hex_terminator *****************
  7253 ;; Defined at:
  7254 ;;		line 37 in file "math_src.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  val             1    wreg     unsigned char 
  7257 ;;  limiter         1    0[COMMON] unsigned char 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;  val             1    3[COMMON] unsigned char 
  7260 ;; Return value:  Size  Location     Type
  7261 ;;                  1    wreg      unsigned char 
  7262 ;; Registers used:
  7263 ;;		wreg, status,2
  7264 ;; Tracked objects:
  7265 ;;		On entry : 300/0
  7266 ;;		On exit  : 300/0
  7267 ;;		Unchanged: 300/0
  7268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7269 ;;      Params:         1       0       0       0       0
  7270 ;;      Locals:         1       0       0       0       0
  7271 ;;      Temps:          2       0       0       0       0
  7272 ;;      Totals:         4       0       0       0       0
  7273 ;;Total ram usage:        4 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; This function calls:
  7276 ;;		Nothing
  7277 ;; This function is called by:
  7278 ;;		_time_settings
  7279 ;;		_date_settings
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           
  7284                           ;psect for function _time_date_hex_terminator
  7285  1654                     _time_date_hex_terminator:	
  7286                           
  7287                           ;incstack = 0
  7288                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7289                           ;time_date_hex_terminator@val stored from wreg
  7290  1654  00F3               	movwf	time_date_hex_terminator@val
  7291                           
  7292                           ;math_src.c: 38:     if((val + '0') == limiter){
  7293  1655  0873               	movf	time_date_hex_terminator@val,w
  7294  1656  3E30               	addlw	48
  7295  1657  00F1               	movwf	??_time_date_hex_terminator
  7296  1658  3000               	movlw	0
  7297  1659  1803               	skipnc
  7298  165A  3001               	movlw	1
  7299  165B  00F2               	movwf	??_time_date_hex_terminator+1
  7300  165C  0870               	movf	time_date_hex_terminator@limiter,w
  7301  165D  0671               	xorwf	??_time_date_hex_terminator,w
  7302  165E  0472               	iorwf	??_time_date_hex_terminator+1,w
  7303  165F  1903               	btfsc	3,2
  7304                           
  7305                           ;math_src.c: 39:     val = 0x00;
  7306  1660  01F3               	clrf	time_date_hex_terminator@val
  7307                           
  7308                           ;math_src.c: 41:     return val;
  7309  1661  0873               	movf	time_date_hex_terminator@val,w
  7310  1662  0008               	return
  7311  1663                     __end_of_time_date_hex_terminator:	
  7312                           
  7313                           	psect	text34
  7314  0800                     __ptext34:	
  7315 ;; *************** function _time_date_delimiter *****************
  7316 ;; Defined at:
  7317 ;;		line 27 in file "math_src.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  val             1    wreg     unsigned char 
  7320 ;;  hex             1    0[COMMON] unsigned char 
  7321 ;;  limiter         1    1[COMMON] unsigned char 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  val             1    4[COMMON] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      unsigned char 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 300/0
  7330 ;;		On exit  : 300/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7333 ;;      Params:         2       0       0       0       0
  7334 ;;      Locals:         1       0       0       0       0
  7335 ;;      Temps:          2       0       0       0       0
  7336 ;;      Totals:         5       0       0       0       0
  7337 ;;Total ram usage:        5 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; This function calls:
  7340 ;;		Nothing
  7341 ;; This function is called by:
  7342 ;;		_time_settings
  7343 ;;		_date_settings
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function _time_date_delimiter
  7349  0800                     _time_date_delimiter:	
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7353                           ;time_date_delimiter@val stored from wreg
  7354  0800  00F4               	movwf	time_date_delimiter@val
  7355                           
  7356                           ;math_src.c: 28:     if((val + '0') == limiter){
  7357  0801  0874               	movf	time_date_delimiter@val,w
  7358  0802  3E30               	addlw	48
  7359  0803  00F2               	movwf	??_time_date_delimiter
  7360  0804  3000               	movlw	0
  7361  0805  1803               	skipnc
  7362  0806  3001               	movlw	1
  7363  0807  00F3               	movwf	??_time_date_delimiter+1
  7364  0808  0871               	movf	time_date_delimiter@limiter,w
  7365  0809  0672               	xorwf	??_time_date_delimiter,w
  7366  080A  0473               	iorwf	??_time_date_delimiter+1,w
  7367  080B  1D03               	skipz
  7368  080C  2819               	goto	l3029
  7369                           
  7370                           ;math_src.c: 29:     val = hex;
  7371  080D  0870               	movf	time_date_delimiter@hex,w
  7372  080E  00F2               	movwf	??_time_date_delimiter
  7373  080F  0872               	movf	??_time_date_delimiter,w
  7374  0810  00F4               	movwf	time_date_delimiter@val
  7375                           
  7376                           ;math_src.c: 30:     stats=0;
  7377  0811  01B1               	clrf	_stats
  7378  0812  01B2               	clrf	_stats+1
  7379                           
  7380                           ;math_src.c: 31:     prev_hex= 0x09;
  7381  0813  3009               	movlw	9
  7382  0814  00F2               	movwf	??_time_date_delimiter
  7383  0815  0872               	movf	??_time_date_delimiter,w
  7384  0816  00CC               	movwf	_prev_hex
  7385                           
  7386                           ;math_src.c: 32:     val--;
  7387  0817  3001               	movlw	1
  7388  0818  02F4               	subwf	time_date_delimiter@val,f
  7389  0819                     l3029:	
  7390                           
  7391                           ;math_src.c: 34:     return val;
  7392  0819  0874               	movf	time_date_delimiter@val,w
  7393  081A  0008               	return
  7394  081B                     __end_of_time_date_delimiter:	
  7395                           
  7396                           	psect	text35
  7397  0841                     __ptext35:	
  7398 ;; *************** function _set_time *****************
  7399 ;; Defined at:
  7400 ;;		line 15 in file "clock_src.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;		None
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  i               2    5[COMMON] int 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7409 ;; Tracked objects:
  7410 ;;		On entry : 300/0
  7411 ;;		On exit  : 300/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7414 ;;      Params:         0       0       0       0       0
  7415 ;;      Locals:         2       0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0
  7417 ;;      Totals:         2       0       0       0       0
  7418 ;;Total ram usage:        2 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    1
  7421 ;; This function calls:
  7422 ;;		_time_write_1
  7423 ;; This function is called by:
  7424 ;;		_main
  7425 ;;		_time_settings
  7426 ;;		_date_settings
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           
  7431                           ;psect for function _set_time
  7432  0841                     _set_time:	
  7433                           
  7434                           ;clock_src.c: 17:    int i;;clock_src.c: 18:    RB5=1;
  7435                           
  7436                           ;incstack = 0
  7437                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7438  0841  1686               	bsf	6,5	;volatile
  7439                           
  7440                           ;clock_src.c: 19:    time_write_1(0xbe);
  7441  0842  30BE               	movlw	190
  7442  0843  120A  158A  201B  120A  158A  	fcall	_time_write_1
  7443                           
  7444                           ;clock_src.c: 20:    for(i=0;i<8;i++)
  7445  0848  01F5               	clrf	set_time@i
  7446  0849  01F6               	clrf	set_time@i+1
  7447  084A                     l2807:	
  7448                           
  7449                           ;clock_src.c: 21:      {;clock_src.c: 22:        time_write_1(table[i]);
  7450  084A  0875               	movf	set_time@i,w
  7451  084B  3E68               	addlw	(low (_table| 0))& (0+255)
  7452  084C  0084               	movwf	4
  7453  084D  1383               	bcf	3,7	;select IRP bank0
  7454  084E  0800               	movf	0,w
  7455  084F  120A  158A  201B  120A  158A  	fcall	_time_write_1
  7456                           
  7457                           ;clock_src.c: 23:      }
  7458  0854  3001               	movlw	1
  7459  0855  07F5               	addwf	set_time@i,f
  7460  0856  1803               	skipnc
  7461  0857  0AF6               	incf	set_time@i+1,f
  7462  0858  3000               	movlw	0
  7463  0859  07F6               	addwf	set_time@i+1,f
  7464  085A  0876               	movf	set_time@i+1,w
  7465  085B  3A80               	xorlw	128
  7466  085C  00FF               	movwf	127
  7467  085D  3080               	movlw	128
  7468  085E  027F               	subwf	127,w
  7469  085F  1D03               	skipz
  7470  0860  2863               	goto	u1575
  7471  0861  3008               	movlw	8
  7472  0862  0275               	subwf	set_time@i,w
  7473  0863                     u1575:	
  7474  0863  1C03               	skipc
  7475  0864  284A               	goto	l2807
  7476                           
  7477                           ;clock_src.c: 24:    RB5=0;
  7478  0865  1283               	bcf	3,5	;RP0=0, select bank0
  7479  0866  1303               	bcf	3,6	;RP1=0, select bank0
  7480  0867  1286               	bcf	6,5	;volatile
  7481  0868  0008               	return
  7482  0869                     __end_of_set_time:	
  7483                           
  7484                           	psect	text36
  7485  081B                     __ptext36:	
  7486 ;; *************** function _time_write_1 *****************
  7487 ;; Defined at:
  7488 ;;		line 116 in file "clock_src.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  time_tx         1    wreg     unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  time_tx         1    4[COMMON] unsigned char 
  7493 ;;  j               2    2[COMMON] int 
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0, btemp+1
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 300/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7503 ;;      Params:         0       0       0       0       0
  7504 ;;      Locals:         3       0       0       0       0
  7505 ;;      Temps:          2       0       0       0       0
  7506 ;;      Totals:         5       0       0       0       0
  7507 ;;Total ram usage:        5 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_ds1302_init
  7513 ;;		_set_time
  7514 ;;		_get_time
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           
  7519                           ;psect for function _time_write_1
  7520  081B                     _time_write_1:	
  7521                           
  7522                           ;incstack = 0
  7523                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  7524                           ;time_write_1@time_tx stored from wreg
  7525  081B  00F4               	movwf	time_write_1@time_tx
  7526                           
  7527                           ;clock_src.c: 116: void time_write_1(unsigned char time_tx);clock_src.c: 117: {;clock_sr
      +                          c.c: 118:     int j;;clock_src.c: 119:     for(j=0;j<8;j++)
  7528  081C  01F2               	clrf	time_write_1@j
  7529  081D  01F3               	clrf	time_write_1@j+1
  7530  081E                     l354:	
  7531                           
  7532                           ;clock_src.c: 120:    {;clock_src.c: 121:         RB4=0;
  7533  081E  1283               	bcf	3,5	;RP0=0, select bank0
  7534  081F  1303               	bcf	3,6	;RP1=0, select bank0
  7535  0820  1206               	bcf	6,4	;volatile
  7536                           
  7537                           ;clock_src.c: 122:         RB0=0;
  7538  0821  1006               	bcf	6,0	;volatile
  7539                           
  7540                           ;clock_src.c: 123:         if(time_tx&0x01)
  7541  0822  1874               	btfsc	time_write_1@time_tx,0
  7542                           
  7543                           ;clock_src.c: 124:           {;clock_src.c: 125:             RB4=1;
  7544  0823  1606               	bsf	6,4	;volatile
  7545                           
  7546                           ;clock_src.c: 127:         time_tx=time_tx>>1;
  7547  0824  0874               	movf	time_write_1@time_tx,w
  7548  0825  00F0               	movwf	??_time_write_1
  7549  0826  1003               	clrc
  7550  0827  0C70               	rrf	??_time_write_1,w
  7551  0828  00F1               	movwf	??_time_write_1+1
  7552  0829  0871               	movf	??_time_write_1+1,w
  7553  082A  00F4               	movwf	time_write_1@time_tx
  7554                           
  7555                           ;clock_src.c: 128:         RB0=1;
  7556  082B  1406               	bsf	6,0	;volatile
  7557                           
  7558                           ;clock_src.c: 129:     }
  7559  082C  3001               	movlw	1
  7560  082D  07F2               	addwf	time_write_1@j,f
  7561  082E  1803               	skipnc
  7562  082F  0AF3               	incf	time_write_1@j+1,f
  7563  0830  3000               	movlw	0
  7564  0831  07F3               	addwf	time_write_1@j+1,f
  7565  0832  0873               	movf	time_write_1@j+1,w
  7566  0833  3A80               	xorlw	128
  7567  0834  00FF               	movwf	127
  7568  0835  3080               	movlw	128
  7569  0836  027F               	subwf	127,w
  7570  0837  1D03               	skipz
  7571  0838  283B               	goto	u1565
  7572  0839  3008               	movlw	8
  7573  083A  0272               	subwf	time_write_1@j,w
  7574  083B                     u1565:	
  7575  083B  1C03               	skipc
  7576  083C  281E               	goto	l354
  7577                           
  7578                           ;clock_src.c: 130:       RB0=0;
  7579  083D  1283               	bcf	3,5	;RP0=0, select bank0
  7580  083E  1303               	bcf	3,6	;RP1=0, select bank0
  7581  083F  1006               	bcf	6,0	;volatile
  7582  0840  0008               	return
  7583  0841                     __end_of_time_write_1:	
  7584                           
  7585                           	psect	text37
  7586  17B8                     __ptext37:	
  7587 ;; *************** function _incrementor *****************
  7588 ;; Defined at:
  7589 ;;		line 10 in file "math_src.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  upper_val       2    0[BANK0 ] int 
  7592 ;;  lower_val       2    2[BANK0 ] int 
  7593 ;;  z               1    4[BANK0 ] unsigned char 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;		None
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      unsigned char 
  7598 ;; Registers used:
  7599 ;;		wreg, status,2, status,0, pclath, cstack
  7600 ;; Tracked objects:
  7601 ;;		On entry : 300/0
  7602 ;;		On exit  : 300/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7605 ;;      Params:         0       5       0       0       0
  7606 ;;      Locals:         0       0       0       0       0
  7607 ;;      Temps:          2       0       0       0       0
  7608 ;;      Totals:         2       5       0       0       0
  7609 ;;Total ram usage:        7 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; Hardware stack levels required when called:    2
  7612 ;; This function calls:
  7613 ;;		_modulus_func
  7614 ;; This function is called by:
  7615 ;;		_thermometer_threshhold_settings
  7616 ;;		_time_settings
  7617 ;;		_date_settings
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function _incrementor
  7623  17B8                     _incrementor:	
  7624                           
  7625                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  7626                           
  7627                           ;incstack = 0
  7628                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  7629  17B8  085E               	movf	incrementor@lower_val,w
  7630  17B9  3E30               	addlw	48
  7631  17BA  00FB               	movwf	??_incrementor
  7632  17BB  085F               	movf	incrementor@lower_val+1,w
  7633  17BC  1803               	skipnc
  7634  17BD  3E01               	addlw	1
  7635  17BE  3E00               	addlw	0
  7636  17BF  00FC               	movwf	??_incrementor+1
  7637  17C0  0860               	movf	incrementor@z,w
  7638  17C1  067B               	xorwf	??_incrementor,w
  7639  17C2  047C               	iorwf	??_incrementor+1,w
  7640  17C3  1D03               	skipz
  7641  17C4  2FDA               	goto	l2997
  7642                           
  7643                           ;math_src.c: 12:      upper_val++;
  7644  17C5  3001               	movlw	1
  7645  17C6  07DC               	addwf	incrementor@upper_val,f
  7646  17C7  1803               	skipnc
  7647  17C8  0ADD               	incf	incrementor@upper_val+1,f
  7648  17C9  3000               	movlw	0
  7649  17CA  07DD               	addwf	incrementor@upper_val+1,f
  7650                           
  7651                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  7652  17CB  085D               	movf	incrementor@upper_val+1,w
  7653  17CC  00F8               	movwf	modulus_func@x+1
  7654  17CD  085C               	movf	incrementor@upper_val,w
  7655  17CE  00F7               	movwf	modulus_func@x
  7656  17CF  300A               	movlw	10
  7657  17D0  00F9               	movwf	modulus_func@y
  7658  17D1  3000               	movlw	0
  7659  17D2  00FA               	movwf	modulus_func@y+1
  7660  17D3  160A  118A  2672   	fcall	_modulus_func
  7661  17D6  0878               	movf	?_modulus_func+1,w
  7662  17D7  00DD               	movwf	incrementor@upper_val+1
  7663  17D8  0877               	movf	?_modulus_func,w
  7664  17D9  00DC               	movwf	incrementor@upper_val
  7665  17DA                     l2997:	
  7666                           
  7667                           ;math_src.c: 15:      return upper_val;
  7668  17DA  085C               	movf	incrementor@upper_val,w
  7669  17DB  0008               	return
  7670  17DC                     __end_of_incrementor:	
  7671                           
  7672                           	psect	text38
  7673  1672                     __ptext38:	
  7674 ;; *************** function _modulus_func *****************
  7675 ;; Defined at:
  7676 ;;		line 5 in file "math_src.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  x               2    7[COMMON] int 
  7679 ;;  y               2    9[COMMON] int 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  2    7[COMMON] int 
  7684 ;; Registers used:
  7685 ;;		wreg, status,2, status,0, pclath, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 300/0
  7688 ;;		On exit  : 300/0
  7689 ;;		Unchanged: 300/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7691 ;;      Params:         4       0       0       0       0
  7692 ;;      Locals:         0       0       0       0       0
  7693 ;;      Temps:          0       0       0       0       0
  7694 ;;      Totals:         4       0       0       0       0
  7695 ;;Total ram usage:        4 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    1
  7698 ;; This function calls:
  7699 ;;		___awmod
  7700 ;; This function is called by:
  7701 ;;		_main
  7702 ;;		_thermometer_threshhold_settings
  7703 ;;		_time_settings
  7704 ;;		_date_settings
  7705 ;;		_incrementor
  7706 ;;		_decrementor
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           
  7711                           ;psect for function _modulus_func
  7712  1672                     _modulus_func:	
  7713                           
  7714                           ;math_src.c: 6:     x = x % y;
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  7718  1672  087A               	movf	modulus_func@y+1,w
  7719  1673  00F1               	movwf	___awmod@divisor+1
  7720  1674  0879               	movf	modulus_func@y,w
  7721  1675  00F0               	movwf	___awmod@divisor
  7722  1676  0878               	movf	modulus_func@x+1,w
  7723  1677  00F3               	movwf	___awmod@dividend+1
  7724  1678  0877               	movf	modulus_func@x,w
  7725  1679  00F2               	movwf	___awmod@dividend
  7726  167A  120A  158A  2209   	fcall	___awmod
  7727  167D  0871               	movf	?___awmod+1,w
  7728  167E  00F8               	movwf	modulus_func@x+1
  7729  167F  0870               	movf	?___awmod,w
  7730  1680  00F7               	movwf	modulus_func@x
  7731                           
  7732                           ;math_src.c: 7:     return x;
  7733  1681  0008               	return
  7734  1682                     __end_of_modulus_func:	
  7735                           
  7736                           	psect	text39
  7737  0A09                     __ptext39:	
  7738 ;; *************** function ___awmod *****************
  7739 ;; Defined at:
  7740 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  divisor         2    0[COMMON] int 
  7743 ;;  dividend        2    2[COMMON] int 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  sign            1    6[COMMON] unsigned char 
  7746 ;;  counter         1    5[COMMON] unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  2    0[COMMON] int 
  7749 ;; Registers used:
  7750 ;;		wreg, status,2, status,0
  7751 ;; Tracked objects:
  7752 ;;		On entry : 300/0
  7753 ;;		On exit  : 300/0
  7754 ;;		Unchanged: 300/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7756 ;;      Params:         4       0       0       0       0
  7757 ;;      Locals:         2       0       0       0       0
  7758 ;;      Temps:          1       0       0       0       0
  7759 ;;      Totals:         7       0       0       0       0
  7760 ;;Total ram usage:        7 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_modulus_func
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           
  7770                           ;psect for function ___awmod
  7771  0A09                     ___awmod:	
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7775  0A09  01F6               	clrf	___awmod@sign
  7776  0A0A  1FF3               	btfss	___awmod@dividend+1,7
  7777  0A0B  2A13               	goto	l2729
  7778  0A0C  09F2               	comf	___awmod@dividend,f
  7779  0A0D  09F3               	comf	___awmod@dividend+1,f
  7780  0A0E  0AF2               	incf	___awmod@dividend,f
  7781  0A0F  1903               	skipnz
  7782  0A10  0AF3               	incf	___awmod@dividend+1,f
  7783  0A11  01F6               	clrf	___awmod@sign
  7784  0A12  0AF6               	incf	___awmod@sign,f
  7785  0A13                     l2729:	
  7786  0A13  1FF1               	btfss	___awmod@divisor+1,7
  7787  0A14  2A1A               	goto	l2733
  7788  0A15  09F0               	comf	___awmod@divisor,f
  7789  0A16  09F1               	comf	___awmod@divisor+1,f
  7790  0A17  0AF0               	incf	___awmod@divisor,f
  7791  0A18  1903               	skipnz
  7792  0A19  0AF1               	incf	___awmod@divisor+1,f
  7793  0A1A                     l2733:	
  7794  0A1A  0870               	movf	___awmod@divisor,w
  7795  0A1B  0471               	iorwf	___awmod@divisor+1,w
  7796  0A1C  1903               	btfsc	3,2
  7797  0A1D  2A47               	goto	l2751
  7798  0A1E  01F5               	clrf	___awmod@counter
  7799  0A1F  0AF5               	incf	___awmod@counter,f
  7800  0A20                     l2741:	
  7801  0A20  1BF1               	btfsc	___awmod@divisor+1,7
  7802  0A21  2A2E               	goto	l2743
  7803  0A22  3001               	movlw	1
  7804  0A23                     u1465:	
  7805  0A23  1003               	clrc
  7806  0A24  0DF0               	rlf	___awmod@divisor,f
  7807  0A25  0DF1               	rlf	___awmod@divisor+1,f
  7808  0A26  3EFF               	addlw	-1
  7809  0A27  1D03               	skipz
  7810  0A28  2A23               	goto	u1465
  7811  0A29  3001               	movlw	1
  7812  0A2A  00F4               	movwf	??___awmod
  7813  0A2B  0874               	movf	??___awmod,w
  7814  0A2C  07F5               	addwf	___awmod@counter,f
  7815  0A2D  2A20               	goto	l2741
  7816  0A2E                     l2743:	
  7817  0A2E  0871               	movf	___awmod@divisor+1,w
  7818  0A2F  0273               	subwf	___awmod@dividend+1,w
  7819  0A30  1D03               	skipz
  7820  0A31  2A34               	goto	u1485
  7821  0A32  0870               	movf	___awmod@divisor,w
  7822  0A33  0272               	subwf	___awmod@dividend,w
  7823  0A34                     u1485:	
  7824  0A34  1C03               	skipc
  7825  0A35  2A3C               	goto	l2747
  7826  0A36  0870               	movf	___awmod@divisor,w
  7827  0A37  02F2               	subwf	___awmod@dividend,f
  7828  0A38  0871               	movf	___awmod@divisor+1,w
  7829  0A39  1C03               	skipc
  7830  0A3A  03F3               	decf	___awmod@dividend+1,f
  7831  0A3B  02F3               	subwf	___awmod@dividend+1,f
  7832  0A3C                     l2747:	
  7833  0A3C  3001               	movlw	1
  7834  0A3D                     u1495:	
  7835  0A3D  1003               	clrc
  7836  0A3E  0CF1               	rrf	___awmod@divisor+1,f
  7837  0A3F  0CF0               	rrf	___awmod@divisor,f
  7838  0A40  3EFF               	addlw	-1
  7839  0A41  1D03               	skipz
  7840  0A42  2A3D               	goto	u1495
  7841  0A43  3001               	movlw	1
  7842  0A44  02F5               	subwf	___awmod@counter,f
  7843  0A45  1D03               	btfss	3,2
  7844  0A46  2A2E               	goto	l2743
  7845  0A47                     l2751:	
  7846  0A47  0876               	movf	___awmod@sign,w
  7847  0A48  1903               	btfsc	3,2
  7848  0A49  2A4F               	goto	l2755
  7849  0A4A  09F2               	comf	___awmod@dividend,f
  7850  0A4B  09F3               	comf	___awmod@dividend+1,f
  7851  0A4C  0AF2               	incf	___awmod@dividend,f
  7852  0A4D  1903               	skipnz
  7853  0A4E  0AF3               	incf	___awmod@dividend+1,f
  7854  0A4F                     l2755:	
  7855  0A4F  0873               	movf	___awmod@dividend+1,w
  7856  0A50  00F1               	movwf	?___awmod+1
  7857  0A51  0872               	movf	___awmod@dividend,w
  7858  0A52  00F0               	movwf	?___awmod
  7859  0A53  0008               	return
  7860  0A54                     __end_of___awmod:	
  7861                           
  7862                           	psect	text40
  7863  1693                     __ptext40:	
  7864 ;; *************** function _button_delay *****************
  7865 ;; Defined at:
  7866 ;;		line 586 in file "Button_src.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;		None
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  i               2    0[COMMON] int 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      void 
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, btemp+1
  7875 ;; Tracked objects:
  7876 ;;		On entry : 300/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7880 ;;      Params:         0       0       0       0       0
  7881 ;;      Locals:         2       0       0       0       0
  7882 ;;      Temps:          0       0       0       0       0
  7883 ;;      Totals:         2       0       0       0       0
  7884 ;;Total ram usage:        2 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_set_beep_threshhold
  7890 ;;		_thermometer_threshhold_settings
  7891 ;;		_time_settings
  7892 ;;		_date_settings
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function _button_delay
  7898  1693                     _button_delay:	
  7899                           
  7900                           ;Button_src.c: 587:     for(int i=0;i<10000;i++);
  7901                           
  7902                           ;incstack = 0
  7903                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  7904  1693  01F0               	clrf	button_delay@i
  7905  1694  01F1               	clrf	button_delay@i+1
  7906  1695                     l2987:	
  7907  1695  3001               	movlw	1
  7908  1696  07F0               	addwf	button_delay@i,f
  7909  1697  1803               	skipnc
  7910  1698  0AF1               	incf	button_delay@i+1,f
  7911  1699  3000               	movlw	0
  7912  169A  07F1               	addwf	button_delay@i+1,f
  7913  169B  0871               	movf	button_delay@i+1,w
  7914  169C  3A80               	xorlw	128
  7915  169D  00FF               	movwf	127
  7916  169E  30A7               	movlw	167
  7917  169F  027F               	subwf	127,w
  7918  16A0  1D03               	skipz
  7919  16A1  2EA4               	goto	u1675
  7920  16A2  3010               	movlw	16
  7921  16A3  0270               	subwf	button_delay@i,w
  7922  16A4                     u1675:	
  7923  16A4  1803               	btfsc	3,0
  7924  16A5  0008               	return
  7925  16A6  2E95               	goto	l2987
  7926  16A7                     __end_of_button_delay:	
  7927  007E                     btemp	set	126	;btemp
  7928  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   38743
                                             10 BANK0      2     2      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   10434
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  6     2      4     264
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  6     2      4     286
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   10434
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  5     3      2    3130
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Dec 10 23:02:10 2019

                                       _a 0051                                         _b 0050  
                                       _c 004F                                         _p 002F  
                                       _t 0041                                         _w 003F  
                                       _x 003D                                         _y 003B  
                                       _z 0039                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 0058                                        _TZ 0059  
                                      _ge 0056                                        _wd 0043  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 1713  
                           ?_display_date 0070                                       l301 1647  
                                     l360 089B                                       l354 081E  
                                     l611 0686                                       l604 0542  
                                     l613 06B3                                       l605 054A  
                                     l560 0FF5                                       l554 0F4D  
                                     l570 0168                                       l581 02E2  
                                     l590 03E2                                       l559 0FB0  
                                     l575 01D5                                       l567 00FA  
                                     l592 0448                                       l584 036F  
                                     l576 01DD                                       l593 0450  
                                     l569 0160                                       l598 04BC  
                                     l599 04C4                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005A  
                           ?_display_temp 0070                                       _TLV 005B  
                                     _shi 0057                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0061  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1051 178F                                      l3111 08D9  
                                    l3007 17FE                                      l3043 1758  
                                    l3115 08E7                                      l3029 0819  
                                    l3045 1761                                      l3109 08CB  
                                    l3213 0C1F                                      l3205 0C0B  
                                    l3055 1770                                      l3063 1778  
                                    l3119 08F2                                      l4015 0CAD  
                                    l3217 0C29                                      l3209 0C15  
                                    l3401 0F39                                      l3501 04AC  
                                    l3093 09F9                                      l3085 09D5  
                                    l3237 0874                                      l3087 09E3  
                                    l3343 0EA4                                      l3521 0509  
                                    l3249 0AF4                                      l3097 0A04  
                                    l3425 0FBD                                      l3371 0F03  
                                    l2741 0A20                                      l2733 0A1A  
                                    l3533 052D                                      l3525 0512  
                                    l2901 08FC                                      l4085 0D76  
                                    l2743 0A2E                                      l2751 0A47  
                                    l2807 084A                                      l3535 0532  
                                    l3287 0A5E                                      l2729 0A13  
                                    l3633 0709                                      l3553 057E  
                                    l3801 023E                                      l2755 0A4F  
                                    l2747 0A3C                                      l2771 16A9  
                                    l3491 048D                                      l2851 092D  
                                    l3803 0243                                      l3565 0594  
                                    l3557 0587                                      l3663 074C  
                                    l3567 0599                                      l3487 0484  
                                    l2847 0953                                      l2953 16BD  
                                    l2777 164B                                      l2849 0954  
                                    l3921 002A                                      l3499 04A7  
                                    l2859 0964                                      l2971 08AC  
                                    l3755 019C                                      l3693 0792  
                                    l3597 067E                                      l2879 0979  
                                    l3919 001D                                      l3863 0332  
                                    l3791 021A                                      l3767 01C0  
                                    l3759 01A5                                      l3769 01C5  
                                    l2987 1695                                      l3787 0211  
                                    l2997 17DA                                      l3973 0053  
                                    l3957 172C                                      l3991 00C1  
                                    l3983 0093                                      l3975 0065  
                          ?_display_clock 0070                                      l3995 00D8  
                                    l3987 00AA                                      l3979 007C  
                                    u2055 0F4A                                      u1525 16B8  
                                    u1465 0A23                                      u1485 0A34  
                                    u1565 083B                                      u1805 09D8  
                                    u1645 16CC                                      u1495 0A3D  
                                    u1575 0863                                      u1825 09E4  
                                    u1905 08E8                                      u1665 08BC  
                                    u2705 0028                                      u1675 16A4  
                                    u1835 09F0                                      u2715 099E  
                                    u1765 177B                                      u1845 09FA  
                                    u1925 0BC3                                      u2725 09A9  
                                    u1935 0BCE                                      u1945 0BDB  
                                    u1875 08CE                                      u2685 0010  
                                    u2845 0D8B                                      u1895 08DF  
                                    u2695 001B                                      u1995 088F  
             time_date_hex_terminator@val 0073                      ?_set_beep_threshhold 0070  
                                    _main 0C87                                      _init 1621  
                                    _var1 0047                                      _var2 0046  
                                    btemp 007E           time_date_hex_terminator@limiter 0070  
                           write_byte@val 0077                                      start 0000  
                  time_date_delimiter@hex 0070                    time_date_delimiter@val 0074  
                            ?_incrementor 005C               __size_of_initialise_buttons 0016  
                          ??_display_date 0073                                     ?_main 0070  
                          ??_display_temp 0073                                     ?_init 0070  
                         __end_of___lbdiv 1772                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0A54                           __end_of___lbmod 1795  
                    __end_of_delay_screen 16BB                           __end_of___lwdiv 0A09  
                         __end_of___lwmod 08F7                                     _PORTD 0008  
                                   _PORTE 0009                                     _TRISA 0085  
                                   _TRISB 0086                                     _TRISC 0087  
                                   _TRISD 0088                                     _TRISE 0089  
                           __CFG_PWRTE$ON 0000                                     _count 0029  
                                   _table 0068                                     _stats 0031  
                                   main@i 0066                            write_byte@temp 0076  
                     _set_lower_threshold 0007                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                     ??_set_beep_threshhold 0072  
                                   status 0003                      __size_of_decrementor 0024  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                         __initialization 07E8                              __end_of_main 0DAA  
                            __end_of_init 1629                     __end_of_date_settings 07E8  
                    ?_set_lower_threshold 0073                                    ??_main 007E  
                                  ??_init 0070                      incrementor@lower_val 005E  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 005C  
                        __end_of_lcd_init 17B8                          __end_of_get_temp 0C87  
                        __end_of_get_time 0895                                    _baifen 0054  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 16BB                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 1672  
                     _set_upper_threshold 0995                                    _table1 0020  
                         ___awmod@divisor 0070                                    _shifen 0055  
                                  _wanfen 0052                           ___awmod@counter 0075  
                    __size_of_display_day 00A3                              ?_time_read_1 0070  
                     time_write_1@time_tx 0074                             display_date@i 0075  
                        __end_of_set_time 0869                        reset_temp@presence 0075  
                        ___lbdiv@dividend 0072                      ?_set_upper_threshold 0073  
                         ___lbmod@divisor 0070                   __end_of__initialization 07FC  
                         ___lbmod@counter 0075                            ??_button_delay 0070  
            __size_of_time_date_delimiter 001B                      __end_of_display_date 0B80  
                    __end_of_display_temp 1751                            __pcstackCOMMON 0070  
                            __pidataBANK0 1631                     __size_of_delay_screen 0014  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                                __pbssBANK0 0020  
                            _delay_screen 16A7                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1663  
                              _delay_temp 1646                                __pmaintext 0C87  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0060  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 03D4                                 ?_get_time 0070  
                      __size_of_write_cmd 0017                                 ?_set_time 0070  
                    __size_of_reset_alarm 000D                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 16E5  
                _time_date_hex_terminator 1654                                   ___lbdiv 1751  
                                 ___awmod 0A09                                   ___lbmod 1772  
                         __size_of_delay2 0014                                   ___lwdiv 09CD  
                                 ___lwmod 08C5                                   _day_hex 004E  
                                 _day_low 0037                                   __ptext1 00EE  
                                 __ptext2 0DAA                                   __ptext3 17DC  
                                 __ptext4 0995                                   __ptext5 0007  
                                 __ptext6 1713                                   __ptext7 1639  
                                 __ptext8 1795                                   __ptext9 16CF  
                    __end_of_button_delay 16A7                                   delay2@i 0070  
                       __end_of_init_temp 1621                          ___awmod@dividend 0072  
                       __end_of_read_byte 092B                                   _qianfen 0053  
                    __size_of_time_read_1 0030                                   _lower_t 004A  
             __end_of_set_beep_threshhold 1730              set_upper_threshold@upper_val 0073  
                   __size_of_display_date 0096                                   clrloop0 162A  
                              ??_lcd_init 0073                                   _upper_t 004B  
                           ??_decrementor 007B                                ??_get_temp 005C  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 092B  
                              ??_set_time 0075                       _time_date_delimiter 0800  
                    decrementor@lower_val 005C                              _display_date 0AEA  
                            _display_temp 1730                         __end_of_write_cmd 1713  
                        ___lbmod@dividend 0074                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 0AEA  
                  __size_of_date_settings 0414                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                      decrementor@upper_val 005E  
                          ??_time_write_1 0070               __end_of_set_lower_threshold 004B  
                     __end_of_decrementor 1800                             ??_display_day 0075  
                          __end_of_delay2 16CF                                _write_char 16E5  
                              _write_byte 095F                            _var_night_high 002B  
                     start_initialization 07E8                             delay_screen@i 0070  
                     __size_of_delay_temp 000E                      __end_of_modulus_func 1682  
                   ??_time_date_delimiter 0072                              ?_ds1302_init 0070  
                             ?_reset_temp 0070                             ??_incrementor 007B  
                              init_fetch0 1682                                  ??_delay2 0070  
                   __size_of_button_delay 0014                             _date_settings 03D4  
                             __pdataBANK0 0068                                read_byte@i 0076  
                              read_byte@j 0045               __end_of_set_upper_threshold 09CD  
                     __end_of_display_day 00EE                                 ___latbits 0002  
                           __pcstackBANK0 005C                               _decrementor 17DC  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 1693  
                        ___lwdiv@dividend 0078                               _day_counter 0027  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                               ?_write_char 0070  
                             ?_write_byte 0070                       __end_of_incrementor 17DC  
                    __end_of_time_write_1 0841                        _initialise_buttons 16CF  
                         _day_of_week_var 0033                       __size_of_reset_temp 0034  
                        ___lwdiv@quotient 007B                                 _init_temp 161C  
                               _read_byte 08F7                              decrementor@z 0060  
                     ?_initialise_buttons 0070                                 clear_ram0 1629  
                           ??_reset_alarm 0070                              ??_delay_temp 0071  
                             _display_day 004B   __end_of_thermometer_threshhold_settings 1000  
__size_of_thermometer_threshhold_settings 0256         ??_thermometer_threshhold_settings 0061  
        ?_thermometer_threshhold_settings 0070           _thermometer_threshhold_settings 0DAA  
                    ??_initialise_buttons 0070                    __size_of_time_settings 02E6  
        thermometer_threshhold_settings@i 0064                             ??_time_read_1 0070  
                             write_char@x 0072                     __size_of_modulus_func 0010  
                               get_time@i 0076                               write_byte@i 0078  
                      __end_of_delay_temp 1654                                 _write_cmd 16FC  
                              ?_init_temp 0070                                ?_read_byte 0070  
                           _var_night_low 002D                           _buzzer_watcher1 0048  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 001D  
                     __size_of_write_byte 0036                           ??_date_settings 0061  
                    __size_of_ds1302_init 000F                               _incrementor 17B8  
                            _modulus_func 1672                       __end_of_reset_alarm 1646  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0035  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 161C                                  __ptext11 1621  
                                __ptext20 08C5                                  __ptext12 0869  
                                __ptext21 09CD                                  __ptext13 0895  
                                __ptext30 16FC                                  __ptext22 1772  
                                __ptext14 0B80                                  __ptext31 16E5  
                                __ptext23 1751                                  __ptext15 095F  
                                __ptext40 1693                                  __ptext32 16A7  
                                __ptext24 1663                                  __ptext16 092B  
                                __ptext33 1654                                  __ptext25 1730  
                                __ptext17 08F7                                  __ptext34 0800  
                                __ptext26 004B                                  __ptext18 1646  
                                __ptext35 0841                                  __ptext27 0AEA  
                                __ptext19 16BB                                  __ptext36 081B  
                                __ptext28 0A54                                  __ptext37 17B8  
                                __ptext29 03D4                                  __ptext38 1672  
                                __ptext39 0A09                       __end_of_time_read_1 08C5  
                              ?_write_cmd 0070                                  _lcd_init 1795  
                                _get_temp 0B80                                  _get_time 0869  
                           _time_settings 00EE          __end_of_time_date_hex_terminator 1663  
                           __size_of_main 0123                             __size_of_init 0008  
                           ?_delay_screen 0070                               _hrs_limiter 004D  
                               set_time@i 0075                              ??_reset_temp 0074  
                                _set_time 0841                                  _prev_hex 004C  
              time_date_delimiter@limiter 0071              __size_of_set_lower_threshold 0044  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 0096                            _buzzer_watcher 0049  
                             delay_temp@x 0072                               delay_temp@y 0070  
                             delay_temp@z 0073                            read_byte@value 0075  
             __end_of_time_date_delimiter 081B                                  init_ram0 1686  
                           button_delay@i 0070                               ??_init_temp 0070  
                      __end_of_reset_temp 095F                               ??_read_byte 0074  
                          ?_time_settings 0070                              ?_decrementor 005C  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 1639                              _time_write_1 081B  
                            ??_write_char 0072                              ??_write_byte 0074  
                              _OPTION_REG 0081                               _time_read_1 0895  
                            time_read_1@j 0072                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0075                               ??_write_cmd 0072  
            __size_of_set_upper_threshold 0038                             _display_clock 0A54  
                           time_write_1@j 0072                        __end_of_write_char 16FC  
                      __end_of_write_byte 0995  
