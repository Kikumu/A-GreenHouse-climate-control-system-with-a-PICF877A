

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Dec 10 22:00:43 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.10
    56                           ; Generated 31/07/2019 GMT
    57                           ; 
    58                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F877A Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0098                     	;# 
   258  0099                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  000E                     	;# 
   285  000F                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0013                     	;# 
   290  0014                     	;# 
   291  0015                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001D                     	;# 
   302  001E                     	;# 
   303  001F                     	;# 
   304  0081                     	;# 
   305  0085                     	;# 
   306  0086                     	;# 
   307  0087                     	;# 
   308  0088                     	;# 
   309  0089                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0000                     	;# 
   330  0001                     	;# 
   331  0002                     	;# 
   332  0003                     	;# 
   333  0004                     	;# 
   334  0005                     	;# 
   335  0006                     	;# 
   336  0007                     	;# 
   337  0008                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000D                     	;# 
   343  000E                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0014                     	;# 
   351  0015                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001D                     	;# 
   362  001E                     	;# 
   363  001F                     	;# 
   364  0081                     	;# 
   365  0085                     	;# 
   366  0086                     	;# 
   367  0087                     	;# 
   368  0088                     	;# 
   369  0089                     	;# 
   370  008C                     	;# 
   371  008D                     	;# 
   372  008E                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  000E                     	;# 
   405  000F                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001D                     	;# 
   422  001E                     	;# 
   423  001F                     	;# 
   424  0081                     	;# 
   425  0085                     	;# 
   426  0086                     	;# 
   427  0087                     	;# 
   428  0088                     	;# 
   429  0089                     	;# 
   430  008C                     	;# 
   431  008D                     	;# 
   432  008E                     	;# 
   433  0091                     	;# 
   434  0092                     	;# 
   435  0093                     	;# 
   436  0094                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000D                     	;# 
   463  000E                     	;# 
   464  000E                     	;# 
   465  000F                     	;# 
   466  0010                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0015                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001B                     	;# 
   480  001C                     	;# 
   481  001D                     	;# 
   482  001E                     	;# 
   483  001F                     	;# 
   484  0081                     	;# 
   485  0085                     	;# 
   486  0086                     	;# 
   487  0087                     	;# 
   488  0088                     	;# 
   489  0089                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009C                     	;# 
   500  009D                     	;# 
   501  009E                     	;# 
   502  009F                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  010F                     	;# 
   507  018C                     	;# 
   508  018D                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  000E                     	;# 
   525  000F                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0014                     	;# 
   531  0015                     	;# 
   532  0015                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001B                     	;# 
   540  001C                     	;# 
   541  001D                     	;# 
   542  001E                     	;# 
   543  001F                     	;# 
   544  0081                     	;# 
   545  0085                     	;# 
   546  0086                     	;# 
   547  0087                     	;# 
   548  0088                     	;# 
   549  0089                     	;# 
   550  008C                     	;# 
   551  008D                     	;# 
   552  008E                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0093                     	;# 
   556  0094                     	;# 
   557  0098                     	;# 
   558  0099                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  010F                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  000E                     	;# 
   585  000F                     	;# 
   586  0010                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0014                     	;# 
   591  0015                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0017                     	;# 
   595  0018                     	;# 
   596  0019                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  0081                     	;# 
   605  0085                     	;# 
   606  0086                     	;# 
   607  0087                     	;# 
   608  0088                     	;# 
   609  0089                     	;# 
   610  008C                     	;# 
   611  008D                     	;# 
   612  008E                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0094                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629                           
   630                           	psect	idataBANK0
   631  1633                     __pidataBANK0:	
   632                           
   633                           ;initializer for _table
   634  1633  3400               	retlw	0
   635  1634  3400               	retlw	0
   636  1635  3440               	retlw	64
   637  1636  3412               	retlw	18
   638  1637  3412               	retlw	18
   639  1638  3406               	retlw	6
   640  1639  3419               	retlw	25
   641  163A  3400               	retlw	0
   642  0009                     _PORTE	set	9
   643  0008                     _PORTD	set	8
   644  003E                     _RC6	set	62
   645  003F                     _RC7	set	63
   646  003C                     _RC4	set	60
   647  003B                     _RC3	set	59
   648  003A                     _RC2	set	58
   649  0039                     _RC1	set	57
   650  0038                     _RC0	set	56
   651  004A                     _RE2	set	74
   652  0034                     _RB4	set	52
   653  0031                     _RB1	set	49
   654  0035                     _RB5	set	53
   655  0030                     _RB0	set	48
   656  0048                     _RE0	set	72
   657  002B                     _RA3	set	43
   658  002C                     _RA4	set	44
   659  002D                     _RA5	set	45
   660  002A                     _RA2	set	42
   661  0028                     _RA0	set	40
   662  0087                     _TRISC	set	135
   663  0085                     _TRISA	set	133
   664  0089                     _TRISE	set	137
   665  0081                     _OPTION_REG	set	129
   666  0088                     _TRISD	set	136
   667  009F                     _ADCON1	set	159
   668  0086                     _TRISB	set	134
   669  0434                     _TRISB4	set	1076
   670  0448                     _TRISE0	set	1096
   671  0428                     _TRISA0	set	1064
   672                           
   673                           ; #config settings
   674  0000                     
   675                           	psect	cinit
   676  07E8                     start_initialization:	
   677  07E8                     __initialization:	
   678                           
   679                           ; Initialize objects allocated to BANK0
   680  07E8  1383               	bcf	3,7	;select IRP bank0
   681  07E9  306C               	movlw	low (__pdataBANK0+8)
   682  07EA  00FD               	movwf	btemp+-1
   683  07EB  3016               	movlw	high __pidataBANK0
   684  07EC  00FE               	movwf	btemp
   685  07ED  3033               	movlw	low __pidataBANK0
   686  07EE  00FF               	movwf	btemp+1
   687  07EF  3064               	movlw	low __pdataBANK0
   688  07F0  0084               	movwf	4
   689  07F1  160A  118A  2688  120A  118A  	fcall	init_ram0
   690                           
   691                           ; Clear objects allocated to BANK0
   692  07F6  3020               	movlw	low __pbssBANK0
   693  07F7  0084               	movwf	4
   694  07F8  3058               	movlw	low (__pbssBANK0+56)
   695  07F9  160A  118A  262B   	fcall	clear_ram0
   696  07FC                     end_of_initialization:	
   697                           ;End of C runtime variable initialization code
   698                           
   699  07FC                     __end_of__initialization:	
   700  07FC  0183               	clrf	3
   701  07FD  120A  158A  2C87   	ljmp	_main	;jump to C main() function
   702                           
   703                           	psect	bssBANK0
   704  0020                     __pbssBANK0:	
   705  0020                     _table1:	
   706  0020                     	ds	7
   707  0027                     _day_counter:	
   708  0027                     	ds	2
   709  0029                     _count:	
   710  0029                     	ds	2
   711  002B                     _p:	
   712  002B                     	ds	2
   713  002D                     _stats:	
   714  002D                     	ds	2
   715  002F                     _day_of_week_var:	
   716  002F                     	ds	2
   717  0031                     _day_high:	
   718  0031                     	ds	2
   719  0033                     _day_low:	
   720  0033                     	ds	2
   721  0035                     _z:	
   722  0035                     	ds	2
   723  0037                     _y:	
   724  0037                     	ds	2
   725  0039                     _x:	
   726  0039                     	ds	2
   727  003B                     _w:	
   728  003B                     	ds	2
   729  003D                     _t:	
   730  003D                     	ds	2
   731  003F                     _wd:	
   732  003F                     	ds	2
   733  0041                     read_byte@j:	
   734  0041                     	ds	1
   735  0042                     _var2:	
   736  0042                     	ds	1
   737  0043                     _var1:	
   738  0043                     	ds	1
   739  0044                     _buzzer_watcher1:	
   740  0044                     	ds	1
   741  0045                     _buzzer_watcher:	
   742  0045                     	ds	1
   743  0046                     _lower_t:	
   744  0046                     	ds	1
   745  0047                     _upper_t:	
   746  0047                     	ds	1
   747  0048                     _prev_hex:	
   748  0048                     	ds	1
   749  0049                     _hrs_limiter:	
   750  0049                     	ds	1
   751  004A                     _day_hex:	
   752  004A                     	ds	1
   753  004B                     _c:	
   754  004B                     	ds	1
   755  004C                     _b:	
   756  004C                     	ds	1
   757  004D                     _a:	
   758  004D                     	ds	1
   759  004E                     _wanfen:	
   760  004E                     	ds	1
   761  004F                     _qianfen:	
   762  004F                     	ds	1
   763  0050                     _baifen:	
   764  0050                     	ds	1
   765  0051                     _shifen:	
   766  0051                     	ds	1
   767  0052                     _ge:	
   768  0052                     	ds	1
   769  0053                     _shi:	
   770  0053                     	ds	1
   771  0054                     _TX:	
   772  0054                     	ds	1
   773  0055                     _TZ:	
   774  0055                     	ds	1
   775  0056                     _THV:	
   776  0056                     	ds	1
   777  0057                     _TLV:	
   778  0057                     	ds	1
   779                           
   780                           	psect	dataBANK0
   781  0064                     __pdataBANK0:	
   782  0064                     _table:	
   783  0064                     	ds	8
   784                           
   785                           	psect	inittext
   786  1684                     init_fetch0:	
   787                           ;	Called with low address in FSR and high address in W
   788                           
   789  1684  087E               	movf	126,w
   790  1685  008A               	movwf	10
   791  1686  087F               	movf	127,w
   792  1687  0082               	movwf	2
   793  1688                     init_ram0:	
   794                           ;Called with:
   795                           ;	high address of idata address in btemp 
   796                           ;	low address of idata address in btemp+1 
   797                           ;	low address of data in FSR
   798                           ;	high address + 1 of data in btemp-1
   799                           
   800  1688  2684  160A  118A   	fcall	init_fetch0
   801  168B  0080               	movwf	0
   802  168C  0A84               	incf	4,f
   803  168D  0804               	movf	4,w
   804  168E  067D               	xorwf	125,w
   805  168F  1903               	btfsc	3,2
   806  1690  3400               	retlw	0
   807  1691  0AFF               	incf	127,f
   808  1692  1903               	btfsc	3,2
   809  1693  0AFE               	incf	126,f
   810  1694  2E88               	goto	init_ram0
   811                           
   812                           	psect	clrtext
   813  162B                     clear_ram0:	
   814                           ;	Called with FSR containing the base address, and
   815                           ;	W with the last address+1
   816                           
   817  162B  0064               	clrwdt	;clear the watchdog before getting into this loop
   818  162C                     clrloop0:	
   819  162C  0180               	clrf	0	;clear RAM location pointed to by FSR
   820  162D  0A84               	incf	4,f	;increment pointer
   821  162E  0604               	xorwf	4,w	;XOR with final address
   822  162F  1903               	btfsc	3,2	;have we reached the end yet?
   823  1630  3400               	retlw	0	;all done for this memory range, return
   824  1631  0604               	xorwf	4,w	;XOR again to restore value
   825  1632  2E2C               	goto	clrloop0	;do the next byte
   826                           
   827                           	psect	cstackCOMMON
   828  0070                     __pcstackCOMMON:	
   829  0070                     ?_init_temp:	
   830  0070                     ??_init_temp:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_set_time:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_ds1302_init:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_init:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ??_init:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ?_lcd_init:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_initialise_buttons:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ??_initialise_buttons:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_get_temp:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_get_time:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_write_cmd:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ?_write_char:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?_display_temp:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ?_display_date:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ?_display_clock:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0070                     ?_thermometer_threshhold_settings:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0070                     ?_date_settings:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0070                     ?_time_settings:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0070                     ?_set_beep_threshhold:	
   885                           ; 1 bytes @ 0x0
   886                           
   887  0070                     ?_reset_alarm:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0070                     ??_reset_alarm:	
   891                           ; 1 bytes @ 0x0
   892                           
   893  0070                     ?_delay_screen:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0070                     ??_delay_screen:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0070                     ?_delay_temp:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0070                     ?_delay2:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0070                     ??_delay2:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0070                     ?_time_write_1:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0070                     ??_time_write_1:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0070                     ?_time_read_1:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0070                     ??_time_read_1:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0070                     ?_button_delay:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0070                     ??_button_delay:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0070                     ?_time_date_hex_terminator:	
   927                           ; 1 bytes @ 0x0
   928                           
   929  0070                     ?_time_date_delimiter:	
   930                           ; 1 bytes @ 0x0
   931                           
   932  0070                     ?_main:	
   933                           ; 1 bytes @ 0x0
   934                           
   935  0070                     ?_reset_temp:	
   936                           ; 1 bytes @ 0x0
   937                           
   938  0070                     ?_write_byte:	
   939                           ; 1 bytes @ 0x0
   940                           
   941  0070                     ?_read_byte:	
   942                           ; 1 bytes @ 0x0
   943                           
   944  0070                     ?___lbdiv:	
   945                           ; 1 bytes @ 0x0
   946                           
   947  0070                     ?___lbmod:	
   948                           ; 1 bytes @ 0x0
   949                           
   950  0070                     ?___awmod:	
   951                           ; 1 bytes @ 0x0
   952                           
   953  0070                     ?___lwmod:	
   954                           ; 2 bytes @ 0x0
   955                           
   956  0070                     delay_temp@y:	
   957                           ; 2 bytes @ 0x0
   958                           
   959  0070                     time_date_delimiter@hex:	
   960                           ; 1 bytes @ 0x0
   961                           
   962  0070                     time_date_hex_terminator@limiter:	
   963                           ; 1 bytes @ 0x0
   964                           
   965  0070                     ___lbdiv@divisor:	
   966                           ; 1 bytes @ 0x0
   967                           
   968  0070                     ___lbmod@divisor:	
   969                           ; 1 bytes @ 0x0
   970                           
   971  0070                     delay_screen@i:	
   972                           ; 1 bytes @ 0x0
   973                           
   974  0070                     delay2@i:	
   975                           ; 2 bytes @ 0x0
   976                           
   977  0070                     button_delay@i:	
   978                           ; 2 bytes @ 0x0
   979                           
   980  0070                     ___awmod@divisor:	
   981                           ; 2 bytes @ 0x0
   982                           
   983  0070                     ___lwmod@divisor:	
   984                           ; 2 bytes @ 0x0
   985                           
   986                           
   987                           ; 2 bytes @ 0x0
   988  0070                     	ds	1
   989  0071                     ??_delay_temp:	
   990  0071                     ??_time_date_hex_terminator:	
   991                           ; 1 bytes @ 0x1
   992                           
   993  0071                     ??___lbdiv:	
   994                           ; 1 bytes @ 0x1
   995                           
   996  0071                     ??___lbmod:	
   997                           ; 1 bytes @ 0x1
   998                           
   999  0071                     time_date_delimiter@limiter:	
  1000                           ; 1 bytes @ 0x1
  1001                           
  1002                           
  1003                           ; 1 bytes @ 0x1
  1004  0071                     	ds	1
  1005  0072                     ??_write_cmd:	
  1006  0072                     ??_write_char:	
  1007                           ; 1 bytes @ 0x2
  1008                           
  1009  0072                     ??_set_beep_threshhold:	
  1010                           ; 1 bytes @ 0x2
  1011                           
  1012  0072                     ??_time_date_delimiter:	
  1013                           ; 1 bytes @ 0x2
  1014                           
  1015  0072                     write_char@x:	
  1016                           ; 1 bytes @ 0x2
  1017                           
  1018  0072                     write_cmd@x:	
  1019                           ; 1 bytes @ 0x2
  1020                           
  1021  0072                     delay_temp@x:	
  1022                           ; 1 bytes @ 0x2
  1023                           
  1024  0072                     set_beep_threshhold@x:	
  1025                           ; 1 bytes @ 0x2
  1026                           
  1027  0072                     ___lbdiv@dividend:	
  1028                           ; 1 bytes @ 0x2
  1029                           
  1030  0072                     time_write_1@j:	
  1031                           ; 1 bytes @ 0x2
  1032                           
  1033  0072                     time_read_1@j:	
  1034                           ; 2 bytes @ 0x2
  1035                           
  1036  0072                     ___awmod@dividend:	
  1037                           ; 2 bytes @ 0x2
  1038                           
  1039  0072                     ___lwmod@dividend:	
  1040                           ; 2 bytes @ 0x2
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0x2
  1044  0072                     	ds	1
  1045  0073                     ??_lcd_init:	
  1046  0073                     ??_display_temp:	
  1047                           ; 1 bytes @ 0x3
  1048                           
  1049  0073                     ??_display_date:	
  1050                           ; 1 bytes @ 0x3
  1051                           
  1052  0073                     ??_display_clock:	
  1053                           ; 1 bytes @ 0x3
  1054                           
  1055  0073                     ?_set_lower_threshold:	
  1056                           ; 1 bytes @ 0x3
  1057                           
  1058  0073                     ?_set_upper_threshold:	
  1059                           ; 1 bytes @ 0x3
  1060                           
  1061  0073                     ?_display_day:	
  1062                           ; 1 bytes @ 0x3
  1063                           
  1064  0073                     delay_temp@z:	
  1065                           ; 1 bytes @ 0x3
  1066                           
  1067  0073                     time_date_hex_terminator@val:	
  1068                           ; 1 bytes @ 0x3
  1069                           
  1070  0073                     ___lbdiv@counter:	
  1071                           ; 1 bytes @ 0x3
  1072                           
  1073  0073                     set_upper_threshold@upper_val:	
  1074                           ; 1 bytes @ 0x3
  1075                           
  1076  0073                     set_lower_threshold@upper_val:	
  1077                           ; 2 bytes @ 0x3
  1078                           
  1079  0073                     display_day@num:	
  1080                           ; 2 bytes @ 0x3
  1081                           
  1082                           
  1083                           ; 2 bytes @ 0x3
  1084  0073                     	ds	1
  1085  0074                     ??_reset_temp:	
  1086  0074                     ??_write_byte:	
  1087                           ; 1 bytes @ 0x4
  1088                           
  1089  0074                     ??_read_byte:	
  1090                           ; 1 bytes @ 0x4
  1091                           
  1092  0074                     ??___awmod:	
  1093                           ; 1 bytes @ 0x4
  1094                           
  1095  0074                     ??___lwmod:	
  1096                           ; 1 bytes @ 0x4
  1097                           
  1098  0074                     time_write_1@time_tx:	
  1099                           ; 1 bytes @ 0x4
  1100                           
  1101  0074                     time_read_1@time_rx:	
  1102                           ; 1 bytes @ 0x4
  1103                           
  1104  0074                     time_date_delimiter@val:	
  1105                           ; 1 bytes @ 0x4
  1106                           
  1107  0074                     ___lbdiv@quotient:	
  1108                           ; 1 bytes @ 0x4
  1109                           
  1110  0074                     ___lbmod@dividend:	
  1111                           ; 1 bytes @ 0x4
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x4
  1115  0074                     	ds	1
  1116  0075                     ??_set_time:	
  1117  0075                     ??_ds1302_init:	
  1118                           ; 1 bytes @ 0x5
  1119                           
  1120  0075                     ??_get_time:	
  1121                           ; 1 bytes @ 0x5
  1122                           
  1123  0075                     ??_display_day:	
  1124                           ; 1 bytes @ 0x5
  1125                           
  1126  0075                     reset_temp@presence:	
  1127                           ; 1 bytes @ 0x5
  1128                           
  1129  0075                     read_byte@value:	
  1130                           ; 1 bytes @ 0x5
  1131                           
  1132  0075                     ___awmod@counter:	
  1133                           ; 1 bytes @ 0x5
  1134                           
  1135  0075                     ___lbmod@counter:	
  1136                           ; 1 bytes @ 0x5
  1137                           
  1138  0075                     ___lwmod@counter:	
  1139                           ; 1 bytes @ 0x5
  1140                           
  1141  0075                     set_time@i:	
  1142                           ; 1 bytes @ 0x5
  1143                           
  1144  0075                     display_clock@i:	
  1145                           ; 2 bytes @ 0x5
  1146                           
  1147  0075                     display_date@i:	
  1148                           ; 2 bytes @ 0x5
  1149                           
  1150  0075                     set_upper_threshold@lower_val:	
  1151                           ; 2 bytes @ 0x5
  1152                           
  1153  0075                     set_lower_threshold@lower_val:	
  1154                           ; 2 bytes @ 0x5
  1155                           
  1156                           
  1157                           ; 2 bytes @ 0x5
  1158  0075                     	ds	1
  1159  0076                     ?___lwdiv:	
  1160  0076                     write_byte@temp:	
  1161                           ; 2 bytes @ 0x6
  1162                           
  1163  0076                     read_byte@i:	
  1164                           ; 1 bytes @ 0x6
  1165                           
  1166  0076                     ___awmod@sign:	
  1167                           ; 1 bytes @ 0x6
  1168                           
  1169  0076                     ___lbmod@rem:	
  1170                           ; 1 bytes @ 0x6
  1171                           
  1172  0076                     get_time@i:	
  1173                           ; 1 bytes @ 0x6
  1174                           
  1175  0076                     ___lwdiv@divisor:	
  1176                           ; 2 bytes @ 0x6
  1177                           
  1178                           
  1179                           ; 2 bytes @ 0x6
  1180  0076                     	ds	1
  1181  0077                     ??_set_lower_threshold:	
  1182  0077                     ??_set_upper_threshold:	
  1183                           ; 1 bytes @ 0x7
  1184                           
  1185  0077                     ?_modulus_func:	
  1186                           ; 1 bytes @ 0x7
  1187                           
  1188  0077                     write_byte@val:	
  1189                           ; 2 bytes @ 0x7
  1190                           
  1191  0077                     modulus_func@x:	
  1192                           ; 1 bytes @ 0x7
  1193                           
  1194                           
  1195                           ; 2 bytes @ 0x7
  1196  0077                     	ds	1
  1197  0078                     write_byte@i:	
  1198  0078                     ___lwdiv@dividend:	
  1199                           ; 1 bytes @ 0x8
  1200                           
  1201                           
  1202                           ; 2 bytes @ 0x8
  1203  0078                     	ds	1
  1204  0079                     modulus_func@y:	
  1205                           
  1206                           ; 2 bytes @ 0x9
  1207  0079                     	ds	1
  1208  007A                     ??___lwdiv:	
  1209                           
  1210                           ; 1 bytes @ 0xA
  1211  007A                     	ds	1
  1212  007B                     ??_modulus_func:	
  1213  007B                     ??_incrementor:	
  1214                           ; 1 bytes @ 0xB
  1215                           
  1216  007B                     ??_decrementor:	
  1217                           ; 1 bytes @ 0xB
  1218                           
  1219  007B                     ___lwdiv@quotient:	
  1220                           ; 1 bytes @ 0xB
  1221                           
  1222                           
  1223                           ; 2 bytes @ 0xB
  1224  007B                     	ds	2
  1225  007D                     ___lwdiv@counter:	
  1226                           
  1227                           ; 1 bytes @ 0xD
  1228  007D                     	ds	1
  1229  007E                     ??_main:	
  1230                           
  1231                           	psect	cstackBANK0
  1232  0058                     __pcstackBANK0:	
  1233                           ; 1 bytes @ 0xE
  1234                           
  1235  0058                     ??_get_temp:	
  1236  0058                     ?_incrementor:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0058                     ?_decrementor:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0058                     incrementor@upper_val:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0058                     decrementor@lower_val:	
  1246                           ; 2 bytes @ 0x0
  1247                           
  1248                           
  1249                           ; 2 bytes @ 0x0
  1250  0058                     	ds	2
  1251  005A                     incrementor@lower_val:	
  1252  005A                     decrementor@upper_val:	
  1253                           ; 2 bytes @ 0x2
  1254                           
  1255                           
  1256                           ; 2 bytes @ 0x2
  1257  005A                     	ds	2
  1258  005C                     incrementor@z:	
  1259  005C                     decrementor@z:	
  1260                           ; 1 bytes @ 0x4
  1261                           
  1262                           
  1263                           ; 1 bytes @ 0x4
  1264  005C                     	ds	1
  1265  005D                     ??_thermometer_threshhold_settings:	
  1266  005D                     ??_date_settings:	
  1267                           ; 1 bytes @ 0x5
  1268                           
  1269  005D                     ??_time_settings:	
  1270                           ; 1 bytes @ 0x5
  1271                           
  1272                           
  1273                           ; 1 bytes @ 0x5
  1274  005D                     	ds	3
  1275  0060                     thermometer_threshhold_settings@i:	
  1276                           
  1277                           ; 2 bytes @ 0x8
  1278  0060                     	ds	2
  1279  0062                     main@i:	
  1280                           
  1281                           ; 2 bytes @ 0xA
  1282  0062                     	ds	2
  1283                           
  1284                           	psect	maintext
  1285  0C87                     __pmaintext:	
  1286 ;;
  1287 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1288 ;;
  1289 ;; *************** function _main *****************
  1290 ;; Defined at:
  1291 ;;		line 10 in file "mainLogic.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;  i               2   10[BANK0 ] int 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : B00/0
  1302 ;;		On exit  : 300/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1305 ;;      Params:         0       0       0       0       0
  1306 ;;      Locals:         0       2       0       0       0
  1307 ;;      Temps:          0       0       0       0       0
  1308 ;;      Totals:         0       2       0       0       0
  1309 ;;Total ram usage:        2 bytes
  1310 ;; Hardware stack levels required when called:    4
  1311 ;; This function calls:
  1312 ;;		_date_settings
  1313 ;;		_display_clock
  1314 ;;		_display_date
  1315 ;;		_display_day
  1316 ;;		_display_temp
  1317 ;;		_ds1302_init
  1318 ;;		_get_temp
  1319 ;;		_get_time
  1320 ;;		_init
  1321 ;;		_init_temp
  1322 ;;		_initialise_buttons
  1323 ;;		_lcd_init
  1324 ;;		_modulus_func
  1325 ;;		_reset_alarm
  1326 ;;		_set_beep_threshhold
  1327 ;;		_set_lower_threshold
  1328 ;;		_set_time
  1329 ;;		_set_upper_threshold
  1330 ;;		_thermometer_threshhold_settings
  1331 ;;		_time_settings
  1332 ;;		_write_char
  1333 ;;		_write_cmd
  1334 ;; This function is called by:
  1335 ;;		Startup code after reset
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function _main
  1341  0C87                     _main:	
  1342                           
  1343                           ;mainLogic.c: 11:     TRISB=0X02;
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1347  0C87  3002               	movlw	2
  1348  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  1349  0C89  0086               	movwf	6	;volatile
  1350                           
  1351                           ;mainLogic.c: 12:     init_temp();
  1352  0C8A  120A  118A  2004  120A  158A  	fcall	_init_temp
  1353                           
  1354                           ;mainLogic.c: 13:     set_time();
  1355  0C8F  120A  158A  2045  120A  158A  	fcall	_set_time
  1356                           
  1357                           ;mainLogic.c: 14:     ds1302_init();
  1358  0C94  160A  118A  2665  120A  158A  	fcall	_ds1302_init
  1359                           
  1360                           ;mainLogic.c: 16:     init();
  1361  0C99  160A  118A  2623  120A  158A  	fcall	_init
  1362                           
  1363                           ;mainLogic.c: 17:     lcd_init();
  1364  0C9E  160A  118A  2795  120A  158A  	fcall	_lcd_init
  1365                           
  1366                           ;mainLogic.c: 18:     init_temp();
  1367  0CA3  120A  118A  2004  120A  158A  	fcall	_init_temp
  1368                           
  1369                           ;mainLogic.c: 19:     initialise_buttons();
  1370  0CA8  160A  118A  26D1  120A  158A  	fcall	_initialise_buttons
  1371  0CAD                     l3979:	
  1372                           
  1373                           ;mainLogic.c: 24:     get_temp();
  1374  0CAD  120A  158A  2380  120A  158A  	fcall	_get_temp
  1375                           
  1376                           ;mainLogic.c: 25:     get_time();
  1377  0CB2  120A  158A  206D  120A  158A  	fcall	_get_time
  1378                           
  1379                           ;mainLogic.c: 26:     write_cmd(0x80);
  1380  0CB7  3080               	movlw	128
  1381  0CB8  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  1382                           
  1383                           ;mainLogic.c: 27:     write_char('T');
  1384  0CBD  3054               	movlw	84
  1385  0CBE  160A  118A  26E7  120A  158A  	fcall	_write_char
  1386                           
  1387                           ;mainLogic.c: 28:     write_char('e');
  1388  0CC3  3065               	movlw	101
  1389  0CC4  160A  118A  26E7  120A  158A  	fcall	_write_char
  1390                           
  1391                           ;mainLogic.c: 29:     write_char('m');
  1392  0CC9  306D               	movlw	109
  1393  0CCA  160A  118A  26E7  120A  158A  	fcall	_write_char
  1394                           
  1395                           ;mainLogic.c: 30:     write_char('p');
  1396  0CCF  3070               	movlw	112
  1397  0CD0  160A  118A  26E7  120A  158A  	fcall	_write_char
  1398                           
  1399                           ;mainLogic.c: 31:     write_char(':');
  1400  0CD5  303A               	movlw	58
  1401  0CD6  160A  118A  26E7  120A  158A  	fcall	_write_char
  1402                           
  1403                           ;mainLogic.c: 32:     display_temp();
  1404  0CDB  160A  118A  2730  120A  158A  	fcall	_display_temp
  1405                           
  1406                           ;mainLogic.c: 34:     write_cmd(0x90);
  1407  0CE0  3090               	movlw	144
  1408  0CE1  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  1409                           
  1410                           ;mainLogic.c: 35:     write_char('D');
  1411  0CE6  3044               	movlw	68
  1412  0CE7  160A  118A  26E7  120A  158A  	fcall	_write_char
  1413                           
  1414                           ;mainLogic.c: 36:     write_char('a');
  1415  0CEC  3061               	movlw	97
  1416  0CED  160A  118A  26E7  120A  158A  	fcall	_write_char
  1417                           
  1418                           ;mainLogic.c: 37:     write_char('t');
  1419  0CF2  3074               	movlw	116
  1420  0CF3  160A  118A  26E7  120A  158A  	fcall	_write_char
  1421                           
  1422                           ;mainLogic.c: 38:     write_char('e');
  1423  0CF8  3065               	movlw	101
  1424  0CF9  160A  118A  26E7  120A  158A  	fcall	_write_char
  1425                           
  1426                           ;mainLogic.c: 39:     write_char(':');
  1427  0CFE  303A               	movlw	58
  1428  0CFF  160A  118A  26E7  120A  158A  	fcall	_write_char
  1429                           
  1430                           ;mainLogic.c: 40:     write_char(' ');
  1431  0D04  3020               	movlw	32
  1432  0D05  160A  118A  26E7  120A  158A  	fcall	_write_char
  1433                           
  1434                           ;mainLogic.c: 42:     display_date();
  1435  0D0A  120A  158A  22EA  120A  158A  	fcall	_display_date
  1436                           
  1437                           ;mainLogic.c: 44:     write_cmd(0x88);
  1438  0D0F  3088               	movlw	136
  1439  0D10  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  1440                           
  1441                           ;mainLogic.c: 45:     write_char('T');
  1442  0D15  3054               	movlw	84
  1443  0D16  160A  118A  26E7  120A  158A  	fcall	_write_char
  1444                           
  1445                           ;mainLogic.c: 46:     write_char('i');
  1446  0D1B  3069               	movlw	105
  1447  0D1C  160A  118A  26E7  120A  158A  	fcall	_write_char
  1448                           
  1449                           ;mainLogic.c: 47:     write_char('m');
  1450  0D21  306D               	movlw	109
  1451  0D22  160A  118A  26E7  120A  158A  	fcall	_write_char
  1452                           
  1453                           ;mainLogic.c: 48:     write_char('e');
  1454  0D27  3065               	movlw	101
  1455  0D28  160A  118A  26E7  120A  158A  	fcall	_write_char
  1456                           
  1457                           ;mainLogic.c: 49:     write_char(':');
  1458  0D2D  303A               	movlw	58
  1459  0D2E  160A  118A  26E7  120A  158A  	fcall	_write_char
  1460                           
  1461                           ;mainLogic.c: 50:     display_clock();
  1462  0D33  120A  158A  2254  120A  158A  	fcall	_display_clock
  1463                           
  1464                           ;mainLogic.c: 51:     thermometer_threshhold_settings();
  1465  0D38  120A  158A  25AA  120A  158A  	fcall	_thermometer_threshhold_settings
  1466                           
  1467                           ;mainLogic.c: 52:     date_settings();
  1468  0D3D  120A  118A  23D4  120A  158A  	fcall	_date_settings
  1469                           
  1470                           ;mainLogic.c: 53:     time_settings();
  1471  0D42  120A  118A  20EE  120A  158A  	fcall	_time_settings
  1472                           
  1473                           ;mainLogic.c: 54:     write_cmd(0x98);
  1474  0D47  3098               	movlw	152
  1475  0D48  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  1476                           
  1477                           ;mainLogic.c: 55:     set_lower_threshold(2,7);
  1478  0D4D  3002               	movlw	2
  1479  0D4E  00F3               	movwf	set_lower_threshold@upper_val
  1480  0D4F  3000               	movlw	0
  1481  0D50  00F4               	movwf	set_lower_threshold@upper_val+1
  1482  0D51  3007               	movlw	7
  1483  0D52  00F5               	movwf	set_lower_threshold@lower_val
  1484  0D53  3000               	movlw	0
  1485  0D54  00F6               	movwf	set_lower_threshold@lower_val+1
  1486  0D55  120A  118A  2009  120A  158A  	fcall	_set_lower_threshold
  1487                           
  1488                           ;mainLogic.c: 56:     set_upper_threshold(2,7);
  1489  0D5A  3002               	movlw	2
  1490  0D5B  00F3               	movwf	set_upper_threshold@upper_val
  1491  0D5C  3000               	movlw	0
  1492  0D5D  00F4               	movwf	set_upper_threshold@upper_val+1
  1493  0D5E  3007               	movlw	7
  1494  0D5F  00F5               	movwf	set_upper_threshold@lower_val
  1495  0D60  3000               	movlw	0
  1496  0D61  00F6               	movwf	set_upper_threshold@lower_val+1
  1497  0D62  120A  158A  2163  120A  158A  	fcall	_set_upper_threshold
  1498                           
  1499                           ;mainLogic.c: 57:     set_beep_threshhold(buzzer_watcher);
  1500  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0D69  0845               	movf	_buzzer_watcher,w
  1503  0D6A  120A  158A  2002  120A  158A  	fcall	_set_beep_threshhold
  1504                           
  1505                           ;mainLogic.c: 58:     reset_alarm();
  1506  0D6F  160A  118A  263B  120A  158A  	fcall	_reset_alarm
  1507                           
  1508                           ;mainLogic.c: 59:     for(int i = 0; i < 7; i++)
  1509  0D74  01E2               	clrf	main@i
  1510  0D75  01E3               	clrf	main@i+1
  1511  0D76                     l4049:	
  1512                           
  1513                           ;mainLogic.c: 60:     write_char(' ');
  1514  0D76  3020               	movlw	32
  1515  0D77  160A  118A  26E7  120A  158A  	fcall	_write_char
  1516  0D7C  3001               	movlw	1
  1517  0D7D  07E2               	addwf	main@i,f
  1518  0D7E  1803               	skipnc
  1519  0D7F  0AE3               	incf	main@i+1,f
  1520  0D80  3000               	movlw	0
  1521  0D81  07E3               	addwf	main@i+1,f
  1522  0D82  0863               	movf	main@i+1,w
  1523  0D83  3A80               	xorlw	128
  1524  0D84  00FF               	movwf	127
  1525  0D85  3080               	movlw	128
  1526  0D86  027F               	subwf	127,w
  1527  0D87  1D03               	skipz
  1528  0D88  2D8B               	goto	u2845
  1529  0D89  3007               	movlw	7
  1530  0D8A  0262               	subwf	main@i,w
  1531  0D8B                     u2845:	
  1532  0D8B  1C03               	skipc
  1533  0D8C  2D76               	goto	l4049
  1534                           
  1535                           ;mainLogic.c: 61:     day_counter = modulus_func(day_low,8);
  1536  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1537  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1538  0D8F  0834               	movf	_day_low+1,w
  1539  0D90  00F8               	movwf	modulus_func@x+1
  1540  0D91  0833               	movf	_day_low,w
  1541  0D92  00F7               	movwf	modulus_func@x
  1542  0D93  3008               	movlw	8
  1543  0D94  00F9               	movwf	modulus_func@y
  1544  0D95  3000               	movlw	0
  1545  0D96  00FA               	movwf	modulus_func@y+1
  1546  0D97  160A  118A  2674  120A  158A  	fcall	_modulus_func
  1547  0D9C  0878               	movf	?_modulus_func+1,w
  1548  0D9D  00A8               	movwf	_day_counter+1
  1549  0D9E  0877               	movf	?_modulus_func,w
  1550  0D9F  00A7               	movwf	_day_counter
  1551                           
  1552                           ;mainLogic.c: 62:     display_day(day_counter);
  1553  0DA0  0828               	movf	_day_counter+1,w
  1554  0DA1  00F4               	movwf	display_day@num+1
  1555  0DA2  0827               	movf	_day_counter,w
  1556  0DA3  00F3               	movwf	display_day@num
  1557  0DA4  120A  118A  204B  120A  158A  	fcall	_display_day
  1558  0DA9  2CAD               	goto	l3979
  1559  0DAA                     __end_of_main:	
  1560                           
  1561                           	psect	text1
  1562  00EE                     __ptext1:	
  1563 ;; *************** function _time_settings *****************
  1564 ;; Defined at:
  1565 ;;		line 167 in file "Button_src.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;		None
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;		None
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 300/0
  1576 ;;		On exit  : 300/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1579 ;;      Params:         0       0       0       0       0
  1580 ;;      Locals:         0       0       0       0       0
  1581 ;;      Temps:          0       3       0       0       0
  1582 ;;      Totals:         0       3       0       0       0
  1583 ;;Total ram usage:        3 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    3
  1586 ;; This function calls:
  1587 ;;		_button_delay
  1588 ;;		_incrementor
  1589 ;;		_modulus_func
  1590 ;;		_set_time
  1591 ;;		_time_date_delimiter
  1592 ;;		_time_date_hex_terminator
  1593 ;;		_write_char
  1594 ;;		_write_cmd
  1595 ;; This function is called by:
  1596 ;;		_main
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           
  1601                           ;psect for function _time_settings
  1602  00EE                     _time_settings:	
  1603                           
  1604                           ;Button_src.c: 168:  RC0 = 1;
  1605                           
  1606                           ;incstack = 0
  1607                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1608  00EE  1407               	bsf	7,0	;volatile
  1609                           
  1610                           ;Button_src.c: 169:  RC1 = 1;
  1611  00EF  1487               	bsf	7,1	;volatile
  1612                           
  1613                           ;Button_src.c: 170:  RC2 = 0;
  1614  00F0  1107               	bcf	7,2	;volatile
  1615                           
  1616                           ;Button_src.c: 171:  RC3 = 1;
  1617  00F1  1587               	bsf	7,3	;volatile
  1618                           
  1619                           ;Button_src.c: 172:   if (RC4 == 0){
  1620  00F2  1A07               	btfsc	7,4	;volatile
  1621  00F3  0008               	return
  1622                           
  1623                           ;Button_src.c: 173:       write_cmd(0x1);
  1624  00F4  3001               	movlw	1
  1625  00F5  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  1626  00FA                     l551:	
  1627                           ;Button_src.c: 174:       for(;;){
  1628                           
  1629                           
  1630                           ;Button_src.c: 175:             write_cmd(0x80);
  1631  00FA  3080               	movlw	128
  1632  00FB  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  1633                           
  1634                           ;Button_src.c: 176:             write_char('T');
  1635  0100  3054               	movlw	84
  1636  0101  160A  118A  26E7  120A  118A  	fcall	_write_char
  1637                           
  1638                           ;Button_src.c: 177:             write_char('i');
  1639  0106  3069               	movlw	105
  1640  0107  160A  118A  26E7  120A  118A  	fcall	_write_char
  1641                           
  1642                           ;Button_src.c: 178:             write_char('m');
  1643  010C  306D               	movlw	109
  1644  010D  160A  118A  26E7  120A  118A  	fcall	_write_char
  1645                           
  1646                           ;Button_src.c: 179:             write_char('e');
  1647  0112  3065               	movlw	101
  1648  0113  160A  118A  26E7  120A  118A  	fcall	_write_char
  1649                           
  1650                           ;Button_src.c: 180:             write_char('_');
  1651  0118  305F               	movlw	95
  1652  0119  160A  118A  26E7  120A  118A  	fcall	_write_char
  1653                           
  1654                           ;Button_src.c: 181:             write_char('S');
  1655  011E  3053               	movlw	83
  1656  011F  160A  118A  26E7  120A  118A  	fcall	_write_char
  1657                           
  1658                           ;Button_src.c: 182:             write_char('e');
  1659  0124  3065               	movlw	101
  1660  0125  160A  118A  26E7  120A  118A  	fcall	_write_char
  1661                           
  1662                           ;Button_src.c: 183:             write_char('t');
  1663  012A  3074               	movlw	116
  1664  012B  160A  118A  26E7  120A  118A  	fcall	_write_char
  1665                           
  1666                           ;Button_src.c: 184:             write_char('t');
  1667  0130  3074               	movlw	116
  1668  0131  160A  118A  26E7  120A  118A  	fcall	_write_char
  1669                           
  1670                           ;Button_src.c: 185:             write_char('i');
  1671  0136  3069               	movlw	105
  1672  0137  160A  118A  26E7  120A  118A  	fcall	_write_char
  1673                           
  1674                           ;Button_src.c: 186:             write_char('n');
  1675  013C  306E               	movlw	110
  1676  013D  160A  118A  26E7  120A  118A  	fcall	_write_char
  1677                           
  1678                           ;Button_src.c: 187:             write_char('g');
  1679  0142  3067               	movlw	103
  1680  0143  160A  118A  26E7  120A  118A  	fcall	_write_char
  1681                           
  1682                           ;Button_src.c: 188:             write_char('s');
  1683  0148  3073               	movlw	115
  1684  0149  160A  118A  26E7  120A  118A  	fcall	_write_char
  1685                           
  1686                           ;Button_src.c: 190:             RC0 = 1;
  1687  014E  1407               	bsf	7,0	;volatile
  1688                           
  1689                           ;Button_src.c: 191:             RC1 = 0;
  1690  014F  1087               	bcf	7,1	;volatile
  1691                           
  1692                           ;Button_src.c: 192:             RC2 = 1;
  1693  0150  1507               	bsf	7,2	;volatile
  1694                           
  1695                           ;Button_src.c: 193:             RC3 = 1;
  1696  0151  1587               	bsf	7,3	;volatile
  1697                           
  1698                           ;Button_src.c: 195:             if(RC7 == 0 && b =='x'){
  1699  0152  1B87               	btfsc	7,7	;volatile
  1700  0153  29C5               	goto	l3741
  1701  0154  3078               	movlw	120
  1702  0155  064C               	xorwf	_b,w
  1703  0156  1D03               	btfss	3,2
  1704  0157  29C5               	goto	l3741
  1705                           
  1706                           ;Button_src.c: 196:                 if(stats == 1)
  1707  0158  032D               	decf	_stats,w
  1708  0159  042E               	iorwf	_stats+1,w
  1709  015A  1D03               	btfss	3,2
  1710  015B  2960               	goto	l553
  1711                           
  1712                           ;Button_src.c: 197:                    a++;
  1713  015C  3001               	movlw	1
  1714  015D  00DD               	movwf	??_time_settings
  1715  015E  085D               	movf	??_time_settings,w
  1716  015F  07CD               	addwf	_a,f
  1717  0160                     l553:	
  1718                           
  1719                           ;Button_src.c: 198:                 if(stats == 0){
  1720  0160  082D               	movf	_stats,w
  1721  0161  042E               	iorwf	_stats+1,w
  1722  0162  1D03               	btfss	3,2
  1723  0163  2968               	goto	l554
  1724                           
  1725                           ;Button_src.c: 199:                    stats = 1;
  1726  0164  3001               	movlw	1
  1727  0165  00AD               	movwf	_stats
  1728  0166  3000               	movlw	0
  1729  0167  00AE               	movwf	_stats+1
  1730  0168                     l554:	
  1731                           ;Button_src.c: 200:                 }
  1732                           
  1733                           
  1734                           ;Button_src.c: 202:                     x++ ;
  1735  0168  3001               	movlw	1
  1736  0169  07B9               	addwf	_x,f
  1737  016A  1803               	skipnc
  1738  016B  0ABA               	incf	_x+1,f
  1739  016C  3000               	movlw	0
  1740  016D  07BA               	addwf	_x+1,f
  1741                           
  1742                           ;Button_src.c: 203:                     x = modulus_func(x,10);
  1743  016E  083A               	movf	_x+1,w
  1744  016F  00F8               	movwf	modulus_func@x+1
  1745  0170  0839               	movf	_x,w
  1746  0171  00F7               	movwf	modulus_func@x
  1747  0172  300A               	movlw	10
  1748  0173  00F9               	movwf	modulus_func@y
  1749  0174  3000               	movlw	0
  1750  0175  00FA               	movwf	modulus_func@y+1
  1751  0176  160A  118A  2674  120A  118A  	fcall	_modulus_func
  1752  017B  0878               	movf	?_modulus_func+1,w
  1753  017C  00BA               	movwf	_x+1
  1754  017D  0877               	movf	?_modulus_func,w
  1755  017E  00B9               	movwf	_x
  1756                           
  1757                           ;Button_src.c: 204:                     if (p == 1){
  1758  017F  032B               	decf	_p,w
  1759  0180  042C               	iorwf	_p+1,w
  1760  0181  1D03               	btfss	3,2
  1761  0182  299C               	goto	l3727
  1762                           
  1763                           ;Button_src.c: 205:                         y = incrementor(y,x,'0');
  1764  0183  0838               	movf	_y+1,w
  1765  0184  00D9               	movwf	incrementor@upper_val+1
  1766  0185  0837               	movf	_y,w
  1767  0186  00D8               	movwf	incrementor@upper_val
  1768  0187  083A               	movf	_x+1,w
  1769  0188  00DB               	movwf	incrementor@lower_val+1
  1770  0189  0839               	movf	_x,w
  1771  018A  00DA               	movwf	incrementor@lower_val
  1772  018B  3030               	movlw	48
  1773  018C  00DD               	movwf	??_time_settings
  1774  018D  085D               	movf	??_time_settings,w
  1775  018E  00DC               	movwf	incrementor@z
  1776  018F  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1777  0194  00DE               	movwf	??_time_settings+1
  1778  0195  01DF               	clrf	??_time_settings+2
  1779  0196  085E               	movf	??_time_settings+1,w
  1780  0197  00B7               	movwf	_y
  1781  0198  085F               	movf	??_time_settings+2,w
  1782  0199  00B8               	movwf	_y+1
  1783                           
  1784                           ;Button_src.c: 206:                         p = 0;
  1785  019A  01AB               	clrf	_p
  1786  019B  01AC               	clrf	_p+1
  1787  019C                     l3727:	
  1788                           
  1789                           ;Button_src.c: 208:                     if (x == 9){
  1790  019C  3009               	movlw	9
  1791  019D  0639               	xorwf	_x,w
  1792  019E  043A               	iorwf	_x+1,w
  1793  019F  1D03               	btfss	3,2
  1794  01A0  29A5               	goto	l3731
  1795                           
  1796                           ;Button_src.c: 209:                         p = 1;
  1797  01A1  3001               	movlw	1
  1798  01A2  00AB               	movwf	_p
  1799  01A3  3000               	movlw	0
  1800  01A4  00AC               	movwf	_p+1
  1801  01A5                     l3731:	
  1802                           
  1803                           ;Button_src.c: 213:                     a = time_date_hex_terminator(a,'T');
  1804  01A5  3054               	movlw	84
  1805  01A6  00DD               	movwf	??_time_settings
  1806  01A7  085D               	movf	??_time_settings,w
  1807  01A8  00F0               	movwf	time_date_hex_terminator@limiter
  1808  01A9  084D               	movf	_a,w
  1809  01AA  160A  118A  2656  120A  118A  	fcall	_time_date_hex_terminator
  1810  01AF  00DE               	movwf	??_time_settings+1
  1811  01B0  085E               	movf	??_time_settings+1,w
  1812  01B1  00CD               	movwf	_a
  1813                           
  1814                           ;Button_src.c: 214:                     if(y == 2 && x == 4){
  1815  01B2  3002               	movlw	2
  1816  01B3  0637               	xorwf	_y,w
  1817  01B4  0438               	iorwf	_y+1,w
  1818  01B5  1D03               	btfss	3,2
  1819  01B6  29C0               	goto	l3739
  1820  01B7  3004               	movlw	4
  1821  01B8  0639               	xorwf	_x,w
  1822  01B9  043A               	iorwf	_x+1,w
  1823  01BA  1D03               	btfss	3,2
  1824  01BB  29C0               	goto	l3739
  1825                           
  1826                           ;Button_src.c: 215:                         x = 0;
  1827  01BC  01B9               	clrf	_x
  1828  01BD  01BA               	clrf	_x+1
  1829                           
  1830                           ;Button_src.c: 216:                         y = 0;
  1831  01BE  01B7               	clrf	_y
  1832  01BF  01B8               	clrf	_y+1
  1833  01C0                     l3739:	
  1834                           
  1835                           ;Button_src.c: 218:                     button_delay();
  1836  01C0  160A  118A  2695  120A  118A  	fcall	_button_delay
  1837  01C5                     l3741:	
  1838                           
  1839                           ;Button_src.c: 220:             if(RC7==0 && b == 'y'){
  1840  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1841  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1842  01C7  1B87               	btfsc	7,7	;volatile
  1843  01C8  2A43               	goto	l3775
  1844  01C9  3079               	movlw	121
  1845  01CA  064C               	xorwf	_b,w
  1846  01CB  1D03               	btfss	3,2
  1847  01CC  2A43               	goto	l3775
  1848                           
  1849                           ;Button_src.c: 221:                  if(stats == 1)
  1850  01CD  032D               	decf	_stats,w
  1851  01CE  042E               	iorwf	_stats+1,w
  1852  01CF  1D03               	btfss	3,2
  1853  01D0  29D5               	goto	l559
  1854                           
  1855                           ;Button_src.c: 222:                    c++;
  1856  01D1  3001               	movlw	1
  1857  01D2  00DD               	movwf	??_time_settings
  1858  01D3  085D               	movf	??_time_settings,w
  1859  01D4  07CB               	addwf	_c,f
  1860  01D5                     l559:	
  1861                           
  1862                           ;Button_src.c: 223:                 if(stats == 0){
  1863  01D5  082D               	movf	_stats,w
  1864  01D6  042E               	iorwf	_stats+1,w
  1865  01D7  1D03               	btfss	3,2
  1866  01D8  29DD               	goto	l560
  1867                           
  1868                           ;Button_src.c: 224:                     stats = 1;
  1869  01D9  3001               	movlw	1
  1870  01DA  00AD               	movwf	_stats
  1871  01DB  3000               	movlw	0
  1872  01DC  00AE               	movwf	_stats+1
  1873  01DD                     l560:	
  1874                           ;Button_src.c: 225:                 }
  1875                           
  1876                           
  1877                           ;Button_src.c: 227:                     t++;
  1878  01DD  3001               	movlw	1
  1879  01DE  07BD               	addwf	_t,f
  1880  01DF  1803               	skipnc
  1881  01E0  0ABE               	incf	_t+1,f
  1882  01E1  3000               	movlw	0
  1883  01E2  07BE               	addwf	_t+1,f
  1884                           
  1885                           ;Button_src.c: 228:                     t = modulus_func(t,10);
  1886  01E3  083E               	movf	_t+1,w
  1887  01E4  00F8               	movwf	modulus_func@x+1
  1888  01E5  083D               	movf	_t,w
  1889  01E6  00F7               	movwf	modulus_func@x
  1890  01E7  300A               	movlw	10
  1891  01E8  00F9               	movwf	modulus_func@y
  1892  01E9  3000               	movlw	0
  1893  01EA  00FA               	movwf	modulus_func@y+1
  1894  01EB  160A  118A  2674  120A  118A  	fcall	_modulus_func
  1895  01F0  0878               	movf	?_modulus_func+1,w
  1896  01F1  00BE               	movwf	_t+1
  1897  01F2  0877               	movf	?_modulus_func,w
  1898  01F3  00BD               	movwf	_t
  1899                           
  1900                           ;Button_src.c: 229:                       if (p == 1){
  1901  01F4  032B               	decf	_p,w
  1902  01F5  042C               	iorwf	_p+1,w
  1903  01F6  1D03               	btfss	3,2
  1904  01F7  2A11               	goto	l3759
  1905                           
  1906                           ;Button_src.c: 230:                         w = incrementor(w,t,'0');
  1907  01F8  083C               	movf	_w+1,w
  1908  01F9  00D9               	movwf	incrementor@upper_val+1
  1909  01FA  083B               	movf	_w,w
  1910  01FB  00D8               	movwf	incrementor@upper_val
  1911  01FC  083E               	movf	_t+1,w
  1912  01FD  00DB               	movwf	incrementor@lower_val+1
  1913  01FE  083D               	movf	_t,w
  1914  01FF  00DA               	movwf	incrementor@lower_val
  1915  0200  3030               	movlw	48
  1916  0201  00DD               	movwf	??_time_settings
  1917  0202  085D               	movf	??_time_settings,w
  1918  0203  00DC               	movwf	incrementor@z
  1919  0204  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1920  0209  00DE               	movwf	??_time_settings+1
  1921  020A  01DF               	clrf	??_time_settings+2
  1922  020B  085E               	movf	??_time_settings+1,w
  1923  020C  00BB               	movwf	_w
  1924  020D  085F               	movf	??_time_settings+2,w
  1925  020E  00BC               	movwf	_w+1
  1926                           
  1927                           ;Button_src.c: 231:                         p = 0;
  1928  020F  01AB               	clrf	_p
  1929  0210  01AC               	clrf	_p+1
  1930  0211                     l3759:	
  1931                           
  1932                           ;Button_src.c: 233:                     if (t == 9){
  1933  0211  3009               	movlw	9
  1934  0212  063D               	xorwf	_t,w
  1935  0213  043E               	iorwf	_t+1,w
  1936  0214  1D03               	btfss	3,2
  1937  0215  2A1A               	goto	l3763
  1938                           
  1939                           ;Button_src.c: 234:                         p = 1;
  1940  0216  3001               	movlw	1
  1941  0217  00AB               	movwf	_p
  1942  0218  3000               	movlw	0
  1943  0219  00AC               	movwf	_p+1
  1944  021A                     l3763:	
  1945                           
  1946                           ;Button_src.c: 236:                     w = incrementor(w,t,'9');
  1947  021A  083C               	movf	_w+1,w
  1948  021B  00D9               	movwf	incrementor@upper_val+1
  1949  021C  083B               	movf	_w,w
  1950  021D  00D8               	movwf	incrementor@upper_val
  1951  021E  083E               	movf	_t+1,w
  1952  021F  00DB               	movwf	incrementor@lower_val+1
  1953  0220  083D               	movf	_t,w
  1954  0221  00DA               	movwf	incrementor@lower_val
  1955  0222  3039               	movlw	57
  1956  0223  00DD               	movwf	??_time_settings
  1957  0224  085D               	movf	??_time_settings,w
  1958  0225  00DC               	movwf	incrementor@z
  1959  0226  160A  118A  27B8  120A  118A  	fcall	_incrementor
  1960  022B  00DE               	movwf	??_time_settings+1
  1961  022C  01DF               	clrf	??_time_settings+2
  1962  022D  085E               	movf	??_time_settings+1,w
  1963  022E  00BB               	movwf	_w
  1964  022F  085F               	movf	??_time_settings+2,w
  1965  0230  00BC               	movwf	_w+1
  1966                           
  1967                           ;Button_src.c: 237:                     if(c == (0x59 + 1)){
  1968  0231  305A               	movlw	90
  1969  0232  064B               	xorwf	_c,w
  1970  0233  1903               	btfsc	3,2
  1971                           
  1972                           ;Button_src.c: 238:                         c = 0x00;
  1973  0234  01CB               	clrf	_c
  1974                           
  1975                           ;Button_src.c: 240:                     if(w == 6){
  1976  0235  3006               	movlw	6
  1977  0236  063B               	xorwf	_w,w
  1978  0237  043C               	iorwf	_w+1,w
  1979  0238  1D03               	btfss	3,2
  1980  0239  2A3E               	goto	l3773
  1981                           
  1982                           ;Button_src.c: 241:                         w = 0;
  1983  023A  01BB               	clrf	_w
  1984  023B  01BC               	clrf	_w+1
  1985                           
  1986                           ;Button_src.c: 242:                         t = 0;
  1987  023C  01BD               	clrf	_t
  1988  023D  01BE               	clrf	_t+1
  1989  023E                     l3773:	
  1990                           
  1991                           ;Button_src.c: 244:                     button_delay();
  1992  023E  160A  118A  2695  120A  118A  	fcall	_button_delay
  1993  0243                     l3775:	
  1994                           
  1995                           ;Button_src.c: 247:              write_cmd(0x88);
  1996  0243  3088               	movlw	136
  1997  0244  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  1998                           
  1999                           ;Button_src.c: 248:                     table[2] = a;
  2000  0249  084D               	movf	_a,w
  2001  024A  00DD               	movwf	??_time_settings
  2002  024B  085D               	movf	??_time_settings,w
  2003  024C  00E6               	movwf	_table+2
  2004                           
  2005                           ;Button_src.c: 249:                     table[1] = c;
  2006  024D  084B               	movf	_c,w
  2007  024E  00DD               	movwf	??_time_settings
  2008  024F  085D               	movf	??_time_settings,w
  2009  0250  00E5               	movwf	_table+1
  2010                           
  2011                           ;Button_src.c: 254:                     a = time_date_delimiter(a,0x11,'9');
  2012  0251  3011               	movlw	17
  2013  0252  00DD               	movwf	??_time_settings
  2014  0253  085D               	movf	??_time_settings,w
  2015  0254  00F0               	movwf	time_date_delimiter@hex
  2016  0255  3039               	movlw	57
  2017  0256  00DE               	movwf	??_time_settings+1
  2018  0257  085E               	movf	??_time_settings+1,w
  2019  0258  00F1               	movwf	time_date_delimiter@limiter
  2020  0259  084D               	movf	_a,w
  2021  025A  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2022  025F  00DF               	movwf	??_time_settings+2
  2023  0260  085F               	movf	??_time_settings+2,w
  2024  0261  00CD               	movwf	_a
  2025                           
  2026                           ;Button_src.c: 255:                     a = time_date_delimiter(a,0x21,'J');
  2027  0262  3021               	movlw	33
  2028  0263  00DD               	movwf	??_time_settings
  2029  0264  085D               	movf	??_time_settings,w
  2030  0265  00F0               	movwf	time_date_delimiter@hex
  2031  0266  304A               	movlw	74
  2032  0267  00DE               	movwf	??_time_settings+1
  2033  0268  085E               	movf	??_time_settings+1,w
  2034  0269  00F1               	movwf	time_date_delimiter@limiter
  2035  026A  084D               	movf	_a,w
  2036  026B  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2037  0270  00DF               	movwf	??_time_settings+2
  2038  0271  085F               	movf	??_time_settings+2,w
  2039  0272  00CD               	movwf	_a
  2040                           
  2041                           ;Button_src.c: 257:                     c = time_date_delimiter(c,0x11,'9');
  2042  0273  3011               	movlw	17
  2043  0274  00DD               	movwf	??_time_settings
  2044  0275  085D               	movf	??_time_settings,w
  2045  0276  00F0               	movwf	time_date_delimiter@hex
  2046  0277  3039               	movlw	57
  2047  0278  00DE               	movwf	??_time_settings+1
  2048  0279  085E               	movf	??_time_settings+1,w
  2049  027A  00F1               	movwf	time_date_delimiter@limiter
  2050  027B  084B               	movf	_c,w
  2051  027C  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2052  0281  00DF               	movwf	??_time_settings+2
  2053  0282  085F               	movf	??_time_settings+2,w
  2054  0283  00CB               	movwf	_c
  2055                           
  2056                           ;Button_src.c: 258:                     c = time_date_delimiter(c,0x21,'J');
  2057  0284  3021               	movlw	33
  2058  0285  00DD               	movwf	??_time_settings
  2059  0286  085D               	movf	??_time_settings,w
  2060  0287  00F0               	movwf	time_date_delimiter@hex
  2061  0288  304A               	movlw	74
  2062  0289  00DE               	movwf	??_time_settings+1
  2063  028A  085E               	movf	??_time_settings+1,w
  2064  028B  00F1               	movwf	time_date_delimiter@limiter
  2065  028C  084B               	movf	_c,w
  2066  028D  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2067  0292  00DF               	movwf	??_time_settings+2
  2068  0293  085F               	movf	??_time_settings+2,w
  2069  0294  00CB               	movwf	_c
  2070                           
  2071                           ;Button_src.c: 259:                     c = time_date_delimiter(c,0x31,'Y');
  2072  0295  3031               	movlw	49
  2073  0296  00DD               	movwf	??_time_settings
  2074  0297  085D               	movf	??_time_settings,w
  2075  0298  00F0               	movwf	time_date_delimiter@hex
  2076  0299  3059               	movlw	89
  2077  029A  00DE               	movwf	??_time_settings+1
  2078  029B  085E               	movf	??_time_settings+1,w
  2079  029C  00F1               	movwf	time_date_delimiter@limiter
  2080  029D  084B               	movf	_c,w
  2081  029E  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2082  02A3  00DF               	movwf	??_time_settings+2
  2083  02A4  085F               	movf	??_time_settings+2,w
  2084  02A5  00CB               	movwf	_c
  2085                           
  2086                           ;Button_src.c: 260:                     c = time_date_delimiter(c,0x41,'j');
  2087  02A6  3041               	movlw	65
  2088  02A7  00DD               	movwf	??_time_settings
  2089  02A8  085D               	movf	??_time_settings,w
  2090  02A9  00F0               	movwf	time_date_delimiter@hex
  2091  02AA  306A               	movlw	106
  2092  02AB  00DE               	movwf	??_time_settings+1
  2093  02AC  085E               	movf	??_time_settings+1,w
  2094  02AD  00F1               	movwf	time_date_delimiter@limiter
  2095  02AE  084B               	movf	_c,w
  2096  02AF  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2097  02B4  00DF               	movwf	??_time_settings+2
  2098  02B5  085F               	movf	??_time_settings+2,w
  2099  02B6  00CB               	movwf	_c
  2100                           
  2101                           ;Button_src.c: 261:                     c = time_date_delimiter(c,0x51,'z');
  2102  02B7  3051               	movlw	81
  2103  02B8  00DD               	movwf	??_time_settings
  2104  02B9  085D               	movf	??_time_settings,w
  2105  02BA  00F0               	movwf	time_date_delimiter@hex
  2106  02BB  307A               	movlw	122
  2107  02BC  00DE               	movwf	??_time_settings+1
  2108  02BD  085E               	movf	??_time_settings+1,w
  2109  02BE  00F1               	movwf	time_date_delimiter@limiter
  2110  02BF  084B               	movf	_c,w
  2111  02C0  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  2112  02C5  00DF               	movwf	??_time_settings+2
  2113  02C6  085F               	movf	??_time_settings+2,w
  2114  02C7  00CB               	movwf	_c
  2115                           
  2116                           ;Button_src.c: 263:                   RC0 = 0;
  2117  02C8  1007               	bcf	7,0	;volatile
  2118                           
  2119                           ;Button_src.c: 264:                   RC1 = 1;
  2120  02C9  1487               	bsf	7,1	;volatile
  2121                           
  2122                           ;Button_src.c: 265:                   RC2 = 1;
  2123  02CA  1507               	bsf	7,2	;volatile
  2124                           
  2125                           ;Button_src.c: 266:                   RC3 = 1;
  2126  02CB  1587               	bsf	7,3	;volatile
  2127                           
  2128                           ;Button_src.c: 267:                     if (RC6 == 0 ){
  2129  02CC  1B07               	btfsc	7,6	;volatile
  2130  02CD  2AE2               	goto	l565
  2131                           
  2132                           ;Button_src.c: 268:                           write_cmd(0x1);
  2133  02CE  3001               	movlw	1
  2134  02CF  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  2135                           
  2136                           ;Button_src.c: 269:                           a = 0x00;
  2137  02D4  01CD               	clrf	_a
  2138                           
  2139                           ;Button_src.c: 270:                           c = 0x00;
  2140  02D5  01CB               	clrf	_c
  2141                           
  2142                           ;Button_src.c: 271:                           x = 0;
  2143  02D6  01B9               	clrf	_x
  2144  02D7  01BA               	clrf	_x+1
  2145                           
  2146                           ;Button_src.c: 272:                           y = 0;
  2147  02D8  01B7               	clrf	_y
  2148  02D9  01B8               	clrf	_y+1
  2149                           
  2150                           ;Button_src.c: 273:                           w = 0;
  2151  02DA  01BB               	clrf	_w
  2152  02DB  01BC               	clrf	_w+1
  2153                           
  2154                           ;Button_src.c: 274:                           t = 0;
  2155  02DC  01BD               	clrf	_t
  2156  02DD  01BE               	clrf	_t+1
  2157                           
  2158                           ;Button_src.c: 275:                           set_time();
  2159  02DE  120A  158A  2045   	fcall	_set_time
  2160  02E1  0008               	return
  2161  02E2                     l565:	
  2162                           ;Button_src.c: 277:                             }
  2163                           
  2164                           
  2165                           ;Button_src.c: 278:                   RC0 = 1;
  2166  02E2  1407               	bsf	7,0	;volatile
  2167                           
  2168                           ;Button_src.c: 279:                   RC1 = 1;
  2169  02E3  1487               	bsf	7,1	;volatile
  2170                           
  2171                           ;Button_src.c: 280:                   RC2 = 0;
  2172  02E4  1107               	bcf	7,2	;volatile
  2173                           
  2174                           ;Button_src.c: 281:                   RC3 = 1;
  2175  02E5  1587               	bsf	7,3	;volatile
  2176                           
  2177                           ;Button_src.c: 282:                   z = modulus_func(z,2);
  2178  02E6  0836               	movf	_z+1,w
  2179  02E7  00F8               	movwf	modulus_func@x+1
  2180  02E8  0835               	movf	_z,w
  2181  02E9  00F7               	movwf	modulus_func@x
  2182  02EA  3002               	movlw	2
  2183  02EB  00F9               	movwf	modulus_func@y
  2184  02EC  3000               	movlw	0
  2185  02ED  00FA               	movwf	modulus_func@y+1
  2186  02EE  160A  118A  2674  120A  118A  	fcall	_modulus_func
  2187  02F3  0878               	movf	?_modulus_func+1,w
  2188  02F4  00B6               	movwf	_z+1
  2189  02F5  0877               	movf	?_modulus_func,w
  2190  02F6  00B5               	movwf	_z
  2191                           
  2192                           ;Button_src.c: 283:                   if(RC4 == 0 && z ==0){
  2193  02F7  1A07               	btfsc	7,4	;volatile
  2194  02F8  2B32               	goto	l3835
  2195  02F9  0835               	movf	_z,w
  2196  02FA  0436               	iorwf	_z+1,w
  2197  02FB  1D03               	btfss	3,2
  2198  02FC  2B32               	goto	l3835
  2199                           
  2200                           ;Button_src.c: 284:                       write_cmd(0x90);
  2201  02FD  3090               	movlw	144
  2202  02FE  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  2203                           
  2204                           ;Button_src.c: 285:                       write_char('H');
  2205  0303  3048               	movlw	72
  2206  0304  160A  118A  26E7  120A  118A  	fcall	_write_char
  2207                           
  2208                           ;Button_src.c: 286:                       write_char('o');
  2209  0309  306F               	movlw	111
  2210  030A  160A  118A  26E7  120A  118A  	fcall	_write_char
  2211                           
  2212                           ;Button_src.c: 287:                       write_char('u');
  2213  030F  3075               	movlw	117
  2214  0310  160A  118A  26E7  120A  118A  	fcall	_write_char
  2215                           
  2216                           ;Button_src.c: 288:                       write_char('r');
  2217  0315  3072               	movlw	114
  2218  0316  160A  118A  26E7  120A  118A  	fcall	_write_char
  2219                           
  2220                           ;Button_src.c: 289:                       write_char(':');
  2221  031B  303A               	movlw	58
  2222  031C  160A  118A  26E7  120A  118A  	fcall	_write_char
  2223                           
  2224                           ;Button_src.c: 290:                       b = 'x';
  2225  0321  3078               	movlw	120
  2226  0322  00DD               	movwf	??_time_settings
  2227  0323  085D               	movf	??_time_settings,w
  2228  0324  00CC               	movwf	_b
  2229                           
  2230                           ;Button_src.c: 291:                       button_delay();
  2231  0325  160A  118A  2695  120A  118A  	fcall	_button_delay
  2232                           
  2233                           ;Button_src.c: 292:                       z++;
  2234  032A  3001               	movlw	1
  2235  032B  1283               	bcf	3,5	;RP0=0, select bank0
  2236  032C  1303               	bcf	3,6	;RP1=0, select bank0
  2237  032D  07B5               	addwf	_z,f
  2238  032E  1803               	skipnc
  2239  032F  0AB6               	incf	_z+1,f
  2240  0330  3000               	movlw	0
  2241  0331  07B6               	addwf	_z+1,f
  2242  0332                     l3835:	
  2243                           
  2244                           ;Button_src.c: 294:                   RC0 = 1;
  2245  0332  1407               	bsf	7,0	;volatile
  2246                           
  2247                           ;Button_src.c: 295:                   RC1 = 1;
  2248  0333  1487               	bsf	7,1	;volatile
  2249                           
  2250                           ;Button_src.c: 296:                   RC2 = 0;
  2251  0334  1107               	bcf	7,2	;volatile
  2252                           
  2253                           ;Button_src.c: 297:                   RC3 = 1;
  2254  0335  1587               	bsf	7,3	;volatile
  2255                           
  2256                           ;Button_src.c: 299:                   if(RC4 == 0&& z ==1){
  2257  0336  1A07               	btfsc	7,4	;volatile
  2258  0337  2B6F               	goto	l568
  2259  0338  0335               	decf	_z,w
  2260  0339  0436               	iorwf	_z+1,w
  2261  033A  1D03               	btfss	3,2
  2262  033B  2B6F               	goto	l568
  2263                           
  2264                           ;Button_src.c: 300:                     z++;
  2265  033C  3001               	movlw	1
  2266  033D  07B5               	addwf	_z,f
  2267  033E  1803               	skipnc
  2268  033F  0AB6               	incf	_z+1,f
  2269  0340  3000               	movlw	0
  2270  0341  07B6               	addwf	_z+1,f
  2271                           
  2272                           ;Button_src.c: 301:                     button_delay();
  2273  0342  160A  118A  2695  120A  118A  	fcall	_button_delay
  2274                           
  2275                           ;Button_src.c: 302:                     write_cmd(0x90);
  2276  0347  3090               	movlw	144
  2277  0348  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  2278                           
  2279                           ;Button_src.c: 303:                     write_char('M');
  2280  034D  304D               	movlw	77
  2281  034E  160A  118A  26E7  120A  118A  	fcall	_write_char
  2282                           
  2283                           ;Button_src.c: 304:                     write_char('i');
  2284  0353  3069               	movlw	105
  2285  0354  160A  118A  26E7  120A  118A  	fcall	_write_char
  2286                           
  2287                           ;Button_src.c: 305:                     write_char('n');
  2288  0359  306E               	movlw	110
  2289  035A  160A  118A  26E7  120A  118A  	fcall	_write_char
  2290                           
  2291                           ;Button_src.c: 306:                     write_char('s');
  2292  035F  3073               	movlw	115
  2293  0360  160A  118A  26E7  120A  118A  	fcall	_write_char
  2294                           
  2295                           ;Button_src.c: 307:                     write_char(':');
  2296  0365  303A               	movlw	58
  2297  0366  160A  118A  26E7  120A  118A  	fcall	_write_char
  2298                           
  2299                           ;Button_src.c: 308:                     b = 'y';
  2300  036B  3079               	movlw	121
  2301  036C  00DD               	movwf	??_time_settings
  2302  036D  085D               	movf	??_time_settings,w
  2303  036E  00CC               	movwf	_b
  2304  036F                     l568:	
  2305                           ;Button_src.c: 309:                   }
  2306                           
  2307                           
  2308                           ;Button_src.c: 310:                    write_cmd(0x88);
  2309  036F  3088               	movlw	136
  2310  0370  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  2311                           
  2312                           ;Button_src.c: 317:                   RC0 = 1;
  2313  0375  1407               	bsf	7,0	;volatile
  2314                           
  2315                           ;Button_src.c: 318:                   RC1 = 1;
  2316  0376  1487               	bsf	7,1	;volatile
  2317                           
  2318                           ;Button_src.c: 319:                   RC2 = 0;
  2319  0377  1107               	bcf	7,2	;volatile
  2320                           
  2321                           ;Button_src.c: 320:                   RC3 = 1;
  2322  0378  1587               	bsf	7,3	;volatile
  2323                           
  2324                           ;Button_src.c: 322:              write_cmd(0x88);
  2325  0379  3088               	movlw	136
  2326  037A  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  2327                           
  2328                           ;Button_src.c: 323:              write_char('T');
  2329  037F  3054               	movlw	84
  2330  0380  160A  118A  26E7  120A  118A  	fcall	_write_char
  2331                           
  2332                           ;Button_src.c: 324:              write_char('i');
  2333  0385  3069               	movlw	105
  2334  0386  160A  118A  26E7  120A  118A  	fcall	_write_char
  2335                           
  2336                           ;Button_src.c: 325:              write_char('m');
  2337  038B  306D               	movlw	109
  2338  038C  160A  118A  26E7  120A  118A  	fcall	_write_char
  2339                           
  2340                           ;Button_src.c: 326:              write_char('e');
  2341  0391  3065               	movlw	101
  2342  0392  160A  118A  26E7  120A  118A  	fcall	_write_char
  2343                           
  2344                           ;Button_src.c: 327:              write_char(':');
  2345  0397  303A               	movlw	58
  2346  0398  160A  118A  26E7  120A  118A  	fcall	_write_char
  2347                           
  2348                           ;Button_src.c: 328:              write_char(y + '0');
  2349  039D  0837               	movf	_y,w
  2350  039E  3E30               	addlw	48
  2351  039F  160A  118A  26E7  120A  118A  	fcall	_write_char
  2352                           
  2353                           ;Button_src.c: 329:              write_char(x + '0');
  2354  03A4  0839               	movf	_x,w
  2355  03A5  3E30               	addlw	48
  2356  03A6  160A  118A  26E7  120A  118A  	fcall	_write_char
  2357                           
  2358                           ;Button_src.c: 330:              write_char(':');
  2359  03AB  303A               	movlw	58
  2360  03AC  160A  118A  26E7  120A  118A  	fcall	_write_char
  2361                           
  2362                           ;Button_src.c: 331:              write_char(w + '0');
  2363  03B1  083B               	movf	_w,w
  2364  03B2  3E30               	addlw	48
  2365  03B3  160A  118A  26E7  120A  118A  	fcall	_write_char
  2366                           
  2367                           ;Button_src.c: 332:              write_char(t + '0');
  2368  03B8  083D               	movf	_t,w
  2369  03B9  3E30               	addlw	48
  2370  03BA  160A  118A  26E7  120A  118A  	fcall	_write_char
  2371                           
  2372                           ;Button_src.c: 334:             RC0 = 0;
  2373  03BF  1007               	bcf	7,0	;volatile
  2374                           
  2375                           ;Button_src.c: 335:             RC1 = 1;
  2376  03C0  1487               	bsf	7,1	;volatile
  2377                           
  2378                           ;Button_src.c: 336:             RC2 = 1;
  2379  03C1  1507               	bsf	7,2	;volatile
  2380                           
  2381                           ;Button_src.c: 337:             RC3 = 1;
  2382  03C2  1587               	bsf	7,3	;volatile
  2383                           
  2384                           ;Button_src.c: 338:             if (RC7 == 0 ){
  2385  03C3  1B87               	btfsc	7,7	;volatile
  2386  03C4  28FA               	goto	l551
  2387                           
  2388                           ;Button_src.c: 339:             a = 0x00;
  2389  03C5  01CD               	clrf	_a
  2390                           
  2391                           ;Button_src.c: 340:             c = 0x00;
  2392  03C6  01CB               	clrf	_c
  2393                           
  2394                           ;Button_src.c: 341:             x = 0;
  2395  03C7  01B9               	clrf	_x
  2396  03C8  01BA               	clrf	_x+1
  2397                           
  2398                           ;Button_src.c: 342:             y = 0;
  2399  03C9  01B7               	clrf	_y
  2400  03CA  01B8               	clrf	_y+1
  2401                           
  2402                           ;Button_src.c: 343:             w = 0;
  2403  03CB  01BB               	clrf	_w
  2404  03CC  01BC               	clrf	_w+1
  2405                           
  2406                           ;Button_src.c: 344:             t = 0;
  2407  03CD  01BD               	clrf	_t
  2408  03CE  01BE               	clrf	_t+1
  2409                           
  2410                           ;Button_src.c: 345:             write_cmd(0x1);
  2411  03CF  3001               	movlw	1
  2412  03D0  160A  118A  26FE   	fcall	_write_cmd
  2413                           
  2414                           ;Button_src.c: 346:             break;
  2415  03D3  0008               	return
  2416  03D4                     __end_of_time_settings:	
  2417                           
  2418                           	psect	text2
  2419  0DAA                     __ptext2:	
  2420 ;; *************** function _thermometer_threshhold_settings *****************
  2421 ;; Defined at:
  2422 ;;		line 23 in file "Button_src.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  i               2    8[BANK0 ] int 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 300/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2436 ;;      Params:         0       0       0       0       0
  2437 ;;      Locals:         0       2       0       0       0
  2438 ;;      Temps:          0       3       0       0       0
  2439 ;;      Totals:         0       5       0       0       0
  2440 ;;Total ram usage:        5 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    3
  2443 ;; This function calls:
  2444 ;;		_button_delay
  2445 ;;		_decrementor
  2446 ;;		_incrementor
  2447 ;;		_modulus_func
  2448 ;;		_write_char
  2449 ;;		_write_cmd
  2450 ;; This function is called by:
  2451 ;;		_main
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _thermometer_threshhold_settings
  2457  0DAA                     _thermometer_threshhold_settings:	
  2458                           
  2459                           ;Button_src.c: 24:  RC0 = 1;
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2463  0DAA  1407               	bsf	7,0	;volatile
  2464                           
  2465                           ;Button_src.c: 25:  RC1 = 0;
  2466  0DAB  1087               	bcf	7,1	;volatile
  2467                           
  2468                           ;Button_src.c: 26:  RC2 = 1;
  2469  0DAC  1507               	bsf	7,2	;volatile
  2470                           
  2471                           ;Button_src.c: 27:  RC3 = 1;
  2472  0DAD  1587               	bsf	7,3	;volatile
  2473                           
  2474                           ;Button_src.c: 28:   if (RC4 == 0){
  2475  0DAE  1A07               	btfsc	7,4	;volatile
  2476  0DAF  0008               	return
  2477                           
  2478                           ;Button_src.c: 29:       write_cmd(0x1);
  2479  0DB0  3001               	movlw	1
  2480  0DB1  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2481                           
  2482                           ;Button_src.c: 31:             write_cmd(0x80);
  2483                           
  2484                           ;Button_src.c: 30:       for(;;){
  2485  0DB6  3080               	movlw	128
  2486  0DB7  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2487                           
  2488                           ;Button_src.c: 32:             write_char('t');
  2489  0DBC  3074               	movlw	116
  2490  0DBD  160A  118A  26E7  120A  158A  	fcall	_write_char
  2491                           
  2492                           ;Button_src.c: 33:             write_char('h');
  2493  0DC2  3068               	movlw	104
  2494  0DC3  160A  118A  26E7  120A  158A  	fcall	_write_char
  2495                           
  2496                           ;Button_src.c: 34:             write_char('r');
  2497  0DC8  3072               	movlw	114
  2498  0DC9  160A  118A  26E7  120A  158A  	fcall	_write_char
  2499                           
  2500                           ;Button_src.c: 35:             write_char('e');
  2501  0DCE  3065               	movlw	101
  2502  0DCF  160A  118A  26E7  120A  158A  	fcall	_write_char
  2503                           
  2504                           ;Button_src.c: 36:             write_char('s');
  2505  0DD4  3073               	movlw	115
  2506  0DD5  160A  118A  26E7  120A  158A  	fcall	_write_char
  2507                           
  2508                           ;Button_src.c: 37:             write_char('h');
  2509  0DDA  3068               	movlw	104
  2510  0DDB  160A  118A  26E7  120A  158A  	fcall	_write_char
  2511                           
  2512                           ;Button_src.c: 38:             write_char('o');
  2513  0DE0  306F               	movlw	111
  2514  0DE1  160A  118A  26E7  120A  158A  	fcall	_write_char
  2515                           
  2516                           ;Button_src.c: 39:             write_char('l');
  2517  0DE6  306C               	movlw	108
  2518  0DE7  160A  118A  26E7  120A  158A  	fcall	_write_char
  2519                           
  2520                           ;Button_src.c: 40:             write_char('d');
  2521  0DEC  3064               	movlw	100
  2522  0DED  160A  118A  26E7  120A  158A  	fcall	_write_char
  2523                           
  2524                           ;Button_src.c: 42:             write_cmd(0x90);
  2525  0DF2  3090               	movlw	144
  2526  0DF3  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2527                           
  2528                           ;Button_src.c: 43:             write_char('C');
  2529  0DF8  3043               	movlw	67
  2530  0DF9  160A  118A  26E7  120A  158A  	fcall	_write_char
  2531                           
  2532                           ;Button_src.c: 44:             write_char('u');
  2533  0DFE  3075               	movlw	117
  2534  0DFF  160A  118A  26E7  120A  158A  	fcall	_write_char
  2535                           
  2536                           ;Button_src.c: 45:             write_char('r');
  2537  0E04  3072               	movlw	114
  2538  0E05  160A  118A  26E7  120A  158A  	fcall	_write_char
  2539                           
  2540                           ;Button_src.c: 46:             write_char('r');
  2541  0E0A  3072               	movlw	114
  2542  0E0B  160A  118A  26E7  120A  158A  	fcall	_write_char
  2543                           
  2544                           ;Button_src.c: 47:             write_char('e');
  2545  0E10  3065               	movlw	101
  2546  0E11  160A  118A  26E7  120A  158A  	fcall	_write_char
  2547                           
  2548                           ;Button_src.c: 48:             write_char('n');
  2549  0E16  306E               	movlw	110
  2550  0E17  160A  118A  26E7  120A  158A  	fcall	_write_char
  2551                           
  2552                           ;Button_src.c: 49:             write_char('t');
  2553  0E1C  3074               	movlw	116
  2554  0E1D  160A  118A  26E7  120A  158A  	fcall	_write_char
  2555                           
  2556                           ;Button_src.c: 50:             write_char(':');
  2557  0E22  303A               	movlw	58
  2558  0E23  160A  118A  26E7  120A  158A  	fcall	_write_char
  2559                           
  2560                           ;Button_src.c: 52:             write_char(var1 + '0');
  2561  0E28  0843               	movf	_var1,w
  2562  0E29  3E30               	addlw	48
  2563  0E2A  160A  118A  26E7  120A  158A  	fcall	_write_char
  2564                           
  2565                           ;Button_src.c: 53:             write_char(var2 + '0');
  2566  0E2F  0842               	movf	_var2,w
  2567  0E30  3E30               	addlw	48
  2568  0E31  160A  118A  26E7  120A  158A  	fcall	_write_char
  2569                           
  2570                           ;Button_src.c: 55:             write_cmd(0x88);
  2571  0E36  3088               	movlw	136
  2572  0E37  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2573                           
  2574                           ;Button_src.c: 56:             write_char('S');
  2575  0E3C  3053               	movlw	83
  2576  0E3D  160A  118A  26E7  120A  158A  	fcall	_write_char
  2577                           
  2578                           ;Button_src.c: 57:             write_char('e');
  2579  0E42  3065               	movlw	101
  2580  0E43  160A  118A  26E7  120A  158A  	fcall	_write_char
  2581                           
  2582                           ;Button_src.c: 58:             write_char('t');
  2583  0E48  3074               	movlw	116
  2584  0E49  160A  118A  26E7  120A  158A  	fcall	_write_char
  2585                           
  2586                           ;Button_src.c: 59:             write_char('_');
  2587  0E4E  305F               	movlw	95
  2588  0E4F  160A  118A  26E7  120A  158A  	fcall	_write_char
  2589                           
  2590                           ;Button_src.c: 60:             write_char('t');
  2591  0E54  3074               	movlw	116
  2592  0E55  160A  118A  26E7  120A  158A  	fcall	_write_char
  2593                           
  2594                           ;Button_src.c: 61:             write_char('h');
  2595  0E5A  3068               	movlw	104
  2596  0E5B  160A  118A  26E7  120A  158A  	fcall	_write_char
  2597                           
  2598                           ;Button_src.c: 62:             write_char('r');
  2599  0E60  3072               	movlw	114
  2600  0E61  160A  118A  26E7  120A  158A  	fcall	_write_char
  2601                           
  2602                           ;Button_src.c: 63:             write_char('e');
  2603  0E66  3065               	movlw	101
  2604  0E67  160A  118A  26E7  120A  158A  	fcall	_write_char
  2605                           
  2606                           ;Button_src.c: 64:             write_char('s');
  2607  0E6C  3073               	movlw	115
  2608  0E6D  160A  118A  26E7  120A  158A  	fcall	_write_char
  2609                           
  2610                           ;Button_src.c: 65:             write_char('h');
  2611  0E72  3068               	movlw	104
  2612  0E73  160A  118A  26E7  120A  158A  	fcall	_write_char
  2613                           
  2614                           ;Button_src.c: 66:             write_char('o');
  2615  0E78  306F               	movlw	111
  2616  0E79  160A  118A  26E7  120A  158A  	fcall	_write_char
  2617                           
  2618                           ;Button_src.c: 67:             write_char('l');
  2619  0E7E  306C               	movlw	108
  2620  0E7F  160A  118A  26E7  120A  158A  	fcall	_write_char
  2621                           
  2622                           ;Button_src.c: 68:             write_char('d');
  2623  0E84  3064               	movlw	100
  2624  0E85  160A  118A  26E7  120A  158A  	fcall	_write_char
  2625                           
  2626                           ;Button_src.c: 69:             write_char(':');
  2627  0E8A  303A               	movlw	58
  2628  0E8B  160A  118A  26E7  120A  158A  	fcall	_write_char
  2629                           
  2630                           ;Button_src.c: 71:             write_cmd(0x98);
  2631  0E90  3098               	movlw	152
  2632  0E91  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2633                           
  2634                           ;Button_src.c: 72:             RC0 = 1;
  2635  0E96  1407               	bsf	7,0	;volatile
  2636                           
  2637                           ;Button_src.c: 73:             RC1 = 0;
  2638  0E97  1087               	bcf	7,1	;volatile
  2639                           
  2640                           ;Button_src.c: 74:             RC2 = 1;
  2641  0E98  1507               	bsf	7,2	;volatile
  2642                           
  2643                           ;Button_src.c: 75:             RC3 = 1;
  2644  0E99  1587               	bsf	7,3	;volatile
  2645                           
  2646                           ;Button_src.c: 76:             t = 0;
  2647  0E9A  01BD               	clrf	_t
  2648  0E9B  01BE               	clrf	_t+1
  2649                           
  2650                           ;Button_src.c: 77:             w = 0;
  2651  0E9C  01BB               	clrf	_w
  2652  0E9D  01BC               	clrf	_w+1
  2653                           
  2654                           ;Button_src.c: 78:             x = 0;
  2655  0E9E  01B9               	clrf	_x
  2656  0E9F  01BA               	clrf	_x+1
  2657                           
  2658                           ;Button_src.c: 79:             y = 0;
  2659  0EA0  01B7               	clrf	_y
  2660  0EA1  01B8               	clrf	_y+1
  2661                           
  2662                           ;Button_src.c: 80:             x = 0x00;
  2663  0EA2  01B9               	clrf	_x
  2664  0EA3  01BA               	clrf	_x+1
  2665  0EA4                     l3315:	
  2666                           
  2667                           ;Button_src.c: 82:                  RC0 = 1;
  2668  0EA4  1407               	bsf	7,0	;volatile
  2669                           
  2670                           ;Button_src.c: 83:                  RC1 = 0;
  2671  0EA5  1087               	bcf	7,1	;volatile
  2672                           
  2673                           ;Button_src.c: 84:                  RC2 = 1;
  2674  0EA6  1507               	bsf	7,2	;volatile
  2675                           
  2676                           ;Button_src.c: 85:                  RC3 = 1;
  2677  0EA7  1587               	bsf	7,3	;volatile
  2678                           
  2679                           ;Button_src.c: 87:                 if(RC7==0){
  2680  0EA8  1B87               	btfsc	7,7	;volatile
  2681  0EA9  2F03               	goto	l3343
  2682                           
  2683                           ;Button_src.c: 88:                     write_cmd(0x98);
  2684  0EAA  3098               	movlw	152
  2685  0EAB  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2686                           
  2687                           ;Button_src.c: 89:                     x++;
  2688  0EB0  3001               	movlw	1
  2689  0EB1  07B9               	addwf	_x,f
  2690  0EB2  1803               	skipnc
  2691  0EB3  0ABA               	incf	_x+1,f
  2692  0EB4  3000               	movlw	0
  2693  0EB5  07BA               	addwf	_x+1,f
  2694                           
  2695                           ;Button_src.c: 90:                     y = (unsigned char )y;
  2696  0EB6  0837               	movf	_y,w
  2697  0EB7  00DD               	movwf	??_thermometer_threshhold_settings
  2698  0EB8  01DE               	clrf	??_thermometer_threshhold_settings+1
  2699  0EB9  085D               	movf	??_thermometer_threshhold_settings,w
  2700  0EBA  00B7               	movwf	_y
  2701  0EBB  085E               	movf	??_thermometer_threshhold_settings+1,w
  2702  0EBC  00B8               	movwf	_y+1
  2703                           
  2704                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  2705  0EBD  083A               	movf	_x+1,w
  2706  0EBE  00F8               	movwf	modulus_func@x+1
  2707  0EBF  0839               	movf	_x,w
  2708  0EC0  00F7               	movwf	modulus_func@x
  2709  0EC1  300A               	movlw	10
  2710  0EC2  00F9               	movwf	modulus_func@y
  2711  0EC3  3000               	movlw	0
  2712  0EC4  00FA               	movwf	modulus_func@y+1
  2713  0EC5  160A  118A  2674  120A  158A  	fcall	_modulus_func
  2714  0ECA  0877               	movf	?_modulus_func,w
  2715  0ECB  00DD               	movwf	??_thermometer_threshhold_settings
  2716  0ECC  01DE               	clrf	??_thermometer_threshhold_settings+1
  2717  0ECD  085D               	movf	??_thermometer_threshhold_settings,w
  2718  0ECE  00B9               	movwf	_x
  2719  0ECF  085E               	movf	??_thermometer_threshhold_settings+1,w
  2720  0ED0  00BA               	movwf	_x+1
  2721                           
  2722                           ;Button_src.c: 92:                     write_char(y + '0');
  2723  0ED1  0837               	movf	_y,w
  2724  0ED2  3E30               	addlw	48
  2725  0ED3  160A  118A  26E7  120A  158A  	fcall	_write_char
  2726                           
  2727                           ;Button_src.c: 93:                     write_char(x + '0');
  2728  0ED8  0839               	movf	_x,w
  2729  0ED9  3E30               	addlw	48
  2730  0EDA  160A  118A  26E7  120A  158A  	fcall	_write_char
  2731                           
  2732                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  2733  0EDF  0838               	movf	_y+1,w
  2734  0EE0  00D9               	movwf	incrementor@upper_val+1
  2735  0EE1  0837               	movf	_y,w
  2736  0EE2  00D8               	movwf	incrementor@upper_val
  2737  0EE3  083A               	movf	_x+1,w
  2738  0EE4  00DB               	movwf	incrementor@lower_val+1
  2739  0EE5  0839               	movf	_x,w
  2740  0EE6  00DA               	movwf	incrementor@lower_val
  2741  0EE7  3039               	movlw	57
  2742  0EE8  00DD               	movwf	??_thermometer_threshhold_settings
  2743  0EE9  085D               	movf	??_thermometer_threshhold_settings,w
  2744  0EEA  00DC               	movwf	incrementor@z
  2745  0EEB  160A  118A  27B8  120A  158A  	fcall	_incrementor
  2746  0EF0  00DE               	movwf	??_thermometer_threshhold_settings+1
  2747  0EF1  01DF               	clrf	??_thermometer_threshhold_settings+2
  2748  0EF2  085E               	movf	??_thermometer_threshhold_settings+1,w
  2749  0EF3  00B7               	movwf	_y
  2750  0EF4  085F               	movf	??_thermometer_threshhold_settings+2,w
  2751  0EF5  00B8               	movwf	_y+1
  2752                           
  2753                           ;Button_src.c: 95:                     t = x;
  2754  0EF6  083A               	movf	_x+1,w
  2755  0EF7  00BE               	movwf	_t+1
  2756  0EF8  0839               	movf	_x,w
  2757  0EF9  00BD               	movwf	_t
  2758                           
  2759                           ;Button_src.c: 96:                     w = y;
  2760  0EFA  0838               	movf	_y+1,w
  2761  0EFB  00BC               	movwf	_w+1
  2762  0EFC  0837               	movf	_y,w
  2763  0EFD  00BB               	movwf	_w
  2764                           
  2765                           ;Button_src.c: 97:                     button_delay();
  2766  0EFE  160A  118A  2695  120A  158A  	fcall	_button_delay
  2767  0F03                     l3343:	
  2768                           
  2769                           ;Button_src.c: 99:                   RC0 = 0;
  2770  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0F05  1007               	bcf	7,0	;volatile
  2773                           
  2774                           ;Button_src.c: 100:                     RC1 = 1;
  2775  0F06  1487               	bsf	7,1	;volatile
  2776                           
  2777                           ;Button_src.c: 101:                     RC2 = 1;
  2778  0F07  1507               	bsf	7,2	;volatile
  2779                           
  2780                           ;Button_src.c: 102:                     RC3 = 1;
  2781  0F08  1587               	bsf	7,3	;volatile
  2782                           
  2783                           ;Button_src.c: 103:                     if(RC6 == 0){
  2784  0F09  1B07               	btfsc	7,6	;volatile
  2785  0F0A  2F4D               	goto	l538
  2786                           
  2787                           ;Button_src.c: 104:                         var1 = y;
  2788  0F0B  0837               	movf	_y,w
  2789  0F0C  00DD               	movwf	??_thermometer_threshhold_settings
  2790  0F0D  085D               	movf	??_thermometer_threshhold_settings,w
  2791  0F0E  00C3               	movwf	_var1
  2792                           
  2793                           ;Button_src.c: 105:                         var2 = x;
  2794  0F0F  0839               	movf	_x,w
  2795  0F10  00DD               	movwf	??_thermometer_threshhold_settings
  2796  0F11  085D               	movf	??_thermometer_threshhold_settings,w
  2797  0F12  00C2               	movwf	_var2
  2798                           
  2799                           ;Button_src.c: 107:                         write_cmd(0x1);
  2800  0F13  3001               	movlw	1
  2801  0F14  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2802                           
  2803                           ;Button_src.c: 108:                         write_char('S');
  2804  0F19  3053               	movlw	83
  2805  0F1A  160A  118A  26E7  120A  158A  	fcall	_write_char
  2806                           
  2807                           ;Button_src.c: 109:                         write_char('A');
  2808  0F1F  3041               	movlw	65
  2809  0F20  160A  118A  26E7  120A  158A  	fcall	_write_char
  2810                           
  2811                           ;Button_src.c: 110:                         write_char('V');
  2812  0F25  3056               	movlw	86
  2813  0F26  160A  118A  26E7  120A  158A  	fcall	_write_char
  2814                           
  2815                           ;Button_src.c: 111:                         write_char('E');
  2816  0F2B  3045               	movlw	69
  2817  0F2C  160A  118A  26E7  120A  158A  	fcall	_write_char
  2818                           
  2819                           ;Button_src.c: 112:                         write_char('D');
  2820  0F31  3044               	movlw	68
  2821  0F32  160A  118A  26E7  120A  158A  	fcall	_write_char
  2822                           
  2823                           ;Button_src.c: 113:                         for(int i=0;i<30000;i++);
  2824  0F37  01E0               	clrf	thermometer_threshhold_settings@i
  2825  0F38  01E1               	clrf	thermometer_threshhold_settings@i+1
  2826  0F39                     l3373:	
  2827  0F39  3001               	movlw	1
  2828  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0F3C  07E0               	addwf	thermometer_threshhold_settings@i,f
  2831  0F3D  1803               	skipnc
  2832  0F3E  0AE1               	incf	thermometer_threshhold_settings@i+1,f
  2833  0F3F  3000               	movlw	0
  2834  0F40  07E1               	addwf	thermometer_threshhold_settings@i+1,f
  2835  0F41  0861               	movf	thermometer_threshhold_settings@i+1,w
  2836  0F42  3A80               	xorlw	128
  2837  0F43  00FF               	movwf	127
  2838  0F44  30F5               	movlw	245
  2839  0F45  027F               	subwf	127,w
  2840  0F46  1D03               	skipz
  2841  0F47  2F4A               	goto	u2055
  2842  0F48  3030               	movlw	48
  2843  0F49  0260               	subwf	thermometer_threshhold_settings@i,w
  2844  0F4A                     u2055:	
  2845  0F4A  1803               	btfsc	3,0
  2846  0F4B  0008               	return
  2847  0F4C  2F39               	goto	l3373
  2848  0F4D                     l538:	
  2849                           ;Button_src.c: 115:                     }
  2850                           
  2851                           
  2852                           ;Button_src.c: 116:                  RC0 = 1;
  2853  0F4D  1407               	bsf	7,0	;volatile
  2854                           
  2855                           ;Button_src.c: 117:                  RC1 = 1;
  2856  0F4E  1487               	bsf	7,1	;volatile
  2857                           
  2858                           ;Button_src.c: 118:                  RC2 = 0;
  2859  0F4F  1107               	bcf	7,2	;volatile
  2860                           
  2861                           ;Button_src.c: 119:                  RC3 = 1;
  2862  0F50  1587               	bsf	7,3	;volatile
  2863                           
  2864                           ;Button_src.c: 121:                  if(RC7 == 0){
  2865  0F51  1B87               	btfsc	7,7	;volatile
  2866  0F52  2FBD               	goto	l3397
  2867                           
  2868                           ;Button_src.c: 122:                     write_cmd(0x98);
  2869  0F53  3098               	movlw	152
  2870  0F54  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  2871                           
  2872                           ;Button_src.c: 123:                       t--;
  2873  0F59  3001               	movlw	1
  2874  0F5A  02BD               	subwf	_t,f
  2875  0F5B  3000               	movlw	0
  2876  0F5C  1C03               	skipc
  2877  0F5D  03BE               	decf	_t+1,f
  2878  0F5E  02BE               	subwf	_t+1,f
  2879                           
  2880                           ;Button_src.c: 124:                     w = (unsigned char )w;
  2881  0F5F  083B               	movf	_w,w
  2882  0F60  00DD               	movwf	??_thermometer_threshhold_settings
  2883  0F61  01DE               	clrf	??_thermometer_threshhold_settings+1
  2884  0F62  085D               	movf	??_thermometer_threshhold_settings,w
  2885  0F63  00BB               	movwf	_w
  2886  0F64  085E               	movf	??_thermometer_threshhold_settings+1,w
  2887  0F65  00BC               	movwf	_w+1
  2888                           
  2889                           ;Button_src.c: 125:                     t = (unsigned char )(modulus_func(t,10));
  2890  0F66  083E               	movf	_t+1,w
  2891  0F67  00F8               	movwf	modulus_func@x+1
  2892  0F68  083D               	movf	_t,w
  2893  0F69  00F7               	movwf	modulus_func@x
  2894  0F6A  300A               	movlw	10
  2895  0F6B  00F9               	movwf	modulus_func@y
  2896  0F6C  3000               	movlw	0
  2897  0F6D  00FA               	movwf	modulus_func@y+1
  2898  0F6E  160A  118A  2674  120A  158A  	fcall	_modulus_func
  2899  0F73  0877               	movf	?_modulus_func,w
  2900  0F74  00DD               	movwf	??_thermometer_threshhold_settings
  2901  0F75  01DE               	clrf	??_thermometer_threshhold_settings+1
  2902  0F76  085D               	movf	??_thermometer_threshhold_settings,w
  2903  0F77  00BD               	movwf	_t
  2904  0F78  085E               	movf	??_thermometer_threshhold_settings+1,w
  2905  0F79  00BE               	movwf	_t+1
  2906                           
  2907                           ;Button_src.c: 126:                     write_char(w + '0');
  2908  0F7A  083B               	movf	_w,w
  2909  0F7B  3E30               	addlw	48
  2910  0F7C  160A  118A  26E7  120A  158A  	fcall	_write_char
  2911                           
  2912                           ;Button_src.c: 127:                     write_char(t + '0');
  2913  0F81  083D               	movf	_t,w
  2914  0F82  3E30               	addlw	48
  2915  0F83  160A  118A  26E7  120A  158A  	fcall	_write_char
  2916                           
  2917                           ;Button_src.c: 128:                     w = decrementor(w,t,'0');
  2918  0F88  083C               	movf	_w+1,w
  2919  0F89  00D9               	movwf	decrementor@lower_val+1
  2920  0F8A  083B               	movf	_w,w
  2921  0F8B  00D8               	movwf	decrementor@lower_val
  2922  0F8C  083E               	movf	_t+1,w
  2923  0F8D  00DB               	movwf	decrementor@upper_val+1
  2924  0F8E  083D               	movf	_t,w
  2925  0F8F  00DA               	movwf	decrementor@upper_val
  2926  0F90  3030               	movlw	48
  2927  0F91  00DD               	movwf	??_thermometer_threshhold_settings
  2928  0F92  085D               	movf	??_thermometer_threshhold_settings,w
  2929  0F93  00DC               	movwf	decrementor@z
  2930  0F94  160A  118A  27DC  120A  158A  	fcall	_decrementor
  2931  0F99  00DE               	movwf	??_thermometer_threshhold_settings+1
  2932  0F9A  01DF               	clrf	??_thermometer_threshhold_settings+2
  2933  0F9B  085E               	movf	??_thermometer_threshhold_settings+1,w
  2934  0F9C  00BB               	movwf	_w
  2935  0F9D  085F               	movf	??_thermometer_threshhold_settings+2,w
  2936  0F9E  00BC               	movwf	_w+1
  2937                           
  2938                           ;Button_src.c: 129:                     if((t + '0')=='0'){
  2939  0F9F  083D               	movf	_t,w
  2940  0FA0  3E30               	addlw	48
  2941  0FA1  00DD               	movwf	??_thermometer_threshhold_settings
  2942  0FA2  083E               	movf	_t+1,w
  2943  0FA3  1803               	skipnc
  2944  0FA4  3E01               	addlw	1
  2945  0FA5  3E00               	addlw	0
  2946  0FA6  00DE               	movwf	??_thermometer_threshhold_settings+1
  2947  0FA7  3030               	movlw	48
  2948  0FA8  065D               	xorwf	??_thermometer_threshhold_settings,w
  2949  0FA9  045E               	iorwf	??_thermometer_threshhold_settings+1,w
  2950  0FAA  1D03               	btfss	3,2
  2951  0FAB  2FB0               	goto	l543
  2952                           
  2953                           ;Button_src.c: 130:                         t = 10;
  2954  0FAC  300A               	movlw	10
  2955  0FAD  00BD               	movwf	_t
  2956  0FAE  3000               	movlw	0
  2957  0FAF  00BE               	movwf	_t+1
  2958  0FB0                     l543:	
  2959                           ;Button_src.c: 131:                     }
  2960                           
  2961                           
  2962                           ;Button_src.c: 133:                     x = t;
  2963  0FB0  083E               	movf	_t+1,w
  2964  0FB1  00BA               	movwf	_x+1
  2965  0FB2  083D               	movf	_t,w
  2966  0FB3  00B9               	movwf	_x
  2967                           
  2968                           ;Button_src.c: 134:                     y = w;
  2969  0FB4  083C               	movf	_w+1,w
  2970  0FB5  00B8               	movwf	_y+1
  2971  0FB6  083B               	movf	_w,w
  2972  0FB7  00B7               	movwf	_y
  2973                           
  2974                           ;Button_src.c: 135:                     button_delay();
  2975  0FB8  160A  118A  2695  120A  158A  	fcall	_button_delay
  2976  0FBD                     l3397:	
  2977                           
  2978                           ;Button_src.c: 137:                 RC0 = 0;
  2979  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0FBF  1007               	bcf	7,0	;volatile
  2982                           
  2983                           ;Button_src.c: 138:                 RC1 = 1;
  2984  0FC0  1487               	bsf	7,1	;volatile
  2985                           
  2986                           ;Button_src.c: 139:                 RC2 = 1;
  2987  0FC1  1507               	bsf	7,2	;volatile
  2988                           
  2989                           ;Button_src.c: 140:                 RC3 = 1;
  2990  0FC2  1587               	bsf	7,3	;volatile
  2991                           
  2992                           ;Button_src.c: 141:                     if(RC6 == 0){
  2993  0FC3  1B07               	btfsc	7,6	;volatile
  2994  0FC4  2FF5               	goto	l544
  2995                           
  2996                           ;Button_src.c: 142:                         var1 = w;
  2997  0FC5  083B               	movf	_w,w
  2998  0FC6  00DD               	movwf	??_thermometer_threshhold_settings
  2999  0FC7  085D               	movf	??_thermometer_threshhold_settings,w
  3000  0FC8  00C3               	movwf	_var1
  3001                           
  3002                           ;Button_src.c: 143:                         var2 = t;
  3003  0FC9  083D               	movf	_t,w
  3004  0FCA  00DD               	movwf	??_thermometer_threshhold_settings
  3005  0FCB  085D               	movf	??_thermometer_threshhold_settings,w
  3006  0FCC  00C2               	movwf	_var2
  3007                           
  3008                           ;Button_src.c: 145:                         write_cmd(0x1);
  3009  0FCD  3001               	movlw	1
  3010  0FCE  160A  118A  26FE  120A  158A  	fcall	_write_cmd
  3011                           
  3012                           ;Button_src.c: 146:                         write_char('S');
  3013  0FD3  3053               	movlw	83
  3014  0FD4  160A  118A  26E7  120A  158A  	fcall	_write_char
  3015                           
  3016                           ;Button_src.c: 147:                         write_char('A');
  3017  0FD9  3041               	movlw	65
  3018  0FDA  160A  118A  26E7  120A  158A  	fcall	_write_char
  3019                           
  3020                           ;Button_src.c: 148:                         write_char('V');
  3021  0FDF  3056               	movlw	86
  3022  0FE0  160A  118A  26E7  120A  158A  	fcall	_write_char
  3023                           
  3024                           ;Button_src.c: 149:                         write_char('E');
  3025  0FE5  3045               	movlw	69
  3026  0FE6  160A  118A  26E7  120A  158A  	fcall	_write_char
  3027                           
  3028                           ;Button_src.c: 150:                         write_char('D');
  3029  0FEB  3044               	movlw	68
  3030  0FEC  160A  118A  26E7  120A  158A  	fcall	_write_char
  3031                           
  3032                           ;Button_src.c: 151:                         button_delay();
  3033  0FF1  160A  118A  2695   	fcall	_button_delay
  3034  0FF4  0008               	return
  3035  0FF5                     l544:	
  3036                           ;Button_src.c: 153:                     }
  3037                           
  3038                           
  3039                           ;Button_src.c: 154:             RC0 = 0;
  3040  0FF5  1007               	bcf	7,0	;volatile
  3041                           
  3042                           ;Button_src.c: 155:             RC1 = 1;
  3043  0FF6  1487               	bsf	7,1	;volatile
  3044                           
  3045                           ;Button_src.c: 156:             RC2 = 1;
  3046  0FF7  1507               	bsf	7,2	;volatile
  3047                           
  3048                           ;Button_src.c: 157:             RC3 = 1;
  3049  0FF8  1587               	bsf	7,3	;volatile
  3050                           
  3051                           ;Button_src.c: 158:             if (RC7 == 0 ){
  3052  0FF9  1B87               	btfsc	7,7	;volatile
  3053  0FFA  2EA4               	goto	l3315
  3054                           
  3055                           ;Button_src.c: 159:             write_cmd(0x1);
  3056  0FFB  3001               	movlw	1
  3057  0FFC  160A  118A  26FE   	fcall	_write_cmd
  3058  0FFF  0008               	return
  3059  1000                     __end_of_thermometer_threshhold_settings:	
  3060                           
  3061                           	psect	text3
  3062  17DC                     __ptext3:	
  3063 ;; *************** function _decrementor *****************
  3064 ;; Defined at:
  3065 ;;		line 19 in file "math_src.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  lower_val       2    0[BANK0 ] int 
  3068 ;;  upper_val       2    2[BANK0 ] int 
  3069 ;;  z               1    4[BANK0 ] unsigned char 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;		None
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      unsigned char 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0, pclath, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 300/0
  3078 ;;		On exit  : 300/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3081 ;;      Params:         0       5       0       0       0
  3082 ;;      Locals:         0       0       0       0       0
  3083 ;;      Temps:          2       0       0       0       0
  3084 ;;      Totals:         2       5       0       0       0
  3085 ;;Total ram usage:        7 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    2
  3088 ;; This function calls:
  3089 ;;		_modulus_func
  3090 ;; This function is called by:
  3091 ;;		_thermometer_threshhold_settings
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _decrementor
  3097  17DC                     _decrementor:	
  3098                           
  3099                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3103  17DC  085A               	movf	decrementor@upper_val,w
  3104  17DD  3E30               	addlw	48
  3105  17DE  00FB               	movwf	??_decrementor
  3106  17DF  085B               	movf	decrementor@upper_val+1,w
  3107  17E0  1803               	skipnc
  3108  17E1  3E01               	addlw	1
  3109  17E2  3E00               	addlw	0
  3110  17E3  00FC               	movwf	??_decrementor+1
  3111  17E4  085C               	movf	decrementor@z,w
  3112  17E5  067B               	xorwf	??_decrementor,w
  3113  17E6  047C               	iorwf	??_decrementor+1,w
  3114  17E7  1D03               	skipz
  3115  17E8  2FFE               	goto	l2979
  3116                           
  3117                           ;math_src.c: 21:         lower_val--;
  3118  17E9  30FF               	movlw	255
  3119  17EA  07D8               	addwf	decrementor@lower_val,f
  3120  17EB  1803               	skipnc
  3121  17EC  0AD9               	incf	decrementor@lower_val+1,f
  3122  17ED  30FF               	movlw	255
  3123  17EE  07D9               	addwf	decrementor@lower_val+1,f
  3124                           
  3125                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3126  17EF  0859               	movf	decrementor@lower_val+1,w
  3127  17F0  00F8               	movwf	modulus_func@x+1
  3128  17F1  0858               	movf	decrementor@lower_val,w
  3129  17F2  00F7               	movwf	modulus_func@x
  3130  17F3  300A               	movlw	10
  3131  17F4  00F9               	movwf	modulus_func@y
  3132  17F5  3000               	movlw	0
  3133  17F6  00FA               	movwf	modulus_func@y+1
  3134  17F7  160A  118A  2674   	fcall	_modulus_func
  3135  17FA  0878               	movf	?_modulus_func+1,w
  3136  17FB  00D9               	movwf	decrementor@lower_val+1
  3137  17FC  0877               	movf	?_modulus_func,w
  3138  17FD  00D8               	movwf	decrementor@lower_val
  3139  17FE                     l2979:	
  3140                           
  3141                           ;math_src.c: 24:      return lower_val;
  3142  17FE  0858               	movf	decrementor@lower_val,w
  3143  17FF  0008               	return
  3144  1800                     __end_of_decrementor:	
  3145                           
  3146                           	psect	text4
  3147  0963                     __ptext4:	
  3148 ;; *************** function _set_upper_threshold *****************
  3149 ;; Defined at:
  3150 ;;		line 5 in file "threshold_src.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;  upper_val       2    3[COMMON] int 
  3153 ;;  lower_val       2    5[COMMON] int 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 300/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3165 ;;      Params:         4       0       0       0       0
  3166 ;;      Locals:         0       0       0       0       0
  3167 ;;      Temps:          2       0       0       0       0
  3168 ;;      Totals:         6       0       0       0       0
  3169 ;;Total ram usage:        6 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    2
  3172 ;; This function calls:
  3173 ;;		_write_char
  3174 ;; This function is called by:
  3175 ;;		_main
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           
  3180                           ;psect for function _set_upper_threshold
  3181  0963                     _set_upper_threshold:	
  3182                           
  3183                           ;threshold_src.c: 6:     if(shi == upper_val && ge > lower_val && count == 2){
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3187  0963  0853               	movf	_shi,w
  3188  0964  00F7               	movwf	??_set_upper_threshold
  3189  0965  01F8               	clrf	??_set_upper_threshold+1
  3190  0966  0874               	movf	set_upper_threshold@upper_val+1,w
  3191  0967  0678               	xorwf	??_set_upper_threshold+1,w
  3192  0968  1D03               	skipz
  3193  0969  296C               	goto	u2715
  3194  096A  0873               	movf	set_upper_threshold@upper_val,w
  3195  096B  0677               	xorwf	??_set_upper_threshold,w
  3196  096C                     u2715:	
  3197  096C  1D03               	skipz
  3198  096D  0008               	return
  3199  096E  0876               	movf	set_upper_threshold@lower_val+1,w
  3200  096F  3A80               	xorlw	128
  3201  0970  00F7               	movwf	??_set_upper_threshold
  3202  0971  3080               	movlw	128
  3203  0972  0277               	subwf	??_set_upper_threshold,w
  3204  0973  1D03               	skipz
  3205  0974  2977               	goto	u2725
  3206  0975  0852               	movf	_ge,w
  3207  0976  0275               	subwf	set_upper_threshold@lower_val,w
  3208  0977                     u2725:	
  3209  0977  1803               	skipnc
  3210  0978  0008               	return
  3211  0979  3002               	movlw	2
  3212  097A  1283               	bcf	3,5	;RP0=0, select bank0
  3213  097B  1303               	bcf	3,6	;RP1=0, select bank0
  3214  097C  0629               	xorwf	_count,w
  3215  097D  042A               	iorwf	_count+1,w
  3216  097E  1D03               	btfss	3,2
  3217  097F  0008               	return
  3218                           
  3219                           ;threshold_src.c: 9:     write_char('W');
  3220  0980  3057               	movlw	87
  3221  0981  160A  118A  26E7  120A  158A  	fcall	_write_char
  3222                           
  3223                           ;threshold_src.c: 10:     write_char('A');
  3224  0986  3041               	movlw	65
  3225  0987  160A  118A  26E7  120A  158A  	fcall	_write_char
  3226                           
  3227                           ;threshold_src.c: 11:     write_char('R');
  3228  098C  3052               	movlw	82
  3229  098D  160A  118A  26E7  120A  158A  	fcall	_write_char
  3230                           
  3231                           ;threshold_src.c: 12:     write_char('M');
  3232  0992  304D               	movlw	77
  3233  0993  160A  118A  26E7   	fcall	_write_char
  3234  0996  0008               	return
  3235  0997                     __end_of_set_upper_threshold:	
  3236                           
  3237                           	psect	text5
  3238  0009                     __ptext5:	
  3239 ;; *************** function _set_lower_threshold *****************
  3240 ;; Defined at:
  3241 ;;		line 17 in file "threshold_src.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  upper_val       2    3[COMMON] int 
  3244 ;;  lower_val       2    5[COMMON] int 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 300/0
  3253 ;;		On exit  : 300/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3256 ;;      Params:         4       0       0       0       0
  3257 ;;      Locals:         0       0       0       0       0
  3258 ;;      Temps:          2       0       0       0       0
  3259 ;;      Totals:         6       0       0       0       0
  3260 ;;Total ram usage:        6 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    2
  3263 ;; This function calls:
  3264 ;;		_write_char
  3265 ;; This function is called by:
  3266 ;;		_main
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _set_lower_threshold
  3272  0009                     _set_lower_threshold:	
  3273                           
  3274                           ;threshold_src.c: 18:     if((shi == upper_val && ge < lower_val)|| ge == lower_val)
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3278  0009  0853               	movf	_shi,w
  3279  000A  00F7               	movwf	??_set_lower_threshold
  3280  000B  01F8               	clrf	??_set_lower_threshold+1
  3281  000C  0874               	movf	set_lower_threshold@upper_val+1,w
  3282  000D  0678               	xorwf	??_set_lower_threshold+1,w
  3283  000E  1D03               	skipz
  3284  000F  2812               	goto	u2685
  3285  0010  0873               	movf	set_lower_threshold@upper_val,w
  3286  0011  0677               	xorwf	??_set_lower_threshold,w
  3287  0012                     u2685:	
  3288  0012  1D03               	skipz
  3289  0013  281D               	goto	l3891
  3290  0014  0876               	movf	set_lower_threshold@lower_val+1,w
  3291  0015  3A80               	xorlw	128
  3292  0016  3C80               	sublw	128
  3293  0017  1D03               	skipz
  3294  0018  281B               	goto	u2695
  3295  0019  0875               	movf	set_lower_threshold@lower_val,w
  3296  001A  0252               	subwf	_ge,w
  3297  001B                     u2695:	
  3298  001B  1C03               	skipc
  3299  001C  282A               	goto	l3893
  3300  001D                     l3891:	
  3301  001D  1283               	bcf	3,5	;RP0=0, select bank0
  3302  001E  1303               	bcf	3,6	;RP1=0, select bank0
  3303  001F  0852               	movf	_ge,w
  3304  0020  00F7               	movwf	??_set_lower_threshold
  3305  0021  01F8               	clrf	??_set_lower_threshold+1
  3306  0022  0876               	movf	set_lower_threshold@lower_val+1,w
  3307  0023  0678               	xorwf	??_set_lower_threshold+1,w
  3308  0024  1D03               	skipz
  3309  0025  2828               	goto	u2705
  3310  0026  0875               	movf	set_lower_threshold@lower_val,w
  3311  0027  0677               	xorwf	??_set_lower_threshold,w
  3312  0028                     u2705:	
  3313  0028  1D03               	skipz
  3314  0029  0008               	return
  3315  002A                     l3893:	
  3316                           
  3317                           ;threshold_src.c: 19:     {;threshold_src.c: 20:     count = 2;
  3318  002A  3002               	movlw	2
  3319  002B  1283               	bcf	3,5	;RP0=0, select bank0
  3320  002C  1303               	bcf	3,6	;RP1=0, select bank0
  3321  002D  00A9               	movwf	_count
  3322  002E  3000               	movlw	0
  3323  002F  00AA               	movwf	_count+1
  3324                           
  3325                           ;threshold_src.c: 21:     buzzer_watcher = 'x';
  3326  0030  3078               	movlw	120
  3327  0031  00F7               	movwf	??_set_lower_threshold
  3328  0032  0877               	movf	??_set_lower_threshold,w
  3329  0033  00C5               	movwf	_buzzer_watcher
  3330                           
  3331                           ;threshold_src.c: 22:     write_char('O');
  3332  0034  304F               	movlw	79
  3333  0035  160A  118A  26E7  120A  118A  	fcall	_write_char
  3334                           
  3335                           ;threshold_src.c: 23:     write_char('K');
  3336  003A  304B               	movlw	75
  3337  003B  160A  118A  26E7  120A  118A  	fcall	_write_char
  3338                           
  3339                           ;threshold_src.c: 24:     write_char(' ');
  3340  0040  3020               	movlw	32
  3341  0041  160A  118A  26E7  120A  118A  	fcall	_write_char
  3342                           
  3343                           ;threshold_src.c: 25:     write_char(' ');
  3344  0046  3020               	movlw	32
  3345  0047  160A  118A  26E7   	fcall	_write_char
  3346  004A  0008               	return
  3347  004B                     __end_of_set_lower_threshold:	
  3348                           
  3349                           	psect	text6
  3350  0802                     __ptext6:	
  3351 ;; *************** function _set_beep_threshhold *****************
  3352 ;; Defined at:
  3353 ;;		line 5 in file "buzzer_src.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  x               1    wreg     unsigned char 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  x               1    2[COMMON] unsigned char 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 300/0
  3364 ;;		On exit  : 300/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3367 ;;      Params:         0       0       0       0       0
  3368 ;;      Locals:         1       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0
  3370 ;;      Totals:         1       0       0       0       0
  3371 ;;Total ram usage:        1 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    1
  3374 ;; This function calls:
  3375 ;;		_button_delay
  3376 ;; This function is called by:
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           
  3382                           ;psect for function _set_beep_threshhold
  3383  0802                     _set_beep_threshhold:	
  3384                           
  3385                           ;incstack = 0
  3386                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3387                           ;set_beep_threshhold@x stored from wreg
  3388  0802  00F2               	movwf	set_beep_threshhold@x
  3389                           
  3390                           ;buzzer_src.c: 6:     if (x == 'w'){
  3391  0803  3077               	movlw	119
  3392  0804  0672               	xorwf	set_beep_threshhold@x,w
  3393  0805  1D03               	btfss	3,2
  3394  0806  281B               	goto	l3921
  3395                           
  3396                           ;buzzer_src.c: 7:         RE2 = 1;
  3397  0807  1509               	bsf	9,2	;volatile
  3398                           
  3399                           ;buzzer_src.c: 8:         button_delay();
  3400  0808  160A  118A  2695  120A  158A  	fcall	_button_delay
  3401                           
  3402                           ;buzzer_src.c: 9:         RE2 = 0;
  3403  080D  1283               	bcf	3,5	;RP0=0, select bank0
  3404  080E  1303               	bcf	3,6	;RP1=0, select bank0
  3405  080F  1109               	bcf	9,2	;volatile
  3406                           
  3407                           ;buzzer_src.c: 10:         button_delay();
  3408  0810  160A  118A  2695  120A  158A  	fcall	_button_delay
  3409                           
  3410                           ;buzzer_src.c: 11:         RE2 = 1;
  3411  0815  1283               	bcf	3,5	;RP0=0, select bank0
  3412  0816  1303               	bcf	3,6	;RP1=0, select bank0
  3413  0817  1509               	bsf	9,2	;volatile
  3414                           
  3415                           ;buzzer_src.c: 12:         button_delay();
  3416  0818  160A  118A  2695   	fcall	_button_delay
  3417  081B                     l3921:	
  3418                           
  3419                           ;buzzer_src.c: 13:         RE2 = 0;
  3420  081B  1283               	bcf	3,5	;RP0=0, select bank0
  3421  081C  1303               	bcf	3,6	;RP1=0, select bank0
  3422  081D  1109               	bcf	9,2	;volatile
  3423  081E  0008               	return
  3424  081F                     __end_of_set_beep_threshhold:	
  3425                           
  3426                           	psect	text7
  3427  163B                     __ptext7:	
  3428 ;; *************** function _reset_alarm *****************
  3429 ;; Defined at:
  3430 ;;		line 29 in file "threshold_src.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2
  3439 ;; Tracked objects:
  3440 ;;		On entry : 300/0
  3441 ;;		On exit  : 300/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3444 ;;      Params:         0       0       0       0       0
  3445 ;;      Locals:         0       0       0       0       0
  3446 ;;      Temps:          1       0       0       0       0
  3447 ;;      Totals:         1       0       0       0       0
  3448 ;;Total ram usage:        1 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_main
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _reset_alarm
  3459  163B                     _reset_alarm:	
  3460                           
  3461                           ;threshold_src.c: 30:     RC0 = 1;
  3462                           
  3463                           ;incstack = 0
  3464                           ; Regs used in _reset_alarm: [wreg+status,2]
  3465  163B  1407               	bsf	7,0	;volatile
  3466                           
  3467                           ;threshold_src.c: 31:     RC1 = 1;
  3468  163C  1487               	bsf	7,1	;volatile
  3469                           
  3470                           ;threshold_src.c: 32:     RC2 = 1;
  3471  163D  1507               	bsf	7,2	;volatile
  3472                           
  3473                           ;threshold_src.c: 33:     RC3 = 0;
  3474  163E  1187               	bcf	7,3	;volatile
  3475                           
  3476                           ;threshold_src.c: 34:     if(RC4 == 0){
  3477  163F  1A07               	btfsc	7,4	;volatile
  3478  1640  0008               	return
  3479                           
  3480                           ;threshold_src.c: 35:         count = 0;
  3481  1641  01A9               	clrf	_count
  3482  1642  01AA               	clrf	_count+1
  3483                           
  3484                           ;threshold_src.c: 36:         buzzer_watcher = 'x';
  3485  1643  3078               	movlw	120
  3486  1644  00F0               	movwf	??_reset_alarm
  3487  1645  0870               	movf	??_reset_alarm,w
  3488  1646  00C5               	movwf	_buzzer_watcher
  3489  1647  0008               	return
  3490  1648                     __end_of_reset_alarm:	
  3491                           
  3492                           	psect	text8
  3493  1795                     __ptext8:	
  3494 ;; *************** function _lcd_init *****************
  3495 ;; Defined at:
  3496 ;;		line 14 in file "LCD_src.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  i               2    0        int 
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      void 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 300/100
  3507 ;;		On exit  : 300/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3510 ;;      Params:         0       0       0       0       0
  3511 ;;      Locals:         0       0       0       0       0
  3512 ;;      Temps:          0       0       0       0       0
  3513 ;;      Totals:         0       0       0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    2
  3517 ;; This function calls:
  3518 ;;		_delay_screen
  3519 ;;		_write_cmd
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _lcd_init
  3527  1795                     _lcd_init:	
  3528                           
  3529                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3533  1795  0185               	clrf	5	;volatile
  3534                           
  3535                           ;LCD_src.c: 18:  RA0=0;
  3536  1796  1283               	bcf	3,5	;RP0=0, select bank0
  3537  1797  1005               	bcf	5,0	;volatile
  3538                           
  3539                           ;LCD_src.c: 19:  delay_screen();
  3540  1798  160A  118A  26A9  160A  118A  	fcall	_delay_screen
  3541                           
  3542                           ;LCD_src.c: 20:  RA0=1;
  3543  179D  1283               	bcf	3,5	;RP0=0, select bank0
  3544  179E  1303               	bcf	3,6	;RP1=0, select bank0
  3545  179F  1405               	bsf	5,0	;volatile
  3546                           
  3547                           ;LCD_src.c: 21:  RA2=1;
  3548  17A0  1505               	bsf	5,2	;volatile
  3549                           
  3550                           ;LCD_src.c: 22:  write_cmd(0x30);
  3551  17A1  3030               	movlw	48
  3552  17A2  160A  118A  26FE  160A  118A  	fcall	_write_cmd
  3553                           
  3554                           ;LCD_src.c: 23:  write_cmd(0x01);
  3555  17A7  3001               	movlw	1
  3556  17A8  160A  118A  26FE  160A  118A  	fcall	_write_cmd
  3557                           
  3558                           ;LCD_src.c: 24:  write_cmd(0x06);
  3559  17AD  3006               	movlw	6
  3560  17AE  160A  118A  26FE  160A  118A  	fcall	_write_cmd
  3561                           
  3562                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3563  17B3  300C               	movlw	12
  3564  17B4  160A  118A  26FE   	fcall	_write_cmd
  3565  17B7  0008               	return
  3566  17B8                     __end_of_lcd_init:	
  3567                           
  3568                           	psect	text9
  3569  16D1                     __ptext9:	
  3570 ;; *************** function _initialise_buttons *****************
  3571 ;; Defined at:
  3572 ;;		line 11 in file "Button_src.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2
  3581 ;; Tracked objects:
  3582 ;;		On entry : 300/0
  3583 ;;		On exit  : 300/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3586 ;;      Params:         0       0       0       0       0
  3587 ;;      Locals:         0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0
  3589 ;;      Totals:         0       0       0       0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_main
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function _initialise_buttons
  3601  16D1                     _initialise_buttons:	
  3602                           
  3603                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3604                           
  3605                           ;incstack = 0
  3606                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3607  16D1  3006               	movlw	6
  3608  16D2  1683               	bsf	3,5	;RP0=1, select bank1
  3609  16D3  009F               	movwf	31	;volatile
  3610                           
  3611                           ;Button_src.c: 13:     TRISC = 0xf0;
  3612  16D4  30F0               	movlw	240
  3613  16D5  0087               	movwf	7	;volatile
  3614                           
  3615                           ;Button_src.c: 14:     a = 0x00;
  3616  16D6  1283               	bcf	3,5	;RP0=0, select bank0
  3617  16D7  01CD               	clrf	_a
  3618                           
  3619                           ;Button_src.c: 15:     b = 0x00;
  3620  16D8  01CC               	clrf	_b
  3621                           
  3622                           ;Button_src.c: 16:     c = 0x00;
  3623  16D9  01CB               	clrf	_c
  3624                           
  3625                           ;Button_src.c: 17:     z = 0;
  3626  16DA  01B5               	clrf	_z
  3627  16DB  01B6               	clrf	_z+1
  3628                           
  3629                           ;Button_src.c: 18:     day_low = 12;
  3630  16DC  300C               	movlw	12
  3631  16DD  00B3               	movwf	_day_low
  3632  16DE  3000               	movlw	0
  3633  16DF  00B4               	movwf	_day_low+1
  3634                           
  3635                           ;Button_src.c: 19:     stats = 1;
  3636  16E0  3001               	movlw	1
  3637  16E1  00AD               	movwf	_stats
  3638  16E2  3000               	movlw	0
  3639  16E3  00AE               	movwf	_stats+1
  3640                           
  3641                           ;Button_src.c: 20:     p = 0;
  3642  16E4  01AB               	clrf	_p
  3643  16E5  01AC               	clrf	_p+1
  3644  16E6  0008               	return
  3645  16E7                     __end_of_initialise_buttons:	
  3646                           
  3647                           	psect	text10
  3648  0004                     __ptext10:	
  3649 ;; *************** function _init_temp *****************
  3650 ;; Defined at:
  3651 ;;		line 6 in file "Thermometer_src.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;		None
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;		None
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		status,2
  3660 ;; Tracked objects:
  3661 ;;		On entry : 200/100
  3662 ;;		On exit  : 300/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3665 ;;      Params:         0       0       0       0       0
  3666 ;;      Locals:         0       0       0       0       0
  3667 ;;      Temps:          0       0       0       0       0
  3668 ;;      Totals:         0       0       0       0       0
  3669 ;;Total ram usage:        0 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_main
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           
  3679                           ;psect for function _init_temp
  3680  0004                     _init_temp:	
  3681                           
  3682                           ;Thermometer_src.c: 8:     TRISE=0X00;
  3683                           
  3684                           ;incstack = 0
  3685                           ; Regs used in _init_temp: [status,2]
  3686  0004  1683               	bsf	3,5	;RP0=1, select bank1
  3687  0005  0189               	clrf	9	;volatile
  3688                           
  3689                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  3690  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0007  0189               	clrf	9	;volatile
  3692  0008  0008               	return
  3693  0009                     __end_of_init_temp:	
  3694                           
  3695                           	psect	text11
  3696  1623                     __ptext11:	
  3697 ;; *************** function _init *****************
  3698 ;; Defined at:
  3699 ;;		line 5 in file "LCD_src.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2
  3708 ;; Tracked objects:
  3709 ;;		On entry : 300/0
  3710 ;;		On exit  : 300/100
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3713 ;;      Params:         0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0
  3716 ;;      Totals:         0       0       0       0       0
  3717 ;;Total ram usage:        0 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_main
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           
  3727                           ;psect for function _init
  3728  1623                     _init:	
  3729                           
  3730                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  3731                           
  3732                           ;incstack = 0
  3733                           ; Regs used in _init: [wreg+status,2]
  3734  1623  3007               	movlw	7
  3735  1624  1683               	bsf	3,5	;RP0=1, select bank1
  3736  1625  009F               	movwf	31	;volatile
  3737                           
  3738                           ;LCD_src.c: 8:  TRISA0=1;
  3739  1626  1405               	bsf	5,0	;volatile
  3740                           
  3741                           ;LCD_src.c: 9:  TRISD=0X00;
  3742  1627  0188               	clrf	8	;volatile
  3743                           
  3744                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  3745  1628  0181               	clrf	1	;volatile
  3746                           
  3747                           ;LCD_src.c: 11:  TRISE = 0X00;
  3748  1629  0189               	clrf	9	;volatile
  3749  162A  0008               	return
  3750  162B                     __end_of_init:	
  3751                           
  3752                           	psect	text12
  3753  086D                     __ptext12:	
  3754 ;; *************** function _get_time *****************
  3755 ;; Defined at:
  3756 ;;		line 26 in file "clock_src.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  i               2    6[COMMON] int 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 300/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3770 ;;      Params:         0       0       0       0       0
  3771 ;;      Locals:         2       0       0       0       0
  3772 ;;      Temps:          1       0       0       0       0
  3773 ;;      Totals:         3       0       0       0       0
  3774 ;;Total ram usage:        3 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    1
  3777 ;; This function calls:
  3778 ;;		_time_read_1
  3779 ;;		_time_write_1
  3780 ;; This function is called by:
  3781 ;;		_main
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _get_time
  3787  086D                     _get_time:	
  3788                           
  3789                           ;clock_src.c: 28:    int i;;clock_src.c: 29:    RB5=1;
  3790                           
  3791                           ;incstack = 0
  3792                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3793  086D  1283               	bcf	3,5	;RP0=0, select bank0
  3794  086E  1303               	bcf	3,6	;RP1=0, select bank0
  3795  086F  1686               	bsf	6,5	;volatile
  3796                           
  3797                           ;clock_src.c: 30:    time_write_1(0xbf);
  3798  0870  30BF               	movlw	191
  3799  0871  120A  158A  201F  120A  158A  	fcall	_time_write_1
  3800                           
  3801                           ;clock_src.c: 31:    for(i=0;i<7;i++)
  3802  0876  01F6               	clrf	get_time@i
  3803  0877  01F7               	clrf	get_time@i+1
  3804  0878                     l3209:	
  3805                           
  3806                           ;clock_src.c: 32:      {;clock_src.c: 33:         table1[i]=time_read_1();
  3807  0878  120A  158A  2099  120A  158A  	fcall	_time_read_1
  3808  087D  00F5               	movwf	??_get_time
  3809  087E  0876               	movf	get_time@i,w
  3810  087F  3E20               	addlw	(low (_table1| 0))& (0+255)
  3811  0880  0084               	movwf	4
  3812  0881  0875               	movf	??_get_time,w
  3813  0882  1383               	bcf	3,7	;select IRP bank0
  3814  0883  0080               	movwf	0
  3815                           
  3816                           ;clock_src.c: 34:      }
  3817  0884  3001               	movlw	1
  3818  0885  07F6               	addwf	get_time@i,f
  3819  0886  1803               	skipnc
  3820  0887  0AF7               	incf	get_time@i+1,f
  3821  0888  3000               	movlw	0
  3822  0889  07F7               	addwf	get_time@i+1,f
  3823  088A  0877               	movf	get_time@i+1,w
  3824  088B  3A80               	xorlw	128
  3825  088C  00FF               	movwf	127
  3826  088D  3080               	movlw	128
  3827  088E  027F               	subwf	127,w
  3828  088F  1D03               	skipz
  3829  0890  2893               	goto	u1995
  3830  0891  3007               	movlw	7
  3831  0892  0276               	subwf	get_time@i,w
  3832  0893                     u1995:	
  3833  0893  1C03               	skipc
  3834  0894  2878               	goto	l3209
  3835                           
  3836                           ;clock_src.c: 35:    RB5=0;
  3837  0895  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0896  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0897  1286               	bcf	6,5	;volatile
  3840  0898  0008               	return
  3841  0899                     __end_of_get_time:	
  3842                           
  3843                           	psect	text13
  3844  0899                     __ptext13:	
  3845 ;; *************** function _time_read_1 *****************
  3846 ;; Defined at:
  3847 ;;		line 132 in file "clock_src.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  j               2    2[COMMON] int 
  3852 ;;  time_rx         1    4[COMMON] unsigned char 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      unsigned char 
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, status,0, btemp+1
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 300/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3862 ;;      Params:         0       0       0       0       0
  3863 ;;      Locals:         3       0       0       0       0
  3864 ;;      Temps:          2       0       0       0       0
  3865 ;;      Totals:         5       0       0       0       0
  3866 ;;Total ram usage:        5 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_get_time
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           
  3876                           ;psect for function _time_read_1
  3877  0899                     _time_read_1:	
  3878                           
  3879                           ;clock_src.c: 134:    unsigned char time_rx=0;
  3880                           
  3881                           ;incstack = 0
  3882                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  3883  0899  01F4               	clrf	time_read_1@time_rx
  3884                           
  3885                           ;clock_src.c: 135:    int j;;clock_src.c: 136:    TRISB4=1;
  3886  089A  1683               	bsf	3,5	;RP0=1, select bank1
  3887  089B  1303               	bcf	3,6	;RP1=0, select bank1
  3888  089C  1606               	bsf	6,4	;volatile
  3889                           
  3890                           ;clock_src.c: 137:    for(j=0;j<8;j++)
  3891  089D  01F2               	clrf	time_read_1@j
  3892  089E  01F3               	clrf	time_read_1@j+1
  3893  089F                     l352:	
  3894                           
  3895                           ;clock_src.c: 138:       {;clock_src.c: 139:         RB0=0;
  3896  089F  1283               	bcf	3,5	;RP0=0, select bank0
  3897  08A0  1303               	bcf	3,6	;RP1=0, select bank0
  3898  08A1  1006               	bcf	6,0	;volatile
  3899                           
  3900                           ;clock_src.c: 140:         time_rx=time_rx>>1;
  3901  08A2  0874               	movf	time_read_1@time_rx,w
  3902  08A3  00F0               	movwf	??_time_read_1
  3903  08A4  1003               	clrc
  3904  08A5  0C70               	rrf	??_time_read_1,w
  3905  08A6  00F1               	movwf	??_time_read_1+1
  3906  08A7  0871               	movf	??_time_read_1+1,w
  3907  08A8  00F4               	movwf	time_read_1@time_rx
  3908                           
  3909                           ;clock_src.c: 141:         if(RB4)time_rx=time_rx|0x80;
  3910  08A9  1E06               	btfss	6,4	;volatile
  3911  08AA  28B0               	goto	l2943
  3912  08AB  0874               	movf	time_read_1@time_rx,w
  3913  08AC  3880               	iorlw	128
  3914  08AD  00F0               	movwf	??_time_read_1
  3915  08AE  0870               	movf	??_time_read_1,w
  3916  08AF  00F4               	movwf	time_read_1@time_rx
  3917  08B0                     l2943:	
  3918                           
  3919                           ;clock_src.c: 143:        RB0=1;
  3920  08B0  1406               	bsf	6,0	;volatile
  3921                           
  3922                           ;clock_src.c: 144:       }
  3923  08B1  3001               	movlw	1
  3924  08B2  07F2               	addwf	time_read_1@j,f
  3925  08B3  1803               	skipnc
  3926  08B4  0AF3               	incf	time_read_1@j+1,f
  3927  08B5  3000               	movlw	0
  3928  08B6  07F3               	addwf	time_read_1@j+1,f
  3929  08B7  0873               	movf	time_read_1@j+1,w
  3930  08B8  3A80               	xorlw	128
  3931  08B9  00FF               	movwf	127
  3932  08BA  3080               	movlw	128
  3933  08BB  027F               	subwf	127,w
  3934  08BC  1D03               	skipz
  3935  08BD  28C0               	goto	u1665
  3936  08BE  3008               	movlw	8
  3937  08BF  0272               	subwf	time_read_1@j,w
  3938  08C0                     u1665:	
  3939  08C0  1C03               	skipc
  3940  08C1  289F               	goto	l352
  3941                           
  3942                           ;clock_src.c: 145:     TRISB4=0;
  3943  08C2  1683               	bsf	3,5	;RP0=1, select bank1
  3944  08C3  1303               	bcf	3,6	;RP1=0, select bank1
  3945  08C4  1206               	bcf	6,4	;volatile
  3946                           
  3947                           ;clock_src.c: 146:     RB0=0;
  3948  08C5  1283               	bcf	3,5	;RP0=0, select bank0
  3949  08C6  1006               	bcf	6,0	;volatile
  3950                           
  3951                           ;clock_src.c: 147:     return(time_rx);
  3952  08C7  0874               	movf	time_read_1@time_rx,w
  3953  08C8  0008               	return
  3954  08C9                     __end_of_time_read_1:	
  3955                           
  3956                           	psect	text14
  3957  0B80                     __ptext14:	
  3958 ;; *************** function _get_temp *****************
  3959 ;; Defined at:
  3960 ;;		line 89 in file "Thermometer_src.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;		None
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  i               2    0        int 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 300/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3974 ;;      Params:         0       0       0       0       0
  3975 ;;      Locals:         0       0       0       0       0
  3976 ;;      Temps:          0       4       0       0       0
  3977 ;;      Totals:         0       4       0       0       0
  3978 ;;Total ram usage:        4 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    2
  3981 ;; This function calls:
  3982 ;;		___lbdiv
  3983 ;;		___lbmod
  3984 ;;		___lwdiv
  3985 ;;		___lwmod
  3986 ;;		_delay2
  3987 ;;		_read_byte
  3988 ;;		_reset_temp
  3989 ;;		_write_byte
  3990 ;; This function is called by:
  3991 ;;		_main
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function _get_temp
  3997  0B80                     _get_temp:	
  3998                           
  3999                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4000                           
  4001                           ;incstack = 0
  4002                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4003  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  4004  0B81  1409               	bsf	9,0	;volatile
  4005                           
  4006                           ;Thermometer_src.c: 93: reset_temp();
  4007  0B82  120A  158A  212F  120A  158A  	fcall	_reset_temp
  4008                           
  4009                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4010  0B87  30CC               	movlw	204
  4011  0B88  120A  158A  2197  120A  158A  	fcall	_write_byte
  4012                           
  4013                           ;Thermometer_src.c: 95: delay2();
  4014  0B8D  160A  118A  26BD  120A  158A  	fcall	_delay2
  4015                           
  4016                           ;Thermometer_src.c: 96: write_byte(0X44);
  4017  0B92  3044               	movlw	68
  4018  0B93  120A  158A  2197  120A  158A  	fcall	_write_byte
  4019                           
  4020                           ;Thermometer_src.c: 98: reset_temp();
  4021  0B98  120A  158A  212F  120A  158A  	fcall	_reset_temp
  4022                           
  4023                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4024  0B9D  30CC               	movlw	204
  4025  0B9E  120A  158A  2197  120A  158A  	fcall	_write_byte
  4026                           
  4027                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4028  0BA3  30BE               	movlw	190
  4029  0BA4  120A  158A  2197  120A  158A  	fcall	_write_byte
  4030                           
  4031                           ;Thermometer_src.c: 101: TLV=read_byte();
  4032  0BA9  120A  158A  20FB  120A  158A  	fcall	_read_byte
  4033  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  4034  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  4035  0BB0  00D8               	movwf	??_get_temp
  4036  0BB1  0858               	movf	??_get_temp,w
  4037  0BB2  00D7               	movwf	_TLV
  4038                           
  4039                           ;Thermometer_src.c: 102: THV=read_byte();
  4040  0BB3  120A  158A  20FB  120A  158A  	fcall	_read_byte
  4041  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  4042  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  4043  0BBA  00D8               	movwf	??_get_temp
  4044  0BBB  0858               	movf	??_get_temp,w
  4045  0BBC  00D6               	movwf	_THV
  4046                           
  4047                           ;Thermometer_src.c: 103: TRISE0 =1;
  4048  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  4049  0BBE  1409               	bsf	9,0	;volatile
  4050                           
  4051                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4052  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0BC0  0856               	movf	_THV,w
  4054  0BC1  00D8               	movwf	??_get_temp
  4055  0BC2  3004               	movlw	4
  4056  0BC3                     u1925:	
  4057  0BC3  1003               	clrc
  4058  0BC4  0DD8               	rlf	??_get_temp,f
  4059  0BC5  3EFF               	addlw	-1
  4060  0BC6  1D03               	skipz
  4061  0BC7  2BC3               	goto	u1925
  4062  0BC8  303F               	movlw	63
  4063  0BC9  0558               	andwf	??_get_temp,w
  4064  0BCA  00D9               	movwf	??_get_temp+1
  4065  0BCB  0857               	movf	_TLV,w
  4066  0BCC  00DA               	movwf	??_get_temp+2
  4067  0BCD  3004               	movlw	4
  4068  0BCE                     u1935:	
  4069  0BCE  1003               	clrc
  4070  0BCF  0CDA               	rrf	??_get_temp+2,f
  4071  0BD0  3EFF               	addlw	-1
  4072  0BD1  1D03               	skipz
  4073  0BD2  2BCE               	goto	u1935
  4074  0BD3  085A               	movf	??_get_temp+2,w
  4075  0BD4  0459               	iorwf	??_get_temp+1,w
  4076  0BD5  00DB               	movwf	??_get_temp+3
  4077  0BD6  085B               	movf	??_get_temp+3,w
  4078  0BD7  00D5               	movwf	_TZ
  4079                           
  4080                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4081  0BD8  0857               	movf	_TLV,w
  4082  0BD9  00D8               	movwf	??_get_temp
  4083  0BDA  3003               	movlw	3
  4084  0BDB                     u1945:	
  4085  0BDB  1003               	clrc
  4086  0BDC  0DD8               	rlf	??_get_temp,f
  4087  0BDD  3EFF               	addlw	-1
  4088  0BDE  1D03               	skipz
  4089  0BDF  2BDB               	goto	u1945
  4090  0BE0  1003               	clrc
  4091  0BE1  0D58               	rlf	??_get_temp,w
  4092  0BE2  00D9               	movwf	??_get_temp+1
  4093  0BE3  0859               	movf	??_get_temp+1,w
  4094  0BE4  00D4               	movwf	_TX
  4095                           
  4096                           ;Thermometer_src.c: 107: ge=TZ%10;
  4097  0BE5  300A               	movlw	10
  4098  0BE6  00D8               	movwf	??_get_temp
  4099  0BE7  0858               	movf	??_get_temp,w
  4100  0BE8  00F0               	movwf	___lbmod@divisor
  4101  0BE9  0855               	movf	_TZ,w
  4102  0BEA  160A  118A  2772  120A  158A  	fcall	___lbmod
  4103  0BEF  00D9               	movwf	??_get_temp+1
  4104  0BF0  0859               	movf	??_get_temp+1,w
  4105  0BF1  00D2               	movwf	_ge
  4106                           
  4107                           ;Thermometer_src.c: 108: shi=TZ/10;
  4108  0BF2  300A               	movlw	10
  4109  0BF3  00D8               	movwf	??_get_temp
  4110  0BF4  0858               	movf	??_get_temp,w
  4111  0BF5  00F0               	movwf	___lbdiv@divisor
  4112  0BF6  0855               	movf	_TZ,w
  4113  0BF7  160A  118A  2751  120A  158A  	fcall	___lbdiv
  4114  0BFC  00D9               	movwf	??_get_temp+1
  4115  0BFD  0859               	movf	??_get_temp+1,w
  4116  0BFE  00D3               	movwf	_shi
  4117                           
  4118                           ;Thermometer_src.c: 109: wd=0;
  4119  0BFF  01BF               	clrf	_wd
  4120  0C00  01C0               	clrf	_wd+1
  4121                           
  4122                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4123  0C01  1FD4               	btfss	_TX,7
  4124  0C02  2C0B               	goto	l3177
  4125  0C03  083F               	movf	_wd,w
  4126  0C04  3E88               	addlw	136
  4127  0C05  00BF               	movwf	_wd
  4128  0C06  0840               	movf	_wd+1,w
  4129  0C07  1803               	skipnc
  4130  0C08  3E01               	addlw	1
  4131  0C09  3E13               	addlw	19
  4132  0C0A  00C0               	movwf	_wd+1
  4133  0C0B                     l3177:	
  4134                           
  4135                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4136  0C0B  1F54               	btfss	_TX,6
  4137  0C0C  2C15               	goto	l3181
  4138  0C0D  083F               	movf	_wd,w
  4139  0C0E  3EC4               	addlw	196
  4140  0C0F  00BF               	movwf	_wd
  4141  0C10  0840               	movf	_wd+1,w
  4142  0C11  1803               	skipnc
  4143  0C12  3E01               	addlw	1
  4144  0C13  3E09               	addlw	9
  4145  0C14  00C0               	movwf	_wd+1
  4146  0C15                     l3181:	
  4147                           
  4148                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4149  0C15  1ED4               	btfss	_TX,5
  4150  0C16  2C1F               	goto	l3185
  4151  0C17  083F               	movf	_wd,w
  4152  0C18  3EE2               	addlw	226
  4153  0C19  00BF               	movwf	_wd
  4154  0C1A  0840               	movf	_wd+1,w
  4155  0C1B  1803               	skipnc
  4156  0C1C  3E01               	addlw	1
  4157  0C1D  3E04               	addlw	4
  4158  0C1E  00C0               	movwf	_wd+1
  4159  0C1F                     l3185:	
  4160                           
  4161                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4162  0C1F  1E54               	btfss	_TX,4
  4163  0C20  2C29               	goto	l3189
  4164  0C21  083F               	movf	_wd,w
  4165  0C22  3E71               	addlw	113
  4166  0C23  00BF               	movwf	_wd
  4167  0C24  0840               	movf	_wd+1,w
  4168  0C25  1803               	skipnc
  4169  0C26  3E01               	addlw	1
  4170  0C27  3E02               	addlw	2
  4171  0C28  00C0               	movwf	_wd+1
  4172  0C29                     l3189:	
  4173                           
  4174                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4175  0C29  30E8               	movlw	232
  4176  0C2A  00F6               	movwf	___lwdiv@divisor
  4177  0C2B  3003               	movlw	3
  4178  0C2C  00F7               	movwf	___lwdiv@divisor+1
  4179  0C2D  0840               	movf	_wd+1,w
  4180  0C2E  00F9               	movwf	___lwdiv@dividend+1
  4181  0C2F  083F               	movf	_wd,w
  4182  0C30  00F8               	movwf	___lwdiv@dividend
  4183  0C31  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4184  0C36  0876               	movf	?___lwdiv,w
  4185  0C37  00D8               	movwf	??_get_temp
  4186  0C38  0858               	movf	??_get_temp,w
  4187  0C39  00D1               	movwf	_shifen
  4188                           
  4189                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4190  0C3A  3064               	movlw	100
  4191  0C3B  00F6               	movwf	___lwdiv@divisor
  4192  0C3C  3000               	movlw	0
  4193  0C3D  00F7               	movwf	___lwdiv@divisor+1
  4194  0C3E  0840               	movf	_wd+1,w
  4195  0C3F  00F3               	movwf	___lwmod@dividend+1
  4196  0C40  083F               	movf	_wd,w
  4197  0C41  00F2               	movwf	___lwmod@dividend
  4198  0C42  30E8               	movlw	232
  4199  0C43  00F0               	movwf	___lwmod@divisor
  4200  0C44  3003               	movlw	3
  4201  0C45  00F1               	movwf	___lwmod@divisor+1
  4202  0C46  120A  158A  20C9  120A  158A  	fcall	___lwmod
  4203  0C4B  0871               	movf	?___lwmod+1,w
  4204  0C4C  00F9               	movwf	___lwdiv@dividend+1
  4205  0C4D  0870               	movf	?___lwmod,w
  4206  0C4E  00F8               	movwf	___lwdiv@dividend
  4207  0C4F  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4208  0C54  0876               	movf	?___lwdiv,w
  4209  0C55  00D8               	movwf	??_get_temp
  4210  0C56  0858               	movf	??_get_temp,w
  4211  0C57  00D0               	movwf	_baifen
  4212                           
  4213                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4214  0C58  300A               	movlw	10
  4215  0C59  00F6               	movwf	___lwdiv@divisor
  4216  0C5A  3000               	movlw	0
  4217  0C5B  00F7               	movwf	___lwdiv@divisor+1
  4218  0C5C  0840               	movf	_wd+1,w
  4219  0C5D  00F3               	movwf	___lwmod@dividend+1
  4220  0C5E  083F               	movf	_wd,w
  4221  0C5F  00F2               	movwf	___lwmod@dividend
  4222  0C60  3064               	movlw	100
  4223  0C61  00F0               	movwf	___lwmod@divisor
  4224  0C62  3000               	movlw	0
  4225  0C63  00F1               	movwf	___lwmod@divisor+1
  4226  0C64  120A  158A  20C9  120A  158A  	fcall	___lwmod
  4227  0C69  0871               	movf	?___lwmod+1,w
  4228  0C6A  00F9               	movwf	___lwdiv@dividend+1
  4229  0C6B  0870               	movf	?___lwmod,w
  4230  0C6C  00F8               	movwf	___lwdiv@dividend
  4231  0C6D  120A  158A  21CD  120A  158A  	fcall	___lwdiv
  4232  0C72  0876               	movf	?___lwdiv,w
  4233  0C73  00D8               	movwf	??_get_temp
  4234  0C74  0858               	movf	??_get_temp,w
  4235  0C75  00CF               	movwf	_qianfen
  4236                           
  4237                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4238  0C76  300A               	movlw	10
  4239  0C77  00F0               	movwf	___lwmod@divisor
  4240  0C78  3000               	movlw	0
  4241  0C79  00F1               	movwf	___lwmod@divisor+1
  4242  0C7A  0840               	movf	_wd+1,w
  4243  0C7B  00F3               	movwf	___lwmod@dividend+1
  4244  0C7C  083F               	movf	_wd,w
  4245  0C7D  00F2               	movwf	___lwmod@dividend
  4246  0C7E  120A  158A  20C9   	fcall	___lwmod
  4247  0C81  0870               	movf	?___lwmod,w
  4248  0C82  00D8               	movwf	??_get_temp
  4249  0C83  0858               	movf	??_get_temp,w
  4250  0C84  00CE               	movwf	_wanfen
  4251                           
  4252                           ;Thermometer_src.c: 118: __nop();
  4253  0C85  0000               	nop
  4254  0C86  0008               	return
  4255  0C87                     __end_of_get_temp:	
  4256                           
  4257                           	psect	text15
  4258  0997                     __ptext15:	
  4259 ;; *************** function _write_byte *****************
  4260 ;; Defined at:
  4261 ;;		line 40 in file "Thermometer_src.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  val             1    wreg     unsigned char 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  val             1    7[COMMON] unsigned char 
  4266 ;;  i               1    8[COMMON] unsigned char 
  4267 ;;  temp            1    6[COMMON] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0, pclath, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/100
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4277 ;;      Params:         0       0       0       0       0
  4278 ;;      Locals:         3       0       0       0       0
  4279 ;;      Temps:          2       0       0       0       0
  4280 ;;      Totals:         5       0       0       0       0
  4281 ;;Total ram usage:        5 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    1
  4284 ;; This function calls:
  4285 ;;		_delay_temp
  4286 ;; This function is called by:
  4287 ;;		_get_temp
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function _write_byte
  4293  0997                     _write_byte:	
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4297                           ;write_byte@val stored from wreg
  4298  0997  00F7               	movwf	write_byte@val
  4299                           
  4300                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4301  0998  3008               	movlw	8
  4302  0999  00F4               	movwf	??_write_byte
  4303  099A  0874               	movf	??_write_byte,w
  4304  099B  00F8               	movwf	write_byte@i
  4305  099C                     l2831:	
  4306                           
  4307                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4308  099C  0877               	movf	write_byte@val,w
  4309  099D  3901               	andlw	1
  4310  099E  00F4               	movwf	??_write_byte
  4311  099F  0874               	movf	??_write_byte,w
  4312  09A0  00F6               	movwf	write_byte@temp
  4313                           
  4314                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4315  09A1  1283               	bcf	3,5	;RP0=0, select bank0
  4316  09A2  1303               	bcf	3,6	;RP1=0, select bank0
  4317  09A3  1009               	bcf	9,0	;volatile
  4318  09A4  1683               	bsf	3,5	;RP0=1, select bank1
  4319  09A5  1009               	bcf	9,0	;volatile
  4320                           
  4321                           ;Thermometer_src.c: 48:    __nop();
  4322  09A6  0000               	nop
  4323                           
  4324                           ;Thermometer_src.c: 49:    __nop();
  4325  09A7  0000               	nop
  4326                           
  4327                           ;Thermometer_src.c: 50:    __nop();
  4328  09A8  0000               	nop
  4329                           
  4330                           ;Thermometer_src.c: 51:    __nop();
  4331  09A9  0000               	nop
  4332                           
  4333                           ;Thermometer_src.c: 52:    __nop();
  4334  09AA  0000               	nop
  4335                           
  4336                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4337  09AB  0376               	decf	write_byte@temp,w
  4338  09AC  1D03               	btfss	3,2
  4339  09AD  29B1               	goto	l2851
  4340  09AE  1683               	bsf	3,5	;RP0=1, select bank1
  4341  09AF  1303               	bcf	3,6	;RP1=0, select bank1
  4342  09B0  1409               	bsf	9,0	;volatile
  4343  09B1                     l2851:	
  4344                           
  4345                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4346  09B1  3007               	movlw	7
  4347  09B2  00F4               	movwf	??_write_byte
  4348  09B3  0874               	movf	??_write_byte,w
  4349  09B4  00F0               	movwf	delay_temp@y
  4350  09B5  3002               	movlw	2
  4351  09B6  160A  118A  2648  120A  158A  	fcall	_delay_temp
  4352                           
  4353                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4354  09BB  1683               	bsf	3,5	;RP0=1, select bank1
  4355  09BC  1303               	bcf	3,6	;RP1=0, select bank1
  4356  09BD  1409               	bsf	9,0	;volatile
  4357                           
  4358                           ;Thermometer_src.c: 56:    __nop();
  4359  09BE  0000               	nop
  4360                           
  4361                           ;Thermometer_src.c: 57:    __nop();
  4362  09BF  0000               	nop
  4363                           
  4364                           ;Thermometer_src.c: 58:    val=val>>1;
  4365  09C0  0877               	movf	write_byte@val,w
  4366  09C1  00F4               	movwf	??_write_byte
  4367  09C2  1003               	clrc
  4368  09C3  0C74               	rrf	??_write_byte,w
  4369  09C4  00F5               	movwf	??_write_byte+1
  4370  09C5  0875               	movf	??_write_byte+1,w
  4371  09C6  00F7               	movwf	write_byte@val
  4372                           
  4373                           ;Thermometer_src.c: 59:   }
  4374  09C7  3001               	movlw	1
  4375  09C8  02F8               	subwf	write_byte@i,f
  4376  09C9  0878               	movf	write_byte@i,w
  4377  09CA  1903               	btfsc	3,2
  4378  09CB  0008               	return
  4379  09CC  299C               	goto	l2831
  4380  09CD                     __end_of_write_byte:	
  4381                           
  4382                           	psect	text16
  4383  092F                     __ptext16:	
  4384 ;; *************** function _reset_temp *****************
  4385 ;; Defined at:
  4386 ;;		line 25 in file "Thermometer_src.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  presence        1    5[COMMON] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, status,2, status,0, pclath, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/100
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4400 ;;      Params:         0       0       0       0       0
  4401 ;;      Locals:         1       0       0       0       0
  4402 ;;      Temps:          1       0       0       0       0
  4403 ;;      Totals:         2       0       0       0       0
  4404 ;;Total ram usage:        2 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    1
  4407 ;; This function calls:
  4408 ;;		_delay_temp
  4409 ;; This function is called by:
  4410 ;;		_get_temp
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _reset_temp
  4416  092F                     _reset_temp:	
  4417                           
  4418                           ;Thermometer_src.c: 27:   char presence=1;
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4422  092F  01F5               	clrf	reset_temp@presence
  4423  0930  0AF5               	incf	reset_temp@presence,f
  4424  0931                     l2823:	
  4425                           ;Thermometer_src.c: 28:   while(presence)
  4426                           
  4427                           
  4428                           ;Thermometer_src.c: 28:   while(presence)
  4429  0931  0875               	movf	reset_temp@presence,w
  4430  0932  1903               	btfsc	3,2
  4431  0933  0008               	return
  4432                           
  4433                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4434  0934  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0935  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0936  1009               	bcf	9,0	;volatile
  4437  0937  1683               	bsf	3,5	;RP0=1, select bank1
  4438  0938  1009               	bcf	9,0	;volatile
  4439                           
  4440                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4441  0939  3046               	movlw	70
  4442  093A  00F4               	movwf	??_reset_temp
  4443  093B  0874               	movf	??_reset_temp,w
  4444  093C  00F0               	movwf	delay_temp@y
  4445  093D  3002               	movlw	2
  4446  093E  160A  118A  2648  120A  158A  	fcall	_delay_temp
  4447                           
  4448                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4449  0943  1683               	bsf	3,5	;RP0=1, select bank1
  4450  0944  1303               	bcf	3,6	;RP1=0, select bank1
  4451  0945  1409               	bsf	9,0	;volatile
  4452                           
  4453                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4454  0946  3008               	movlw	8
  4455  0947  00F4               	movwf	??_reset_temp
  4456  0948  0874               	movf	??_reset_temp,w
  4457  0949  00F0               	movwf	delay_temp@y
  4458  094A  3002               	movlw	2
  4459  094B  160A  118A  2648  120A  158A  	fcall	_delay_temp
  4460                           
  4461                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4462  0950  1283               	bcf	3,5	;RP0=0, select bank0
  4463  0951  1303               	bcf	3,6	;RP1=0, select bank0
  4464  0952  1C09               	btfss	9,0	;volatile
  4465  0953  2957               	goto	l2819
  4466  0954  01F5               	clrf	reset_temp@presence
  4467  0955  0AF5               	incf	reset_temp@presence,f
  4468  0956  2958               	goto	l2821
  4469  0957                     l2819:	
  4470  0957  01F5               	clrf	reset_temp@presence
  4471  0958                     l2821:	
  4472                           
  4473                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4474  0958  303C               	movlw	60
  4475  0959  00F4               	movwf	??_reset_temp
  4476  095A  0874               	movf	??_reset_temp,w
  4477  095B  00F0               	movwf	delay_temp@y
  4478  095C  3002               	movlw	2
  4479  095D  160A  118A  2648  120A  158A  	fcall	_delay_temp
  4480  0962  2931               	goto	l2823
  4481  0963                     __end_of_reset_temp:	
  4482                           
  4483                           	psect	text17
  4484  08FB                     __ptext17:	
  4485 ;; *************** function _read_byte *****************
  4486 ;; Defined at:
  4487 ;;		line 62 in file "Thermometer_src.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  i               1    6[COMMON] unsigned char 
  4492 ;;  value           1    5[COMMON] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      unsigned char 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/100
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4502 ;;      Params:         0       0       0       0       0
  4503 ;;      Locals:         2       0       0       0       0
  4504 ;;      Temps:          1       0       0       0       0
  4505 ;;      Totals:         3       0       0       0       0
  4506 ;;Total ram usage:        3 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    1
  4509 ;; This function calls:
  4510 ;;		_delay_temp
  4511 ;; This function is called by:
  4512 ;;		_get_temp
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _read_byte
  4518  08FB                     _read_byte:	
  4519                           
  4520                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4521                           
  4522                           ;incstack = 0
  4523                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4524  08FB  01F5               	clrf	read_byte@value
  4525                           
  4526                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4527  08FC  3008               	movlw	8
  4528  08FD  00F4               	movwf	??_read_byte
  4529  08FE  0874               	movf	??_read_byte,w
  4530  08FF  00F6               	movwf	read_byte@i
  4531  0900                     l2873:	
  4532                           
  4533                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4534  0900  1003               	clrc
  4535  0901  0CF5               	rrf	read_byte@value,f
  4536                           
  4537                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4538  0902  1283               	bcf	3,5	;RP0=0, select bank0
  4539  0903  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0904  1009               	bcf	9,0	;volatile
  4541  0905  1683               	bsf	3,5	;RP0=1, select bank1
  4542  0906  1009               	bcf	9,0	;volatile
  4543                           
  4544                           ;Thermometer_src.c: 71:    __nop();
  4545  0907  0000               	nop
  4546                           
  4547                           ;Thermometer_src.c: 72:    __nop();
  4548  0908  0000               	nop
  4549                           
  4550                           ;Thermometer_src.c: 73:    __nop();
  4551  0909  0000               	nop
  4552                           
  4553                           ;Thermometer_src.c: 74:    __nop();
  4554  090A  0000               	nop
  4555                           
  4556                           ;Thermometer_src.c: 75:    __nop();
  4557  090B  0000               	nop
  4558                           
  4559                           ;Thermometer_src.c: 76:    __nop();
  4560  090C  0000               	nop
  4561                           
  4562                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4563  090D  1683               	bsf	3,5	;RP0=1, select bank1
  4564  090E  1303               	bcf	3,6	;RP1=0, select bank1
  4565  090F  1409               	bsf	9,0	;volatile
  4566                           
  4567                           ;Thermometer_src.c: 78:    __nop();
  4568  0910  0000               	nop
  4569                           
  4570                           ;Thermometer_src.c: 79:    __nop();
  4571  0911  0000               	nop
  4572                           
  4573                           ;Thermometer_src.c: 80:    __nop();
  4574  0912  0000               	nop
  4575                           
  4576                           ;Thermometer_src.c: 81:    __nop();
  4577  0913  0000               	nop
  4578                           
  4579                           ;Thermometer_src.c: 82:    __nop();
  4580  0914  0000               	nop
  4581                           
  4582                           ;Thermometer_src.c: 83:    j=RE0;
  4583  0915  3000               	movlw	0
  4584  0916  1283               	bcf	3,5	;RP0=0, select bank0
  4585  0917  1303               	bcf	3,6	;RP1=0, select bank0
  4586  0918  1809               	btfsc	9,0	;volatile
  4587  0919  3001               	movlw	1
  4588  091A  00C1               	movwf	read_byte@j
  4589                           
  4590                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4591  091B  0841               	movf	read_byte@j,w
  4592  091C  1D03               	btfss	3,2
  4593  091D  17F5               	bsf	read_byte@value,7
  4594                           
  4595                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4596  091E  3007               	movlw	7
  4597  091F  00F4               	movwf	??_read_byte
  4598  0920  0874               	movf	??_read_byte,w
  4599  0921  00F0               	movwf	delay_temp@y
  4600  0922  3002               	movlw	2
  4601  0923  160A  118A  2648  120A  158A  	fcall	_delay_temp
  4602                           
  4603                           ;Thermometer_src.c: 86:   }
  4604  0928  3001               	movlw	1
  4605  0929  02F6               	subwf	read_byte@i,f
  4606  092A  0876               	movf	read_byte@i,w
  4607  092B  1D03               	btfss	3,2
  4608  092C  2900               	goto	l2873
  4609                           
  4610                           ;Thermometer_src.c: 87:   return(value);
  4611  092D  0875               	movf	read_byte@value,w
  4612  092E  0008               	return
  4613  092F                     __end_of_read_byte:	
  4614                           
  4615                           	psect	text18
  4616  1648                     __ptext18:	
  4617 ;; *************** function _delay_temp *****************
  4618 ;; Defined at:
  4619 ;;		line 121 in file "Thermometer_src.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  x               1    wreg     unsigned char 
  4622 ;;  y               1    0[COMMON] unsigned char 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  x               1    2[COMMON] unsigned char 
  4625 ;;  z               1    3[COMMON] unsigned char 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  1    wreg      void 
  4628 ;; Registers used:
  4629 ;;		wreg, status,2, status,0
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/100
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4635 ;;      Params:         1       0       0       0       0
  4636 ;;      Locals:         2       0       0       0       0
  4637 ;;      Temps:          1       0       0       0       0
  4638 ;;      Totals:         4       0       0       0       0
  4639 ;;Total ram usage:        4 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; This function calls:
  4642 ;;		Nothing
  4643 ;; This function is called by:
  4644 ;;		_reset_temp
  4645 ;;		_write_byte
  4646 ;;		_read_byte
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           
  4651                           ;psect for function _delay_temp
  4652  1648                     _delay_temp:	
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  4656                           ;delay_temp@x stored from wreg
  4657  1648  00F2               	movwf	delay_temp@x
  4658  1649                     l293:	
  4659                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  4660                           
  4661                           
  4662                           ;Thermometer_src.c: 125:  z=y;
  4663  1649  0870               	movf	delay_temp@y,w
  4664  164A  00F1               	movwf	??_delay_temp
  4665  164B  0871               	movf	??_delay_temp,w
  4666  164C  00F3               	movwf	delay_temp@z
  4667  164D                     l2749:	
  4668  164D  3001               	movlw	1
  4669  164E  02F3               	subwf	delay_temp@z,f
  4670  164F  1D03               	btfss	3,2
  4671  1650  2E4D               	goto	l2749
  4672                           
  4673                           ;Thermometer_src.c: 127:  }while(--x);
  4674  1651  3001               	movlw	1
  4675  1652  02F2               	subwf	delay_temp@x,f
  4676  1653  1903               	btfsc	3,2
  4677  1654  0008               	return
  4678  1655  2E49               	goto	l293
  4679  1656                     __end_of_delay_temp:	
  4680                           
  4681                           	psect	text19
  4682  16BD                     __ptext19:	
  4683 ;; *************** function _delay2 *****************
  4684 ;; Defined at:
  4685 ;;		line 130 in file "Thermometer_src.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;		None
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  i               2    0[COMMON] int 
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, btemp+1
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/100
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4699 ;;      Params:         0       0       0       0       0
  4700 ;;      Locals:         2       0       0       0       0
  4701 ;;      Temps:          0       0       0       0       0
  4702 ;;      Totals:         2       0       0       0       0
  4703 ;;Total ram usage:        2 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; This function calls:
  4706 ;;		Nothing
  4707 ;; This function is called by:
  4708 ;;		_get_temp
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _delay2
  4714  16BD                     _delay2:	
  4715                           
  4716                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  4717                           
  4718                           ;incstack = 0
  4719                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  4720  16BD  01F0               	clrf	delay2@i
  4721  16BE  01F1               	clrf	delay2@i+1
  4722  16BF                     l2925:	
  4723                           
  4724                           ;Thermometer_src.c: 132:  }
  4725  16BF  3001               	movlw	1
  4726  16C0  07F0               	addwf	delay2@i,f
  4727  16C1  1803               	skipnc
  4728  16C2  0AF1               	incf	delay2@i+1,f
  4729  16C3  3000               	movlw	0
  4730  16C4  07F1               	addwf	delay2@i+1,f
  4731  16C5  0871               	movf	delay2@i+1,w
  4732  16C6  3A80               	xorlw	128
  4733  16C7  00FF               	movwf	127
  4734  16C8  3080               	movlw	128
  4735  16C9  027F               	subwf	127,w
  4736  16CA  1D03               	skipz
  4737  16CB  2ECE               	goto	u1645
  4738  16CC  3032               	movlw	50
  4739  16CD  0270               	subwf	delay2@i,w
  4740  16CE                     u1645:	
  4741  16CE  1803               	btfsc	3,0
  4742  16CF  0008               	return
  4743  16D0  2EBF               	goto	l2925
  4744  16D1                     __end_of_delay2:	
  4745                           
  4746                           	psect	text20
  4747  08C9                     __ptext20:	
  4748 ;; *************** function ___lwmod *****************
  4749 ;; Defined at:
  4750 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  divisor         2    0[COMMON] unsigned int 
  4753 ;;  dividend        2    2[COMMON] unsigned int 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  counter         1    5[COMMON] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  2    0[COMMON] unsigned int 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0
  4760 ;; Tracked objects:
  4761 ;;		On entry : 300/0
  4762 ;;		On exit  : 300/0
  4763 ;;		Unchanged: 300/0
  4764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4765 ;;      Params:         4       0       0       0       0
  4766 ;;      Locals:         1       0       0       0       0
  4767 ;;      Temps:          1       0       0       0       0
  4768 ;;      Totals:         6       0       0       0       0
  4769 ;;Total ram usage:        6 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_get_temp
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function ___lwmod
  4780  08C9                     ___lwmod:	
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4784  08C9  0870               	movf	___lwmod@divisor,w
  4785  08CA  0471               	iorwf	___lwmod@divisor+1,w
  4786  08CB  1903               	btfsc	3,2
  4787  08CC  28F6               	goto	l3091
  4788  08CD  01F5               	clrf	___lwmod@counter
  4789  08CE  0AF5               	incf	___lwmod@counter,f
  4790  08CF                     l3081:	
  4791  08CF  1BF1               	btfsc	___lwmod@divisor+1,7
  4792  08D0  28DD               	goto	l3083
  4793  08D1  3001               	movlw	1
  4794  08D2                     u1875:	
  4795  08D2  1003               	clrc
  4796  08D3  0DF0               	rlf	___lwmod@divisor,f
  4797  08D4  0DF1               	rlf	___lwmod@divisor+1,f
  4798  08D5  3EFF               	addlw	-1
  4799  08D6  1D03               	skipz
  4800  08D7  28D2               	goto	u1875
  4801  08D8  3001               	movlw	1
  4802  08D9  00F4               	movwf	??___lwmod
  4803  08DA  0874               	movf	??___lwmod,w
  4804  08DB  07F5               	addwf	___lwmod@counter,f
  4805  08DC  28CF               	goto	l3081
  4806  08DD                     l3083:	
  4807  08DD  0871               	movf	___lwmod@divisor+1,w
  4808  08DE  0273               	subwf	___lwmod@dividend+1,w
  4809  08DF  1D03               	skipz
  4810  08E0  28E3               	goto	u1895
  4811  08E1  0870               	movf	___lwmod@divisor,w
  4812  08E2  0272               	subwf	___lwmod@dividend,w
  4813  08E3                     u1895:	
  4814  08E3  1C03               	skipc
  4815  08E4  28EB               	goto	l3087
  4816  08E5  0870               	movf	___lwmod@divisor,w
  4817  08E6  02F2               	subwf	___lwmod@dividend,f
  4818  08E7  0871               	movf	___lwmod@divisor+1,w
  4819  08E8  1C03               	skipc
  4820  08E9  03F3               	decf	___lwmod@dividend+1,f
  4821  08EA  02F3               	subwf	___lwmod@dividend+1,f
  4822  08EB                     l3087:	
  4823  08EB  3001               	movlw	1
  4824  08EC                     u1905:	
  4825  08EC  1003               	clrc
  4826  08ED  0CF1               	rrf	___lwmod@divisor+1,f
  4827  08EE  0CF0               	rrf	___lwmod@divisor,f
  4828  08EF  3EFF               	addlw	-1
  4829  08F0  1D03               	skipz
  4830  08F1  28EC               	goto	u1905
  4831  08F2  3001               	movlw	1
  4832  08F3  02F5               	subwf	___lwmod@counter,f
  4833  08F4  1D03               	btfss	3,2
  4834  08F5  28DD               	goto	l3083
  4835  08F6                     l3091:	
  4836  08F6  0873               	movf	___lwmod@dividend+1,w
  4837  08F7  00F1               	movwf	?___lwmod+1
  4838  08F8  0872               	movf	___lwmod@dividend,w
  4839  08F9  00F0               	movwf	?___lwmod
  4840  08FA  0008               	return
  4841  08FB                     __end_of___lwmod:	
  4842                           
  4843                           	psect	text21
  4844  09CD                     __ptext21:	
  4845 ;; *************** function ___lwdiv *****************
  4846 ;; Defined at:
  4847 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  divisor         2    6[COMMON] unsigned int 
  4850 ;;  dividend        2    8[COMMON] unsigned int 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  quotient        2   11[COMMON] unsigned int 
  4853 ;;  counter         1   13[COMMON] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  2    6[COMMON] unsigned int 
  4856 ;; Registers used:
  4857 ;;		wreg, status,2, status,0
  4858 ;; Tracked objects:
  4859 ;;		On entry : 300/0
  4860 ;;		On exit  : 300/0
  4861 ;;		Unchanged: 300/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4863 ;;      Params:         4       0       0       0       0
  4864 ;;      Locals:         3       0       0       0       0
  4865 ;;      Temps:          1       0       0       0       0
  4866 ;;      Totals:         8       0       0       0       0
  4867 ;;Total ram usage:        8 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_get_temp
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function ___lwdiv
  4878  09CD                     ___lwdiv:	
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4882  09CD  01FB               	clrf	___lwdiv@quotient
  4883  09CE  01FC               	clrf	___lwdiv@quotient+1
  4884  09CF  0876               	movf	___lwdiv@divisor,w
  4885  09D0  0477               	iorwf	___lwdiv@divisor+1,w
  4886  09D1  1903               	btfsc	3,2
  4887  09D2  2A04               	goto	l3069
  4888  09D3  01FD               	clrf	___lwdiv@counter
  4889  09D4  0AFD               	incf	___lwdiv@counter,f
  4890  09D5                     l3057:	
  4891  09D5  1BF7               	btfsc	___lwdiv@divisor+1,7
  4892  09D6  29E3               	goto	l3059
  4893  09D7  3001               	movlw	1
  4894  09D8                     u1805:	
  4895  09D8  1003               	clrc
  4896  09D9  0DF6               	rlf	___lwdiv@divisor,f
  4897  09DA  0DF7               	rlf	___lwdiv@divisor+1,f
  4898  09DB  3EFF               	addlw	-1
  4899  09DC  1D03               	skipz
  4900  09DD  29D8               	goto	u1805
  4901  09DE  3001               	movlw	1
  4902  09DF  00FA               	movwf	??___lwdiv
  4903  09E0  087A               	movf	??___lwdiv,w
  4904  09E1  07FD               	addwf	___lwdiv@counter,f
  4905  09E2  29D5               	goto	l3057
  4906  09E3                     l3059:	
  4907  09E3  3001               	movlw	1
  4908  09E4                     u1825:	
  4909  09E4  1003               	clrc
  4910  09E5  0DFB               	rlf	___lwdiv@quotient,f
  4911  09E6  0DFC               	rlf	___lwdiv@quotient+1,f
  4912  09E7  3EFF               	addlw	-1
  4913  09E8  1D03               	skipz
  4914  09E9  29E4               	goto	u1825
  4915  09EA  0877               	movf	___lwdiv@divisor+1,w
  4916  09EB  0279               	subwf	___lwdiv@dividend+1,w
  4917  09EC  1D03               	skipz
  4918  09ED  29F0               	goto	u1835
  4919  09EE  0876               	movf	___lwdiv@divisor,w
  4920  09EF  0278               	subwf	___lwdiv@dividend,w
  4921  09F0                     u1835:	
  4922  09F0  1C03               	skipc
  4923  09F1  29F9               	goto	l3065
  4924  09F2  0876               	movf	___lwdiv@divisor,w
  4925  09F3  02F8               	subwf	___lwdiv@dividend,f
  4926  09F4  0877               	movf	___lwdiv@divisor+1,w
  4927  09F5  1C03               	skipc
  4928  09F6  03F9               	decf	___lwdiv@dividend+1,f
  4929  09F7  02F9               	subwf	___lwdiv@dividend+1,f
  4930  09F8  147B               	bsf	___lwdiv@quotient,0
  4931  09F9                     l3065:	
  4932  09F9  3001               	movlw	1
  4933  09FA                     u1845:	
  4934  09FA  1003               	clrc
  4935  09FB  0CF7               	rrf	___lwdiv@divisor+1,f
  4936  09FC  0CF6               	rrf	___lwdiv@divisor,f
  4937  09FD  3EFF               	addlw	-1
  4938  09FE  1D03               	skipz
  4939  09FF  29FA               	goto	u1845
  4940  0A00  3001               	movlw	1
  4941  0A01  02FD               	subwf	___lwdiv@counter,f
  4942  0A02  1D03               	btfss	3,2
  4943  0A03  29E3               	goto	l3059
  4944  0A04                     l3069:	
  4945  0A04  087C               	movf	___lwdiv@quotient+1,w
  4946  0A05  00F7               	movwf	?___lwdiv+1
  4947  0A06  087B               	movf	___lwdiv@quotient,w
  4948  0A07  00F6               	movwf	?___lwdiv
  4949  0A08  0008               	return
  4950  0A09                     __end_of___lwdiv:	
  4951                           
  4952                           	psect	text22
  4953  1772                     __ptext22:	
  4954 ;; *************** function ___lbmod *****************
  4955 ;; Defined at:
  4956 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  dividend        1    wreg     unsigned char 
  4959 ;;  divisor         1    0[COMMON] unsigned char 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  dividend        1    4[COMMON] unsigned char 
  4962 ;;  rem             1    6[COMMON] unsigned char 
  4963 ;;  counter         1    5[COMMON] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  1    wreg      unsigned char 
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0
  4968 ;; Tracked objects:
  4969 ;;		On entry : 300/0
  4970 ;;		On exit  : 300/0
  4971 ;;		Unchanged: 300/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4973 ;;      Params:         1       0       0       0       0
  4974 ;;      Locals:         3       0       0       0       0
  4975 ;;      Temps:          3       0       0       0       0
  4976 ;;      Totals:         7       0       0       0       0
  4977 ;;Total ram usage:        7 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; This function calls:
  4980 ;;		Nothing
  4981 ;; This function is called by:
  4982 ;;		_get_temp
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           
  4987                           ;psect for function ___lbmod
  4988  1772                     ___lbmod:	
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4992                           ;___lbmod@dividend stored from wreg
  4993  1772  00F4               	movwf	___lbmod@dividend
  4994  1773  3008               	movlw	8
  4995  1774  00F1               	movwf	??___lbmod
  4996  1775  0871               	movf	??___lbmod,w
  4997  1776  00F5               	movwf	___lbmod@counter
  4998  1777  01F6               	clrf	___lbmod@rem
  4999  1778                     l3035:	
  5000  1778  0874               	movf	___lbmod@dividend,w
  5001  1779  00F1               	movwf	??___lbmod
  5002  177A  3007               	movlw	7
  5003  177B                     u1765:	
  5004  177B  1003               	clrc
  5005  177C  0CF1               	rrf	??___lbmod,f
  5006  177D  3EFF               	addlw	-1
  5007  177E  1D03               	skipz
  5008  177F  2F7B               	goto	u1765
  5009  1780  0876               	movf	___lbmod@rem,w
  5010  1781  00F2               	movwf	??___lbmod+1
  5011  1782  0772               	addwf	??___lbmod+1,w
  5012  1783  0471               	iorwf	??___lbmod,w
  5013  1784  00F3               	movwf	??___lbmod+2
  5014  1785  0873               	movf	??___lbmod+2,w
  5015  1786  00F6               	movwf	___lbmod@rem
  5016  1787  1003               	clrc
  5017  1788  0DF4               	rlf	___lbmod@dividend,f
  5018  1789  0870               	movf	___lbmod@divisor,w
  5019  178A  0276               	subwf	___lbmod@rem,w
  5020  178B  1C03               	skipc
  5021  178C  2F8F               	goto	l1031
  5022  178D  0870               	movf	___lbmod@divisor,w
  5023  178E  02F6               	subwf	___lbmod@rem,f
  5024  178F                     l1031:	
  5025  178F  3001               	movlw	1
  5026  1790  02F5               	subwf	___lbmod@counter,f
  5027  1791  1D03               	btfss	3,2
  5028  1792  2F78               	goto	l3035
  5029  1793  0876               	movf	___lbmod@rem,w
  5030  1794  0008               	return
  5031  1795                     __end_of___lbmod:	
  5032                           
  5033                           	psect	text23
  5034  1751                     __ptext23:	
  5035 ;; *************** function ___lbdiv *****************
  5036 ;; Defined at:
  5037 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;  dividend        1    wreg     unsigned char 
  5040 ;;  divisor         1    0[COMMON] unsigned char 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  dividend        1    2[COMMON] unsigned char 
  5043 ;;  quotient        1    4[COMMON] unsigned char 
  5044 ;;  counter         1    3[COMMON] unsigned char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      unsigned char 
  5047 ;; Registers used:
  5048 ;;		wreg, status,2, status,0
  5049 ;; Tracked objects:
  5050 ;;		On entry : 300/0
  5051 ;;		On exit  : 300/0
  5052 ;;		Unchanged: 300/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5054 ;;      Params:         1       0       0       0       0
  5055 ;;      Locals:         3       0       0       0       0
  5056 ;;      Temps:          1       0       0       0       0
  5057 ;;      Totals:         5       0       0       0       0
  5058 ;;Total ram usage:        5 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_get_temp
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function ___lbdiv
  5069  1751                     ___lbdiv:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5073                           ;___lbdiv@dividend stored from wreg
  5074  1751  00F2               	movwf	___lbdiv@dividend
  5075  1752  01F4               	clrf	___lbdiv@quotient
  5076  1753  0870               	movf	___lbdiv@divisor,w
  5077  1754  1903               	btfsc	3,2
  5078  1755  2F70               	goto	l3027
  5079  1756  01F3               	clrf	___lbdiv@counter
  5080  1757  0AF3               	incf	___lbdiv@counter,f
  5081  1758                     l3015:	
  5082  1758  1BF0               	btfsc	___lbdiv@divisor,7
  5083  1759  2F61               	goto	l3017
  5084  175A  1003               	clrc
  5085  175B  0DF0               	rlf	___lbdiv@divisor,f
  5086  175C  3001               	movlw	1
  5087  175D  00F1               	movwf	??___lbdiv
  5088  175E  0871               	movf	??___lbdiv,w
  5089  175F  07F3               	addwf	___lbdiv@counter,f
  5090  1760  2F58               	goto	l3015
  5091  1761                     l3017:	
  5092  1761  1003               	clrc
  5093  1762  0DF4               	rlf	___lbdiv@quotient,f
  5094  1763  0870               	movf	___lbdiv@divisor,w
  5095  1764  0272               	subwf	___lbdiv@dividend,w
  5096  1765  1C03               	skipc
  5097  1766  2F6B               	goto	L1
  5098  1767  0870               	movf	___lbdiv@divisor,w
  5099  1768  02F2               	subwf	___lbdiv@dividend,f
  5100  1769  1474               	bsf	___lbdiv@quotient,0
  5101  176A  1003               	clrc
  5102  176B                     L1:	
  5103  176B  0CF0               	rrf	___lbdiv@divisor,f
  5104  176C  3001               	movlw	1
  5105  176D  02F3               	subwf	___lbdiv@counter,f
  5106  176E  1D03               	btfss	3,2
  5107  176F  2F61               	goto	l3017
  5108  1770                     l3027:	
  5109  1770  0874               	movf	___lbdiv@quotient,w
  5110  1771  0008               	return
  5111  1772                     __end_of___lbdiv:	
  5112                           
  5113                           	psect	text24
  5114  1665                     __ptext24:	
  5115 ;; *************** function _ds1302_init *****************
  5116 ;; Defined at:
  5117 ;;		line 6 in file "clock_src.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 300/0
  5128 ;;		On exit  : 300/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5131 ;;      Params:         0       0       0       0       0
  5132 ;;      Locals:         0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0
  5134 ;;      Totals:         0       0       0       0       0
  5135 ;;Total ram usage:        0 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    1
  5138 ;; This function calls:
  5139 ;;		_time_write_1
  5140 ;; This function is called by:
  5141 ;;		_main
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function _ds1302_init
  5147  1665                     _ds1302_init:	
  5148                           
  5149                           ;clock_src.c: 8:    RB0=0;
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5153  1665  1006               	bcf	6,0	;volatile
  5154                           
  5155                           ;clock_src.c: 9:    RB5 =0;
  5156  1666  1286               	bcf	6,5	;volatile
  5157                           
  5158                           ;clock_src.c: 10:    RB5=1;
  5159  1667  1686               	bsf	6,5	;volatile
  5160                           
  5161                           ;clock_src.c: 11:    time_write_1(0x8e);
  5162  1668  308E               	movlw	142
  5163  1669  120A  158A  201F  160A  118A  	fcall	_time_write_1
  5164                           
  5165                           ;clock_src.c: 12:    time_write_1(0);
  5166  166E  3000               	movlw	0
  5167  166F  120A  158A  201F   	fcall	_time_write_1
  5168                           
  5169                           ;clock_src.c: 13:    RB5=0;
  5170  1672  1286               	bcf	6,5	;volatile
  5171  1673  0008               	return
  5172  1674                     __end_of_ds1302_init:	
  5173                           
  5174                           	psect	text25
  5175  1730                     __ptext25:	
  5176 ;; *************** function _display_temp *****************
  5177 ;; Defined at:
  5178 ;;		line 12 in file "Thermometer_src.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 300/0
  5189 ;;		On exit  : 300/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5192 ;;      Params:         0       0       0       0       0
  5193 ;;      Locals:         0       0       0       0       0
  5194 ;;      Temps:          0       0       0       0       0
  5195 ;;      Totals:         0       0       0       0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    2
  5199 ;; This function calls:
  5200 ;;		_write_char
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _display_temp
  5208  1730                     _display_temp:	
  5209                           
  5210                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5214  1730  0853               	movf	_shi,w
  5215  1731  3E30               	addlw	48
  5216  1732  160A  118A  26E7  160A  118A  	fcall	_write_char
  5217                           
  5218                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5219  1737  0852               	movf	_ge,w
  5220  1738  3E30               	addlw	48
  5221  1739  160A  118A  26E7  160A  118A  	fcall	_write_char
  5222                           
  5223                           ;Thermometer_src.c: 17:  write_char('.');
  5224  173E  302E               	movlw	46
  5225  173F  160A  118A  26E7  160A  118A  	fcall	_write_char
  5226                           
  5227                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5228  1744  0851               	movf	_shifen,w
  5229  1745  3E30               	addlw	48
  5230  1746  160A  118A  26E7  160A  118A  	fcall	_write_char
  5231                           
  5232                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5233  174B  0850               	movf	_baifen,w
  5234  174C  3E30               	addlw	48
  5235  174D  160A  118A  26E7   	fcall	_write_char
  5236  1750  0008               	return
  5237  1751                     __end_of_display_temp:	
  5238                           
  5239                           	psect	text26
  5240  004B                     __ptext26:	
  5241 ;; *************** function _display_day *****************
  5242 ;; Defined at:
  5243 ;;		line 4 in file "Day_of_week_src.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  num             2    3[COMMON] int 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 300/0
  5254 ;;		On exit  : 300/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5257 ;;      Params:         2       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0
  5260 ;;      Totals:         2       0       0       0       0
  5261 ;;Total ram usage:        2 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    2
  5264 ;; This function calls:
  5265 ;;		_write_char
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _display_day
  5273  004B                     _display_day:	
  5274                           
  5275                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5279  004B  0373               	decf	display_day@num,w
  5280  004C  0474               	iorwf	display_day@num+1,w
  5281  004D  1903               	btfsc	3,2
  5282  004E  2853               	goto	l3937
  5283  004F  0873               	movf	display_day@num,w
  5284  0050  0474               	iorwf	display_day@num+1,w
  5285  0051  1D03               	btfss	3,2
  5286  0052  2865               	goto	l3939
  5287  0053                     l3937:	
  5288                           
  5289                           ;Day_of_week_src.c: 6:     write_char('M');
  5290  0053  304D               	movlw	77
  5291  0054  160A  118A  26E7  120A  118A  	fcall	_write_char
  5292                           
  5293                           ;Day_of_week_src.c: 7:     write_char('o');
  5294  0059  306F               	movlw	111
  5295  005A  160A  118A  26E7  120A  118A  	fcall	_write_char
  5296                           
  5297                           ;Day_of_week_src.c: 8:     write_char('n');
  5298  005F  306E               	movlw	110
  5299  0060  160A  118A  26E7  120A  118A  	fcall	_write_char
  5300  0065                     l3939:	
  5301                           
  5302                           ;Day_of_week_src.c: 10:     if(num == 2){
  5303  0065  3002               	movlw	2
  5304  0066  0673               	xorwf	display_day@num,w
  5305  0067  0474               	iorwf	display_day@num+1,w
  5306  0068  1D03               	btfss	3,2
  5307  0069  287C               	goto	l3943
  5308                           
  5309                           ;Day_of_week_src.c: 11:     write_char('T');
  5310  006A  3054               	movlw	84
  5311  006B  160A  118A  26E7  120A  118A  	fcall	_write_char
  5312                           
  5313                           ;Day_of_week_src.c: 12:     write_char('u');
  5314  0070  3075               	movlw	117
  5315  0071  160A  118A  26E7  120A  118A  	fcall	_write_char
  5316                           
  5317                           ;Day_of_week_src.c: 13:     write_char('e');
  5318  0076  3065               	movlw	101
  5319  0077  160A  118A  26E7  120A  118A  	fcall	_write_char
  5320  007C                     l3943:	
  5321                           
  5322                           ;Day_of_week_src.c: 15:     if(num == 3){
  5323  007C  3003               	movlw	3
  5324  007D  0673               	xorwf	display_day@num,w
  5325  007E  0474               	iorwf	display_day@num+1,w
  5326  007F  1D03               	btfss	3,2
  5327  0080  2893               	goto	l3947
  5328                           
  5329                           ;Day_of_week_src.c: 16:     write_char('W');
  5330  0081  3057               	movlw	87
  5331  0082  160A  118A  26E7  120A  118A  	fcall	_write_char
  5332                           
  5333                           ;Day_of_week_src.c: 17:     write_char('e');
  5334  0087  3065               	movlw	101
  5335  0088  160A  118A  26E7  120A  118A  	fcall	_write_char
  5336                           
  5337                           ;Day_of_week_src.c: 18:     write_char('d');
  5338  008D  3064               	movlw	100
  5339  008E  160A  118A  26E7  120A  118A  	fcall	_write_char
  5340  0093                     l3947:	
  5341                           
  5342                           ;Day_of_week_src.c: 20:     if(num == 4){
  5343  0093  3004               	movlw	4
  5344  0094  0673               	xorwf	display_day@num,w
  5345  0095  0474               	iorwf	display_day@num+1,w
  5346  0096  1D03               	btfss	3,2
  5347  0097  28AA               	goto	l3951
  5348                           
  5349                           ;Day_of_week_src.c: 21:     write_char('T');
  5350  0098  3054               	movlw	84
  5351  0099  160A  118A  26E7  120A  118A  	fcall	_write_char
  5352                           
  5353                           ;Day_of_week_src.c: 22:     write_char('h');
  5354  009E  3068               	movlw	104
  5355  009F  160A  118A  26E7  120A  118A  	fcall	_write_char
  5356                           
  5357                           ;Day_of_week_src.c: 23:     write_char('u');
  5358  00A4  3075               	movlw	117
  5359  00A5  160A  118A  26E7  120A  118A  	fcall	_write_char
  5360  00AA                     l3951:	
  5361                           
  5362                           ;Day_of_week_src.c: 25:     if(num == 5){
  5363  00AA  3005               	movlw	5
  5364  00AB  0673               	xorwf	display_day@num,w
  5365  00AC  0474               	iorwf	display_day@num+1,w
  5366  00AD  1D03               	btfss	3,2
  5367  00AE  28C1               	goto	l3955
  5368                           
  5369                           ;Day_of_week_src.c: 26:     write_char('F');
  5370  00AF  3046               	movlw	70
  5371  00B0  160A  118A  26E7  120A  118A  	fcall	_write_char
  5372                           
  5373                           ;Day_of_week_src.c: 27:     write_char('r');
  5374  00B5  3072               	movlw	114
  5375  00B6  160A  118A  26E7  120A  118A  	fcall	_write_char
  5376                           
  5377                           ;Day_of_week_src.c: 28:     write_char('i');
  5378  00BB  3069               	movlw	105
  5379  00BC  160A  118A  26E7  120A  118A  	fcall	_write_char
  5380  00C1                     l3955:	
  5381                           
  5382                           ;Day_of_week_src.c: 30:     if(num == 6){
  5383  00C1  3006               	movlw	6
  5384  00C2  0673               	xorwf	display_day@num,w
  5385  00C3  0474               	iorwf	display_day@num+1,w
  5386  00C4  1D03               	btfss	3,2
  5387  00C5  28D8               	goto	l3959
  5388                           
  5389                           ;Day_of_week_src.c: 31:     write_char('S');
  5390  00C6  3053               	movlw	83
  5391  00C7  160A  118A  26E7  120A  118A  	fcall	_write_char
  5392                           
  5393                           ;Day_of_week_src.c: 32:     write_char('a');
  5394  00CC  3061               	movlw	97
  5395  00CD  160A  118A  26E7  120A  118A  	fcall	_write_char
  5396                           
  5397                           ;Day_of_week_src.c: 33:     write_char('t');
  5398  00D2  3074               	movlw	116
  5399  00D3  160A  118A  26E7  120A  118A  	fcall	_write_char
  5400  00D8                     l3959:	
  5401                           
  5402                           ;Day_of_week_src.c: 35:     if(num == 7){
  5403  00D8  3007               	movlw	7
  5404  00D9  0673               	xorwf	display_day@num,w
  5405  00DA  0474               	iorwf	display_day@num+1,w
  5406  00DB  1D03               	btfss	3,2
  5407  00DC  0008               	return
  5408                           
  5409                           ;Day_of_week_src.c: 36:     write_char('S');
  5410  00DD  3053               	movlw	83
  5411  00DE  160A  118A  26E7  120A  118A  	fcall	_write_char
  5412                           
  5413                           ;Day_of_week_src.c: 37:     write_char('u');
  5414  00E3  3075               	movlw	117
  5415  00E4  160A  118A  26E7  120A  118A  	fcall	_write_char
  5416                           
  5417                           ;Day_of_week_src.c: 38:     write_char('n');
  5418  00E9  306E               	movlw	110
  5419  00EA  160A  118A  26E7   	fcall	_write_char
  5420  00ED  0008               	return
  5421  00EE                     __end_of_display_day:	
  5422                           
  5423                           	psect	text27
  5424  0AEA                     __ptext27:	
  5425 ;; *************** function _display_date *****************
  5426 ;; Defined at:
  5427 ;;		line 79 in file "clock_src.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  i               2    5[COMMON] int 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 300/0
  5438 ;;		On exit  : 300/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5441 ;;      Params:         0       0       0       0       0
  5442 ;;      Locals:         2       0       0       0       0
  5443 ;;      Temps:          2       0       0       0       0
  5444 ;;      Totals:         4       0       0       0       0
  5445 ;;Total ram usage:        4 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    2
  5448 ;; This function calls:
  5449 ;;		_write_char
  5450 ;; This function is called by:
  5451 ;;		_main
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function _display_date
  5457  0AEA                     _display_date:	
  5458                           
  5459                           ;clock_src.c: 81:      int i;;clock_src.c: 82:      if(RB1==0)
  5460                           
  5461                           ;incstack = 0
  5462                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5463  0AEA  1886               	btfsc	6,1	;volatile
  5464  0AEB  2AF4               	goto	l3221
  5465                           
  5466                           ;clock_src.c: 83:        {;clock_src.c: 84:           table1[0]=table1[3];
  5467  0AEC  0823               	movf	_table1+3,w
  5468  0AED  00F3               	movwf	??_display_date
  5469  0AEE  0873               	movf	??_display_date,w
  5470  0AEF  00A0               	movwf	_table1
  5471                           
  5472                           ;clock_src.c: 85:           table1[1]=table1[4];
  5473  0AF0  0824               	movf	_table1+4,w
  5474  0AF1  00F3               	movwf	??_display_date
  5475  0AF2  0873               	movf	??_display_date,w
  5476  0AF3  00A1               	movwf	_table1+1
  5477  0AF4                     l3221:	
  5478                           
  5479                           ;clock_src.c: 87:      i=table1[3]&0xf0;
  5480  0AF4  0823               	movf	_table1+3,w
  5481  0AF5  39F0               	andlw	240
  5482  0AF6  00F3               	movwf	??_display_date
  5483  0AF7  01F4               	clrf	??_display_date+1
  5484  0AF8  0873               	movf	??_display_date,w
  5485  0AF9  00F5               	movwf	display_date@i
  5486  0AFA  0874               	movf	??_display_date+1,w
  5487  0AFB  00F6               	movwf	display_date@i+1
  5488                           
  5489                           ;clock_src.c: 88:      i=i>>4;
  5490  0AFC  0E75               	swapf	display_date@i,w
  5491  0AFD  390F               	andlw	15
  5492  0AFE  00F5               	movwf	display_date@i
  5493  0AFF  0E76               	swapf	display_date@i+1,w
  5494  0B00  39F0               	andlw	240
  5495  0B01  04F5               	iorwf	display_date@i,f
  5496  0B02  0E76               	swapf	display_date@i+1,w
  5497  0B03  390F               	andlw	15
  5498  0B04  00F6               	movwf	display_date@i+1
  5499  0B05  30F0               	movlw	240
  5500  0B06  1DF6               	btfss	display_date@i+1,3
  5501  0B07  3000               	movlw	0
  5502  0B08  04F6               	iorwf	display_date@i+1,f
  5503                           
  5504                           ;clock_src.c: 89:      write_char(i + '0');
  5505  0B09  0875               	movf	display_date@i,w
  5506  0B0A  3E30               	addlw	48
  5507  0B0B  160A  118A  26E7  120A  158A  	fcall	_write_char
  5508                           
  5509                           ;clock_src.c: 91:      i=table1[3]&0x0f;
  5510  0B10  0823               	movf	_table1+3,w
  5511  0B11  390F               	andlw	15
  5512  0B12  00F3               	movwf	??_display_date
  5513  0B13  01F4               	clrf	??_display_date+1
  5514  0B14  0873               	movf	??_display_date,w
  5515  0B15  00F5               	movwf	display_date@i
  5516  0B16  0874               	movf	??_display_date+1,w
  5517  0B17  00F6               	movwf	display_date@i+1
  5518                           
  5519                           ;clock_src.c: 92:      write_char(i + '0');
  5520  0B18  0875               	movf	display_date@i,w
  5521  0B19  3E30               	addlw	48
  5522  0B1A  160A  118A  26E7  120A  158A  	fcall	_write_char
  5523                           
  5524                           ;clock_src.c: 93:      write_char('/');
  5525  0B1F  302F               	movlw	47
  5526  0B20  160A  118A  26E7  120A  158A  	fcall	_write_char
  5527                           
  5528                           ;clock_src.c: 97:      i=table1[4]&0xf0;
  5529  0B25  0824               	movf	_table1+4,w
  5530  0B26  39F0               	andlw	240
  5531  0B27  00F3               	movwf	??_display_date
  5532  0B28  01F4               	clrf	??_display_date+1
  5533  0B29  0873               	movf	??_display_date,w
  5534  0B2A  00F5               	movwf	display_date@i
  5535  0B2B  0874               	movf	??_display_date+1,w
  5536  0B2C  00F6               	movwf	display_date@i+1
  5537                           
  5538                           ;clock_src.c: 98:      i=i>>4;
  5539  0B2D  0E75               	swapf	display_date@i,w
  5540  0B2E  390F               	andlw	15
  5541  0B2F  00F5               	movwf	display_date@i
  5542  0B30  0E76               	swapf	display_date@i+1,w
  5543  0B31  39F0               	andlw	240
  5544  0B32  04F5               	iorwf	display_date@i,f
  5545  0B33  0E76               	swapf	display_date@i+1,w
  5546  0B34  390F               	andlw	15
  5547  0B35  00F6               	movwf	display_date@i+1
  5548  0B36  30F0               	movlw	240
  5549  0B37  1DF6               	btfss	display_date@i+1,3
  5550  0B38  3000               	movlw	0
  5551  0B39  04F6               	iorwf	display_date@i+1,f
  5552                           
  5553                           ;clock_src.c: 99:      write_char(i + '0');
  5554  0B3A  0875               	movf	display_date@i,w
  5555  0B3B  3E30               	addlw	48
  5556  0B3C  160A  118A  26E7  120A  158A  	fcall	_write_char
  5557                           
  5558                           ;clock_src.c: 101:      i=table1[4]&0x0f;
  5559  0B41  0824               	movf	_table1+4,w
  5560  0B42  390F               	andlw	15
  5561  0B43  00F3               	movwf	??_display_date
  5562  0B44  01F4               	clrf	??_display_date+1
  5563  0B45  0873               	movf	??_display_date,w
  5564  0B46  00F5               	movwf	display_date@i
  5565  0B47  0874               	movf	??_display_date+1,w
  5566  0B48  00F6               	movwf	display_date@i+1
  5567                           
  5568                           ;clock_src.c: 102:      write_char(i + '0');
  5569  0B49  0875               	movf	display_date@i,w
  5570  0B4A  3E30               	addlw	48
  5571  0B4B  160A  118A  26E7  120A  158A  	fcall	_write_char
  5572                           
  5573                           ;clock_src.c: 103:      write_char('/');
  5574  0B50  302F               	movlw	47
  5575  0B51  160A  118A  26E7  120A  158A  	fcall	_write_char
  5576                           
  5577                           ;clock_src.c: 107:      i=table1[6]&0xf0;
  5578  0B56  0826               	movf	_table1+6,w
  5579  0B57  39F0               	andlw	240
  5580  0B58  00F3               	movwf	??_display_date
  5581  0B59  01F4               	clrf	??_display_date+1
  5582  0B5A  0873               	movf	??_display_date,w
  5583  0B5B  00F5               	movwf	display_date@i
  5584  0B5C  0874               	movf	??_display_date+1,w
  5585  0B5D  00F6               	movwf	display_date@i+1
  5586                           
  5587                           ;clock_src.c: 108:      i=i>>4;
  5588  0B5E  0E75               	swapf	display_date@i,w
  5589  0B5F  390F               	andlw	15
  5590  0B60  00F5               	movwf	display_date@i
  5591  0B61  0E76               	swapf	display_date@i+1,w
  5592  0B62  39F0               	andlw	240
  5593  0B63  04F5               	iorwf	display_date@i,f
  5594  0B64  0E76               	swapf	display_date@i+1,w
  5595  0B65  390F               	andlw	15
  5596  0B66  00F6               	movwf	display_date@i+1
  5597  0B67  30F0               	movlw	240
  5598  0B68  1DF6               	btfss	display_date@i+1,3
  5599  0B69  3000               	movlw	0
  5600  0B6A  04F6               	iorwf	display_date@i+1,f
  5601                           
  5602                           ;clock_src.c: 109:      write_char(i + '0');
  5603  0B6B  0875               	movf	display_date@i,w
  5604  0B6C  3E30               	addlw	48
  5605  0B6D  160A  118A  26E7  120A  158A  	fcall	_write_char
  5606                           
  5607                           ;clock_src.c: 111:      i=table1[6]&0x0f;
  5608  0B72  0826               	movf	_table1+6,w
  5609  0B73  390F               	andlw	15
  5610  0B74  00F3               	movwf	??_display_date
  5611  0B75  01F4               	clrf	??_display_date+1
  5612  0B76  0873               	movf	??_display_date,w
  5613  0B77  00F5               	movwf	display_date@i
  5614  0B78  0874               	movf	??_display_date+1,w
  5615  0B79  00F6               	movwf	display_date@i+1
  5616                           
  5617                           ;clock_src.c: 112:      write_char(i + '0');
  5618  0B7A  0875               	movf	display_date@i,w
  5619  0B7B  3E30               	addlw	48
  5620  0B7C  160A  118A  26E7   	fcall	_write_char
  5621  0B7F  0008               	return
  5622  0B80                     __end_of_display_date:	
  5623                           
  5624                           	psect	text28
  5625  0A54                     __ptext28:	
  5626 ;; *************** function _display_clock *****************
  5627 ;; Defined at:
  5628 ;;		line 37 in file "clock_src.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;		None
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  i               2    5[COMMON] int 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;                  1    wreg      void 
  5635 ;; Registers used:
  5636 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5637 ;; Tracked objects:
  5638 ;;		On entry : 300/0
  5639 ;;		On exit  : 300/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5642 ;;      Params:         0       0       0       0       0
  5643 ;;      Locals:         2       0       0       0       0
  5644 ;;      Temps:          2       0       0       0       0
  5645 ;;      Totals:         4       0       0       0       0
  5646 ;;Total ram usage:        4 bytes
  5647 ;; Hardware stack levels used:    1
  5648 ;; Hardware stack levels required when called:    2
  5649 ;; This function calls:
  5650 ;;		_write_char
  5651 ;; This function is called by:
  5652 ;;		_main
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function _display_clock
  5658  0A54                     _display_clock:	
  5659                           
  5660                           ;clock_src.c: 39:      int i;;clock_src.c: 40:      if(RB1==0)
  5661                           
  5662                           ;incstack = 0
  5663                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5664  0A54  1886               	btfsc	6,1	;volatile
  5665  0A55  2A5E               	goto	l3259
  5666                           
  5667                           ;clock_src.c: 41:        {;clock_src.c: 42:           table1[0]=table1[3];
  5668  0A56  0823               	movf	_table1+3,w
  5669  0A57  00F3               	movwf	??_display_clock
  5670  0A58  0873               	movf	??_display_clock,w
  5671  0A59  00A0               	movwf	_table1
  5672                           
  5673                           ;clock_src.c: 43:           table1[1]=table1[4];
  5674  0A5A  0824               	movf	_table1+4,w
  5675  0A5B  00F3               	movwf	??_display_clock
  5676  0A5C  0873               	movf	??_display_clock,w
  5677  0A5D  00A1               	movwf	_table1+1
  5678  0A5E                     l3259:	
  5679                           
  5680                           ;clock_src.c: 46:      i=table1[2]&0xf0;
  5681  0A5E  0822               	movf	_table1+2,w
  5682  0A5F  39F0               	andlw	240
  5683  0A60  00F3               	movwf	??_display_clock
  5684  0A61  01F4               	clrf	??_display_clock+1
  5685  0A62  0873               	movf	??_display_clock,w
  5686  0A63  00F5               	movwf	display_clock@i
  5687  0A64  0874               	movf	??_display_clock+1,w
  5688  0A65  00F6               	movwf	display_clock@i+1
  5689                           
  5690                           ;clock_src.c: 47:      i=i>>4;
  5691  0A66  0E75               	swapf	display_clock@i,w
  5692  0A67  390F               	andlw	15
  5693  0A68  00F5               	movwf	display_clock@i
  5694  0A69  0E76               	swapf	display_clock@i+1,w
  5695  0A6A  39F0               	andlw	240
  5696  0A6B  04F5               	iorwf	display_clock@i,f
  5697  0A6C  0E76               	swapf	display_clock@i+1,w
  5698  0A6D  390F               	andlw	15
  5699  0A6E  00F6               	movwf	display_clock@i+1
  5700  0A6F  30F0               	movlw	240
  5701  0A70  1DF6               	btfss	display_clock@i+1,3
  5702  0A71  3000               	movlw	0
  5703  0A72  04F6               	iorwf	display_clock@i+1,f
  5704                           
  5705                           ;clock_src.c: 48:      write_char(i + '0');
  5706  0A73  0875               	movf	display_clock@i,w
  5707  0A74  3E30               	addlw	48
  5708  0A75  160A  118A  26E7  120A  158A  	fcall	_write_char
  5709                           
  5710                           ;clock_src.c: 52:      i=table1[2]&0x0f;
  5711  0A7A  0822               	movf	_table1+2,w
  5712  0A7B  390F               	andlw	15
  5713  0A7C  00F3               	movwf	??_display_clock
  5714  0A7D  01F4               	clrf	??_display_clock+1
  5715  0A7E  0873               	movf	??_display_clock,w
  5716  0A7F  00F5               	movwf	display_clock@i
  5717  0A80  0874               	movf	??_display_clock+1,w
  5718  0A81  00F6               	movwf	display_clock@i+1
  5719                           
  5720                           ;clock_src.c: 53:      write_char(i + '0');
  5721  0A82  0875               	movf	display_clock@i,w
  5722  0A83  3E30               	addlw	48
  5723  0A84  160A  118A  26E7  120A  158A  	fcall	_write_char
  5724                           
  5725                           ;clock_src.c: 54:      write_char(':');
  5726  0A89  303A               	movlw	58
  5727  0A8A  160A  118A  26E7  120A  158A  	fcall	_write_char
  5728                           
  5729                           ;clock_src.c: 58:      i=table1[1]&0xf0;
  5730  0A8F  0821               	movf	_table1+1,w
  5731  0A90  39F0               	andlw	240
  5732  0A91  00F3               	movwf	??_display_clock
  5733  0A92  01F4               	clrf	??_display_clock+1
  5734  0A93  0873               	movf	??_display_clock,w
  5735  0A94  00F5               	movwf	display_clock@i
  5736  0A95  0874               	movf	??_display_clock+1,w
  5737  0A96  00F6               	movwf	display_clock@i+1
  5738                           
  5739                           ;clock_src.c: 59:      i=i>>4;
  5740  0A97  0E75               	swapf	display_clock@i,w
  5741  0A98  390F               	andlw	15
  5742  0A99  00F5               	movwf	display_clock@i
  5743  0A9A  0E76               	swapf	display_clock@i+1,w
  5744  0A9B  39F0               	andlw	240
  5745  0A9C  04F5               	iorwf	display_clock@i,f
  5746  0A9D  0E76               	swapf	display_clock@i+1,w
  5747  0A9E  390F               	andlw	15
  5748  0A9F  00F6               	movwf	display_clock@i+1
  5749  0AA0  30F0               	movlw	240
  5750  0AA1  1DF6               	btfss	display_clock@i+1,3
  5751  0AA2  3000               	movlw	0
  5752  0AA3  04F6               	iorwf	display_clock@i+1,f
  5753                           
  5754                           ;clock_src.c: 60:      write_char(i + '0');
  5755  0AA4  0875               	movf	display_clock@i,w
  5756  0AA5  3E30               	addlw	48
  5757  0AA6  160A  118A  26E7  120A  158A  	fcall	_write_char
  5758                           
  5759                           ;clock_src.c: 63:      i=table1[1]&0x0f;
  5760  0AAB  0821               	movf	_table1+1,w
  5761  0AAC  390F               	andlw	15
  5762  0AAD  00F3               	movwf	??_display_clock
  5763  0AAE  01F4               	clrf	??_display_clock+1
  5764  0AAF  0873               	movf	??_display_clock,w
  5765  0AB0  00F5               	movwf	display_clock@i
  5766  0AB1  0874               	movf	??_display_clock+1,w
  5767  0AB2  00F6               	movwf	display_clock@i+1
  5768                           
  5769                           ;clock_src.c: 64:      write_char(i + '0');
  5770  0AB3  0875               	movf	display_clock@i,w
  5771  0AB4  3E30               	addlw	48
  5772  0AB5  160A  118A  26E7  120A  158A  	fcall	_write_char
  5773                           
  5774                           ;clock_src.c: 65:      write_char(':');
  5775  0ABA  303A               	movlw	58
  5776  0ABB  160A  118A  26E7  120A  158A  	fcall	_write_char
  5777                           
  5778                           ;clock_src.c: 68:      i=table1[0]&0xf0;
  5779  0AC0  0820               	movf	_table1,w
  5780  0AC1  39F0               	andlw	240
  5781  0AC2  00F3               	movwf	??_display_clock
  5782  0AC3  01F4               	clrf	??_display_clock+1
  5783  0AC4  0873               	movf	??_display_clock,w
  5784  0AC5  00F5               	movwf	display_clock@i
  5785  0AC6  0874               	movf	??_display_clock+1,w
  5786  0AC7  00F6               	movwf	display_clock@i+1
  5787                           
  5788                           ;clock_src.c: 69:      i=i>>4;
  5789  0AC8  0E75               	swapf	display_clock@i,w
  5790  0AC9  390F               	andlw	15
  5791  0ACA  00F5               	movwf	display_clock@i
  5792  0ACB  0E76               	swapf	display_clock@i+1,w
  5793  0ACC  39F0               	andlw	240
  5794  0ACD  04F5               	iorwf	display_clock@i,f
  5795  0ACE  0E76               	swapf	display_clock@i+1,w
  5796  0ACF  390F               	andlw	15
  5797  0AD0  00F6               	movwf	display_clock@i+1
  5798  0AD1  30F0               	movlw	240
  5799  0AD2  1DF6               	btfss	display_clock@i+1,3
  5800  0AD3  3000               	movlw	0
  5801  0AD4  04F6               	iorwf	display_clock@i+1,f
  5802                           
  5803                           ;clock_src.c: 70:      write_char(i + '0');
  5804  0AD5  0875               	movf	display_clock@i,w
  5805  0AD6  3E30               	addlw	48
  5806  0AD7  160A  118A  26E7  120A  158A  	fcall	_write_char
  5807                           
  5808                           ;clock_src.c: 73:      i=table1[0]&0x0f;
  5809  0ADC  0820               	movf	_table1,w
  5810  0ADD  390F               	andlw	15
  5811  0ADE  00F3               	movwf	??_display_clock
  5812  0ADF  01F4               	clrf	??_display_clock+1
  5813  0AE0  0873               	movf	??_display_clock,w
  5814  0AE1  00F5               	movwf	display_clock@i
  5815  0AE2  0874               	movf	??_display_clock+1,w
  5816  0AE3  00F6               	movwf	display_clock@i+1
  5817                           
  5818                           ;clock_src.c: 74:      write_char(i + '0');
  5819  0AE4  0875               	movf	display_clock@i,w
  5820  0AE5  3E30               	addlw	48
  5821  0AE6  160A  118A  26E7   	fcall	_write_char
  5822  0AE9  0008               	return
  5823  0AEA                     __end_of_display_clock:	
  5824                           
  5825                           	psect	text29
  5826  03D4                     __ptext29:	
  5827 ;; *************** function _date_settings *****************
  5828 ;; Defined at:
  5829 ;;		line 352 in file "Button_src.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 300/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5843 ;;      Params:         0       0       0       0       0
  5844 ;;      Locals:         0       0       0       0       0
  5845 ;;      Temps:          0       3       0       0       0
  5846 ;;      Totals:         0       3       0       0       0
  5847 ;;Total ram usage:        3 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    3
  5850 ;; This function calls:
  5851 ;;		_button_delay
  5852 ;;		_incrementor
  5853 ;;		_modulus_func
  5854 ;;		_set_time
  5855 ;;		_time_date_delimiter
  5856 ;;		_time_date_hex_terminator
  5857 ;;		_write_char
  5858 ;;		_write_cmd
  5859 ;; This function is called by:
  5860 ;;		_main
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           
  5865                           ;psect for function _date_settings
  5866  03D4                     _date_settings:	
  5867                           
  5868                           ;Button_src.c: 353:  RC0 = 0;
  5869                           
  5870                           ;incstack = 0
  5871                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5872  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  5873  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  5874  03D6  1007               	bcf	7,0	;volatile
  5875                           
  5876                           ;Button_src.c: 354:  RC1 = 1;
  5877  03D7  1487               	bsf	7,1	;volatile
  5878                           
  5879                           ;Button_src.c: 355:  RC2 = 1;
  5880  03D8  1507               	bsf	7,2	;volatile
  5881                           
  5882                           ;Button_src.c: 356:  RC3 = 1;
  5883  03D9  1587               	bsf	7,3	;volatile
  5884                           
  5885                           ;Button_src.c: 357:   if (RC4 == 0){
  5886  03DA  1A07               	btfsc	7,4	;volatile
  5887  03DB  0008               	return
  5888                           
  5889                           ;Button_src.c: 358:       write_cmd(0x1);
  5890  03DC  3001               	movlw	1
  5891  03DD  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  5892  03E2                     l574:	
  5893                           ;Button_src.c: 359:       for(;;){
  5894                           
  5895                           
  5896                           ;Button_src.c: 360:             write_cmd(0x80);
  5897  03E2  3080               	movlw	128
  5898  03E3  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  5899                           
  5900                           ;Button_src.c: 361:             write_char('D');
  5901  03E8  3044               	movlw	68
  5902  03E9  160A  118A  26E7  120A  118A  	fcall	_write_char
  5903                           
  5904                           ;Button_src.c: 362:             write_char('a');
  5905  03EE  3061               	movlw	97
  5906  03EF  160A  118A  26E7  120A  118A  	fcall	_write_char
  5907                           
  5908                           ;Button_src.c: 363:             write_char('t');
  5909  03F4  3074               	movlw	116
  5910  03F5  160A  118A  26E7  120A  118A  	fcall	_write_char
  5911                           
  5912                           ;Button_src.c: 364:             write_char('e');
  5913  03FA  3065               	movlw	101
  5914  03FB  160A  118A  26E7  120A  118A  	fcall	_write_char
  5915                           
  5916                           ;Button_src.c: 365:             write_char('_');
  5917  0400  305F               	movlw	95
  5918  0401  160A  118A  26E7  120A  118A  	fcall	_write_char
  5919                           
  5920                           ;Button_src.c: 366:             write_char('S');
  5921  0406  3053               	movlw	83
  5922  0407  160A  118A  26E7  120A  118A  	fcall	_write_char
  5923                           
  5924                           ;Button_src.c: 367:             write_char('e');
  5925  040C  3065               	movlw	101
  5926  040D  160A  118A  26E7  120A  118A  	fcall	_write_char
  5927                           
  5928                           ;Button_src.c: 368:             write_char('t');
  5929  0412  3074               	movlw	116
  5930  0413  160A  118A  26E7  120A  118A  	fcall	_write_char
  5931                           
  5932                           ;Button_src.c: 369:             write_char('t');
  5933  0418  3074               	movlw	116
  5934  0419  160A  118A  26E7  120A  118A  	fcall	_write_char
  5935                           
  5936                           ;Button_src.c: 370:             write_char('i');
  5937  041E  3069               	movlw	105
  5938  041F  160A  118A  26E7  120A  118A  	fcall	_write_char
  5939                           
  5940                           ;Button_src.c: 371:             write_char('n');
  5941  0424  306E               	movlw	110
  5942  0425  160A  118A  26E7  120A  118A  	fcall	_write_char
  5943                           
  5944                           ;Button_src.c: 372:             write_char('g');
  5945  042A  3067               	movlw	103
  5946  042B  160A  118A  26E7  120A  118A  	fcall	_write_char
  5947                           
  5948                           ;Button_src.c: 373:             write_char('s');
  5949  0430  3073               	movlw	115
  5950  0431  160A  118A  26E7  120A  118A  	fcall	_write_char
  5951                           
  5952                           ;Button_src.c: 374:             RC0 = 1;
  5953  0436  1407               	bsf	7,0	;volatile
  5954                           
  5955                           ;Button_src.c: 375:             RC1 = 0;
  5956  0437  1087               	bcf	7,1	;volatile
  5957                           
  5958                           ;Button_src.c: 376:             RC2 = 1;
  5959  0438  1507               	bsf	7,2	;volatile
  5960                           
  5961                           ;Button_src.c: 377:             RC3 = 1;
  5962  0439  1587               	bsf	7,3	;volatile
  5963                           
  5964                           ;Button_src.c: 378:             if(RC7 == 0 && b =='x'){
  5965  043A  1B87               	btfsc	7,7	;volatile
  5966  043B  2CAC               	goto	l3473
  5967  043C  3078               	movlw	120
  5968  043D  064C               	xorwf	_b,w
  5969  043E  1D03               	btfss	3,2
  5970  043F  2CAC               	goto	l3473
  5971                           
  5972                           ;Button_src.c: 379:                 if(stats == 1)
  5973  0440  032D               	decf	_stats,w
  5974  0441  042E               	iorwf	_stats+1,w
  5975  0442  1D03               	btfss	3,2
  5976  0443  2C48               	goto	l576
  5977                           
  5978                           ;Button_src.c: 380:                     a++;
  5979  0444  3001               	movlw	1
  5980  0445  00DD               	movwf	??_date_settings
  5981  0446  085D               	movf	??_date_settings,w
  5982  0447  07CD               	addwf	_a,f
  5983  0448                     l576:	
  5984                           
  5985                           ;Button_src.c: 381:                 if(stats == 0){
  5986  0448  082D               	movf	_stats,w
  5987  0449  042E               	iorwf	_stats+1,w
  5988  044A  1D03               	btfss	3,2
  5989  044B  2C50               	goto	l577
  5990                           
  5991                           ;Button_src.c: 382:                     stats = 1;
  5992  044C  3001               	movlw	1
  5993  044D  00AD               	movwf	_stats
  5994  044E  3000               	movlw	0
  5995  044F  00AE               	movwf	_stats+1
  5996  0450                     l577:	
  5997                           ;Button_src.c: 383:                 }
  5998                           
  5999                           
  6000                           ;Button_src.c: 385:                     x++ ;
  6001  0450  3001               	movlw	1
  6002  0451  07B9               	addwf	_x,f
  6003  0452  1803               	skipnc
  6004  0453  0ABA               	incf	_x+1,f
  6005  0454  3000               	movlw	0
  6006  0455  07BA               	addwf	_x+1,f
  6007                           
  6008                           ;Button_src.c: 386:                     x = modulus_func(x,10);
  6009  0456  083A               	movf	_x+1,w
  6010  0457  00F8               	movwf	modulus_func@x+1
  6011  0458  0839               	movf	_x,w
  6012  0459  00F7               	movwf	modulus_func@x
  6013  045A  300A               	movlw	10
  6014  045B  00F9               	movwf	modulus_func@y
  6015  045C  3000               	movlw	0
  6016  045D  00FA               	movwf	modulus_func@y+1
  6017  045E  160A  118A  2674  120A  118A  	fcall	_modulus_func
  6018  0463  0878               	movf	?_modulus_func+1,w
  6019  0464  00BA               	movwf	_x+1
  6020  0465  0877               	movf	?_modulus_func,w
  6021  0466  00B9               	movwf	_x
  6022                           
  6023                           ;Button_src.c: 387:                      if (p == 1){
  6024  0467  032B               	decf	_p,w
  6025  0468  042C               	iorwf	_p+1,w
  6026  0469  1D03               	btfss	3,2
  6027  046A  2C84               	goto	l3459
  6028                           
  6029                           ;Button_src.c: 388:                         y = incrementor(y,x,'0');
  6030  046B  0838               	movf	_y+1,w
  6031  046C  00D9               	movwf	incrementor@upper_val+1
  6032  046D  0837               	movf	_y,w
  6033  046E  00D8               	movwf	incrementor@upper_val
  6034  046F  083A               	movf	_x+1,w
  6035  0470  00DB               	movwf	incrementor@lower_val+1
  6036  0471  0839               	movf	_x,w
  6037  0472  00DA               	movwf	incrementor@lower_val
  6038  0473  3030               	movlw	48
  6039  0474  00DD               	movwf	??_date_settings
  6040  0475  085D               	movf	??_date_settings,w
  6041  0476  00DC               	movwf	incrementor@z
  6042  0477  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6043  047C  00DE               	movwf	??_date_settings+1
  6044  047D  01DF               	clrf	??_date_settings+2
  6045  047E  085E               	movf	??_date_settings+1,w
  6046  047F  00B7               	movwf	_y
  6047  0480  085F               	movf	??_date_settings+2,w
  6048  0481  00B8               	movwf	_y+1
  6049                           
  6050                           ;Button_src.c: 389:                         p = 0;
  6051  0482  01AB               	clrf	_p
  6052  0483  01AC               	clrf	_p+1
  6053  0484                     l3459:	
  6054                           
  6055                           ;Button_src.c: 391:                     if (x == 9){
  6056  0484  3009               	movlw	9
  6057  0485  0639               	xorwf	_x,w
  6058  0486  043A               	iorwf	_x+1,w
  6059  0487  1D03               	btfss	3,2
  6060  0488  2C8D               	goto	l3463
  6061                           
  6062                           ;Button_src.c: 392:                         p = 1;
  6063  0489  3001               	movlw	1
  6064  048A  00AB               	movwf	_p
  6065  048B  3000               	movlw	0
  6066  048C  00AC               	movwf	_p+1
  6067  048D                     l3463:	
  6068                           
  6069                           ;Button_src.c: 394:                     a = time_date_hex_terminator(a,'C');
  6070  048D  3043               	movlw	67
  6071  048E  00DD               	movwf	??_date_settings
  6072  048F  085D               	movf	??_date_settings,w
  6073  0490  00F0               	movwf	time_date_hex_terminator@limiter
  6074  0491  084D               	movf	_a,w
  6075  0492  160A  118A  2656  120A  118A  	fcall	_time_date_hex_terminator
  6076  0497  00DE               	movwf	??_date_settings+1
  6077  0498  085E               	movf	??_date_settings+1,w
  6078  0499  00CD               	movwf	_a
  6079                           
  6080                           ;Button_src.c: 396:                     if(y == 1 && x == 3){
  6081  049A  0337               	decf	_y,w
  6082  049B  0438               	iorwf	_y+1,w
  6083  049C  1D03               	btfss	3,2
  6084  049D  2CA7               	goto	l3471
  6085  049E  3003               	movlw	3
  6086  049F  0639               	xorwf	_x,w
  6087  04A0  043A               	iorwf	_x+1,w
  6088  04A1  1D03               	btfss	3,2
  6089  04A2  2CA7               	goto	l3471
  6090                           
  6091                           ;Button_src.c: 397:                         x = 0;
  6092  04A3  01B9               	clrf	_x
  6093  04A4  01BA               	clrf	_x+1
  6094                           
  6095                           ;Button_src.c: 398:                         y = 0;
  6096  04A5  01B7               	clrf	_y
  6097  04A6  01B8               	clrf	_y+1
  6098  04A7                     l3471:	
  6099                           
  6100                           ;Button_src.c: 400:                     button_delay();
  6101  04A7  160A  118A  2695  120A  118A  	fcall	_button_delay
  6102  04AC                     l3473:	
  6103                           
  6104                           ;Button_src.c: 402:             if(RC7==0 && b == 'y'){
  6105  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  6106  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  6107  04AE  1B87               	btfsc	7,7	;volatile
  6108  04AF  2D32               	goto	l3507
  6109  04B0  3079               	movlw	121
  6110  04B1  064C               	xorwf	_b,w
  6111  04B2  1D03               	btfss	3,2
  6112  04B3  2D32               	goto	l3507
  6113                           
  6114                           ;Button_src.c: 403:                  if(stats == 1)
  6115  04B4  032D               	decf	_stats,w
  6116  04B5  042E               	iorwf	_stats+1,w
  6117  04B6  1D03               	btfss	3,2
  6118  04B7  2CBC               	goto	l582
  6119                           
  6120                           ;Button_src.c: 404:                     day_hex++;
  6121  04B8  3001               	movlw	1
  6122  04B9  00DD               	movwf	??_date_settings
  6123  04BA  085D               	movf	??_date_settings,w
  6124  04BB  07CA               	addwf	_day_hex,f
  6125  04BC                     l582:	
  6126                           
  6127                           ;Button_src.c: 405:                 if(stats == 0){
  6128  04BC  082D               	movf	_stats,w
  6129  04BD  042E               	iorwf	_stats+1,w
  6130  04BE  1D03               	btfss	3,2
  6131  04BF  2CC4               	goto	l583
  6132                           
  6133                           ;Button_src.c: 406:                     stats = 1;
  6134  04C0  3001               	movlw	1
  6135  04C1  00AD               	movwf	_stats
  6136  04C2  3000               	movlw	0
  6137  04C3  00AE               	movwf	_stats+1
  6138  04C4                     l583:	
  6139                           ;Button_src.c: 407:                 }
  6140                           
  6141                           
  6142                           ;Button_src.c: 409:                     day_low++;
  6143  04C4  3001               	movlw	1
  6144  04C5  07B3               	addwf	_day_low,f
  6145  04C6  1803               	skipnc
  6146  04C7  0AB4               	incf	_day_low+1,f
  6147  04C8  3000               	movlw	0
  6148  04C9  07B4               	addwf	_day_low+1,f
  6149                           
  6150                           ;Button_src.c: 410:                     day_low = modulus_func(day_low,10);
  6151  04CA  0834               	movf	_day_low+1,w
  6152  04CB  00F8               	movwf	modulus_func@x+1
  6153  04CC  0833               	movf	_day_low,w
  6154  04CD  00F7               	movwf	modulus_func@x
  6155  04CE  300A               	movlw	10
  6156  04CF  00F9               	movwf	modulus_func@y
  6157  04D0  3000               	movlw	0
  6158  04D1  00FA               	movwf	modulus_func@y+1
  6159  04D2  160A  118A  2674  120A  118A  	fcall	_modulus_func
  6160  04D7  0878               	movf	?_modulus_func+1,w
  6161  04D8  00B4               	movwf	_day_low+1
  6162  04D9  0877               	movf	?_modulus_func,w
  6163  04DA  00B3               	movwf	_day_low
  6164                           
  6165                           ;Button_src.c: 411:                     day_counter = modulus_func(day_low,8);
  6166  04DB  0834               	movf	_day_low+1,w
  6167  04DC  00F8               	movwf	modulus_func@x+1
  6168  04DD  0833               	movf	_day_low,w
  6169  04DE  00F7               	movwf	modulus_func@x
  6170  04DF  3008               	movlw	8
  6171  04E0  00F9               	movwf	modulus_func@y
  6172  04E1  3000               	movlw	0
  6173  04E2  00FA               	movwf	modulus_func@y+1
  6174  04E3  160A  118A  2674  120A  118A  	fcall	_modulus_func
  6175  04E8  0878               	movf	?_modulus_func+1,w
  6176  04E9  00A8               	movwf	_day_counter+1
  6177  04EA  0877               	movf	?_modulus_func,w
  6178  04EB  00A7               	movwf	_day_counter
  6179                           
  6180                           ;Button_src.c: 412:                     if (p == 1){
  6181  04EC  032B               	decf	_p,w
  6182  04ED  042C               	iorwf	_p+1,w
  6183  04EE  1D03               	btfss	3,2
  6184  04EF  2D09               	goto	l3493
  6185                           
  6186                           ;Button_src.c: 413:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6187  04F0  0832               	movf	_day_high+1,w
  6188  04F1  00D9               	movwf	incrementor@upper_val+1
  6189  04F2  0831               	movf	_day_high,w
  6190  04F3  00D8               	movwf	incrementor@upper_val
  6191  04F4  0834               	movf	_day_low+1,w
  6192  04F5  00DB               	movwf	incrementor@lower_val+1
  6193  04F6  0833               	movf	_day_low,w
  6194  04F7  00DA               	movwf	incrementor@lower_val
  6195  04F8  3030               	movlw	48
  6196  04F9  00DD               	movwf	??_date_settings
  6197  04FA  085D               	movf	??_date_settings,w
  6198  04FB  00DC               	movwf	incrementor@z
  6199  04FC  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6200  0501  00DE               	movwf	??_date_settings+1
  6201  0502  01DF               	clrf	??_date_settings+2
  6202  0503  085E               	movf	??_date_settings+1,w
  6203  0504  00B1               	movwf	_day_high
  6204  0505  085F               	movf	??_date_settings+2,w
  6205  0506  00B2               	movwf	_day_high+1
  6206                           
  6207                           ;Button_src.c: 414:                         p = 0;
  6208  0507  01AB               	clrf	_p
  6209  0508  01AC               	clrf	_p+1
  6210  0509                     l3493:	
  6211                           
  6212                           ;Button_src.c: 416:                     if (day_low == 9){
  6213  0509  3009               	movlw	9
  6214  050A  0633               	xorwf	_day_low,w
  6215  050B  0434               	iorwf	_day_low+1,w
  6216  050C  1D03               	btfss	3,2
  6217  050D  2D12               	goto	l3497
  6218                           
  6219                           ;Button_src.c: 417:                         p = 1;
  6220  050E  3001               	movlw	1
  6221  050F  00AB               	movwf	_p
  6222  0510  3000               	movlw	0
  6223  0511  00AC               	movwf	_p+1
  6224  0512                     l3497:	
  6225                           
  6226                           ;Button_src.c: 419:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6227  0512  3063               	movlw	99
  6228  0513  00DD               	movwf	??_date_settings
  6229  0514  085D               	movf	??_date_settings,w
  6230  0515  00F0               	movwf	time_date_hex_terminator@limiter
  6231  0516  084A               	movf	_day_hex,w
  6232  0517  160A  118A  2656  120A  118A  	fcall	_time_date_hex_terminator
  6233  051C  00DE               	movwf	??_date_settings+1
  6234  051D  085E               	movf	??_date_settings+1,w
  6235  051E  00CA               	movwf	_day_hex
  6236                           
  6237                           ;Button_src.c: 420:                     if(day_high == 3 && day_low==2 ){
  6238  051F  3003               	movlw	3
  6239  0520  0631               	xorwf	_day_high,w
  6240  0521  0432               	iorwf	_day_high+1,w
  6241  0522  1D03               	btfss	3,2
  6242  0523  2D2D               	goto	l3505
  6243  0524  3002               	movlw	2
  6244  0525  0633               	xorwf	_day_low,w
  6245  0526  0434               	iorwf	_day_low+1,w
  6246  0527  1D03               	btfss	3,2
  6247  0528  2D2D               	goto	l3505
  6248                           
  6249                           ;Button_src.c: 421:                         day_high = 0;
  6250  0529  01B1               	clrf	_day_high
  6251  052A  01B2               	clrf	_day_high+1
  6252                           
  6253                           ;Button_src.c: 422:                         day_low = 0;
  6254  052B  01B3               	clrf	_day_low
  6255  052C  01B4               	clrf	_day_low+1
  6256  052D                     l3505:	
  6257                           
  6258                           ;Button_src.c: 424:                     button_delay();
  6259  052D  160A  118A  2695  120A  118A  	fcall	_button_delay
  6260  0532                     l3507:	
  6261                           
  6262                           ;Button_src.c: 426:             if(RC7==0 && b == 'z'){
  6263  0532  1283               	bcf	3,5	;RP0=0, select bank0
  6264  0533  1303               	bcf	3,6	;RP1=0, select bank0
  6265  0534  1B87               	btfsc	7,7	;volatile
  6266  0535  2D99               	goto	l3539
  6267  0536  307A               	movlw	122
  6268  0537  064C               	xorwf	_b,w
  6269  0538  1D03               	btfss	3,2
  6270  0539  2D99               	goto	l3539
  6271                           
  6272                           ;Button_src.c: 427:                 if(stats == 1)
  6273  053A  032D               	decf	_stats,w
  6274  053B  042E               	iorwf	_stats+1,w
  6275  053C  1D03               	btfss	3,2
  6276  053D  2D42               	goto	l588
  6277                           
  6278                           ;Button_src.c: 428:                    c++;
  6279  053E  3001               	movlw	1
  6280  053F  00DD               	movwf	??_date_settings
  6281  0540  085D               	movf	??_date_settings,w
  6282  0541  07CB               	addwf	_c,f
  6283  0542                     l588:	
  6284                           
  6285                           ;Button_src.c: 429:                 if(stats == 0){
  6286  0542  082D               	movf	_stats,w
  6287  0543  042E               	iorwf	_stats+1,w
  6288  0544  1D03               	btfss	3,2
  6289  0545  2D4A               	goto	l589
  6290                           
  6291                           ;Button_src.c: 430:                     stats = 1;
  6292  0546  3001               	movlw	1
  6293  0547  00AD               	movwf	_stats
  6294  0548  3000               	movlw	0
  6295  0549  00AE               	movwf	_stats+1
  6296  054A                     l589:	
  6297                           ;Button_src.c: 431:                 }
  6298                           
  6299                           
  6300                           ;Button_src.c: 433:                     t++;
  6301  054A  3001               	movlw	1
  6302  054B  07BD               	addwf	_t,f
  6303  054C  1803               	skipnc
  6304  054D  0ABE               	incf	_t+1,f
  6305  054E  3000               	movlw	0
  6306  054F  07BE               	addwf	_t+1,f
  6307                           
  6308                           ;Button_src.c: 434:                     t = modulus_func(t,10);
  6309  0550  083E               	movf	_t+1,w
  6310  0551  00F8               	movwf	modulus_func@x+1
  6311  0552  083D               	movf	_t,w
  6312  0553  00F7               	movwf	modulus_func@x
  6313  0554  300A               	movlw	10
  6314  0555  00F9               	movwf	modulus_func@y
  6315  0556  3000               	movlw	0
  6316  0557  00FA               	movwf	modulus_func@y+1
  6317  0558  160A  118A  2674  120A  118A  	fcall	_modulus_func
  6318  055D  0878               	movf	?_modulus_func+1,w
  6319  055E  00BE               	movwf	_t+1
  6320  055F  0877               	movf	?_modulus_func,w
  6321  0560  00BD               	movwf	_t
  6322                           
  6323                           ;Button_src.c: 435:                      if (p == 1){
  6324  0561  032B               	decf	_p,w
  6325  0562  042C               	iorwf	_p+1,w
  6326  0563  1D03               	btfss	3,2
  6327  0564  2D7E               	goto	l3525
  6328                           
  6329                           ;Button_src.c: 436:                         w = incrementor(w,t,'0');
  6330  0565  083C               	movf	_w+1,w
  6331  0566  00D9               	movwf	incrementor@upper_val+1
  6332  0567  083B               	movf	_w,w
  6333  0568  00D8               	movwf	incrementor@upper_val
  6334  0569  083E               	movf	_t+1,w
  6335  056A  00DB               	movwf	incrementor@lower_val+1
  6336  056B  083D               	movf	_t,w
  6337  056C  00DA               	movwf	incrementor@lower_val
  6338  056D  3030               	movlw	48
  6339  056E  00DD               	movwf	??_date_settings
  6340  056F  085D               	movf	??_date_settings,w
  6341  0570  00DC               	movwf	incrementor@z
  6342  0571  160A  118A  27B8  120A  118A  	fcall	_incrementor
  6343  0576  00DE               	movwf	??_date_settings+1
  6344  0577  01DF               	clrf	??_date_settings+2
  6345  0578  085E               	movf	??_date_settings+1,w
  6346  0579  00BB               	movwf	_w
  6347  057A  085F               	movf	??_date_settings+2,w
  6348  057B  00BC               	movwf	_w+1
  6349                           
  6350                           ;Button_src.c: 437:                         p = 0;
  6351  057C  01AB               	clrf	_p
  6352  057D  01AC               	clrf	_p+1
  6353  057E                     l3525:	
  6354                           
  6355                           ;Button_src.c: 439:                     if (t == 9){
  6356  057E  3009               	movlw	9
  6357  057F  063D               	xorwf	_t,w
  6358  0580  043E               	iorwf	_t+1,w
  6359  0581  1D03               	btfss	3,2
  6360  0582  2D87               	goto	l3529
  6361                           
  6362                           ;Button_src.c: 440:                         p = 1;
  6363  0583  3001               	movlw	1
  6364  0584  00AB               	movwf	_p
  6365  0585  3000               	movlw	0
  6366  0586  00AC               	movwf	_p+1
  6367  0587                     l3529:	
  6368                           
  6369                           ;Button_src.c: 443:                      if(c == (0x59 + 1)){
  6370  0587  305A               	movlw	90
  6371  0588  064B               	xorwf	_c,w
  6372  0589  1903               	btfsc	3,2
  6373                           
  6374                           ;Button_src.c: 444:                         c = 0x00;
  6375  058A  01CB               	clrf	_c
  6376                           
  6377                           ;Button_src.c: 446:                     if(w == 6){
  6378  058B  3006               	movlw	6
  6379  058C  063B               	xorwf	_w,w
  6380  058D  043C               	iorwf	_w+1,w
  6381  058E  1D03               	btfss	3,2
  6382  058F  2D94               	goto	l3537
  6383                           
  6384                           ;Button_src.c: 447:                         w = 0;
  6385  0590  01BB               	clrf	_w
  6386  0591  01BC               	clrf	_w+1
  6387                           
  6388                           ;Button_src.c: 448:                         t = 0;
  6389  0592  01BD               	clrf	_t
  6390  0593  01BE               	clrf	_t+1
  6391  0594                     l3537:	
  6392                           
  6393                           ;Button_src.c: 450:                     button_delay();
  6394  0594  160A  118A  2695  120A  118A  	fcall	_button_delay
  6395  0599                     l3539:	
  6396                           
  6397                           ;Button_src.c: 457:                     a = time_date_delimiter(a,0x11,'9');
  6398  0599  3011               	movlw	17
  6399  059A  1283               	bcf	3,5	;RP0=0, select bank0
  6400  059B  1303               	bcf	3,6	;RP1=0, select bank0
  6401  059C  00DD               	movwf	??_date_settings
  6402  059D  085D               	movf	??_date_settings,w
  6403  059E  00F0               	movwf	time_date_delimiter@hex
  6404  059F  3039               	movlw	57
  6405  05A0  00DE               	movwf	??_date_settings+1
  6406  05A1  085E               	movf	??_date_settings+1,w
  6407  05A2  00F1               	movwf	time_date_delimiter@limiter
  6408  05A3  084D               	movf	_a,w
  6409  05A4  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6410  05A9  00DF               	movwf	??_date_settings+2
  6411  05AA  085F               	movf	??_date_settings+2,w
  6412  05AB  00CD               	movwf	_a
  6413                           
  6414                           ;Button_src.c: 459:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6415  05AC  3011               	movlw	17
  6416  05AD  00DD               	movwf	??_date_settings
  6417  05AE  085D               	movf	??_date_settings,w
  6418  05AF  00F0               	movwf	time_date_delimiter@hex
  6419  05B0  3039               	movlw	57
  6420  05B1  00DE               	movwf	??_date_settings+1
  6421  05B2  085E               	movf	??_date_settings+1,w
  6422  05B3  00F1               	movwf	time_date_delimiter@limiter
  6423  05B4  084A               	movf	_day_hex,w
  6424  05B5  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6425  05BA  00DF               	movwf	??_date_settings+2
  6426  05BB  085F               	movf	??_date_settings+2,w
  6427  05BC  00CA               	movwf	_day_hex
  6428                           
  6429                           ;Button_src.c: 460:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6430  05BD  3021               	movlw	33
  6431  05BE  00DD               	movwf	??_date_settings
  6432  05BF  085D               	movf	??_date_settings,w
  6433  05C0  00F0               	movwf	time_date_delimiter@hex
  6434  05C1  304A               	movlw	74
  6435  05C2  00DE               	movwf	??_date_settings+1
  6436  05C3  085E               	movf	??_date_settings+1,w
  6437  05C4  00F1               	movwf	time_date_delimiter@limiter
  6438  05C5  084A               	movf	_day_hex,w
  6439  05C6  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6440  05CB  00DF               	movwf	??_date_settings+2
  6441  05CC  085F               	movf	??_date_settings+2,w
  6442  05CD  00CA               	movwf	_day_hex
  6443                           
  6444                           ;Button_src.c: 461:                     day_hex = time_date_delimiter(day_hex,0x11,'9');
  6445  05CE  3011               	movlw	17
  6446  05CF  00DD               	movwf	??_date_settings
  6447  05D0  085D               	movf	??_date_settings,w
  6448  05D1  00F0               	movwf	time_date_delimiter@hex
  6449  05D2  3039               	movlw	57
  6450  05D3  00DE               	movwf	??_date_settings+1
  6451  05D4  085E               	movf	??_date_settings+1,w
  6452  05D5  00F1               	movwf	time_date_delimiter@limiter
  6453  05D6  084A               	movf	_day_hex,w
  6454  05D7  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6455  05DC  00DF               	movwf	??_date_settings+2
  6456  05DD  085F               	movf	??_date_settings+2,w
  6457  05DE  00CA               	movwf	_day_hex
  6458                           
  6459                           ;Button_src.c: 462:                     day_hex = time_date_delimiter(day_hex,0x21,'J');
  6460  05DF  3021               	movlw	33
  6461  05E0  00DD               	movwf	??_date_settings
  6462  05E1  085D               	movf	??_date_settings,w
  6463  05E2  00F0               	movwf	time_date_delimiter@hex
  6464  05E3  304A               	movlw	74
  6465  05E4  00DE               	movwf	??_date_settings+1
  6466  05E5  085E               	movf	??_date_settings+1,w
  6467  05E6  00F1               	movwf	time_date_delimiter@limiter
  6468  05E7  084A               	movf	_day_hex,w
  6469  05E8  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6470  05ED  00DF               	movwf	??_date_settings+2
  6471  05EE  085F               	movf	??_date_settings+2,w
  6472  05EF  00CA               	movwf	_day_hex
  6473                           
  6474                           ;Button_src.c: 463:                     day_hex = time_date_delimiter(day_hex,0x31,'Y');
  6475  05F0  3031               	movlw	49
  6476  05F1  00DD               	movwf	??_date_settings
  6477  05F2  085D               	movf	??_date_settings,w
  6478  05F3  00F0               	movwf	time_date_delimiter@hex
  6479  05F4  3059               	movlw	89
  6480  05F5  00DE               	movwf	??_date_settings+1
  6481  05F6  085E               	movf	??_date_settings+1,w
  6482  05F7  00F1               	movwf	time_date_delimiter@limiter
  6483  05F8  084A               	movf	_day_hex,w
  6484  05F9  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6485  05FE  00DF               	movwf	??_date_settings+2
  6486  05FF  085F               	movf	??_date_settings+2,w
  6487  0600  00CA               	movwf	_day_hex
  6488                           
  6489                           ;Button_src.c: 465:                     c = time_date_delimiter(c,0x11,'9');
  6490  0601  3011               	movlw	17
  6491  0602  00DD               	movwf	??_date_settings
  6492  0603  085D               	movf	??_date_settings,w
  6493  0604  00F0               	movwf	time_date_delimiter@hex
  6494  0605  3039               	movlw	57
  6495  0606  00DE               	movwf	??_date_settings+1
  6496  0607  085E               	movf	??_date_settings+1,w
  6497  0608  00F1               	movwf	time_date_delimiter@limiter
  6498  0609  084B               	movf	_c,w
  6499  060A  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6500  060F  00DF               	movwf	??_date_settings+2
  6501  0610  085F               	movf	??_date_settings+2,w
  6502  0611  00CB               	movwf	_c
  6503                           
  6504                           ;Button_src.c: 466:                     c = time_date_delimiter(c,0x21,'J');
  6505  0612  3021               	movlw	33
  6506  0613  00DD               	movwf	??_date_settings
  6507  0614  085D               	movf	??_date_settings,w
  6508  0615  00F0               	movwf	time_date_delimiter@hex
  6509  0616  304A               	movlw	74
  6510  0617  00DE               	movwf	??_date_settings+1
  6511  0618  085E               	movf	??_date_settings+1,w
  6512  0619  00F1               	movwf	time_date_delimiter@limiter
  6513  061A  084B               	movf	_c,w
  6514  061B  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6515  0620  00DF               	movwf	??_date_settings+2
  6516  0621  085F               	movf	??_date_settings+2,w
  6517  0622  00CB               	movwf	_c
  6518                           
  6519                           ;Button_src.c: 467:                     c = time_date_delimiter(c,0x11,'9');
  6520  0623  3011               	movlw	17
  6521  0624  00DD               	movwf	??_date_settings
  6522  0625  085D               	movf	??_date_settings,w
  6523  0626  00F0               	movwf	time_date_delimiter@hex
  6524  0627  3039               	movlw	57
  6525  0628  00DE               	movwf	??_date_settings+1
  6526  0629  085E               	movf	??_date_settings+1,w
  6527  062A  00F1               	movwf	time_date_delimiter@limiter
  6528  062B  084B               	movf	_c,w
  6529  062C  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6530  0631  00DF               	movwf	??_date_settings+2
  6531  0632  085F               	movf	??_date_settings+2,w
  6532  0633  00CB               	movwf	_c
  6533                           
  6534                           ;Button_src.c: 468:                     c = time_date_delimiter(c,0x21,'J');
  6535  0634  3021               	movlw	33
  6536  0635  00DD               	movwf	??_date_settings
  6537  0636  085D               	movf	??_date_settings,w
  6538  0637  00F0               	movwf	time_date_delimiter@hex
  6539  0638  304A               	movlw	74
  6540  0639  00DE               	movwf	??_date_settings+1
  6541  063A  085E               	movf	??_date_settings+1,w
  6542  063B  00F1               	movwf	time_date_delimiter@limiter
  6543  063C  084B               	movf	_c,w
  6544  063D  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6545  0642  00DF               	movwf	??_date_settings+2
  6546  0643  085F               	movf	??_date_settings+2,w
  6547  0644  00CB               	movwf	_c
  6548                           
  6549                           ;Button_src.c: 469:                     c = time_date_delimiter(c,0x31,'Y');
  6550  0645  3031               	movlw	49
  6551  0646  00DD               	movwf	??_date_settings
  6552  0647  085D               	movf	??_date_settings,w
  6553  0648  00F0               	movwf	time_date_delimiter@hex
  6554  0649  3059               	movlw	89
  6555  064A  00DE               	movwf	??_date_settings+1
  6556  064B  085E               	movf	??_date_settings+1,w
  6557  064C  00F1               	movwf	time_date_delimiter@limiter
  6558  064D  084B               	movf	_c,w
  6559  064E  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6560  0653  00DF               	movwf	??_date_settings+2
  6561  0654  085F               	movf	??_date_settings+2,w
  6562  0655  00CB               	movwf	_c
  6563                           
  6564                           ;Button_src.c: 470:                     c = time_date_delimiter(c,0x41,'j');
  6565  0656  3041               	movlw	65
  6566  0657  00DD               	movwf	??_date_settings
  6567  0658  085D               	movf	??_date_settings,w
  6568  0659  00F0               	movwf	time_date_delimiter@hex
  6569  065A  306A               	movlw	106
  6570  065B  00DE               	movwf	??_date_settings+1
  6571  065C  085E               	movf	??_date_settings+1,w
  6572  065D  00F1               	movwf	time_date_delimiter@limiter
  6573  065E  084B               	movf	_c,w
  6574  065F  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6575  0664  00DF               	movwf	??_date_settings+2
  6576  0665  085F               	movf	??_date_settings+2,w
  6577  0666  00CB               	movwf	_c
  6578                           
  6579                           ;Button_src.c: 471:                     c = time_date_delimiter(c,0x51,'z');
  6580  0667  3051               	movlw	81
  6581  0668  00DD               	movwf	??_date_settings
  6582  0669  085D               	movf	??_date_settings,w
  6583  066A  00F0               	movwf	time_date_delimiter@hex
  6584  066B  307A               	movlw	122
  6585  066C  00DE               	movwf	??_date_settings+1
  6586  066D  085E               	movf	??_date_settings+1,w
  6587  066E  00F1               	movwf	time_date_delimiter@limiter
  6588  066F  084B               	movf	_c,w
  6589  0670  160A  118A  2715  120A  118A  	fcall	_time_date_delimiter
  6590  0675  00DF               	movwf	??_date_settings+2
  6591  0676  085F               	movf	??_date_settings+2,w
  6592  0677  00CB               	movwf	_c
  6593                           
  6594                           ;Button_src.c: 473:                     if(stats==0)
  6595  0678  082D               	movf	_stats,w
  6596  0679  042E               	iorwf	_stats+1,w
  6597  067A  1D03               	btfss	3,2
  6598  067B  2E7E               	goto	l3569
  6599                           
  6600                           ;Button_src.c: 474:                         table[4] = prev_hex;
  6601  067C  0848               	movf	_prev_hex,w
  6602  067D  2E83               	goto	L2
  6603  067E                     l3569:	
  6604  067E  032D               	decf	_stats,w
  6605  067F  042E               	iorwf	_stats+1,w
  6606  0680  1D03               	btfss	3,2
  6607  0681  2E86               	goto	l595
  6608                           
  6609                           ;Button_src.c: 476:                         table[4]= a;
  6610  0682  084D               	movf	_a,w
  6611  0683                     L2:	
  6612  0683  00DD               	movwf	??_date_settings
  6613  0684  085D               	movf	??_date_settings,w
  6614  0685  00E8               	movwf	_table+4
  6615  0686                     l595:	
  6616                           
  6617                           ;Button_src.c: 477:              table[6] = c;
  6618  0686  084B               	movf	_c,w
  6619  0687  00DD               	movwf	??_date_settings
  6620  0688  085D               	movf	??_date_settings,w
  6621  0689  00EA               	movwf	_table+6
  6622                           
  6623                           ;Button_src.c: 478:              table[3] = day_hex;
  6624  068A  084A               	movf	_day_hex,w
  6625  068B  00DD               	movwf	??_date_settings
  6626  068C  085D               	movf	??_date_settings,w
  6627  068D  00E7               	movwf	_table+3
  6628                           
  6629                           ;Button_src.c: 479:              write_cmd(0x88);
  6630  068E  3088               	movlw	136
  6631  068F  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  6632                           
  6633                           ;Button_src.c: 481:                   RC0 = 0;
  6634  0694  1007               	bcf	7,0	;volatile
  6635                           
  6636                           ;Button_src.c: 482:                   RC1 = 1;
  6637  0695  1487               	bsf	7,1	;volatile
  6638                           
  6639                           ;Button_src.c: 483:                   RC2 = 1;
  6640  0696  1507               	bsf	7,2	;volatile
  6641                           
  6642                           ;Button_src.c: 484:                   RC3 = 1;
  6643  0697  1587               	bsf	7,3	;volatile
  6644                           
  6645                           ;Button_src.c: 486:                     if (RC6 == 0 ){
  6646  0698  1B07               	btfsc	7,6	;volatile
  6647  0699  2EB3               	goto	l597
  6648                           
  6649                           ;Button_src.c: 487:                           a = 0x00;
  6650  069A  01CD               	clrf	_a
  6651                           
  6652                           ;Button_src.c: 488:                           c = 0x00;
  6653  069B  01CB               	clrf	_c
  6654                           
  6655                           ;Button_src.c: 489:                           day_hex = 0x00;
  6656  069C  01CA               	clrf	_day_hex
  6657                           
  6658                           ;Button_src.c: 490:                           day_high = 0;
  6659  069D  01B1               	clrf	_day_high
  6660  069E  01B2               	clrf	_day_high+1
  6661                           
  6662                           ;Button_src.c: 491:                           day_low = 0;
  6663  069F  01B3               	clrf	_day_low
  6664  06A0  01B4               	clrf	_day_low+1
  6665                           
  6666                           ;Button_src.c: 492:                           x = 0;
  6667  06A1  01B9               	clrf	_x
  6668  06A2  01BA               	clrf	_x+1
  6669                           
  6670                           ;Button_src.c: 493:                           y = 0;
  6671  06A3  01B7               	clrf	_y
  6672  06A4  01B8               	clrf	_y+1
  6673                           
  6674                           ;Button_src.c: 494:                           w = 0;
  6675  06A5  01BB               	clrf	_w
  6676  06A6  01BC               	clrf	_w+1
  6677                           
  6678                           ;Button_src.c: 495:                           t = 0;
  6679  06A7  01BD               	clrf	_t
  6680  06A8  01BE               	clrf	_t+1
  6681                           
  6682                           ;Button_src.c: 496:                           write_cmd(0x1);
  6683  06A9  3001               	movlw	1
  6684  06AA  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  6685                           
  6686                           ;Button_src.c: 497:                           set_time();
  6687  06AF  120A  158A  2045   	fcall	_set_time
  6688  06B2  0008               	return
  6689  06B3                     l597:	
  6690                           ;Button_src.c: 499:                             }
  6691                           
  6692                           
  6693                           ;Button_src.c: 500:                   RC0 = 0;
  6694  06B3  1007               	bcf	7,0	;volatile
  6695                           
  6696                           ;Button_src.c: 501:                   RC1 = 1;
  6697  06B4  1487               	bsf	7,1	;volatile
  6698                           
  6699                           ;Button_src.c: 502:                   RC2 = 1;
  6700  06B5  1507               	bsf	7,2	;volatile
  6701                           
  6702                           ;Button_src.c: 503:                   RC3 = 1;
  6703  06B6  1587               	bsf	7,3	;volatile
  6704                           
  6705                           ;Button_src.c: 504:                   z = modulus_func(z,3);
  6706  06B7  0836               	movf	_z+1,w
  6707  06B8  00F8               	movwf	modulus_func@x+1
  6708  06B9  0835               	movf	_z,w
  6709  06BA  00F7               	movwf	modulus_func@x
  6710  06BB  3003               	movlw	3
  6711  06BC  00F9               	movwf	modulus_func@y
  6712  06BD  3000               	movlw	0
  6713  06BE  00FA               	movwf	modulus_func@y+1
  6714  06BF  160A  118A  2674  120A  118A  	fcall	_modulus_func
  6715  06C4  0878               	movf	?_modulus_func+1,w
  6716  06C5  00B6               	movwf	_z+1
  6717  06C6  0877               	movf	?_modulus_func,w
  6718  06C7  00B5               	movwf	_z
  6719                           
  6720                           ;Button_src.c: 505:                   if(RC4 == 0 && z ==0){
  6721  06C8  1A07               	btfsc	7,4	;volatile
  6722  06C9  2F09               	goto	l3605
  6723  06CA  0835               	movf	_z,w
  6724  06CB  0436               	iorwf	_z+1,w
  6725  06CC  1D03               	btfss	3,2
  6726  06CD  2F09               	goto	l3605
  6727                           
  6728                           ;Button_src.c: 506:                       write_cmd(0x90);
  6729  06CE  3090               	movlw	144
  6730  06CF  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  6731                           
  6732                           ;Button_src.c: 507:                       write_char('D');
  6733  06D4  3044               	movlw	68
  6734  06D5  160A  118A  26E7  120A  118A  	fcall	_write_char
  6735                           
  6736                           ;Button_src.c: 508:                       write_char('a');
  6737  06DA  3061               	movlw	97
  6738  06DB  160A  118A  26E7  120A  118A  	fcall	_write_char
  6739                           
  6740                           ;Button_src.c: 509:                       write_char('y');
  6741  06E0  3079               	movlw	121
  6742  06E1  160A  118A  26E7  120A  118A  	fcall	_write_char
  6743                           
  6744                           ;Button_src.c: 510:                       write_char(':');
  6745  06E6  303A               	movlw	58
  6746  06E7  160A  118A  26E7  120A  118A  	fcall	_write_char
  6747                           
  6748                           ;Button_src.c: 511:                       write_char(' ');
  6749  06EC  3020               	movlw	32
  6750  06ED  160A  118A  26E7  120A  118A  	fcall	_write_char
  6751                           
  6752                           ;Button_src.c: 512:                       write_char(' ');
  6753  06F2  3020               	movlw	32
  6754  06F3  160A  118A  26E7  120A  118A  	fcall	_write_char
  6755                           
  6756                           ;Button_src.c: 513:                       b = 'y';
  6757  06F8  3079               	movlw	121
  6758  06F9  00DD               	movwf	??_date_settings
  6759  06FA  085D               	movf	??_date_settings,w
  6760  06FB  00CC               	movwf	_b
  6761                           
  6762                           ;Button_src.c: 515:                       button_delay();
  6763  06FC  160A  118A  2695  120A  118A  	fcall	_button_delay
  6764                           
  6765                           ;Button_src.c: 516:                       z++;
  6766  0701  3001               	movlw	1
  6767  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6768  0703  1303               	bcf	3,6	;RP1=0, select bank0
  6769  0704  07B5               	addwf	_z,f
  6770  0705  1803               	skipnc
  6771  0706  0AB6               	incf	_z+1,f
  6772  0707  3000               	movlw	0
  6773  0708  07B6               	addwf	_z+1,f
  6774  0709                     l3605:	
  6775                           
  6776                           ;Button_src.c: 518:                   RC0 = 0;
  6777  0709  1007               	bcf	7,0	;volatile
  6778                           
  6779                           ;Button_src.c: 519:                   RC1 = 1;
  6780  070A  1487               	bsf	7,1	;volatile
  6781                           
  6782                           ;Button_src.c: 520:                   RC2 = 1;
  6783  070B  1507               	bsf	7,2	;volatile
  6784                           
  6785                           ;Button_src.c: 521:                   RC3 = 1;
  6786  070C  1587               	bsf	7,3	;volatile
  6787                           
  6788                           ;Button_src.c: 522:                   if(RC4 == 0&& z ==1){
  6789  070D  1A07               	btfsc	7,4	;volatile
  6790  070E  2F4C               	goto	l3635
  6791  070F  0335               	decf	_z,w
  6792  0710  0436               	iorwf	_z+1,w
  6793  0711  1D03               	btfss	3,2
  6794  0712  2F4C               	goto	l3635
  6795                           
  6796                           ;Button_src.c: 523:                       z++;
  6797  0713  3001               	movlw	1
  6798  0714  07B5               	addwf	_z,f
  6799  0715  1803               	skipnc
  6800  0716  0AB6               	incf	_z+1,f
  6801  0717  3000               	movlw	0
  6802  0718  07B6               	addwf	_z+1,f
  6803                           
  6804                           ;Button_src.c: 524:                       button_delay();
  6805  0719  160A  118A  2695  120A  118A  	fcall	_button_delay
  6806                           
  6807                           ;Button_src.c: 526:                       write_cmd(0x90);
  6808  071E  3090               	movlw	144
  6809  071F  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  6810                           
  6811                           ;Button_src.c: 527:                       write_char('M');
  6812  0724  304D               	movlw	77
  6813  0725  160A  118A  26E7  120A  118A  	fcall	_write_char
  6814                           
  6815                           ;Button_src.c: 528:                       write_char('o');
  6816  072A  306F               	movlw	111
  6817  072B  160A  118A  26E7  120A  118A  	fcall	_write_char
  6818                           
  6819                           ;Button_src.c: 529:                       write_char('n');
  6820  0730  306E               	movlw	110
  6821  0731  160A  118A  26E7  120A  118A  	fcall	_write_char
  6822                           
  6823                           ;Button_src.c: 530:                       write_char('t');
  6824  0736  3074               	movlw	116
  6825  0737  160A  118A  26E7  120A  118A  	fcall	_write_char
  6826                           
  6827                           ;Button_src.c: 531:                       write_char('h');
  6828  073C  3068               	movlw	104
  6829  073D  160A  118A  26E7  120A  118A  	fcall	_write_char
  6830                           
  6831                           ;Button_src.c: 532:                       write_char(':');
  6832  0742  303A               	movlw	58
  6833  0743  160A  118A  26E7  120A  118A  	fcall	_write_char
  6834                           
  6835                           ;Button_src.c: 533:                       b = 'x';
  6836  0748  3078               	movlw	120
  6837  0749  00DD               	movwf	??_date_settings
  6838  074A  085D               	movf	??_date_settings,w
  6839  074B  00CC               	movwf	_b
  6840  074C                     l3635:	
  6841                           
  6842                           ;Button_src.c: 536:                   RC0 = 0;
  6843  074C  1007               	bcf	7,0	;volatile
  6844                           
  6845                           ;Button_src.c: 537:                   RC1 = 1;
  6846  074D  1487               	bsf	7,1	;volatile
  6847                           
  6848                           ;Button_src.c: 538:                   RC2 = 1;
  6849  074E  1507               	bsf	7,2	;volatile
  6850                           
  6851                           ;Button_src.c: 539:                   RC3 = 1;
  6852  074F  1587               	bsf	7,3	;volatile
  6853                           
  6854                           ;Button_src.c: 540:                   if(RC4 == 0&& z ==2){
  6855  0750  1A07               	btfsc	7,4	;volatile
  6856  0751  2F92               	goto	l3665
  6857  0752  3002               	movlw	2
  6858  0753  0635               	xorwf	_z,w
  6859  0754  0436               	iorwf	_z+1,w
  6860  0755  1D03               	btfss	3,2
  6861  0756  2F92               	goto	l3665
  6862                           
  6863                           ;Button_src.c: 541:                       button_delay();
  6864  0757  160A  118A  2695  120A  118A  	fcall	_button_delay
  6865                           
  6866                           ;Button_src.c: 542:                       z++;
  6867  075C  3001               	movlw	1
  6868  075D  1283               	bcf	3,5	;RP0=0, select bank0
  6869  075E  1303               	bcf	3,6	;RP1=0, select bank0
  6870  075F  07B5               	addwf	_z,f
  6871  0760  1803               	skipnc
  6872  0761  0AB6               	incf	_z+1,f
  6873  0762  3000               	movlw	0
  6874  0763  07B6               	addwf	_z+1,f
  6875                           
  6876                           ;Button_src.c: 544:                       write_cmd(0x90);
  6877  0764  3090               	movlw	144
  6878  0765  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  6879                           
  6880                           ;Button_src.c: 545:                       write_char('Y');
  6881  076A  3059               	movlw	89
  6882  076B  160A  118A  26E7  120A  118A  	fcall	_write_char
  6883                           
  6884                           ;Button_src.c: 546:                       write_char('e');
  6885  0770  3065               	movlw	101
  6886  0771  160A  118A  26E7  120A  118A  	fcall	_write_char
  6887                           
  6888                           ;Button_src.c: 547:                       write_char('a');
  6889  0776  3061               	movlw	97
  6890  0777  160A  118A  26E7  120A  118A  	fcall	_write_char
  6891                           
  6892                           ;Button_src.c: 548:                       write_char('r');
  6893  077C  3072               	movlw	114
  6894  077D  160A  118A  26E7  120A  118A  	fcall	_write_char
  6895                           
  6896                           ;Button_src.c: 549:                       write_char(':');
  6897  0782  303A               	movlw	58
  6898  0783  160A  118A  26E7  120A  118A  	fcall	_write_char
  6899                           
  6900                           ;Button_src.c: 550:                       write_char(' ');
  6901  0788  3020               	movlw	32
  6902  0789  160A  118A  26E7  120A  118A  	fcall	_write_char
  6903                           
  6904                           ;Button_src.c: 551:                       b = 'z';
  6905  078E  307A               	movlw	122
  6906  078F  00DD               	movwf	??_date_settings
  6907  0790  085D               	movf	??_date_settings,w
  6908  0791  00CC               	movwf	_b
  6909  0792                     l3665:	
  6910                           
  6911                           ;Button_src.c: 554:               write_cmd(0x88);
  6912  0792  3088               	movlw	136
  6913  0793  160A  118A  26FE  120A  118A  	fcall	_write_cmd
  6914                           
  6915                           ;Button_src.c: 555:               write_char(day_high + '0');
  6916  0798  0831               	movf	_day_high,w
  6917  0799  3E30               	addlw	48
  6918  079A  160A  118A  26E7  120A  118A  	fcall	_write_char
  6919                           
  6920                           ;Button_src.c: 556:               write_char(day_low + '0');
  6921  079F  0833               	movf	_day_low,w
  6922  07A0  3E30               	addlw	48
  6923  07A1  160A  118A  26E7  120A  118A  	fcall	_write_char
  6924                           
  6925                           ;Button_src.c: 557:               write_char('/');
  6926  07A6  302F               	movlw	47
  6927  07A7  160A  118A  26E7  120A  118A  	fcall	_write_char
  6928                           
  6929                           ;Button_src.c: 558:               write_char(y + '0');
  6930  07AC  0837               	movf	_y,w
  6931  07AD  3E30               	addlw	48
  6932  07AE  160A  118A  26E7  120A  118A  	fcall	_write_char
  6933                           
  6934                           ;Button_src.c: 559:               write_char(x + '0');
  6935  07B3  0839               	movf	_x,w
  6936  07B4  3E30               	addlw	48
  6937  07B5  160A  118A  26E7  120A  118A  	fcall	_write_char
  6938                           
  6939                           ;Button_src.c: 560:               write_char('/');
  6940  07BA  302F               	movlw	47
  6941  07BB  160A  118A  26E7  120A  118A  	fcall	_write_char
  6942                           
  6943                           ;Button_src.c: 561:               write_char(w+ '0');
  6944  07C0  083B               	movf	_w,w
  6945  07C1  3E30               	addlw	48
  6946  07C2  160A  118A  26E7  120A  118A  	fcall	_write_char
  6947                           
  6948                           ;Button_src.c: 562:               write_char(t+ '0');
  6949  07C7  083D               	movf	_t,w
  6950  07C8  3E30               	addlw	48
  6951  07C9  160A  118A  26E7  120A  118A  	fcall	_write_char
  6952                           
  6953                           ;Button_src.c: 565:             RC0 = 0;
  6954  07CE  1007               	bcf	7,0	;volatile
  6955                           
  6956                           ;Button_src.c: 566:             RC1 = 1;
  6957  07CF  1487               	bsf	7,1	;volatile
  6958                           
  6959                           ;Button_src.c: 567:             RC2 = 1;
  6960  07D0  1507               	bsf	7,2	;volatile
  6961                           
  6962                           ;Button_src.c: 568:             RC3 = 1;
  6963  07D1  1587               	bsf	7,3	;volatile
  6964                           
  6965                           ;Button_src.c: 569:             if (RC7 == 0 ){
  6966  07D2  1B87               	btfsc	7,7	;volatile
  6967  07D3  2BE2               	goto	l574
  6968                           
  6969                           ;Button_src.c: 570:             a = 0x00;
  6970  07D4  01CD               	clrf	_a
  6971                           
  6972                           ;Button_src.c: 571:             c = 0x00;
  6973  07D5  01CB               	clrf	_c
  6974                           
  6975                           ;Button_src.c: 572:             day_hex = 0x00;
  6976  07D6  01CA               	clrf	_day_hex
  6977                           
  6978                           ;Button_src.c: 573:             x = 0;
  6979  07D7  01B9               	clrf	_x
  6980  07D8  01BA               	clrf	_x+1
  6981                           
  6982                           ;Button_src.c: 574:             y = 0;
  6983  07D9  01B7               	clrf	_y
  6984  07DA  01B8               	clrf	_y+1
  6985                           
  6986                           ;Button_src.c: 575:             w = 0;
  6987  07DB  01BB               	clrf	_w
  6988  07DC  01BC               	clrf	_w+1
  6989                           
  6990                           ;Button_src.c: 576:             t = 0;
  6991  07DD  01BD               	clrf	_t
  6992  07DE  01BE               	clrf	_t+1
  6993                           
  6994                           ;Button_src.c: 577:             day_high = 0;
  6995  07DF  01B1               	clrf	_day_high
  6996  07E0  01B2               	clrf	_day_high+1
  6997                           
  6998                           ;Button_src.c: 578:             day_low = 0;
  6999  07E1  01B3               	clrf	_day_low
  7000  07E2  01B4               	clrf	_day_low+1
  7001                           
  7002                           ;Button_src.c: 579:             write_cmd(0x1);
  7003  07E3  3001               	movlw	1
  7004  07E4  160A  118A  26FE   	fcall	_write_cmd
  7005                           
  7006                           ;Button_src.c: 580:             break;
  7007  07E7  0008               	return
  7008  07E8                     __end_of_date_settings:	
  7009                           
  7010                           	psect	text30
  7011  16FE                     __ptext30:	
  7012 ;; *************** function _write_cmd *****************
  7013 ;; Defined at:
  7014 ;;		line 41 in file "LCD_src.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  x               1    wreg     unsigned char 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  x               1    2[COMMON] unsigned char 
  7019 ;;  i               2    0        int 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 300/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7029 ;;      Params:         0       0       0       0       0
  7030 ;;      Locals:         1       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0
  7032 ;;      Totals:         1       0       0       0       0
  7033 ;;Total ram usage:        1 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    1
  7036 ;; This function calls:
  7037 ;;		_delay_screen
  7038 ;; This function is called by:
  7039 ;;		_main
  7040 ;;		_lcd_init
  7041 ;;		_thermometer_threshhold_settings
  7042 ;;		_time_settings
  7043 ;;		_date_settings
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           
  7048                           ;psect for function _write_cmd
  7049  16FE                     _write_cmd:	
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7053                           ;write_cmd@x stored from wreg
  7054  16FE  00F2               	movwf	write_cmd@x
  7055                           
  7056                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7057  16FF  1283               	bcf	3,5	;RP0=0, select bank0
  7058  1700  1303               	bcf	3,6	;RP1=0, select bank0
  7059  1701  1285               	bcf	5,5	;volatile
  7060                           
  7061                           ;LCD_src.c: 45:  RA4=0;
  7062  1702  1205               	bcf	5,4	;volatile
  7063                           
  7064                           ;LCD_src.c: 46:  RA3=0;
  7065  1703  1185               	bcf	5,3	;volatile
  7066                           
  7067                           ;LCD_src.c: 47:  delay_screen();
  7068  1704  160A  118A  26A9  160A  118A  	fcall	_delay_screen
  7069                           
  7070                           ;LCD_src.c: 48:  RA3=1;
  7071  1709  1283               	bcf	3,5	;RP0=0, select bank0
  7072  170A  1303               	bcf	3,6	;RP1=0, select bank0
  7073  170B  1585               	bsf	5,3	;volatile
  7074                           
  7075                           ;LCD_src.c: 49:  PORTD=x;
  7076  170C  0872               	movf	write_cmd@x,w
  7077  170D  0088               	movwf	8	;volatile
  7078                           
  7079                           ;LCD_src.c: 50:  delay_screen();
  7080  170E  160A  118A  26A9   	fcall	_delay_screen
  7081                           
  7082                           ;LCD_src.c: 51:  RA3=0;
  7083  1711  1283               	bcf	3,5	;RP0=0, select bank0
  7084  1712  1303               	bcf	3,6	;RP1=0, select bank0
  7085  1713  1185               	bcf	5,3	;volatile
  7086  1714  0008               	return
  7087  1715                     __end_of_write_cmd:	
  7088                           
  7089                           	psect	text31
  7090  16E7                     __ptext31:	
  7091 ;; *************** function _write_char *****************
  7092 ;; Defined at:
  7093 ;;		line 28 in file "LCD_src.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;  x               1    wreg     unsigned char 
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;  x               1    2[COMMON] unsigned char 
  7098 ;;  i               2    0        int 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 300/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7108 ;;      Params:         0       0       0       0       0
  7109 ;;      Locals:         1       0       0       0       0
  7110 ;;      Temps:          0       0       0       0       0
  7111 ;;      Totals:         1       0       0       0       0
  7112 ;;Total ram usage:        1 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    1
  7115 ;; This function calls:
  7116 ;;		_delay_screen
  7117 ;; This function is called by:
  7118 ;;		_main
  7119 ;;		_display_temp
  7120 ;;		_display_clock
  7121 ;;		_display_date
  7122 ;;		_thermometer_threshhold_settings
  7123 ;;		_time_settings
  7124 ;;		_date_settings
  7125 ;;		_set_upper_threshold
  7126 ;;		_set_lower_threshold
  7127 ;;		_display_day
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           
  7132                           ;psect for function _write_char
  7133  16E7                     _write_char:	
  7134                           
  7135                           ;incstack = 0
  7136                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7137                           ;write_char@x stored from wreg
  7138  16E7  00F2               	movwf	write_char@x
  7139                           
  7140                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7141  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  7142  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  7143  16EA  1685               	bsf	5,5	;volatile
  7144                           
  7145                           ;LCD_src.c: 32:  RA4=0;
  7146  16EB  1205               	bcf	5,4	;volatile
  7147                           
  7148                           ;LCD_src.c: 33:  RA3=0;
  7149  16EC  1185               	bcf	5,3	;volatile
  7150                           
  7151                           ;LCD_src.c: 34:  delay_screen();
  7152  16ED  160A  118A  26A9  160A  118A  	fcall	_delay_screen
  7153                           
  7154                           ;LCD_src.c: 35:  RA3=1;
  7155  16F2  1283               	bcf	3,5	;RP0=0, select bank0
  7156  16F3  1303               	bcf	3,6	;RP1=0, select bank0
  7157  16F4  1585               	bsf	5,3	;volatile
  7158                           
  7159                           ;LCD_src.c: 36:  PORTD= x;
  7160  16F5  0872               	movf	write_char@x,w
  7161  16F6  0088               	movwf	8	;volatile
  7162                           
  7163                           ;LCD_src.c: 37:  delay_screen();
  7164  16F7  160A  118A  26A9   	fcall	_delay_screen
  7165                           
  7166                           ;LCD_src.c: 38:  RA3=0;
  7167  16FA  1283               	bcf	3,5	;RP0=0, select bank0
  7168  16FB  1303               	bcf	3,6	;RP1=0, select bank0
  7169  16FC  1185               	bcf	5,3	;volatile
  7170  16FD  0008               	return
  7171  16FE                     __end_of_write_char:	
  7172                           
  7173                           	psect	text32
  7174  16A9                     __ptext32:	
  7175 ;; *************** function _delay_screen *****************
  7176 ;; Defined at:
  7177 ;;		line 70 in file "LCD_src.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  i               2    0[COMMON] int 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2, btemp+1
  7186 ;; Tracked objects:
  7187 ;;		On entry : 300/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7191 ;;      Params:         0       0       0       0       0
  7192 ;;      Locals:         2       0       0       0       0
  7193 ;;      Temps:          0       0       0       0       0
  7194 ;;      Totals:         2       0       0       0       0
  7195 ;;Total ram usage:        2 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; This function calls:
  7198 ;;		Nothing
  7199 ;; This function is called by:
  7200 ;;		_lcd_init
  7201 ;;		_write_char
  7202 ;;		_write_cmd
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           
  7207                           ;psect for function _delay_screen
  7208  16A9                     _delay_screen:	
  7209                           
  7210                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7211                           
  7212                           ;incstack = 0
  7213                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7214  16A9  01F0               	clrf	delay_screen@i
  7215  16AA  01F1               	clrf	delay_screen@i+1
  7216  16AB                     l2743:	
  7217  16AB  3001               	movlw	1
  7218  16AC  07F0               	addwf	delay_screen@i,f
  7219  16AD  1803               	skipnc
  7220  16AE  0AF1               	incf	delay_screen@i+1,f
  7221  16AF  3000               	movlw	0
  7222  16B0  07F1               	addwf	delay_screen@i+1,f
  7223  16B1  0871               	movf	delay_screen@i+1,w
  7224  16B2  3A80               	xorlw	128
  7225  16B3  00FF               	movwf	127
  7226  16B4  3080               	movlw	128
  7227  16B5  027F               	subwf	127,w
  7228  16B6  1D03               	skipz
  7229  16B7  2EBA               	goto	u1525
  7230  16B8  3005               	movlw	5
  7231  16B9  0270               	subwf	delay_screen@i,w
  7232  16BA                     u1525:	
  7233  16BA  1803               	btfsc	3,0
  7234  16BB  0008               	return
  7235  16BC  2EAB               	goto	l2743
  7236  16BD                     __end_of_delay_screen:	
  7237                           
  7238                           	psect	text33
  7239  1656                     __ptext33:	
  7240 ;; *************** function _time_date_hex_terminator *****************
  7241 ;; Defined at:
  7242 ;;		line 37 in file "math_src.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  val             1    wreg     unsigned char 
  7245 ;;  limiter         1    0[COMMON] unsigned char 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  val             1    3[COMMON] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      unsigned char 
  7250 ;; Registers used:
  7251 ;;		wreg, status,2
  7252 ;; Tracked objects:
  7253 ;;		On entry : 300/0
  7254 ;;		On exit  : 300/0
  7255 ;;		Unchanged: 300/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7257 ;;      Params:         1       0       0       0       0
  7258 ;;      Locals:         1       0       0       0       0
  7259 ;;      Temps:          2       0       0       0       0
  7260 ;;      Totals:         4       0       0       0       0
  7261 ;;Total ram usage:        4 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_time_settings
  7267 ;;		_date_settings
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _time_date_hex_terminator
  7273  1656                     _time_date_hex_terminator:	
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7277                           ;time_date_hex_terminator@val stored from wreg
  7278  1656  00F3               	movwf	time_date_hex_terminator@val
  7279                           
  7280                           ;math_src.c: 38:     if((val + '0') == limiter){
  7281  1657  0873               	movf	time_date_hex_terminator@val,w
  7282  1658  3E30               	addlw	48
  7283  1659  00F1               	movwf	??_time_date_hex_terminator
  7284  165A  3000               	movlw	0
  7285  165B  1803               	skipnc
  7286  165C  3001               	movlw	1
  7287  165D  00F2               	movwf	??_time_date_hex_terminator+1
  7288  165E  0870               	movf	time_date_hex_terminator@limiter,w
  7289  165F  0671               	xorwf	??_time_date_hex_terminator,w
  7290  1660  0472               	iorwf	??_time_date_hex_terminator+1,w
  7291  1661  1903               	btfsc	3,2
  7292                           
  7293                           ;math_src.c: 39:     val = 0x00;
  7294  1662  01F3               	clrf	time_date_hex_terminator@val
  7295                           
  7296                           ;math_src.c: 41:     return val;
  7297  1663  0873               	movf	time_date_hex_terminator@val,w
  7298  1664  0008               	return
  7299  1665                     __end_of_time_date_hex_terminator:	
  7300                           
  7301                           	psect	text34
  7302  1715                     __ptext34:	
  7303 ;; *************** function _time_date_delimiter *****************
  7304 ;; Defined at:
  7305 ;;		line 27 in file "math_src.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  val             1    wreg     unsigned char 
  7308 ;;  hex             1    0[COMMON] unsigned char 
  7309 ;;  limiter         1    1[COMMON] unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  val             1    4[COMMON] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      unsigned char 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 300/0
  7318 ;;		On exit  : 300/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7321 ;;      Params:         2       0       0       0       0
  7322 ;;      Locals:         1       0       0       0       0
  7323 ;;      Temps:          2       0       0       0       0
  7324 ;;      Totals:         5       0       0       0       0
  7325 ;;Total ram usage:        5 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_time_settings
  7331 ;;		_date_settings
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           
  7336                           ;psect for function _time_date_delimiter
  7337  1715                     _time_date_delimiter:	
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7341                           ;time_date_delimiter@val stored from wreg
  7342  1715  00F4               	movwf	time_date_delimiter@val
  7343                           
  7344                           ;math_src.c: 28:     if((val + '0') == limiter){
  7345  1716  0874               	movf	time_date_delimiter@val,w
  7346  1717  3E30               	addlw	48
  7347  1718  00F2               	movwf	??_time_date_delimiter
  7348  1719  3000               	movlw	0
  7349  171A  1803               	skipnc
  7350  171B  3001               	movlw	1
  7351  171C  00F3               	movwf	??_time_date_delimiter+1
  7352  171D  0871               	movf	time_date_delimiter@limiter,w
  7353  171E  0672               	xorwf	??_time_date_delimiter,w
  7354  171F  0473               	iorwf	??_time_date_delimiter+1,w
  7355  1720  1D03               	skipz
  7356  1721  2F2E               	goto	l3001
  7357                           
  7358                           ;math_src.c: 29:     val = hex;
  7359  1722  0870               	movf	time_date_delimiter@hex,w
  7360  1723  00F2               	movwf	??_time_date_delimiter
  7361  1724  0872               	movf	??_time_date_delimiter,w
  7362  1725  00F4               	movwf	time_date_delimiter@val
  7363                           
  7364                           ;math_src.c: 30:     stats=0;
  7365  1726  01AD               	clrf	_stats
  7366  1727  01AE               	clrf	_stats+1
  7367                           
  7368                           ;math_src.c: 31:     prev_hex= 0x09;
  7369  1728  3009               	movlw	9
  7370  1729  00F2               	movwf	??_time_date_delimiter
  7371  172A  0872               	movf	??_time_date_delimiter,w
  7372  172B  00C8               	movwf	_prev_hex
  7373                           
  7374                           ;math_src.c: 32:     val--;
  7375  172C  3001               	movlw	1
  7376  172D  02F4               	subwf	time_date_delimiter@val,f
  7377  172E                     l3001:	
  7378                           
  7379                           ;math_src.c: 34:     return val;
  7380  172E  0874               	movf	time_date_delimiter@val,w
  7381  172F  0008               	return
  7382  1730                     __end_of_time_date_delimiter:	
  7383                           
  7384                           	psect	text35
  7385  0845                     __ptext35:	
  7386 ;; *************** function _set_time *****************
  7387 ;; Defined at:
  7388 ;;		line 15 in file "clock_src.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;		None
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  i               2    5[COMMON] int 
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      void 
  7395 ;; Registers used:
  7396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 300/0
  7399 ;;		On exit  : 300/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7402 ;;      Params:         0       0       0       0       0
  7403 ;;      Locals:         2       0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0
  7405 ;;      Totals:         2       0       0       0       0
  7406 ;;Total ram usage:        2 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    1
  7409 ;; This function calls:
  7410 ;;		_time_write_1
  7411 ;; This function is called by:
  7412 ;;		_main
  7413 ;;		_time_settings
  7414 ;;		_date_settings
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _set_time
  7420  0845                     _set_time:	
  7421                           
  7422                           ;clock_src.c: 17:    int i;;clock_src.c: 18:    RB5=1;
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7426  0845  1686               	bsf	6,5	;volatile
  7427                           
  7428                           ;clock_src.c: 19:    time_write_1(0xbe);
  7429  0846  30BE               	movlw	190
  7430  0847  120A  158A  201F  120A  158A  	fcall	_time_write_1
  7431                           
  7432                           ;clock_src.c: 20:    for(i=0;i<8;i++)
  7433  084C  01F5               	clrf	set_time@i
  7434  084D  01F6               	clrf	set_time@i+1
  7435  084E                     l2779:	
  7436                           
  7437                           ;clock_src.c: 21:      {;clock_src.c: 22:        time_write_1(table[i]);
  7438  084E  0875               	movf	set_time@i,w
  7439  084F  3E64               	addlw	(low (_table| 0))& (0+255)
  7440  0850  0084               	movwf	4
  7441  0851  1383               	bcf	3,7	;select IRP bank0
  7442  0852  0800               	movf	0,w
  7443  0853  120A  158A  201F  120A  158A  	fcall	_time_write_1
  7444                           
  7445                           ;clock_src.c: 23:      }
  7446  0858  3001               	movlw	1
  7447  0859  07F5               	addwf	set_time@i,f
  7448  085A  1803               	skipnc
  7449  085B  0AF6               	incf	set_time@i+1,f
  7450  085C  3000               	movlw	0
  7451  085D  07F6               	addwf	set_time@i+1,f
  7452  085E  0876               	movf	set_time@i+1,w
  7453  085F  3A80               	xorlw	128
  7454  0860  00FF               	movwf	127
  7455  0861  3080               	movlw	128
  7456  0862  027F               	subwf	127,w
  7457  0863  1D03               	skipz
  7458  0864  2867               	goto	u1575
  7459  0865  3008               	movlw	8
  7460  0866  0275               	subwf	set_time@i,w
  7461  0867                     u1575:	
  7462  0867  1C03               	skipc
  7463  0868  284E               	goto	l2779
  7464                           
  7465                           ;clock_src.c: 24:    RB5=0;
  7466  0869  1283               	bcf	3,5	;RP0=0, select bank0
  7467  086A  1303               	bcf	3,6	;RP1=0, select bank0
  7468  086B  1286               	bcf	6,5	;volatile
  7469  086C  0008               	return
  7470  086D                     __end_of_set_time:	
  7471                           
  7472                           	psect	text36
  7473  081F                     __ptext36:	
  7474 ;; *************** function _time_write_1 *****************
  7475 ;; Defined at:
  7476 ;;		line 116 in file "clock_src.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  time_tx         1    wreg     unsigned char 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  time_tx         1    4[COMMON] unsigned char 
  7481 ;;  j               2    2[COMMON] int 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg, status,2, status,0, btemp+1
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 300/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7491 ;;      Params:         0       0       0       0       0
  7492 ;;      Locals:         3       0       0       0       0
  7493 ;;      Temps:          2       0       0       0       0
  7494 ;;      Totals:         5       0       0       0       0
  7495 ;;Total ram usage:        5 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; This function calls:
  7498 ;;		Nothing
  7499 ;; This function is called by:
  7500 ;;		_ds1302_init
  7501 ;;		_set_time
  7502 ;;		_get_time
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           
  7507                           ;psect for function _time_write_1
  7508  081F                     _time_write_1:	
  7509                           
  7510                           ;incstack = 0
  7511                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  7512                           ;time_write_1@time_tx stored from wreg
  7513  081F  00F4               	movwf	time_write_1@time_tx
  7514                           
  7515                           ;clock_src.c: 116: void time_write_1(unsigned char time_tx);clock_src.c: 117: {;clock_sr
      +                          c.c: 118:     int j;;clock_src.c: 119:     for(j=0;j<8;j++)
  7516  0820  01F2               	clrf	time_write_1@j
  7517  0821  01F3               	clrf	time_write_1@j+1
  7518  0822                     l346:	
  7519                           
  7520                           ;clock_src.c: 120:    {;clock_src.c: 121:         RB4=0;
  7521  0822  1283               	bcf	3,5	;RP0=0, select bank0
  7522  0823  1303               	bcf	3,6	;RP1=0, select bank0
  7523  0824  1206               	bcf	6,4	;volatile
  7524                           
  7525                           ;clock_src.c: 122:         RB0=0;
  7526  0825  1006               	bcf	6,0	;volatile
  7527                           
  7528                           ;clock_src.c: 123:         if(time_tx&0x01)
  7529  0826  1874               	btfsc	time_write_1@time_tx,0
  7530                           
  7531                           ;clock_src.c: 124:           {;clock_src.c: 125:             RB4=1;
  7532  0827  1606               	bsf	6,4	;volatile
  7533                           
  7534                           ;clock_src.c: 127:         time_tx=time_tx>>1;
  7535  0828  0874               	movf	time_write_1@time_tx,w
  7536  0829  00F0               	movwf	??_time_write_1
  7537  082A  1003               	clrc
  7538  082B  0C70               	rrf	??_time_write_1,w
  7539  082C  00F1               	movwf	??_time_write_1+1
  7540  082D  0871               	movf	??_time_write_1+1,w
  7541  082E  00F4               	movwf	time_write_1@time_tx
  7542                           
  7543                           ;clock_src.c: 128:         RB0=1;
  7544  082F  1406               	bsf	6,0	;volatile
  7545                           
  7546                           ;clock_src.c: 129:     }
  7547  0830  3001               	movlw	1
  7548  0831  07F2               	addwf	time_write_1@j,f
  7549  0832  1803               	skipnc
  7550  0833  0AF3               	incf	time_write_1@j+1,f
  7551  0834  3000               	movlw	0
  7552  0835  07F3               	addwf	time_write_1@j+1,f
  7553  0836  0873               	movf	time_write_1@j+1,w
  7554  0837  3A80               	xorlw	128
  7555  0838  00FF               	movwf	127
  7556  0839  3080               	movlw	128
  7557  083A  027F               	subwf	127,w
  7558  083B  1D03               	skipz
  7559  083C  283F               	goto	u1565
  7560  083D  3008               	movlw	8
  7561  083E  0272               	subwf	time_write_1@j,w
  7562  083F                     u1565:	
  7563  083F  1C03               	skipc
  7564  0840  2822               	goto	l346
  7565                           
  7566                           ;clock_src.c: 130:       RB0=0;
  7567  0841  1283               	bcf	3,5	;RP0=0, select bank0
  7568  0842  1303               	bcf	3,6	;RP1=0, select bank0
  7569  0843  1006               	bcf	6,0	;volatile
  7570  0844  0008               	return
  7571  0845                     __end_of_time_write_1:	
  7572                           
  7573                           	psect	text37
  7574  17B8                     __ptext37:	
  7575 ;; *************** function _incrementor *****************
  7576 ;; Defined at:
  7577 ;;		line 10 in file "math_src.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;  upper_val       2    0[BANK0 ] int 
  7580 ;;  lower_val       2    2[BANK0 ] int 
  7581 ;;  z               1    4[BANK0 ] unsigned char 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;		None
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  1    wreg      unsigned char 
  7586 ;; Registers used:
  7587 ;;		wreg, status,2, status,0, pclath, cstack
  7588 ;; Tracked objects:
  7589 ;;		On entry : 300/0
  7590 ;;		On exit  : 300/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7593 ;;      Params:         0       5       0       0       0
  7594 ;;      Locals:         0       0       0       0       0
  7595 ;;      Temps:          2       0       0       0       0
  7596 ;;      Totals:         2       5       0       0       0
  7597 ;;Total ram usage:        7 bytes
  7598 ;; Hardware stack levels used:    1
  7599 ;; Hardware stack levels required when called:    2
  7600 ;; This function calls:
  7601 ;;		_modulus_func
  7602 ;; This function is called by:
  7603 ;;		_thermometer_threshhold_settings
  7604 ;;		_time_settings
  7605 ;;		_date_settings
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _incrementor
  7611  17B8                     _incrementor:	
  7612                           
  7613                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  7617  17B8  085A               	movf	incrementor@lower_val,w
  7618  17B9  3E30               	addlw	48
  7619  17BA  00FB               	movwf	??_incrementor
  7620  17BB  085B               	movf	incrementor@lower_val+1,w
  7621  17BC  1803               	skipnc
  7622  17BD  3E01               	addlw	1
  7623  17BE  3E00               	addlw	0
  7624  17BF  00FC               	movwf	??_incrementor+1
  7625  17C0  085C               	movf	incrementor@z,w
  7626  17C1  067B               	xorwf	??_incrementor,w
  7627  17C2  047C               	iorwf	??_incrementor+1,w
  7628  17C3  1D03               	skipz
  7629  17C4  2FDA               	goto	l2969
  7630                           
  7631                           ;math_src.c: 12:      upper_val++;
  7632  17C5  3001               	movlw	1
  7633  17C6  07D8               	addwf	incrementor@upper_val,f
  7634  17C7  1803               	skipnc
  7635  17C8  0AD9               	incf	incrementor@upper_val+1,f
  7636  17C9  3000               	movlw	0
  7637  17CA  07D9               	addwf	incrementor@upper_val+1,f
  7638                           
  7639                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  7640  17CB  0859               	movf	incrementor@upper_val+1,w
  7641  17CC  00F8               	movwf	modulus_func@x+1
  7642  17CD  0858               	movf	incrementor@upper_val,w
  7643  17CE  00F7               	movwf	modulus_func@x
  7644  17CF  300A               	movlw	10
  7645  17D0  00F9               	movwf	modulus_func@y
  7646  17D1  3000               	movlw	0
  7647  17D2  00FA               	movwf	modulus_func@y+1
  7648  17D3  160A  118A  2674   	fcall	_modulus_func
  7649  17D6  0878               	movf	?_modulus_func+1,w
  7650  17D7  00D9               	movwf	incrementor@upper_val+1
  7651  17D8  0877               	movf	?_modulus_func,w
  7652  17D9  00D8               	movwf	incrementor@upper_val
  7653  17DA                     l2969:	
  7654                           
  7655                           ;math_src.c: 15:      return upper_val;
  7656  17DA  0858               	movf	incrementor@upper_val,w
  7657  17DB  0008               	return
  7658  17DC                     __end_of_incrementor:	
  7659                           
  7660                           	psect	text38
  7661  1674                     __ptext38:	
  7662 ;; *************** function _modulus_func *****************
  7663 ;; Defined at:
  7664 ;;		line 5 in file "math_src.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  x               2    7[COMMON] int 
  7667 ;;  y               2    9[COMMON] int 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;		None
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  2    7[COMMON] int 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 300/0
  7676 ;;		On exit  : 300/0
  7677 ;;		Unchanged: 300/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7679 ;;      Params:         4       0       0       0       0
  7680 ;;      Locals:         0       0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0
  7682 ;;      Totals:         4       0       0       0       0
  7683 ;;Total ram usage:        4 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    1
  7686 ;; This function calls:
  7687 ;;		___awmod
  7688 ;; This function is called by:
  7689 ;;		_main
  7690 ;;		_thermometer_threshhold_settings
  7691 ;;		_time_settings
  7692 ;;		_date_settings
  7693 ;;		_incrementor
  7694 ;;		_decrementor
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           
  7699                           ;psect for function _modulus_func
  7700  1674                     _modulus_func:	
  7701                           
  7702                           ;math_src.c: 6:     x = x % y;
  7703                           
  7704                           ;incstack = 0
  7705                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  7706  1674  087A               	movf	modulus_func@y+1,w
  7707  1675  00F1               	movwf	___awmod@divisor+1
  7708  1676  0879               	movf	modulus_func@y,w
  7709  1677  00F0               	movwf	___awmod@divisor
  7710  1678  0878               	movf	modulus_func@x+1,w
  7711  1679  00F3               	movwf	___awmod@dividend+1
  7712  167A  0877               	movf	modulus_func@x,w
  7713  167B  00F2               	movwf	___awmod@dividend
  7714  167C  120A  158A  2209   	fcall	___awmod
  7715  167F  0871               	movf	?___awmod+1,w
  7716  1680  00F8               	movwf	modulus_func@x+1
  7717  1681  0870               	movf	?___awmod,w
  7718  1682  00F7               	movwf	modulus_func@x
  7719                           
  7720                           ;math_src.c: 7:     return x;
  7721  1683  0008               	return
  7722  1684                     __end_of_modulus_func:	
  7723                           
  7724                           	psect	text39
  7725  0A09                     __ptext39:	
  7726 ;; *************** function ___awmod *****************
  7727 ;; Defined at:
  7728 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  divisor         2    0[COMMON] int 
  7731 ;;  dividend        2    2[COMMON] int 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  sign            1    6[COMMON] unsigned char 
  7734 ;;  counter         1    5[COMMON] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  2    0[COMMON] int 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0
  7739 ;; Tracked objects:
  7740 ;;		On entry : 300/0
  7741 ;;		On exit  : 300/0
  7742 ;;		Unchanged: 300/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7744 ;;      Params:         4       0       0       0       0
  7745 ;;      Locals:         2       0       0       0       0
  7746 ;;      Temps:          1       0       0       0       0
  7747 ;;      Totals:         7       0       0       0       0
  7748 ;;Total ram usage:        7 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_modulus_func
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function ___awmod
  7759  0A09                     ___awmod:	
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7763  0A09  01F6               	clrf	___awmod@sign
  7764  0A0A  1FF3               	btfss	___awmod@dividend+1,7
  7765  0A0B  2A13               	goto	l2701
  7766  0A0C  09F2               	comf	___awmod@dividend,f
  7767  0A0D  09F3               	comf	___awmod@dividend+1,f
  7768  0A0E  0AF2               	incf	___awmod@dividend,f
  7769  0A0F  1903               	skipnz
  7770  0A10  0AF3               	incf	___awmod@dividend+1,f
  7771  0A11  01F6               	clrf	___awmod@sign
  7772  0A12  0AF6               	incf	___awmod@sign,f
  7773  0A13                     l2701:	
  7774  0A13  1FF1               	btfss	___awmod@divisor+1,7
  7775  0A14  2A1A               	goto	l2705
  7776  0A15  09F0               	comf	___awmod@divisor,f
  7777  0A16  09F1               	comf	___awmod@divisor+1,f
  7778  0A17  0AF0               	incf	___awmod@divisor,f
  7779  0A18  1903               	skipnz
  7780  0A19  0AF1               	incf	___awmod@divisor+1,f
  7781  0A1A                     l2705:	
  7782  0A1A  0870               	movf	___awmod@divisor,w
  7783  0A1B  0471               	iorwf	___awmod@divisor+1,w
  7784  0A1C  1903               	btfsc	3,2
  7785  0A1D  2A47               	goto	l2723
  7786  0A1E  01F5               	clrf	___awmod@counter
  7787  0A1F  0AF5               	incf	___awmod@counter,f
  7788  0A20                     l2713:	
  7789  0A20  1BF1               	btfsc	___awmod@divisor+1,7
  7790  0A21  2A2E               	goto	l2715
  7791  0A22  3001               	movlw	1
  7792  0A23                     u1465:	
  7793  0A23  1003               	clrc
  7794  0A24  0DF0               	rlf	___awmod@divisor,f
  7795  0A25  0DF1               	rlf	___awmod@divisor+1,f
  7796  0A26  3EFF               	addlw	-1
  7797  0A27  1D03               	skipz
  7798  0A28  2A23               	goto	u1465
  7799  0A29  3001               	movlw	1
  7800  0A2A  00F4               	movwf	??___awmod
  7801  0A2B  0874               	movf	??___awmod,w
  7802  0A2C  07F5               	addwf	___awmod@counter,f
  7803  0A2D  2A20               	goto	l2713
  7804  0A2E                     l2715:	
  7805  0A2E  0871               	movf	___awmod@divisor+1,w
  7806  0A2F  0273               	subwf	___awmod@dividend+1,w
  7807  0A30  1D03               	skipz
  7808  0A31  2A34               	goto	u1485
  7809  0A32  0870               	movf	___awmod@divisor,w
  7810  0A33  0272               	subwf	___awmod@dividend,w
  7811  0A34                     u1485:	
  7812  0A34  1C03               	skipc
  7813  0A35  2A3C               	goto	l2719
  7814  0A36  0870               	movf	___awmod@divisor,w
  7815  0A37  02F2               	subwf	___awmod@dividend,f
  7816  0A38  0871               	movf	___awmod@divisor+1,w
  7817  0A39  1C03               	skipc
  7818  0A3A  03F3               	decf	___awmod@dividend+1,f
  7819  0A3B  02F3               	subwf	___awmod@dividend+1,f
  7820  0A3C                     l2719:	
  7821  0A3C  3001               	movlw	1
  7822  0A3D                     u1495:	
  7823  0A3D  1003               	clrc
  7824  0A3E  0CF1               	rrf	___awmod@divisor+1,f
  7825  0A3F  0CF0               	rrf	___awmod@divisor,f
  7826  0A40  3EFF               	addlw	-1
  7827  0A41  1D03               	skipz
  7828  0A42  2A3D               	goto	u1495
  7829  0A43  3001               	movlw	1
  7830  0A44  02F5               	subwf	___awmod@counter,f
  7831  0A45  1D03               	btfss	3,2
  7832  0A46  2A2E               	goto	l2715
  7833  0A47                     l2723:	
  7834  0A47  0876               	movf	___awmod@sign,w
  7835  0A48  1903               	btfsc	3,2
  7836  0A49  2A4F               	goto	l2727
  7837  0A4A  09F2               	comf	___awmod@dividend,f
  7838  0A4B  09F3               	comf	___awmod@dividend+1,f
  7839  0A4C  0AF2               	incf	___awmod@dividend,f
  7840  0A4D  1903               	skipnz
  7841  0A4E  0AF3               	incf	___awmod@dividend+1,f
  7842  0A4F                     l2727:	
  7843  0A4F  0873               	movf	___awmod@dividend+1,w
  7844  0A50  00F1               	movwf	?___awmod+1
  7845  0A51  0872               	movf	___awmod@dividend,w
  7846  0A52  00F0               	movwf	?___awmod
  7847  0A53  0008               	return
  7848  0A54                     __end_of___awmod:	
  7849                           
  7850                           	psect	text40
  7851  1695                     __ptext40:	
  7852 ;; *************** function _button_delay *****************
  7853 ;; Defined at:
  7854 ;;		line 586 in file "Button_src.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;		None
  7857 ;; Auto vars:     Size  Location     Type
  7858 ;;  i               2    0[COMMON] int 
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  1    wreg      void 
  7861 ;; Registers used:
  7862 ;;		wreg, status,2, btemp+1
  7863 ;; Tracked objects:
  7864 ;;		On entry : 300/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7868 ;;      Params:         0       0       0       0       0
  7869 ;;      Locals:         2       0       0       0       0
  7870 ;;      Temps:          0       0       0       0       0
  7871 ;;      Totals:         2       0       0       0       0
  7872 ;;Total ram usage:        2 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; This function calls:
  7875 ;;		Nothing
  7876 ;; This function is called by:
  7877 ;;		_set_beep_threshhold
  7878 ;;		_thermometer_threshhold_settings
  7879 ;;		_time_settings
  7880 ;;		_date_settings
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           
  7885                           ;psect for function _button_delay
  7886  1695                     _button_delay:	
  7887                           
  7888                           ;Button_src.c: 587:     for(int i=0;i<10000;i++);
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  7892  1695  01F0               	clrf	button_delay@i
  7893  1696  01F1               	clrf	button_delay@i+1
  7894  1697                     l2959:	
  7895  1697  3001               	movlw	1
  7896  1698  07F0               	addwf	button_delay@i,f
  7897  1699  1803               	skipnc
  7898  169A  0AF1               	incf	button_delay@i+1,f
  7899  169B  3000               	movlw	0
  7900  169C  07F1               	addwf	button_delay@i+1,f
  7901  169D  0871               	movf	button_delay@i+1,w
  7902  169E  3A80               	xorlw	128
  7903  169F  00FF               	movwf	127
  7904  16A0  30A7               	movlw	167
  7905  16A1  027F               	subwf	127,w
  7906  16A2  1D03               	skipz
  7907  16A3  2EA6               	goto	u1675
  7908  16A4  3010               	movlw	16
  7909  16A5  0270               	subwf	button_delay@i,w
  7910  16A6                     u1675:	
  7911  16A6  1803               	btfsc	3,0
  7912  16A7  0008               	return
  7913  16A8  2E97               	goto	l2959
  7914  16A9                     __end_of_button_delay:	
  7915  007E                     btemp	set	126	;btemp
  7916  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      76
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   38743
                                             10 BANK0      2     2      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   10434
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  6     2      4     264
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  6     2      4     286
                                              3 COMMON     6     2      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   10434
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  5     3      2    3130
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A      12        0.0%
ABS                  0      0      5A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Dec 10 22:00:43 2019

                                       _a 004D                                         _b 004C  
                                       _c 004B                                         _p 002B  
                                       _t 003D                                         _w 003B  
                                       _x 0039                                         _y 0037  
                                       _z 0035                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 0054                                        _TZ 0055  
                                      _ge 0052                                        _wd 003F  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 0802  
                           ?_display_date 0070                                       l352 089F  
                                     l346 0822                                       l293 1649  
                                     l543 0FB0                                       l551 00FA  
                                     l544 0FF5                                       l560 01DD  
                                     l553 0160                                       l538 0F4D  
                                     l554 0168                                       l565 02E2  
                                     l582 04BC                                       l574 03E2  
                                     l583 04C4                                       l559 01D5  
                                     l576 0448                                       l568 036F  
                                     l577 0450                                       l595 0686  
                                     l588 0542                                       l597 06B3  
                                     l589 054A                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 0056  
                           ?_display_temp 0070                                       _TLV 0057  
                                     _shi 0053                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 005D  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1031 178F                                      l3001 172E  
                                    l3015 1758                                      l3017 1761  
                                    l3027 1770                                      l3035 1778  
                                    l3221 0AF4                                      l3065 09F9  
                                    l3057 09D5                                      l3081 08CF  
                                    l3209 0878                                      l3059 09E3  
                                    l3083 08DD                                      l3091 08F6  
                                    l3315 0EA4                                      l2701 0A13  
                                    l3069 0A04                                      l3181 0C15  
                                    l3087 08EB                                      l3343 0F03  
                                    l2713 0A20                                      l2705 0A1A  
                                    l3505 052D                                      l3185 0C1F  
                                    l3177 0C0B                                      l4049 0D76  
                                    l2715 0A2E                                      l2723 0A47  
                                    l3507 0532                                      l3259 0A5E  
                                    l3605 0709                                      l3525 057E  
                                    l2821 0958                                      l3189 0C29  
                                    l3373 0F39                                      l2727 0A4F  
                                    l2719 0A3C                                      l2743 16AB  
                                    l3471 04A7                                      l3463 048D  
                                    l2823 0931                                      l2831 099C  
                                    l3537 0594                                      l3529 0587  
                                    l3473 04AC                                      l3635 074C  
                                    l3539 0599                                      l3459 0484  
                                    l2819 0957                                      l2851 09B1  
                                    l3731 01A5                                      l3493 0509  
                                    l2925 16BF                                      l2749 164D  
                                    l3397 0FBD                                      l3741 01C5  
                                    l2943 08B0                                      l3727 019C  
                                    l3665 0792                                      l3569 067E  
                                    l3497 0512                                      l2873 0900  
                                    l3921 081B                                      l2779 084E  
                                    l3835 0332                                      l3763 021A  
                                    l3739 01C0                                      l3773 023E  
                                    l2959 1697                                      l3951 00AA  
                                    l3943 007C                                      l3759 0211  
                                    l3775 0243                                      l2969 17DA  
                                    l3937 0053                                      l3955 00C1  
                                    l3947 0093                                      l3939 0065  
                                    l3891 001D                                      l2979 17FE  
                                    l3893 002A                                      l3959 00D8  
                          ?_display_clock 0070                                      l3979 0CAD  
                                    u2055 0F4A                                      u1525 16BA  
                                    u1465 0A23                                      u1485 0A34  
                                    u1565 083F                                      u1805 09D8  
                                    u1645 16CE                                      u1495 0A3D  
                                    u1575 0867                                      u1825 09E4  
                                    u1905 08EC                                      u1665 08C0  
                                    u2705 0028                                      u1675 16A6  
                                    u1835 09F0                                      u2715 096C  
                                    u1765 177B                                      u1845 09FA  
                                    u1925 0BC3                                      u2725 0977  
                                    u1935 0BCE                                      u1945 0BDB  
                                    u1875 08D2                                      u2685 0012  
                                    u2845 0D8B                                      u1895 08E3  
                                    u2695 001B                                      u1995 0893  
             time_date_hex_terminator@val 0073                      ?_set_beep_threshhold 0070  
                                    _main 0C87                                      _init 1623  
                                    _var1 0043                                      _var2 0042  
                                    btemp 007E           time_date_hex_terminator@limiter 0070  
                           write_byte@val 0077                                      start 0000  
                  time_date_delimiter@hex 0070                    time_date_delimiter@val 0074  
                            ?_incrementor 0058               __size_of_initialise_buttons 0016  
                          ??_display_date 0073                                     ?_main 0070  
                          ??_display_temp 0073                                     ?_init 0070  
                         __end_of___lbdiv 1772                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0A54                           __end_of___lbmod 1795  
                    __end_of_delay_screen 16BD                           __end_of___lwdiv 0A09  
                         __end_of___lwmod 08FB                                     _PORTD 0008  
                                   _PORTE 0009                                     _TRISA 0085  
                                   _TRISB 0086                                     _TRISC 0087  
                                   _TRISD 0088                                     _TRISE 0089  
                           __CFG_PWRTE$ON 0000                                     _count 0029  
                                   _table 0064                                     _stats 002D  
                                   main@i 0062                            write_byte@temp 0076  
                     _set_lower_threshold 0009                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                     ??_set_beep_threshhold 0072  
                                   status 0003                      __size_of_decrementor 0024  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                         __initialization 07E8                              __end_of_main 0DAA  
                            __end_of_init 162B                     __end_of_date_settings 07E8  
                    ?_set_lower_threshold 0073                                    ??_main 007E  
                                  ??_init 0070                      incrementor@lower_val 005A  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0058  
                        __end_of_lcd_init 17B8                          __end_of_get_temp 0C87  
                        __end_of_get_time 0899                                    _baifen 0050  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 16BD                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 1674  
                     _set_upper_threshold 0963                                    _table1 0020  
                         ___awmod@divisor 0070                                    _shifen 0051  
                                  _wanfen 004E                           ___awmod@counter 0075  
                    __size_of_display_day 00A3                              ?_time_read_1 0070  
                     time_write_1@time_tx 0074                             display_date@i 0075  
                        __end_of_set_time 086D                        reset_temp@presence 0075  
                        ___lbdiv@dividend 0072                      ?_set_upper_threshold 0073  
                         ___lbmod@divisor 0070                   __end_of__initialization 07FC  
                         ___lbmod@counter 0075                            ??_button_delay 0070  
            __size_of_time_date_delimiter 001B                      __end_of_display_date 0B80  
                    __end_of_display_temp 1751                            __pcstackCOMMON 0070  
                            __pidataBANK0 1633                     __size_of_delay_screen 0014  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                                __pbssBANK0 0020  
                            _delay_screen 16A9                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1665  
                              _delay_temp 1648                                __pmaintext 0C87  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 005C  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 03D4                                 ?_get_time 0070  
                      __size_of_write_cmd 0017                                 ?_set_time 0070  
                    __size_of_reset_alarm 000D                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 16E7  
                _time_date_hex_terminator 1656                                   ___lbdiv 1751  
                                 ___awmod 0A09                                   ___lbmod 1772  
                         __size_of_delay2 0014                                   ___lwdiv 09CD  
                                 ___lwmod 08C9                                   _day_hex 004A  
                                 _day_low 0033                                   __ptext1 00EE  
                                 __ptext2 0DAA                                   __ptext3 17DC  
                                 __ptext4 0963                                   __ptext5 0009  
                                 __ptext6 0802                                   __ptext7 163B  
                                 __ptext8 1795                                   __ptext9 16D1  
                    __end_of_button_delay 16A9                                   delay2@i 0070  
                       __end_of_init_temp 0009                          ___awmod@dividend 0072  
                       __end_of_read_byte 092F                                   _qianfen 004F  
                    __size_of_time_read_1 0030                                   _lower_t 0046  
             __end_of_set_beep_threshhold 081F              set_upper_threshold@upper_val 0073  
                   __size_of_display_date 0096                                   clrloop0 162C  
                              ??_lcd_init 0073                                   _upper_t 0047  
                           ??_decrementor 007B                                ??_get_temp 0058  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 092F  
                              ??_set_time 0075                       _time_date_delimiter 1715  
                    decrementor@lower_val 0058                              _display_date 0AEA  
                            _display_temp 1730                         __end_of_write_cmd 1715  
                        ___lbmod@dividend 0074                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 0AEA  
                  __size_of_date_settings 0414                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                      decrementor@upper_val 005A  
                          ??_time_write_1 0070               __end_of_set_lower_threshold 004B  
                     __end_of_decrementor 1800                             ??_display_day 0075  
                          __end_of_delay2 16D1                                _write_char 16E7  
                              _write_byte 0997                       start_initialization 07E8  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 1684                     ??_time_date_delimiter 0072  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 1684  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 03D4                               __pdataBANK0 0064  
                              read_byte@i 0076                                read_byte@j 0041  
             __end_of_set_upper_threshold 0997                       __end_of_display_day 00EE  
                               ___latbits 0002                             __pcstackBANK0 0058  
                             _decrementor 17DC                      set_beep_threshhold@x 0072  
                       __size_of_lcd_init 0023                         __size_of_get_temp 0107  
                       __size_of_get_time 002C                ??_time_date_hex_terminator 0071  
                            _button_delay 1695                          ___lwdiv@dividend 0078  
                             _day_counter 0027                                  ?___lbdiv 0070  
                          ?_date_settings 0070                                  ?___awmod 0070  
                                ?___lbmod 0070                                  ?___lwdiv 0076  
                                ?___lwmod 0070                         __size_of_set_time 0028  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 17DC                      __end_of_time_write_1 0845  
                      _initialise_buttons 16D1                           _day_of_week_var 002F  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 0004                                 _read_byte 08FB  
                            decrementor@z 005C                       ?_initialise_buttons 0070  
                               clear_ram0 162B                             ??_reset_alarm 0070  
                            ??_delay_temp 0071                               _display_day 004B  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 0256  
       ??_thermometer_threshhold_settings 005D          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0DAA                      ??_initialise_buttons 0070  
                  __size_of_time_settings 02E6          thermometer_threshhold_settings@i 0060  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 1656  
                               _write_cmd 16FE                                ?_init_temp 0070  
                              ?_read_byte 0070                           _buzzer_watcher1 0044  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 001D  
                     __size_of_write_byte 0036                           ??_date_settings 005D  
                    __size_of_ds1302_init 000F                               _incrementor 17B8  
                            _modulus_func 1674                       __end_of_reset_alarm 1648  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0031  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 0004                                  __ptext11 1623  
                                __ptext20 08C9                                  __ptext12 086D  
                                __ptext21 09CD                                  __ptext13 0899  
                                __ptext30 16FE                                  __ptext22 1772  
                                __ptext14 0B80                                  __ptext31 16E7  
                                __ptext23 1751                                  __ptext15 0997  
                                __ptext40 1695                                  __ptext32 16A9  
                                __ptext24 1665                                  __ptext16 092F  
                                __ptext33 1656                                  __ptext25 1730  
                                __ptext17 08FB                                  __ptext34 1715  
                                __ptext26 004B                                  __ptext18 1648  
                                __ptext35 0845                                  __ptext27 0AEA  
                                __ptext19 16BD                                  __ptext36 081F  
                                __ptext28 0A54                                  __ptext37 17B8  
                                __ptext29 03D4                                  __ptext38 1674  
                                __ptext39 0A09                       __end_of_time_read_1 08C9  
                              ?_write_cmd 0070                                  _lcd_init 1795  
                                _get_temp 0B80                                  _get_time 086D  
                           _time_settings 00EE          __end_of_time_date_hex_terminator 1665  
                           __size_of_main 0123                             __size_of_init 0008  
                           ?_delay_screen 0070                               _hrs_limiter 0049  
                               set_time@i 0075                              ??_reset_temp 0074  
                                _set_time 0845                                  _prev_hex 0048  
              time_date_delimiter@limiter 0071              __size_of_set_lower_threshold 0042  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 0096                            _buzzer_watcher 0045  
                             delay_temp@x 0072                               delay_temp@y 0070  
                             delay_temp@z 0073                            read_byte@value 0075  
             __end_of_time_date_delimiter 1730                                  init_ram0 1688  
                           button_delay@i 0070                               ??_init_temp 0070  
                      __end_of_reset_temp 0963                               ??_read_byte 0074  
                          ?_time_settings 0070                              ?_decrementor 0058  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 163B                              _time_write_1 081F  
                            ??_write_char 0072                              ??_write_byte 0074  
                              _OPTION_REG 0081                               _time_read_1 0899  
                            time_read_1@j 0072                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0075                               ??_write_cmd 0072  
            __size_of_set_upper_threshold 0034                             _display_clock 0A54  
                           time_write_1@j 0072                        __end_of_write_char 16FE  
                      __end_of_write_byte 09CD  
