

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Nov 28 19:58:03 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.05
    43                           ; Generated 20/12/2018 GMT
    44                           ; 
    45                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F877A Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  009F                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  010F                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000D                     	;# 
   210  000E                     	;# 
   211  000E                     	;# 
   212  000F                     	;# 
   213  0010                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0013                     	;# 
   217  0014                     	;# 
   218  0015                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001D                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  0081                     	;# 
   232  0085                     	;# 
   233  0086                     	;# 
   234  0087                     	;# 
   235  0088                     	;# 
   236  0089                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0094                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009C                     	;# 
   247  009D                     	;# 
   248  009E                     	;# 
   249  009F                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  010E                     	;# 
   253  010F                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  000E                     	;# 
   272  000F                     	;# 
   273  0010                     	;# 
   274  0011                     	;# 
   275  0012                     	;# 
   276  0013                     	;# 
   277  0014                     	;# 
   278  0015                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0017                     	;# 
   282  0018                     	;# 
   283  0019                     	;# 
   284  001A                     	;# 
   285  001B                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  001D                     	;# 
   289  001E                     	;# 
   290  001F                     	;# 
   291  0081                     	;# 
   292  0085                     	;# 
   293  0086                     	;# 
   294  0087                     	;# 
   295  0088                     	;# 
   296  0089                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0093                     	;# 
   303  0094                     	;# 
   304  0098                     	;# 
   305  0099                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  009F                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  010F                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  000E                     	;# 
   332  000F                     	;# 
   333  0010                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0015                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001B                     	;# 
   347  001C                     	;# 
   348  001D                     	;# 
   349  001E                     	;# 
   350  001F                     	;# 
   351  0081                     	;# 
   352  0085                     	;# 
   353  0086                     	;# 
   354  0087                     	;# 
   355  0088                     	;# 
   356  0089                     	;# 
   357  008C                     	;# 
   358  008D                     	;# 
   359  008E                     	;# 
   360  0091                     	;# 
   361  0092                     	;# 
   362  0093                     	;# 
   363  0094                     	;# 
   364  0098                     	;# 
   365  0099                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  009F                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  018C                     	;# 
   375  018D                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  000E                     	;# 
   392  000F                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0014                     	;# 
   398  0015                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  001D                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  0081                     	;# 
   412  0085                     	;# 
   413  0086                     	;# 
   414  0087                     	;# 
   415  0088                     	;# 
   416  0089                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0093                     	;# 
   423  0094                     	;# 
   424  0098                     	;# 
   425  0099                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  009F                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  010F                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0008                     	;# 
   445  0009                     	;# 
   446  000A                     	;# 
   447  000B                     	;# 
   448  000C                     	;# 
   449  000D                     	;# 
   450  000E                     	;# 
   451  000E                     	;# 
   452  000F                     	;# 
   453  0010                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0013                     	;# 
   457  0014                     	;# 
   458  0015                     	;# 
   459  0015                     	;# 
   460  0016                     	;# 
   461  0017                     	;# 
   462  0018                     	;# 
   463  0019                     	;# 
   464  001A                     	;# 
   465  001B                     	;# 
   466  001B                     	;# 
   467  001C                     	;# 
   468  001D                     	;# 
   469  001E                     	;# 
   470  001F                     	;# 
   471  0081                     	;# 
   472  0085                     	;# 
   473  0086                     	;# 
   474  0087                     	;# 
   475  0088                     	;# 
   476  0089                     	;# 
   477  008C                     	;# 
   478  008D                     	;# 
   479  008E                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0094                     	;# 
   484  0098                     	;# 
   485  0099                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  010C                     	;# 
   491  010D                     	;# 
   492  010E                     	;# 
   493  010F                     	;# 
   494  018C                     	;# 
   495  018D                     	;# 
   496                           
   497                           	psect	strings
   498  0800                     __pstrings:	
   499  0800                     stringtab:	
   500  0800                     __stringtab:	
   501  0800                     stringcode:	
   502                           ;	String table - string pointers are 1 byte each
   503                           
   504  0800                     stringdir:	
   505  0800  3008               	movlw	high stringdir
   506  0801  008A               	movwf	10
   507  0802  0804               	movf	4,w
   508  0803  0A84               	incf	4,f
   509  0804  0782               	addwf	2,f
   510  0805                     __stringbase:	
   511  0805  3400               	retlw	0
   512  0806                     __end_of__stringtab:	
   513  0806                     _table:	
   514  0806  3400               	retlw	0
   515  0807  3443               	retlw	67
   516  0808  3407               	retlw	7
   517  0809  3424               	retlw	36
   518  080A  3411               	retlw	17
   519  080B  3406               	retlw	6
   520  080C  3409               	retlw	9
   521  080D  3400               	retlw	0
   522  080E                     __end_of_table:	
   523  0009                     _PORTE	set	9
   524  0008                     _PORTD	set	8
   525  003E                     _RC6	set	62
   526  003F                     _RC7	set	63
   527  003C                     _RC4	set	60
   528  003B                     _RC3	set	59
   529  003A                     _RC2	set	58
   530  0039                     _RC1	set	57
   531  0038                     _RC0	set	56
   532  0049                     _RE1	set	73
   533  0034                     _RB4	set	52
   534  0031                     _RB1	set	49
   535  0035                     _RB5	set	53
   536  0030                     _RB0	set	48
   537  0048                     _RE0	set	72
   538  002B                     _RA3	set	43
   539  002C                     _RA4	set	44
   540  002D                     _RA5	set	45
   541  002A                     _RA2	set	42
   542  0028                     _RA0	set	40
   543  0087                     _TRISC	set	135
   544  0085                     _TRISA	set	133
   545  0089                     _TRISE	set	137
   546  0081                     _OPTION_REG	set	129
   547  0088                     _TRISD	set	136
   548  009F                     _ADCON1	set	159
   549  0086                     _TRISB	set	134
   550  0434                     _TRISB4	set	1076
   551  0448                     _TRISE0	set	1096
   552  0428                     _TRISA0	set	1064
   553                           
   554                           ; #config settings
   555  0000                     
   556                           	psect	cinit
   557  07F5                     start_initialization:	
   558  07F5                     __initialization:	
   559                           
   560                           ; Clear objects allocated to BANK0
   561  07F5  1383               	bcf	3,7	;select IRP bank0
   562  07F6  3020               	movlw	low __pbssBANK0
   563  07F7  0084               	movwf	4
   564  07F8  3035               	movlw	low (__pbssBANK0+21)
   565  07F9  120A  158A  26CB   	fcall	clear_ram0
   566  07FC                     end_of_initialization:	
   567                           ;End of C runtime variable initialization code
   568                           
   569  07FC                     __end_of__initialization:	
   570  07FC  0183               	clrf	3
   571  07FD  120A  118A  2C3E   	ljmp	_main	;jump to C main() function
   572                           
   573                           	psect	bssBANK0
   574  0020                     __pbssBANK0:	
   575  0020                     _table1:	
   576  0020                     	ds	7
   577  0027                     _wd:	
   578  0027                     	ds	2
   579  0029                     _var:	
   580  0029                     	ds	1
   581  002A                     read_byte@j:	
   582  002A                     	ds	1
   583  002B                     _wanfen:	
   584  002B                     	ds	1
   585  002C                     _qianfen:	
   586  002C                     	ds	1
   587  002D                     _baifen:	
   588  002D                     	ds	1
   589  002E                     _shifen:	
   590  002E                     	ds	1
   591  002F                     _ge:	
   592  002F                     	ds	1
   593  0030                     _shi:	
   594  0030                     	ds	1
   595  0031                     _TX:	
   596  0031                     	ds	1
   597  0032                     _TZ:	
   598  0032                     	ds	1
   599  0033                     _THV:	
   600  0033                     	ds	1
   601  0034                     _TLV:	
   602  0034                     	ds	1
   603                           
   604                           	psect	clrtext
   605  0ECB                     clear_ram0:	
   606                           ;	Called with FSR containing the base address, and
   607                           ;	W with the last address+1
   608                           
   609  0ECB  0064               	clrwdt	;clear the watchdog before getting into this loop
   610  0ECC                     clrloop0:	
   611  0ECC  0180               	clrf	0	;clear RAM location pointed to by FSR
   612  0ECD  0A84               	incf	4,f	;increment pointer
   613  0ECE  0604               	xorwf	4,w	;XOR with final address
   614  0ECF  1903               	btfsc	3,2	;have we reached the end yet?
   615  0ED0  3400               	retlw	0	;all done for this memory range, return
   616  0ED1  0604               	xorwf	4,w	;XOR again to restore value
   617  0ED2  2ECC               	goto	clrloop0	;do the next byte
   618                           
   619                           	psect	cstackCOMMON
   620  0070                     __pcstackCOMMON:	
   621  0070                     ?_init_temp:	
   622  0070                     ??_init_temp:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_set_time:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_ds1302_init:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_init:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ??_init:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_lcd_init:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_initialise_buttons:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ??_initialise_buttons:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_get_temp:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_get_time:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_write_cmd:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_write_char:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_display_temp:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_display_date:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_display_clock:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_thermometer_threshhold_settings:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_date_settings:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_time_settings:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_delay_screen:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ??_delay_screen:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_delay_temp:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_delay2:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ??_delay2:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_time_write_1:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ??_time_write_1:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_time_read_1:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ??_time_read_1:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_main:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_reset_temp:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_write_byte:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_read_byte:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_set_beep_threshhold:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ??_set_beep_threshhold:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?___awdiv:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?___awmod:	
   725                           ; 2 bytes @ 0x0
   726                           
   727  0070                     ?___lwmod:	
   728                           ; 2 bytes @ 0x0
   729                           
   730  0070                     delay_temp@y:	
   731                           ; 2 bytes @ 0x0
   732                           
   733  0070                     delay_screen@i:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     delay2@i:	
   737                           ; 2 bytes @ 0x0
   738                           
   739  0070                     ___awdiv@divisor:	
   740                           ; 2 bytes @ 0x0
   741                           
   742  0070                     ___awmod@divisor:	
   743                           ; 2 bytes @ 0x0
   744                           
   745  0070                     ___lwmod@divisor:	
   746                           ; 2 bytes @ 0x0
   747                           
   748                           
   749                           ; 2 bytes @ 0x0
   750  0070                     	ds	1
   751  0071                     ??_delay_temp:	
   752                           
   753                           ; 1 bytes @ 0x1
   754  0071                     	ds	1
   755  0072                     ??_write_cmd:	
   756  0072                     ??_write_char:	
   757                           ; 1 bytes @ 0x2
   758                           
   759  0072                     write_char@x:	
   760                           ; 1 bytes @ 0x2
   761                           
   762  0072                     write_cmd@x:	
   763                           ; 1 bytes @ 0x2
   764                           
   765  0072                     delay_temp@x:	
   766                           ; 1 bytes @ 0x2
   767                           
   768  0072                     set_beep_threshhold@x:	
   769                           ; 1 bytes @ 0x2
   770                           
   771  0072                     time_write_1@j:	
   772                           ; 1 bytes @ 0x2
   773                           
   774  0072                     time_read_1@j:	
   775                           ; 2 bytes @ 0x2
   776                           
   777  0072                     ___awdiv@dividend:	
   778                           ; 2 bytes @ 0x2
   779                           
   780  0072                     ___awmod@dividend:	
   781                           ; 2 bytes @ 0x2
   782                           
   783  0072                     ___lwmod@dividend:	
   784                           ; 2 bytes @ 0x2
   785                           
   786                           
   787                           ; 2 bytes @ 0x2
   788  0072                     	ds	1
   789  0073                     ??_lcd_init:	
   790  0073                     ??_display_temp:	
   791                           ; 1 bytes @ 0x3
   792                           
   793  0073                     ??_display_date:	
   794                           ; 1 bytes @ 0x3
   795                           
   796  0073                     ??_display_clock:	
   797                           ; 1 bytes @ 0x3
   798                           
   799  0073                     ??_date_settings:	
   800                           ; 1 bytes @ 0x3
   801                           
   802  0073                     ??_time_settings:	
   803                           ; 1 bytes @ 0x3
   804                           
   805  0073                     delay_temp@z:	
   806                           ; 1 bytes @ 0x3
   807                           
   808                           
   809                           ; 1 bytes @ 0x3
   810  0073                     	ds	1
   811  0074                     ??_reset_temp:	
   812  0074                     ??_write_byte:	
   813                           ; 1 bytes @ 0x4
   814                           
   815  0074                     ??_read_byte:	
   816                           ; 1 bytes @ 0x4
   817                           
   818  0074                     ??___awdiv:	
   819                           ; 1 bytes @ 0x4
   820                           
   821  0074                     ??___awmod:	
   822                           ; 1 bytes @ 0x4
   823                           
   824  0074                     ??___lwmod:	
   825                           ; 1 bytes @ 0x4
   826                           
   827  0074                     time_write_1@time_tx:	
   828                           ; 1 bytes @ 0x4
   829                           
   830  0074                     time_read_1@time_rx:	
   831                           ; 1 bytes @ 0x4
   832                           
   833                           
   834                           ; 1 bytes @ 0x4
   835  0074                     	ds	1
   836  0075                     ??_set_time:	
   837  0075                     ??_ds1302_init:	
   838                           ; 1 bytes @ 0x5
   839                           
   840  0075                     ??_get_time:	
   841                           ; 1 bytes @ 0x5
   842                           
   843  0075                     reset_temp@presence:	
   844                           ; 1 bytes @ 0x5
   845                           
   846  0075                     read_byte@value:	
   847                           ; 1 bytes @ 0x5
   848                           
   849  0075                     ___awdiv@counter:	
   850                           ; 1 bytes @ 0x5
   851                           
   852  0075                     ___awmod@counter:	
   853                           ; 1 bytes @ 0x5
   854                           
   855  0075                     ___lwmod@counter:	
   856                           ; 1 bytes @ 0x5
   857                           
   858  0075                     set_time@i:	
   859                           ; 1 bytes @ 0x5
   860                           
   861  0075                     display_clock@i:	
   862                           ; 2 bytes @ 0x5
   863                           
   864  0075                     display_date@i:	
   865                           ; 2 bytes @ 0x5
   866                           
   867                           
   868                           ; 2 bytes @ 0x5
   869  0075                     	ds	1
   870  0076                     ?___lwdiv:	
   871  0076                     write_byte@temp:	
   872                           ; 2 bytes @ 0x6
   873                           
   874  0076                     read_byte@i:	
   875                           ; 1 bytes @ 0x6
   876                           
   877  0076                     ___awdiv@sign:	
   878                           ; 1 bytes @ 0x6
   879                           
   880  0076                     ___awmod@sign:	
   881                           ; 1 bytes @ 0x6
   882                           
   883  0076                     get_time@i:	
   884                           ; 1 bytes @ 0x6
   885                           
   886  0076                     ___lwdiv@divisor:	
   887                           ; 2 bytes @ 0x6
   888                           
   889                           
   890                           ; 2 bytes @ 0x6
   891  0076                     	ds	1
   892  0077                     write_byte@val:	
   893  0077                     ___awdiv@quotient:	
   894                           ; 1 bytes @ 0x7
   895                           
   896                           
   897                           ; 2 bytes @ 0x7
   898  0077                     	ds	1
   899  0078                     write_byte@i:	
   900  0078                     ___lwdiv@dividend:	
   901                           ; 1 bytes @ 0x8
   902                           
   903                           
   904                           ; 2 bytes @ 0x8
   905  0078                     	ds	1
   906  0079                     ??_thermometer_threshhold_settings:	
   907  0079                     thermometer_threshhold_settings@i:	
   908                           ; 1 bytes @ 0x9
   909                           
   910                           
   911                           ; 2 bytes @ 0x9
   912  0079                     	ds	1
   913  007A                     ??___lwdiv:	
   914                           
   915                           ; 1 bytes @ 0xA
   916  007A                     	ds	1
   917  007B                     thermometer_threshhold_settings@x:	
   918  007B                     ___lwdiv@quotient:	
   919                           ; 2 bytes @ 0xB
   920                           
   921                           
   922                           ; 2 bytes @ 0xB
   923  007B                     	ds	2
   924  007D                     ___lwdiv@counter:	
   925                           
   926                           ; 1 bytes @ 0xD
   927  007D                     	ds	1
   928  007E                     ??_main:	
   929                           
   930                           	psect	cstackBANK0
   931  0035                     __pcstackBANK0:	
   932                           ; 1 bytes @ 0xE
   933                           
   934  0035                     ??_get_temp:	
   935                           
   936                           ; 1 bytes @ 0x0
   937  0035                     	ds	4
   938                           
   939                           	psect	maintext
   940  043E                     __pmaintext:	
   941 ;;
   942 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   943 ;;
   944 ;; *************** function _main *****************
   945 ;; Defined at:
   946 ;;		line 9 in file "mainLogic.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;		None
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : B00/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   960 ;;      Params:         0       0       0       0       0
   961 ;;      Locals:         0       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0
   963 ;;      Totals:         0       0       0       0       0
   964 ;;Total ram usage:        0 bytes
   965 ;; Hardware stack levels required when called:    3
   966 ;; This function calls:
   967 ;;		_date_settings
   968 ;;		_display_clock
   969 ;;		_display_date
   970 ;;		_display_temp
   971 ;;		_ds1302_init
   972 ;;		_get_temp
   973 ;;		_get_time
   974 ;;		_init
   975 ;;		_init_temp
   976 ;;		_initialise_buttons
   977 ;;		_lcd_init
   978 ;;		_set_time
   979 ;;		_thermometer_threshhold_settings
   980 ;;		_time_settings
   981 ;;		_write_char
   982 ;;		_write_cmd
   983 ;; This function is called by:
   984 ;;		Startup code after reset
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           
   989                           ;psect for function _main
   990  043E                     _main:	
   991                           
   992                           ;mainLogic.c: 10:     TRISB=0X02;
   993                           
   994                           ;incstack = 0
   995                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   996  043E  3002               	movlw	2
   997  043F  1683               	bsf	3,5	;RP0=1, select bank1
   998  0440  1303               	bcf	3,6	;RP1=0, select bank1
   999  0441  0086               	movwf	6	;volatile
  1000                           
  1001                           ;mainLogic.c: 11:     init_temp();
  1002  0442  120A  158A  26C4  120A  118A  	fcall	_init_temp
  1003                           
  1004                           ;mainLogic.c: 12:     set_time();
  1005  0447  120A  118A  2018  120A  118A  	fcall	_set_time
  1006                           
  1007                           ;mainLogic.c: 13:     ds1302_init();
  1008  044C  120A  158A  26F7  120A  118A  	fcall	_ds1302_init
  1009                           
  1010                           ;mainLogic.c: 15:     init();
  1011  0451  120A  158A  26D3  120A  118A  	fcall	_init
  1012                           
  1013                           ;mainLogic.c: 16:     lcd_init();
  1014  0456  120A  158A  2785  120A  118A  	fcall	_lcd_init
  1015                           
  1016                           ;mainLogic.c: 17:     init_temp();
  1017  045B  120A  158A  26C4  120A  118A  	fcall	_init_temp
  1018                           
  1019                           ;mainLogic.c: 18:     initialise_buttons();
  1020  0460  120A  158A  26DC  120A  118A  	fcall	_initialise_buttons
  1021  0465                     l2425:	
  1022                           
  1023                           ;mainLogic.c: 22:     get_temp();
  1024  0465  120A  118A  2500  120A  118A  	fcall	_get_temp
  1025                           
  1026                           ;mainLogic.c: 23:     get_time();
  1027  046A  120A  158A  27D4  120A  118A  	fcall	_get_time
  1028                           
  1029                           ;mainLogic.c: 24:     write_cmd(0x80);
  1030  046F  3080               	movlw	128
  1031  0470  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1032                           
  1033                           ;mainLogic.c: 25:     write_char('T');
  1034  0475  3054               	movlw	84
  1035  0476  120A  158A  2731  120A  118A  	fcall	_write_char
  1036                           
  1037                           ;mainLogic.c: 26:     write_char('e');
  1038  047B  3065               	movlw	101
  1039  047C  120A  158A  2731  120A  118A  	fcall	_write_char
  1040                           
  1041                           ;mainLogic.c: 27:     write_char('m');
  1042  0481  306D               	movlw	109
  1043  0482  120A  158A  2731  120A  118A  	fcall	_write_char
  1044                           
  1045                           ;mainLogic.c: 28:     write_char('p');
  1046  0487  3070               	movlw	112
  1047  0488  120A  158A  2731  120A  118A  	fcall	_write_char
  1048                           
  1049                           ;mainLogic.c: 29:     write_char(':');
  1050  048D  303A               	movlw	58
  1051  048E  120A  158A  2731  120A  118A  	fcall	_write_char
  1052                           
  1053                           ;mainLogic.c: 30:     display_temp();
  1054  0493  120A  158A  27AB  120A  118A  	fcall	_display_temp
  1055                           
  1056                           ;mainLogic.c: 32:     write_cmd(0x90);
  1057  0498  3090               	movlw	144
  1058  0499  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1059                           
  1060                           ;mainLogic.c: 33:     write_char('D');
  1061  049E  3044               	movlw	68
  1062  049F  120A  158A  2731  120A  118A  	fcall	_write_char
  1063                           
  1064                           ;mainLogic.c: 34:     write_char('a');
  1065  04A4  3061               	movlw	97
  1066  04A5  120A  158A  2731  120A  118A  	fcall	_write_char
  1067                           
  1068                           ;mainLogic.c: 35:     write_char('t');
  1069  04AA  3074               	movlw	116
  1070  04AB  120A  158A  2731  120A  118A  	fcall	_write_char
  1071                           
  1072                           ;mainLogic.c: 36:     write_char('e');
  1073  04B0  3065               	movlw	101
  1074  04B1  120A  158A  2731  120A  118A  	fcall	_write_char
  1075                           
  1076                           ;mainLogic.c: 37:     write_char(':');
  1077  04B6  303A               	movlw	58
  1078  04B7  120A  158A  2731  120A  118A  	fcall	_write_char
  1079                           
  1080                           ;mainLogic.c: 38:     write_char(' ');
  1081  04BC  3020               	movlw	32
  1082  04BD  120A  158A  2731  120A  118A  	fcall	_write_char
  1083                           
  1084                           ;mainLogic.c: 40:     display_date();
  1085  04C2  120A  118A  2307  120A  118A  	fcall	_display_date
  1086                           
  1087                           ;mainLogic.c: 42:     write_cmd(0x88);
  1088  04C7  3088               	movlw	136
  1089  04C8  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1090                           
  1091                           ;mainLogic.c: 43:     write_char('T');
  1092  04CD  3054               	movlw	84
  1093  04CE  120A  158A  2731  120A  118A  	fcall	_write_char
  1094                           
  1095                           ;mainLogic.c: 44:     write_char('i');
  1096  04D3  3069               	movlw	105
  1097  04D4  120A  158A  2731  120A  118A  	fcall	_write_char
  1098                           
  1099                           ;mainLogic.c: 45:     write_char('m');
  1100  04D9  306D               	movlw	109
  1101  04DA  120A  158A  2731  120A  118A  	fcall	_write_char
  1102                           
  1103                           ;mainLogic.c: 46:     write_char('e');
  1104  04DF  3065               	movlw	101
  1105  04E0  120A  158A  2731  120A  118A  	fcall	_write_char
  1106                           
  1107                           ;mainLogic.c: 47:     write_char(':');
  1108  04E5  303A               	movlw	58
  1109  04E6  120A  158A  2731  120A  118A  	fcall	_write_char
  1110                           
  1111                           ;mainLogic.c: 48:     display_clock();
  1112  04EB  120A  118A  239C  120A  118A  	fcall	_display_clock
  1113                           
  1114                           ;mainLogic.c: 49:     thermometer_threshhold_settings();
  1115  04F0  120A  118A  2624  120A  118A  	fcall	_thermometer_threshhold_settings
  1116                           
  1117                           ;mainLogic.c: 50:     date_settings();
  1118  04F5  120A  118A  2229  120A  118A  	fcall	_date_settings
  1119                           
  1120                           ;mainLogic.c: 51:     time_settings();
  1121  04FA  120A  118A  2298  120A  118A  	fcall	_time_settings
  1122  04FF  2C65               	goto	l2425
  1123  0500                     __end_of_main:	
  1124                           
  1125                           	psect	text1
  1126  0298                     __ptext1:	
  1127 ;; *************** function _time_settings *****************
  1128 ;; Defined at:
  1129 ;;		line 143 in file "Button_src.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1143 ;;      Params:         0       0       0       0       0
  1144 ;;      Locals:         0       0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0
  1146 ;;      Totals:         0       0       0       0       0
  1147 ;;Total ram usage:        0 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    2
  1150 ;; This function calls:
  1151 ;;		_write_char
  1152 ;;		_write_cmd
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           
  1159                           ;psect for function _time_settings
  1160  0298                     _time_settings:	
  1161                           
  1162                           ;Button_src.c: 144:  RC0 = 1;
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in _time_settings: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1166  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1167  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1168  029A  1407               	bsf	7,0	;volatile
  1169                           
  1170                           ;Button_src.c: 145:  RC1 = 1;
  1171  029B  1487               	bsf	7,1	;volatile
  1172                           
  1173                           ;Button_src.c: 146:  RC2 = 0;
  1174  029C  1107               	bcf	7,2	;volatile
  1175                           
  1176                           ;Button_src.c: 147:  RC3 = 1;
  1177  029D  1587               	bsf	7,3	;volatile
  1178                           
  1179                           ;Button_src.c: 149:   if (RC4 == 0){
  1180  029E  1A07               	btfsc	7,4	;volatile
  1181  029F  0008               	return
  1182                           
  1183                           ;Button_src.c: 150:       write_cmd(0x1);
  1184  02A0  3001               	movlw	1
  1185  02A1  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1186  02A6                     l371:	
  1187                           ;Button_src.c: 151:       for(;;){
  1188                           
  1189                           
  1190                           ;Button_src.c: 152:             write_cmd(0x80);
  1191  02A6  3080               	movlw	128
  1192  02A7  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1193                           
  1194                           ;Button_src.c: 153:             write_char('T');
  1195  02AC  3054               	movlw	84
  1196  02AD  120A  158A  2731  120A  118A  	fcall	_write_char
  1197                           
  1198                           ;Button_src.c: 154:             write_char('i');
  1199  02B2  3069               	movlw	105
  1200  02B3  120A  158A  2731  120A  118A  	fcall	_write_char
  1201                           
  1202                           ;Button_src.c: 155:             write_char('m');
  1203  02B8  306D               	movlw	109
  1204  02B9  120A  158A  2731  120A  118A  	fcall	_write_char
  1205                           
  1206                           ;Button_src.c: 156:             write_char('e');
  1207  02BE  3065               	movlw	101
  1208  02BF  120A  158A  2731  120A  118A  	fcall	_write_char
  1209                           
  1210                           ;Button_src.c: 157:             write_char('_');
  1211  02C4  305F               	movlw	95
  1212  02C5  120A  158A  2731  120A  118A  	fcall	_write_char
  1213                           
  1214                           ;Button_src.c: 158:             write_char('S');
  1215  02CA  3053               	movlw	83
  1216  02CB  120A  158A  2731  120A  118A  	fcall	_write_char
  1217                           
  1218                           ;Button_src.c: 159:             write_char('e');
  1219  02D0  3065               	movlw	101
  1220  02D1  120A  158A  2731  120A  118A  	fcall	_write_char
  1221                           
  1222                           ;Button_src.c: 160:             write_char('t');
  1223  02D6  3074               	movlw	116
  1224  02D7  120A  158A  2731  120A  118A  	fcall	_write_char
  1225                           
  1226                           ;Button_src.c: 161:             write_char('t');
  1227  02DC  3074               	movlw	116
  1228  02DD  120A  158A  2731  120A  118A  	fcall	_write_char
  1229                           
  1230                           ;Button_src.c: 162:             write_char('i');
  1231  02E2  3069               	movlw	105
  1232  02E3  120A  158A  2731  120A  118A  	fcall	_write_char
  1233                           
  1234                           ;Button_src.c: 163:             write_char('n');
  1235  02E8  306E               	movlw	110
  1236  02E9  120A  158A  2731  120A  118A  	fcall	_write_char
  1237                           
  1238                           ;Button_src.c: 164:             write_char('g');
  1239  02EE  3067               	movlw	103
  1240  02EF  120A  158A  2731  120A  118A  	fcall	_write_char
  1241                           
  1242                           ;Button_src.c: 165:             write_char('s');
  1243  02F4  3073               	movlw	115
  1244  02F5  120A  158A  2731  120A  118A  	fcall	_write_char
  1245                           
  1246                           ;Button_src.c: 166:             RC0 = 0;
  1247  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1248  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1249  02FC  1007               	bcf	7,0	;volatile
  1250                           
  1251                           ;Button_src.c: 167:             RC1 = 1;
  1252  02FD  1487               	bsf	7,1	;volatile
  1253                           
  1254                           ;Button_src.c: 168:             RC2 = 1;
  1255  02FE  1507               	bsf	7,2	;volatile
  1256                           
  1257                           ;Button_src.c: 169:             RC3 = 1;
  1258  02FF  1587               	bsf	7,3	;volatile
  1259                           
  1260                           ;Button_src.c: 170:             if (RC7 == 0 ){
  1261  0300  1B87               	btfsc	7,7	;volatile
  1262  0301  2AA6               	goto	l371
  1263                           
  1264                           ;Button_src.c: 171:             write_cmd(0x1);
  1265  0302  3001               	movlw	1
  1266  0303  120A  158A  2748   	fcall	_write_cmd
  1267                           
  1268                           ;Button_src.c: 172:             break;
  1269  0306  0008               	return
  1270  0307                     __end_of_time_settings:	
  1271                           
  1272                           	psect	text2
  1273  0624                     __ptext2:	
  1274 ;; *************** function _thermometer_threshhold_settings *****************
  1275 ;; Defined at:
  1276 ;;		line 18 in file "Button_src.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  i               2    9[COMMON] int 
  1281 ;;  x               2   11[COMMON] int 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  1    wreg      void 
  1284 ;; Registers used:
  1285 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1291 ;;      Params:         0       0       0       0       0
  1292 ;;      Locals:         4       0       0       0       0
  1293 ;;      Temps:          0       0       0       0       0
  1294 ;;      Totals:         4       0       0       0       0
  1295 ;;Total ram usage:        4 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    2
  1298 ;; This function calls:
  1299 ;;		___awdiv
  1300 ;;		_set_beep_threshhold
  1301 ;;		_write_char
  1302 ;;		_write_cmd
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           
  1309                           ;psect for function _thermometer_threshhold_settings
  1310  0624                     _thermometer_threshhold_settings:	
  1311                           
  1312                           ;Button_src.c: 19:  RC0 = 1;
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  1316  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0625  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0626  1407               	bsf	7,0	;volatile
  1319                           
  1320                           ;Button_src.c: 20:  RC1 = 0;
  1321  0627  1087               	bcf	7,1	;volatile
  1322                           
  1323                           ;Button_src.c: 21:  RC2 = 1;
  1324  0628  1507               	bsf	7,2	;volatile
  1325                           
  1326                           ;Button_src.c: 22:  RC3 = 1;
  1327  0629  1587               	bsf	7,3	;volatile
  1328                           
  1329                           ;Button_src.c: 23:   if (RC4 == 0){
  1330  062A  1A07               	btfsc	7,4	;volatile
  1331  062B  0008               	return
  1332  062C                     l2265:	
  1333                           
  1334                           ;Button_src.c: 24:       write_cmd(0x1);
  1335  062C  3001               	movlw	1
  1336  062D  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1337                           
  1338                           ;Button_src.c: 26:             write_cmd(0x80);
  1339                           
  1340                           ;Button_src.c: 25:       for(;;){
  1341  0632  3080               	movlw	128
  1342  0633  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1343                           
  1344                           ;Button_src.c: 27:             write_char('T');
  1345  0638  3054               	movlw	84
  1346  0639  120A  158A  2731  120A  118A  	fcall	_write_char
  1347                           
  1348                           ;Button_src.c: 28:             write_char('e');
  1349  063E  3065               	movlw	101
  1350  063F  120A  158A  2731  120A  118A  	fcall	_write_char
  1351                           
  1352                           ;Button_src.c: 29:             write_char('m');
  1353  0644  306D               	movlw	109
  1354  0645  120A  158A  2731  120A  118A  	fcall	_write_char
  1355                           
  1356                           ;Button_src.c: 30:             write_char('p');
  1357  064A  3070               	movlw	112
  1358  064B  120A  158A  2731  120A  118A  	fcall	_write_char
  1359                           
  1360                           ;Button_src.c: 31:             write_char('_');
  1361  0650  305F               	movlw	95
  1362  0651  120A  158A  2731  120A  118A  	fcall	_write_char
  1363                           
  1364                           ;Button_src.c: 32:             write_char('t');
  1365  0656  3074               	movlw	116
  1366  0657  120A  158A  2731  120A  118A  	fcall	_write_char
  1367                           
  1368                           ;Button_src.c: 33:             write_char('h');
  1369  065C  3068               	movlw	104
  1370  065D  120A  158A  2731  120A  118A  	fcall	_write_char
  1371                           
  1372                           ;Button_src.c: 34:             write_char('r');
  1373  0662  3072               	movlw	114
  1374  0663  120A  158A  2731  120A  118A  	fcall	_write_char
  1375                           
  1376                           ;Button_src.c: 35:             write_char('e');
  1377  0668  3065               	movlw	101
  1378  0669  120A  158A  2731  120A  118A  	fcall	_write_char
  1379                           
  1380                           ;Button_src.c: 36:             write_char('s');
  1381  066E  3073               	movlw	115
  1382  066F  120A  158A  2731  120A  118A  	fcall	_write_char
  1383                           
  1384                           ;Button_src.c: 37:             write_char('h');
  1385  0674  3068               	movlw	104
  1386  0675  120A  158A  2731  120A  118A  	fcall	_write_char
  1387                           
  1388                           ;Button_src.c: 38:             write_char('o');
  1389  067A  306F               	movlw	111
  1390  067B  120A  158A  2731  120A  118A  	fcall	_write_char
  1391                           
  1392                           ;Button_src.c: 39:             write_char('l');
  1393  0680  306C               	movlw	108
  1394  0681  120A  158A  2731  120A  118A  	fcall	_write_char
  1395                           
  1396                           ;Button_src.c: 40:             write_char('d');
  1397  0686  3064               	movlw	100
  1398  0687  120A  158A  2731  120A  118A  	fcall	_write_char
  1399                           
  1400                           ;Button_src.c: 41:             write_cmd(0x90);
  1401  068C  3090               	movlw	144
  1402  068D  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1403                           
  1404                           ;Button_src.c: 42:             write_char('C');
  1405  0692  3043               	movlw	67
  1406  0693  120A  158A  2731  120A  118A  	fcall	_write_char
  1407                           
  1408                           ;Button_src.c: 43:             write_char('u');
  1409  0698  3075               	movlw	117
  1410  0699  120A  158A  2731  120A  118A  	fcall	_write_char
  1411                           
  1412                           ;Button_src.c: 44:             write_char('r');
  1413  069E  3072               	movlw	114
  1414  069F  120A  158A  2731  120A  118A  	fcall	_write_char
  1415                           
  1416                           ;Button_src.c: 45:             write_char('r');
  1417  06A4  3072               	movlw	114
  1418  06A5  120A  158A  2731  120A  118A  	fcall	_write_char
  1419                           
  1420                           ;Button_src.c: 46:             write_char('e');
  1421  06AA  3065               	movlw	101
  1422  06AB  120A  158A  2731  120A  118A  	fcall	_write_char
  1423                           
  1424                           ;Button_src.c: 47:             write_char('n');
  1425  06B0  306E               	movlw	110
  1426  06B1  120A  158A  2731  120A  118A  	fcall	_write_char
  1427                           
  1428                           ;Button_src.c: 48:             write_char('t');
  1429  06B6  3074               	movlw	116
  1430  06B7  120A  158A  2731  120A  118A  	fcall	_write_char
  1431                           
  1432                           ;Button_src.c: 49:             write_char(':');
  1433  06BC  303A               	movlw	58
  1434  06BD  120A  158A  2731  120A  118A  	fcall	_write_char
  1435                           
  1436                           ;Button_src.c: 50:             set_beep_threshhold(var);
  1437  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1438  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1439  06C4  0829               	movf	_var,w
  1440  06C5  120A  158A  270A  120A  118A  	fcall	_set_beep_threshhold
  1441                           
  1442                           ;Button_src.c: 51:             write_char(var);
  1443  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1444  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1445  06CC  0829               	movf	_var,w
  1446  06CD  120A  158A  2731  120A  118A  	fcall	_write_char
  1447                           
  1448                           ;Button_src.c: 52:             write_char('0');
  1449  06D2  3030               	movlw	48
  1450  06D3  120A  158A  2731  120A  118A  	fcall	_write_char
  1451                           
  1452                           ;Button_src.c: 54:             write_cmd(0x88);
  1453  06D8  3088               	movlw	136
  1454  06D9  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1455                           
  1456                           ;Button_src.c: 55:             write_char('S');
  1457  06DE  3053               	movlw	83
  1458  06DF  120A  158A  2731  120A  118A  	fcall	_write_char
  1459                           
  1460                           ;Button_src.c: 56:             write_char('e');
  1461  06E4  3065               	movlw	101
  1462  06E5  120A  158A  2731  120A  118A  	fcall	_write_char
  1463                           
  1464                           ;Button_src.c: 57:             write_char('t');
  1465  06EA  3074               	movlw	116
  1466  06EB  120A  158A  2731  120A  118A  	fcall	_write_char
  1467                           
  1468                           ;Button_src.c: 58:             write_char('_');
  1469  06F0  305F               	movlw	95
  1470  06F1  120A  158A  2731  120A  118A  	fcall	_write_char
  1471                           
  1472                           ;Button_src.c: 59:             write_char('t');
  1473  06F6  3074               	movlw	116
  1474  06F7  120A  158A  2731  120A  118A  	fcall	_write_char
  1475                           
  1476                           ;Button_src.c: 60:             write_char('h');
  1477  06FC  3068               	movlw	104
  1478  06FD  120A  158A  2731  120A  118A  	fcall	_write_char
  1479                           
  1480                           ;Button_src.c: 61:             write_char('r');
  1481  0702  3072               	movlw	114
  1482  0703  120A  158A  2731  120A  118A  	fcall	_write_char
  1483                           
  1484                           ;Button_src.c: 62:             write_char('e');
  1485  0708  3065               	movlw	101
  1486  0709  120A  158A  2731  120A  118A  	fcall	_write_char
  1487                           
  1488                           ;Button_src.c: 63:             write_char('s');
  1489  070E  3073               	movlw	115
  1490  070F  120A  158A  2731  120A  118A  	fcall	_write_char
  1491                           
  1492                           ;Button_src.c: 64:             write_char('h');
  1493  0714  3068               	movlw	104
  1494  0715  120A  158A  2731  120A  118A  	fcall	_write_char
  1495                           
  1496                           ;Button_src.c: 65:             write_char('o');
  1497  071A  306F               	movlw	111
  1498  071B  120A  158A  2731  120A  118A  	fcall	_write_char
  1499                           
  1500                           ;Button_src.c: 66:             write_char('l');
  1501  0720  306C               	movlw	108
  1502  0721  120A  158A  2731  120A  118A  	fcall	_write_char
  1503                           
  1504                           ;Button_src.c: 67:             write_char('d');
  1505  0726  3064               	movlw	100
  1506  0727  120A  158A  2731  120A  118A  	fcall	_write_char
  1507                           
  1508                           ;Button_src.c: 68:             write_char(':');
  1509  072C  303A               	movlw	58
  1510  072D  120A  158A  2731  120A  118A  	fcall	_write_char
  1511                           
  1512                           ;Button_src.c: 70:             write_cmd(0x98);
  1513  0732  3098               	movlw	152
  1514  0733  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1515                           
  1516                           ;Button_src.c: 71:             RC0 = 1;
  1517  0738  1283               	bcf	3,5	;RP0=0, select bank0
  1518  0739  1303               	bcf	3,6	;RP1=0, select bank0
  1519  073A  1407               	bsf	7,0	;volatile
  1520                           
  1521                           ;Button_src.c: 72:             RC1 = 0;
  1522  073B  1087               	bcf	7,1	;volatile
  1523                           
  1524                           ;Button_src.c: 73:             RC2 = 1;
  1525  073C  1507               	bsf	7,2	;volatile
  1526                           
  1527                           ;Button_src.c: 74:             RC3 = 1;
  1528  073D  1587               	bsf	7,3	;volatile
  1529                           
  1530                           ;Button_src.c: 75:             int x;;Button_src.c: 76:             x = 0x00;
  1531  073E  01FB               	clrf	thermometer_threshhold_settings@x
  1532  073F  01FC               	clrf	thermometer_threshhold_settings@x+1
  1533  0740                     l2315:	
  1534                           
  1535                           ;Button_src.c: 78:                  RC0 = 1;
  1536  0740  1407               	bsf	7,0	;volatile
  1537                           
  1538                           ;Button_src.c: 79:                  RC1 = 0;
  1539  0741  1087               	bcf	7,1	;volatile
  1540                           
  1541                           ;Button_src.c: 80:                  RC2 = 1;
  1542  0742  1507               	bsf	7,2	;volatile
  1543                           
  1544                           ;Button_src.c: 81:                  RC3 = 1;
  1545  0743  1587               	bsf	7,3	;volatile
  1546                           
  1547                           ;Button_src.c: 82:                 if(RC7==0){
  1548  0744  1B87               	btfsc	7,7	;volatile
  1549  0745  2FAF               	goto	l353
  1550                           
  1551                           ;Button_src.c: 83:                     write_cmd(0x98);
  1552  0746  3098               	movlw	152
  1553  0747  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1554                           
  1555                           ;Button_src.c: 84:                     x++;
  1556  074C  3001               	movlw	1
  1557  074D  07FB               	addwf	thermometer_threshhold_settings@x,f
  1558  074E  1803               	skipnc
  1559  074F  0AFC               	incf	thermometer_threshhold_settings@x+1,f
  1560  0750  3000               	movlw	0
  1561  0751  07FC               	addwf	thermometer_threshhold_settings@x+1,f
  1562                           
  1563                           ;Button_src.c: 88:                     x = x/16>10?55+x/16:48+x/16;
  1564  0752  3010               	movlw	16
  1565  0753  00F0               	movwf	___awdiv@divisor
  1566  0754  3000               	movlw	0
  1567  0755  00F1               	movwf	___awdiv@divisor+1
  1568  0756  087C               	movf	thermometer_threshhold_settings@x+1,w
  1569  0757  00F3               	movwf	___awdiv@dividend+1
  1570  0758  087B               	movf	thermometer_threshhold_settings@x,w
  1571  0759  00F2               	movwf	___awdiv@dividend
  1572  075A  120A  118A  21D0  120A  118A  	fcall	___awdiv
  1573  075F  0871               	movf	?___awdiv+1,w
  1574  0760  3A80               	xorlw	128
  1575  0761  00FF               	movwf	127
  1576  0762  3080               	movlw	128
  1577  0763  027F               	subwf	127,w
  1578  0764  1D03               	skipz
  1579  0765  2F68               	goto	u1335
  1580  0766  300B               	movlw	11
  1581  0767  0270               	subwf	?___awdiv,w
  1582  0768                     u1335:	
  1583  0768  1803               	skipnc
  1584  0769  2F7A               	goto	l2333
  1585  076A  3010               	movlw	16
  1586  076B  00F0               	movwf	___awdiv@divisor
  1587  076C  3000               	movlw	0
  1588  076D  00F1               	movwf	___awdiv@divisor+1
  1589  076E  087C               	movf	thermometer_threshhold_settings@x+1,w
  1590  076F  00F3               	movwf	___awdiv@dividend+1
  1591  0770  087B               	movf	thermometer_threshhold_settings@x,w
  1592  0771  00F2               	movwf	___awdiv@dividend
  1593  0772  120A  118A  21D0  120A  118A  	fcall	___awdiv
  1594  0777  0870               	movf	?___awdiv,w
  1595  0778  3E30               	addlw	48
  1596  0779  2F89               	goto	L1
  1597  077A                     l2333:	
  1598  077A  3010               	movlw	16
  1599  077B  00F0               	movwf	___awdiv@divisor
  1600  077C  3000               	movlw	0
  1601  077D  00F1               	movwf	___awdiv@divisor+1
  1602  077E  087C               	movf	thermometer_threshhold_settings@x+1,w
  1603  077F  00F3               	movwf	___awdiv@dividend+1
  1604  0780  087B               	movf	thermometer_threshhold_settings@x,w
  1605  0781  00F2               	movwf	___awdiv@dividend
  1606  0782  120A  118A  21D0  120A  118A  	fcall	___awdiv
  1607  0787  0870               	movf	?___awdiv,w
  1608  0788  3E37               	addlw	55
  1609  0789                     L1:	
  1610  0789  00FB               	movwf	thermometer_threshhold_settings@x
  1611  078A  0871               	movf	?___awdiv+1,w
  1612  078B  1803               	skipnc
  1613  078C  3E01               	addlw	1
  1614  078D  3E00               	addlw	0
  1615  078E  00FC               	movwf	thermometer_threshhold_settings@x+1
  1616                           
  1617                           ;Button_src.c: 89:                     write_char(x + '0');
  1618  078F  087B               	movf	thermometer_threshhold_settings@x,w
  1619  0790  3E30               	addlw	48
  1620  0791  120A  158A  2731  120A  118A  	fcall	_write_char
  1621                           
  1622                           ;Button_src.c: 90:                     for(int i=0;i<10000;i++);
  1623  0796  01F9               	clrf	thermometer_threshhold_settings@i
  1624  0797  01FA               	clrf	thermometer_threshhold_settings@i+1
  1625  0798                     l2343:	
  1626  0798  3001               	movlw	1
  1627  0799  07F9               	addwf	thermometer_threshhold_settings@i,f
  1628  079A  1803               	skipnc
  1629  079B  0AFA               	incf	thermometer_threshhold_settings@i+1,f
  1630  079C  3000               	movlw	0
  1631  079D  07FA               	addwf	thermometer_threshhold_settings@i+1,f
  1632  079E  087A               	movf	thermometer_threshhold_settings@i+1,w
  1633  079F  3A80               	xorlw	128
  1634  07A0  00FF               	movwf	127
  1635  07A1  30A7               	movlw	167
  1636  07A2  027F               	subwf	127,w
  1637  07A3  1D03               	skipz
  1638  07A4  2FA7               	goto	u1345
  1639  07A5  3010               	movlw	16
  1640  07A6  0279               	subwf	thermometer_threshhold_settings@i,w
  1641  07A7                     u1345:	
  1642  07A7  1C03               	skipc
  1643  07A8  2F98               	goto	l2343
  1644                           
  1645                           ;Button_src.c: 95:                  RC0 = 0;
  1646  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  1647  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  1648  07AB  1007               	bcf	7,0	;volatile
  1649                           
  1650                           ;Button_src.c: 96:                  RC1 = 1;
  1651  07AC  1487               	bsf	7,1	;volatile
  1652                           
  1653                           ;Button_src.c: 97:                  RC2 = 1;
  1654  07AD  1507               	bsf	7,2	;volatile
  1655                           
  1656                           ;Button_src.c: 98:                  RC3 = 1;
  1657  07AE  1587               	bsf	7,3	;volatile
  1658  07AF                     l353:	
  1659                           ;Button_src.c: 99:                  if(RC6 == 0){
  1660                           ;Button_src.c: 102:                 }
  1661                           
  1662                           
  1663                           ;Button_src.c: 103:                  RC0 = 1;
  1664  07AF  1407               	bsf	7,0	;volatile
  1665                           
  1666                           ;Button_src.c: 104:                  RC1 = 1;
  1667  07B0  1487               	bsf	7,1	;volatile
  1668                           
  1669                           ;Button_src.c: 105:                  RC2 = 0;
  1670  07B1  1107               	bcf	7,2	;volatile
  1671                           
  1672                           ;Button_src.c: 106:                  RC3 = 1;
  1673  07B2  1587               	bsf	7,3	;volatile
  1674                           
  1675                           ;Button_src.c: 107:                 if(RC7==0){
  1676  07B3  1B87               	btfsc	7,7	;volatile
  1677  07B4  2FC7               	goto	l2349
  1678                           
  1679                           ;Button_src.c: 109:                     write_cmd(0x98);
  1680  07B5  3098               	movlw	152
  1681  07B6  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1682                           
  1683                           ;Button_src.c: 110:                     write_char('2');
  1684  07BB  3032               	movlw	50
  1685  07BC  120A  158A  2731  120A  118A  	fcall	_write_char
  1686                           
  1687                           ;Button_src.c: 111:                     write_char('0');
  1688  07C1  3030               	movlw	48
  1689  07C2  120A  158A  2731  120A  118A  	fcall	_write_char
  1690  07C7                     l2349:	
  1691                           
  1692                           ;Button_src.c: 113:                  RC0 = 1;
  1693  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  1694  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  1695  07C9  1407               	bsf	7,0	;volatile
  1696                           
  1697                           ;Button_src.c: 114:                  RC1 = 1;
  1698  07CA  1487               	bsf	7,1	;volatile
  1699                           
  1700                           ;Button_src.c: 115:                  RC2 = 1;
  1701  07CB  1507               	bsf	7,2	;volatile
  1702                           
  1703                           ;Button_src.c: 116:                  RC3 = 0;
  1704  07CC  1187               	bcf	7,3	;volatile
  1705                           
  1706                           ;Button_src.c: 117:                  if(RC7==0){
  1707  07CD  1B87               	btfsc	7,7	;volatile
  1708  07CE  2FE1               	goto	l2361
  1709                           
  1710                           ;Button_src.c: 118:                     write_cmd(0x98);
  1711  07CF  3098               	movlw	152
  1712  07D0  120A  158A  2748  120A  118A  	fcall	_write_cmd
  1713                           
  1714                           ;Button_src.c: 119:                     write_char('3');
  1715  07D5  3033               	movlw	51
  1716  07D6  120A  158A  2731  120A  118A  	fcall	_write_char
  1717                           
  1718                           ;Button_src.c: 120:                     write_char('0');
  1719  07DB  3030               	movlw	48
  1720  07DC  120A  158A  2731  120A  118A  	fcall	_write_char
  1721  07E1                     l2361:	
  1722                           
  1723                           ;Button_src.c: 122:             RC0 = 0;
  1724  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  1725  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  1726  07E3  1007               	bcf	7,0	;volatile
  1727                           
  1728                           ;Button_src.c: 123:             RC1 = 1;
  1729  07E4  1487               	bsf	7,1	;volatile
  1730                           
  1731                           ;Button_src.c: 124:             RC2 = 1;
  1732  07E5  1507               	bsf	7,2	;volatile
  1733                           
  1734                           ;Button_src.c: 125:             RC3 = 1;
  1735  07E6  1587               	bsf	7,3	;volatile
  1736                           
  1737                           ;Button_src.c: 126:             if (RC7 == 0 ){
  1738  07E7  1B87               	btfsc	7,7	;volatile
  1739  07E8  2FEE               	goto	l363
  1740                           
  1741                           ;Button_src.c: 127:             write_cmd(0x1);
  1742  07E9  3001               	movlw	1
  1743  07EA  120A  158A  2748   	fcall	_write_cmd
  1744  07ED  0008               	return
  1745  07EE                     l363:	
  1746                           ;Button_src.c: 129:             }
  1747                           
  1748                           
  1749                           ;Button_src.c: 130:             RC0 = 0;
  1750  07EE  1007               	bcf	7,0	;volatile
  1751                           
  1752                           ;Button_src.c: 131:             RC1 = 1;
  1753  07EF  1487               	bsf	7,1	;volatile
  1754                           
  1755                           ;Button_src.c: 132:             RC2 = 1;
  1756  07F0  1507               	bsf	7,2	;volatile
  1757                           
  1758                           ;Button_src.c: 133:             RC3 = 1;
  1759  07F1  1587               	bsf	7,3	;volatile
  1760                           
  1761                           ;Button_src.c: 134:             if (RC7 == 0 ){
  1762  07F2  1B87               	btfsc	7,7	;volatile
  1763  07F3  2F40               	goto	l2315
  1764  07F4  2E2C               	goto	l2265
  1765  07F5                     __end_of_thermometer_threshhold_settings:	
  1766                           ;Button_src.c: 136:             break;
  1767                           
  1768                           ;Button_src.c: 135:             write_cmd(0x1);
  1769                           
  1770                           
  1771                           	psect	text3
  1772  0F0A                     __ptext3:	
  1773 ;; *************** function _set_beep_threshhold *****************
  1774 ;; Defined at:
  1775 ;;		line 5 in file "buzzer_src.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  x               1    wreg     unsigned char 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  x               1    2[COMMON] unsigned char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1789 ;;      Params:         0       0       0       0       0
  1790 ;;      Locals:         1       0       0       0       0
  1791 ;;      Temps:          2       0       0       0       0
  1792 ;;      Totals:         3       0       0       0       0
  1793 ;;Total ram usage:        3 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_thermometer_threshhold_settings
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _set_beep_threshhold
  1804  0F0A                     _set_beep_threshhold:	
  1805                           
  1806                           ;incstack = 0
  1807                           ; Regs used in _set_beep_threshhold: [wreg]
  1808                           ;set_beep_threshhold@x stored from wreg
  1809  0F0A  00F2               	movwf	set_beep_threshhold@x
  1810                           
  1811                           ;buzzer_src.c: 6:     if (shi + '0' == x){
  1812  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0F0D  0830               	movf	_shi,w
  1815  0F0E  3E30               	addlw	48
  1816  0F0F  00F0               	movwf	??_set_beep_threshhold
  1817  0F10  3000               	movlw	0
  1818  0F11  1803               	skipnc
  1819  0F12  3001               	movlw	1
  1820  0F13  00F1               	movwf	??_set_beep_threshhold+1
  1821  0F14  0872               	movf	set_beep_threshhold@x,w
  1822  0F15  0670               	xorwf	??_set_beep_threshhold,w
  1823  0F16  0471               	iorwf	??_set_beep_threshhold+1,w
  1824  0F17  1D03               	skipz
  1825  0F18  2F1B               	goto	l290
  1826                           
  1827                           ;buzzer_src.c: 7:         RE1 = 1;
  1828  0F19  1489               	bsf	9,1	;volatile
  1829                           
  1830                           ;buzzer_src.c: 8:     }
  1831  0F1A  0008               	return
  1832  0F1B                     l290:	
  1833                           ;buzzer_src.c: 9:     else{
  1834                           
  1835                           
  1836                           ;buzzer_src.c: 10:         RE1 = 0;
  1837  0F1B  1089               	bcf	9,1	;volatile
  1838  0F1C  0008               	return
  1839  0F1D                     __end_of_set_beep_threshhold:	
  1840                           
  1841                           	psect	text4
  1842  0018                     __ptext4:	
  1843 ;; *************** function _set_time *****************
  1844 ;; Defined at:
  1845 ;;		line 15 in file "clock_src.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  i               2    5[COMMON] int 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1859 ;;      Params:         0       0       0       0       0
  1860 ;;      Locals:         2       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0
  1862 ;;      Totals:         2       0       0       0       0
  1863 ;;Total ram usage:        2 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    1
  1866 ;; This function calls:
  1867 ;;		_time_write_1
  1868 ;; This function is called by:
  1869 ;;		_main
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _set_time
  1875  0018                     _set_time:	
  1876                           
  1877                           ;clock_src.c: 17:    int i;;clock_src.c: 18:    RB5=1;
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1881  0018  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0019  1303               	bcf	3,6	;RP1=0, select bank0
  1883  001A  1686               	bsf	6,5	;volatile
  1884                           
  1885                           ;clock_src.c: 19:    time_write_1(0xbe);
  1886  001B  30BE               	movlw	190
  1887  001C  120A  158A  275F  120A  118A  	fcall	_time_write_1
  1888                           
  1889                           ;clock_src.c: 20:    for(i=0;i<8;i++)
  1890  0021  01F5               	clrf	set_time@i
  1891  0022  01F6               	clrf	set_time@i+1
  1892  0023                     l2083:	
  1893                           
  1894                           ;clock_src.c: 21:      {;clock_src.c: 22:        time_write_1(table[i]);
  1895  0023  0875               	movf	set_time@i,w
  1896  0024  3E01               	addlw	low ((_table-__stringbase)| (0+32768))
  1897  0025  0084               	movwf	4
  1898  0026  120A  158A  2000  120A  118A  	fcall	stringdir
  1899  002B  120A  158A  275F  120A  118A  	fcall	_time_write_1
  1900                           
  1901                           ;clock_src.c: 23:      }
  1902  0030  3001               	movlw	1
  1903  0031  07F5               	addwf	set_time@i,f
  1904  0032  1803               	skipnc
  1905  0033  0AF6               	incf	set_time@i+1,f
  1906  0034  3000               	movlw	0
  1907  0035  07F6               	addwf	set_time@i+1,f
  1908  0036  0876               	movf	set_time@i+1,w
  1909  0037  3A80               	xorlw	128
  1910  0038  00FF               	movwf	127
  1911  0039  3080               	movlw	128
  1912  003A  027F               	subwf	127,w
  1913  003B  1D03               	skipz
  1914  003C  283F               	goto	u1205
  1915  003D  3008               	movlw	8
  1916  003E  0275               	subwf	set_time@i,w
  1917  003F                     u1205:	
  1918  003F  1C03               	skipc
  1919  0040  2823               	goto	l2083
  1920                           
  1921                           ;clock_src.c: 24:    RB5=0;
  1922  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1923  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1924  0043  1286               	bcf	6,5	;volatile
  1925  0044  0008               	return
  1926  0045                     __end_of_set_time:	
  1927                           
  1928                           	psect	text5
  1929  0F85                     __ptext5:	
  1930 ;; *************** function _lcd_init *****************
  1931 ;; Defined at:
  1932 ;;		line 14 in file "LCD_src.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  i               2    0        int 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1946 ;;      Params:         0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0
  1949 ;;      Totals:         0       0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    2
  1953 ;; This function calls:
  1954 ;;		_delay_screen
  1955 ;;		_write_cmd
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _lcd_init
  1963  0F85                     _lcd_init:	
  1964                           
  1965                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1969  0F85  1683               	bsf	3,5	;RP0=1, select bank1
  1970  0F86  1303               	bcf	3,6	;RP1=0, select bank1
  1971  0F87  0185               	clrf	5	;volatile
  1972                           
  1973                           ;LCD_src.c: 18:  RA0=0;
  1974  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  1975  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  1976  0F8A  1005               	bcf	5,0	;volatile
  1977                           
  1978                           ;LCD_src.c: 19:  delay_screen();
  1979  0F8B  120A  158A  271D  120A  158A  	fcall	_delay_screen
  1980                           
  1981                           ;LCD_src.c: 20:  RA0=1;
  1982  0F90  1283               	bcf	3,5	;RP0=0, select bank0
  1983  0F91  1303               	bcf	3,6	;RP1=0, select bank0
  1984  0F92  1405               	bsf	5,0	;volatile
  1985                           
  1986                           ;LCD_src.c: 21:  RA2=1;
  1987  0F93  1505               	bsf	5,2	;volatile
  1988                           
  1989                           ;LCD_src.c: 22:  write_cmd(0x30);
  1990  0F94  3030               	movlw	48
  1991  0F95  120A  158A  2748  120A  158A  	fcall	_write_cmd
  1992                           
  1993                           ;LCD_src.c: 23:  write_cmd(0x01);
  1994  0F9A  3001               	movlw	1
  1995  0F9B  120A  158A  2748  120A  158A  	fcall	_write_cmd
  1996                           
  1997                           ;LCD_src.c: 24:  write_cmd(0x06);
  1998  0FA0  3006               	movlw	6
  1999  0FA1  120A  158A  2748  120A  158A  	fcall	_write_cmd
  2000                           
  2001                           ;LCD_src.c: 25:  write_cmd(0x0c);
  2002  0FA6  300C               	movlw	12
  2003  0FA7  120A  158A  2748   	fcall	_write_cmd
  2004  0FAA  0008               	return
  2005  0FAB                     __end_of_lcd_init:	
  2006                           
  2007                           	psect	text6
  2008  0EDC                     __ptext6:	
  2009 ;; *************** function _initialise_buttons *****************
  2010 ;; Defined at:
  2011 ;;		line 11 in file "Button_src.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;		None
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2025 ;;      Params:         0       0       0       0       0
  2026 ;;      Locals:         0       0       0       0       0
  2027 ;;      Temps:          1       0       0       0       0
  2028 ;;      Totals:         1       0       0       0       0
  2029 ;;Total ram usage:        1 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           
  2039                           ;psect for function _initialise_buttons
  2040  0EDC                     _initialise_buttons:	
  2041                           
  2042                           ;Button_src.c: 12:     ADCON1 = 0x06;
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _initialise_buttons: [wreg]
  2046  0EDC  3006               	movlw	6
  2047  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  2048  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  2049  0EDF  009F               	movwf	31	;volatile
  2050                           
  2051                           ;Button_src.c: 13:     TRISC = 0xf0;
  2052  0EE0  30F0               	movlw	240
  2053  0EE1  0087               	movwf	7	;volatile
  2054                           
  2055                           ;Button_src.c: 15:     var = '0';
  2056  0EE2  3030               	movlw	48
  2057  0EE3  00F0               	movwf	??_initialise_buttons
  2058  0EE4  0870               	movf	??_initialise_buttons,w
  2059  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2060  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2061  0EE7  00A9               	movwf	_var
  2062  0EE8  0008               	return
  2063  0EE9                     __end_of_initialise_buttons:	
  2064                           
  2065                           	psect	text7
  2066  0EC4                     __ptext7:	
  2067 ;; *************** function _init_temp *****************
  2068 ;; Defined at:
  2069 ;;		line 5 in file "Thermometer_src.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		status,2
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2083 ;;      Params:         0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0
  2086 ;;      Totals:         0       0       0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           
  2097                           ;psect for function _init_temp
  2098  0EC4                     _init_temp:	
  2099                           
  2100                           ;Thermometer_src.c: 7:     TRISE=0X00;
  2101                           
  2102                           ;incstack = 0
  2103                           ; Regs used in _init_temp: [status,2]
  2104  0EC4  1683               	bsf	3,5	;RP0=1, select bank1
  2105  0EC5  1303               	bcf	3,6	;RP1=0, select bank1
  2106  0EC6  0189               	clrf	9	;volatile
  2107                           
  2108                           ;Thermometer_src.c: 8:     PORTE = 0X00;
  2109  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0EC9  0189               	clrf	9	;volatile
  2112  0ECA  0008               	return
  2113  0ECB                     __end_of_init_temp:	
  2114                           
  2115                           	psect	text8
  2116  0ED3                     __ptext8:	
  2117 ;; *************** function _init *****************
  2118 ;; Defined at:
  2119 ;;		line 5 in file "LCD_src.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2133 ;;      Params:         0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0
  2136 ;;      Totals:         0       0       0       0       0
  2137 ;;Total ram usage:        0 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; This function calls:
  2140 ;;		Nothing
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _init
  2148  0ED3                     _init:	
  2149                           
  2150                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  2151                           
  2152                           ;incstack = 0
  2153                           ; Regs used in _init: [wreg+status,2]
  2154  0ED3  3007               	movlw	7
  2155  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0ED5  1303               	bcf	3,6	;RP1=0, select bank1
  2157  0ED6  009F               	movwf	31	;volatile
  2158                           
  2159                           ;LCD_src.c: 8:  TRISA0=1;
  2160  0ED7  1405               	bsf	5,0	;volatile
  2161                           
  2162                           ;LCD_src.c: 9:  TRISD=0X00;
  2163  0ED8  0188               	clrf	8	;volatile
  2164                           
  2165                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  2166  0ED9  0181               	clrf	1	;volatile
  2167                           
  2168                           ;LCD_src.c: 11:  TRISE = 0X00;
  2169  0EDA  0189               	clrf	9	;volatile
  2170  0EDB  0008               	return
  2171  0EDC                     __end_of_init:	
  2172                           
  2173                           	psect	text9
  2174  0FD4                     __ptext9:	
  2175 ;; *************** function _get_time *****************
  2176 ;; Defined at:
  2177 ;;		line 26 in file "clock_src.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  i               2    6[COMMON] int 
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      void 
  2184 ;; Registers used:
  2185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2191 ;;      Params:         0       0       0       0       0
  2192 ;;      Locals:         2       0       0       0       0
  2193 ;;      Temps:          1       0       0       0       0
  2194 ;;      Totals:         3       0       0       0       0
  2195 ;;Total ram usage:        3 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:    1
  2198 ;; This function calls:
  2199 ;;		_time_read_1
  2200 ;;		_time_write_1
  2201 ;; This function is called by:
  2202 ;;		_main
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           
  2207                           ;psect for function _get_time
  2208  0FD4                     _get_time:	
  2209                           
  2210                           ;clock_src.c: 28:    int i;;clock_src.c: 29:    RB5=1;
  2211                           
  2212                           ;incstack = 0
  2213                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2214  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0FD6  1686               	bsf	6,5	;volatile
  2217                           
  2218                           ;clock_src.c: 30:    time_write_1(0xbf);
  2219  0FD7  30BF               	movlw	191
  2220  0FD8  120A  158A  275F  120A  158A  	fcall	_time_write_1
  2221                           
  2222                           ;clock_src.c: 31:    for(i=0;i<7;i++)
  2223  0FDD  01F6               	clrf	get_time@i
  2224  0FDE  01F7               	clrf	get_time@i+1
  2225  0FDF                     l2181:	
  2226                           
  2227                           ;clock_src.c: 32:      {;clock_src.c: 33:         table1[i]=time_read_1();
  2228  0FDF  120A  118A  2045  120A  158A  	fcall	_time_read_1
  2229  0FE4  00F5               	movwf	??_get_time
  2230  0FE5  0876               	movf	get_time@i,w
  2231  0FE6  3E20               	addlw	(low (_table1| 0))& (0+255)
  2232  0FE7  0084               	movwf	4
  2233  0FE8  0875               	movf	??_get_time,w
  2234  0FE9  1383               	bcf	3,7	;select IRP bank0
  2235  0FEA  0080               	movwf	0
  2236                           
  2237                           ;clock_src.c: 34:      }
  2238  0FEB  3001               	movlw	1
  2239  0FEC  07F6               	addwf	get_time@i,f
  2240  0FED  1803               	skipnc
  2241  0FEE  0AF7               	incf	get_time@i+1,f
  2242  0FEF  3000               	movlw	0
  2243  0FF0  07F7               	addwf	get_time@i+1,f
  2244  0FF1  0877               	movf	get_time@i+1,w
  2245  0FF2  3A80               	xorlw	128
  2246  0FF3  00FF               	movwf	127
  2247  0FF4  3080               	movlw	128
  2248  0FF5  027F               	subwf	127,w
  2249  0FF6  1D03               	skipz
  2250  0FF7  2FFA               	goto	u1285
  2251  0FF8  3007               	movlw	7
  2252  0FF9  0276               	subwf	get_time@i,w
  2253  0FFA                     u1285:	
  2254  0FFA  1C03               	skipc
  2255  0FFB  2FDF               	goto	l2181
  2256                           
  2257                           ;clock_src.c: 35:    RB5=0;
  2258  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  2259  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  2260  0FFE  1286               	bcf	6,5	;volatile
  2261  0FFF  0008               	return
  2262  1000                     __end_of_get_time:	
  2263                           
  2264                           	psect	text10
  2265  0045                     __ptext10:	
  2266 ;; *************** function _time_read_1 *****************
  2267 ;; Defined at:
  2268 ;;		line 131 in file "clock_src.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  j               2    2[COMMON] int 
  2273 ;;  time_rx         1    4[COMMON] unsigned char 
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      unsigned char 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0, btemp+1
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2283 ;;      Params:         0       0       0       0       0
  2284 ;;      Locals:         3       0       0       0       0
  2285 ;;      Temps:          2       0       0       0       0
  2286 ;;      Totals:         5       0       0       0       0
  2287 ;;Total ram usage:        5 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_get_time
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           
  2297                           ;psect for function _time_read_1
  2298  0045                     _time_read_1:	
  2299                           
  2300                           ;clock_src.c: 133:    unsigned char time_rx=0;
  2301                           
  2302                           ;incstack = 0
  2303                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  2304  0045  01F4               	clrf	time_read_1@time_rx
  2305                           
  2306                           ;clock_src.c: 134:    int j;;clock_src.c: 135:    TRISB4=1;
  2307  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2308  0047  1303               	bcf	3,6	;RP1=0, select bank1
  2309  0048  1606               	bsf	6,4	;volatile
  2310                           
  2311                           ;clock_src.c: 136:    for(j=0;j<8;j++)
  2312  0049  01F2               	clrf	time_read_1@j
  2313  004A  01F3               	clrf	time_read_1@j+1
  2314  004B                     l254:	
  2315                           
  2316                           ;clock_src.c: 137:       {;clock_src.c: 138:         RB0=0;
  2317  004B  1283               	bcf	3,5	;RP0=0, select bank0
  2318  004C  1303               	bcf	3,6	;RP1=0, select bank0
  2319  004D  1006               	bcf	6,0	;volatile
  2320                           
  2321                           ;clock_src.c: 139:         time_rx=time_rx>>1;
  2322  004E  0874               	movf	time_read_1@time_rx,w
  2323  004F  00F0               	movwf	??_time_read_1
  2324  0050  1003               	clrc
  2325  0051  0C70               	rrf	??_time_read_1,w
  2326  0052  00F1               	movwf	??_time_read_1+1
  2327  0053  0871               	movf	??_time_read_1+1,w
  2328  0054  00F4               	movwf	time_read_1@time_rx
  2329                           
  2330                           ;clock_src.c: 140:         if(RB4)time_rx=time_rx|0x80;
  2331  0055  1E06               	btfss	6,4	;volatile
  2332  0056  285C               	goto	l1929
  2333  0057  0874               	movf	time_read_1@time_rx,w
  2334  0058  3880               	iorlw	128
  2335  0059  00F0               	movwf	??_time_read_1
  2336  005A  0870               	movf	??_time_read_1,w
  2337  005B  00F4               	movwf	time_read_1@time_rx
  2338  005C                     l1929:	
  2339                           
  2340                           ;clock_src.c: 142:        RB0=1;
  2341  005C  1406               	bsf	6,0	;volatile
  2342                           
  2343                           ;clock_src.c: 143:       }
  2344  005D  3001               	movlw	1
  2345  005E  07F2               	addwf	time_read_1@j,f
  2346  005F  1803               	skipnc
  2347  0060  0AF3               	incf	time_read_1@j+1,f
  2348  0061  3000               	movlw	0
  2349  0062  07F3               	addwf	time_read_1@j+1,f
  2350  0063  0873               	movf	time_read_1@j+1,w
  2351  0064  3A80               	xorlw	128
  2352  0065  00FF               	movwf	127
  2353  0066  3080               	movlw	128
  2354  0067  027F               	subwf	127,w
  2355  0068  1D03               	skipz
  2356  0069  286C               	goto	u865
  2357  006A  3008               	movlw	8
  2358  006B  0272               	subwf	time_read_1@j,w
  2359  006C                     u865:	
  2360  006C  1C03               	skipc
  2361  006D  284B               	goto	l254
  2362                           
  2363                           ;clock_src.c: 144:     TRISB4=0;
  2364  006E  1683               	bsf	3,5	;RP0=1, select bank1
  2365  006F  1303               	bcf	3,6	;RP1=0, select bank1
  2366  0070  1206               	bcf	6,4	;volatile
  2367                           
  2368                           ;clock_src.c: 145:     RB0=0;
  2369  0071  1283               	bcf	3,5	;RP0=0, select bank0
  2370  0072  1303               	bcf	3,6	;RP1=0, select bank0
  2371  0073  1006               	bcf	6,0	;volatile
  2372                           
  2373                           ;clock_src.c: 146:     return(time_rx);
  2374  0074  0874               	movf	time_read_1@time_rx,w
  2375  0075  0008               	return
  2376  0076                     __end_of_time_read_1:	
  2377                           
  2378                           	psect	text11
  2379  0500                     __ptext11:	
  2380 ;; *************** function _get_temp *****************
  2381 ;; Defined at:
  2382 ;;		line 89 in file "Thermometer_src.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  i               2    0        int 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2396 ;;      Params:         0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0
  2398 ;;      Temps:          0       4       0       0       0
  2399 ;;      Totals:         0       4       0       0       0
  2400 ;;Total ram usage:        4 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    2
  2403 ;; This function calls:
  2404 ;;		___awdiv
  2405 ;;		___awmod
  2406 ;;		___lwdiv
  2407 ;;		___lwmod
  2408 ;;		_delay2
  2409 ;;		_read_byte
  2410 ;;		_reset_temp
  2411 ;;		_write_byte
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _get_temp
  2419  0500                     _get_temp:	
  2420                           
  2421                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2425  0500  1683               	bsf	3,5	;RP0=1, select bank1
  2426  0501  1303               	bcf	3,6	;RP1=0, select bank1
  2427  0502  1409               	bsf	9,0	;volatile
  2428                           
  2429                           ;Thermometer_src.c: 93: reset_temp();
  2430  0503  120A  118A  20DD  120A  118A  	fcall	_reset_temp
  2431                           
  2432                           ;Thermometer_src.c: 94: write_byte(0XCC);
  2433  0508  30CC               	movlw	204
  2434  0509  120A  118A  2112  120A  118A  	fcall	_write_byte
  2435                           
  2436                           ;Thermometer_src.c: 95: delay2();
  2437  050E  120A  118A  2004  120A  118A  	fcall	_delay2
  2438                           
  2439                           ;Thermometer_src.c: 96: write_byte(0X44);
  2440  0513  3044               	movlw	68
  2441  0514  120A  118A  2112  120A  118A  	fcall	_write_byte
  2442                           
  2443                           ;Thermometer_src.c: 98: reset_temp();
  2444  0519  120A  118A  20DD  120A  118A  	fcall	_reset_temp
  2445                           
  2446                           ;Thermometer_src.c: 99: write_byte(0XCC);
  2447  051E  30CC               	movlw	204
  2448  051F  120A  118A  2112  120A  118A  	fcall	_write_byte
  2449                           
  2450                           ;Thermometer_src.c: 100: write_byte(0XBE);
  2451  0524  30BE               	movlw	190
  2452  0525  120A  118A  2112  120A  118A  	fcall	_write_byte
  2453                           
  2454                           ;Thermometer_src.c: 101: TLV=read_byte();
  2455  052A  120A  118A  20A8  120A  118A  	fcall	_read_byte
  2456  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2457  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2458  0531  00B5               	movwf	??_get_temp
  2459  0532  0835               	movf	??_get_temp,w
  2460  0533  00B4               	movwf	_TLV
  2461                           
  2462                           ;Thermometer_src.c: 102: THV=read_byte();
  2463  0534  120A  118A  20A8  120A  118A  	fcall	_read_byte
  2464  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2465  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2466  053B  00B5               	movwf	??_get_temp
  2467  053C  0835               	movf	??_get_temp,w
  2468  053D  00B3               	movwf	_THV
  2469                           
  2470                           ;Thermometer_src.c: 103: TRISE0 =1;
  2471  053E  1683               	bsf	3,5	;RP0=1, select bank1
  2472  053F  1303               	bcf	3,6	;RP1=0, select bank1
  2473  0540  1409               	bsf	9,0	;volatile
  2474                           
  2475                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  2476  0541  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0542  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0543  0833               	movf	_THV,w
  2479  0544  00B5               	movwf	??_get_temp
  2480  0545  3004               	movlw	4
  2481  0546                     u1215:	
  2482  0546  1003               	clrc
  2483  0547  0DB5               	rlf	??_get_temp,f
  2484  0548  3EFF               	addlw	-1
  2485  0549  1D03               	skipz
  2486  054A  2D46               	goto	u1215
  2487  054B  303F               	movlw	63
  2488  054C  0535               	andwf	??_get_temp,w
  2489  054D  00B6               	movwf	??_get_temp+1
  2490  054E  0834               	movf	_TLV,w
  2491  054F  00B7               	movwf	??_get_temp+2
  2492  0550  3004               	movlw	4
  2493  0551                     u1225:	
  2494  0551  1003               	clrc
  2495  0552  0CB7               	rrf	??_get_temp+2,f
  2496  0553  3EFF               	addlw	-1
  2497  0554  1D03               	skipz
  2498  0555  2D51               	goto	u1225
  2499  0556  0837               	movf	??_get_temp+2,w
  2500  0557  0436               	iorwf	??_get_temp+1,w
  2501  0558  00B8               	movwf	??_get_temp+3
  2502  0559  0838               	movf	??_get_temp+3,w
  2503  055A  00B2               	movwf	_TZ
  2504                           
  2505                           ;Thermometer_src.c: 105: TX=TLV<<4;
  2506  055B  0834               	movf	_TLV,w
  2507  055C  00B5               	movwf	??_get_temp
  2508  055D  3003               	movlw	3
  2509  055E                     u1235:	
  2510  055E  1003               	clrc
  2511  055F  0DB5               	rlf	??_get_temp,f
  2512  0560  3EFF               	addlw	-1
  2513  0561  1D03               	skipz
  2514  0562  2D5E               	goto	u1235
  2515  0563  1003               	clrc
  2516  0564  0D35               	rlf	??_get_temp,w
  2517  0565  00B6               	movwf	??_get_temp+1
  2518  0566  0836               	movf	??_get_temp+1,w
  2519  0567  00B1               	movwf	_TX
  2520                           
  2521                           ;Thermometer_src.c: 107: ge=TZ%10;
  2522  0568  300A               	movlw	10
  2523  0569  00F0               	movwf	___awmod@divisor
  2524  056A  3000               	movlw	0
  2525  056B  00F1               	movwf	___awmod@divisor+1
  2526  056C  0832               	movf	_TZ,w
  2527  056D  00B5               	movwf	??_get_temp
  2528  056E  01B6               	clrf	??_get_temp+1
  2529  056F  0835               	movf	??_get_temp,w
  2530  0570  00F2               	movwf	___awmod@dividend
  2531  0571  0836               	movf	??_get_temp+1,w
  2532  0572  00F3               	movwf	___awmod@dividend+1
  2533  0573  120A  118A  2185  120A  118A  	fcall	___awmod
  2534  0578  0870               	movf	?___awmod,w
  2535  0579  1283               	bcf	3,5	;RP0=0, select bank0
  2536  057A  1303               	bcf	3,6	;RP1=0, select bank0
  2537  057B  00B7               	movwf	??_get_temp+2
  2538  057C  0837               	movf	??_get_temp+2,w
  2539  057D  00AF               	movwf	_ge
  2540                           
  2541                           ;Thermometer_src.c: 108: shi=TZ/10;
  2542  057E  300A               	movlw	10
  2543  057F  00F0               	movwf	___awdiv@divisor
  2544  0580  3000               	movlw	0
  2545  0581  00F1               	movwf	___awdiv@divisor+1
  2546  0582  0832               	movf	_TZ,w
  2547  0583  00B5               	movwf	??_get_temp
  2548  0584  01B6               	clrf	??_get_temp+1
  2549  0585  0835               	movf	??_get_temp,w
  2550  0586  00F2               	movwf	___awdiv@dividend
  2551  0587  0836               	movf	??_get_temp+1,w
  2552  0588  00F3               	movwf	___awdiv@dividend+1
  2553  0589  120A  118A  21D0  120A  118A  	fcall	___awdiv
  2554  058E  0870               	movf	?___awdiv,w
  2555  058F  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0590  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0591  00B7               	movwf	??_get_temp+2
  2558  0592  0837               	movf	??_get_temp+2,w
  2559  0593  00B0               	movwf	_shi
  2560                           
  2561                           ;Thermometer_src.c: 109: wd=0;
  2562  0594  01A7               	clrf	_wd
  2563  0595  01A8               	clrf	_wd+1
  2564                           
  2565                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  2566  0596  1FB1               	btfss	_TX,7
  2567  0597  2DA0               	goto	l2149
  2568  0598  0827               	movf	_wd,w
  2569  0599  3E88               	addlw	136
  2570  059A  00A7               	movwf	_wd
  2571  059B  0828               	movf	_wd+1,w
  2572  059C  1803               	skipnc
  2573  059D  3E01               	addlw	1
  2574  059E  3E13               	addlw	19
  2575  059F  00A8               	movwf	_wd+1
  2576  05A0                     l2149:	
  2577                           
  2578                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  2579  05A0  1F31               	btfss	_TX,6
  2580  05A1  2DAA               	goto	l2153
  2581  05A2  0827               	movf	_wd,w
  2582  05A3  3EC4               	addlw	196
  2583  05A4  00A7               	movwf	_wd
  2584  05A5  0828               	movf	_wd+1,w
  2585  05A6  1803               	skipnc
  2586  05A7  3E01               	addlw	1
  2587  05A8  3E09               	addlw	9
  2588  05A9  00A8               	movwf	_wd+1
  2589  05AA                     l2153:	
  2590                           
  2591                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  2592  05AA  1EB1               	btfss	_TX,5
  2593  05AB  2DB4               	goto	l2157
  2594  05AC  0827               	movf	_wd,w
  2595  05AD  3EE2               	addlw	226
  2596  05AE  00A7               	movwf	_wd
  2597  05AF  0828               	movf	_wd+1,w
  2598  05B0  1803               	skipnc
  2599  05B1  3E01               	addlw	1
  2600  05B2  3E04               	addlw	4
  2601  05B3  00A8               	movwf	_wd+1
  2602  05B4                     l2157:	
  2603                           
  2604                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  2605  05B4  1E31               	btfss	_TX,4
  2606  05B5  2DBE               	goto	l2161
  2607  05B6  0827               	movf	_wd,w
  2608  05B7  3E71               	addlw	113
  2609  05B8  00A7               	movwf	_wd
  2610  05B9  0828               	movf	_wd+1,w
  2611  05BA  1803               	skipnc
  2612  05BB  3E01               	addlw	1
  2613  05BC  3E02               	addlw	2
  2614  05BD  00A8               	movwf	_wd+1
  2615  05BE                     l2161:	
  2616                           
  2617                           ;Thermometer_src.c: 114: shifen=wd/1000;
  2618  05BE  30E8               	movlw	232
  2619  05BF  00F6               	movwf	___lwdiv@divisor
  2620  05C0  3003               	movlw	3
  2621  05C1  00F7               	movwf	___lwdiv@divisor+1
  2622  05C2  0828               	movf	_wd+1,w
  2623  05C3  00F9               	movwf	___lwdiv@dividend+1
  2624  05C4  0827               	movf	_wd,w
  2625  05C5  00F8               	movwf	___lwdiv@dividend
  2626  05C6  120A  118A  2149  120A  118A  	fcall	___lwdiv
  2627  05CB  0876               	movf	?___lwdiv,w
  2628  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  2629  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  2630  05CE  00B5               	movwf	??_get_temp
  2631  05CF  0835               	movf	??_get_temp,w
  2632  05D0  00AE               	movwf	_shifen
  2633                           
  2634                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  2635  05D1  3064               	movlw	100
  2636  05D2  00F6               	movwf	___lwdiv@divisor
  2637  05D3  3000               	movlw	0
  2638  05D4  00F7               	movwf	___lwdiv@divisor+1
  2639  05D5  0828               	movf	_wd+1,w
  2640  05D6  00F3               	movwf	___lwmod@dividend+1
  2641  05D7  0827               	movf	_wd,w
  2642  05D8  00F2               	movwf	___lwmod@dividend
  2643  05D9  30E8               	movlw	232
  2644  05DA  00F0               	movwf	___lwmod@divisor
  2645  05DB  3003               	movlw	3
  2646  05DC  00F1               	movwf	___lwmod@divisor+1
  2647  05DD  120A  118A  2076  120A  118A  	fcall	___lwmod
  2648  05E2  0871               	movf	?___lwmod+1,w
  2649  05E3  00F9               	movwf	___lwdiv@dividend+1
  2650  05E4  0870               	movf	?___lwmod,w
  2651  05E5  00F8               	movwf	___lwdiv@dividend
  2652  05E6  120A  118A  2149  120A  118A  	fcall	___lwdiv
  2653  05EB  0876               	movf	?___lwdiv,w
  2654  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  2655  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  2656  05EE  00B5               	movwf	??_get_temp
  2657  05EF  0835               	movf	??_get_temp,w
  2658  05F0  00AD               	movwf	_baifen
  2659                           
  2660                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  2661  05F1  300A               	movlw	10
  2662  05F2  00F6               	movwf	___lwdiv@divisor
  2663  05F3  3000               	movlw	0
  2664  05F4  00F7               	movwf	___lwdiv@divisor+1
  2665  05F5  0828               	movf	_wd+1,w
  2666  05F6  00F3               	movwf	___lwmod@dividend+1
  2667  05F7  0827               	movf	_wd,w
  2668  05F8  00F2               	movwf	___lwmod@dividend
  2669  05F9  3064               	movlw	100
  2670  05FA  00F0               	movwf	___lwmod@divisor
  2671  05FB  3000               	movlw	0
  2672  05FC  00F1               	movwf	___lwmod@divisor+1
  2673  05FD  120A  118A  2076  120A  118A  	fcall	___lwmod
  2674  0602  0871               	movf	?___lwmod+1,w
  2675  0603  00F9               	movwf	___lwdiv@dividend+1
  2676  0604  0870               	movf	?___lwmod,w
  2677  0605  00F8               	movwf	___lwdiv@dividend
  2678  0606  120A  118A  2149  120A  118A  	fcall	___lwdiv
  2679  060B  0876               	movf	?___lwdiv,w
  2680  060C  1283               	bcf	3,5	;RP0=0, select bank0
  2681  060D  1303               	bcf	3,6	;RP1=0, select bank0
  2682  060E  00B5               	movwf	??_get_temp
  2683  060F  0835               	movf	??_get_temp,w
  2684  0610  00AC               	movwf	_qianfen
  2685                           
  2686                           ;Thermometer_src.c: 117: wanfen=wd%10;
  2687  0611  300A               	movlw	10
  2688  0612  00F0               	movwf	___lwmod@divisor
  2689  0613  3000               	movlw	0
  2690  0614  00F1               	movwf	___lwmod@divisor+1
  2691  0615  0828               	movf	_wd+1,w
  2692  0616  00F3               	movwf	___lwmod@dividend+1
  2693  0617  0827               	movf	_wd,w
  2694  0618  00F2               	movwf	___lwmod@dividend
  2695  0619  120A  118A  2076   	fcall	___lwmod
  2696  061C  0870               	movf	?___lwmod,w
  2697  061D  1283               	bcf	3,5	;RP0=0, select bank0
  2698  061E  1303               	bcf	3,6	;RP1=0, select bank0
  2699  061F  00B5               	movwf	??_get_temp
  2700  0620  0835               	movf	??_get_temp,w
  2701  0621  00AB               	movwf	_wanfen
  2702                           
  2703                           ;Thermometer_src.c: 118: __nop();
  2704  0622  0000               	nop
  2705  0623  0008               	return
  2706  0624                     __end_of_get_temp:	
  2707                           
  2708                           	psect	text12
  2709  0112                     __ptext12:	
  2710 ;; *************** function _write_byte *****************
  2711 ;; Defined at:
  2712 ;;		line 40 in file "Thermometer_src.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  val             1    wreg     unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  val             1    7[COMMON] unsigned char 
  2717 ;;  i               1    8[COMMON] unsigned char 
  2718 ;;  temp            1    6[COMMON] unsigned char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, pclath, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2728 ;;      Params:         0       0       0       0       0
  2729 ;;      Locals:         3       0       0       0       0
  2730 ;;      Temps:          2       0       0       0       0
  2731 ;;      Totals:         5       0       0       0       0
  2732 ;;Total ram usage:        5 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    1
  2735 ;; This function calls:
  2736 ;;		_delay_temp
  2737 ;; This function is called by:
  2738 ;;		_get_temp
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           
  2743                           ;psect for function _write_byte
  2744  0112                     _write_byte:	
  2745                           
  2746                           ;incstack = 0
  2747                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  2748                           ;write_byte@val stored from wreg
  2749  0112  00F7               	movwf	write_byte@val
  2750                           
  2751                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  2752  0113  3008               	movlw	8
  2753  0114  00F4               	movwf	??_write_byte
  2754  0115  0874               	movf	??_write_byte,w
  2755  0116  00F8               	movwf	write_byte@i
  2756  0117                     l1801:	
  2757                           
  2758                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  2759  0117  0877               	movf	write_byte@val,w
  2760  0118  3901               	andlw	1
  2761  0119  00F4               	movwf	??_write_byte
  2762  011A  0874               	movf	??_write_byte,w
  2763  011B  00F6               	movwf	write_byte@temp
  2764                           
  2765                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  2766  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2767  011D  1303               	bcf	3,6	;RP1=0, select bank0
  2768  011E  1009               	bcf	9,0	;volatile
  2769  011F  1683               	bsf	3,5	;RP0=1, select bank1
  2770  0120  1303               	bcf	3,6	;RP1=0, select bank1
  2771  0121  1009               	bcf	9,0	;volatile
  2772                           
  2773                           ;Thermometer_src.c: 48:    __nop();
  2774  0122  0000               	nop
  2775                           
  2776                           ;Thermometer_src.c: 49:    __nop();
  2777  0123  0000               	nop
  2778                           
  2779                           ;Thermometer_src.c: 50:    __nop();
  2780  0124  0000               	nop
  2781                           
  2782                           ;Thermometer_src.c: 51:    __nop();
  2783  0125  0000               	nop
  2784                           
  2785                           ;Thermometer_src.c: 52:    __nop();
  2786  0126  0000               	nop
  2787                           
  2788                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  2789  0127  0376               	decf	write_byte@temp,w
  2790  0128  1D03               	btfss	3,2
  2791  0129  292D               	goto	l1821
  2792  012A  1683               	bsf	3,5	;RP0=1, select bank1
  2793  012B  1303               	bcf	3,6	;RP1=0, select bank1
  2794  012C  1409               	bsf	9,0	;volatile
  2795  012D                     l1821:	
  2796                           
  2797                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  2798  012D  3007               	movlw	7
  2799  012E  00F4               	movwf	??_write_byte
  2800  012F  0874               	movf	??_write_byte,w
  2801  0130  00F0               	movwf	delay_temp@y
  2802  0131  3002               	movlw	2
  2803  0132  120A  158A  26E9  120A  118A  	fcall	_delay_temp
  2804                           
  2805                           ;Thermometer_src.c: 55:    TRISE0 =1;
  2806  0137  1683               	bsf	3,5	;RP0=1, select bank1
  2807  0138  1303               	bcf	3,6	;RP1=0, select bank1
  2808  0139  1409               	bsf	9,0	;volatile
  2809                           
  2810                           ;Thermometer_src.c: 56:    __nop();
  2811  013A  0000               	nop
  2812                           
  2813                           ;Thermometer_src.c: 57:    __nop();
  2814  013B  0000               	nop
  2815                           
  2816                           ;Thermometer_src.c: 58:    val=val>>1;
  2817  013C  0877               	movf	write_byte@val,w
  2818  013D  00F4               	movwf	??_write_byte
  2819  013E  1003               	clrc
  2820  013F  0C74               	rrf	??_write_byte,w
  2821  0140  00F5               	movwf	??_write_byte+1
  2822  0141  0875               	movf	??_write_byte+1,w
  2823  0142  00F7               	movwf	write_byte@val
  2824                           
  2825                           ;Thermometer_src.c: 59:   }
  2826  0143  3001               	movlw	1
  2827  0144  02F8               	subwf	write_byte@i,f
  2828  0145  0878               	movf	write_byte@i,w
  2829  0146  1903               	btfsc	3,2
  2830  0147  0008               	return
  2831  0148  2917               	goto	l1801
  2832  0149                     __end_of_write_byte:	
  2833                           
  2834                           	psect	text13
  2835  00DD                     __ptext13:	
  2836 ;; *************** function _reset_temp *****************
  2837 ;; Defined at:
  2838 ;;		line 25 in file "Thermometer_src.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  presence        1    5[COMMON] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0, pclath, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2852 ;;      Params:         0       0       0       0       0
  2853 ;;      Locals:         1       0       0       0       0
  2854 ;;      Temps:          1       0       0       0       0
  2855 ;;      Totals:         2       0       0       0       0
  2856 ;;Total ram usage:        2 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    1
  2859 ;; This function calls:
  2860 ;;		_delay_temp
  2861 ;; This function is called by:
  2862 ;;		_get_temp
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           
  2867                           ;psect for function _reset_temp
  2868  00DD                     _reset_temp:	
  2869                           
  2870                           ;Thermometer_src.c: 27:   char presence=1;
  2871                           
  2872                           ;incstack = 0
  2873                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  2874  00DD  01F5               	clrf	reset_temp@presence
  2875  00DE  0AF5               	incf	reset_temp@presence,f
  2876  00DF                     l1793:	
  2877                           ;Thermometer_src.c: 28:   while(presence)
  2878                           
  2879                           
  2880                           ;Thermometer_src.c: 28:   while(presence)
  2881  00DF  0875               	movf	reset_temp@presence,w
  2882  00E0  1903               	btfsc	3,2
  2883  00E1  0008               	return
  2884                           
  2885                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  2886  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  2887  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  2888  00E4  1009               	bcf	9,0	;volatile
  2889  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  2890  00E6  1303               	bcf	3,6	;RP1=0, select bank1
  2891  00E7  1009               	bcf	9,0	;volatile
  2892                           
  2893                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  2894  00E8  3046               	movlw	70
  2895  00E9  00F4               	movwf	??_reset_temp
  2896  00EA  0874               	movf	??_reset_temp,w
  2897  00EB  00F0               	movwf	delay_temp@y
  2898  00EC  3002               	movlw	2
  2899  00ED  120A  158A  26E9  120A  118A  	fcall	_delay_temp
  2900                           
  2901                           ;Thermometer_src.c: 32:     TRISE0 =1;
  2902  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  2903  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  2904  00F4  1409               	bsf	9,0	;volatile
  2905                           
  2906                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  2907  00F5  3008               	movlw	8
  2908  00F6  00F4               	movwf	??_reset_temp
  2909  00F7  0874               	movf	??_reset_temp,w
  2910  00F8  00F0               	movwf	delay_temp@y
  2911  00F9  3002               	movlw	2
  2912  00FA  120A  158A  26E9  120A  118A  	fcall	_delay_temp
  2913                           
  2914                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  2915  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  2916  0100  1303               	bcf	3,6	;RP1=0, select bank0
  2917  0101  1C09               	btfss	9,0	;volatile
  2918  0102  2906               	goto	l1789
  2919  0103  01F5               	clrf	reset_temp@presence
  2920  0104  0AF5               	incf	reset_temp@presence,f
  2921  0105  2907               	goto	l1791
  2922  0106                     l1789:	
  2923  0106  01F5               	clrf	reset_temp@presence
  2924  0107                     l1791:	
  2925                           
  2926                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  2927  0107  303C               	movlw	60
  2928  0108  00F4               	movwf	??_reset_temp
  2929  0109  0874               	movf	??_reset_temp,w
  2930  010A  00F0               	movwf	delay_temp@y
  2931  010B  3002               	movlw	2
  2932  010C  120A  158A  26E9  120A  118A  	fcall	_delay_temp
  2933  0111  28DF               	goto	l1793
  2934  0112                     __end_of_reset_temp:	
  2935                           
  2936                           	psect	text14
  2937  00A8                     __ptext14:	
  2938 ;; *************** function _read_byte *****************
  2939 ;; Defined at:
  2940 ;;		line 62 in file "Thermometer_src.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  i               1    6[COMMON] unsigned char 
  2945 ;;  value           1    5[COMMON] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      unsigned char 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0, pclath, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2955 ;;      Params:         0       0       0       0       0
  2956 ;;      Locals:         2       0       0       0       0
  2957 ;;      Temps:          1       0       0       0       0
  2958 ;;      Totals:         3       0       0       0       0
  2959 ;;Total ram usage:        3 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    1
  2962 ;; This function calls:
  2963 ;;		_delay_temp
  2964 ;; This function is called by:
  2965 ;;		_get_temp
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           
  2970                           ;psect for function _read_byte
  2971  00A8                     _read_byte:	
  2972                           
  2973                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  2974                           
  2975                           ;incstack = 0
  2976                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  2977  00A8  01F5               	clrf	read_byte@value
  2978                           
  2979                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  2980  00A9  3008               	movlw	8
  2981  00AA  00F4               	movwf	??_read_byte
  2982  00AB  0874               	movf	??_read_byte,w
  2983  00AC  00F6               	movwf	read_byte@i
  2984  00AD                     l1843:	
  2985                           
  2986                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  2987  00AD  1003               	clrc
  2988  00AE  0CF5               	rrf	read_byte@value,f
  2989                           
  2990                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  2991  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  2992  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  2993  00B1  1009               	bcf	9,0	;volatile
  2994  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  2995  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  2996  00B4  1009               	bcf	9,0	;volatile
  2997                           
  2998                           ;Thermometer_src.c: 71:    __nop();
  2999  00B5  0000               	nop
  3000                           
  3001                           ;Thermometer_src.c: 72:    __nop();
  3002  00B6  0000               	nop
  3003                           
  3004                           ;Thermometer_src.c: 73:    __nop();
  3005  00B7  0000               	nop
  3006                           
  3007                           ;Thermometer_src.c: 74:    __nop();
  3008  00B8  0000               	nop
  3009                           
  3010                           ;Thermometer_src.c: 75:    __nop();
  3011  00B9  0000               	nop
  3012                           
  3013                           ;Thermometer_src.c: 76:    __nop();
  3014  00BA  0000               	nop
  3015                           
  3016                           ;Thermometer_src.c: 77:    TRISE0 =1;
  3017  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  3018  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  3019  00BD  1409               	bsf	9,0	;volatile
  3020                           
  3021                           ;Thermometer_src.c: 78:    __nop();
  3022  00BE  0000               	nop
  3023                           
  3024                           ;Thermometer_src.c: 79:    __nop();
  3025  00BF  0000               	nop
  3026                           
  3027                           ;Thermometer_src.c: 80:    __nop();
  3028  00C0  0000               	nop
  3029                           
  3030                           ;Thermometer_src.c: 81:    __nop();
  3031  00C1  0000               	nop
  3032                           
  3033                           ;Thermometer_src.c: 82:    __nop();
  3034  00C2  0000               	nop
  3035                           
  3036                           ;Thermometer_src.c: 83:    j=RE0;
  3037  00C3  3000               	movlw	0
  3038  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  3039  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  3040  00C6  1809               	btfsc	9,0	;volatile
  3041  00C7  3001               	movlw	1
  3042  00C8  00AA               	movwf	read_byte@j
  3043                           
  3044                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  3045  00C9  082A               	movf	read_byte@j,w
  3046  00CA  1D03               	btfss	3,2
  3047  00CB  17F5               	bsf	read_byte@value,7
  3048                           
  3049                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  3050  00CC  3007               	movlw	7
  3051  00CD  00F4               	movwf	??_read_byte
  3052  00CE  0874               	movf	??_read_byte,w
  3053  00CF  00F0               	movwf	delay_temp@y
  3054  00D0  3002               	movlw	2
  3055  00D1  120A  158A  26E9  120A  118A  	fcall	_delay_temp
  3056                           
  3057                           ;Thermometer_src.c: 86:   }
  3058  00D6  3001               	movlw	1
  3059  00D7  02F6               	subwf	read_byte@i,f
  3060  00D8  0876               	movf	read_byte@i,w
  3061  00D9  1D03               	btfss	3,2
  3062  00DA  28AD               	goto	l1843
  3063                           
  3064                           ;Thermometer_src.c: 87:   return(value);
  3065  00DB  0875               	movf	read_byte@value,w
  3066  00DC  0008               	return
  3067  00DD                     __end_of_read_byte:	
  3068                           
  3069                           	psect	text15
  3070  0EE9                     __ptext15:	
  3071 ;; *************** function _delay_temp *****************
  3072 ;; Defined at:
  3073 ;;		line 121 in file "Thermometer_src.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  x               1    wreg     unsigned char 
  3076 ;;  y               1    0[COMMON] unsigned char 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  x               1    2[COMMON] unsigned char 
  3079 ;;  z               1    3[COMMON] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3089 ;;      Params:         1       0       0       0       0
  3090 ;;      Locals:         2       0       0       0       0
  3091 ;;      Temps:          1       0       0       0       0
  3092 ;;      Totals:         4       0       0       0       0
  3093 ;;Total ram usage:        4 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_reset_temp
  3099 ;;		_write_byte
  3100 ;;		_read_byte
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           
  3105                           ;psect for function _delay_temp
  3106  0EE9                     _delay_temp:	
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  3110                           ;delay_temp@x stored from wreg
  3111  0EE9  00F2               	movwf	delay_temp@x
  3112  0EEA                     l195:	
  3113                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  3114                           
  3115                           
  3116                           ;Thermometer_src.c: 125:  z=y;
  3117  0EEA  0870               	movf	delay_temp@y,w
  3118  0EEB  00F1               	movwf	??_delay_temp
  3119  0EEC  0871               	movf	??_delay_temp,w
  3120  0EED  00F3               	movwf	delay_temp@z
  3121  0EEE                     l1751:	
  3122  0EEE  3001               	movlw	1
  3123  0EEF  02F3               	subwf	delay_temp@z,f
  3124  0EF0  1D03               	btfss	3,2
  3125  0EF1  2EEE               	goto	l1751
  3126                           
  3127                           ;Thermometer_src.c: 127:  }while(--x);
  3128  0EF2  3001               	movlw	1
  3129  0EF3  02F2               	subwf	delay_temp@x,f
  3130  0EF4  1903               	btfsc	3,2
  3131  0EF5  0008               	return
  3132  0EF6  2EEA               	goto	l195
  3133  0EF7                     __end_of_delay_temp:	
  3134                           
  3135                           	psect	text16
  3136  0004                     __ptext16:	
  3137 ;; *************** function _delay2 *****************
  3138 ;; Defined at:
  3139 ;;		line 130 in file "Thermometer_src.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  i               2    0[COMMON] int 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, btemp+1
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         0       0       0       0       0
  3154 ;;      Locals:         2       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         2       0       0       0       0
  3157 ;;Total ram usage:        2 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_get_temp
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _delay2
  3168  0004                     _delay2:	
  3169                           
  3170                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  3174  0004  01F0               	clrf	delay2@i
  3175  0005  01F1               	clrf	delay2@i+1
  3176  0006                     l1895:	
  3177                           
  3178                           ;Thermometer_src.c: 132:  }
  3179  0006  3001               	movlw	1
  3180  0007  07F0               	addwf	delay2@i,f
  3181  0008  1803               	skipnc
  3182  0009  0AF1               	incf	delay2@i+1,f
  3183  000A  3000               	movlw	0
  3184  000B  07F1               	addwf	delay2@i+1,f
  3185  000C  0871               	movf	delay2@i+1,w
  3186  000D  3A80               	xorlw	128
  3187  000E  00FF               	movwf	127
  3188  000F  3080               	movlw	128
  3189  0010  027F               	subwf	127,w
  3190  0011  1D03               	skipz
  3191  0012  2815               	goto	u825
  3192  0013  3032               	movlw	50
  3193  0014  0270               	subwf	delay2@i,w
  3194  0015                     u825:	
  3195  0015  1803               	btfsc	3,0
  3196  0016  0008               	return
  3197  0017  2806               	goto	l1895
  3198  0018                     __end_of_delay2:	
  3199                           
  3200                           	psect	text17
  3201  0076                     __ptext17:	
  3202 ;; *************** function ___lwmod *****************
  3203 ;; Defined at:
  3204 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  divisor         2    0[COMMON] unsigned int 
  3207 ;;  dividend        2    2[COMMON] unsigned int 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  counter         1    5[COMMON] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  2    0[COMMON] unsigned int 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3219 ;;      Params:         4       0       0       0       0
  3220 ;;      Locals:         1       0       0       0       0
  3221 ;;      Temps:          1       0       0       0       0
  3222 ;;      Totals:         6       0       0       0       0
  3223 ;;Total ram usage:        6 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_get_temp
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function ___lwmod
  3234  0076                     ___lwmod:	
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3238  0076  0870               	movf	___lwmod@divisor,w
  3239  0077  0471               	iorwf	___lwmod@divisor+1,w
  3240  0078  1903               	btfsc	3,2
  3241  0079  28A3               	goto	l2069
  3242  007A  01F5               	clrf	___lwmod@counter
  3243  007B  0AF5               	incf	___lwmod@counter,f
  3244  007C                     l2059:	
  3245  007C  1BF1               	btfsc	___lwmod@divisor+1,7
  3246  007D  288A               	goto	l2061
  3247  007E  3001               	movlw	1
  3248  007F                     u1155:	
  3249  007F  1003               	clrc
  3250  0080  0DF0               	rlf	___lwmod@divisor,f
  3251  0081  0DF1               	rlf	___lwmod@divisor+1,f
  3252  0082  3EFF               	addlw	-1
  3253  0083  1D03               	skipz
  3254  0084  287F               	goto	u1155
  3255  0085  3001               	movlw	1
  3256  0086  00F4               	movwf	??___lwmod
  3257  0087  0874               	movf	??___lwmod,w
  3258  0088  07F5               	addwf	___lwmod@counter,f
  3259  0089  287C               	goto	l2059
  3260  008A                     l2061:	
  3261  008A  0871               	movf	___lwmod@divisor+1,w
  3262  008B  0273               	subwf	___lwmod@dividend+1,w
  3263  008C  1D03               	skipz
  3264  008D  2890               	goto	u1175
  3265  008E  0870               	movf	___lwmod@divisor,w
  3266  008F  0272               	subwf	___lwmod@dividend,w
  3267  0090                     u1175:	
  3268  0090  1C03               	skipc
  3269  0091  2898               	goto	l2065
  3270  0092  0870               	movf	___lwmod@divisor,w
  3271  0093  02F2               	subwf	___lwmod@dividend,f
  3272  0094  0871               	movf	___lwmod@divisor+1,w
  3273  0095  1C03               	skipc
  3274  0096  03F3               	decf	___lwmod@dividend+1,f
  3275  0097  02F3               	subwf	___lwmod@dividend+1,f
  3276  0098                     l2065:	
  3277  0098  3001               	movlw	1
  3278  0099                     u1185:	
  3279  0099  1003               	clrc
  3280  009A  0CF1               	rrf	___lwmod@divisor+1,f
  3281  009B  0CF0               	rrf	___lwmod@divisor,f
  3282  009C  3EFF               	addlw	-1
  3283  009D  1D03               	skipz
  3284  009E  2899               	goto	u1185
  3285  009F  3001               	movlw	1
  3286  00A0  02F5               	subwf	___lwmod@counter,f
  3287  00A1  1D03               	btfss	3,2
  3288  00A2  288A               	goto	l2061
  3289  00A3                     l2069:	
  3290  00A3  0873               	movf	___lwmod@dividend+1,w
  3291  00A4  00F1               	movwf	?___lwmod+1
  3292  00A5  0872               	movf	___lwmod@dividend,w
  3293  00A6  00F0               	movwf	?___lwmod
  3294  00A7  0008               	return
  3295  00A8                     __end_of___lwmod:	
  3296                           
  3297                           	psect	text18
  3298  0149                     __ptext18:	
  3299 ;; *************** function ___lwdiv *****************
  3300 ;; Defined at:
  3301 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  divisor         2    6[COMMON] unsigned int 
  3304 ;;  dividend        2    8[COMMON] unsigned int 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  quotient        2   11[COMMON] unsigned int 
  3307 ;;  counter         1   13[COMMON] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  2    6[COMMON] unsigned int 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3317 ;;      Params:         4       0       0       0       0
  3318 ;;      Locals:         3       0       0       0       0
  3319 ;;      Temps:          1       0       0       0       0
  3320 ;;      Totals:         8       0       0       0       0
  3321 ;;Total ram usage:        8 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_get_temp
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function ___lwdiv
  3332  0149                     ___lwdiv:	
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3336  0149  01FB               	clrf	___lwdiv@quotient
  3337  014A  01FC               	clrf	___lwdiv@quotient+1
  3338  014B  0876               	movf	___lwdiv@divisor,w
  3339  014C  0477               	iorwf	___lwdiv@divisor+1,w
  3340  014D  1903               	btfsc	3,2
  3341  014E  2980               	goto	l2047
  3342  014F  01FD               	clrf	___lwdiv@counter
  3343  0150  0AFD               	incf	___lwdiv@counter,f
  3344  0151                     l2035:	
  3345  0151  1BF7               	btfsc	___lwdiv@divisor+1,7
  3346  0152  295F               	goto	l2037
  3347  0153  3001               	movlw	1
  3348  0154                     u1085:	
  3349  0154  1003               	clrc
  3350  0155  0DF6               	rlf	___lwdiv@divisor,f
  3351  0156  0DF7               	rlf	___lwdiv@divisor+1,f
  3352  0157  3EFF               	addlw	-1
  3353  0158  1D03               	skipz
  3354  0159  2954               	goto	u1085
  3355  015A  3001               	movlw	1
  3356  015B  00FA               	movwf	??___lwdiv
  3357  015C  087A               	movf	??___lwdiv,w
  3358  015D  07FD               	addwf	___lwdiv@counter,f
  3359  015E  2951               	goto	l2035
  3360  015F                     l2037:	
  3361  015F  3001               	movlw	1
  3362  0160                     u1105:	
  3363  0160  1003               	clrc
  3364  0161  0DFB               	rlf	___lwdiv@quotient,f
  3365  0162  0DFC               	rlf	___lwdiv@quotient+1,f
  3366  0163  3EFF               	addlw	-1
  3367  0164  1D03               	skipz
  3368  0165  2960               	goto	u1105
  3369  0166  0877               	movf	___lwdiv@divisor+1,w
  3370  0167  0279               	subwf	___lwdiv@dividend+1,w
  3371  0168  1D03               	skipz
  3372  0169  296C               	goto	u1115
  3373  016A  0876               	movf	___lwdiv@divisor,w
  3374  016B  0278               	subwf	___lwdiv@dividend,w
  3375  016C                     u1115:	
  3376  016C  1C03               	skipc
  3377  016D  2975               	goto	l2043
  3378  016E  0876               	movf	___lwdiv@divisor,w
  3379  016F  02F8               	subwf	___lwdiv@dividend,f
  3380  0170  0877               	movf	___lwdiv@divisor+1,w
  3381  0171  1C03               	skipc
  3382  0172  03F9               	decf	___lwdiv@dividend+1,f
  3383  0173  02F9               	subwf	___lwdiv@dividend+1,f
  3384  0174  147B               	bsf	___lwdiv@quotient,0
  3385  0175                     l2043:	
  3386  0175  3001               	movlw	1
  3387  0176                     u1125:	
  3388  0176  1003               	clrc
  3389  0177  0CF7               	rrf	___lwdiv@divisor+1,f
  3390  0178  0CF6               	rrf	___lwdiv@divisor,f
  3391  0179  3EFF               	addlw	-1
  3392  017A  1D03               	skipz
  3393  017B  2976               	goto	u1125
  3394  017C  3001               	movlw	1
  3395  017D  02FD               	subwf	___lwdiv@counter,f
  3396  017E  1D03               	btfss	3,2
  3397  017F  295F               	goto	l2037
  3398  0180                     l2047:	
  3399  0180  087C               	movf	___lwdiv@quotient+1,w
  3400  0181  00F7               	movwf	?___lwdiv+1
  3401  0182  087B               	movf	___lwdiv@quotient,w
  3402  0183  00F6               	movwf	?___lwdiv
  3403  0184  0008               	return
  3404  0185                     __end_of___lwdiv:	
  3405                           
  3406                           	psect	text19
  3407  0185                     __ptext19:	
  3408 ;; *************** function ___awmod *****************
  3409 ;; Defined at:
  3410 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  divisor         2    0[COMMON] int 
  3413 ;;  dividend        2    2[COMMON] int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  sign            1    6[COMMON] unsigned char 
  3416 ;;  counter         1    5[COMMON] unsigned char 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  2    0[COMMON] int 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3426 ;;      Params:         4       0       0       0       0
  3427 ;;      Locals:         2       0       0       0       0
  3428 ;;      Temps:          1       0       0       0       0
  3429 ;;      Totals:         7       0       0       0       0
  3430 ;;Total ram usage:        7 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_get_temp
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function ___awmod
  3441  0185                     ___awmod:	
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3445  0185  01F6               	clrf	___awmod@sign
  3446  0186  1FF3               	btfss	___awmod@dividend+1,7
  3447  0187  298F               	goto	l1995
  3448  0188  09F2               	comf	___awmod@dividend,f
  3449  0189  09F3               	comf	___awmod@dividend+1,f
  3450  018A  0AF2               	incf	___awmod@dividend,f
  3451  018B  1903               	skipnz
  3452  018C  0AF3               	incf	___awmod@dividend+1,f
  3453  018D  01F6               	clrf	___awmod@sign
  3454  018E  0AF6               	incf	___awmod@sign,f
  3455  018F                     l1995:	
  3456  018F  1FF1               	btfss	___awmod@divisor+1,7
  3457  0190  2996               	goto	l1999
  3458  0191  09F0               	comf	___awmod@divisor,f
  3459  0192  09F1               	comf	___awmod@divisor+1,f
  3460  0193  0AF0               	incf	___awmod@divisor,f
  3461  0194  1903               	skipnz
  3462  0195  0AF1               	incf	___awmod@divisor+1,f
  3463  0196                     l1999:	
  3464  0196  0870               	movf	___awmod@divisor,w
  3465  0197  0471               	iorwf	___awmod@divisor+1,w
  3466  0198  1903               	btfsc	3,2
  3467  0199  29C3               	goto	l2017
  3468  019A  01F5               	clrf	___awmod@counter
  3469  019B  0AF5               	incf	___awmod@counter,f
  3470  019C                     l2007:	
  3471  019C  1BF1               	btfsc	___awmod@divisor+1,7
  3472  019D  29AA               	goto	l2009
  3473  019E  3001               	movlw	1
  3474  019F                     u1015:	
  3475  019F  1003               	clrc
  3476  01A0  0DF0               	rlf	___awmod@divisor,f
  3477  01A1  0DF1               	rlf	___awmod@divisor+1,f
  3478  01A2  3EFF               	addlw	-1
  3479  01A3  1D03               	skipz
  3480  01A4  299F               	goto	u1015
  3481  01A5  3001               	movlw	1
  3482  01A6  00F4               	movwf	??___awmod
  3483  01A7  0874               	movf	??___awmod,w
  3484  01A8  07F5               	addwf	___awmod@counter,f
  3485  01A9  299C               	goto	l2007
  3486  01AA                     l2009:	
  3487  01AA  0871               	movf	___awmod@divisor+1,w
  3488  01AB  0273               	subwf	___awmod@dividend+1,w
  3489  01AC  1D03               	skipz
  3490  01AD  29B0               	goto	u1035
  3491  01AE  0870               	movf	___awmod@divisor,w
  3492  01AF  0272               	subwf	___awmod@dividend,w
  3493  01B0                     u1035:	
  3494  01B0  1C03               	skipc
  3495  01B1  29B8               	goto	l2013
  3496  01B2  0870               	movf	___awmod@divisor,w
  3497  01B3  02F2               	subwf	___awmod@dividend,f
  3498  01B4  0871               	movf	___awmod@divisor+1,w
  3499  01B5  1C03               	skipc
  3500  01B6  03F3               	decf	___awmod@dividend+1,f
  3501  01B7  02F3               	subwf	___awmod@dividend+1,f
  3502  01B8                     l2013:	
  3503  01B8  3001               	movlw	1
  3504  01B9                     u1045:	
  3505  01B9  1003               	clrc
  3506  01BA  0CF1               	rrf	___awmod@divisor+1,f
  3507  01BB  0CF0               	rrf	___awmod@divisor,f
  3508  01BC  3EFF               	addlw	-1
  3509  01BD  1D03               	skipz
  3510  01BE  29B9               	goto	u1045
  3511  01BF  3001               	movlw	1
  3512  01C0  02F5               	subwf	___awmod@counter,f
  3513  01C1  1D03               	btfss	3,2
  3514  01C2  29AA               	goto	l2009
  3515  01C3                     l2017:	
  3516  01C3  0876               	movf	___awmod@sign,w
  3517  01C4  1903               	btfsc	3,2
  3518  01C5  29CB               	goto	l2021
  3519  01C6  09F2               	comf	___awmod@dividend,f
  3520  01C7  09F3               	comf	___awmod@dividend+1,f
  3521  01C8  0AF2               	incf	___awmod@dividend,f
  3522  01C9  1903               	skipnz
  3523  01CA  0AF3               	incf	___awmod@dividend+1,f
  3524  01CB                     l2021:	
  3525  01CB  0873               	movf	___awmod@dividend+1,w
  3526  01CC  00F1               	movwf	?___awmod+1
  3527  01CD  0872               	movf	___awmod@dividend,w
  3528  01CE  00F0               	movwf	?___awmod
  3529  01CF  0008               	return
  3530  01D0                     __end_of___awmod:	
  3531                           
  3532                           	psect	text20
  3533  01D0                     __ptext20:	
  3534 ;; *************** function ___awdiv *****************
  3535 ;; Defined at:
  3536 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  divisor         2    0[COMMON] int 
  3539 ;;  dividend        2    2[COMMON] int 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  quotient        2    7[COMMON] int 
  3542 ;;  sign            1    6[COMMON] unsigned char 
  3543 ;;  counter         1    5[COMMON] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  2    0[COMMON] int 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3553 ;;      Params:         4       0       0       0       0
  3554 ;;      Locals:         4       0       0       0       0
  3555 ;;      Temps:          1       0       0       0       0
  3556 ;;      Totals:         9       0       0       0       0
  3557 ;;Total ram usage:        9 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		_get_temp
  3563 ;;		_thermometer_threshhold_settings
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function ___awdiv
  3569  01D0                     ___awdiv:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3573  01D0  01F6               	clrf	___awdiv@sign
  3574  01D1  1FF1               	btfss	___awdiv@divisor+1,7
  3575  01D2  29DA               	goto	l1951
  3576  01D3  09F0               	comf	___awdiv@divisor,f
  3577  01D4  09F1               	comf	___awdiv@divisor+1,f
  3578  01D5  0AF0               	incf	___awdiv@divisor,f
  3579  01D6  1903               	skipnz
  3580  01D7  0AF1               	incf	___awdiv@divisor+1,f
  3581  01D8  01F6               	clrf	___awdiv@sign
  3582  01D9  0AF6               	incf	___awdiv@sign,f
  3583  01DA                     l1951:	
  3584  01DA  1FF3               	btfss	___awdiv@dividend+1,7
  3585  01DB  29E5               	goto	l1957
  3586  01DC  09F2               	comf	___awdiv@dividend,f
  3587  01DD  09F3               	comf	___awdiv@dividend+1,f
  3588  01DE  0AF2               	incf	___awdiv@dividend,f
  3589  01DF  1903               	skipnz
  3590  01E0  0AF3               	incf	___awdiv@dividend+1,f
  3591  01E1  3001               	movlw	1
  3592  01E2  00F4               	movwf	??___awdiv
  3593  01E3  0874               	movf	??___awdiv,w
  3594  01E4  06F6               	xorwf	___awdiv@sign,f
  3595  01E5                     l1957:	
  3596  01E5  01F7               	clrf	___awdiv@quotient
  3597  01E6  01F8               	clrf	___awdiv@quotient+1
  3598  01E7  0870               	movf	___awdiv@divisor,w
  3599  01E8  0471               	iorwf	___awdiv@divisor+1,w
  3600  01E9  1903               	btfsc	3,2
  3601  01EA  2A1C               	goto	l1979
  3602  01EB  01F5               	clrf	___awdiv@counter
  3603  01EC  0AF5               	incf	___awdiv@counter,f
  3604  01ED                     l1967:	
  3605  01ED  1BF1               	btfsc	___awdiv@divisor+1,7
  3606  01EE  29FB               	goto	l1969
  3607  01EF  3001               	movlw	1
  3608  01F0                     u915:	
  3609  01F0  1003               	clrc
  3610  01F1  0DF0               	rlf	___awdiv@divisor,f
  3611  01F2  0DF1               	rlf	___awdiv@divisor+1,f
  3612  01F3  3EFF               	addlw	-1
  3613  01F4  1D03               	skipz
  3614  01F5  29F0               	goto	u915
  3615  01F6  3001               	movlw	1
  3616  01F7  00F4               	movwf	??___awdiv
  3617  01F8  0874               	movf	??___awdiv,w
  3618  01F9  07F5               	addwf	___awdiv@counter,f
  3619  01FA  29ED               	goto	l1967
  3620  01FB                     l1969:	
  3621  01FB  3001               	movlw	1
  3622  01FC                     u935:	
  3623  01FC  1003               	clrc
  3624  01FD  0DF7               	rlf	___awdiv@quotient,f
  3625  01FE  0DF8               	rlf	___awdiv@quotient+1,f
  3626  01FF  3EFF               	addlw	-1
  3627  0200  1D03               	skipz
  3628  0201  29FC               	goto	u935
  3629  0202  0871               	movf	___awdiv@divisor+1,w
  3630  0203  0273               	subwf	___awdiv@dividend+1,w
  3631  0204  1D03               	skipz
  3632  0205  2A08               	goto	u945
  3633  0206  0870               	movf	___awdiv@divisor,w
  3634  0207  0272               	subwf	___awdiv@dividend,w
  3635  0208                     u945:	
  3636  0208  1C03               	skipc
  3637  0209  2A11               	goto	l1975
  3638  020A  0870               	movf	___awdiv@divisor,w
  3639  020B  02F2               	subwf	___awdiv@dividend,f
  3640  020C  0871               	movf	___awdiv@divisor+1,w
  3641  020D  1C03               	skipc
  3642  020E  03F3               	decf	___awdiv@dividend+1,f
  3643  020F  02F3               	subwf	___awdiv@dividend+1,f
  3644  0210  1477               	bsf	___awdiv@quotient,0
  3645  0211                     l1975:	
  3646  0211  3001               	movlw	1
  3647  0212                     u955:	
  3648  0212  1003               	clrc
  3649  0213  0CF1               	rrf	___awdiv@divisor+1,f
  3650  0214  0CF0               	rrf	___awdiv@divisor,f
  3651  0215  3EFF               	addlw	-1
  3652  0216  1D03               	skipz
  3653  0217  2A12               	goto	u955
  3654  0218  3001               	movlw	1
  3655  0219  02F5               	subwf	___awdiv@counter,f
  3656  021A  1D03               	btfss	3,2
  3657  021B  29FB               	goto	l1969
  3658  021C                     l1979:	
  3659  021C  0876               	movf	___awdiv@sign,w
  3660  021D  1903               	btfsc	3,2
  3661  021E  2A24               	goto	l1983
  3662  021F  09F7               	comf	___awdiv@quotient,f
  3663  0220  09F8               	comf	___awdiv@quotient+1,f
  3664  0221  0AF7               	incf	___awdiv@quotient,f
  3665  0222  1903               	skipnz
  3666  0223  0AF8               	incf	___awdiv@quotient+1,f
  3667  0224                     l1983:	
  3668  0224  0878               	movf	___awdiv@quotient+1,w
  3669  0225  00F1               	movwf	?___awdiv+1
  3670  0226  0877               	movf	___awdiv@quotient,w
  3671  0227  00F0               	movwf	?___awdiv
  3672  0228  0008               	return
  3673  0229                     __end_of___awdiv:	
  3674                           
  3675                           	psect	text21
  3676  0EF7                     __ptext21:	
  3677 ;; *************** function _ds1302_init *****************
  3678 ;; Defined at:
  3679 ;;		line 6 in file "clock_src.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;		None
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3693 ;;      Params:         0       0       0       0       0
  3694 ;;      Locals:         0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0
  3696 ;;      Totals:         0       0       0       0       0
  3697 ;;Total ram usage:        0 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    1
  3700 ;; This function calls:
  3701 ;;		_time_write_1
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _ds1302_init
  3709  0EF7                     _ds1302_init:	
  3710                           
  3711                           ;clock_src.c: 8:    RB0=0;
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3715  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  3717  0EF9  1006               	bcf	6,0	;volatile
  3718                           
  3719                           ;clock_src.c: 9:    RB5 =0;
  3720  0EFA  1286               	bcf	6,5	;volatile
  3721                           
  3722                           ;clock_src.c: 10:    RB5=1;
  3723  0EFB  1686               	bsf	6,5	;volatile
  3724                           
  3725                           ;clock_src.c: 11:    time_write_1(0x8e);
  3726  0EFC  308E               	movlw	142
  3727  0EFD  120A  158A  275F  120A  158A  	fcall	_time_write_1
  3728                           
  3729                           ;clock_src.c: 12:    time_write_1(0);
  3730  0F02  3000               	movlw	0
  3731  0F03  120A  158A  275F   	fcall	_time_write_1
  3732                           
  3733                           ;clock_src.c: 13:    RB5=0;
  3734  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  3735  0F07  1303               	bcf	3,6	;RP1=0, select bank0
  3736  0F08  1286               	bcf	6,5	;volatile
  3737  0F09  0008               	return
  3738  0F0A                     __end_of_ds1302_init:	
  3739                           
  3740                           	psect	text22
  3741  0F5F                     __ptext22:	
  3742 ;; *************** function _time_write_1 *****************
  3743 ;; Defined at:
  3744 ;;		line 115 in file "clock_src.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  time_tx         1    wreg     unsigned char 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  time_tx         1    4[COMMON] unsigned char 
  3749 ;;  j               2    2[COMMON] int 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg, status,2, status,0, btemp+1
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3759 ;;      Params:         0       0       0       0       0
  3760 ;;      Locals:         3       0       0       0       0
  3761 ;;      Temps:          2       0       0       0       0
  3762 ;;      Totals:         5       0       0       0       0
  3763 ;;Total ram usage:        5 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_ds1302_init
  3769 ;;		_set_time
  3770 ;;		_get_time
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           
  3775                           ;psect for function _time_write_1
  3776  0F5F                     _time_write_1:	
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  3780                           ;time_write_1@time_tx stored from wreg
  3781  0F5F  00F4               	movwf	time_write_1@time_tx
  3782                           
  3783                           ;clock_src.c: 115: void time_write_1(unsigned char time_tx);clock_src.c: 116: {;clock_sr
      +                          c.c: 117:     int j;;clock_src.c: 118:     for(j=0;j<8;j++)
  3784  0F60  01F2               	clrf	time_write_1@j
  3785  0F61  01F3               	clrf	time_write_1@j+1
  3786  0F62                     l248:	
  3787                           
  3788                           ;clock_src.c: 119:    {;clock_src.c: 120:         RB4=0;
  3789  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0F64  1206               	bcf	6,4	;volatile
  3792                           
  3793                           ;clock_src.c: 121:         RB0=0;
  3794  0F65  1006               	bcf	6,0	;volatile
  3795                           
  3796                           ;clock_src.c: 122:         if(time_tx&0x01)
  3797  0F66  1874               	btfsc	time_write_1@time_tx,0
  3798                           
  3799                           ;clock_src.c: 123:           {;clock_src.c: 124:             RB4=1;
  3800  0F67  1606               	bsf	6,4	;volatile
  3801                           
  3802                           ;clock_src.c: 126:         time_tx=time_tx>>1;
  3803  0F68  0874               	movf	time_write_1@time_tx,w
  3804  0F69  00F0               	movwf	??_time_write_1
  3805  0F6A  1003               	clrc
  3806  0F6B  0C70               	rrf	??_time_write_1,w
  3807  0F6C  00F1               	movwf	??_time_write_1+1
  3808  0F6D  0871               	movf	??_time_write_1+1,w
  3809  0F6E  00F4               	movwf	time_write_1@time_tx
  3810                           
  3811                           ;clock_src.c: 127:         RB0=1;
  3812  0F6F  1406               	bsf	6,0	;volatile
  3813                           
  3814                           ;clock_src.c: 128:     }
  3815  0F70  3001               	movlw	1
  3816  0F71  07F2               	addwf	time_write_1@j,f
  3817  0F72  1803               	skipnc
  3818  0F73  0AF3               	incf	time_write_1@j+1,f
  3819  0F74  3000               	movlw	0
  3820  0F75  07F3               	addwf	time_write_1@j+1,f
  3821  0F76  0873               	movf	time_write_1@j+1,w
  3822  0F77  3A80               	xorlw	128
  3823  0F78  00FF               	movwf	127
  3824  0F79  3080               	movlw	128
  3825  0F7A  027F               	subwf	127,w
  3826  0F7B  1D03               	skipz
  3827  0F7C  2F7F               	goto	u845
  3828  0F7D  3008               	movlw	8
  3829  0F7E  0272               	subwf	time_write_1@j,w
  3830  0F7F                     u845:	
  3831  0F7F  1C03               	skipc
  3832  0F80  2F62               	goto	l248
  3833                           
  3834                           ;clock_src.c: 129:       RB0=0;
  3835  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0F83  1006               	bcf	6,0	;volatile
  3838  0F84  0008               	return
  3839  0F85                     __end_of_time_write_1:	
  3840                           
  3841                           	psect	text23
  3842  0FAB                     __ptext23:	
  3843 ;; *************** function _display_temp *****************
  3844 ;; Defined at:
  3845 ;;		line 11 in file "Thermometer_src.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      void 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3859 ;;      Params:         0       0       0       0       0
  3860 ;;      Locals:         0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0
  3862 ;;      Totals:         0       0       0       0       0
  3863 ;;Total ram usage:        0 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    2
  3866 ;; This function calls:
  3867 ;;		_write_char
  3868 ;; This function is called by:
  3869 ;;		_main
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _display_temp
  3875  0FAB                     _display_temp:	
  3876                           
  3877                           ;Thermometer_src.c: 13:  write_char(shi + '0');
  3878                           
  3879                           ;incstack = 0
  3880                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3881  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  3883  0FAD  0830               	movf	_shi,w
  3884  0FAE  3E30               	addlw	48
  3885  0FAF  120A  158A  2731  120A  158A  	fcall	_write_char
  3886                           
  3887                           ;Thermometer_src.c: 15:  write_char(ge + '0');
  3888  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0FB6  082F               	movf	_ge,w
  3891  0FB7  3E30               	addlw	48
  3892  0FB8  120A  158A  2731  120A  158A  	fcall	_write_char
  3893                           
  3894                           ;Thermometer_src.c: 16:  write_char('.');
  3895  0FBD  302E               	movlw	46
  3896  0FBE  120A  158A  2731  120A  158A  	fcall	_write_char
  3897                           
  3898                           ;Thermometer_src.c: 18:  write_char(shifen + '0');
  3899  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  3901  0FC5  082E               	movf	_shifen,w
  3902  0FC6  3E30               	addlw	48
  3903  0FC7  120A  158A  2731  120A  158A  	fcall	_write_char
  3904                           
  3905                           ;Thermometer_src.c: 20:  write_char(baifen + '0');
  3906  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  3907  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  3908  0FCE  082D               	movf	_baifen,w
  3909  0FCF  3E30               	addlw	48
  3910  0FD0  120A  158A  2731   	fcall	_write_char
  3911  0FD3  0008               	return
  3912  0FD4                     __end_of_display_temp:	
  3913                           
  3914                           	psect	text24
  3915  0307                     __ptext24:	
  3916 ;; *************** function _display_date *****************
  3917 ;; Defined at:
  3918 ;;		line 79 in file "clock_src.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  i               2    5[COMMON] int 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3932 ;;      Params:         0       0       0       0       0
  3933 ;;      Locals:         2       0       0       0       0
  3934 ;;      Temps:          2       0       0       0       0
  3935 ;;      Totals:         4       0       0       0       0
  3936 ;;Total ram usage:        4 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    2
  3939 ;; This function calls:
  3940 ;;		_write_char
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _display_date
  3948  0307                     _display_date:	
  3949                           
  3950                           ;clock_src.c: 81:      int i;;clock_src.c: 82:      if(RB1==0)
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3954  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3955  0308  1303               	bcf	3,6	;RP1=0, select bank0
  3956  0309  1886               	btfsc	6,1	;volatile
  3957  030A  2B13               	goto	l2193
  3958                           
  3959                           ;clock_src.c: 83:        {;clock_src.c: 84:           table1[0]=table1[3];
  3960  030B  0823               	movf	_table1+3,w
  3961  030C  00F3               	movwf	??_display_date
  3962  030D  0873               	movf	??_display_date,w
  3963  030E  00A0               	movwf	_table1
  3964                           
  3965                           ;clock_src.c: 85:           table1[1]=table1[4];
  3966  030F  0824               	movf	_table1+4,w
  3967  0310  00F3               	movwf	??_display_date
  3968  0311  0873               	movf	??_display_date,w
  3969  0312  00A1               	movwf	_table1+1
  3970  0313                     l2193:	
  3971                           
  3972                           ;clock_src.c: 87:      i=table1[3]&0xf0;
  3973  0313  0823               	movf	_table1+3,w
  3974  0314  39F0               	andlw	240
  3975  0315  00F3               	movwf	??_display_date
  3976  0316  01F4               	clrf	??_display_date+1
  3977  0317  0873               	movf	??_display_date,w
  3978  0318  00F5               	movwf	display_date@i
  3979  0319  0874               	movf	??_display_date+1,w
  3980  031A  00F6               	movwf	display_date@i+1
  3981                           
  3982                           ;clock_src.c: 88:      i=i>>4;
  3983  031B  0E75               	swapf	display_date@i,w
  3984  031C  390F               	andlw	15
  3985  031D  00F5               	movwf	display_date@i
  3986  031E  0E76               	swapf	display_date@i+1,w
  3987  031F  39F0               	andlw	240
  3988  0320  04F5               	iorwf	display_date@i,f
  3989  0321  0E76               	swapf	display_date@i+1,w
  3990  0322  390F               	andlw	15
  3991  0323  00F6               	movwf	display_date@i+1
  3992  0324  30F0               	movlw	240
  3993  0325  1DF6               	btfss	display_date@i+1,3
  3994  0326  3000               	movlw	0
  3995  0327  04F6               	iorwf	display_date@i+1,f
  3996                           
  3997                           ;clock_src.c: 89:      write_char(i + '0');
  3998  0328  0875               	movf	display_date@i,w
  3999  0329  3E30               	addlw	48
  4000  032A  120A  158A  2731  120A  118A  	fcall	_write_char
  4001                           
  4002                           ;clock_src.c: 91:      i=table1[3]&0x0f;
  4003  032F  1283               	bcf	3,5	;RP0=0, select bank0
  4004  0330  1303               	bcf	3,6	;RP1=0, select bank0
  4005  0331  0823               	movf	_table1+3,w
  4006  0332  390F               	andlw	15
  4007  0333  00F3               	movwf	??_display_date
  4008  0334  01F4               	clrf	??_display_date+1
  4009  0335  0873               	movf	??_display_date,w
  4010  0336  00F5               	movwf	display_date@i
  4011  0337  0874               	movf	??_display_date+1,w
  4012  0338  00F6               	movwf	display_date@i+1
  4013                           
  4014                           ;clock_src.c: 92:      write_char(i + '0');
  4015  0339  0875               	movf	display_date@i,w
  4016  033A  3E30               	addlw	48
  4017  033B  120A  158A  2731  120A  118A  	fcall	_write_char
  4018                           
  4019                           ;clock_src.c: 93:      write_char('/');
  4020  0340  302F               	movlw	47
  4021  0341  120A  158A  2731  120A  118A  	fcall	_write_char
  4022                           
  4023                           ;clock_src.c: 97:      i=table1[4]&0xf0;
  4024  0346  1283               	bcf	3,5	;RP0=0, select bank0
  4025  0347  1303               	bcf	3,6	;RP1=0, select bank0
  4026  0348  0824               	movf	_table1+4,w
  4027  0349  39F0               	andlw	240
  4028  034A  00F3               	movwf	??_display_date
  4029  034B  01F4               	clrf	??_display_date+1
  4030  034C  0873               	movf	??_display_date,w
  4031  034D  00F5               	movwf	display_date@i
  4032  034E  0874               	movf	??_display_date+1,w
  4033  034F  00F6               	movwf	display_date@i+1
  4034                           
  4035                           ;clock_src.c: 98:      i=i>>4;
  4036  0350  0E75               	swapf	display_date@i,w
  4037  0351  390F               	andlw	15
  4038  0352  00F5               	movwf	display_date@i
  4039  0353  0E76               	swapf	display_date@i+1,w
  4040  0354  39F0               	andlw	240
  4041  0355  04F5               	iorwf	display_date@i,f
  4042  0356  0E76               	swapf	display_date@i+1,w
  4043  0357  390F               	andlw	15
  4044  0358  00F6               	movwf	display_date@i+1
  4045  0359  30F0               	movlw	240
  4046  035A  1DF6               	btfss	display_date@i+1,3
  4047  035B  3000               	movlw	0
  4048  035C  04F6               	iorwf	display_date@i+1,f
  4049                           
  4050                           ;clock_src.c: 99:      write_char(i + '0');
  4051  035D  0875               	movf	display_date@i,w
  4052  035E  3E30               	addlw	48
  4053  035F  120A  158A  2731  120A  118A  	fcall	_write_char
  4054                           
  4055                           ;clock_src.c: 101:      i=table1[4]&0x0f;
  4056  0364  1283               	bcf	3,5	;RP0=0, select bank0
  4057  0365  1303               	bcf	3,6	;RP1=0, select bank0
  4058  0366  0824               	movf	_table1+4,w
  4059  0367  390F               	andlw	15
  4060  0368  00F3               	movwf	??_display_date
  4061  0369  01F4               	clrf	??_display_date+1
  4062  036A  0873               	movf	??_display_date,w
  4063  036B  00F5               	movwf	display_date@i
  4064  036C  0874               	movf	??_display_date+1,w
  4065  036D  00F6               	movwf	display_date@i+1
  4066                           
  4067                           ;clock_src.c: 102:      write_char(i + '0');
  4068  036E  0875               	movf	display_date@i,w
  4069  036F  3E30               	addlw	48
  4070  0370  120A  158A  2731  120A  118A  	fcall	_write_char
  4071                           
  4072                           ;clock_src.c: 103:      write_char('/');
  4073  0375  302F               	movlw	47
  4074  0376  120A  158A  2731  120A  118A  	fcall	_write_char
  4075                           
  4076                           ;clock_src.c: 107:      i=table1[6]&0xf0;
  4077  037B  1283               	bcf	3,5	;RP0=0, select bank0
  4078  037C  1303               	bcf	3,6	;RP1=0, select bank0
  4079  037D  0826               	movf	_table1+6,w
  4080  037E  39F0               	andlw	240
  4081  037F  00F3               	movwf	??_display_date
  4082  0380  01F4               	clrf	??_display_date+1
  4083  0381  0873               	movf	??_display_date,w
  4084  0382  00F5               	movwf	display_date@i
  4085  0383  0874               	movf	??_display_date+1,w
  4086  0384  00F6               	movwf	display_date@i+1
  4087                           
  4088                           ;clock_src.c: 108:      write_char(i + '0');
  4089  0385  0875               	movf	display_date@i,w
  4090  0386  3E30               	addlw	48
  4091  0387  120A  158A  2731  120A  118A  	fcall	_write_char
  4092                           
  4093                           ;clock_src.c: 110:      i=table1[6]&0x0f;
  4094  038C  1283               	bcf	3,5	;RP0=0, select bank0
  4095  038D  1303               	bcf	3,6	;RP1=0, select bank0
  4096  038E  0826               	movf	_table1+6,w
  4097  038F  390F               	andlw	15
  4098  0390  00F3               	movwf	??_display_date
  4099  0391  01F4               	clrf	??_display_date+1
  4100  0392  0873               	movf	??_display_date,w
  4101  0393  00F5               	movwf	display_date@i
  4102  0394  0874               	movf	??_display_date+1,w
  4103  0395  00F6               	movwf	display_date@i+1
  4104                           
  4105                           ;clock_src.c: 111:      write_char(i + '0');
  4106  0396  0875               	movf	display_date@i,w
  4107  0397  3E30               	addlw	48
  4108  0398  120A  158A  2731   	fcall	_write_char
  4109  039B  0008               	return
  4110  039C                     __end_of_display_date:	
  4111                           
  4112                           	psect	text25
  4113  039C                     __ptext25:	
  4114 ;; *************** function _display_clock *****************
  4115 ;; Defined at:
  4116 ;;		line 37 in file "clock_src.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  i               2    5[COMMON] int 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      void 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4130 ;;      Params:         0       0       0       0       0
  4131 ;;      Locals:         2       0       0       0       0
  4132 ;;      Temps:          2       0       0       0       0
  4133 ;;      Totals:         4       0       0       0       0
  4134 ;;Total ram usage:        4 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    2
  4137 ;; This function calls:
  4138 ;;		_write_char
  4139 ;; This function is called by:
  4140 ;;		_main
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function _display_clock
  4146  039C                     _display_clock:	
  4147                           
  4148                           ;clock_src.c: 39:      int i;;clock_src.c: 40:      if(RB1==0)
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4152  039C  1283               	bcf	3,5	;RP0=0, select bank0
  4153  039D  1303               	bcf	3,6	;RP1=0, select bank0
  4154  039E  1886               	btfsc	6,1	;volatile
  4155  039F  2BA8               	goto	l2229
  4156                           
  4157                           ;clock_src.c: 41:        {;clock_src.c: 42:           table1[0]=table1[3];
  4158  03A0  0823               	movf	_table1+3,w
  4159  03A1  00F3               	movwf	??_display_clock
  4160  03A2  0873               	movf	??_display_clock,w
  4161  03A3  00A0               	movwf	_table1
  4162                           
  4163                           ;clock_src.c: 43:           table1[1]=table1[4];
  4164  03A4  0824               	movf	_table1+4,w
  4165  03A5  00F3               	movwf	??_display_clock
  4166  03A6  0873               	movf	??_display_clock,w
  4167  03A7  00A1               	movwf	_table1+1
  4168  03A8                     l2229:	
  4169                           
  4170                           ;clock_src.c: 46:      i=table1[2]&0xf0;
  4171  03A8  0822               	movf	_table1+2,w
  4172  03A9  39F0               	andlw	240
  4173  03AA  00F3               	movwf	??_display_clock
  4174  03AB  01F4               	clrf	??_display_clock+1
  4175  03AC  0873               	movf	??_display_clock,w
  4176  03AD  00F5               	movwf	display_clock@i
  4177  03AE  0874               	movf	??_display_clock+1,w
  4178  03AF  00F6               	movwf	display_clock@i+1
  4179                           
  4180                           ;clock_src.c: 47:      i=i>>4;
  4181  03B0  0E75               	swapf	display_clock@i,w
  4182  03B1  390F               	andlw	15
  4183  03B2  00F5               	movwf	display_clock@i
  4184  03B3  0E76               	swapf	display_clock@i+1,w
  4185  03B4  39F0               	andlw	240
  4186  03B5  04F5               	iorwf	display_clock@i,f
  4187  03B6  0E76               	swapf	display_clock@i+1,w
  4188  03B7  390F               	andlw	15
  4189  03B8  00F6               	movwf	display_clock@i+1
  4190  03B9  30F0               	movlw	240
  4191  03BA  1DF6               	btfss	display_clock@i+1,3
  4192  03BB  3000               	movlw	0
  4193  03BC  04F6               	iorwf	display_clock@i+1,f
  4194                           
  4195                           ;clock_src.c: 48:      write_char(i + '0');
  4196  03BD  0875               	movf	display_clock@i,w
  4197  03BE  3E30               	addlw	48
  4198  03BF  120A  158A  2731  120A  118A  	fcall	_write_char
  4199                           
  4200                           ;clock_src.c: 52:      i=table1[2]&0x0f;
  4201  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  4202  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  4203  03C6  0822               	movf	_table1+2,w
  4204  03C7  390F               	andlw	15
  4205  03C8  00F3               	movwf	??_display_clock
  4206  03C9  01F4               	clrf	??_display_clock+1
  4207  03CA  0873               	movf	??_display_clock,w
  4208  03CB  00F5               	movwf	display_clock@i
  4209  03CC  0874               	movf	??_display_clock+1,w
  4210  03CD  00F6               	movwf	display_clock@i+1
  4211                           
  4212                           ;clock_src.c: 53:      write_char(i + '0');
  4213  03CE  0875               	movf	display_clock@i,w
  4214  03CF  3E30               	addlw	48
  4215  03D0  120A  158A  2731  120A  118A  	fcall	_write_char
  4216                           
  4217                           ;clock_src.c: 54:      write_char(':');
  4218  03D5  303A               	movlw	58
  4219  03D6  120A  158A  2731  120A  118A  	fcall	_write_char
  4220                           
  4221                           ;clock_src.c: 58:      i=table1[1]&0xf0;
  4222  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  4223  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  4224  03DD  0821               	movf	_table1+1,w
  4225  03DE  39F0               	andlw	240
  4226  03DF  00F3               	movwf	??_display_clock
  4227  03E0  01F4               	clrf	??_display_clock+1
  4228  03E1  0873               	movf	??_display_clock,w
  4229  03E2  00F5               	movwf	display_clock@i
  4230  03E3  0874               	movf	??_display_clock+1,w
  4231  03E4  00F6               	movwf	display_clock@i+1
  4232                           
  4233                           ;clock_src.c: 59:      i=i>>4;
  4234  03E5  0E75               	swapf	display_clock@i,w
  4235  03E6  390F               	andlw	15
  4236  03E7  00F5               	movwf	display_clock@i
  4237  03E8  0E76               	swapf	display_clock@i+1,w
  4238  03E9  39F0               	andlw	240
  4239  03EA  04F5               	iorwf	display_clock@i,f
  4240  03EB  0E76               	swapf	display_clock@i+1,w
  4241  03EC  390F               	andlw	15
  4242  03ED  00F6               	movwf	display_clock@i+1
  4243  03EE  30F0               	movlw	240
  4244  03EF  1DF6               	btfss	display_clock@i+1,3
  4245  03F0  3000               	movlw	0
  4246  03F1  04F6               	iorwf	display_clock@i+1,f
  4247                           
  4248                           ;clock_src.c: 60:      write_char(i + '0');
  4249  03F2  0875               	movf	display_clock@i,w
  4250  03F3  3E30               	addlw	48
  4251  03F4  120A  158A  2731  120A  118A  	fcall	_write_char
  4252                           
  4253                           ;clock_src.c: 63:      i=table1[1]&0x0f;
  4254  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  4255  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  4256  03FB  0821               	movf	_table1+1,w
  4257  03FC  390F               	andlw	15
  4258  03FD  00F3               	movwf	??_display_clock
  4259  03FE  01F4               	clrf	??_display_clock+1
  4260  03FF  0873               	movf	??_display_clock,w
  4261  0400  00F5               	movwf	display_clock@i
  4262  0401  0874               	movf	??_display_clock+1,w
  4263  0402  00F6               	movwf	display_clock@i+1
  4264                           
  4265                           ;clock_src.c: 64:      write_char(i + '0');
  4266  0403  0875               	movf	display_clock@i,w
  4267  0404  3E30               	addlw	48
  4268  0405  120A  158A  2731  120A  118A  	fcall	_write_char
  4269                           
  4270                           ;clock_src.c: 65:      write_char(':');
  4271  040A  303A               	movlw	58
  4272  040B  120A  158A  2731  120A  118A  	fcall	_write_char
  4273                           
  4274                           ;clock_src.c: 68:      i=table1[0]&0xf0;
  4275  0410  1283               	bcf	3,5	;RP0=0, select bank0
  4276  0411  1303               	bcf	3,6	;RP1=0, select bank0
  4277  0412  0820               	movf	_table1,w
  4278  0413  39F0               	andlw	240
  4279  0414  00F3               	movwf	??_display_clock
  4280  0415  01F4               	clrf	??_display_clock+1
  4281  0416  0873               	movf	??_display_clock,w
  4282  0417  00F5               	movwf	display_clock@i
  4283  0418  0874               	movf	??_display_clock+1,w
  4284  0419  00F6               	movwf	display_clock@i+1
  4285                           
  4286                           ;clock_src.c: 69:      i=i>>4;
  4287  041A  0E75               	swapf	display_clock@i,w
  4288  041B  390F               	andlw	15
  4289  041C  00F5               	movwf	display_clock@i
  4290  041D  0E76               	swapf	display_clock@i+1,w
  4291  041E  39F0               	andlw	240
  4292  041F  04F5               	iorwf	display_clock@i,f
  4293  0420  0E76               	swapf	display_clock@i+1,w
  4294  0421  390F               	andlw	15
  4295  0422  00F6               	movwf	display_clock@i+1
  4296  0423  30F0               	movlw	240
  4297  0424  1DF6               	btfss	display_clock@i+1,3
  4298  0425  3000               	movlw	0
  4299  0426  04F6               	iorwf	display_clock@i+1,f
  4300                           
  4301                           ;clock_src.c: 70:      write_char(i + '0');
  4302  0427  0875               	movf	display_clock@i,w
  4303  0428  3E30               	addlw	48
  4304  0429  120A  158A  2731  120A  118A  	fcall	_write_char
  4305                           
  4306                           ;clock_src.c: 73:      i=table1[0]&0x0f;
  4307  042E  1283               	bcf	3,5	;RP0=0, select bank0
  4308  042F  1303               	bcf	3,6	;RP1=0, select bank0
  4309  0430  0820               	movf	_table1,w
  4310  0431  390F               	andlw	15
  4311  0432  00F3               	movwf	??_display_clock
  4312  0433  01F4               	clrf	??_display_clock+1
  4313  0434  0873               	movf	??_display_clock,w
  4314  0435  00F5               	movwf	display_clock@i
  4315  0436  0874               	movf	??_display_clock+1,w
  4316  0437  00F6               	movwf	display_clock@i+1
  4317                           
  4318                           ;clock_src.c: 74:      write_char(i + '0');
  4319  0438  0875               	movf	display_clock@i,w
  4320  0439  3E30               	addlw	48
  4321  043A  120A  158A  2731   	fcall	_write_char
  4322  043D  0008               	return
  4323  043E                     __end_of_display_clock:	
  4324                           
  4325                           	psect	text26
  4326  0229                     __ptext26:	
  4327 ;; *************** function _date_settings *****************
  4328 ;; Defined at:
  4329 ;;		line 179 in file "Button_src.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4343 ;;      Params:         0       0       0       0       0
  4344 ;;      Locals:         0       0       0       0       0
  4345 ;;      Temps:          0       0       0       0       0
  4346 ;;      Totals:         0       0       0       0       0
  4347 ;;Total ram usage:        0 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		_write_char
  4352 ;;		_write_cmd
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _date_settings
  4360  0229                     _date_settings:	
  4361                           
  4362                           ;Button_src.c: 180:  RC0 = 0;
  4363                           
  4364                           ;incstack = 0
  4365                           ; Regs used in _date_settings: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4366  0229  1283               	bcf	3,5	;RP0=0, select bank0
  4367  022A  1303               	bcf	3,6	;RP1=0, select bank0
  4368  022B  1007               	bcf	7,0	;volatile
  4369                           
  4370                           ;Button_src.c: 181:  RC1 = 1;
  4371  022C  1487               	bsf	7,1	;volatile
  4372                           
  4373                           ;Button_src.c: 182:  RC2 = 1;
  4374  022D  1507               	bsf	7,2	;volatile
  4375                           
  4376                           ;Button_src.c: 183:  RC3 = 1;
  4377  022E  1587               	bsf	7,3	;volatile
  4378                           
  4379                           ;Button_src.c: 184:   if (RC4 == 0){
  4380  022F  1A07               	btfsc	7,4	;volatile
  4381  0230  0008               	return
  4382                           
  4383                           ;Button_src.c: 185:       write_cmd(0x1);
  4384  0231  3001               	movlw	1
  4385  0232  120A  158A  2748  120A  118A  	fcall	_write_cmd
  4386  0237                     l378:	
  4387                           ;Button_src.c: 186:       for(;;){
  4388                           
  4389                           
  4390                           ;Button_src.c: 187:             write_cmd(0x80);
  4391  0237  3080               	movlw	128
  4392  0238  120A  158A  2748  120A  118A  	fcall	_write_cmd
  4393                           
  4394                           ;Button_src.c: 188:             write_char('D');
  4395  023D  3044               	movlw	68
  4396  023E  120A  158A  2731  120A  118A  	fcall	_write_char
  4397                           
  4398                           ;Button_src.c: 189:             write_char('a');
  4399  0243  3061               	movlw	97
  4400  0244  120A  158A  2731  120A  118A  	fcall	_write_char
  4401                           
  4402                           ;Button_src.c: 190:             write_char('t');
  4403  0249  3074               	movlw	116
  4404  024A  120A  158A  2731  120A  118A  	fcall	_write_char
  4405                           
  4406                           ;Button_src.c: 191:             write_char('e');
  4407  024F  3065               	movlw	101
  4408  0250  120A  158A  2731  120A  118A  	fcall	_write_char
  4409                           
  4410                           ;Button_src.c: 192:             write_char('_');
  4411  0255  305F               	movlw	95
  4412  0256  120A  158A  2731  120A  118A  	fcall	_write_char
  4413                           
  4414                           ;Button_src.c: 193:             write_char('S');
  4415  025B  3053               	movlw	83
  4416  025C  120A  158A  2731  120A  118A  	fcall	_write_char
  4417                           
  4418                           ;Button_src.c: 194:             write_char('e');
  4419  0261  3065               	movlw	101
  4420  0262  120A  158A  2731  120A  118A  	fcall	_write_char
  4421                           
  4422                           ;Button_src.c: 195:             write_char('t');
  4423  0267  3074               	movlw	116
  4424  0268  120A  158A  2731  120A  118A  	fcall	_write_char
  4425                           
  4426                           ;Button_src.c: 196:             write_char('t');
  4427  026D  3074               	movlw	116
  4428  026E  120A  158A  2731  120A  118A  	fcall	_write_char
  4429                           
  4430                           ;Button_src.c: 197:             write_char('i');
  4431  0273  3069               	movlw	105
  4432  0274  120A  158A  2731  120A  118A  	fcall	_write_char
  4433                           
  4434                           ;Button_src.c: 198:             write_char('n');
  4435  0279  306E               	movlw	110
  4436  027A  120A  158A  2731  120A  118A  	fcall	_write_char
  4437                           
  4438                           ;Button_src.c: 199:             write_char('g');
  4439  027F  3067               	movlw	103
  4440  0280  120A  158A  2731  120A  118A  	fcall	_write_char
  4441                           
  4442                           ;Button_src.c: 200:             write_char('s');
  4443  0285  3073               	movlw	115
  4444  0286  120A  158A  2731  120A  118A  	fcall	_write_char
  4445                           
  4446                           ;Button_src.c: 201:             RC0 = 0;
  4447  028B  1283               	bcf	3,5	;RP0=0, select bank0
  4448  028C  1303               	bcf	3,6	;RP1=0, select bank0
  4449  028D  1007               	bcf	7,0	;volatile
  4450                           
  4451                           ;Button_src.c: 202:             RC1 = 1;
  4452  028E  1487               	bsf	7,1	;volatile
  4453                           
  4454                           ;Button_src.c: 203:             RC2 = 1;
  4455  028F  1507               	bsf	7,2	;volatile
  4456                           
  4457                           ;Button_src.c: 204:             RC3 = 1;
  4458  0290  1587               	bsf	7,3	;volatile
  4459                           
  4460                           ;Button_src.c: 205:             if (RC7 == 0 ){
  4461  0291  1B87               	btfsc	7,7	;volatile
  4462  0292  2A37               	goto	l378
  4463                           
  4464                           ;Button_src.c: 206:             write_cmd(0x1);
  4465  0293  3001               	movlw	1
  4466  0294  120A  158A  2748   	fcall	_write_cmd
  4467                           
  4468                           ;Button_src.c: 207:             break;
  4469  0297  0008               	return
  4470  0298                     __end_of_date_settings:	
  4471                           
  4472                           	psect	text27
  4473  0F48                     __ptext27:	
  4474 ;; *************** function _write_cmd *****************
  4475 ;; Defined at:
  4476 ;;		line 41 in file "LCD_src.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  x               1    wreg     unsigned char 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  x               1    2[COMMON] unsigned char 
  4481 ;;  i               2    0        int 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4491 ;;      Params:         0       0       0       0       0
  4492 ;;      Locals:         1       0       0       0       0
  4493 ;;      Temps:          0       0       0       0       0
  4494 ;;      Totals:         1       0       0       0       0
  4495 ;;Total ram usage:        1 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    1
  4498 ;; This function calls:
  4499 ;;		_delay_screen
  4500 ;; This function is called by:
  4501 ;;		_main
  4502 ;;		_lcd_init
  4503 ;;		_thermometer_threshhold_settings
  4504 ;;		_time_settings
  4505 ;;		_date_settings
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _write_cmd
  4511  0F48                     _write_cmd:	
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4515                           ;write_cmd@x stored from wreg
  4516  0F48  00F2               	movwf	write_cmd@x
  4517                           
  4518                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  4519  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0F4B  1285               	bcf	5,5	;volatile
  4522                           
  4523                           ;LCD_src.c: 45:  RA4=0;
  4524  0F4C  1205               	bcf	5,4	;volatile
  4525                           
  4526                           ;LCD_src.c: 46:  RA3=0;
  4527  0F4D  1185               	bcf	5,3	;volatile
  4528                           
  4529                           ;LCD_src.c: 47:  delay_screen();
  4530  0F4E  120A  158A  271D  120A  158A  	fcall	_delay_screen
  4531                           
  4532                           ;LCD_src.c: 48:  RA3=1;
  4533  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  4535  0F55  1585               	bsf	5,3	;volatile
  4536                           
  4537                           ;LCD_src.c: 49:  PORTD=x;
  4538  0F56  0872               	movf	write_cmd@x,w
  4539  0F57  0088               	movwf	8	;volatile
  4540                           
  4541                           ;LCD_src.c: 50:  delay_screen();
  4542  0F58  120A  158A  271D   	fcall	_delay_screen
  4543                           
  4544                           ;LCD_src.c: 51:  RA3=0;
  4545  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  4546  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  4547  0F5D  1185               	bcf	5,3	;volatile
  4548  0F5E  0008               	return
  4549  0F5F                     __end_of_write_cmd:	
  4550                           
  4551                           	psect	text28
  4552  0F31                     __ptext28:	
  4553 ;; *************** function _write_char *****************
  4554 ;; Defined at:
  4555 ;;		line 28 in file "LCD_src.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  x               1    wreg     unsigned char 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  x               1    2[COMMON] unsigned char 
  4560 ;;  i               2    0        int 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4570 ;;      Params:         0       0       0       0       0
  4571 ;;      Locals:         1       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0
  4573 ;;      Totals:         1       0       0       0       0
  4574 ;;Total ram usage:        1 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    1
  4577 ;; This function calls:
  4578 ;;		_delay_screen
  4579 ;; This function is called by:
  4580 ;;		_main
  4581 ;;		_display_temp
  4582 ;;		_display_clock
  4583 ;;		_display_date
  4584 ;;		_thermometer_threshhold_settings
  4585 ;;		_time_settings
  4586 ;;		_date_settings
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _write_char
  4592  0F31                     _write_char:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4596                           ;write_char@x stored from wreg
  4597  0F31  00F2               	movwf	write_char@x
  4598                           
  4599                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  4600  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  4601  0F33  1303               	bcf	3,6	;RP1=0, select bank0
  4602  0F34  1685               	bsf	5,5	;volatile
  4603                           
  4604                           ;LCD_src.c: 32:  RA4=0;
  4605  0F35  1205               	bcf	5,4	;volatile
  4606                           
  4607                           ;LCD_src.c: 33:  RA3=0;
  4608  0F36  1185               	bcf	5,3	;volatile
  4609                           
  4610                           ;LCD_src.c: 34:  delay_screen();
  4611  0F37  120A  158A  271D  120A  158A  	fcall	_delay_screen
  4612                           
  4613                           ;LCD_src.c: 35:  RA3=1;
  4614  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  4615  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  4616  0F3E  1585               	bsf	5,3	;volatile
  4617                           
  4618                           ;LCD_src.c: 36:  PORTD= x;
  4619  0F3F  0872               	movf	write_char@x,w
  4620  0F40  0088               	movwf	8	;volatile
  4621                           
  4622                           ;LCD_src.c: 37:  delay_screen();
  4623  0F41  120A  158A  271D   	fcall	_delay_screen
  4624                           
  4625                           ;LCD_src.c: 38:  RA3=0;
  4626  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0F46  1185               	bcf	5,3	;volatile
  4629  0F47  0008               	return
  4630  0F48                     __end_of_write_char:	
  4631                           
  4632                           	psect	text29
  4633  0F1D                     __ptext29:	
  4634 ;; *************** function _delay_screen *****************
  4635 ;; Defined at:
  4636 ;;		line 70 in file "LCD_src.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  i               2    0[COMMON] int 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, btemp+1
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4650 ;;      Params:         0       0       0       0       0
  4651 ;;      Locals:         2       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0
  4653 ;;      Totals:         2       0       0       0       0
  4654 ;;Total ram usage:        2 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; This function calls:
  4657 ;;		Nothing
  4658 ;; This function is called by:
  4659 ;;		_lcd_init
  4660 ;;		_write_char
  4661 ;;		_write_cmd
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _delay_screen
  4667  0F1D                     _delay_screen:	
  4668                           
  4669                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  4673  0F1D  01F0               	clrf	delay_screen@i
  4674  0F1E  01F1               	clrf	delay_screen@i+1
  4675  0F1F                     l1745:	
  4676  0F1F  3001               	movlw	1
  4677  0F20  07F0               	addwf	delay_screen@i,f
  4678  0F21  1803               	skipnc
  4679  0F22  0AF1               	incf	delay_screen@i+1,f
  4680  0F23  3000               	movlw	0
  4681  0F24  07F1               	addwf	delay_screen@i+1,f
  4682  0F25  0871               	movf	delay_screen@i+1,w
  4683  0F26  3A80               	xorlw	128
  4684  0F27  00FF               	movwf	127
  4685  0F28  3080               	movlw	128
  4686  0F29  027F               	subwf	127,w
  4687  0F2A  1D03               	skipz
  4688  0F2B  2F2E               	goto	u735
  4689  0F2C  3005               	movlw	5
  4690  0F2D  0270               	subwf	delay_screen@i,w
  4691  0F2E                     u735:	
  4692  0F2E  1803               	btfsc	3,0
  4693  0F2F  0008               	return
  4694  0F30  2F1F               	goto	l1745
  4695  0F31                     __end_of_delay_screen:	
  4696  007E                     btemp	set	126	;btemp
  4697  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_write_char
    _time_settings->_write_cmd
    _thermometer_threshhold_settings->___awdiv
    _set_time->_time_write_1
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_write_char
    _date_settings->_write_cmd
    _write_cmd->_delay_screen
    _write_char->_delay_screen

Critical Paths under _main in BANK0

    _main->_get_temp

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7031
                      _date_settings
                      _display_clock
                       _display_date
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                           _set_time
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        0     0      0     136
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      4     4      0    1204
                                              9 COMMON     4     4      0
                            ___awdiv
                _set_beep_threshhold
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _set_beep_threshhold                                  3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    4186
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     908
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     252
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        0     0      0     136
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___awdiv
     ___awmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _set_time
     _time_write_1
   _thermometer_threshhold_settings
     ___awdiv
     _set_beep_threshhold
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      27       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      19       5       31.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      27      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Nov 28 19:58:03 2019

                                       pc 0002                                        _TX 0031  
                                      _TZ 0032                              ___awdiv@sign 0076  
                                      _ge 002F                                        _wd 0027  
                                      fsr 0004                       _set_beep_threshhold 0F0A  
                           ?_display_date 0070                                       l254 004B  
                                     l248 0F62                                       l353 07AF  
                                     l290 0F1B                                       l195 0EEA  
                                     l363 07EE                                       l371 02A6  
                                     l378 0237                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE1 0049                                       _RC6 003E  
                                     _RC7 003F                                       u735 0F2E  
                                     u825 0015                                       u915 01F0  
                                     u845 0F7F                                       u935 01FC  
                                     u945 0208                                       u865 006C  
                                     u955 0212                                       _THV 0033  
                           ?_display_temp 0070                                       _TLV 0034  
                                     _shi 0030                                       _var 0029  
                                     fsr0 0004                                       indf 0000  
                            ___awmod@sign 0076                              __CFG_FOSC$HS 0000  
                         ??_time_settings 0073                              __CFG_LVP$OFF 0000  
                                    l2021 01CB                                      l2013 01B8  
                                    l2007 019C                                      l2009 01AA  
                                    l2017 01C3                                      l2043 0175  
                                    l2035 0151                                      l2037 015F  
                                    l2061 008A                                      l2047 0180  
                                    l2065 0098                                      l2161 05BE  
                                    l2153 05AA                                      l2059 007C  
                                    l2083 0023                                      l2315 0740  
                                    l2229 03A8                                      l2069 00A3  
                                    l2157 05B4                                      l2149 05A0  
                                    l2181 0FDF                                      l2333 077A  
                                    l2343 0798                                      l2193 0313  
                                    l1801 0117                                      l2361 07E1  
                                    l2265 062C                                      l2425 0465  
                                    l1821 012D                                      l2349 07C7  
                                    l1751 0EEE                                      l1745 0F1F  
                                    l1843 00AD                                      l1951 01DA  
                                    l1791 0107                                      l1793 00DF  
                                    l1929 005C                                      l1957 01E5  
                                    l1789 0106                                      l1983 0224  
                                    l1975 0211                                      l1967 01ED  
                                    l1895 0006                                      l1969 01FB  
                                    l1979 021C                                      l1995 018F  
                                    l1999 0196                            ?_display_clock 0070  
                                    u1015 019F                                      u1105 0160  
                                    u1035 01B0                                      u1115 016C  
                                    u1045 01B9                                      u1125 0176  
                                    u1205 003F                                      u1215 0546  
                                    u1225 0551                                      u1155 007F  
                                    u1235 055E                                      u1085 0154  
                                    u1175 0090                                      u1335 0768  
                                    u1185 0099                                      u1345 07A7  
                                    u1285 0FFA                      ?_set_beep_threshhold 0070  
                                    _main 043E                                      _init 0ED3  
                                    btemp 007E                             write_byte@val 0077  
                                    start 0000               __size_of_initialise_buttons 000D  
                          ??_display_date 0073                                     ?_main 0070  
                          ??_display_temp 0073                                     ?_init 0070  
                         __end_of___awdiv 0229                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 01D0                           ___awdiv@divisor 0070  
                    __end_of_delay_screen 0F31                           __end_of___lwdiv 0185  
                         __end_of___lwmod 00A8                           ___awdiv@counter 0075  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _table 0806                            write_byte@temp 0076  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0070                                     status 0003  
                                   wtemp0 007E                             ??_ds1302_init 0075  
                         __initialization 07F5                              __end_of_main 0500  
                            __end_of_init 0EDC                     __end_of_date_settings 0298  
                                  ??_main 007E                                    ??_init 0070  
                         ??_display_clock 0073                                    _ADCON1 009F  
                        ___awdiv@dividend 0072                                    _TRISA0 0428  
                                  _TRISB4 0434                                    _TRISE0 0448  
                        __end_of_lcd_init 0FAB                          __end_of_get_temp 0624  
                        __end_of_get_time 1000                                    _baifen 002D  
                               ??___awdiv 0074                                 ??___awmod 0074  
                                  _delay2 0004                                 ??___lwdiv 007A  
                               ??___lwmod 0074                       __end_of_ds1302_init 0F0A  
                                  _table1 0020                          ___awdiv@quotient 0077  
                         ___awmod@divisor 0070                                    _shifen 002E  
                                  _wanfen 002B                           ___awmod@counter 0075  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 0045  
                      reset_temp@presence 0075                   __end_of__initialization 07FC  
                    __end_of_display_date 039C                      __end_of_display_temp 0FD4  
                          __pcstackCOMMON 0070                     __size_of_delay_screen 0014  
                           __end_of_table 080E                                __pbssBANK0 0020  
                            _delay_screen 0F1D                        __size_of_init_temp 0007  
                      __size_of_read_byte 0035                               _ds1302_init 0EF7  
                              _delay_temp 0EE9                                __pmaintext 043E  
                                 ?_delay2 0070                        time_read_1@time_rx 0074  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 0307                                 ?_get_time 0070  
                              __stringtab 0800                        __size_of_write_cmd 0017  
                               ?_set_time 0070                __end_of_initialise_buttons 0EE9  
                                 ___awdiv 01D0                                   ___awmod 0185  
                         __size_of_delay2 0014                                   ___lwdiv 0149  
                                 ___lwmod 0076                                   __ptext1 0298  
                                 __ptext2 0624                                   __ptext3 0F0A  
                                 __ptext4 0018                                   __ptext5 0F85  
                                 __ptext6 0EDC                                   __ptext7 0EC4  
                                 __ptext8 0ED3                                   __ptext9 0FD4  
                                 delay2@i 0070                         __end_of_init_temp 0ECB  
                        ___awmod@dividend 0072                         __end_of_read_byte 00DD  
                                 _qianfen 002C                      __size_of_time_read_1 0031  
             __end_of_set_beep_threshhold 0F1D                     __size_of_display_date 0095  
                                 clrloop0 0ECC                                ??_lcd_init 0073  
                              ??_get_temp 0035                                ??_get_time 0075  
                   __size_of_display_temp 0029                      end_of_initialization 07FC  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 00DD  
                              ??_set_time 0075                              _display_date 0307  
                            _display_temp 0FAB                         __end_of_write_cmd 0F5F  
                   __end_of_display_clock 043E                    __size_of_date_settings 006F  
                          ??_time_write_1 0070                            __end_of_delay2 0018  
                              _write_char 0F31                                _write_byte 0112  
                     start_initialization 07F5                             delay_screen@i 0070  
                     __size_of_delay_temp 000E                              ?_ds1302_init 0070  
                             ?_reset_temp 0070                                  ??_delay2 0070  
                           _date_settings 0229                                read_byte@i 0076  
                              read_byte@j 002A                                 ___latbits 0002  
                           __pcstackBANK0 0035                      set_beep_threshhold@x 0072  
                       __size_of_lcd_init 0026                         __size_of_get_temp 0124  
                       __size_of_get_time 002C                          ___lwdiv@dividend 0078  
                                ?___awdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lwdiv 0076  
                                ?___lwmod 0070                         __size_of_set_time 002D  
                             ?_write_char 0070                               ?_write_byte 0070  
                               __pstrings 0800                      __end_of_time_write_1 0F85  
                      _initialise_buttons 0EDC                       __size_of_reset_temp 0035  
                        ___lwdiv@quotient 007B                                 _init_temp 0EC4  
                               _read_byte 00A8                       ?_initialise_buttons 0070  
                               clear_ram0 0ECB                              ??_delay_temp 0071  
 __end_of_thermometer_threshhold_settings 07F5  __size_of_thermometer_threshhold_settings 01D1  
       ??_thermometer_threshhold_settings 0079          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0624                      ??_initialise_buttons 0070  
                  __size_of_time_settings 006F          thermometer_threshhold_settings@i 0079  
        thermometer_threshhold_settings@x 007B                               __stringbase 0805  
                           ??_time_read_1 0070                               write_char@x 0072  
                               get_time@i 0076                               write_byte@i 0078  
                      __end_of_delay_temp 0EF7                                 _write_cmd 0F48  
                              ?_init_temp 0070                                ?_read_byte 0070  
                     __size_of_write_char 0017              __size_of_set_beep_threshhold 0013  
                     __size_of_write_byte 0037                           ??_date_settings 0073  
                    __size_of_ds1302_init 0013                          __size_of___awdiv 0059  
                        __size_of___awmod 004B                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                        __end_of__stringtab 0806  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 0045                                  __ptext11 0500  
                                __ptext20 01D0                                  __ptext12 0112  
                                __ptext21 0EF7                                  __ptext13 00DD  
                                __ptext22 0F5F                                  __ptext14 00A8  
                                __ptext23 0FAB                                  __ptext15 0EE9  
                                __ptext24 0307                                  __ptext16 0004  
                                __ptext25 039C                                  __ptext17 0076  
                                __ptext26 0229                                  __ptext18 0149  
                                __ptext27 0F48                                  __ptext19 0185  
                                __ptext28 0F31                                  __ptext29 0F1D  
                     __end_of_time_read_1 0076                                ?_write_cmd 0070  
                                _lcd_init 0F85                                  _get_temp 0500  
                                _get_time 0FD4                             _time_settings 0298  
                           __size_of_main 00C2                             __size_of_init 0009  
                           ?_delay_screen 0070                                 set_time@i 0075  
                            ??_reset_temp 0074                                  _set_time 0018  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 00A2                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075                               ??_init_temp 0070  
                      __end_of_reset_temp 0112                               ??_read_byte 0074  
                          ?_time_settings 0070                          ___lwmod@dividend 0072  
                          ??_delay_screen 0070                                 stringcode 0800  
                            _time_write_1 0F5F                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 0045                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                                stringdir 0800                                  stringtab 0800  
                             ??_write_cmd 0072                             _display_clock 039C  
                           time_write_1@j 0072                        __end_of_write_char 0F48  
                      __end_of_write_byte 0149  
