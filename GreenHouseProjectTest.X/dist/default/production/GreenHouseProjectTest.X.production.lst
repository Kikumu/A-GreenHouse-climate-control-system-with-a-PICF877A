

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 11 15:54:29 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  139B                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  139B  3400               	retlw	0
   696  139C  3418               	retlw	24
   697  139D  3400               	retlw	0
   698  139E  3412               	retlw	18
   699  139F  3412               	retlw	18
   700  13A0  3406               	retlw	6
   701  13A1  3419               	retlw	25
   702  13A2  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003E                     _RC6	set	62
   706  003F                     _RC7	set	63
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30B5               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3013               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  309B               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30AD               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  23E3  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30AD               	movlw	low (__pbssBANK1+13)
   756  07F1  160A  118A  2393  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  305E               	movlw	low (__pbssBANK0+62)
   762  07F9  160A  118A  2393   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2BCD   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _day_counter:	
   773  0020                     	ds	2
   774  0022                     _p:	
   775  0022                     	ds	2
   776  0024                     _stats:	
   777  0024                     	ds	2
   778  0026                     _day_high:	
   779  0026                     	ds	2
   780  0028                     _day_low:	
   781  0028                     	ds	2
   782  002A                     _z:	
   783  002A                     	ds	2
   784  002C                     _y:	
   785  002C                     	ds	2
   786  002E                     _x:	
   787  002E                     	ds	2
   788  0030                     _w:	
   789  0030                     	ds	2
   790  0032                     _t:	
   791  0032                     	ds	2
   792  0034                     _var_night_high:	
   793  0034                     	ds	2
   794  0036                     _var_night_low:	
   795  0036                     	ds	2
   796  0038                     _count:	
   797  0038                     	ds	2
   798  003A                     _heat_counter:	
   799  003A                     	ds	2
   800  003C                     _wd:	
   801  003C                     	ds	2
   802  003E                     read_byte@j:	
   803  003E                     	ds	1
   804  003F                     _prev_hex_mins:	
   805  003F                     	ds	1
   806  0040                     _prev_hex_hours:	
   807  0040                     	ds	1
   808  0041                     _prev_hex_year:	
   809  0041                     	ds	1
   810  0042                     _prev_hex_day:	
   811  0042                     	ds	1
   812  0043                     _prev_hex:	
   813  0043                     	ds	1
   814  0044                     _hrs_limiter:	
   815  0044                     	ds	1
   816  0045                     _day_hex:	
   817  0045                     	ds	1
   818  0046                     _c:	
   819  0046                     	ds	1
   820  0047                     _b:	
   821  0047                     	ds	1
   822  0048                     _a:	
   823  0048                     	ds	1
   824  0049                     _temp_high:	
   825  0049                     	ds	1
   826  004A                     _temp_low:	
   827  004A                     	ds	1
   828  004B                     _alarm__:	
   829  004B                     	ds	1
   830  004C                     _var2:	
   831  004C                     	ds	1
   832  004D                     _var1:	
   833  004D                     	ds	1
   834  004E                     _cooler_state:	
   835  004E                     	ds	1
   836  004F                     _heater_state:	
   837  004F                     	ds	1
   838  0050                     _buzzer_watcher1:	
   839  0050                     	ds	1
   840  0051                     _buzzer_watcher:	
   841  0051                     	ds	1
   842  0052                     _lower_t:	
   843  0052                     	ds	1
   844  0053                     _upper_t:	
   845  0053                     	ds	1
   846  0054                     _wanfen:	
   847  0054                     	ds	1
   848  0055                     _qianfen:	
   849  0055                     	ds	1
   850  0056                     _baifen:	
   851  0056                     	ds	1
   852  0057                     _shifen:	
   853  0057                     	ds	1
   854  0058                     _ge:	
   855  0058                     	ds	1
   856  0059                     _shi:	
   857  0059                     	ds	1
   858  005A                     _TX:	
   859  005A                     	ds	1
   860  005B                     _TZ:	
   861  005B                     	ds	1
   862  005C                     _THV:	
   863  005C                     	ds	1
   864  005D                     _TLV:	
   865  005D                     	ds	1
   866                           
   867                           	psect	bssBANK1
   868  00A0                     __pbssBANK1:	
   869  00A0                     _table1:	
   870  00A0                     	ds	7
   871  00A7                     _d_type:	
   872  00A7                     	ds	2
   873  00A9                     _day_of_week_var:	
   874  00A9                     	ds	2
   875  00AB                     _cold_counter:	
   876  00AB                     	ds	2
   877                           
   878                           	psect	dataBANK1
   879  00AD                     __pdataBANK1:	
   880  00AD                     _table:	
   881  00AD                     	ds	8
   882                           
   883                           	psect	inittext
   884  13DF                     init_fetch0:	
   885                           ;	Called with low address in FSR and high address in W
   886                           
   887  13DF  087E               	movf	126,w
   888  13E0  008A               	movwf	10
   889  13E1  087F               	movf	127,w
   890  13E2  0082               	movwf	2
   891  13E3                     init_ram0:	
   892                           ;Called with:
   893                           ;	high address of idata address in btemp 
   894                           ;	low address of idata address in btemp+1 
   895                           ;	low address of data in FSR
   896                           ;	high address + 1 of data in btemp-1
   897                           
   898  13E3  23DF  160A  118A   	fcall	init_fetch0
   899  13E6  0080               	movwf	0
   900  13E7  0A84               	incf	4,f
   901  13E8  0804               	movf	4,w
   902  13E9  067D               	xorwf	125,w
   903  13EA  1903               	btfsc	3,2
   904  13EB  3400               	retlw	0
   905  13EC  0AFF               	incf	127,f
   906  13ED  1903               	btfsc	3,2
   907  13EE  0AFE               	incf	126,f
   908  13EF  2BE3               	goto	init_ram0
   909                           
   910                           	psect	clrtext
   911  1393                     clear_ram0:	
   912                           ;	Called with FSR containing the base address, and
   913                           ;	W with the last address+1
   914                           
   915  1393  0064               	clrwdt	;clear the watchdog before getting into this loop
   916  1394                     clrloop0:	
   917  1394  0180               	clrf	0	;clear RAM location pointed to by FSR
   918  1395  0A84               	incf	4,f	;increment pointer
   919  1396  0604               	xorwf	4,w	;XOR with final address
   920  1397  1903               	btfsc	3,2	;have we reached the end yet?
   921  1398  3400               	retlw	0	;all done for this memory range, return
   922  1399  0604               	xorwf	4,w	;XOR again to restore value
   923  139A  2B94               	goto	clrloop0	;do the next byte
   924                           
   925                           	psect	cstackCOMMON
   926  0070                     __pcstackCOMMON:	
   927  0070                     ?_init_temp:	
   928  0070                     ??_init_temp:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_set_time:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_ds1302_init:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_init:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ??_init:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_lcd_init:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_initialise_buttons:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ??_initialise_buttons:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_get_temp:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_get_time:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_write_cmd:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_write_char:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_display_temp:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_display_date:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_display_clock:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_thermometer_threshhold_settings:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_date_settings:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?_time_settings:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_reset_alarm:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ?_set_beep_threshhold:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_delay_screen:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ??_delay_screen:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_delay_temp:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ?_delay2:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ??_delay2:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_time_write_1:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ??_time_write_1:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_time_read_1:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ??_time_read_1:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ?_button_delay:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ??_button_delay:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?_time_date_hex_terminator:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ?_time_date_delimiter:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?_main:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0070                     ?_reset_temp:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0070                     ?_write_byte:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     ?_read_byte:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ?___lbdiv:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ?___lbmod:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     ?___awmod:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     ?___lwmod:	
  1049                           ; 2 bytes @ 0x0
  1050                           
  1051  0070                     delay_temp@y:	
  1052                           ; 2 bytes @ 0x0
  1053                           
  1054  0070                     time_date_delimiter@hex:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0070                     time_date_hex_terminator@limiter:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0070                     ___lbdiv@divisor:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0070                     ___lbmod@divisor:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0070                     delay_screen@i:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     delay2@i:	
  1070                           ; 2 bytes @ 0x0
  1071                           
  1072  0070                     button_delay@i:	
  1073                           ; 2 bytes @ 0x0
  1074                           
  1075  0070                     ___awmod@divisor:	
  1076                           ; 2 bytes @ 0x0
  1077                           
  1078  0070                     ___lwmod@divisor:	
  1079                           ; 2 bytes @ 0x0
  1080                           
  1081                           
  1082                           ; 2 bytes @ 0x0
  1083  0070                     	ds	1
  1084  0071                     ??_delay_temp:	
  1085  0071                     ??_time_date_hex_terminator:	
  1086                           ; 1 bytes @ 0x1
  1087                           
  1088  0071                     ??___lbdiv:	
  1089                           ; 1 bytes @ 0x1
  1090                           
  1091  0071                     ??___lbmod:	
  1092                           ; 1 bytes @ 0x1
  1093                           
  1094  0071                     time_date_delimiter@limiter:	
  1095                           ; 1 bytes @ 0x1
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x1
  1099  0071                     	ds	1
  1100  0072                     ??_write_cmd:	
  1101  0072                     ??_write_char:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104  0072                     ??_set_beep_threshhold:	
  1105                           ; 1 bytes @ 0x2
  1106                           
  1107  0072                     write_char@x:	
  1108                           ; 1 bytes @ 0x2
  1109                           
  1110  0072                     write_cmd@x:	
  1111                           ; 1 bytes @ 0x2
  1112                           
  1113  0072                     delay_temp@x:	
  1114                           ; 1 bytes @ 0x2
  1115                           
  1116  0072                     set_beep_threshhold@x:	
  1117                           ; 1 bytes @ 0x2
  1118                           
  1119  0072                     ___lbdiv@dividend:	
  1120                           ; 1 bytes @ 0x2
  1121                           
  1122  0072                     time_write_1@j:	
  1123                           ; 1 bytes @ 0x2
  1124                           
  1125  0072                     time_read_1@j:	
  1126                           ; 2 bytes @ 0x2
  1127                           
  1128  0072                     time_date_delimiter@type:	
  1129                           ; 2 bytes @ 0x2
  1130                           
  1131  0072                     ___awmod@dividend:	
  1132                           ; 2 bytes @ 0x2
  1133                           
  1134  0072                     ___lwmod@dividend:	
  1135                           ; 2 bytes @ 0x2
  1136                           
  1137                           
  1138                           ; 2 bytes @ 0x2
  1139  0072                     	ds	1
  1140  0073                     ??_lcd_init:	
  1141  0073                     ??_display_temp:	
  1142                           ; 1 bytes @ 0x3
  1143                           
  1144  0073                     ??_display_date:	
  1145                           ; 1 bytes @ 0x3
  1146                           
  1147  0073                     ??_display_clock:	
  1148                           ; 1 bytes @ 0x3
  1149                           
  1150  0073                     ?_set_lower_threshold:	
  1151                           ; 1 bytes @ 0x3
  1152                           
  1153  0073                     ?_set_upper_threshold:	
  1154                           ; 1 bytes @ 0x3
  1155                           
  1156  0073                     ??_reset_alarm:	
  1157                           ; 1 bytes @ 0x3
  1158                           
  1159  0073                     ?_display_day:	
  1160                           ; 1 bytes @ 0x3
  1161                           
  1162  0073                     delay_temp@z:	
  1163                           ; 1 bytes @ 0x3
  1164                           
  1165  0073                     time_date_hex_terminator@val:	
  1166                           ; 1 bytes @ 0x3
  1167                           
  1168  0073                     ___lbdiv@counter:	
  1169                           ; 1 bytes @ 0x3
  1170                           
  1171  0073                     set_upper_threshold@upper_val:	
  1172                           ; 1 bytes @ 0x3
  1173                           
  1174  0073                     set_lower_threshold@upper_val:	
  1175                           ; 2 bytes @ 0x3
  1176                           
  1177  0073                     display_day@num:	
  1178                           ; 2 bytes @ 0x3
  1179                           
  1180                           
  1181                           ; 2 bytes @ 0x3
  1182  0073                     	ds	1
  1183  0074                     ??_time_date_delimiter:	
  1184  0074                     ??_reset_temp:	
  1185                           ; 1 bytes @ 0x4
  1186                           
  1187  0074                     ??_write_byte:	
  1188                           ; 1 bytes @ 0x4
  1189                           
  1190  0074                     ??_read_byte:	
  1191                           ; 1 bytes @ 0x4
  1192                           
  1193  0074                     ??___awmod:	
  1194                           ; 1 bytes @ 0x4
  1195                           
  1196  0074                     ??___lwmod:	
  1197                           ; 1 bytes @ 0x4
  1198                           
  1199  0074                     time_write_1@time_tx:	
  1200                           ; 1 bytes @ 0x4
  1201                           
  1202  0074                     time_read_1@time_rx:	
  1203                           ; 1 bytes @ 0x4
  1204                           
  1205  0074                     ___lbdiv@quotient:	
  1206                           ; 1 bytes @ 0x4
  1207                           
  1208  0074                     ___lbmod@dividend:	
  1209                           ; 1 bytes @ 0x4
  1210                           
  1211                           
  1212                           ; 1 bytes @ 0x4
  1213  0074                     	ds	1
  1214  0075                     ??_set_time:	
  1215  0075                     ??_ds1302_init:	
  1216                           ; 1 bytes @ 0x5
  1217                           
  1218  0075                     ??_get_time:	
  1219                           ; 1 bytes @ 0x5
  1220                           
  1221  0075                     ??_display_day:	
  1222                           ; 1 bytes @ 0x5
  1223                           
  1224  0075                     reset_temp@presence:	
  1225                           ; 1 bytes @ 0x5
  1226                           
  1227  0075                     read_byte@value:	
  1228                           ; 1 bytes @ 0x5
  1229                           
  1230  0075                     ___awmod@counter:	
  1231                           ; 1 bytes @ 0x5
  1232                           
  1233  0075                     ___lbmod@counter:	
  1234                           ; 1 bytes @ 0x5
  1235                           
  1236  0075                     ___lwmod@counter:	
  1237                           ; 1 bytes @ 0x5
  1238                           
  1239  0075                     set_time@i:	
  1240                           ; 1 bytes @ 0x5
  1241                           
  1242  0075                     display_clock@i:	
  1243                           ; 2 bytes @ 0x5
  1244                           
  1245  0075                     display_date@i:	
  1246                           ; 2 bytes @ 0x5
  1247                           
  1248  0075                     set_upper_threshold@lower_val:	
  1249                           ; 2 bytes @ 0x5
  1250                           
  1251  0075                     set_lower_threshold@lower_val:	
  1252                           ; 2 bytes @ 0x5
  1253                           
  1254                           
  1255                           ; 2 bytes @ 0x5
  1256  0075                     	ds	1
  1257  0076                     ?___lwdiv:	
  1258  0076                     write_byte@temp:	
  1259                           ; 2 bytes @ 0x6
  1260                           
  1261  0076                     read_byte@i:	
  1262                           ; 1 bytes @ 0x6
  1263                           
  1264  0076                     time_date_delimiter@val:	
  1265                           ; 1 bytes @ 0x6
  1266                           
  1267  0076                     ___awmod@sign:	
  1268                           ; 1 bytes @ 0x6
  1269                           
  1270  0076                     ___lbmod@rem:	
  1271                           ; 1 bytes @ 0x6
  1272                           
  1273  0076                     get_time@i:	
  1274                           ; 1 bytes @ 0x6
  1275                           
  1276  0076                     ___lwdiv@divisor:	
  1277                           ; 2 bytes @ 0x6
  1278                           
  1279                           
  1280                           ; 2 bytes @ 0x6
  1281  0076                     	ds	1
  1282  0077                     ??_set_lower_threshold:	
  1283  0077                     ??_set_upper_threshold:	
  1284                           ; 1 bytes @ 0x7
  1285                           
  1286  0077                     ?_modulus_func:	
  1287                           ; 1 bytes @ 0x7
  1288                           
  1289  0077                     write_byte@val:	
  1290                           ; 2 bytes @ 0x7
  1291                           
  1292  0077                     modulus_func@x:	
  1293                           ; 1 bytes @ 0x7
  1294                           
  1295                           
  1296                           ; 2 bytes @ 0x7
  1297  0077                     	ds	1
  1298  0078                     write_byte@i:	
  1299  0078                     ___lwdiv@dividend:	
  1300                           ; 1 bytes @ 0x8
  1301                           
  1302                           
  1303                           ; 2 bytes @ 0x8
  1304  0078                     	ds	1
  1305  0079                     modulus_func@y:	
  1306                           
  1307                           ; 2 bytes @ 0x9
  1308  0079                     	ds	1
  1309  007A                     ??___lwdiv:	
  1310                           
  1311                           ; 1 bytes @ 0xA
  1312  007A                     	ds	1
  1313  007B                     ??_modulus_func:	
  1314  007B                     ??_incrementor:	
  1315                           ; 1 bytes @ 0xB
  1316                           
  1317  007B                     ??_decrementor:	
  1318                           ; 1 bytes @ 0xB
  1319                           
  1320  007B                     ___lwdiv@quotient:	
  1321                           ; 1 bytes @ 0xB
  1322                           
  1323                           
  1324                           ; 2 bytes @ 0xB
  1325  007B                     	ds	2
  1326  007D                     ___lwdiv@counter:	
  1327                           
  1328                           ; 1 bytes @ 0xD
  1329  007D                     	ds	1
  1330                           
  1331                           	psect	cstackBANK0
  1332  005E                     __pcstackBANK0:	
  1333  005E                     ??_get_temp:	
  1334  005E                     ?_incrementor:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337  005E                     ?_decrementor:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340  005E                     incrementor@upper_val:	
  1341                           ; 1 bytes @ 0x0
  1342                           
  1343  005E                     decrementor@lower_val:	
  1344                           ; 2 bytes @ 0x0
  1345                           
  1346                           
  1347                           ; 2 bytes @ 0x0
  1348  005E                     	ds	2
  1349  0060                     incrementor@lower_val:	
  1350  0060                     decrementor@upper_val:	
  1351                           ; 2 bytes @ 0x2
  1352                           
  1353                           
  1354                           ; 2 bytes @ 0x2
  1355  0060                     	ds	2
  1356  0062                     incrementor@z:	
  1357  0062                     decrementor@z:	
  1358                           ; 1 bytes @ 0x4
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x4
  1362  0062                     	ds	1
  1363  0063                     ??_thermometer_threshhold_settings:	
  1364  0063                     ??_date_settings:	
  1365                           ; 1 bytes @ 0x5
  1366                           
  1367  0063                     ??_time_settings:	
  1368                           ; 1 bytes @ 0x5
  1369                           
  1370                           
  1371                           ; 1 bytes @ 0x5
  1372  0063                     	ds	3
  1373  0066                     thermometer_threshhold_settings@i:	
  1374                           
  1375                           ; 2 bytes @ 0x8
  1376  0066                     	ds	2
  1377  0068                     ??_main:	
  1378                           
  1379                           ; 1 bytes @ 0xA
  1380  0068                     	ds	5
  1381  006D                     main@i:	
  1382                           
  1383                           ; 2 bytes @ 0xF
  1384  006D                     	ds	2
  1385                           
  1386                           	psect	maintext
  1387  0BCD                     __pmaintext:	
  1388 ;;
  1389 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1390 ;;
  1391 ;; *************** function _main *****************
  1392 ;; Defined at:
  1393 ;;		line 10 in file "mainLogic.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  i               2   15[BANK0 ] int 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : B00/0
  1404 ;;		On exit  : 300/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1407 ;;      Params:         0       0       0       0       0
  1408 ;;      Locals:         0       2       0       0       0
  1409 ;;      Temps:          0       5       0       0       0
  1410 ;;      Totals:         0       7       0       0       0
  1411 ;;Total ram usage:        7 bytes
  1412 ;; Hardware stack levels required when called:    4
  1413 ;; This function calls:
  1414 ;;		_date_settings
  1415 ;;		_display_clock
  1416 ;;		_display_date
  1417 ;;		_display_day
  1418 ;;		_display_temp
  1419 ;;		_ds1302_init
  1420 ;;		_get_temp
  1421 ;;		_get_time
  1422 ;;		_init
  1423 ;;		_init_temp
  1424 ;;		_initialise_buttons
  1425 ;;		_lcd_init
  1426 ;;		_modulus_func
  1427 ;;		_reset_alarm
  1428 ;;		_set_beep_threshhold
  1429 ;;		_set_lower_threshold
  1430 ;;		_set_time
  1431 ;;		_set_upper_threshold
  1432 ;;		_thermometer_threshhold_settings
  1433 ;;		_time_settings
  1434 ;;		_write_char
  1435 ;;		_write_cmd
  1436 ;; This function is called by:
  1437 ;;		Startup code after reset
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           
  1442                           ;psect for function _main
  1443  0BCD                     _main:	
  1444                           
  1445                           ;mainLogic.c: 11:     TRISB=0X02;
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1449  0BCD  3002               	movlw	2
  1450  0BCE  1683               	bsf	3,5	;RP0=1, select bank1
  1451  0BCF  0086               	movwf	6	;volatile
  1452                           
  1453                           ;mainLogic.c: 12:     init_temp();
  1454  0BD0  160A  118A  2386  120A  158A  	fcall	_init_temp
  1455                           
  1456                           ;mainLogic.c: 13:     set_time();
  1457  0BD5  160A  118A  256A  120A  158A  	fcall	_set_time
  1458                           
  1459                           ;mainLogic.c: 14:     ds1302_init();
  1460  0BDA  160A  118A  23C0  120A  158A  	fcall	_ds1302_init
  1461                           
  1462                           ;mainLogic.c: 16:     init();
  1463  0BDF  160A  118A  238B  120A  158A  	fcall	_init
  1464                           
  1465                           ;mainLogic.c: 17:     lcd_init();
  1466  0BE4  160A  118A  24D9  120A  158A  	fcall	_lcd_init
  1467                           
  1468                           ;mainLogic.c: 18:     init_temp();
  1469  0BE9  160A  118A  2386  120A  158A  	fcall	_init_temp
  1470                           
  1471                           ;mainLogic.c: 19:     initialise_buttons();
  1472  0BEE  160A  118A  242C  120A  158A  	fcall	_initialise_buttons
  1473                           
  1474                           ;mainLogic.c: 20:     var1 = 3;
  1475  0BF3  3003               	movlw	3
  1476  0BF4  00E8               	movwf	??_main
  1477  0BF5  0868               	movf	??_main,w
  1478  0BF6  00CD               	movwf	_var1
  1479                           
  1480                           ;mainLogic.c: 21:     var2 = 4;
  1481  0BF7  3004               	movlw	4
  1482  0BF8  00E8               	movwf	??_main
  1483  0BF9  0868               	movf	??_main,w
  1484  0BFA  00CC               	movwf	_var2
  1485                           
  1486                           ;mainLogic.c: 22:     var_night_low = 4;
  1487  0BFB  3004               	movlw	4
  1488  0BFC  00B6               	movwf	_var_night_low
  1489  0BFD  3000               	movlw	0
  1490  0BFE  00B7               	movwf	_var_night_low+1
  1491                           
  1492                           ;mainLogic.c: 23:     var_night_high = 2;
  1493  0BFF  3002               	movlw	2
  1494  0C00  00B4               	movwf	_var_night_high
  1495  0C01  3000               	movlw	0
  1496  0C02  00B5               	movwf	_var_night_high+1
  1497  0C03                     l4651:	
  1498                           
  1499                           ;mainLogic.c: 27:     get_temp();
  1500  0C03  120A  158A  216F  120A  158A  	fcall	_get_temp
  1501                           
  1502                           ;mainLogic.c: 28:     get_time();
  1503  0C08  160A  118A  2592  120A  158A  	fcall	_get_time
  1504                           
  1505                           ;mainLogic.c: 29:     write_cmd(0x80);
  1506  0C0D  3080               	movlw	128
  1507  0C0E  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1508                           
  1509                           ;mainLogic.c: 30:     write_char('T');
  1510  0C13  3054               	movlw	84
  1511  0C14  160A  118A  2440  120A  158A  	fcall	_write_char
  1512                           
  1513                           ;mainLogic.c: 31:     write_char('e');
  1514  0C19  3065               	movlw	101
  1515  0C1A  160A  118A  2440  120A  158A  	fcall	_write_char
  1516                           
  1517                           ;mainLogic.c: 32:     write_char('m');
  1518  0C1F  306D               	movlw	109
  1519  0C20  160A  118A  2440  120A  158A  	fcall	_write_char
  1520                           
  1521                           ;mainLogic.c: 33:     write_char('p');
  1522  0C25  3070               	movlw	112
  1523  0C26  160A  118A  2440  120A  158A  	fcall	_write_char
  1524                           
  1525                           ;mainLogic.c: 34:     write_char(':');
  1526  0C2B  303A               	movlw	58
  1527  0C2C  160A  118A  2440  120A  158A  	fcall	_write_char
  1528                           
  1529                           ;mainLogic.c: 35:     display_temp();
  1530  0C31  160A  118A  2474  120A  158A  	fcall	_display_temp
  1531                           
  1532                           ;mainLogic.c: 37:     write_cmd(0x90);
  1533  0C36  3090               	movlw	144
  1534  0C37  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1535                           
  1536                           ;mainLogic.c: 38:     write_char('D');
  1537  0C3C  3044               	movlw	68
  1538  0C3D  160A  118A  2440  120A  158A  	fcall	_write_char
  1539                           
  1540                           ;mainLogic.c: 39:     write_char('a');
  1541  0C42  3061               	movlw	97
  1542  0C43  160A  118A  2440  120A  158A  	fcall	_write_char
  1543                           
  1544                           ;mainLogic.c: 40:     write_char('t');
  1545  0C48  3074               	movlw	116
  1546  0C49  160A  118A  2440  120A  158A  	fcall	_write_char
  1547                           
  1548                           ;mainLogic.c: 41:     write_char('e');
  1549  0C4E  3065               	movlw	101
  1550  0C4F  160A  118A  2440  120A  158A  	fcall	_write_char
  1551                           
  1552                           ;mainLogic.c: 42:     write_char(':');
  1553  0C54  303A               	movlw	58
  1554  0C55  160A  118A  2440  120A  158A  	fcall	_write_char
  1555                           
  1556                           ;mainLogic.c: 43:     write_char(' ');
  1557  0C5A  3020               	movlw	32
  1558  0C5B  160A  118A  2440  120A  158A  	fcall	_write_char
  1559                           
  1560                           ;mainLogic.c: 45:     display_date();
  1561  0C60  120A  158A  202D  120A  158A  	fcall	_display_date
  1562                           
  1563                           ;mainLogic.c: 47:     write_cmd(0x88);
  1564  0C65  3088               	movlw	136
  1565  0C66  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1566                           
  1567                           ;mainLogic.c: 48:     write_char('T');
  1568  0C6B  3054               	movlw	84
  1569  0C6C  160A  118A  2440  120A  158A  	fcall	_write_char
  1570                           
  1571                           ;mainLogic.c: 49:     write_char('i');
  1572  0C71  3069               	movlw	105
  1573  0C72  160A  118A  2440  120A  158A  	fcall	_write_char
  1574                           
  1575                           ;mainLogic.c: 50:     write_char('m');
  1576  0C77  306D               	movlw	109
  1577  0C78  160A  118A  2440  120A  158A  	fcall	_write_char
  1578                           
  1579                           ;mainLogic.c: 51:     write_char('e');
  1580  0C7D  3065               	movlw	101
  1581  0C7E  160A  118A  2440  120A  158A  	fcall	_write_char
  1582                           
  1583                           ;mainLogic.c: 52:     write_char(':');
  1584  0C83  303A               	movlw	58
  1585  0C84  160A  118A  2440  120A  158A  	fcall	_write_char
  1586                           
  1587                           ;mainLogic.c: 53:     display_clock();
  1588  0C89  120A  158A  20CA  120A  158A  	fcall	_display_clock
  1589                           
  1590                           ;mainLogic.c: 54:     thermometer_threshhold_settings();
  1591  0C8E  120A  158A  2592  120A  158A  	fcall	_thermometer_threshhold_settings
  1592                           
  1593                           ;mainLogic.c: 55:     date_settings();
  1594  0C93  120A  118A  2387  120A  158A  	fcall	_date_settings
  1595                           
  1596                           ;mainLogic.c: 56:     time_settings();
  1597  0C98  120A  118A  2071  120A  158A  	fcall	_time_settings
  1598                           
  1599                           ;mainLogic.c: 57:     write_cmd(0x98);
  1600  0C9D  3098               	movlw	152
  1601  0C9E  120A  118A  2006  120A  158A  	fcall	_write_cmd
  1602                           
  1603                           ;mainLogic.c: 59:      if((temp_high+'0')<= 1 && (temp_low + '0') < 8){
  1604  0CA3  0849               	movf	_temp_high,w
  1605  0CA4  3E30               	addlw	48
  1606  0CA5  00E8               	movwf	??_main
  1607  0CA6  3000               	movlw	0
  1608  0CA7  1803               	skipnc
  1609  0CA8  3001               	movlw	1
  1610  0CA9  00E9               	movwf	??_main+1
  1611  0CAA  3000               	movlw	0
  1612  0CAB  0269               	subwf	??_main+1,w
  1613  0CAC  3002               	movlw	2
  1614  0CAD  1903               	skipnz
  1615  0CAE  0268               	subwf	??_main,w
  1616  0CAF  1803               	skipnc
  1617  0CB0  2CEB               	goto	l4713
  1618  0CB1  084A               	movf	_temp_low,w
  1619  0CB2  3E30               	addlw	48
  1620  0CB3  00E8               	movwf	??_main
  1621  0CB4  3000               	movlw	0
  1622  0CB5  1803               	skipnc
  1623  0CB6  3001               	movlw	1
  1624  0CB7  00E9               	movwf	??_main+1
  1625  0CB8  3000               	movlw	0
  1626  0CB9  0269               	subwf	??_main+1,w
  1627  0CBA  3008               	movlw	8
  1628  0CBB  1903               	skipnz
  1629  0CBC  0268               	subwf	??_main,w
  1630  0CBD  1803               	skipnc
  1631  0CBE  2CEB               	goto	l4713
  1632                           
  1633                           ;mainLogic.c: 60:     alarm__ = set_lower_threshold(var1,var2);
  1634  0CBF  084D               	movf	_var1,w
  1635  0CC0  00E8               	movwf	??_main
  1636  0CC1  01E9               	clrf	??_main+1
  1637  0CC2  0868               	movf	??_main,w
  1638  0CC3  00F3               	movwf	set_lower_threshold@upper_val
  1639  0CC4  0869               	movf	??_main+1,w
  1640  0CC5  00F4               	movwf	set_lower_threshold@upper_val+1
  1641  0CC6  084C               	movf	_var2,w
  1642  0CC7  00EA               	movwf	??_main+2
  1643  0CC8  01EB               	clrf	??_main+3
  1644  0CC9  086A               	movf	??_main+2,w
  1645  0CCA  00F5               	movwf	set_lower_threshold@lower_val
  1646  0CCB  086B               	movf	??_main+3,w
  1647  0CCC  00F6               	movwf	set_lower_threshold@lower_val+1
  1648  0CCD  160A  118A  26FA  120A  158A  	fcall	_set_lower_threshold
  1649  0CD2  00EC               	movwf	??_main+4
  1650  0CD3  086C               	movf	??_main+4,w
  1651  0CD4  00CB               	movwf	_alarm__
  1652                           
  1653                           ;mainLogic.c: 61:     alarm__ = set_upper_threshold(var1,var2);
  1654  0CD5  084D               	movf	_var1,w
  1655  0CD6  00E8               	movwf	??_main
  1656  0CD7  01E9               	clrf	??_main+1
  1657  0CD8  0868               	movf	??_main,w
  1658  0CD9  00F3               	movwf	set_upper_threshold@upper_val
  1659  0CDA  0869               	movf	??_main+1,w
  1660  0CDB  00F4               	movwf	set_upper_threshold@upper_val+1
  1661  0CDC  084C               	movf	_var2,w
  1662  0CDD  00EA               	movwf	??_main+2
  1663  0CDE  01EB               	clrf	??_main+3
  1664  0CDF  086A               	movf	??_main+2,w
  1665  0CE0  00F5               	movwf	set_upper_threshold@lower_val
  1666  0CE1  086B               	movf	??_main+3,w
  1667  0CE2  00F6               	movwf	set_upper_threshold@lower_val+1
  1668  0CE3  120A  118A  201D  120A  158A  	fcall	_set_upper_threshold
  1669  0CE8  00EC               	movwf	??_main+4
  1670  0CE9  086C               	movf	??_main+4,w
  1671  0CEA  00CB               	movwf	_alarm__
  1672  0CEB                     l4713:	
  1673                           
  1674                           ;mainLogic.c: 64:     if((temp_high+'0') >= 1 && (temp_low + '0') >= 8){
  1675  0CEB  0849               	movf	_temp_high,w
  1676  0CEC  3E30               	addlw	48
  1677  0CED  00E8               	movwf	??_main
  1678  0CEE  3000               	movlw	0
  1679  0CEF  1803               	skipnc
  1680  0CF0  3001               	movlw	1
  1681  0CF1  00E9               	movwf	??_main+1
  1682  0CF2  0868               	movf	??_main,w
  1683  0CF3  0469               	iorwf	??_main+1,w
  1684  0CF4  1903               	btfsc	3,2
  1685  0CF5  2D24               	goto	l155
  1686  0CF6  084A               	movf	_temp_low,w
  1687  0CF7  3E30               	addlw	48
  1688  0CF8  00E8               	movwf	??_main
  1689  0CF9  3000               	movlw	0
  1690  0CFA  1803               	skipnc
  1691  0CFB  3001               	movlw	1
  1692  0CFC  00E9               	movwf	??_main+1
  1693  0CFD  3000               	movlw	0
  1694  0CFE  0269               	subwf	??_main+1,w
  1695  0CFF  3008               	movlw	8
  1696  0D00  1903               	skipnz
  1697  0D01  0268               	subwf	??_main,w
  1698  0D02  1C03               	skipc
  1699  0D03  2D24               	goto	l155
  1700                           
  1701                           ;mainLogic.c: 65:     alarm__ = set_lower_threshold(var_night_high,var_night_low);
  1702  0D04  0835               	movf	_var_night_high+1,w
  1703  0D05  00F4               	movwf	set_lower_threshold@upper_val+1
  1704  0D06  0834               	movf	_var_night_high,w
  1705  0D07  00F3               	movwf	set_lower_threshold@upper_val
  1706  0D08  0837               	movf	_var_night_low+1,w
  1707  0D09  00F6               	movwf	set_lower_threshold@lower_val+1
  1708  0D0A  0836               	movf	_var_night_low,w
  1709  0D0B  00F5               	movwf	set_lower_threshold@lower_val
  1710  0D0C  160A  118A  26FA  120A  158A  	fcall	_set_lower_threshold
  1711  0D11  00E8               	movwf	??_main
  1712  0D12  0868               	movf	??_main,w
  1713  0D13  00CB               	movwf	_alarm__
  1714                           
  1715                           ;mainLogic.c: 66:     alarm__ = set_upper_threshold(var_night_high,var_night_low);
  1716  0D14  0835               	movf	_var_night_high+1,w
  1717  0D15  00F4               	movwf	set_upper_threshold@upper_val+1
  1718  0D16  0834               	movf	_var_night_high,w
  1719  0D17  00F3               	movwf	set_upper_threshold@upper_val
  1720  0D18  0837               	movf	_var_night_low+1,w
  1721  0D19  00F6               	movwf	set_upper_threshold@lower_val+1
  1722  0D1A  0836               	movf	_var_night_low,w
  1723  0D1B  00F5               	movwf	set_upper_threshold@lower_val
  1724  0D1C  120A  118A  201D  120A  158A  	fcall	_set_upper_threshold
  1725  0D21  00E8               	movwf	??_main
  1726  0D22  0868               	movf	??_main,w
  1727  0D23  00CB               	movwf	_alarm__
  1728  0D24                     l155:	
  1729                           ;mainLogic.c: 67:     }
  1730                           
  1731                           
  1732                           ;mainLogic.c: 68:     alarm__ = reset_alarm();
  1733  0D24  120A  158A  2001  120A  158A  	fcall	_reset_alarm
  1734  0D29  00E8               	movwf	??_main
  1735  0D2A  0868               	movf	??_main,w
  1736  0D2B  00CB               	movwf	_alarm__
  1737                           
  1738                           ;mainLogic.c: 69:     set_beep_threshhold(alarm__);
  1739  0D2C  084B               	movf	_alarm__,w
  1740  0D2D  160A  118A  2457  120A  158A  	fcall	_set_beep_threshhold
  1741                           
  1742                           ;mainLogic.c: 70:     write_char(' ');
  1743  0D32  3020               	movlw	32
  1744  0D33  160A  118A  2440  120A  158A  	fcall	_write_char
  1745                           
  1746                           ;mainLogic.c: 71:     write_char('H');
  1747  0D38  3048               	movlw	72
  1748  0D39  160A  118A  2440  120A  158A  	fcall	_write_char
  1749                           
  1750                           ;mainLogic.c: 72:     write_char(':');
  1751  0D3E  303A               	movlw	58
  1752  0D3F  160A  118A  2440  120A  158A  	fcall	_write_char
  1753                           
  1754                           ;mainLogic.c: 73:     write_char(heater_state);
  1755  0D44  084F               	movf	_heater_state,w
  1756  0D45  160A  118A  2440  120A  158A  	fcall	_write_char
  1757                           
  1758                           ;mainLogic.c: 74:     write_char('C');
  1759  0D4A  3043               	movlw	67
  1760  0D4B  160A  118A  2440  120A  158A  	fcall	_write_char
  1761                           
  1762                           ;mainLogic.c: 75:     write_char(':');
  1763  0D50  303A               	movlw	58
  1764  0D51  160A  118A  2440  120A  158A  	fcall	_write_char
  1765                           
  1766                           ;mainLogic.c: 76:     write_char(cooler_state);
  1767  0D56  084E               	movf	_cooler_state,w
  1768  0D57  160A  118A  2440  120A  158A  	fcall	_write_char
  1769                           
  1770                           ;mainLogic.c: 77:     for(int i = 0; i < 3; i++)
  1771  0D5C  01ED               	clrf	main@i
  1772  0D5D  01EE               	clrf	main@i+1
  1773  0D5E                     l4725:	
  1774                           
  1775                           ;mainLogic.c: 78:     write_char(' ');
  1776  0D5E  3020               	movlw	32
  1777  0D5F  160A  118A  2440  120A  158A  	fcall	_write_char
  1778  0D64  3001               	movlw	1
  1779  0D65  07ED               	addwf	main@i,f
  1780  0D66  1803               	skipnc
  1781  0D67  0AEE               	incf	main@i+1,f
  1782  0D68  3000               	movlw	0
  1783  0D69  07EE               	addwf	main@i+1,f
  1784  0D6A  086E               	movf	main@i+1,w
  1785  0D6B  3A80               	xorlw	128
  1786  0D6C  00FF               	movwf	127
  1787  0D6D  3080               	movlw	128
  1788  0D6E  027F               	subwf	127,w
  1789  0D6F  1D03               	skipz
  1790  0D70  2D73               	goto	u3965
  1791  0D71  3003               	movlw	3
  1792  0D72  026D               	subwf	main@i,w
  1793  0D73                     u3965:	
  1794  0D73  1C03               	skipc
  1795  0D74  2D5E               	goto	l4725
  1796                           
  1797                           ;mainLogic.c: 79:     day_counter = modulus_func(day_low,8);
  1798  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0D77  0829               	movf	_day_low+1,w
  1801  0D78  00F8               	movwf	modulus_func@x+1
  1802  0D79  0828               	movf	_day_low,w
  1803  0D7A  00F7               	movwf	modulus_func@x
  1804  0D7B  3008               	movlw	8
  1805  0D7C  00F9               	movwf	modulus_func@y
  1806  0D7D  3000               	movlw	0
  1807  0D7E  00FA               	movwf	modulus_func@y+1
  1808  0D7F  160A  118A  23CF  120A  158A  	fcall	_modulus_func
  1809  0D84  0878               	movf	?_modulus_func+1,w
  1810  0D85  00A1               	movwf	_day_counter+1
  1811  0D86  0877               	movf	?_modulus_func,w
  1812  0D87  00A0               	movwf	_day_counter
  1813                           
  1814                           ;mainLogic.c: 80:     display_day(day_counter);
  1815  0D88  0821               	movf	_day_counter+1,w
  1816  0D89  00F4               	movwf	display_day@num+1
  1817  0D8A  0820               	movf	_day_counter,w
  1818  0D8B  00F3               	movwf	display_day@num
  1819  0D8C  160A  118A  2787  120A  158A  	fcall	_display_day
  1820  0D91  2C03               	goto	l4651
  1821  0D92                     __end_of_main:	
  1822                           
  1823                           	psect	text1
  1824  0071                     __ptext1:	
  1825 ;; *************** function _time_settings *****************
  1826 ;; Defined at:
  1827 ;;		line 179 in file "Button_src.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 300/0
  1838 ;;		On exit  : 300/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1841 ;;      Params:         0       0       0       0       0
  1842 ;;      Locals:         0       0       0       0       0
  1843 ;;      Temps:          0       3       0       0       0
  1844 ;;      Totals:         0       3       0       0       0
  1845 ;;Total ram usage:        3 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    3
  1848 ;; This function calls:
  1849 ;;		_button_delay
  1850 ;;		_incrementor
  1851 ;;		_modulus_func
  1852 ;;		_set_time
  1853 ;;		_time_date_delimiter
  1854 ;;		_time_date_hex_terminator
  1855 ;;		_write_char
  1856 ;;		_write_cmd
  1857 ;; This function is called by:
  1858 ;;		_main
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           
  1863                           ;psect for function _time_settings
  1864  0071                     _time_settings:	
  1865                           
  1866                           ;Button_src.c: 180:  RC0 = 1;
  1867                           
  1868                           ;incstack = 0
  1869                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1870  0071  1407               	bsf	7,0	;volatile
  1871                           
  1872                           ;Button_src.c: 181:  RC1 = 1;
  1873  0072  1487               	bsf	7,1	;volatile
  1874                           
  1875                           ;Button_src.c: 182:  RC2 = 0;
  1876  0073  1107               	bcf	7,2	;volatile
  1877                           
  1878                           ;Button_src.c: 183:  RC3 = 1;
  1879  0074  1587               	bsf	7,3	;volatile
  1880                           
  1881                           ;Button_src.c: 184:   if (RC4 == 0){
  1882  0075  1A07               	btfsc	7,4	;volatile
  1883  0076  0008               	return
  1884                           
  1885                           ;Button_src.c: 185:       write_cmd(0x1);
  1886  0077  3001               	movlw	1
  1887  0078  120A  118A  2006  120A  118A  	fcall	_write_cmd
  1888  007D                     l705:	
  1889                           ;Button_src.c: 186:       for(;;){
  1890                           
  1891                           
  1892                           ;Button_src.c: 187:             write_cmd(0x80);
  1893  007D  3080               	movlw	128
  1894  007E  120A  118A  2006  120A  118A  	fcall	_write_cmd
  1895                           
  1896                           ;Button_src.c: 188:             write_char('T');
  1897  0083  3054               	movlw	84
  1898  0084  160A  118A  2440  120A  118A  	fcall	_write_char
  1899                           
  1900                           ;Button_src.c: 189:             write_char('i');
  1901  0089  3069               	movlw	105
  1902  008A  160A  118A  2440  120A  118A  	fcall	_write_char
  1903                           
  1904                           ;Button_src.c: 190:             write_char('m');
  1905  008F  306D               	movlw	109
  1906  0090  160A  118A  2440  120A  118A  	fcall	_write_char
  1907                           
  1908                           ;Button_src.c: 191:             write_char('e');
  1909  0095  3065               	movlw	101
  1910  0096  160A  118A  2440  120A  118A  	fcall	_write_char
  1911                           
  1912                           ;Button_src.c: 192:             write_char('_');
  1913  009B  305F               	movlw	95
  1914  009C  160A  118A  2440  120A  118A  	fcall	_write_char
  1915                           
  1916                           ;Button_src.c: 193:             write_char('S');
  1917  00A1  3053               	movlw	83
  1918  00A2  160A  118A  2440  120A  118A  	fcall	_write_char
  1919                           
  1920                           ;Button_src.c: 194:             write_char('e');
  1921  00A7  3065               	movlw	101
  1922  00A8  160A  118A  2440  120A  118A  	fcall	_write_char
  1923                           
  1924                           ;Button_src.c: 195:             write_char('t');
  1925  00AD  3074               	movlw	116
  1926  00AE  160A  118A  2440  120A  118A  	fcall	_write_char
  1927                           
  1928                           ;Button_src.c: 196:             write_char('t');
  1929  00B3  3074               	movlw	116
  1930  00B4  160A  118A  2440  120A  118A  	fcall	_write_char
  1931                           
  1932                           ;Button_src.c: 197:             write_char('i');
  1933  00B9  3069               	movlw	105
  1934  00BA  160A  118A  2440  120A  118A  	fcall	_write_char
  1935                           
  1936                           ;Button_src.c: 198:             write_char('n');
  1937  00BF  306E               	movlw	110
  1938  00C0  160A  118A  2440  120A  118A  	fcall	_write_char
  1939                           
  1940                           ;Button_src.c: 199:             write_char('g');
  1941  00C5  3067               	movlw	103
  1942  00C6  160A  118A  2440  120A  118A  	fcall	_write_char
  1943                           
  1944                           ;Button_src.c: 200:             write_char('s');
  1945  00CB  3073               	movlw	115
  1946  00CC  160A  118A  2440  120A  118A  	fcall	_write_char
  1947                           
  1948                           ;Button_src.c: 202:             RC0 = 1;
  1949  00D1  1407               	bsf	7,0	;volatile
  1950                           
  1951                           ;Button_src.c: 203:             RC1 = 0;
  1952  00D2  1087               	bcf	7,1	;volatile
  1953                           
  1954                           ;Button_src.c: 204:             RC2 = 1;
  1955  00D3  1507               	bsf	7,2	;volatile
  1956                           
  1957                           ;Button_src.c: 205:             RC3 = 1;
  1958  00D4  1587               	bsf	7,3	;volatile
  1959                           
  1960                           ;Button_src.c: 207:             if(RC7 == 0 && b =='x'){
  1961  00D5  1B87               	btfsc	7,7	;volatile
  1962  00D6  2948               	goto	l4371
  1963  00D7  3078               	movlw	120
  1964  00D8  0647               	xorwf	_b,w
  1965  00D9  1D03               	btfss	3,2
  1966  00DA  2948               	goto	l4371
  1967                           
  1968                           ;Button_src.c: 208:                 if(stats == 1)
  1969  00DB  0324               	decf	_stats,w
  1970  00DC  0425               	iorwf	_stats+1,w
  1971  00DD  1D03               	btfss	3,2
  1972  00DE  28E3               	goto	l707
  1973                           
  1974                           ;Button_src.c: 209:                    a++;
  1975  00DF  3001               	movlw	1
  1976  00E0  00E3               	movwf	??_time_settings
  1977  00E1  0863               	movf	??_time_settings,w
  1978  00E2  07C8               	addwf	_a,f
  1979  00E3                     l707:	
  1980                           
  1981                           ;Button_src.c: 210:                 if(stats == 0){
  1982  00E3  0824               	movf	_stats,w
  1983  00E4  0425               	iorwf	_stats+1,w
  1984  00E5  1D03               	btfss	3,2
  1985  00E6  28EB               	goto	l708
  1986                           
  1987                           ;Button_src.c: 211:                    stats = 1;
  1988  00E7  3001               	movlw	1
  1989  00E8  00A4               	movwf	_stats
  1990  00E9  3000               	movlw	0
  1991  00EA  00A5               	movwf	_stats+1
  1992  00EB                     l708:	
  1993                           ;Button_src.c: 212:                 }
  1994                           
  1995                           
  1996                           ;Button_src.c: 214:                     x++ ;
  1997  00EB  3001               	movlw	1
  1998  00EC  07AE               	addwf	_x,f
  1999  00ED  1803               	skipnc
  2000  00EE  0AAF               	incf	_x+1,f
  2001  00EF  3000               	movlw	0
  2002  00F0  07AF               	addwf	_x+1,f
  2003                           
  2004                           ;Button_src.c: 215:                     x = modulus_func(x,10);
  2005  00F1  082F               	movf	_x+1,w
  2006  00F2  00F8               	movwf	modulus_func@x+1
  2007  00F3  082E               	movf	_x,w
  2008  00F4  00F7               	movwf	modulus_func@x
  2009  00F5  300A               	movlw	10
  2010  00F6  00F9               	movwf	modulus_func@y
  2011  00F7  3000               	movlw	0
  2012  00F8  00FA               	movwf	modulus_func@y+1
  2013  00F9  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  2014  00FE  0878               	movf	?_modulus_func+1,w
  2015  00FF  00AF               	movwf	_x+1
  2016  0100  0877               	movf	?_modulus_func,w
  2017  0101  00AE               	movwf	_x
  2018                           
  2019                           ;Button_src.c: 216:                     if (p == 1){
  2020  0102  0322               	decf	_p,w
  2021  0103  0423               	iorwf	_p+1,w
  2022  0104  1D03               	btfss	3,2
  2023  0105  291F               	goto	l4357
  2024                           
  2025                           ;Button_src.c: 217:                         y = incrementor(y,x,'0');
  2026  0106  082D               	movf	_y+1,w
  2027  0107  00DF               	movwf	incrementor@upper_val+1
  2028  0108  082C               	movf	_y,w
  2029  0109  00DE               	movwf	incrementor@upper_val
  2030  010A  082F               	movf	_x+1,w
  2031  010B  00E1               	movwf	incrementor@lower_val+1
  2032  010C  082E               	movf	_x,w
  2033  010D  00E0               	movwf	incrementor@lower_val
  2034  010E  3030               	movlw	48
  2035  010F  00E3               	movwf	??_time_settings
  2036  0110  0863               	movf	??_time_settings,w
  2037  0111  00E2               	movwf	incrementor@z
  2038  0112  160A  118A  24FC  120A  118A  	fcall	_incrementor
  2039  0117  00E4               	movwf	??_time_settings+1
  2040  0118  01E5               	clrf	??_time_settings+2
  2041  0119  0864               	movf	??_time_settings+1,w
  2042  011A  00AC               	movwf	_y
  2043  011B  0865               	movf	??_time_settings+2,w
  2044  011C  00AD               	movwf	_y+1
  2045                           
  2046                           ;Button_src.c: 218:                         p = 0;
  2047  011D  01A2               	clrf	_p
  2048  011E  01A3               	clrf	_p+1
  2049  011F                     l4357:	
  2050                           
  2051                           ;Button_src.c: 220:                     if (x == 9){
  2052  011F  3009               	movlw	9
  2053  0120  062E               	xorwf	_x,w
  2054  0121  042F               	iorwf	_x+1,w
  2055  0122  1D03               	btfss	3,2
  2056  0123  2928               	goto	l4361
  2057                           
  2058                           ;Button_src.c: 221:                         p = 1;
  2059  0124  3001               	movlw	1
  2060  0125  00A2               	movwf	_p
  2061  0126  3000               	movlw	0
  2062  0127  00A3               	movwf	_p+1
  2063  0128                     l4361:	
  2064                           
  2065                           ;Button_src.c: 225:                     a = time_date_hex_terminator(a,'T');
  2066  0128  3054               	movlw	84
  2067  0129  00E3               	movwf	??_time_settings
  2068  012A  0863               	movf	??_time_settings,w
  2069  012B  00F0               	movwf	time_date_hex_terminator@limiter
  2070  012C  0848               	movf	_a,w
  2071  012D  160A  118A  23B1  120A  118A  	fcall	_time_date_hex_terminator
  2072  0132  00E4               	movwf	??_time_settings+1
  2073  0133  0864               	movf	??_time_settings+1,w
  2074  0134  00C8               	movwf	_a
  2075                           
  2076                           ;Button_src.c: 226:                     if(y == 2 && x == 4){
  2077  0135  3002               	movlw	2
  2078  0136  062C               	xorwf	_y,w
  2079  0137  042D               	iorwf	_y+1,w
  2080  0138  1D03               	btfss	3,2
  2081  0139  2943               	goto	l4369
  2082  013A  3004               	movlw	4
  2083  013B  062E               	xorwf	_x,w
  2084  013C  042F               	iorwf	_x+1,w
  2085  013D  1D03               	btfss	3,2
  2086  013E  2943               	goto	l4369
  2087                           
  2088                           ;Button_src.c: 227:                         x = 0;
  2089  013F  01AE               	clrf	_x
  2090  0140  01AF               	clrf	_x+1
  2091                           
  2092                           ;Button_src.c: 228:                         y = 0;
  2093  0141  01AC               	clrf	_y
  2094  0142  01AD               	clrf	_y+1
  2095  0143                     l4369:	
  2096                           
  2097                           ;Button_src.c: 230:                     button_delay();
  2098  0143  160A  118A  23F0  120A  118A  	fcall	_button_delay
  2099  0148                     l4371:	
  2100                           
  2101                           ;Button_src.c: 232:             if(RC7==0 && b == 'y'){
  2102  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2103  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2104  014A  1B87               	btfsc	7,7	;volatile
  2105  014B  29C6               	goto	l4405
  2106  014C  3079               	movlw	121
  2107  014D  0647               	xorwf	_b,w
  2108  014E  1D03               	btfss	3,2
  2109  014F  29C6               	goto	l4405
  2110                           
  2111                           ;Button_src.c: 233:                  if(stats == 1)
  2112  0150  0324               	decf	_stats,w
  2113  0151  0425               	iorwf	_stats+1,w
  2114  0152  1D03               	btfss	3,2
  2115  0153  2958               	goto	l713
  2116                           
  2117                           ;Button_src.c: 234:                    c++;
  2118  0154  3001               	movlw	1
  2119  0155  00E3               	movwf	??_time_settings
  2120  0156  0863               	movf	??_time_settings,w
  2121  0157  07C6               	addwf	_c,f
  2122  0158                     l713:	
  2123                           
  2124                           ;Button_src.c: 235:                 if(stats == 0){
  2125  0158  0824               	movf	_stats,w
  2126  0159  0425               	iorwf	_stats+1,w
  2127  015A  1D03               	btfss	3,2
  2128  015B  2960               	goto	l714
  2129                           
  2130                           ;Button_src.c: 236:                     stats = 1;
  2131  015C  3001               	movlw	1
  2132  015D  00A4               	movwf	_stats
  2133  015E  3000               	movlw	0
  2134  015F  00A5               	movwf	_stats+1
  2135  0160                     l714:	
  2136                           ;Button_src.c: 237:                 }
  2137                           
  2138                           
  2139                           ;Button_src.c: 239:                     t++;
  2140  0160  3001               	movlw	1
  2141  0161  07B2               	addwf	_t,f
  2142  0162  1803               	skipnc
  2143  0163  0AB3               	incf	_t+1,f
  2144  0164  3000               	movlw	0
  2145  0165  07B3               	addwf	_t+1,f
  2146                           
  2147                           ;Button_src.c: 240:                     t = modulus_func(t,10);
  2148  0166  0833               	movf	_t+1,w
  2149  0167  00F8               	movwf	modulus_func@x+1
  2150  0168  0832               	movf	_t,w
  2151  0169  00F7               	movwf	modulus_func@x
  2152  016A  300A               	movlw	10
  2153  016B  00F9               	movwf	modulus_func@y
  2154  016C  3000               	movlw	0
  2155  016D  00FA               	movwf	modulus_func@y+1
  2156  016E  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  2157  0173  0878               	movf	?_modulus_func+1,w
  2158  0174  00B3               	movwf	_t+1
  2159  0175  0877               	movf	?_modulus_func,w
  2160  0176  00B2               	movwf	_t
  2161                           
  2162                           ;Button_src.c: 241:                       if (p == 1){
  2163  0177  0322               	decf	_p,w
  2164  0178  0423               	iorwf	_p+1,w
  2165  0179  1D03               	btfss	3,2
  2166  017A  2994               	goto	l4389
  2167                           
  2168                           ;Button_src.c: 242:                         w = incrementor(w,t,'0');
  2169  017B  0831               	movf	_w+1,w
  2170  017C  00DF               	movwf	incrementor@upper_val+1
  2171  017D  0830               	movf	_w,w
  2172  017E  00DE               	movwf	incrementor@upper_val
  2173  017F  0833               	movf	_t+1,w
  2174  0180  00E1               	movwf	incrementor@lower_val+1
  2175  0181  0832               	movf	_t,w
  2176  0182  00E0               	movwf	incrementor@lower_val
  2177  0183  3030               	movlw	48
  2178  0184  00E3               	movwf	??_time_settings
  2179  0185  0863               	movf	??_time_settings,w
  2180  0186  00E2               	movwf	incrementor@z
  2181  0187  160A  118A  24FC  120A  118A  	fcall	_incrementor
  2182  018C  00E4               	movwf	??_time_settings+1
  2183  018D  01E5               	clrf	??_time_settings+2
  2184  018E  0864               	movf	??_time_settings+1,w
  2185  018F  00B0               	movwf	_w
  2186  0190  0865               	movf	??_time_settings+2,w
  2187  0191  00B1               	movwf	_w+1
  2188                           
  2189                           ;Button_src.c: 243:                         p = 0;
  2190  0192  01A2               	clrf	_p
  2191  0193  01A3               	clrf	_p+1
  2192  0194                     l4389:	
  2193                           
  2194                           ;Button_src.c: 245:                     if (t == 9){
  2195  0194  3009               	movlw	9
  2196  0195  0632               	xorwf	_t,w
  2197  0196  0433               	iorwf	_t+1,w
  2198  0197  1D03               	btfss	3,2
  2199  0198  299D               	goto	l4393
  2200                           
  2201                           ;Button_src.c: 246:                         p = 1;
  2202  0199  3001               	movlw	1
  2203  019A  00A2               	movwf	_p
  2204  019B  3000               	movlw	0
  2205  019C  00A3               	movwf	_p+1
  2206  019D                     l4393:	
  2207                           
  2208                           ;Button_src.c: 248:                     w = incrementor(w,t,'9');
  2209  019D  0831               	movf	_w+1,w
  2210  019E  00DF               	movwf	incrementor@upper_val+1
  2211  019F  0830               	movf	_w,w
  2212  01A0  00DE               	movwf	incrementor@upper_val
  2213  01A1  0833               	movf	_t+1,w
  2214  01A2  00E1               	movwf	incrementor@lower_val+1
  2215  01A3  0832               	movf	_t,w
  2216  01A4  00E0               	movwf	incrementor@lower_val
  2217  01A5  3039               	movlw	57
  2218  01A6  00E3               	movwf	??_time_settings
  2219  01A7  0863               	movf	??_time_settings,w
  2220  01A8  00E2               	movwf	incrementor@z
  2221  01A9  160A  118A  24FC  120A  118A  	fcall	_incrementor
  2222  01AE  00E4               	movwf	??_time_settings+1
  2223  01AF  01E5               	clrf	??_time_settings+2
  2224  01B0  0864               	movf	??_time_settings+1,w
  2225  01B1  00B0               	movwf	_w
  2226  01B2  0865               	movf	??_time_settings+2,w
  2227  01B3  00B1               	movwf	_w+1
  2228                           
  2229                           ;Button_src.c: 249:                     if(c == (0x59 + 1)){
  2230  01B4  305A               	movlw	90
  2231  01B5  0646               	xorwf	_c,w
  2232  01B6  1903               	btfsc	3,2
  2233                           
  2234                           ;Button_src.c: 250:                         c = 0x00;
  2235  01B7  01C6               	clrf	_c
  2236                           
  2237                           ;Button_src.c: 252:                     if(w == 6){
  2238  01B8  3006               	movlw	6
  2239  01B9  0630               	xorwf	_w,w
  2240  01BA  0431               	iorwf	_w+1,w
  2241  01BB  1D03               	btfss	3,2
  2242  01BC  29C1               	goto	l4403
  2243                           
  2244                           ;Button_src.c: 253:                         w = 0;
  2245  01BD  01B0               	clrf	_w
  2246  01BE  01B1               	clrf	_w+1
  2247                           
  2248                           ;Button_src.c: 254:                         t = 0;
  2249  01BF  01B2               	clrf	_t
  2250  01C0  01B3               	clrf	_t+1
  2251  01C1                     l4403:	
  2252                           
  2253                           ;Button_src.c: 256:                     button_delay();
  2254  01C1  160A  118A  23F0  120A  118A  	fcall	_button_delay
  2255  01C6                     l4405:	
  2256                           
  2257                           ;Button_src.c: 259:              write_cmd(0x88);
  2258  01C6  3088               	movlw	136
  2259  01C7  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2260                           
  2261                           ;Button_src.c: 260:               if(stats==0){
  2262  01CC  0824               	movf	_stats,w
  2263  01CD  0425               	iorwf	_stats+1,w
  2264  01CE  1D03               	btfss	3,2
  2265  01CF  29D8               	goto	l4411
  2266                           
  2267                           ;Button_src.c: 261:                   table[2] = prev_hex_hours;
  2268  01D0  0840               	movf	_prev_hex_hours,w
  2269  01D1  00E3               	movwf	??_time_settings
  2270  01D2  0863               	movf	??_time_settings,w
  2271  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2272  01D4  00AF               	movwf	(_table^(0+128)+2)
  2273                           
  2274                           ;Button_src.c: 262:                   table[1] = prev_hex_mins;
  2275  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2276  01D6  083F               	movf	_prev_hex_mins,w
  2277  01D7  29E3               	goto	L1
  2278  01D8                     l4411:	
  2279                           ;Button_src.c: 263:               }
  2280                           
  2281  01D8  0324               	decf	_stats,w
  2282  01D9  0425               	iorwf	_stats+1,w
  2283  01DA  1D03               	btfss	3,2
  2284  01DB  29E7               	goto	l4415
  2285                           
  2286                           ;Button_src.c: 265:               {;Button_src.c: 266:                  table[2]= a;
  2287  01DC  0848               	movf	_a,w
  2288  01DD  00E3               	movwf	??_time_settings
  2289  01DE  0863               	movf	??_time_settings,w
  2290  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2291  01E0  00AF               	movwf	(_table^(0+128)+2)
  2292                           
  2293                           ;Button_src.c: 267:                  table[1] = c;
  2294  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2295  01E2  0846               	movf	_c,w
  2296  01E3                     L1:	
  2297  01E3  00E3               	movwf	??_time_settings
  2298  01E4  0863               	movf	??_time_settings,w
  2299  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2300  01E6  00AE               	movwf	(_table^(0+128)+1)
  2301  01E7                     l4415:	
  2302                           
  2303                           ;Button_src.c: 271:                     a = time_date_delimiter(a,0x11,'9',4);
  2304  01E7  3011               	movlw	17
  2305  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2306  01E9  00E3               	movwf	??_time_settings
  2307  01EA  0863               	movf	??_time_settings,w
  2308  01EB  00F0               	movwf	time_date_delimiter@hex
  2309  01EC  3039               	movlw	57
  2310  01ED  00E4               	movwf	??_time_settings+1
  2311  01EE  0864               	movf	??_time_settings+1,w
  2312  01EF  00F1               	movwf	time_date_delimiter@limiter
  2313  01F0  3004               	movlw	4
  2314  01F1  00F2               	movwf	time_date_delimiter@type
  2315  01F2  3000               	movlw	0
  2316  01F3  00F3               	movwf	time_date_delimiter@type+1
  2317  01F4  0848               	movf	_a,w
  2318  01F5  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2319  01FA  00E5               	movwf	??_time_settings+2
  2320  01FB  0865               	movf	??_time_settings+2,w
  2321  01FC  00C8               	movwf	_a
  2322                           
  2323                           ;Button_src.c: 272:                     a = time_date_delimiter(a,0x21,'J',4);
  2324  01FD  3021               	movlw	33
  2325  01FE  00E3               	movwf	??_time_settings
  2326  01FF  0863               	movf	??_time_settings,w
  2327  0200  00F0               	movwf	time_date_delimiter@hex
  2328  0201  304A               	movlw	74
  2329  0202  00E4               	movwf	??_time_settings+1
  2330  0203  0864               	movf	??_time_settings+1,w
  2331  0204  00F1               	movwf	time_date_delimiter@limiter
  2332  0205  3004               	movlw	4
  2333  0206  00F2               	movwf	time_date_delimiter@type
  2334  0207  3000               	movlw	0
  2335  0208  00F3               	movwf	time_date_delimiter@type+1
  2336  0209  0848               	movf	_a,w
  2337  020A  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2338  020F  00E5               	movwf	??_time_settings+2
  2339  0210  0865               	movf	??_time_settings+2,w
  2340  0211  00C8               	movwf	_a
  2341                           
  2342                           ;Button_src.c: 274:                     c = time_date_delimiter(c,0x11,'9',5);
  2343  0212  3011               	movlw	17
  2344  0213  00E3               	movwf	??_time_settings
  2345  0214  0863               	movf	??_time_settings,w
  2346  0215  00F0               	movwf	time_date_delimiter@hex
  2347  0216  3039               	movlw	57
  2348  0217  00E4               	movwf	??_time_settings+1
  2349  0218  0864               	movf	??_time_settings+1,w
  2350  0219  00F1               	movwf	time_date_delimiter@limiter
  2351  021A  3005               	movlw	5
  2352  021B  00F2               	movwf	time_date_delimiter@type
  2353  021C  3000               	movlw	0
  2354  021D  00F3               	movwf	time_date_delimiter@type+1
  2355  021E  0846               	movf	_c,w
  2356  021F  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2357  0224  00E5               	movwf	??_time_settings+2
  2358  0225  0865               	movf	??_time_settings+2,w
  2359  0226  00C6               	movwf	_c
  2360                           
  2361                           ;Button_src.c: 275:                     c = time_date_delimiter(c,0x21,'J',5);
  2362  0227  3021               	movlw	33
  2363  0228  00E3               	movwf	??_time_settings
  2364  0229  0863               	movf	??_time_settings,w
  2365  022A  00F0               	movwf	time_date_delimiter@hex
  2366  022B  304A               	movlw	74
  2367  022C  00E4               	movwf	??_time_settings+1
  2368  022D  0864               	movf	??_time_settings+1,w
  2369  022E  00F1               	movwf	time_date_delimiter@limiter
  2370  022F  3005               	movlw	5
  2371  0230  00F2               	movwf	time_date_delimiter@type
  2372  0231  3000               	movlw	0
  2373  0232  00F3               	movwf	time_date_delimiter@type+1
  2374  0233  0846               	movf	_c,w
  2375  0234  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2376  0239  00E5               	movwf	??_time_settings+2
  2377  023A  0865               	movf	??_time_settings+2,w
  2378  023B  00C6               	movwf	_c
  2379                           
  2380                           ;Button_src.c: 276:                     c = time_date_delimiter(c,0x31,'Y',5);
  2381  023C  3031               	movlw	49
  2382  023D  00E3               	movwf	??_time_settings
  2383  023E  0863               	movf	??_time_settings,w
  2384  023F  00F0               	movwf	time_date_delimiter@hex
  2385  0240  3059               	movlw	89
  2386  0241  00E4               	movwf	??_time_settings+1
  2387  0242  0864               	movf	??_time_settings+1,w
  2388  0243  00F1               	movwf	time_date_delimiter@limiter
  2389  0244  3005               	movlw	5
  2390  0245  00F2               	movwf	time_date_delimiter@type
  2391  0246  3000               	movlw	0
  2392  0247  00F3               	movwf	time_date_delimiter@type+1
  2393  0248  0846               	movf	_c,w
  2394  0249  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2395  024E  00E5               	movwf	??_time_settings+2
  2396  024F  0865               	movf	??_time_settings+2,w
  2397  0250  00C6               	movwf	_c
  2398                           
  2399                           ;Button_src.c: 277:                     c = time_date_delimiter(c,0x41,'j',5);
  2400  0251  3041               	movlw	65
  2401  0252  00E3               	movwf	??_time_settings
  2402  0253  0863               	movf	??_time_settings,w
  2403  0254  00F0               	movwf	time_date_delimiter@hex
  2404  0255  306A               	movlw	106
  2405  0256  00E4               	movwf	??_time_settings+1
  2406  0257  0864               	movf	??_time_settings+1,w
  2407  0258  00F1               	movwf	time_date_delimiter@limiter
  2408  0259  3005               	movlw	5
  2409  025A  00F2               	movwf	time_date_delimiter@type
  2410  025B  3000               	movlw	0
  2411  025C  00F3               	movwf	time_date_delimiter@type+1
  2412  025D  0846               	movf	_c,w
  2413  025E  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2414  0263  00E5               	movwf	??_time_settings+2
  2415  0264  0865               	movf	??_time_settings+2,w
  2416  0265  00C6               	movwf	_c
  2417                           
  2418                           ;Button_src.c: 278:                     c = time_date_delimiter(c,0x51,'z',5);
  2419  0266  3051               	movlw	81
  2420  0267  00E3               	movwf	??_time_settings
  2421  0268  0863               	movf	??_time_settings,w
  2422  0269  00F0               	movwf	time_date_delimiter@hex
  2423  026A  307A               	movlw	122
  2424  026B  00E4               	movwf	??_time_settings+1
  2425  026C  0864               	movf	??_time_settings+1,w
  2426  026D  00F1               	movwf	time_date_delimiter@limiter
  2427  026E  3005               	movlw	5
  2428  026F  00F2               	movwf	time_date_delimiter@type
  2429  0270  3000               	movlw	0
  2430  0271  00F3               	movwf	time_date_delimiter@type+1
  2431  0272  0846               	movf	_c,w
  2432  0273  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  2433  0278  00E5               	movwf	??_time_settings+2
  2434  0279  0865               	movf	??_time_settings+2,w
  2435  027A  00C6               	movwf	_c
  2436                           
  2437                           ;Button_src.c: 280:                   RC0 = 0;
  2438  027B  1007               	bcf	7,0	;volatile
  2439                           
  2440                           ;Button_src.c: 281:                   RC1 = 1;
  2441  027C  1487               	bsf	7,1	;volatile
  2442                           
  2443                           ;Button_src.c: 282:                   RC2 = 1;
  2444  027D  1507               	bsf	7,2	;volatile
  2445                           
  2446                           ;Button_src.c: 283:                   RC3 = 1;
  2447  027E  1587               	bsf	7,3	;volatile
  2448                           
  2449                           ;Button_src.c: 284:                     if (RC6 == 0 ){
  2450  027F  1B07               	btfsc	7,6	;volatile
  2451  0280  2A95               	goto	l722
  2452                           
  2453                           ;Button_src.c: 285:                           write_cmd(0x1);
  2454  0281  3001               	movlw	1
  2455  0282  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2456                           
  2457                           ;Button_src.c: 286:                           a = 0x00;
  2458  0287  01C8               	clrf	_a
  2459                           
  2460                           ;Button_src.c: 287:                           c = 0x00;
  2461  0288  01C6               	clrf	_c
  2462                           
  2463                           ;Button_src.c: 288:                           x = 0;
  2464  0289  01AE               	clrf	_x
  2465  028A  01AF               	clrf	_x+1
  2466                           
  2467                           ;Button_src.c: 289:                           y = 0;
  2468  028B  01AC               	clrf	_y
  2469  028C  01AD               	clrf	_y+1
  2470                           
  2471                           ;Button_src.c: 290:                           w = 0;
  2472  028D  01B0               	clrf	_w
  2473  028E  01B1               	clrf	_w+1
  2474                           
  2475                           ;Button_src.c: 291:                           t = 0;
  2476  028F  01B2               	clrf	_t
  2477  0290  01B3               	clrf	_t+1
  2478                           
  2479                           ;Button_src.c: 292:                           set_time();
  2480  0291  160A  118A  256A   	fcall	_set_time
  2481  0294  0008               	return
  2482  0295                     l722:	
  2483                           ;Button_src.c: 294:                             }
  2484                           
  2485                           
  2486                           ;Button_src.c: 295:                   RC0 = 1;
  2487  0295  1407               	bsf	7,0	;volatile
  2488                           
  2489                           ;Button_src.c: 296:                   RC1 = 1;
  2490  0296  1487               	bsf	7,1	;volatile
  2491                           
  2492                           ;Button_src.c: 297:                   RC2 = 0;
  2493  0297  1107               	bcf	7,2	;volatile
  2494                           
  2495                           ;Button_src.c: 298:                   RC3 = 1;
  2496  0298  1587               	bsf	7,3	;volatile
  2497                           
  2498                           ;Button_src.c: 299:                   z = modulus_func(z,2);
  2499  0299  082B               	movf	_z+1,w
  2500  029A  00F8               	movwf	modulus_func@x+1
  2501  029B  082A               	movf	_z,w
  2502  029C  00F7               	movwf	modulus_func@x
  2503  029D  3002               	movlw	2
  2504  029E  00F9               	movwf	modulus_func@y
  2505  029F  3000               	movlw	0
  2506  02A0  00FA               	movwf	modulus_func@y+1
  2507  02A1  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  2508  02A6  0878               	movf	?_modulus_func+1,w
  2509  02A7  00AB               	movwf	_z+1
  2510  02A8  0877               	movf	?_modulus_func,w
  2511  02A9  00AA               	movwf	_z
  2512                           
  2513                           ;Button_src.c: 300:                   if(RC4 == 0 && z ==0){
  2514  02AA  1A07               	btfsc	7,4	;volatile
  2515  02AB  2AE5               	goto	l4469
  2516  02AC  082A               	movf	_z,w
  2517  02AD  042B               	iorwf	_z+1,w
  2518  02AE  1D03               	btfss	3,2
  2519  02AF  2AE5               	goto	l4469
  2520                           
  2521                           ;Button_src.c: 301:                       write_cmd(0x90);
  2522  02B0  3090               	movlw	144
  2523  02B1  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2524                           
  2525                           ;Button_src.c: 302:                       write_char('H');
  2526  02B6  3048               	movlw	72
  2527  02B7  160A  118A  2440  120A  118A  	fcall	_write_char
  2528                           
  2529                           ;Button_src.c: 303:                       write_char('o');
  2530  02BC  306F               	movlw	111
  2531  02BD  160A  118A  2440  120A  118A  	fcall	_write_char
  2532                           
  2533                           ;Button_src.c: 304:                       write_char('u');
  2534  02C2  3075               	movlw	117
  2535  02C3  160A  118A  2440  120A  118A  	fcall	_write_char
  2536                           
  2537                           ;Button_src.c: 305:                       write_char('r');
  2538  02C8  3072               	movlw	114
  2539  02C9  160A  118A  2440  120A  118A  	fcall	_write_char
  2540                           
  2541                           ;Button_src.c: 306:                       write_char(':');
  2542  02CE  303A               	movlw	58
  2543  02CF  160A  118A  2440  120A  118A  	fcall	_write_char
  2544                           
  2545                           ;Button_src.c: 307:                       b = 'x';
  2546  02D4  3078               	movlw	120
  2547  02D5  00E3               	movwf	??_time_settings
  2548  02D6  0863               	movf	??_time_settings,w
  2549  02D7  00C7               	movwf	_b
  2550                           
  2551                           ;Button_src.c: 308:                       button_delay();
  2552  02D8  160A  118A  23F0  120A  118A  	fcall	_button_delay
  2553                           
  2554                           ;Button_src.c: 309:                       z++;
  2555  02DD  3001               	movlw	1
  2556  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2557  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2558  02E0  07AA               	addwf	_z,f
  2559  02E1  1803               	skipnc
  2560  02E2  0AAB               	incf	_z+1,f
  2561  02E3  3000               	movlw	0
  2562  02E4  07AB               	addwf	_z+1,f
  2563  02E5                     l4469:	
  2564                           
  2565                           ;Button_src.c: 311:                   RC0 = 1;
  2566  02E5  1407               	bsf	7,0	;volatile
  2567                           
  2568                           ;Button_src.c: 312:                   RC1 = 1;
  2569  02E6  1487               	bsf	7,1	;volatile
  2570                           
  2571                           ;Button_src.c: 313:                   RC2 = 0;
  2572  02E7  1107               	bcf	7,2	;volatile
  2573                           
  2574                           ;Button_src.c: 314:                   RC3 = 1;
  2575  02E8  1587               	bsf	7,3	;volatile
  2576                           
  2577                           ;Button_src.c: 316:                   if(RC4 == 0&& z ==1){
  2578  02E9  1A07               	btfsc	7,4	;volatile
  2579  02EA  2B22               	goto	l725
  2580  02EB  032A               	decf	_z,w
  2581  02EC  042B               	iorwf	_z+1,w
  2582  02ED  1D03               	btfss	3,2
  2583  02EE  2B22               	goto	l725
  2584                           
  2585                           ;Button_src.c: 317:                     z++;
  2586  02EF  3001               	movlw	1
  2587  02F0  07AA               	addwf	_z,f
  2588  02F1  1803               	skipnc
  2589  02F2  0AAB               	incf	_z+1,f
  2590  02F3  3000               	movlw	0
  2591  02F4  07AB               	addwf	_z+1,f
  2592                           
  2593                           ;Button_src.c: 318:                     button_delay();
  2594  02F5  160A  118A  23F0  120A  118A  	fcall	_button_delay
  2595                           
  2596                           ;Button_src.c: 319:                     write_cmd(0x90);
  2597  02FA  3090               	movlw	144
  2598  02FB  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2599                           
  2600                           ;Button_src.c: 320:                     write_char('M');
  2601  0300  304D               	movlw	77
  2602  0301  160A  118A  2440  120A  118A  	fcall	_write_char
  2603                           
  2604                           ;Button_src.c: 321:                     write_char('i');
  2605  0306  3069               	movlw	105
  2606  0307  160A  118A  2440  120A  118A  	fcall	_write_char
  2607                           
  2608                           ;Button_src.c: 322:                     write_char('n');
  2609  030C  306E               	movlw	110
  2610  030D  160A  118A  2440  120A  118A  	fcall	_write_char
  2611                           
  2612                           ;Button_src.c: 323:                     write_char('s');
  2613  0312  3073               	movlw	115
  2614  0313  160A  118A  2440  120A  118A  	fcall	_write_char
  2615                           
  2616                           ;Button_src.c: 324:                     write_char(':');
  2617  0318  303A               	movlw	58
  2618  0319  160A  118A  2440  120A  118A  	fcall	_write_char
  2619                           
  2620                           ;Button_src.c: 325:                     b = 'y';
  2621  031E  3079               	movlw	121
  2622  031F  00E3               	movwf	??_time_settings
  2623  0320  0863               	movf	??_time_settings,w
  2624  0321  00C7               	movwf	_b
  2625  0322                     l725:	
  2626                           ;Button_src.c: 326:                   }
  2627                           
  2628                           
  2629                           ;Button_src.c: 327:                    write_cmd(0x88);
  2630  0322  3088               	movlw	136
  2631  0323  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2632                           
  2633                           ;Button_src.c: 331:                   RC0 = 1;
  2634  0328  1407               	bsf	7,0	;volatile
  2635                           
  2636                           ;Button_src.c: 332:                   RC1 = 1;
  2637  0329  1487               	bsf	7,1	;volatile
  2638                           
  2639                           ;Button_src.c: 333:                   RC2 = 0;
  2640  032A  1107               	bcf	7,2	;volatile
  2641                           
  2642                           ;Button_src.c: 334:                   RC3 = 1;
  2643  032B  1587               	bsf	7,3	;volatile
  2644                           
  2645                           ;Button_src.c: 336:              write_cmd(0x88);
  2646  032C  3088               	movlw	136
  2647  032D  120A  118A  2006  120A  118A  	fcall	_write_cmd
  2648                           
  2649                           ;Button_src.c: 337:              write_char('T');
  2650  0332  3054               	movlw	84
  2651  0333  160A  118A  2440  120A  118A  	fcall	_write_char
  2652                           
  2653                           ;Button_src.c: 338:              write_char('i');
  2654  0338  3069               	movlw	105
  2655  0339  160A  118A  2440  120A  118A  	fcall	_write_char
  2656                           
  2657                           ;Button_src.c: 339:              write_char('m');
  2658  033E  306D               	movlw	109
  2659  033F  160A  118A  2440  120A  118A  	fcall	_write_char
  2660                           
  2661                           ;Button_src.c: 340:              write_char('e');
  2662  0344  3065               	movlw	101
  2663  0345  160A  118A  2440  120A  118A  	fcall	_write_char
  2664                           
  2665                           ;Button_src.c: 341:              write_char(':');
  2666  034A  303A               	movlw	58
  2667  034B  160A  118A  2440  120A  118A  	fcall	_write_char
  2668                           
  2669                           ;Button_src.c: 342:              write_char(y + '0');
  2670  0350  082C               	movf	_y,w
  2671  0351  3E30               	addlw	48
  2672  0352  160A  118A  2440  120A  118A  	fcall	_write_char
  2673                           
  2674                           ;Button_src.c: 343:              write_char(x + '0');
  2675  0357  082E               	movf	_x,w
  2676  0358  3E30               	addlw	48
  2677  0359  160A  118A  2440  120A  118A  	fcall	_write_char
  2678                           
  2679                           ;Button_src.c: 344:              write_char(':');
  2680  035E  303A               	movlw	58
  2681  035F  160A  118A  2440  120A  118A  	fcall	_write_char
  2682                           
  2683                           ;Button_src.c: 345:              write_char(w + '0');
  2684  0364  0830               	movf	_w,w
  2685  0365  3E30               	addlw	48
  2686  0366  160A  118A  2440  120A  118A  	fcall	_write_char
  2687                           
  2688                           ;Button_src.c: 346:              write_char(t + '0');
  2689  036B  0832               	movf	_t,w
  2690  036C  3E30               	addlw	48
  2691  036D  160A  118A  2440  120A  118A  	fcall	_write_char
  2692                           
  2693                           ;Button_src.c: 348:             RC0 = 0;
  2694  0372  1007               	bcf	7,0	;volatile
  2695                           
  2696                           ;Button_src.c: 349:             RC1 = 1;
  2697  0373  1487               	bsf	7,1	;volatile
  2698                           
  2699                           ;Button_src.c: 350:             RC2 = 1;
  2700  0374  1507               	bsf	7,2	;volatile
  2701                           
  2702                           ;Button_src.c: 351:             RC3 = 1;
  2703  0375  1587               	bsf	7,3	;volatile
  2704                           
  2705                           ;Button_src.c: 352:             if (RC7 == 0 ){
  2706  0376  1B87               	btfsc	7,7	;volatile
  2707  0377  287D               	goto	l705
  2708                           
  2709                           ;Button_src.c: 353:             a = 0x00;
  2710  0378  01C8               	clrf	_a
  2711                           
  2712                           ;Button_src.c: 354:             c = 0x00;
  2713  0379  01C6               	clrf	_c
  2714                           
  2715                           ;Button_src.c: 355:             x = 0;
  2716  037A  01AE               	clrf	_x
  2717  037B  01AF               	clrf	_x+1
  2718                           
  2719                           ;Button_src.c: 356:             y = 0;
  2720  037C  01AC               	clrf	_y
  2721  037D  01AD               	clrf	_y+1
  2722                           
  2723                           ;Button_src.c: 357:             w = 0;
  2724  037E  01B0               	clrf	_w
  2725  037F  01B1               	clrf	_w+1
  2726                           
  2727                           ;Button_src.c: 358:             t = 0;
  2728  0380  01B2               	clrf	_t
  2729  0381  01B3               	clrf	_t+1
  2730                           
  2731                           ;Button_src.c: 359:             write_cmd(0x1);
  2732  0382  3001               	movlw	1
  2733  0383  120A  118A  2006   	fcall	_write_cmd
  2734                           
  2735                           ;Button_src.c: 360:             break;
  2736  0386  0008               	return
  2737  0387                     __end_of_time_settings:	
  2738                           
  2739                           	psect	text2
  2740  0D92                     __ptext2:	
  2741 ;; *************** function _thermometer_threshhold_settings *****************
  2742 ;; Defined at:
  2743 ;;		line 23 in file "Button_src.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  i               2    8[BANK0 ] int 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 300/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2757 ;;      Params:         0       0       0       0       0
  2758 ;;      Locals:         0       2       0       0       0
  2759 ;;      Temps:          0       3       0       0       0
  2760 ;;      Totals:         0       5       0       0       0
  2761 ;;Total ram usage:        5 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    3
  2764 ;; This function calls:
  2765 ;;		_button_delay
  2766 ;;		_decrementor
  2767 ;;		_incrementor
  2768 ;;		_modulus_func
  2769 ;;		_write_char
  2770 ;;		_write_cmd
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           
  2777                           ;psect for function _thermometer_threshhold_settings
  2778  0D92                     _thermometer_threshhold_settings:	
  2779                           
  2780                           ;Button_src.c: 24:  RC0 = 1;
  2781                           
  2782                           ;incstack = 0
  2783                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2784  0D92  1407               	bsf	7,0	;volatile
  2785                           
  2786                           ;Button_src.c: 25:  RC1 = 0;
  2787  0D93  1087               	bcf	7,1	;volatile
  2788                           
  2789                           ;Button_src.c: 26:  RC2 = 1;
  2790  0D94  1507               	bsf	7,2	;volatile
  2791                           
  2792                           ;Button_src.c: 27:  RC3 = 1;
  2793  0D95  1587               	bsf	7,3	;volatile
  2794                           
  2795                           ;Button_src.c: 28:   if (RC4 == 0){
  2796  0D96  1A07               	btfsc	7,4	;volatile
  2797  0D97  0008               	return
  2798                           
  2799                           ;Button_src.c: 29:       write_cmd(0x1);
  2800  0D98  3001               	movlw	1
  2801  0D99  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2802                           
  2803                           ;Button_src.c: 31:             write_cmd(0x80);
  2804                           
  2805                           ;Button_src.c: 30:       for(;;){
  2806  0D9E  3080               	movlw	128
  2807  0D9F  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2808                           
  2809                           ;Button_src.c: 32:             write_char('t');
  2810  0DA4  3074               	movlw	116
  2811  0DA5  160A  118A  2440  120A  158A  	fcall	_write_char
  2812                           
  2813                           ;Button_src.c: 33:             write_char('h');
  2814  0DAA  3068               	movlw	104
  2815  0DAB  160A  118A  2440  120A  158A  	fcall	_write_char
  2816                           
  2817                           ;Button_src.c: 34:             write_char('r');
  2818  0DB0  3072               	movlw	114
  2819  0DB1  160A  118A  2440  120A  158A  	fcall	_write_char
  2820                           
  2821                           ;Button_src.c: 35:             write_char('e');
  2822  0DB6  3065               	movlw	101
  2823  0DB7  160A  118A  2440  120A  158A  	fcall	_write_char
  2824                           
  2825                           ;Button_src.c: 36:             write_char('s');
  2826  0DBC  3073               	movlw	115
  2827  0DBD  160A  118A  2440  120A  158A  	fcall	_write_char
  2828                           
  2829                           ;Button_src.c: 37:             write_char('h');
  2830  0DC2  3068               	movlw	104
  2831  0DC3  160A  118A  2440  120A  158A  	fcall	_write_char
  2832                           
  2833                           ;Button_src.c: 38:             write_char('o');
  2834  0DC8  306F               	movlw	111
  2835  0DC9  160A  118A  2440  120A  158A  	fcall	_write_char
  2836                           
  2837                           ;Button_src.c: 39:             write_char('l');
  2838  0DCE  306C               	movlw	108
  2839  0DCF  160A  118A  2440  120A  158A  	fcall	_write_char
  2840                           
  2841                           ;Button_src.c: 40:             write_char('d');
  2842  0DD4  3064               	movlw	100
  2843  0DD5  160A  118A  2440  120A  158A  	fcall	_write_char
  2844                           
  2845                           ;Button_src.c: 42:             write_cmd(0x90);
  2846  0DDA  3090               	movlw	144
  2847  0DDB  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2848                           
  2849                           ;Button_src.c: 43:             write_char('C');
  2850  0DE0  3043               	movlw	67
  2851  0DE1  160A  118A  2440  120A  158A  	fcall	_write_char
  2852                           
  2853                           ;Button_src.c: 44:             write_char('u');
  2854  0DE6  3075               	movlw	117
  2855  0DE7  160A  118A  2440  120A  158A  	fcall	_write_char
  2856                           
  2857                           ;Button_src.c: 45:             write_char('r');
  2858  0DEC  3072               	movlw	114
  2859  0DED  160A  118A  2440  120A  158A  	fcall	_write_char
  2860                           
  2861                           ;Button_src.c: 46:             write_char('r');
  2862  0DF2  3072               	movlw	114
  2863  0DF3  160A  118A  2440  120A  158A  	fcall	_write_char
  2864                           
  2865                           ;Button_src.c: 47:             write_char('e');
  2866  0DF8  3065               	movlw	101
  2867  0DF9  160A  118A  2440  120A  158A  	fcall	_write_char
  2868                           
  2869                           ;Button_src.c: 48:             write_char('n');
  2870  0DFE  306E               	movlw	110
  2871  0DFF  160A  118A  2440  120A  158A  	fcall	_write_char
  2872                           
  2873                           ;Button_src.c: 49:             write_char('t');
  2874  0E04  3074               	movlw	116
  2875  0E05  160A  118A  2440  120A  158A  	fcall	_write_char
  2876                           
  2877                           ;Button_src.c: 50:             write_char(':');
  2878  0E0A  303A               	movlw	58
  2879  0E0B  160A  118A  2440  120A  158A  	fcall	_write_char
  2880                           
  2881                           ;Button_src.c: 52:             write_char(var1 + '0');
  2882  0E10  084D               	movf	_var1,w
  2883  0E11  3E30               	addlw	48
  2884  0E12  160A  118A  2440  120A  158A  	fcall	_write_char
  2885                           
  2886                           ;Button_src.c: 53:             write_char(var2 + '0');
  2887  0E17  084C               	movf	_var2,w
  2888  0E18  3E30               	addlw	48
  2889  0E19  160A  118A  2440  120A  158A  	fcall	_write_char
  2890                           
  2891                           ;Button_src.c: 55:             write_cmd(0x88);
  2892  0E1E  3088               	movlw	136
  2893  0E1F  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2894                           
  2895                           ;Button_src.c: 56:             write_char('S');
  2896  0E24  3053               	movlw	83
  2897  0E25  160A  118A  2440  120A  158A  	fcall	_write_char
  2898                           
  2899                           ;Button_src.c: 57:             write_char('e');
  2900  0E2A  3065               	movlw	101
  2901  0E2B  160A  118A  2440  120A  158A  	fcall	_write_char
  2902                           
  2903                           ;Button_src.c: 58:             write_char('t');
  2904  0E30  3074               	movlw	116
  2905  0E31  160A  118A  2440  120A  158A  	fcall	_write_char
  2906                           
  2907                           ;Button_src.c: 59:             write_char('_');
  2908  0E36  305F               	movlw	95
  2909  0E37  160A  118A  2440  120A  158A  	fcall	_write_char
  2910                           
  2911                           ;Button_src.c: 60:             write_char('t');
  2912  0E3C  3074               	movlw	116
  2913  0E3D  160A  118A  2440  120A  158A  	fcall	_write_char
  2914                           
  2915                           ;Button_src.c: 61:             write_char('h');
  2916  0E42  3068               	movlw	104
  2917  0E43  160A  118A  2440  120A  158A  	fcall	_write_char
  2918                           
  2919                           ;Button_src.c: 62:             write_char('r');
  2920  0E48  3072               	movlw	114
  2921  0E49  160A  118A  2440  120A  158A  	fcall	_write_char
  2922                           
  2923                           ;Button_src.c: 63:             write_char('e');
  2924  0E4E  3065               	movlw	101
  2925  0E4F  160A  118A  2440  120A  158A  	fcall	_write_char
  2926                           
  2927                           ;Button_src.c: 64:             write_char('s');
  2928  0E54  3073               	movlw	115
  2929  0E55  160A  118A  2440  120A  158A  	fcall	_write_char
  2930                           
  2931                           ;Button_src.c: 65:             write_char('h');
  2932  0E5A  3068               	movlw	104
  2933  0E5B  160A  118A  2440  120A  158A  	fcall	_write_char
  2934                           
  2935                           ;Button_src.c: 66:             write_char('o');
  2936  0E60  306F               	movlw	111
  2937  0E61  160A  118A  2440  120A  158A  	fcall	_write_char
  2938                           
  2939                           ;Button_src.c: 67:             write_char('l');
  2940  0E66  306C               	movlw	108
  2941  0E67  160A  118A  2440  120A  158A  	fcall	_write_char
  2942                           
  2943                           ;Button_src.c: 68:             write_char('d');
  2944  0E6C  3064               	movlw	100
  2945  0E6D  160A  118A  2440  120A  158A  	fcall	_write_char
  2946                           
  2947                           ;Button_src.c: 69:             write_char(':');
  2948  0E72  303A               	movlw	58
  2949  0E73  160A  118A  2440  120A  158A  	fcall	_write_char
  2950                           
  2951                           ;Button_src.c: 71:             write_cmd(0x98);
  2952  0E78  3098               	movlw	152
  2953  0E79  120A  118A  2006  120A  158A  	fcall	_write_cmd
  2954                           
  2955                           ;Button_src.c: 72:             RC0 = 1;
  2956  0E7E  1407               	bsf	7,0	;volatile
  2957                           
  2958                           ;Button_src.c: 73:             RC1 = 0;
  2959  0E7F  1087               	bcf	7,1	;volatile
  2960                           
  2961                           ;Button_src.c: 74:             RC2 = 1;
  2962  0E80  1507               	bsf	7,2	;volatile
  2963                           
  2964                           ;Button_src.c: 75:             RC3 = 1;
  2965  0E81  1587               	bsf	7,3	;volatile
  2966                           
  2967                           ;Button_src.c: 76:             t = 0;
  2968  0E82  01B2               	clrf	_t
  2969  0E83  01B3               	clrf	_t+1
  2970                           
  2971                           ;Button_src.c: 77:             w = 0;
  2972  0E84  01B0               	clrf	_w
  2973  0E85  01B1               	clrf	_w+1
  2974                           
  2975                           ;Button_src.c: 78:             x = 0;
  2976  0E86  01AE               	clrf	_x
  2977  0E87  01AF               	clrf	_x+1
  2978                           
  2979                           ;Button_src.c: 79:             y = 0;
  2980  0E88  01AC               	clrf	_y
  2981  0E89  01AD               	clrf	_y+1
  2982                           
  2983                           ;Button_src.c: 80:             x = 0x00;
  2984  0E8A  01AE               	clrf	_x
  2985  0E8B  01AF               	clrf	_x+1
  2986  0E8C                     l3927:	
  2987                           
  2988                           ;Button_src.c: 82:                  RC0 = 1;
  2989  0E8C  1407               	bsf	7,0	;volatile
  2990                           
  2991                           ;Button_src.c: 83:                  RC1 = 0;
  2992  0E8D  1087               	bcf	7,1	;volatile
  2993                           
  2994                           ;Button_src.c: 84:                  RC2 = 1;
  2995  0E8E  1507               	bsf	7,2	;volatile
  2996                           
  2997                           ;Button_src.c: 85:                  RC3 = 1;
  2998  0E8F  1587               	bsf	7,3	;volatile
  2999                           
  3000                           ;Button_src.c: 87:                 if(RC7==0){
  3001  0E90  1B87               	btfsc	7,7	;volatile
  3002  0E91  2EEB               	goto	l3955
  3003                           
  3004                           ;Button_src.c: 88:                     write_cmd(0x98);
  3005  0E92  3098               	movlw	152
  3006  0E93  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3007                           
  3008                           ;Button_src.c: 89:                     x++;
  3009  0E98  3001               	movlw	1
  3010  0E99  07AE               	addwf	_x,f
  3011  0E9A  1803               	skipnc
  3012  0E9B  0AAF               	incf	_x+1,f
  3013  0E9C  3000               	movlw	0
  3014  0E9D  07AF               	addwf	_x+1,f
  3015                           
  3016                           ;Button_src.c: 90:                     y = (unsigned char )y;
  3017  0E9E  082C               	movf	_y,w
  3018  0E9F  00E3               	movwf	??_thermometer_threshhold_settings
  3019  0EA0  01E4               	clrf	??_thermometer_threshhold_settings+1
  3020  0EA1  0863               	movf	??_thermometer_threshhold_settings,w
  3021  0EA2  00AC               	movwf	_y
  3022  0EA3  0864               	movf	??_thermometer_threshhold_settings+1,w
  3023  0EA4  00AD               	movwf	_y+1
  3024                           
  3025                           ;Button_src.c: 91:                     x = (unsigned char )(modulus_func(x,10));
  3026  0EA5  082F               	movf	_x+1,w
  3027  0EA6  00F8               	movwf	modulus_func@x+1
  3028  0EA7  082E               	movf	_x,w
  3029  0EA8  00F7               	movwf	modulus_func@x
  3030  0EA9  300A               	movlw	10
  3031  0EAA  00F9               	movwf	modulus_func@y
  3032  0EAB  3000               	movlw	0
  3033  0EAC  00FA               	movwf	modulus_func@y+1
  3034  0EAD  160A  118A  23CF  120A  158A  	fcall	_modulus_func
  3035  0EB2  0877               	movf	?_modulus_func,w
  3036  0EB3  00E3               	movwf	??_thermometer_threshhold_settings
  3037  0EB4  01E4               	clrf	??_thermometer_threshhold_settings+1
  3038  0EB5  0863               	movf	??_thermometer_threshhold_settings,w
  3039  0EB6  00AE               	movwf	_x
  3040  0EB7  0864               	movf	??_thermometer_threshhold_settings+1,w
  3041  0EB8  00AF               	movwf	_x+1
  3042                           
  3043                           ;Button_src.c: 92:                     write_char(y + '0');
  3044  0EB9  082C               	movf	_y,w
  3045  0EBA  3E30               	addlw	48
  3046  0EBB  160A  118A  2440  120A  158A  	fcall	_write_char
  3047                           
  3048                           ;Button_src.c: 93:                     write_char(x + '0');
  3049  0EC0  082E               	movf	_x,w
  3050  0EC1  3E30               	addlw	48
  3051  0EC2  160A  118A  2440  120A  158A  	fcall	_write_char
  3052                           
  3053                           ;Button_src.c: 94:                     y = incrementor(y,x,'9');
  3054  0EC7  082D               	movf	_y+1,w
  3055  0EC8  00DF               	movwf	incrementor@upper_val+1
  3056  0EC9  082C               	movf	_y,w
  3057  0ECA  00DE               	movwf	incrementor@upper_val
  3058  0ECB  082F               	movf	_x+1,w
  3059  0ECC  00E1               	movwf	incrementor@lower_val+1
  3060  0ECD  082E               	movf	_x,w
  3061  0ECE  00E0               	movwf	incrementor@lower_val
  3062  0ECF  3039               	movlw	57
  3063  0ED0  00E3               	movwf	??_thermometer_threshhold_settings
  3064  0ED1  0863               	movf	??_thermometer_threshhold_settings,w
  3065  0ED2  00E2               	movwf	incrementor@z
  3066  0ED3  160A  118A  24FC  120A  158A  	fcall	_incrementor
  3067  0ED8  00E4               	movwf	??_thermometer_threshhold_settings+1
  3068  0ED9  01E5               	clrf	??_thermometer_threshhold_settings+2
  3069  0EDA  0864               	movf	??_thermometer_threshhold_settings+1,w
  3070  0EDB  00AC               	movwf	_y
  3071  0EDC  0865               	movf	??_thermometer_threshhold_settings+2,w
  3072  0EDD  00AD               	movwf	_y+1
  3073                           
  3074                           ;Button_src.c: 95:                     t = x;
  3075  0EDE  082F               	movf	_x+1,w
  3076  0EDF  00B3               	movwf	_t+1
  3077  0EE0  082E               	movf	_x,w
  3078  0EE1  00B2               	movwf	_t
  3079                           
  3080                           ;Button_src.c: 96:                     w = y;
  3081  0EE2  082D               	movf	_y+1,w
  3082  0EE3  00B1               	movwf	_w+1
  3083  0EE4  082C               	movf	_y,w
  3084  0EE5  00B0               	movwf	_w
  3085                           
  3086                           ;Button_src.c: 97:                     button_delay();
  3087  0EE6  160A  118A  23F0  120A  158A  	fcall	_button_delay
  3088  0EEB                     l3955:	
  3089                           
  3090                           ;Button_src.c: 99:                   RC0 = 0;
  3091  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0EED  1007               	bcf	7,0	;volatile
  3094                           
  3095                           ;Button_src.c: 100:                     RC1 = 1;
  3096  0EEE  1487               	bsf	7,1	;volatile
  3097                           
  3098                           ;Button_src.c: 101:                     RC2 = 1;
  3099  0EEF  1507               	bsf	7,2	;volatile
  3100                           
  3101                           ;Button_src.c: 102:                     RC3 = 1;
  3102  0EF0  1587               	bsf	7,3	;volatile
  3103                           
  3104                           ;Button_src.c: 103:                     if(RC6 == 0){
  3105  0EF1  1B07               	btfsc	7,6	;volatile
  3106  0EF2  2F3D               	goto	l692
  3107                           
  3108                           ;Button_src.c: 104:                         var1 = y;
  3109  0EF3  082C               	movf	_y,w
  3110  0EF4  00E3               	movwf	??_thermometer_threshhold_settings
  3111  0EF5  0863               	movf	??_thermometer_threshhold_settings,w
  3112  0EF6  00CD               	movwf	_var1
  3113                           
  3114                           ;Button_src.c: 105:                         var2 = x;
  3115  0EF7  082E               	movf	_x,w
  3116  0EF8  00E3               	movwf	??_thermometer_threshhold_settings
  3117  0EF9  0863               	movf	??_thermometer_threshhold_settings,w
  3118  0EFA  00CC               	movwf	_var2
  3119                           
  3120                           ;Button_src.c: 106:                         x = 0;
  3121  0EFB  01AE               	clrf	_x
  3122  0EFC  01AF               	clrf	_x+1
  3123                           
  3124                           ;Button_src.c: 107:                         y = 0;
  3125  0EFD  01AC               	clrf	_y
  3126  0EFE  01AD               	clrf	_y+1
  3127                           
  3128                           ;Button_src.c: 108:                         w = 0;
  3129  0EFF  01B0               	clrf	_w
  3130  0F00  01B1               	clrf	_w+1
  3131                           
  3132                           ;Button_src.c: 109:                         t = 0;
  3133  0F01  01B2               	clrf	_t
  3134  0F02  01B3               	clrf	_t+1
  3135                           
  3136                           ;Button_src.c: 111:                         write_cmd(0x1);
  3137  0F03  3001               	movlw	1
  3138  0F04  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3139                           
  3140                           ;Button_src.c: 112:                         write_char('S');
  3141  0F09  3053               	movlw	83
  3142  0F0A  160A  118A  2440  120A  158A  	fcall	_write_char
  3143                           
  3144                           ;Button_src.c: 113:                         write_char('A');
  3145  0F0F  3041               	movlw	65
  3146  0F10  160A  118A  2440  120A  158A  	fcall	_write_char
  3147                           
  3148                           ;Button_src.c: 114:                         write_char('V');
  3149  0F15  3056               	movlw	86
  3150  0F16  160A  118A  2440  120A  158A  	fcall	_write_char
  3151                           
  3152                           ;Button_src.c: 115:                         write_char('E');
  3153  0F1B  3045               	movlw	69
  3154  0F1C  160A  118A  2440  120A  158A  	fcall	_write_char
  3155                           
  3156                           ;Button_src.c: 116:                         write_char('D');
  3157  0F21  3044               	movlw	68
  3158  0F22  160A  118A  2440  120A  158A  	fcall	_write_char
  3159                           
  3160                           ;Button_src.c: 117:                         for(int i=0;i<30000;i++);
  3161  0F27  01E6               	clrf	thermometer_threshhold_settings@i
  3162  0F28  01E7               	clrf	thermometer_threshhold_settings@i+1
  3163  0F29                     l3993:	
  3164  0F29  3001               	movlw	1
  3165  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3167  0F2C  07E6               	addwf	thermometer_threshhold_settings@i,f
  3168  0F2D  1803               	skipnc
  3169  0F2E  0AE7               	incf	thermometer_threshhold_settings@i+1,f
  3170  0F2F  3000               	movlw	0
  3171  0F30  07E7               	addwf	thermometer_threshhold_settings@i+1,f
  3172  0F31  0867               	movf	thermometer_threshhold_settings@i+1,w
  3173  0F32  3A80               	xorlw	128
  3174  0F33  00FF               	movwf	127
  3175  0F34  30F5               	movlw	245
  3176  0F35  027F               	subwf	127,w
  3177  0F36  1D03               	skipz
  3178  0F37  2F3A               	goto	u3115
  3179  0F38  3030               	movlw	48
  3180  0F39  0266               	subwf	thermometer_threshhold_settings@i,w
  3181  0F3A                     u3115:	
  3182  0F3A  1803               	btfsc	3,0
  3183  0F3B  0008               	return
  3184  0F3C  2F29               	goto	l3993
  3185  0F3D                     l692:	
  3186                           ;Button_src.c: 119:                     }
  3187                           
  3188                           
  3189                           ;Button_src.c: 120:                  RC0 = 1;
  3190  0F3D  1407               	bsf	7,0	;volatile
  3191                           
  3192                           ;Button_src.c: 121:                  RC1 = 1;
  3193  0F3E  1487               	bsf	7,1	;volatile
  3194                           
  3195                           ;Button_src.c: 122:                  RC2 = 0;
  3196  0F3F  1107               	bcf	7,2	;volatile
  3197                           
  3198                           ;Button_src.c: 123:                  RC3 = 1;
  3199  0F40  1587               	bsf	7,3	;volatile
  3200                           
  3201                           ;Button_src.c: 125:                  if(RC7 == 0){
  3202  0F41  1B87               	btfsc	7,7	;volatile
  3203  0F42  2FAD               	goto	l4017
  3204                           
  3205                           ;Button_src.c: 126:                     write_cmd(0x98);
  3206  0F43  3098               	movlw	152
  3207  0F44  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3208                           
  3209                           ;Button_src.c: 127:                       t--;
  3210  0F49  3001               	movlw	1
  3211  0F4A  02B2               	subwf	_t,f
  3212  0F4B  3000               	movlw	0
  3213  0F4C  1C03               	skipc
  3214  0F4D  03B3               	decf	_t+1,f
  3215  0F4E  02B3               	subwf	_t+1,f
  3216                           
  3217                           ;Button_src.c: 128:                     w = (unsigned char )w;
  3218  0F4F  0830               	movf	_w,w
  3219  0F50  00E3               	movwf	??_thermometer_threshhold_settings
  3220  0F51  01E4               	clrf	??_thermometer_threshhold_settings+1
  3221  0F52  0863               	movf	??_thermometer_threshhold_settings,w
  3222  0F53  00B0               	movwf	_w
  3223  0F54  0864               	movf	??_thermometer_threshhold_settings+1,w
  3224  0F55  00B1               	movwf	_w+1
  3225                           
  3226                           ;Button_src.c: 129:                     t = (unsigned char )(modulus_func(t,10));
  3227  0F56  0833               	movf	_t+1,w
  3228  0F57  00F8               	movwf	modulus_func@x+1
  3229  0F58  0832               	movf	_t,w
  3230  0F59  00F7               	movwf	modulus_func@x
  3231  0F5A  300A               	movlw	10
  3232  0F5B  00F9               	movwf	modulus_func@y
  3233  0F5C  3000               	movlw	0
  3234  0F5D  00FA               	movwf	modulus_func@y+1
  3235  0F5E  160A  118A  23CF  120A  158A  	fcall	_modulus_func
  3236  0F63  0877               	movf	?_modulus_func,w
  3237  0F64  00E3               	movwf	??_thermometer_threshhold_settings
  3238  0F65  01E4               	clrf	??_thermometer_threshhold_settings+1
  3239  0F66  0863               	movf	??_thermometer_threshhold_settings,w
  3240  0F67  00B2               	movwf	_t
  3241  0F68  0864               	movf	??_thermometer_threshhold_settings+1,w
  3242  0F69  00B3               	movwf	_t+1
  3243                           
  3244                           ;Button_src.c: 130:                     write_char(w + '0');
  3245  0F6A  0830               	movf	_w,w
  3246  0F6B  3E30               	addlw	48
  3247  0F6C  160A  118A  2440  120A  158A  	fcall	_write_char
  3248                           
  3249                           ;Button_src.c: 131:                     write_char(t + '0');
  3250  0F71  0832               	movf	_t,w
  3251  0F72  3E30               	addlw	48
  3252  0F73  160A  118A  2440  120A  158A  	fcall	_write_char
  3253                           
  3254                           ;Button_src.c: 132:                     w = decrementor(w,t,'0');
  3255  0F78  0831               	movf	_w+1,w
  3256  0F79  00DF               	movwf	decrementor@lower_val+1
  3257  0F7A  0830               	movf	_w,w
  3258  0F7B  00DE               	movwf	decrementor@lower_val
  3259  0F7C  0833               	movf	_t+1,w
  3260  0F7D  00E1               	movwf	decrementor@upper_val+1
  3261  0F7E  0832               	movf	_t,w
  3262  0F7F  00E0               	movwf	decrementor@upper_val
  3263  0F80  3030               	movlw	48
  3264  0F81  00E3               	movwf	??_thermometer_threshhold_settings
  3265  0F82  0863               	movf	??_thermometer_threshhold_settings,w
  3266  0F83  00E2               	movwf	decrementor@z
  3267  0F84  160A  118A  2520  120A  158A  	fcall	_decrementor
  3268  0F89  00E4               	movwf	??_thermometer_threshhold_settings+1
  3269  0F8A  01E5               	clrf	??_thermometer_threshhold_settings+2
  3270  0F8B  0864               	movf	??_thermometer_threshhold_settings+1,w
  3271  0F8C  00B0               	movwf	_w
  3272  0F8D  0865               	movf	??_thermometer_threshhold_settings+2,w
  3273  0F8E  00B1               	movwf	_w+1
  3274                           
  3275                           ;Button_src.c: 133:                     if((t + '0')=='0'){
  3276  0F8F  0832               	movf	_t,w
  3277  0F90  3E30               	addlw	48
  3278  0F91  00E3               	movwf	??_thermometer_threshhold_settings
  3279  0F92  0833               	movf	_t+1,w
  3280  0F93  1803               	skipnc
  3281  0F94  3E01               	addlw	1
  3282  0F95  3E00               	addlw	0
  3283  0F96  00E4               	movwf	??_thermometer_threshhold_settings+1
  3284  0F97  3030               	movlw	48
  3285  0F98  0663               	xorwf	??_thermometer_threshhold_settings,w
  3286  0F99  0464               	iorwf	??_thermometer_threshhold_settings+1,w
  3287  0F9A  1D03               	btfss	3,2
  3288  0F9B  2FA0               	goto	l697
  3289                           
  3290                           ;Button_src.c: 134:                         t = 10;
  3291  0F9C  300A               	movlw	10
  3292  0F9D  00B2               	movwf	_t
  3293  0F9E  3000               	movlw	0
  3294  0F9F  00B3               	movwf	_t+1
  3295  0FA0                     l697:	
  3296                           ;Button_src.c: 135:                     }
  3297                           
  3298                           
  3299                           ;Button_src.c: 137:                     x = t;
  3300  0FA0  0833               	movf	_t+1,w
  3301  0FA1  00AF               	movwf	_x+1
  3302  0FA2  0832               	movf	_t,w
  3303  0FA3  00AE               	movwf	_x
  3304                           
  3305                           ;Button_src.c: 138:                     y = w;
  3306  0FA4  0831               	movf	_w+1,w
  3307  0FA5  00AD               	movwf	_y+1
  3308  0FA6  0830               	movf	_w,w
  3309  0FA7  00AC               	movwf	_y
  3310                           
  3311                           ;Button_src.c: 139:                     button_delay();
  3312  0FA8  160A  118A  23F0  120A  158A  	fcall	_button_delay
  3313  0FAD                     l4017:	
  3314                           
  3315                           ;Button_src.c: 141:                 RC0 = 0;
  3316  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0FAF  1007               	bcf	7,0	;volatile
  3319                           
  3320                           ;Button_src.c: 142:                 RC1 = 1;
  3321  0FB0  1487               	bsf	7,1	;volatile
  3322                           
  3323                           ;Button_src.c: 143:                 RC2 = 1;
  3324  0FB1  1507               	bsf	7,2	;volatile
  3325                           
  3326                           ;Button_src.c: 144:                 RC3 = 1;
  3327  0FB2  1587               	bsf	7,3	;volatile
  3328                           
  3329                           ;Button_src.c: 145:                     if(RC6 == 0){
  3330  0FB3  1B07               	btfsc	7,6	;volatile
  3331  0FB4  2FED               	goto	l698
  3332                           
  3333                           ;Button_src.c: 146:                         var1 = w;
  3334  0FB5  0830               	movf	_w,w
  3335  0FB6  00E3               	movwf	??_thermometer_threshhold_settings
  3336  0FB7  0863               	movf	??_thermometer_threshhold_settings,w
  3337  0FB8  00CD               	movwf	_var1
  3338                           
  3339                           ;Button_src.c: 147:                         var2 = t;
  3340  0FB9  0832               	movf	_t,w
  3341  0FBA  00E3               	movwf	??_thermometer_threshhold_settings
  3342  0FBB  0863               	movf	??_thermometer_threshhold_settings,w
  3343  0FBC  00CC               	movwf	_var2
  3344                           
  3345                           ;Button_src.c: 148:                         x = 0;
  3346  0FBD  01AE               	clrf	_x
  3347  0FBE  01AF               	clrf	_x+1
  3348                           
  3349                           ;Button_src.c: 149:                         y = 0;
  3350  0FBF  01AC               	clrf	_y
  3351  0FC0  01AD               	clrf	_y+1
  3352                           
  3353                           ;Button_src.c: 150:                         w = 0;
  3354  0FC1  01B0               	clrf	_w
  3355  0FC2  01B1               	clrf	_w+1
  3356                           
  3357                           ;Button_src.c: 151:                         t = 0;
  3358  0FC3  01B2               	clrf	_t
  3359  0FC4  01B3               	clrf	_t+1
  3360                           
  3361                           ;Button_src.c: 153:                         write_cmd(0x1);
  3362  0FC5  3001               	movlw	1
  3363  0FC6  120A  118A  2006  120A  158A  	fcall	_write_cmd
  3364                           
  3365                           ;Button_src.c: 154:                         write_char('S');
  3366  0FCB  3053               	movlw	83
  3367  0FCC  160A  118A  2440  120A  158A  	fcall	_write_char
  3368                           
  3369                           ;Button_src.c: 155:                         write_char('A');
  3370  0FD1  3041               	movlw	65
  3371  0FD2  160A  118A  2440  120A  158A  	fcall	_write_char
  3372                           
  3373                           ;Button_src.c: 156:                         write_char('V');
  3374  0FD7  3056               	movlw	86
  3375  0FD8  160A  118A  2440  120A  158A  	fcall	_write_char
  3376                           
  3377                           ;Button_src.c: 157:                         write_char('E');
  3378  0FDD  3045               	movlw	69
  3379  0FDE  160A  118A  2440  120A  158A  	fcall	_write_char
  3380                           
  3381                           ;Button_src.c: 158:                         write_char('D');
  3382  0FE3  3044               	movlw	68
  3383  0FE4  160A  118A  2440  120A  158A  	fcall	_write_char
  3384                           
  3385                           ;Button_src.c: 159:                         button_delay();
  3386  0FE9  160A  118A  23F0   	fcall	_button_delay
  3387  0FEC  0008               	return
  3388  0FED                     l698:	
  3389                           ;Button_src.c: 161:                     }
  3390                           
  3391                           
  3392                           ;Button_src.c: 162:             RC0 = 0;
  3393  0FED  1007               	bcf	7,0	;volatile
  3394                           
  3395                           ;Button_src.c: 163:             RC1 = 1;
  3396  0FEE  1487               	bsf	7,1	;volatile
  3397                           
  3398                           ;Button_src.c: 164:             RC2 = 1;
  3399  0FEF  1507               	bsf	7,2	;volatile
  3400                           
  3401                           ;Button_src.c: 165:             RC3 = 1;
  3402  0FF0  1587               	bsf	7,3	;volatile
  3403                           
  3404                           ;Button_src.c: 166:             if (RC7 == 0 ){
  3405  0FF1  1B87               	btfsc	7,7	;volatile
  3406  0FF2  2E8C               	goto	l3927
  3407                           
  3408                           ;Button_src.c: 167:                         x = 0;
  3409  0FF3  01AE               	clrf	_x
  3410  0FF4  01AF               	clrf	_x+1
  3411                           
  3412                           ;Button_src.c: 168:                         y = 0;
  3413  0FF5  01AC               	clrf	_y
  3414  0FF6  01AD               	clrf	_y+1
  3415                           
  3416                           ;Button_src.c: 169:                         w = 0;
  3417  0FF7  01B0               	clrf	_w
  3418  0FF8  01B1               	clrf	_w+1
  3419                           
  3420                           ;Button_src.c: 170:                         t = 0;
  3421  0FF9  01B2               	clrf	_t
  3422  0FFA  01B3               	clrf	_t+1
  3423                           
  3424                           ;Button_src.c: 171:             write_cmd(0x1);
  3425  0FFB  3001               	movlw	1
  3426  0FFC  120A  118A  2006   	fcall	_write_cmd
  3427  0FFF  0008               	return
  3428  1000                     __end_of_thermometer_threshhold_settings:	
  3429                           
  3430                           	psect	text3
  3431  1520                     __ptext3:	
  3432 ;; *************** function _decrementor *****************
  3433 ;; Defined at:
  3434 ;;		line 19 in file "math_src.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  lower_val       2    0[BANK0 ] int 
  3437 ;;  upper_val       2    2[BANK0 ] int 
  3438 ;;  z               1    4[BANK0 ] unsigned char 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      unsigned char 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 300/0
  3447 ;;		On exit  : 300/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3450 ;;      Params:         0       5       0       0       0
  3451 ;;      Locals:         0       0       0       0       0
  3452 ;;      Temps:          2       0       0       0       0
  3453 ;;      Totals:         2       5       0       0       0
  3454 ;;Total ram usage:        7 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    2
  3457 ;; This function calls:
  3458 ;;		_modulus_func
  3459 ;; This function is called by:
  3460 ;;		_thermometer_threshhold_settings
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           
  3465                           ;psect for function _decrementor
  3466  1520                     _decrementor:	
  3467                           
  3468                           ;math_src.c: 20:      if(z == (upper_val + '0')){
  3469                           
  3470                           ;incstack = 0
  3471                           ; Regs used in _decrementor: [wreg+status,2+status,0+pclath+cstack]
  3472  1520  0860               	movf	decrementor@upper_val,w
  3473  1521  3E30               	addlw	48
  3474  1522  00FB               	movwf	??_decrementor
  3475  1523  0861               	movf	decrementor@upper_val+1,w
  3476  1524  1803               	skipnc
  3477  1525  3E01               	addlw	1
  3478  1526  3E00               	addlw	0
  3479  1527  00FC               	movwf	??_decrementor+1
  3480  1528  0862               	movf	decrementor@z,w
  3481  1529  067B               	xorwf	??_decrementor,w
  3482  152A  047C               	iorwf	??_decrementor+1,w
  3483  152B  1D03               	skipz
  3484  152C  2D42               	goto	l3437
  3485                           
  3486                           ;math_src.c: 21:         lower_val--;
  3487  152D  30FF               	movlw	255
  3488  152E  07DE               	addwf	decrementor@lower_val,f
  3489  152F  1803               	skipnc
  3490  1530  0ADF               	incf	decrementor@lower_val+1,f
  3491  1531  30FF               	movlw	255
  3492  1532  07DF               	addwf	decrementor@lower_val+1,f
  3493                           
  3494                           ;math_src.c: 22:         lower_val = (modulus_func(lower_val,10));
  3495  1533  085F               	movf	decrementor@lower_val+1,w
  3496  1534  00F8               	movwf	modulus_func@x+1
  3497  1535  085E               	movf	decrementor@lower_val,w
  3498  1536  00F7               	movwf	modulus_func@x
  3499  1537  300A               	movlw	10
  3500  1538  00F9               	movwf	modulus_func@y
  3501  1539  3000               	movlw	0
  3502  153A  00FA               	movwf	modulus_func@y+1
  3503  153B  160A  118A  23CF   	fcall	_modulus_func
  3504  153E  0878               	movf	?_modulus_func+1,w
  3505  153F  00DF               	movwf	decrementor@lower_val+1
  3506  1540  0877               	movf	?_modulus_func,w
  3507  1541  00DE               	movwf	decrementor@lower_val
  3508  1542                     l3437:	
  3509                           
  3510                           ;math_src.c: 24:      return lower_val;
  3511  1542  085E               	movf	decrementor@lower_val,w
  3512  1543  0008               	return
  3513  1544                     __end_of_decrementor:	
  3514                           
  3515                           	psect	text4
  3516  001D                     __ptext4:	
  3517 ;; *************** function _set_upper_threshold *****************
  3518 ;; Defined at:
  3519 ;;		line 4 in file "threshold_src.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  upper_val       2    3[COMMON] int 
  3522 ;;  lower_val       2    5[COMMON] int 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      unsigned char 
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 300/0
  3531 ;;		On exit  : 300/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3534 ;;      Params:         4       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0
  3536 ;;      Temps:          1       0       0       0       0
  3537 ;;      Totals:         5       0       0       0       0
  3538 ;;Total ram usage:        5 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    2
  3541 ;; This function calls:
  3542 ;;		_write_char
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           
  3549                           ;psect for function _set_upper_threshold
  3550  001D                     _set_upper_threshold:	
  3551                           
  3552                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3556  001D  0874               	movf	set_upper_threshold@upper_val+1,w
  3557  001E  3A80               	xorlw	128
  3558  001F  3C80               	sublw	128
  3559  0020  1D03               	skipz
  3560  0021  2824               	goto	u3785
  3561  0022  0873               	movf	set_upper_threshold@upper_val,w
  3562  0023  0259               	subwf	_shi,w
  3563  0024                     u3785:	
  3564  0024  1C03               	skipc
  3565  0025  286D               	goto	l906
  3566  0026  0876               	movf	set_upper_threshold@lower_val+1,w
  3567  0027  3A80               	xorlw	128
  3568  0028  3C80               	sublw	128
  3569  0029  1D03               	skipz
  3570  002A  282F               	goto	u3795
  3571  002B  0875               	movf	set_upper_threshold@lower_val,w
  3572  002C  1283               	bcf	3,5	;RP0=0, select bank0
  3573  002D  1303               	bcf	3,6	;RP1=0, select bank0
  3574  002E  0258               	subwf	_ge,w
  3575  002F                     u3795:	
  3576  002F  1C03               	skipc
  3577  0030  286D               	goto	l906
  3578                           
  3579                           ;threshold_src.c: 6:     heat_counter ++;
  3580  0031  3001               	movlw	1
  3581  0032  1283               	bcf	3,5	;RP0=0, select bank0
  3582  0033  1303               	bcf	3,6	;RP1=0, select bank0
  3583  0034  07BA               	addwf	_heat_counter,f
  3584  0035  1803               	skipnc
  3585  0036  0ABB               	incf	_heat_counter+1,f
  3586  0037  3000               	movlw	0
  3587  0038  07BB               	addwf	_heat_counter+1,f
  3588                           
  3589                           ;threshold_src.c: 7:     heater_state = '0';
  3590  0039  3030               	movlw	48
  3591  003A  00F7               	movwf	??_set_upper_threshold
  3592  003B  0877               	movf	??_set_upper_threshold,w
  3593  003C  00CF               	movwf	_heater_state
  3594                           
  3595                           ;threshold_src.c: 8:     cooler_state = '1';
  3596  003D  3031               	movlw	49
  3597  003E  00F7               	movwf	??_set_upper_threshold
  3598  003F  0877               	movf	??_set_upper_threshold,w
  3599  0040  00CE               	movwf	_cooler_state
  3600                           
  3601                           ;threshold_src.c: 9:     write_char('W');
  3602  0041  3057               	movlw	87
  3603  0042  160A  118A  2440  120A  118A  	fcall	_write_char
  3604                           
  3605                           ;threshold_src.c: 10:     write_char('A');
  3606  0047  3041               	movlw	65
  3607  0048  160A  118A  2440  120A  118A  	fcall	_write_char
  3608                           
  3609                           ;threshold_src.c: 11:     write_char('R');
  3610  004D  3052               	movlw	82
  3611  004E  160A  118A  2440  120A  118A  	fcall	_write_char
  3612                           
  3613                           ;threshold_src.c: 12:     write_char('M');
  3614  0053  304D               	movlw	77
  3615  0054  160A  118A  2440  120A  118A  	fcall	_write_char
  3616                           
  3617                           ;threshold_src.c: 13:     if(heat_counter > 100){
  3618  0059  3000               	movlw	0
  3619  005A  023B               	subwf	_heat_counter+1,w
  3620  005B  3065               	movlw	101
  3621  005C  1903               	skipnz
  3622  005D  023A               	subwf	_heat_counter,w
  3623  005E  1C03               	skipc
  3624  005F  286D               	goto	l906
  3625                           
  3626                           ;threshold_src.c: 14:         cooler_state = '-';
  3627  0060  302D               	movlw	45
  3628  0061  00F7               	movwf	??_set_upper_threshold
  3629  0062  0877               	movf	??_set_upper_threshold,w
  3630  0063  00CE               	movwf	_cooler_state
  3631                           
  3632                           ;threshold_src.c: 15:         if(count == 2)
  3633  0064  3002               	movlw	2
  3634  0065  0638               	xorwf	_count,w
  3635  0066  0439               	iorwf	_count+1,w
  3636  0067  1D03               	btfss	3,2
  3637  0068  286D               	goto	l906
  3638                           
  3639                           ;threshold_src.c: 16:         buzzer_watcher = 'w';
  3640  0069  3077               	movlw	119
  3641  006A  00F7               	movwf	??_set_upper_threshold
  3642  006B  0877               	movf	??_set_upper_threshold,w
  3643  006C  00D1               	movwf	_buzzer_watcher
  3644  006D                     l906:	
  3645                           ;threshold_src.c: 18:     }
  3646                           
  3647                           
  3648                           ;threshold_src.c: 19:     return buzzer_watcher;
  3649  006D  1283               	bcf	3,5	;RP0=0, select bank0
  3650  006E  1303               	bcf	3,6	;RP1=0, select bank0
  3651  006F  0851               	movf	_buzzer_watcher,w
  3652  0070  0008               	return
  3653  0071                     __end_of_set_upper_threshold:	
  3654                           
  3655                           	psect	text5
  3656  16FA                     __ptext5:	
  3657 ;; *************** function _set_lower_threshold *****************
  3658 ;; Defined at:
  3659 ;;		line 22 in file "threshold_src.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  upper_val       2    3[COMMON] int 
  3662 ;;  lower_val       2    5[COMMON] int 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      unsigned char 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 300/0
  3671 ;;		On exit  : 300/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3674 ;;      Params:         4       0       0       0       0
  3675 ;;      Locals:         0       0       0       0       0
  3676 ;;      Temps:          1       0       0       0       0
  3677 ;;      Totals:         5       0       0       0       0
  3678 ;;Total ram usage:        5 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    2
  3681 ;; This function calls:
  3682 ;;		_write_char
  3683 ;; This function is called by:
  3684 ;;		_main
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _set_lower_threshold
  3690  16FA                     _set_lower_threshold:	
  3691                           
  3692                           ;threshold_src.c: 23:     if((shi <= upper_val && ge < lower_val))
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3696  16FA  0874               	movf	set_lower_threshold@upper_val+1,w
  3697  16FB  3A80               	xorlw	128
  3698  16FC  00F7               	movwf	??_set_lower_threshold
  3699  16FD  3080               	movlw	128
  3700  16FE  0277               	subwf	??_set_lower_threshold,w
  3701  16FF  1D03               	skipz
  3702  1700  2F03               	goto	u3765
  3703  1701  0859               	movf	_shi,w
  3704  1702  0273               	subwf	set_lower_threshold@upper_val,w
  3705  1703                     u3765:	
  3706  1703  1C03               	skipc
  3707  1704  2F38               	goto	l912
  3708  1705  0876               	movf	set_lower_threshold@lower_val+1,w
  3709  1706  3A80               	xorlw	128
  3710  1707  3C80               	sublw	128
  3711  1708  1D03               	skipz
  3712  1709  2F0E               	goto	u3775
  3713  170A  0875               	movf	set_lower_threshold@lower_val,w
  3714  170B  1283               	bcf	3,5	;RP0=0, select bank0
  3715  170C  1303               	bcf	3,6	;RP1=0, select bank0
  3716  170D  0258               	subwf	_ge,w
  3717  170E                     u3775:	
  3718  170E  1803               	skipnc
  3719  170F  2F38               	goto	l912
  3720                           
  3721                           ;threshold_src.c: 24:     {;threshold_src.c: 25:     count = 2;
  3722  1710  3002               	movlw	2
  3723  1711  1283               	bcf	3,5	;RP0=0, select bank0
  3724  1712  1303               	bcf	3,6	;RP1=0, select bank0
  3725  1713  00B8               	movwf	_count
  3726  1714  3000               	movlw	0
  3727  1715  00B9               	movwf	_count+1
  3728                           
  3729                           ;threshold_src.c: 26:     buzzer_watcher = 'x';
  3730  1716  3078               	movlw	120
  3731  1717  00F7               	movwf	??_set_lower_threshold
  3732  1718  0877               	movf	??_set_lower_threshold,w
  3733  1719  00D1               	movwf	_buzzer_watcher
  3734                           
  3735                           ;threshold_src.c: 27:     heater_state = '0';
  3736  171A  3030               	movlw	48
  3737  171B  00F7               	movwf	??_set_lower_threshold
  3738  171C  0877               	movf	??_set_lower_threshold,w
  3739  171D  00CF               	movwf	_heater_state
  3740                           
  3741                           ;threshold_src.c: 28:     cooler_state = '0';
  3742  171E  3030               	movlw	48
  3743  171F  00F7               	movwf	??_set_lower_threshold
  3744  1720  0877               	movf	??_set_lower_threshold,w
  3745  1721  00CE               	movwf	_cooler_state
  3746                           
  3747                           ;threshold_src.c: 29:     write_char('O');
  3748  1722  304F               	movlw	79
  3749  1723  160A  118A  2440  160A  118A  	fcall	_write_char
  3750                           
  3751                           ;threshold_src.c: 30:     write_char('K');
  3752  1728  304B               	movlw	75
  3753  1729  160A  118A  2440  160A  118A  	fcall	_write_char
  3754                           
  3755                           ;threshold_src.c: 31:     write_char(' ');
  3756  172E  3020               	movlw	32
  3757  172F  160A  118A  2440  160A  118A  	fcall	_write_char
  3758                           
  3759                           ;threshold_src.c: 32:     write_char(' ');
  3760  1734  3020               	movlw	32
  3761  1735  160A  118A  2440   	fcall	_write_char
  3762  1738                     l912:	
  3763                           ;threshold_src.c: 33:     }
  3764                           
  3765                           
  3766                           ;threshold_src.c: 34:     return buzzer_watcher;
  3767  1738  1283               	bcf	3,5	;RP0=0, select bank0
  3768  1739  1303               	bcf	3,6	;RP1=0, select bank0
  3769  173A  0851               	movf	_buzzer_watcher,w
  3770  173B  0008               	return
  3771  173C                     __end_of_set_lower_threshold:	
  3772                           
  3773                           	psect	text6
  3774  1457                     __ptext6:	
  3775 ;; *************** function _set_beep_threshhold *****************
  3776 ;; Defined at:
  3777 ;;		line 5 in file "buzzer_src.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  x               1    wreg     unsigned char 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  x               1    2[COMMON] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 300/0
  3788 ;;		On exit  : 300/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3791 ;;      Params:         0       0       0       0       0
  3792 ;;      Locals:         1       0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0
  3794 ;;      Totals:         1       0       0       0       0
  3795 ;;Total ram usage:        1 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    1
  3798 ;; This function calls:
  3799 ;;		_button_delay
  3800 ;; This function is called by:
  3801 ;;		_main
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _set_beep_threshhold
  3807  1457                     _set_beep_threshhold:	
  3808                           
  3809                           ;incstack = 0
  3810                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3811                           ;set_beep_threshhold@x stored from wreg
  3812  1457  00F2               	movwf	set_beep_threshhold@x
  3813                           
  3814                           ;buzzer_src.c: 6:     if (x == 'w'){
  3815  1458  3077               	movlw	119
  3816  1459  0672               	xorwf	set_beep_threshhold@x,w
  3817  145A  1D03               	btfss	3,2
  3818  145B  2C70               	goto	l4591
  3819                           
  3820                           ;buzzer_src.c: 7:         RE2 = 1;
  3821  145C  1509               	bsf	9,2	;volatile
  3822                           
  3823                           ;buzzer_src.c: 8:         button_delay();
  3824  145D  160A  118A  23F0  160A  118A  	fcall	_button_delay
  3825                           
  3826                           ;buzzer_src.c: 9:         RE2 = 0;
  3827  1462  1283               	bcf	3,5	;RP0=0, select bank0
  3828  1463  1303               	bcf	3,6	;RP1=0, select bank0
  3829  1464  1109               	bcf	9,2	;volatile
  3830                           
  3831                           ;buzzer_src.c: 10:         button_delay();
  3832  1465  160A  118A  23F0  160A  118A  	fcall	_button_delay
  3833                           
  3834                           ;buzzer_src.c: 11:         RE2 = 1;
  3835  146A  1283               	bcf	3,5	;RP0=0, select bank0
  3836  146B  1303               	bcf	3,6	;RP1=0, select bank0
  3837  146C  1509               	bsf	9,2	;volatile
  3838                           
  3839                           ;buzzer_src.c: 12:         button_delay();
  3840  146D  160A  118A  23F0   	fcall	_button_delay
  3841  1470                     l4591:	
  3842                           
  3843                           ;buzzer_src.c: 13:         RE2 = 0;
  3844  1470  1283               	bcf	3,5	;RP0=0, select bank0
  3845  1471  1303               	bcf	3,6	;RP1=0, select bank0
  3846  1472  1109               	bcf	9,2	;volatile
  3847  1473  0008               	return
  3848  1474                     __end_of_set_beep_threshhold:	
  3849                           
  3850                           	psect	text7
  3851  0801                     __ptext7:	
  3852 ;; *************** function _reset_alarm *****************
  3853 ;; Defined at:
  3854 ;;		line 37 in file "threshold_src.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      unsigned char 
  3861 ;; Registers used:
  3862 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 300/0
  3865 ;;		On exit  : 300/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3868 ;;      Params:         0       0       0       0       0
  3869 ;;      Locals:         0       0       0       0       0
  3870 ;;      Temps:          1       0       0       0       0
  3871 ;;      Totals:         1       0       0       0       0
  3872 ;;Total ram usage:        1 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    2
  3875 ;; This function calls:
  3876 ;;		_write_char
  3877 ;; This function is called by:
  3878 ;;		_main
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _reset_alarm
  3884  0801                     _reset_alarm:	
  3885                           
  3886                           ;threshold_src.c: 38:     RC0 = 1;
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3890  0801  1407               	bsf	7,0	;volatile
  3891                           
  3892                           ;threshold_src.c: 39:     RC1 = 1;
  3893  0802  1487               	bsf	7,1	;volatile
  3894                           
  3895                           ;threshold_src.c: 40:     RC2 = 1;
  3896  0803  1507               	bsf	7,2	;volatile
  3897                           
  3898                           ;threshold_src.c: 41:     RC3 = 0;
  3899  0804  1187               	bcf	7,3	;volatile
  3900                           
  3901                           ;threshold_src.c: 42:     if(RC4 == 0){
  3902  0805  1A07               	btfsc	7,4	;volatile
  3903  0806  282B               	goto	l4577
  3904                           
  3905                           ;threshold_src.c: 43:         count = 0;
  3906  0807  01B8               	clrf	_count
  3907  0808  01B9               	clrf	_count+1
  3908                           
  3909                           ;threshold_src.c: 44:         buzzer_watcher = 'x';
  3910  0809  3078               	movlw	120
  3911  080A  00F3               	movwf	??_reset_alarm
  3912  080B  0873               	movf	??_reset_alarm,w
  3913  080C  00D1               	movwf	_buzzer_watcher
  3914                           
  3915                           ;threshold_src.c: 45:         heat_counter = 0;
  3916  080D  01BA               	clrf	_heat_counter
  3917  080E  01BB               	clrf	_heat_counter+1
  3918                           
  3919                           ;threshold_src.c: 46:         write_char('R');
  3920  080F  3052               	movlw	82
  3921  0810  160A  118A  2440  120A  158A  	fcall	_write_char
  3922                           
  3923                           ;threshold_src.c: 47:         write_char('E');
  3924  0815  3045               	movlw	69
  3925  0816  160A  118A  2440  120A  158A  	fcall	_write_char
  3926                           
  3927                           ;threshold_src.c: 48:         write_char('S');
  3928  081B  3053               	movlw	83
  3929  081C  160A  118A  2440  120A  158A  	fcall	_write_char
  3930                           
  3931                           ;threshold_src.c: 49:         write_char('E');
  3932  0821  3045               	movlw	69
  3933  0822  160A  118A  2440  120A  158A  	fcall	_write_char
  3934                           
  3935                           ;threshold_src.c: 50:         write_char('T');
  3936  0827  3054               	movlw	84
  3937  0828  160A  118A  2440   	fcall	_write_char
  3938  082B                     l4577:	
  3939                           
  3940                           ;threshold_src.c: 52:     return buzzer_watcher;
  3941  082B  0851               	movf	_buzzer_watcher,w
  3942  082C  0008               	return
  3943  082D                     __end_of_reset_alarm:	
  3944                           
  3945                           	psect	text8
  3946  14D9                     __ptext8:	
  3947 ;; *************** function _lcd_init *****************
  3948 ;; Defined at:
  3949 ;;		line 14 in file "LCD_src.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  i               2    0        int 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 300/100
  3960 ;;		On exit  : 300/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3963 ;;      Params:         0       0       0       0       0
  3964 ;;      Locals:         0       0       0       0       0
  3965 ;;      Temps:          0       0       0       0       0
  3966 ;;      Totals:         0       0       0       0       0
  3967 ;;Total ram usage:        0 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    2
  3970 ;; This function calls:
  3971 ;;		_delay_screen
  3972 ;;		_write_cmd
  3973 ;; This function is called by:
  3974 ;;		_main
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _lcd_init
  3980  14D9                     _lcd_init:	
  3981                           
  3982                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3986  14D9  0185               	clrf	5	;volatile
  3987                           
  3988                           ;LCD_src.c: 18:  RA0=0;
  3989  14DA  1283               	bcf	3,5	;RP0=0, select bank0
  3990  14DB  1005               	bcf	5,0	;volatile
  3991                           
  3992                           ;LCD_src.c: 19:  delay_screen();
  3993  14DC  160A  118A  2404  160A  118A  	fcall	_delay_screen
  3994                           
  3995                           ;LCD_src.c: 20:  RA0=1;
  3996  14E1  1283               	bcf	3,5	;RP0=0, select bank0
  3997  14E2  1303               	bcf	3,6	;RP1=0, select bank0
  3998  14E3  1405               	bsf	5,0	;volatile
  3999                           
  4000                           ;LCD_src.c: 21:  RA2=1;
  4001  14E4  1505               	bsf	5,2	;volatile
  4002                           
  4003                           ;LCD_src.c: 22:  write_cmd(0x30);
  4004  14E5  3030               	movlw	48
  4005  14E6  120A  118A  2006  160A  118A  	fcall	_write_cmd
  4006                           
  4007                           ;LCD_src.c: 23:  write_cmd(0x01);
  4008  14EB  3001               	movlw	1
  4009  14EC  120A  118A  2006  160A  118A  	fcall	_write_cmd
  4010                           
  4011                           ;LCD_src.c: 24:  write_cmd(0x06);
  4012  14F1  3006               	movlw	6
  4013  14F2  120A  118A  2006  160A  118A  	fcall	_write_cmd
  4014                           
  4015                           ;LCD_src.c: 25:  write_cmd(0x0c);
  4016  14F7  300C               	movlw	12
  4017  14F8  120A  118A  2006   	fcall	_write_cmd
  4018  14FB  0008               	return
  4019  14FC                     __end_of_lcd_init:	
  4020                           
  4021                           	psect	text9
  4022  142C                     __ptext9:	
  4023 ;; *************** function _initialise_buttons *****************
  4024 ;; Defined at:
  4025 ;;		line 11 in file "Button_src.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2
  4034 ;; Tracked objects:
  4035 ;;		On entry : 300/0
  4036 ;;		On exit  : 300/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4039 ;;      Params:         0       0       0       0       0
  4040 ;;      Locals:         0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0
  4042 ;;      Totals:         0       0       0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; This function calls:
  4046 ;;		Nothing
  4047 ;; This function is called by:
  4048 ;;		_main
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           
  4053                           ;psect for function _initialise_buttons
  4054  142C                     _initialise_buttons:	
  4055                           
  4056                           ;Button_src.c: 12:     ADCON1 = 0x06;
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _initialise_buttons: [wreg+status,2]
  4060  142C  3006               	movlw	6
  4061  142D  1683               	bsf	3,5	;RP0=1, select bank1
  4062  142E  009F               	movwf	31	;volatile
  4063                           
  4064                           ;Button_src.c: 13:     TRISC = 0xf0;
  4065  142F  30F0               	movlw	240
  4066  1430  0087               	movwf	7	;volatile
  4067                           
  4068                           ;Button_src.c: 14:     a = 0x00;
  4069  1431  1283               	bcf	3,5	;RP0=0, select bank0
  4070  1432  01C8               	clrf	_a
  4071                           
  4072                           ;Button_src.c: 15:     b = 0x00;
  4073  1433  01C7               	clrf	_b
  4074                           
  4075                           ;Button_src.c: 16:     c = 0x00;
  4076  1434  01C6               	clrf	_c
  4077                           
  4078                           ;Button_src.c: 17:     z = 0;
  4079  1435  01AA               	clrf	_z
  4080  1436  01AB               	clrf	_z+1
  4081                           
  4082                           ;Button_src.c: 18:     day_low = 0;
  4083  1437  01A8               	clrf	_day_low
  4084  1438  01A9               	clrf	_day_low+1
  4085                           
  4086                           ;Button_src.c: 19:     stats = 1;
  4087  1439  3001               	movlw	1
  4088  143A  00A4               	movwf	_stats
  4089  143B  3000               	movlw	0
  4090  143C  00A5               	movwf	_stats+1
  4091                           
  4092                           ;Button_src.c: 20:     p = 0;
  4093  143D  01A2               	clrf	_p
  4094  143E  01A3               	clrf	_p+1
  4095  143F  0008               	return
  4096  1440                     __end_of_initialise_buttons:	
  4097                           
  4098                           	psect	text10
  4099  1386                     __ptext10:	
  4100 ;; *************** function _init_temp *****************
  4101 ;; Defined at:
  4102 ;;		line 6 in file "Thermometer_src.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;		None
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		status,2
  4111 ;; Tracked objects:
  4112 ;;		On entry : 200/100
  4113 ;;		On exit  : 300/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4116 ;;      Params:         0       0       0       0       0
  4117 ;;      Locals:         0       0       0       0       0
  4118 ;;      Temps:          0       0       0       0       0
  4119 ;;      Totals:         0       0       0       0       0
  4120 ;;Total ram usage:        0 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           
  4130                           ;psect for function _init_temp
  4131  1386                     _init_temp:	
  4132                           
  4133                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in _init_temp: [status,2]
  4137  1386  1683               	bsf	3,5	;RP0=1, select bank1
  4138  1387  0189               	clrf	9	;volatile
  4139                           
  4140                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4141  1388  1283               	bcf	3,5	;RP0=0, select bank0
  4142  1389  0189               	clrf	9	;volatile
  4143  138A  0008               	return
  4144  138B                     __end_of_init_temp:	
  4145                           
  4146                           	psect	text11
  4147  138B                     __ptext11:	
  4148 ;; *************** function _init *****************
  4149 ;; Defined at:
  4150 ;;		line 5 in file "LCD_src.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2
  4159 ;; Tracked objects:
  4160 ;;		On entry : 300/0
  4161 ;;		On exit  : 300/100
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4164 ;;      Params:         0       0       0       0       0
  4165 ;;      Locals:         0       0       0       0       0
  4166 ;;      Temps:          0       0       0       0       0
  4167 ;;      Totals:         0       0       0       0       0
  4168 ;;Total ram usage:        0 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_main
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _init
  4179  138B                     _init:	
  4180                           
  4181                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in _init: [wreg+status,2]
  4185  138B  3007               	movlw	7
  4186  138C  1683               	bsf	3,5	;RP0=1, select bank1
  4187  138D  009F               	movwf	31	;volatile
  4188                           
  4189                           ;LCD_src.c: 8:  TRISA0=1;
  4190  138E  1405               	bsf	5,0	;volatile
  4191                           
  4192                           ;LCD_src.c: 9:  TRISD=0X00;
  4193  138F  0188               	clrf	8	;volatile
  4194                           
  4195                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4196  1390  0181               	clrf	1	;volatile
  4197                           
  4198                           ;LCD_src.c: 11:  TRISE = 0X00;
  4199  1391  0189               	clrf	9	;volatile
  4200  1392  0008               	return
  4201  1393                     __end_of_init:	
  4202                           
  4203                           	psect	text12
  4204  1592                     __ptext12:	
  4205 ;; *************** function _get_time *****************
  4206 ;; Defined at:
  4207 ;;		line 23 in file "clock_src.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  i               2    6[COMMON] int 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 300/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4221 ;;      Params:         0       0       0       0       0
  4222 ;;      Locals:         2       0       0       0       0
  4223 ;;      Temps:          1       0       0       0       0
  4224 ;;      Totals:         3       0       0       0       0
  4225 ;;Total ram usage:        3 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    1
  4228 ;; This function calls:
  4229 ;;		_time_read_1
  4230 ;;		_time_write_1
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _get_time
  4238  1592                     _get_time:	
  4239                           
  4240                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4244  1592  1283               	bcf	3,5	;RP0=0, select bank0
  4245  1593  1303               	bcf	3,6	;RP1=0, select bank0
  4246  1594  1686               	bsf	6,5	;volatile
  4247                           
  4248                           ;clock_src.c: 27:    time_write_1(0xbf);
  4249  1595  30BF               	movlw	191
  4250  1596  160A  118A  2544  160A  118A  	fcall	_time_write_1
  4251                           
  4252                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4253  159B  01F6               	clrf	get_time@i
  4254  159C  01F7               	clrf	get_time@i+1
  4255  159D                     l3817:	
  4256                           
  4257                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4258  159D  160A  118A  25BE  160A  118A  	fcall	_time_read_1
  4259  15A2  00F5               	movwf	??_get_time
  4260  15A3  0876               	movf	get_time@i,w
  4261  15A4  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4262  15A5  0084               	movwf	4
  4263  15A6  0875               	movf	??_get_time,w
  4264  15A7  1383               	bcf	3,7	;select IRP bank1
  4265  15A8  0080               	movwf	0
  4266                           
  4267                           ;clock_src.c: 31:      }
  4268  15A9  3001               	movlw	1
  4269  15AA  07F6               	addwf	get_time@i,f
  4270  15AB  1803               	skipnc
  4271  15AC  0AF7               	incf	get_time@i+1,f
  4272  15AD  3000               	movlw	0
  4273  15AE  07F7               	addwf	get_time@i+1,f
  4274  15AF  0877               	movf	get_time@i+1,w
  4275  15B0  3A80               	xorlw	128
  4276  15B1  00FF               	movwf	127
  4277  15B2  3080               	movlw	128
  4278  15B3  027F               	subwf	127,w
  4279  15B4  1D03               	skipz
  4280  15B5  2DB8               	goto	u3055
  4281  15B6  3007               	movlw	7
  4282  15B7  0276               	subwf	get_time@i,w
  4283  15B8                     u3055:	
  4284  15B8  1C03               	skipc
  4285  15B9  2D9D               	goto	l3817
  4286                           
  4287                           ;clock_src.c: 32:    RB5=0;
  4288  15BA  1283               	bcf	3,5	;RP0=0, select bank0
  4289  15BB  1303               	bcf	3,6	;RP1=0, select bank0
  4290  15BC  1286               	bcf	6,5	;volatile
  4291  15BD  0008               	return
  4292  15BE                     __end_of_get_time:	
  4293                           
  4294                           	psect	text13
  4295  15BE                     __ptext13:	
  4296 ;; *************** function _time_read_1 *****************
  4297 ;; Defined at:
  4298 ;;		line 130 in file "clock_src.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  j               2    2[COMMON] int 
  4303 ;;  time_rx         1    4[COMMON] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      unsigned char 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0, btemp+1
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 300/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4313 ;;      Params:         0       0       0       0       0
  4314 ;;      Locals:         3       0       0       0       0
  4315 ;;      Temps:          2       0       0       0       0
  4316 ;;      Totals:         5       0       0       0       0
  4317 ;;Total ram usage:        5 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_get_time
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _time_read_1
  4328  15BE                     _time_read_1:	
  4329                           
  4330                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4334  15BE  01F4               	clrf	time_read_1@time_rx
  4335                           
  4336                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4337  15BF  1683               	bsf	3,5	;RP0=1, select bank1
  4338  15C0  1303               	bcf	3,6	;RP1=0, select bank1
  4339  15C1  1606               	bsf	6,4	;volatile
  4340                           
  4341                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4342  15C2  01F2               	clrf	time_read_1@j
  4343  15C3  01F3               	clrf	time_read_1@j+1
  4344  15C4                     l452:	
  4345                           
  4346                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4347  15C4  1283               	bcf	3,5	;RP0=0, select bank0
  4348  15C5  1303               	bcf	3,6	;RP1=0, select bank0
  4349  15C6  1006               	bcf	6,0	;volatile
  4350                           
  4351                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4352  15C7  0874               	movf	time_read_1@time_rx,w
  4353  15C8  00F0               	movwf	??_time_read_1
  4354  15C9  1003               	clrc
  4355  15CA  0C70               	rrf	??_time_read_1,w
  4356  15CB  00F1               	movwf	??_time_read_1+1
  4357  15CC  0871               	movf	??_time_read_1+1,w
  4358  15CD  00F4               	movwf	time_read_1@time_rx
  4359                           
  4360                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4361  15CE  1E06               	btfss	6,4	;volatile
  4362  15CF  2DD5               	goto	l3401
  4363  15D0  0874               	movf	time_read_1@time_rx,w
  4364  15D1  3880               	iorlw	128
  4365  15D2  00F0               	movwf	??_time_read_1
  4366  15D3  0870               	movf	??_time_read_1,w
  4367  15D4  00F4               	movwf	time_read_1@time_rx
  4368  15D5                     l3401:	
  4369                           
  4370                           ;clock_src.c: 141:        RB0=1;
  4371  15D5  1406               	bsf	6,0	;volatile
  4372                           
  4373                           ;clock_src.c: 142:       }
  4374  15D6  3001               	movlw	1
  4375  15D7  07F2               	addwf	time_read_1@j,f
  4376  15D8  1803               	skipnc
  4377  15D9  0AF3               	incf	time_read_1@j+1,f
  4378  15DA  3000               	movlw	0
  4379  15DB  07F3               	addwf	time_read_1@j+1,f
  4380  15DC  0873               	movf	time_read_1@j+1,w
  4381  15DD  3A80               	xorlw	128
  4382  15DE  00FF               	movwf	127
  4383  15DF  3080               	movlw	128
  4384  15E0  027F               	subwf	127,w
  4385  15E1  1D03               	skipz
  4386  15E2  2DE5               	goto	u2225
  4387  15E3  3008               	movlw	8
  4388  15E4  0272               	subwf	time_read_1@j,w
  4389  15E5                     u2225:	
  4390  15E5  1C03               	skipc
  4391  15E6  2DC4               	goto	l452
  4392                           
  4393                           ;clock_src.c: 143:     TRISB4=0;
  4394  15E7  1683               	bsf	3,5	;RP0=1, select bank1
  4395  15E8  1303               	bcf	3,6	;RP1=0, select bank1
  4396  15E9  1206               	bcf	6,4	;volatile
  4397                           
  4398                           ;clock_src.c: 144:     RB0=0;
  4399  15EA  1283               	bcf	3,5	;RP0=0, select bank0
  4400  15EB  1006               	bcf	6,0	;volatile
  4401                           
  4402                           ;clock_src.c: 145:     return(time_rx);
  4403  15EC  0874               	movf	time_read_1@time_rx,w
  4404  15ED  0008               	return
  4405  15EE                     __end_of_time_read_1:	
  4406                           
  4407                           	psect	text14
  4408  096F                     __ptext14:	
  4409 ;; *************** function _get_temp *****************
  4410 ;; Defined at:
  4411 ;;		line 89 in file "Thermometer_src.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  i               2    0        int 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4420 ;; Tracked objects:
  4421 ;;		On entry : 300/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4425 ;;      Params:         0       0       0       0       0
  4426 ;;      Locals:         0       0       0       0       0
  4427 ;;      Temps:          0       4       0       0       0
  4428 ;;      Totals:         0       4       0       0       0
  4429 ;;Total ram usage:        4 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    2
  4432 ;; This function calls:
  4433 ;;		___lbdiv
  4434 ;;		___lbmod
  4435 ;;		___lwdiv
  4436 ;;		___lwmod
  4437 ;;		_delay2
  4438 ;;		_read_byte
  4439 ;;		_reset_temp
  4440 ;;		_write_byte
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _get_temp
  4448  096F                     _get_temp:	
  4449                           
  4450                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4454  096F  1683               	bsf	3,5	;RP0=1, select bank1
  4455  0970  1409               	bsf	9,0	;volatile
  4456                           
  4457                           ;Thermometer_src.c: 93: reset_temp();
  4458  0971  160A  118A  2654  120A  158A  	fcall	_reset_temp
  4459                           
  4460                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4461  0976  30CC               	movlw	204
  4462  0977  160A  118A  2688  120A  158A  	fcall	_write_byte
  4463                           
  4464                           ;Thermometer_src.c: 95: delay2();
  4465  097C  160A  118A  2418  120A  158A  	fcall	_delay2
  4466                           
  4467                           ;Thermometer_src.c: 96: write_byte(0X44);
  4468  0981  3044               	movlw	68
  4469  0982  160A  118A  2688  120A  158A  	fcall	_write_byte
  4470                           
  4471                           ;Thermometer_src.c: 98: reset_temp();
  4472  0987  160A  118A  2654  120A  158A  	fcall	_reset_temp
  4473                           
  4474                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4475  098C  30CC               	movlw	204
  4476  098D  160A  118A  2688  120A  158A  	fcall	_write_byte
  4477                           
  4478                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4479  0992  30BE               	movlw	190
  4480  0993  160A  118A  2688  120A  158A  	fcall	_write_byte
  4481                           
  4482                           ;Thermometer_src.c: 101: TLV=read_byte();
  4483  0998  160A  118A  2620  120A  158A  	fcall	_read_byte
  4484  099D  1283               	bcf	3,5	;RP0=0, select bank0
  4485  099E  1303               	bcf	3,6	;RP1=0, select bank0
  4486  099F  00DE               	movwf	??_get_temp
  4487  09A0  085E               	movf	??_get_temp,w
  4488  09A1  00DD               	movwf	_TLV
  4489                           
  4490                           ;Thermometer_src.c: 102: THV=read_byte();
  4491  09A2  160A  118A  2620  120A  158A  	fcall	_read_byte
  4492  09A7  1283               	bcf	3,5	;RP0=0, select bank0
  4493  09A8  1303               	bcf	3,6	;RP1=0, select bank0
  4494  09A9  00DE               	movwf	??_get_temp
  4495  09AA  085E               	movf	??_get_temp,w
  4496  09AB  00DC               	movwf	_THV
  4497                           
  4498                           ;Thermometer_src.c: 103: TRISE0 =1;
  4499  09AC  1683               	bsf	3,5	;RP0=1, select bank1
  4500  09AD  1409               	bsf	9,0	;volatile
  4501                           
  4502                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4503  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  4504  09AF  085C               	movf	_THV,w
  4505  09B0  00DE               	movwf	??_get_temp
  4506  09B1  3004               	movlw	4
  4507  09B2                     u2985:	
  4508  09B2  1003               	clrc
  4509  09B3  0DDE               	rlf	??_get_temp,f
  4510  09B4  3EFF               	addlw	-1
  4511  09B5  1D03               	skipz
  4512  09B6  29B2               	goto	u2985
  4513  09B7  303F               	movlw	63
  4514  09B8  055E               	andwf	??_get_temp,w
  4515  09B9  00DF               	movwf	??_get_temp+1
  4516  09BA  085D               	movf	_TLV,w
  4517  09BB  00E0               	movwf	??_get_temp+2
  4518  09BC  3004               	movlw	4
  4519  09BD                     u2995:	
  4520  09BD  1003               	clrc
  4521  09BE  0CE0               	rrf	??_get_temp+2,f
  4522  09BF  3EFF               	addlw	-1
  4523  09C0  1D03               	skipz
  4524  09C1  29BD               	goto	u2995
  4525  09C2  0860               	movf	??_get_temp+2,w
  4526  09C3  045F               	iorwf	??_get_temp+1,w
  4527  09C4  00E1               	movwf	??_get_temp+3
  4528  09C5  0861               	movf	??_get_temp+3,w
  4529  09C6  00DB               	movwf	_TZ
  4530                           
  4531                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4532  09C7  085D               	movf	_TLV,w
  4533  09C8  00DE               	movwf	??_get_temp
  4534  09C9  3003               	movlw	3
  4535  09CA                     u3005:	
  4536  09CA  1003               	clrc
  4537  09CB  0DDE               	rlf	??_get_temp,f
  4538  09CC  3EFF               	addlw	-1
  4539  09CD  1D03               	skipz
  4540  09CE  29CA               	goto	u3005
  4541  09CF  1003               	clrc
  4542  09D0  0D5E               	rlf	??_get_temp,w
  4543  09D1  00DF               	movwf	??_get_temp+1
  4544  09D2  085F               	movf	??_get_temp+1,w
  4545  09D3  00DA               	movwf	_TX
  4546                           
  4547                           ;Thermometer_src.c: 107: ge=TZ%10;
  4548  09D4  300A               	movlw	10
  4549  09D5  00DE               	movwf	??_get_temp
  4550  09D6  085E               	movf	??_get_temp,w
  4551  09D7  00F0               	movwf	___lbmod@divisor
  4552  09D8  085B               	movf	_TZ,w
  4553  09D9  160A  118A  24B6  120A  158A  	fcall	___lbmod
  4554  09DE  00DF               	movwf	??_get_temp+1
  4555  09DF  085F               	movf	??_get_temp+1,w
  4556  09E0  00D8               	movwf	_ge
  4557                           
  4558                           ;Thermometer_src.c: 108: shi=TZ/10;
  4559  09E1  300A               	movlw	10
  4560  09E2  00DE               	movwf	??_get_temp
  4561  09E3  085E               	movf	??_get_temp,w
  4562  09E4  00F0               	movwf	___lbdiv@divisor
  4563  09E5  085B               	movf	_TZ,w
  4564  09E6  160A  118A  2495  120A  158A  	fcall	___lbdiv
  4565  09EB  00DF               	movwf	??_get_temp+1
  4566  09EC  085F               	movf	??_get_temp+1,w
  4567  09ED  00D9               	movwf	_shi
  4568                           
  4569                           ;Thermometer_src.c: 109: wd=0;
  4570  09EE  01BC               	clrf	_wd
  4571  09EF  01BD               	clrf	_wd+1
  4572                           
  4573                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4574  09F0  1FDA               	btfss	_TX,7
  4575  09F1  29FA               	goto	l3785
  4576  09F2  083C               	movf	_wd,w
  4577  09F3  3E88               	addlw	136
  4578  09F4  00BC               	movwf	_wd
  4579  09F5  083D               	movf	_wd+1,w
  4580  09F6  1803               	skipnc
  4581  09F7  3E01               	addlw	1
  4582  09F8  3E13               	addlw	19
  4583  09F9  00BD               	movwf	_wd+1
  4584  09FA                     l3785:	
  4585                           
  4586                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4587  09FA  1F5A               	btfss	_TX,6
  4588  09FB  2A04               	goto	l3789
  4589  09FC  083C               	movf	_wd,w
  4590  09FD  3EC4               	addlw	196
  4591  09FE  00BC               	movwf	_wd
  4592  09FF  083D               	movf	_wd+1,w
  4593  0A00  1803               	skipnc
  4594  0A01  3E01               	addlw	1
  4595  0A02  3E09               	addlw	9
  4596  0A03  00BD               	movwf	_wd+1
  4597  0A04                     l3789:	
  4598                           
  4599                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4600  0A04  1EDA               	btfss	_TX,5
  4601  0A05  2A0E               	goto	l3793
  4602  0A06  083C               	movf	_wd,w
  4603  0A07  3EE2               	addlw	226
  4604  0A08  00BC               	movwf	_wd
  4605  0A09  083D               	movf	_wd+1,w
  4606  0A0A  1803               	skipnc
  4607  0A0B  3E01               	addlw	1
  4608  0A0C  3E04               	addlw	4
  4609  0A0D  00BD               	movwf	_wd+1
  4610  0A0E                     l3793:	
  4611                           
  4612                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4613  0A0E  1E5A               	btfss	_TX,4
  4614  0A0F  2A18               	goto	l3797
  4615  0A10  083C               	movf	_wd,w
  4616  0A11  3E71               	addlw	113
  4617  0A12  00BC               	movwf	_wd
  4618  0A13  083D               	movf	_wd+1,w
  4619  0A14  1803               	skipnc
  4620  0A15  3E01               	addlw	1
  4621  0A16  3E02               	addlw	2
  4622  0A17  00BD               	movwf	_wd+1
  4623  0A18                     l3797:	
  4624                           
  4625                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4626  0A18  30E8               	movlw	232
  4627  0A19  00F6               	movwf	___lwdiv@divisor
  4628  0A1A  3003               	movlw	3
  4629  0A1B  00F7               	movwf	___lwdiv@divisor+1
  4630  0A1C  083D               	movf	_wd+1,w
  4631  0A1D  00F9               	movwf	___lwdiv@dividend+1
  4632  0A1E  083C               	movf	_wd,w
  4633  0A1F  00F8               	movwf	___lwdiv@dividend
  4634  0A20  160A  118A  26BE  120A  158A  	fcall	___lwdiv
  4635  0A25  0876               	movf	?___lwdiv,w
  4636  0A26  00DE               	movwf	??_get_temp
  4637  0A27  085E               	movf	??_get_temp,w
  4638  0A28  00D7               	movwf	_shifen
  4639                           
  4640                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4641  0A29  3064               	movlw	100
  4642  0A2A  00F6               	movwf	___lwdiv@divisor
  4643  0A2B  3000               	movlw	0
  4644  0A2C  00F7               	movwf	___lwdiv@divisor+1
  4645  0A2D  083D               	movf	_wd+1,w
  4646  0A2E  00F3               	movwf	___lwmod@dividend+1
  4647  0A2F  083C               	movf	_wd,w
  4648  0A30  00F2               	movwf	___lwmod@dividend
  4649  0A31  30E8               	movlw	232
  4650  0A32  00F0               	movwf	___lwmod@divisor
  4651  0A33  3003               	movlw	3
  4652  0A34  00F1               	movwf	___lwmod@divisor+1
  4653  0A35  160A  118A  25EE  120A  158A  	fcall	___lwmod
  4654  0A3A  0871               	movf	?___lwmod+1,w
  4655  0A3B  00F9               	movwf	___lwdiv@dividend+1
  4656  0A3C  0870               	movf	?___lwmod,w
  4657  0A3D  00F8               	movwf	___lwdiv@dividend
  4658  0A3E  160A  118A  26BE  120A  158A  	fcall	___lwdiv
  4659  0A43  0876               	movf	?___lwdiv,w
  4660  0A44  00DE               	movwf	??_get_temp
  4661  0A45  085E               	movf	??_get_temp,w
  4662  0A46  00D6               	movwf	_baifen
  4663                           
  4664                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4665  0A47  300A               	movlw	10
  4666  0A48  00F6               	movwf	___lwdiv@divisor
  4667  0A49  3000               	movlw	0
  4668  0A4A  00F7               	movwf	___lwdiv@divisor+1
  4669  0A4B  083D               	movf	_wd+1,w
  4670  0A4C  00F3               	movwf	___lwmod@dividend+1
  4671  0A4D  083C               	movf	_wd,w
  4672  0A4E  00F2               	movwf	___lwmod@dividend
  4673  0A4F  3064               	movlw	100
  4674  0A50  00F0               	movwf	___lwmod@divisor
  4675  0A51  3000               	movlw	0
  4676  0A52  00F1               	movwf	___lwmod@divisor+1
  4677  0A53  160A  118A  25EE  120A  158A  	fcall	___lwmod
  4678  0A58  0871               	movf	?___lwmod+1,w
  4679  0A59  00F9               	movwf	___lwdiv@dividend+1
  4680  0A5A  0870               	movf	?___lwmod,w
  4681  0A5B  00F8               	movwf	___lwdiv@dividend
  4682  0A5C  160A  118A  26BE  120A  158A  	fcall	___lwdiv
  4683  0A61  0876               	movf	?___lwdiv,w
  4684  0A62  00DE               	movwf	??_get_temp
  4685  0A63  085E               	movf	??_get_temp,w
  4686  0A64  00D5               	movwf	_qianfen
  4687                           
  4688                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4689  0A65  300A               	movlw	10
  4690  0A66  00F0               	movwf	___lwmod@divisor
  4691  0A67  3000               	movlw	0
  4692  0A68  00F1               	movwf	___lwmod@divisor+1
  4693  0A69  083D               	movf	_wd+1,w
  4694  0A6A  00F3               	movwf	___lwmod@dividend+1
  4695  0A6B  083C               	movf	_wd,w
  4696  0A6C  00F2               	movwf	___lwmod@dividend
  4697  0A6D  160A  118A  25EE   	fcall	___lwmod
  4698  0A70  0870               	movf	?___lwmod,w
  4699  0A71  00DE               	movwf	??_get_temp
  4700  0A72  085E               	movf	??_get_temp,w
  4701  0A73  00D4               	movwf	_wanfen
  4702                           
  4703                           ;Thermometer_src.c: 118: __nop();
  4704  0A74  0000               	nop
  4705  0A75  0008               	return
  4706  0A76                     __end_of_get_temp:	
  4707                           
  4708                           	psect	text15
  4709  1688                     __ptext15:	
  4710 ;; *************** function _write_byte *****************
  4711 ;; Defined at:
  4712 ;;		line 40 in file "Thermometer_src.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  val             1    wreg     unsigned char 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  val             1    7[COMMON] unsigned char 
  4717 ;;  i               1    8[COMMON] unsigned char 
  4718 ;;  temp            1    6[COMMON] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/100
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4728 ;;      Params:         0       0       0       0       0
  4729 ;;      Locals:         3       0       0       0       0
  4730 ;;      Temps:          2       0       0       0       0
  4731 ;;      Totals:         5       0       0       0       0
  4732 ;;Total ram usage:        5 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    1
  4735 ;; This function calls:
  4736 ;;		_delay_temp
  4737 ;; This function is called by:
  4738 ;;		_get_temp
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _write_byte
  4744  1688                     _write_byte:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4748                           ;write_byte@val stored from wreg
  4749  1688  00F7               	movwf	write_byte@val
  4750                           
  4751                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4752  1689  3008               	movlw	8
  4753  168A  00F4               	movwf	??_write_byte
  4754  168B  0874               	movf	??_write_byte,w
  4755  168C  00F8               	movwf	write_byte@i
  4756  168D                     l3289:	
  4757                           
  4758                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4759  168D  0877               	movf	write_byte@val,w
  4760  168E  3901               	andlw	1
  4761  168F  00F4               	movwf	??_write_byte
  4762  1690  0874               	movf	??_write_byte,w
  4763  1691  00F6               	movwf	write_byte@temp
  4764                           
  4765                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4766  1692  1283               	bcf	3,5	;RP0=0, select bank0
  4767  1693  1303               	bcf	3,6	;RP1=0, select bank0
  4768  1694  1009               	bcf	9,0	;volatile
  4769  1695  1683               	bsf	3,5	;RP0=1, select bank1
  4770  1696  1009               	bcf	9,0	;volatile
  4771                           
  4772                           ;Thermometer_src.c: 48:    __nop();
  4773  1697  0000               	nop
  4774                           
  4775                           ;Thermometer_src.c: 49:    __nop();
  4776  1698  0000               	nop
  4777                           
  4778                           ;Thermometer_src.c: 50:    __nop();
  4779  1699  0000               	nop
  4780                           
  4781                           ;Thermometer_src.c: 51:    __nop();
  4782  169A  0000               	nop
  4783                           
  4784                           ;Thermometer_src.c: 52:    __nop();
  4785  169B  0000               	nop
  4786                           
  4787                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4788  169C  0376               	decf	write_byte@temp,w
  4789  169D  1D03               	btfss	3,2
  4790  169E  2EA2               	goto	l3309
  4791  169F  1683               	bsf	3,5	;RP0=1, select bank1
  4792  16A0  1303               	bcf	3,6	;RP1=0, select bank1
  4793  16A1  1409               	bsf	9,0	;volatile
  4794  16A2                     l3309:	
  4795                           
  4796                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4797  16A2  3007               	movlw	7
  4798  16A3  00F4               	movwf	??_write_byte
  4799  16A4  0874               	movf	??_write_byte,w
  4800  16A5  00F0               	movwf	delay_temp@y
  4801  16A6  3002               	movlw	2
  4802  16A7  160A  118A  23A3  160A  118A  	fcall	_delay_temp
  4803                           
  4804                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4805  16AC  1683               	bsf	3,5	;RP0=1, select bank1
  4806  16AD  1303               	bcf	3,6	;RP1=0, select bank1
  4807  16AE  1409               	bsf	9,0	;volatile
  4808                           
  4809                           ;Thermometer_src.c: 56:    __nop();
  4810  16AF  0000               	nop
  4811                           
  4812                           ;Thermometer_src.c: 57:    __nop();
  4813  16B0  0000               	nop
  4814                           
  4815                           ;Thermometer_src.c: 58:    val=val>>1;
  4816  16B1  0877               	movf	write_byte@val,w
  4817  16B2  00F4               	movwf	??_write_byte
  4818  16B3  1003               	clrc
  4819  16B4  0C74               	rrf	??_write_byte,w
  4820  16B5  00F5               	movwf	??_write_byte+1
  4821  16B6  0875               	movf	??_write_byte+1,w
  4822  16B7  00F7               	movwf	write_byte@val
  4823                           
  4824                           ;Thermometer_src.c: 59:   }
  4825  16B8  3001               	movlw	1
  4826  16B9  02F8               	subwf	write_byte@i,f
  4827  16BA  0878               	movf	write_byte@i,w
  4828  16BB  1903               	btfsc	3,2
  4829  16BC  0008               	return
  4830  16BD  2E8D               	goto	l3289
  4831  16BE                     __end_of_write_byte:	
  4832                           
  4833                           	psect	text16
  4834  1654                     __ptext16:	
  4835 ;; *************** function _reset_temp *****************
  4836 ;; Defined at:
  4837 ;;		line 25 in file "Thermometer_src.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  presence        1    5[COMMON] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/100
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4851 ;;      Params:         0       0       0       0       0
  4852 ;;      Locals:         1       0       0       0       0
  4853 ;;      Temps:          1       0       0       0       0
  4854 ;;      Totals:         2       0       0       0       0
  4855 ;;Total ram usage:        2 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    1
  4858 ;; This function calls:
  4859 ;;		_delay_temp
  4860 ;; This function is called by:
  4861 ;;		_get_temp
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _reset_temp
  4867  1654                     _reset_temp:	
  4868                           
  4869                           ;Thermometer_src.c: 27:   char presence=1;
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4873  1654  01F5               	clrf	reset_temp@presence
  4874  1655  0AF5               	incf	reset_temp@presence,f
  4875  1656                     l3281:	
  4876                           ;Thermometer_src.c: 28:   while(presence)
  4877                           
  4878                           
  4879                           ;Thermometer_src.c: 28:   while(presence)
  4880  1656  0875               	movf	reset_temp@presence,w
  4881  1657  1903               	btfsc	3,2
  4882  1658  0008               	return
  4883                           
  4884                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4885  1659  1283               	bcf	3,5	;RP0=0, select bank0
  4886  165A  1303               	bcf	3,6	;RP1=0, select bank0
  4887  165B  1009               	bcf	9,0	;volatile
  4888  165C  1683               	bsf	3,5	;RP0=1, select bank1
  4889  165D  1009               	bcf	9,0	;volatile
  4890                           
  4891                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4892  165E  3046               	movlw	70
  4893  165F  00F4               	movwf	??_reset_temp
  4894  1660  0874               	movf	??_reset_temp,w
  4895  1661  00F0               	movwf	delay_temp@y
  4896  1662  3002               	movlw	2
  4897  1663  160A  118A  23A3  160A  118A  	fcall	_delay_temp
  4898                           
  4899                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4900  1668  1683               	bsf	3,5	;RP0=1, select bank1
  4901  1669  1303               	bcf	3,6	;RP1=0, select bank1
  4902  166A  1409               	bsf	9,0	;volatile
  4903                           
  4904                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4905  166B  3008               	movlw	8
  4906  166C  00F4               	movwf	??_reset_temp
  4907  166D  0874               	movf	??_reset_temp,w
  4908  166E  00F0               	movwf	delay_temp@y
  4909  166F  3002               	movlw	2
  4910  1670  160A  118A  23A3  160A  118A  	fcall	_delay_temp
  4911                           
  4912                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4913  1675  1283               	bcf	3,5	;RP0=0, select bank0
  4914  1676  1303               	bcf	3,6	;RP1=0, select bank0
  4915  1677  1C09               	btfss	9,0	;volatile
  4916  1678  2E7C               	goto	l3277
  4917  1679  01F5               	clrf	reset_temp@presence
  4918  167A  0AF5               	incf	reset_temp@presence,f
  4919  167B  2E7D               	goto	l3279
  4920  167C                     l3277:	
  4921  167C  01F5               	clrf	reset_temp@presence
  4922  167D                     l3279:	
  4923                           
  4924                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4925  167D  303C               	movlw	60
  4926  167E  00F4               	movwf	??_reset_temp
  4927  167F  0874               	movf	??_reset_temp,w
  4928  1680  00F0               	movwf	delay_temp@y
  4929  1681  3002               	movlw	2
  4930  1682  160A  118A  23A3  160A  118A  	fcall	_delay_temp
  4931  1687  2E56               	goto	l3281
  4932  1688                     __end_of_reset_temp:	
  4933                           
  4934                           	psect	text17
  4935  1620                     __ptext17:	
  4936 ;; *************** function _read_byte *****************
  4937 ;; Defined at:
  4938 ;;		line 62 in file "Thermometer_src.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;		None
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  i               1    6[COMMON] unsigned char 
  4943 ;;  value           1    5[COMMON] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      unsigned char 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0, pclath, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/100
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4953 ;;      Params:         0       0       0       0       0
  4954 ;;      Locals:         2       0       0       0       0
  4955 ;;      Temps:          1       0       0       0       0
  4956 ;;      Totals:         3       0       0       0       0
  4957 ;;Total ram usage:        3 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    1
  4960 ;; This function calls:
  4961 ;;		_delay_temp
  4962 ;; This function is called by:
  4963 ;;		_get_temp
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _read_byte
  4969  1620                     _read_byte:	
  4970                           
  4971                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4975  1620  01F5               	clrf	read_byte@value
  4976                           
  4977                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4978  1621  3008               	movlw	8
  4979  1622  00F4               	movwf	??_read_byte
  4980  1623  0874               	movf	??_read_byte,w
  4981  1624  00F6               	movwf	read_byte@i
  4982  1625                     l3331:	
  4983                           
  4984                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4985  1625  1003               	clrc
  4986  1626  0CF5               	rrf	read_byte@value,f
  4987                           
  4988                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4989  1627  1283               	bcf	3,5	;RP0=0, select bank0
  4990  1628  1303               	bcf	3,6	;RP1=0, select bank0
  4991  1629  1009               	bcf	9,0	;volatile
  4992  162A  1683               	bsf	3,5	;RP0=1, select bank1
  4993  162B  1009               	bcf	9,0	;volatile
  4994                           
  4995                           ;Thermometer_src.c: 71:    __nop();
  4996  162C  0000               	nop
  4997                           
  4998                           ;Thermometer_src.c: 72:    __nop();
  4999  162D  0000               	nop
  5000                           
  5001                           ;Thermometer_src.c: 73:    __nop();
  5002  162E  0000               	nop
  5003                           
  5004                           ;Thermometer_src.c: 74:    __nop();
  5005  162F  0000               	nop
  5006                           
  5007                           ;Thermometer_src.c: 75:    __nop();
  5008  1630  0000               	nop
  5009                           
  5010                           ;Thermometer_src.c: 76:    __nop();
  5011  1631  0000               	nop
  5012                           
  5013                           ;Thermometer_src.c: 77:    TRISE0 =1;
  5014  1632  1683               	bsf	3,5	;RP0=1, select bank1
  5015  1633  1303               	bcf	3,6	;RP1=0, select bank1
  5016  1634  1409               	bsf	9,0	;volatile
  5017                           
  5018                           ;Thermometer_src.c: 78:    __nop();
  5019  1635  0000               	nop
  5020                           
  5021                           ;Thermometer_src.c: 79:    __nop();
  5022  1636  0000               	nop
  5023                           
  5024                           ;Thermometer_src.c: 80:    __nop();
  5025  1637  0000               	nop
  5026                           
  5027                           ;Thermometer_src.c: 81:    __nop();
  5028  1638  0000               	nop
  5029                           
  5030                           ;Thermometer_src.c: 82:    __nop();
  5031  1639  0000               	nop
  5032                           
  5033                           ;Thermometer_src.c: 83:    j=RE0;
  5034  163A  3000               	movlw	0
  5035  163B  1283               	bcf	3,5	;RP0=0, select bank0
  5036  163C  1303               	bcf	3,6	;RP1=0, select bank0
  5037  163D  1809               	btfsc	9,0	;volatile
  5038  163E  3001               	movlw	1
  5039  163F  00BE               	movwf	read_byte@j
  5040                           
  5041                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  5042  1640  083E               	movf	read_byte@j,w
  5043  1641  1D03               	btfss	3,2
  5044  1642  17F5               	bsf	read_byte@value,7
  5045                           
  5046                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  5047  1643  3007               	movlw	7
  5048  1644  00F4               	movwf	??_read_byte
  5049  1645  0874               	movf	??_read_byte,w
  5050  1646  00F0               	movwf	delay_temp@y
  5051  1647  3002               	movlw	2
  5052  1648  160A  118A  23A3  160A  118A  	fcall	_delay_temp
  5053                           
  5054                           ;Thermometer_src.c: 86:   }
  5055  164D  3001               	movlw	1
  5056  164E  02F6               	subwf	read_byte@i,f
  5057  164F  0876               	movf	read_byte@i,w
  5058  1650  1D03               	btfss	3,2
  5059  1651  2E25               	goto	l3331
  5060                           
  5061                           ;Thermometer_src.c: 87:   return(value);
  5062  1652  0875               	movf	read_byte@value,w
  5063  1653  0008               	return
  5064  1654                     __end_of_read_byte:	
  5065                           
  5066                           	psect	text18
  5067  13A3                     __ptext18:	
  5068 ;; *************** function _delay_temp *****************
  5069 ;; Defined at:
  5070 ;;		line 121 in file "Thermometer_src.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  x               1    wreg     unsigned char 
  5073 ;;  y               1    0[COMMON] unsigned char 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  x               1    2[COMMON] unsigned char 
  5076 ;;  z               1    3[COMMON] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/100
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5086 ;;      Params:         1       0       0       0       0
  5087 ;;      Locals:         2       0       0       0       0
  5088 ;;      Temps:          1       0       0       0       0
  5089 ;;      Totals:         4       0       0       0       0
  5090 ;;Total ram usage:        4 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; This function calls:
  5093 ;;		Nothing
  5094 ;; This function is called by:
  5095 ;;		_reset_temp
  5096 ;;		_write_byte
  5097 ;;		_read_byte
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _delay_temp
  5103  13A3                     _delay_temp:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5107                           ;delay_temp@x stored from wreg
  5108  13A3  00F2               	movwf	delay_temp@x
  5109  13A4                     l339:	
  5110                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5111                           
  5112                           
  5113                           ;Thermometer_src.c: 125:  z=y;
  5114  13A4  0870               	movf	delay_temp@y,w
  5115  13A5  00F1               	movwf	??_delay_temp
  5116  13A6  0871               	movf	??_delay_temp,w
  5117  13A7  00F3               	movwf	delay_temp@z
  5118  13A8                     l3207:	
  5119  13A8  3001               	movlw	1
  5120  13A9  02F3               	subwf	delay_temp@z,f
  5121  13AA  1D03               	btfss	3,2
  5122  13AB  2BA8               	goto	l3207
  5123                           
  5124                           ;Thermometer_src.c: 127:  }while(--x);
  5125  13AC  3001               	movlw	1
  5126  13AD  02F2               	subwf	delay_temp@x,f
  5127  13AE  1903               	btfsc	3,2
  5128  13AF  0008               	return
  5129  13B0  2BA4               	goto	l339
  5130  13B1                     __end_of_delay_temp:	
  5131                           
  5132                           	psect	text19
  5133  1418                     __ptext19:	
  5134 ;; *************** function _delay2 *****************
  5135 ;; Defined at:
  5136 ;;		line 130 in file "Thermometer_src.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  i               2    0[COMMON] int 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, btemp+1
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/100
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5150 ;;      Params:         0       0       0       0       0
  5151 ;;      Locals:         2       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0
  5153 ;;      Totals:         2       0       0       0       0
  5154 ;;Total ram usage:        2 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; This function calls:
  5157 ;;		Nothing
  5158 ;; This function is called by:
  5159 ;;		_get_temp
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           
  5164                           ;psect for function _delay2
  5165  1418                     _delay2:	
  5166                           
  5167                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5168                           
  5169                           ;incstack = 0
  5170                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5171  1418  01F0               	clrf	delay2@i
  5172  1419  01F1               	clrf	delay2@i+1
  5173  141A                     l3383:	
  5174                           
  5175                           ;Thermometer_src.c: 132:  }
  5176  141A  3001               	movlw	1
  5177  141B  07F0               	addwf	delay2@i,f
  5178  141C  1803               	skipnc
  5179  141D  0AF1               	incf	delay2@i+1,f
  5180  141E  3000               	movlw	0
  5181  141F  07F1               	addwf	delay2@i+1,f
  5182  1420  0871               	movf	delay2@i+1,w
  5183  1421  3A80               	xorlw	128
  5184  1422  00FF               	movwf	127
  5185  1423  3080               	movlw	128
  5186  1424  027F               	subwf	127,w
  5187  1425  1D03               	skipz
  5188  1426  2C29               	goto	u2205
  5189  1427  3032               	movlw	50
  5190  1428  0270               	subwf	delay2@i,w
  5191  1429                     u2205:	
  5192  1429  1803               	btfsc	3,0
  5193  142A  0008               	return
  5194  142B  2C1A               	goto	l3383
  5195  142C                     __end_of_delay2:	
  5196                           
  5197                           	psect	text20
  5198  15EE                     __ptext20:	
  5199 ;; *************** function ___lwmod *****************
  5200 ;; Defined at:
  5201 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  divisor         2    0[COMMON] unsigned int 
  5204 ;;  dividend        2    2[COMMON] unsigned int 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  counter         1    5[COMMON] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  2    0[COMMON] unsigned int 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0
  5211 ;; Tracked objects:
  5212 ;;		On entry : 300/0
  5213 ;;		On exit  : 300/0
  5214 ;;		Unchanged: 300/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5216 ;;      Params:         4       0       0       0       0
  5217 ;;      Locals:         1       0       0       0       0
  5218 ;;      Temps:          1       0       0       0       0
  5219 ;;      Totals:         6       0       0       0       0
  5220 ;;Total ram usage:        6 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; This function calls:
  5223 ;;		Nothing
  5224 ;; This function is called by:
  5225 ;;		_get_temp
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           
  5230                           ;psect for function ___lwmod
  5231  15EE                     ___lwmod:	
  5232                           
  5233                           ;incstack = 0
  5234                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5235  15EE  0870               	movf	___lwmod@divisor,w
  5236  15EF  0471               	iorwf	___lwmod@divisor+1,w
  5237  15F0  1903               	btfsc	3,2
  5238  15F1  2E1B               	goto	l3697
  5239  15F2  01F5               	clrf	___lwmod@counter
  5240  15F3  0AF5               	incf	___lwmod@counter,f
  5241  15F4                     l3687:	
  5242  15F4  1BF1               	btfsc	___lwmod@divisor+1,7
  5243  15F5  2E02               	goto	l3689
  5244  15F6  3001               	movlw	1
  5245  15F7                     u2935:	
  5246  15F7  1003               	clrc
  5247  15F8  0DF0               	rlf	___lwmod@divisor,f
  5248  15F9  0DF1               	rlf	___lwmod@divisor+1,f
  5249  15FA  3EFF               	addlw	-1
  5250  15FB  1D03               	skipz
  5251  15FC  2DF7               	goto	u2935
  5252  15FD  3001               	movlw	1
  5253  15FE  00F4               	movwf	??___lwmod
  5254  15FF  0874               	movf	??___lwmod,w
  5255  1600  07F5               	addwf	___lwmod@counter,f
  5256  1601  2DF4               	goto	l3687
  5257  1602                     l3689:	
  5258  1602  0871               	movf	___lwmod@divisor+1,w
  5259  1603  0273               	subwf	___lwmod@dividend+1,w
  5260  1604  1D03               	skipz
  5261  1605  2E08               	goto	u2955
  5262  1606  0870               	movf	___lwmod@divisor,w
  5263  1607  0272               	subwf	___lwmod@dividend,w
  5264  1608                     u2955:	
  5265  1608  1C03               	skipc
  5266  1609  2E10               	goto	l3693
  5267  160A  0870               	movf	___lwmod@divisor,w
  5268  160B  02F2               	subwf	___lwmod@dividend,f
  5269  160C  0871               	movf	___lwmod@divisor+1,w
  5270  160D  1C03               	skipc
  5271  160E  03F3               	decf	___lwmod@dividend+1,f
  5272  160F  02F3               	subwf	___lwmod@dividend+1,f
  5273  1610                     l3693:	
  5274  1610  3001               	movlw	1
  5275  1611                     u2965:	
  5276  1611  1003               	clrc
  5277  1612  0CF1               	rrf	___lwmod@divisor+1,f
  5278  1613  0CF0               	rrf	___lwmod@divisor,f
  5279  1614  3EFF               	addlw	-1
  5280  1615  1D03               	skipz
  5281  1616  2E11               	goto	u2965
  5282  1617  3001               	movlw	1
  5283  1618  02F5               	subwf	___lwmod@counter,f
  5284  1619  1D03               	btfss	3,2
  5285  161A  2E02               	goto	l3689
  5286  161B                     l3697:	
  5287  161B  0873               	movf	___lwmod@dividend+1,w
  5288  161C  00F1               	movwf	?___lwmod+1
  5289  161D  0872               	movf	___lwmod@dividend,w
  5290  161E  00F0               	movwf	?___lwmod
  5291  161F  0008               	return
  5292  1620                     __end_of___lwmod:	
  5293                           
  5294                           	psect	text21
  5295  16BE                     __ptext21:	
  5296 ;; *************** function ___lwdiv *****************
  5297 ;; Defined at:
  5298 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  divisor         2    6[COMMON] unsigned int 
  5301 ;;  dividend        2    8[COMMON] unsigned int 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  quotient        2   11[COMMON] unsigned int 
  5304 ;;  counter         1   13[COMMON] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  2    6[COMMON] unsigned int 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 300/0
  5311 ;;		On exit  : 300/0
  5312 ;;		Unchanged: 300/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5314 ;;      Params:         4       0       0       0       0
  5315 ;;      Locals:         3       0       0       0       0
  5316 ;;      Temps:          1       0       0       0       0
  5317 ;;      Totals:         8       0       0       0       0
  5318 ;;Total ram usage:        8 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_get_temp
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           
  5328                           ;psect for function ___lwdiv
  5329  16BE                     ___lwdiv:	
  5330                           
  5331                           ;incstack = 0
  5332                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5333  16BE  01FB               	clrf	___lwdiv@quotient
  5334  16BF  01FC               	clrf	___lwdiv@quotient+1
  5335  16C0  0876               	movf	___lwdiv@divisor,w
  5336  16C1  0477               	iorwf	___lwdiv@divisor+1,w
  5337  16C2  1903               	btfsc	3,2
  5338  16C3  2EF5               	goto	l3675
  5339  16C4  01FD               	clrf	___lwdiv@counter
  5340  16C5  0AFD               	incf	___lwdiv@counter,f
  5341  16C6                     l3663:	
  5342  16C6  1BF7               	btfsc	___lwdiv@divisor+1,7
  5343  16C7  2ED4               	goto	l3665
  5344  16C8  3001               	movlw	1
  5345  16C9                     u2865:	
  5346  16C9  1003               	clrc
  5347  16CA  0DF6               	rlf	___lwdiv@divisor,f
  5348  16CB  0DF7               	rlf	___lwdiv@divisor+1,f
  5349  16CC  3EFF               	addlw	-1
  5350  16CD  1D03               	skipz
  5351  16CE  2EC9               	goto	u2865
  5352  16CF  3001               	movlw	1
  5353  16D0  00FA               	movwf	??___lwdiv
  5354  16D1  087A               	movf	??___lwdiv,w
  5355  16D2  07FD               	addwf	___lwdiv@counter,f
  5356  16D3  2EC6               	goto	l3663
  5357  16D4                     l3665:	
  5358  16D4  3001               	movlw	1
  5359  16D5                     u2885:	
  5360  16D5  1003               	clrc
  5361  16D6  0DFB               	rlf	___lwdiv@quotient,f
  5362  16D7  0DFC               	rlf	___lwdiv@quotient+1,f
  5363  16D8  3EFF               	addlw	-1
  5364  16D9  1D03               	skipz
  5365  16DA  2ED5               	goto	u2885
  5366  16DB  0877               	movf	___lwdiv@divisor+1,w
  5367  16DC  0279               	subwf	___lwdiv@dividend+1,w
  5368  16DD  1D03               	skipz
  5369  16DE  2EE1               	goto	u2895
  5370  16DF  0876               	movf	___lwdiv@divisor,w
  5371  16E0  0278               	subwf	___lwdiv@dividend,w
  5372  16E1                     u2895:	
  5373  16E1  1C03               	skipc
  5374  16E2  2EEA               	goto	l3671
  5375  16E3  0876               	movf	___lwdiv@divisor,w
  5376  16E4  02F8               	subwf	___lwdiv@dividend,f
  5377  16E5  0877               	movf	___lwdiv@divisor+1,w
  5378  16E6  1C03               	skipc
  5379  16E7  03F9               	decf	___lwdiv@dividend+1,f
  5380  16E8  02F9               	subwf	___lwdiv@dividend+1,f
  5381  16E9  147B               	bsf	___lwdiv@quotient,0
  5382  16EA                     l3671:	
  5383  16EA  3001               	movlw	1
  5384  16EB                     u2905:	
  5385  16EB  1003               	clrc
  5386  16EC  0CF7               	rrf	___lwdiv@divisor+1,f
  5387  16ED  0CF6               	rrf	___lwdiv@divisor,f
  5388  16EE  3EFF               	addlw	-1
  5389  16EF  1D03               	skipz
  5390  16F0  2EEB               	goto	u2905
  5391  16F1  3001               	movlw	1
  5392  16F2  02FD               	subwf	___lwdiv@counter,f
  5393  16F3  1D03               	btfss	3,2
  5394  16F4  2ED4               	goto	l3665
  5395  16F5                     l3675:	
  5396  16F5  087C               	movf	___lwdiv@quotient+1,w
  5397  16F6  00F7               	movwf	?___lwdiv+1
  5398  16F7  087B               	movf	___lwdiv@quotient,w
  5399  16F8  00F6               	movwf	?___lwdiv
  5400  16F9  0008               	return
  5401  16FA                     __end_of___lwdiv:	
  5402                           
  5403                           	psect	text22
  5404  14B6                     __ptext22:	
  5405 ;; *************** function ___lbmod *****************
  5406 ;; Defined at:
  5407 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  dividend        1    wreg     unsigned char 
  5410 ;;  divisor         1    0[COMMON] unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  dividend        1    4[COMMON] unsigned char 
  5413 ;;  rem             1    6[COMMON] unsigned char 
  5414 ;;  counter         1    5[COMMON] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      unsigned char 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0
  5419 ;; Tracked objects:
  5420 ;;		On entry : 300/0
  5421 ;;		On exit  : 300/0
  5422 ;;		Unchanged: 300/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5424 ;;      Params:         1       0       0       0       0
  5425 ;;      Locals:         3       0       0       0       0
  5426 ;;      Temps:          3       0       0       0       0
  5427 ;;      Totals:         7       0       0       0       0
  5428 ;;Total ram usage:        7 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_get_temp
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function ___lbmod
  5439  14B6                     ___lbmod:	
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5443                           ;___lbmod@dividend stored from wreg
  5444  14B6  00F4               	movwf	___lbmod@dividend
  5445  14B7  3008               	movlw	8
  5446  14B8  00F1               	movwf	??___lbmod
  5447  14B9  0871               	movf	??___lbmod,w
  5448  14BA  00F5               	movwf	___lbmod@counter
  5449  14BB  01F6               	clrf	___lbmod@rem
  5450  14BC                     l3641:	
  5451  14BC  0874               	movf	___lbmod@dividend,w
  5452  14BD  00F1               	movwf	??___lbmod
  5453  14BE  3007               	movlw	7
  5454  14BF                     u2825:	
  5455  14BF  1003               	clrc
  5456  14C0  0CF1               	rrf	??___lbmod,f
  5457  14C1  3EFF               	addlw	-1
  5458  14C2  1D03               	skipz
  5459  14C3  2CBF               	goto	u2825
  5460  14C4  0876               	movf	___lbmod@rem,w
  5461  14C5  00F2               	movwf	??___lbmod+1
  5462  14C6  0772               	addwf	??___lbmod+1,w
  5463  14C7  0471               	iorwf	??___lbmod,w
  5464  14C8  00F3               	movwf	??___lbmod+2
  5465  14C9  0873               	movf	??___lbmod+2,w
  5466  14CA  00F6               	movwf	___lbmod@rem
  5467  14CB  1003               	clrc
  5468  14CC  0DF4               	rlf	___lbmod@dividend,f
  5469  14CD  0870               	movf	___lbmod@divisor,w
  5470  14CE  0276               	subwf	___lbmod@rem,w
  5471  14CF  1C03               	skipc
  5472  14D0  2CD3               	goto	l1271
  5473  14D1  0870               	movf	___lbmod@divisor,w
  5474  14D2  02F6               	subwf	___lbmod@rem,f
  5475  14D3                     l1271:	
  5476  14D3  3001               	movlw	1
  5477  14D4  02F5               	subwf	___lbmod@counter,f
  5478  14D5  1D03               	btfss	3,2
  5479  14D6  2CBC               	goto	l3641
  5480  14D7  0876               	movf	___lbmod@rem,w
  5481  14D8  0008               	return
  5482  14D9                     __end_of___lbmod:	
  5483                           
  5484                           	psect	text23
  5485  1495                     __ptext23:	
  5486 ;; *************** function ___lbdiv *****************
  5487 ;; Defined at:
  5488 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  dividend        1    wreg     unsigned char 
  5491 ;;  divisor         1    0[COMMON] unsigned char 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  dividend        1    2[COMMON] unsigned char 
  5494 ;;  quotient        1    4[COMMON] unsigned char 
  5495 ;;  counter         1    3[COMMON] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      unsigned char 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0
  5500 ;; Tracked objects:
  5501 ;;		On entry : 300/0
  5502 ;;		On exit  : 300/0
  5503 ;;		Unchanged: 300/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5505 ;;      Params:         1       0       0       0       0
  5506 ;;      Locals:         3       0       0       0       0
  5507 ;;      Temps:          1       0       0       0       0
  5508 ;;      Totals:         5       0       0       0       0
  5509 ;;Total ram usage:        5 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; This function calls:
  5512 ;;		Nothing
  5513 ;; This function is called by:
  5514 ;;		_get_temp
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           
  5519                           ;psect for function ___lbdiv
  5520  1495                     ___lbdiv:	
  5521                           
  5522                           ;incstack = 0
  5523                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5524                           ;___lbdiv@dividend stored from wreg
  5525  1495  00F2               	movwf	___lbdiv@dividend
  5526  1496  01F4               	clrf	___lbdiv@quotient
  5527  1497  0870               	movf	___lbdiv@divisor,w
  5528  1498  1903               	btfsc	3,2
  5529  1499  2CB4               	goto	l3633
  5530  149A  01F3               	clrf	___lbdiv@counter
  5531  149B  0AF3               	incf	___lbdiv@counter,f
  5532  149C                     l3621:	
  5533  149C  1BF0               	btfsc	___lbdiv@divisor,7
  5534  149D  2CA5               	goto	l3623
  5535  149E  1003               	clrc
  5536  149F  0DF0               	rlf	___lbdiv@divisor,f
  5537  14A0  3001               	movlw	1
  5538  14A1  00F1               	movwf	??___lbdiv
  5539  14A2  0871               	movf	??___lbdiv,w
  5540  14A3  07F3               	addwf	___lbdiv@counter,f
  5541  14A4  2C9C               	goto	l3621
  5542  14A5                     l3623:	
  5543  14A5  1003               	clrc
  5544  14A6  0DF4               	rlf	___lbdiv@quotient,f
  5545  14A7  0870               	movf	___lbdiv@divisor,w
  5546  14A8  0272               	subwf	___lbdiv@dividend,w
  5547  14A9  1C03               	skipc
  5548  14AA  2CAF               	goto	L2
  5549  14AB  0870               	movf	___lbdiv@divisor,w
  5550  14AC  02F2               	subwf	___lbdiv@dividend,f
  5551  14AD  1474               	bsf	___lbdiv@quotient,0
  5552  14AE  1003               	clrc
  5553  14AF                     L2:	
  5554  14AF  0CF0               	rrf	___lbdiv@divisor,f
  5555  14B0  3001               	movlw	1
  5556  14B1  02F3               	subwf	___lbdiv@counter,f
  5557  14B2  1D03               	btfss	3,2
  5558  14B3  2CA5               	goto	l3623
  5559  14B4                     l3633:	
  5560  14B4  0874               	movf	___lbdiv@quotient,w
  5561  14B5  0008               	return
  5562  14B6                     __end_of___lbdiv:	
  5563                           
  5564                           	psect	text24
  5565  13C0                     __ptext24:	
  5566 ;; *************** function _ds1302_init *****************
  5567 ;; Defined at:
  5568 ;;		line 3 in file "clock_src.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 300/0
  5579 ;;		On exit  : 300/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5582 ;;      Params:         0       0       0       0       0
  5583 ;;      Locals:         0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0
  5585 ;;      Totals:         0       0       0       0       0
  5586 ;;Total ram usage:        0 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    1
  5589 ;; This function calls:
  5590 ;;		_time_write_1
  5591 ;; This function is called by:
  5592 ;;		_main
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           
  5597                           ;psect for function _ds1302_init
  5598  13C0                     _ds1302_init:	
  5599                           
  5600                           ;clock_src.c: 5:    RB0=0;
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5604  13C0  1006               	bcf	6,0	;volatile
  5605                           
  5606                           ;clock_src.c: 6:    RB5 =0;
  5607  13C1  1286               	bcf	6,5	;volatile
  5608                           
  5609                           ;clock_src.c: 7:    RB5=1;
  5610  13C2  1686               	bsf	6,5	;volatile
  5611                           
  5612                           ;clock_src.c: 8:    time_write_1(0x8e);
  5613  13C3  308E               	movlw	142
  5614  13C4  160A  118A  2544  160A  118A  	fcall	_time_write_1
  5615                           
  5616                           ;clock_src.c: 9:    time_write_1(0);
  5617  13C9  3000               	movlw	0
  5618  13CA  160A  118A  2544   	fcall	_time_write_1
  5619                           
  5620                           ;clock_src.c: 10:    RB5=0;
  5621  13CD  1286               	bcf	6,5	;volatile
  5622  13CE  0008               	return
  5623  13CF                     __end_of_ds1302_init:	
  5624                           
  5625                           	psect	text25
  5626  1474                     __ptext25:	
  5627 ;; *************** function _display_temp *****************
  5628 ;; Defined at:
  5629 ;;		line 12 in file "Thermometer_src.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 300/0
  5640 ;;		On exit  : 300/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5643 ;;      Params:         0       0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0
  5645 ;;      Temps:          0       0       0       0       0
  5646 ;;      Totals:         0       0       0       0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    2
  5650 ;; This function calls:
  5651 ;;		_write_char
  5652 ;; This function is called by:
  5653 ;;		_main
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           
  5658                           ;psect for function _display_temp
  5659  1474                     _display_temp:	
  5660                           
  5661                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5662                           
  5663                           ;incstack = 0
  5664                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5665  1474  0859               	movf	_shi,w
  5666  1475  3E30               	addlw	48
  5667  1476  160A  118A  2440  160A  118A  	fcall	_write_char
  5668                           
  5669                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5670  147B  0858               	movf	_ge,w
  5671  147C  3E30               	addlw	48
  5672  147D  160A  118A  2440  160A  118A  	fcall	_write_char
  5673                           
  5674                           ;Thermometer_src.c: 17:  write_char('.');
  5675  1482  302E               	movlw	46
  5676  1483  160A  118A  2440  160A  118A  	fcall	_write_char
  5677                           
  5678                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5679  1488  0857               	movf	_shifen,w
  5680  1489  3E30               	addlw	48
  5681  148A  160A  118A  2440  160A  118A  	fcall	_write_char
  5682                           
  5683                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5684  148F  0856               	movf	_baifen,w
  5685  1490  3E30               	addlw	48
  5686  1491  160A  118A  2440   	fcall	_write_char
  5687  1494  0008               	return
  5688  1495                     __end_of_display_temp:	
  5689                           
  5690                           	psect	text26
  5691  1787                     __ptext26:	
  5692 ;; *************** function _display_day *****************
  5693 ;; Defined at:
  5694 ;;		line 4 in file "Day_of_week_src.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  num             2    3[COMMON] int 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 300/0
  5705 ;;		On exit  : 300/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5708 ;;      Params:         2       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0
  5711 ;;      Totals:         2       0       0       0       0
  5712 ;;Total ram usage:        2 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    2
  5715 ;; This function calls:
  5716 ;;		_write_char
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _display_day
  5724  1787                     _display_day:	
  5725                           
  5726                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5727                           
  5728                           ;incstack = 0
  5729                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5730  1787  0373               	decf	display_day@num,w
  5731  1788  0474               	iorwf	display_day@num+1,w
  5732  1789  1903               	btfsc	3,2
  5733  178A  2F8F               	goto	l4601
  5734  178B  0873               	movf	display_day@num,w
  5735  178C  0474               	iorwf	display_day@num+1,w
  5736  178D  1D03               	btfss	3,2
  5737  178E  2F9B               	goto	l4603
  5738  178F                     l4601:	
  5739                           
  5740                           ;Day_of_week_src.c: 6:     write_char('M');
  5741  178F  304D               	movlw	77
  5742  1790  160A  118A  2440  160A  118A  	fcall	_write_char
  5743                           
  5744                           ;Day_of_week_src.c: 7:     write_char('o');
  5745  1795  306F               	movlw	111
  5746  1796  160A  118A  2440  160A  118A  	fcall	_write_char
  5747  179B                     l4603:	
  5748                           
  5749                           ;Day_of_week_src.c: 10:     if(num == 2){
  5750  179B  3002               	movlw	2
  5751  179C  0673               	xorwf	display_day@num,w
  5752  179D  0474               	iorwf	display_day@num+1,w
  5753  179E  1D03               	btfss	3,2
  5754  179F  2FAC               	goto	l4607
  5755                           
  5756                           ;Day_of_week_src.c: 11:     write_char('T');
  5757  17A0  3054               	movlw	84
  5758  17A1  160A  118A  2440  160A  118A  	fcall	_write_char
  5759                           
  5760                           ;Day_of_week_src.c: 12:     write_char('u');
  5761  17A6  3075               	movlw	117
  5762  17A7  160A  118A  2440  160A  118A  	fcall	_write_char
  5763  17AC                     l4607:	
  5764                           
  5765                           ;Day_of_week_src.c: 15:     if(num == 3){
  5766  17AC  3003               	movlw	3
  5767  17AD  0673               	xorwf	display_day@num,w
  5768  17AE  0474               	iorwf	display_day@num+1,w
  5769  17AF  1D03               	btfss	3,2
  5770  17B0  2FBD               	goto	l4611
  5771                           
  5772                           ;Day_of_week_src.c: 16:     write_char('W');
  5773  17B1  3057               	movlw	87
  5774  17B2  160A  118A  2440  160A  118A  	fcall	_write_char
  5775                           
  5776                           ;Day_of_week_src.c: 17:     write_char('e');
  5777  17B7  3065               	movlw	101
  5778  17B8  160A  118A  2440  160A  118A  	fcall	_write_char
  5779  17BD                     l4611:	
  5780                           
  5781                           ;Day_of_week_src.c: 20:     if(num == 4){
  5782  17BD  3004               	movlw	4
  5783  17BE  0673               	xorwf	display_day@num,w
  5784  17BF  0474               	iorwf	display_day@num+1,w
  5785  17C0  1D03               	btfss	3,2
  5786  17C1  2FCE               	goto	l4615
  5787                           
  5788                           ;Day_of_week_src.c: 21:     write_char('T');
  5789  17C2  3054               	movlw	84
  5790  17C3  160A  118A  2440  160A  118A  	fcall	_write_char
  5791                           
  5792                           ;Day_of_week_src.c: 22:     write_char('h');
  5793  17C8  3068               	movlw	104
  5794  17C9  160A  118A  2440  160A  118A  	fcall	_write_char
  5795  17CE                     l4615:	
  5796                           
  5797                           ;Day_of_week_src.c: 25:     if(num == 5){
  5798  17CE  3005               	movlw	5
  5799  17CF  0673               	xorwf	display_day@num,w
  5800  17D0  0474               	iorwf	display_day@num+1,w
  5801  17D1  1D03               	btfss	3,2
  5802  17D2  2FDF               	goto	l4619
  5803                           
  5804                           ;Day_of_week_src.c: 26:     write_char('F');
  5805  17D3  3046               	movlw	70
  5806  17D4  160A  118A  2440  160A  118A  	fcall	_write_char
  5807                           
  5808                           ;Day_of_week_src.c: 27:     write_char('r');
  5809  17D9  3072               	movlw	114
  5810  17DA  160A  118A  2440  160A  118A  	fcall	_write_char
  5811  17DF                     l4619:	
  5812                           
  5813                           ;Day_of_week_src.c: 30:     if(num == 6){
  5814  17DF  3006               	movlw	6
  5815  17E0  0673               	xorwf	display_day@num,w
  5816  17E1  0474               	iorwf	display_day@num+1,w
  5817  17E2  1D03               	btfss	3,2
  5818  17E3  2FF0               	goto	l4623
  5819                           
  5820                           ;Day_of_week_src.c: 31:     write_char('S');
  5821  17E4  3053               	movlw	83
  5822  17E5  160A  118A  2440  160A  118A  	fcall	_write_char
  5823                           
  5824                           ;Day_of_week_src.c: 32:     write_char('a');
  5825  17EA  3061               	movlw	97
  5826  17EB  160A  118A  2440  160A  118A  	fcall	_write_char
  5827  17F0                     l4623:	
  5828                           
  5829                           ;Day_of_week_src.c: 35:     if(num == 7){
  5830  17F0  3007               	movlw	7
  5831  17F1  0673               	xorwf	display_day@num,w
  5832  17F2  0474               	iorwf	display_day@num+1,w
  5833  17F3  1D03               	btfss	3,2
  5834  17F4  0008               	return
  5835                           
  5836                           ;Day_of_week_src.c: 36:     write_char('S');
  5837  17F5  3053               	movlw	83
  5838  17F6  160A  118A  2440  160A  118A  	fcall	_write_char
  5839                           
  5840                           ;Day_of_week_src.c: 37:     write_char('u');
  5841  17FB  3075               	movlw	117
  5842  17FC  160A  118A  2440   	fcall	_write_char
  5843  17FF  0008               	return
  5844  1800                     __end_of_display_day:	
  5845                           
  5846                           	psect	text27
  5847  082D                     __ptext27:	
  5848 ;; *************** function _display_date *****************
  5849 ;; Defined at:
  5850 ;;		line 77 in file "clock_src.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  i               2    5[COMMON] int 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  1    wreg      void 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 300/0
  5861 ;;		On exit  : 300/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5864 ;;      Params:         0       0       0       0       0
  5865 ;;      Locals:         2       0       0       0       0
  5866 ;;      Temps:          2       0       0       0       0
  5867 ;;      Totals:         4       0       0       0       0
  5868 ;;Total ram usage:        4 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    2
  5871 ;; This function calls:
  5872 ;;		_write_char
  5873 ;; This function is called by:
  5874 ;;		_main
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           
  5879                           ;psect for function _display_date
  5880  082D                     _display_date:	
  5881                           
  5882                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5883                           
  5884                           ;incstack = 0
  5885                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5886  082D  1886               	btfsc	6,1	;volatile
  5887  082E  2838               	goto	l3829
  5888                           
  5889                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5890  082F  1683               	bsf	3,5	;RP0=1, select bank1
  5891  0830  0823               	movf	(_table1^(0+128)+3),w
  5892  0831  00F3               	movwf	??_display_date
  5893  0832  0873               	movf	??_display_date,w
  5894  0833  00A0               	movwf	_table1^(0+128)
  5895                           
  5896                           ;clock_src.c: 83:           table1[1]=table1[4];
  5897  0834  0824               	movf	(_table1^(0+128)+4),w
  5898  0835  00F3               	movwf	??_display_date
  5899  0836  0873               	movf	??_display_date,w
  5900  0837  00A1               	movwf	(_table1^(0+128)+1)
  5901  0838                     l3829:	
  5902                           
  5903                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5904  0838  1683               	bsf	3,5	;RP0=1, select bank1
  5905  0839  0823               	movf	(_table1^(0+128)+3),w
  5906  083A  39F0               	andlw	240
  5907  083B  00F3               	movwf	??_display_date
  5908  083C  01F4               	clrf	??_display_date+1
  5909  083D  0873               	movf	??_display_date,w
  5910  083E  00F5               	movwf	display_date@i
  5911  083F  0874               	movf	??_display_date+1,w
  5912  0840  00F6               	movwf	display_date@i+1
  5913                           
  5914                           ;clock_src.c: 86:      i=i>>4;
  5915  0841  0E75               	swapf	display_date@i,w
  5916  0842  390F               	andlw	15
  5917  0843  00F5               	movwf	display_date@i
  5918  0844  0E76               	swapf	display_date@i+1,w
  5919  0845  39F0               	andlw	240
  5920  0846  04F5               	iorwf	display_date@i,f
  5921  0847  0E76               	swapf	display_date@i+1,w
  5922  0848  390F               	andlw	15
  5923  0849  00F6               	movwf	display_date@i+1
  5924  084A  30F0               	movlw	240
  5925  084B  1DF6               	btfss	display_date@i+1,3
  5926  084C  3000               	movlw	0
  5927  084D  04F6               	iorwf	display_date@i+1,f
  5928                           
  5929                           ;clock_src.c: 87:      write_char(i + '0');
  5930  084E  0875               	movf	display_date@i,w
  5931  084F  3E30               	addlw	48
  5932  0850  160A  118A  2440  120A  158A  	fcall	_write_char
  5933                           
  5934                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  5935  0855  1683               	bsf	3,5	;RP0=1, select bank1
  5936  0856  0823               	movf	(_table1^(0+128)+3),w
  5937  0857  390F               	andlw	15
  5938  0858  00F3               	movwf	??_display_date
  5939  0859  01F4               	clrf	??_display_date+1
  5940  085A  0873               	movf	??_display_date,w
  5941  085B  00F5               	movwf	display_date@i
  5942  085C  0874               	movf	??_display_date+1,w
  5943  085D  00F6               	movwf	display_date@i+1
  5944                           
  5945                           ;clock_src.c: 90:      write_char(i + '0');
  5946  085E  0875               	movf	display_date@i,w
  5947  085F  3E30               	addlw	48
  5948  0860  160A  118A  2440  120A  158A  	fcall	_write_char
  5949                           
  5950                           ;clock_src.c: 91:      write_char('/');
  5951  0865  302F               	movlw	47
  5952  0866  160A  118A  2440  120A  158A  	fcall	_write_char
  5953                           
  5954                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  5955  086B  1683               	bsf	3,5	;RP0=1, select bank1
  5956  086C  0824               	movf	(_table1^(0+128)+4),w
  5957  086D  39F0               	andlw	240
  5958  086E  00F3               	movwf	??_display_date
  5959  086F  01F4               	clrf	??_display_date+1
  5960  0870  0873               	movf	??_display_date,w
  5961  0871  00F5               	movwf	display_date@i
  5962  0872  0874               	movf	??_display_date+1,w
  5963  0873  00F6               	movwf	display_date@i+1
  5964                           
  5965                           ;clock_src.c: 96:      i=i>>4;
  5966  0874  0E75               	swapf	display_date@i,w
  5967  0875  390F               	andlw	15
  5968  0876  00F5               	movwf	display_date@i
  5969  0877  0E76               	swapf	display_date@i+1,w
  5970  0878  39F0               	andlw	240
  5971  0879  04F5               	iorwf	display_date@i,f
  5972  087A  0E76               	swapf	display_date@i+1,w
  5973  087B  390F               	andlw	15
  5974  087C  00F6               	movwf	display_date@i+1
  5975  087D  30F0               	movlw	240
  5976  087E  1DF6               	btfss	display_date@i+1,3
  5977  087F  3000               	movlw	0
  5978  0880  04F6               	iorwf	display_date@i+1,f
  5979                           
  5980                           ;clock_src.c: 97:      write_char(i + '0');
  5981  0881  0875               	movf	display_date@i,w
  5982  0882  3E30               	addlw	48
  5983  0883  160A  118A  2440  120A  158A  	fcall	_write_char
  5984                           
  5985                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  5986  0888  1683               	bsf	3,5	;RP0=1, select bank1
  5987  0889  0824               	movf	(_table1^(0+128)+4),w
  5988  088A  390F               	andlw	15
  5989  088B  00F3               	movwf	??_display_date
  5990  088C  01F4               	clrf	??_display_date+1
  5991  088D  0873               	movf	??_display_date,w
  5992  088E  00F5               	movwf	display_date@i
  5993  088F  0874               	movf	??_display_date+1,w
  5994  0890  00F6               	movwf	display_date@i+1
  5995                           
  5996                           ;clock_src.c: 100:      write_char(i + '0');
  5997  0891  0875               	movf	display_date@i,w
  5998  0892  3E30               	addlw	48
  5999  0893  160A  118A  2440  120A  158A  	fcall	_write_char
  6000                           
  6001                           ;clock_src.c: 101:      write_char('/');
  6002  0898  302F               	movlw	47
  6003  0899  160A  118A  2440  120A  158A  	fcall	_write_char
  6004                           
  6005                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  6006  089E  1683               	bsf	3,5	;RP0=1, select bank1
  6007  089F  0826               	movf	(_table1^(0+128)+6),w
  6008  08A0  39F0               	andlw	240
  6009  08A1  00F3               	movwf	??_display_date
  6010  08A2  01F4               	clrf	??_display_date+1
  6011  08A3  0873               	movf	??_display_date,w
  6012  08A4  00F5               	movwf	display_date@i
  6013  08A5  0874               	movf	??_display_date+1,w
  6014  08A6  00F6               	movwf	display_date@i+1
  6015                           
  6016                           ;clock_src.c: 106:      i=i>>4;
  6017  08A7  0E75               	swapf	display_date@i,w
  6018  08A8  390F               	andlw	15
  6019  08A9  00F5               	movwf	display_date@i
  6020  08AA  0E76               	swapf	display_date@i+1,w
  6021  08AB  39F0               	andlw	240
  6022  08AC  04F5               	iorwf	display_date@i,f
  6023  08AD  0E76               	swapf	display_date@i+1,w
  6024  08AE  390F               	andlw	15
  6025  08AF  00F6               	movwf	display_date@i+1
  6026  08B0  30F0               	movlw	240
  6027  08B1  1DF6               	btfss	display_date@i+1,3
  6028  08B2  3000               	movlw	0
  6029  08B3  04F6               	iorwf	display_date@i+1,f
  6030                           
  6031                           ;clock_src.c: 107:      write_char(i + '0');
  6032  08B4  0875               	movf	display_date@i,w
  6033  08B5  3E30               	addlw	48
  6034  08B6  160A  118A  2440  120A  158A  	fcall	_write_char
  6035                           
  6036                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  6037  08BB  1683               	bsf	3,5	;RP0=1, select bank1
  6038  08BC  0826               	movf	(_table1^(0+128)+6),w
  6039  08BD  390F               	andlw	15
  6040  08BE  00F3               	movwf	??_display_date
  6041  08BF  01F4               	clrf	??_display_date+1
  6042  08C0  0873               	movf	??_display_date,w
  6043  08C1  00F5               	movwf	display_date@i
  6044  08C2  0874               	movf	??_display_date+1,w
  6045  08C3  00F6               	movwf	display_date@i+1
  6046                           
  6047                           ;clock_src.c: 110:      write_char(i + '0');
  6048  08C4  0875               	movf	display_date@i,w
  6049  08C5  3E30               	addlw	48
  6050  08C6  160A  118A  2440   	fcall	_write_char
  6051  08C9  0008               	return
  6052  08CA                     __end_of_display_date:	
  6053                           
  6054                           	psect	text28
  6055  08CA                     __ptext28:	
  6056 ;; *************** function _display_clock *****************
  6057 ;; Defined at:
  6058 ;;		line 34 in file "clock_src.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  i               2    5[COMMON] int 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 300/0
  6069 ;;		On exit  : 300/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6072 ;;      Params:         0       0       0       0       0
  6073 ;;      Locals:         2       0       0       0       0
  6074 ;;      Temps:          2       0       0       0       0
  6075 ;;      Totals:         4       0       0       0       0
  6076 ;;Total ram usage:        4 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    2
  6079 ;; This function calls:
  6080 ;;		_write_char
  6081 ;; This function is called by:
  6082 ;;		_main
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function _display_clock
  6088  08CA                     _display_clock:	
  6089                           
  6090                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6091                           
  6092                           ;incstack = 0
  6093                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6094  08CA  1886               	btfsc	6,1	;volatile
  6095  08CB  28D5               	goto	l3867
  6096                           
  6097                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6098  08CC  1683               	bsf	3,5	;RP0=1, select bank1
  6099  08CD  0823               	movf	(_table1^(0+128)+3),w
  6100  08CE  00F3               	movwf	??_display_clock
  6101  08CF  0873               	movf	??_display_clock,w
  6102  08D0  00A0               	movwf	_table1^(0+128)
  6103                           
  6104                           ;clock_src.c: 40:           table1[1]=table1[4];
  6105  08D1  0824               	movf	(_table1^(0+128)+4),w
  6106  08D2  00F3               	movwf	??_display_clock
  6107  08D3  0873               	movf	??_display_clock,w
  6108  08D4  00A1               	movwf	(_table1^(0+128)+1)
  6109  08D5                     l3867:	
  6110                           
  6111                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6112  08D5  1683               	bsf	3,5	;RP0=1, select bank1
  6113  08D6  0822               	movf	(_table1^(0+128)+2),w
  6114  08D7  39F0               	andlw	240
  6115  08D8  00F3               	movwf	??_display_clock
  6116  08D9  01F4               	clrf	??_display_clock+1
  6117  08DA  0873               	movf	??_display_clock,w
  6118  08DB  00F5               	movwf	display_clock@i
  6119  08DC  0874               	movf	??_display_clock+1,w
  6120  08DD  00F6               	movwf	display_clock@i+1
  6121                           
  6122                           ;clock_src.c: 44:      i=i>>4;
  6123  08DE  0E75               	swapf	display_clock@i,w
  6124  08DF  390F               	andlw	15
  6125  08E0  00F5               	movwf	display_clock@i
  6126  08E1  0E76               	swapf	display_clock@i+1,w
  6127  08E2  39F0               	andlw	240
  6128  08E3  04F5               	iorwf	display_clock@i,f
  6129  08E4  0E76               	swapf	display_clock@i+1,w
  6130  08E5  390F               	andlw	15
  6131  08E6  00F6               	movwf	display_clock@i+1
  6132  08E7  30F0               	movlw	240
  6133  08E8  1DF6               	btfss	display_clock@i+1,3
  6134  08E9  3000               	movlw	0
  6135  08EA  04F6               	iorwf	display_clock@i+1,f
  6136                           
  6137                           ;clock_src.c: 45:      write_char(i + '0');
  6138  08EB  0875               	movf	display_clock@i,w
  6139  08EC  3E30               	addlw	48
  6140  08ED  160A  118A  2440  120A  158A  	fcall	_write_char
  6141                           
  6142                           ;clock_src.c: 46:      temp_high = i;
  6143  08F2  0875               	movf	display_clock@i,w
  6144  08F3  00F3               	movwf	??_display_clock
  6145  08F4  0873               	movf	??_display_clock,w
  6146  08F5  00C9               	movwf	_temp_high
  6147                           
  6148                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6149  08F6  1683               	bsf	3,5	;RP0=1, select bank1
  6150  08F7  0822               	movf	(_table1^(0+128)+2),w
  6151  08F8  390F               	andlw	15
  6152  08F9  00F3               	movwf	??_display_clock
  6153  08FA  01F4               	clrf	??_display_clock+1
  6154  08FB  0873               	movf	??_display_clock,w
  6155  08FC  00F5               	movwf	display_clock@i
  6156  08FD  0874               	movf	??_display_clock+1,w
  6157  08FE  00F6               	movwf	display_clock@i+1
  6158                           
  6159                           ;clock_src.c: 50:      write_char(i + '0');
  6160  08FF  0875               	movf	display_clock@i,w
  6161  0900  3E30               	addlw	48
  6162  0901  160A  118A  2440  120A  158A  	fcall	_write_char
  6163                           
  6164                           ;clock_src.c: 51:      write_char(':');
  6165  0906  303A               	movlw	58
  6166  0907  160A  118A  2440  120A  158A  	fcall	_write_char
  6167                           
  6168                           ;clock_src.c: 52:      temp_low = i;
  6169  090C  0875               	movf	display_clock@i,w
  6170  090D  00F3               	movwf	??_display_clock
  6171  090E  0873               	movf	??_display_clock,w
  6172  090F  00CA               	movwf	_temp_low
  6173                           
  6174                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6175  0910  1683               	bsf	3,5	;RP0=1, select bank1
  6176  0911  0821               	movf	(_table1^(0+128)+1),w
  6177  0912  39F0               	andlw	240
  6178  0913  00F3               	movwf	??_display_clock
  6179  0914  01F4               	clrf	??_display_clock+1
  6180  0915  0873               	movf	??_display_clock,w
  6181  0916  00F5               	movwf	display_clock@i
  6182  0917  0874               	movf	??_display_clock+1,w
  6183  0918  00F6               	movwf	display_clock@i+1
  6184                           
  6185                           ;clock_src.c: 56:      i=i>>4;
  6186  0919  0E75               	swapf	display_clock@i,w
  6187  091A  390F               	andlw	15
  6188  091B  00F5               	movwf	display_clock@i
  6189  091C  0E76               	swapf	display_clock@i+1,w
  6190  091D  39F0               	andlw	240
  6191  091E  04F5               	iorwf	display_clock@i,f
  6192  091F  0E76               	swapf	display_clock@i+1,w
  6193  0920  390F               	andlw	15
  6194  0921  00F6               	movwf	display_clock@i+1
  6195  0922  30F0               	movlw	240
  6196  0923  1DF6               	btfss	display_clock@i+1,3
  6197  0924  3000               	movlw	0
  6198  0925  04F6               	iorwf	display_clock@i+1,f
  6199                           
  6200                           ;clock_src.c: 57:      write_char(i + '0');
  6201  0926  0875               	movf	display_clock@i,w
  6202  0927  3E30               	addlw	48
  6203  0928  160A  118A  2440  120A  158A  	fcall	_write_char
  6204                           
  6205                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6206  092D  1683               	bsf	3,5	;RP0=1, select bank1
  6207  092E  0821               	movf	(_table1^(0+128)+1),w
  6208  092F  390F               	andlw	15
  6209  0930  00F3               	movwf	??_display_clock
  6210  0931  01F4               	clrf	??_display_clock+1
  6211  0932  0873               	movf	??_display_clock,w
  6212  0933  00F5               	movwf	display_clock@i
  6213  0934  0874               	movf	??_display_clock+1,w
  6214  0935  00F6               	movwf	display_clock@i+1
  6215                           
  6216                           ;clock_src.c: 61:      write_char(i + '0');
  6217  0936  0875               	movf	display_clock@i,w
  6218  0937  3E30               	addlw	48
  6219  0938  160A  118A  2440  120A  158A  	fcall	_write_char
  6220                           
  6221                           ;clock_src.c: 62:      write_char(':');
  6222  093D  303A               	movlw	58
  6223  093E  160A  118A  2440  120A  158A  	fcall	_write_char
  6224                           
  6225                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6226  0943  1683               	bsf	3,5	;RP0=1, select bank1
  6227  0944  0820               	movf	_table1^(0+128),w
  6228  0945  39F0               	andlw	240
  6229  0946  00F3               	movwf	??_display_clock
  6230  0947  01F4               	clrf	??_display_clock+1
  6231  0948  0873               	movf	??_display_clock,w
  6232  0949  00F5               	movwf	display_clock@i
  6233  094A  0874               	movf	??_display_clock+1,w
  6234  094B  00F6               	movwf	display_clock@i+1
  6235                           
  6236                           ;clock_src.c: 66:      i=i>>4;
  6237  094C  0E75               	swapf	display_clock@i,w
  6238  094D  390F               	andlw	15
  6239  094E  00F5               	movwf	display_clock@i
  6240  094F  0E76               	swapf	display_clock@i+1,w
  6241  0950  39F0               	andlw	240
  6242  0951  04F5               	iorwf	display_clock@i,f
  6243  0952  0E76               	swapf	display_clock@i+1,w
  6244  0953  390F               	andlw	15
  6245  0954  00F6               	movwf	display_clock@i+1
  6246  0955  30F0               	movlw	240
  6247  0956  1DF6               	btfss	display_clock@i+1,3
  6248  0957  3000               	movlw	0
  6249  0958  04F6               	iorwf	display_clock@i+1,f
  6250                           
  6251                           ;clock_src.c: 67:      write_char(i + '0');
  6252  0959  0875               	movf	display_clock@i,w
  6253  095A  3E30               	addlw	48
  6254  095B  160A  118A  2440  120A  158A  	fcall	_write_char
  6255                           
  6256                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6257  0960  1683               	bsf	3,5	;RP0=1, select bank1
  6258  0961  0820               	movf	_table1^(0+128),w
  6259  0962  390F               	andlw	15
  6260  0963  00F3               	movwf	??_display_clock
  6261  0964  01F4               	clrf	??_display_clock+1
  6262  0965  0873               	movf	??_display_clock,w
  6263  0966  00F5               	movwf	display_clock@i
  6264  0967  0874               	movf	??_display_clock+1,w
  6265  0968  00F6               	movwf	display_clock@i+1
  6266                           
  6267                           ;clock_src.c: 71:      write_char(i + '0');
  6268  0969  0875               	movf	display_clock@i,w
  6269  096A  3E30               	addlw	48
  6270  096B  160A  118A  2440   	fcall	_write_char
  6271  096E  0008               	return
  6272  096F                     __end_of_display_clock:	
  6273                           
  6274                           	psect	text29
  6275  0387                     __ptext29:	
  6276 ;; *************** function _date_settings *****************
  6277 ;; Defined at:
  6278 ;;		line 366 in file "Button_src.c"
  6279 ;; Parameters:    Size  Location     Type
  6280 ;;		None
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;		None
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  1    wreg      void 
  6285 ;; Registers used:
  6286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 300/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6292 ;;      Params:         0       0       0       0       0
  6293 ;;      Locals:         0       0       0       0       0
  6294 ;;      Temps:          0       3       0       0       0
  6295 ;;      Totals:         0       3       0       0       0
  6296 ;;Total ram usage:        3 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    3
  6299 ;; This function calls:
  6300 ;;		_button_delay
  6301 ;;		_incrementor
  6302 ;;		_modulus_func
  6303 ;;		_set_time
  6304 ;;		_time_date_delimiter
  6305 ;;		_time_date_hex_terminator
  6306 ;;		_write_char
  6307 ;;		_write_cmd
  6308 ;; This function is called by:
  6309 ;;		_main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _date_settings
  6315  0387                     _date_settings:	
  6316                           
  6317                           ;Button_src.c: 367:  RC0 = 0;
  6318                           
  6319                           ;incstack = 0
  6320                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6321  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6322  0388  1303               	bcf	3,6	;RP1=0, select bank0
  6323  0389  1007               	bcf	7,0	;volatile
  6324                           
  6325                           ;Button_src.c: 368:  RC1 = 1;
  6326  038A  1487               	bsf	7,1	;volatile
  6327                           
  6328                           ;Button_src.c: 369:  RC2 = 1;
  6329  038B  1507               	bsf	7,2	;volatile
  6330                           
  6331                           ;Button_src.c: 370:  RC3 = 1;
  6332  038C  1587               	bsf	7,3	;volatile
  6333                           
  6334                           ;Button_src.c: 371:   if (RC4 == 0){
  6335  038D  1A07               	btfsc	7,4	;volatile
  6336  038E  0008               	return
  6337                           
  6338                           ;Button_src.c: 372:       write_cmd(0x1);
  6339  038F  3001               	movlw	1
  6340  0390  120A  118A  2006  120A  118A  	fcall	_write_cmd
  6341  0395                     l731:	
  6342                           ;Button_src.c: 373:       for(;;){
  6343                           
  6344                           
  6345                           ;Button_src.c: 374:             write_cmd(0x80);
  6346  0395  3080               	movlw	128
  6347  0396  120A  118A  2006  120A  118A  	fcall	_write_cmd
  6348                           
  6349                           ;Button_src.c: 375:             write_char('D');
  6350  039B  3044               	movlw	68
  6351  039C  160A  118A  2440  120A  118A  	fcall	_write_char
  6352                           
  6353                           ;Button_src.c: 376:             write_char('a');
  6354  03A1  3061               	movlw	97
  6355  03A2  160A  118A  2440  120A  118A  	fcall	_write_char
  6356                           
  6357                           ;Button_src.c: 377:             write_char('t');
  6358  03A7  3074               	movlw	116
  6359  03A8  160A  118A  2440  120A  118A  	fcall	_write_char
  6360                           
  6361                           ;Button_src.c: 378:             write_char('e');
  6362  03AD  3065               	movlw	101
  6363  03AE  160A  118A  2440  120A  118A  	fcall	_write_char
  6364                           
  6365                           ;Button_src.c: 379:             write_char('_');
  6366  03B3  305F               	movlw	95
  6367  03B4  160A  118A  2440  120A  118A  	fcall	_write_char
  6368                           
  6369                           ;Button_src.c: 380:             write_char('S');
  6370  03B9  3053               	movlw	83
  6371  03BA  160A  118A  2440  120A  118A  	fcall	_write_char
  6372                           
  6373                           ;Button_src.c: 381:             write_char('e');
  6374  03BF  3065               	movlw	101
  6375  03C0  160A  118A  2440  120A  118A  	fcall	_write_char
  6376                           
  6377                           ;Button_src.c: 382:             write_char('t');
  6378  03C5  3074               	movlw	116
  6379  03C6  160A  118A  2440  120A  118A  	fcall	_write_char
  6380                           
  6381                           ;Button_src.c: 383:             write_char('t');
  6382  03CB  3074               	movlw	116
  6383  03CC  160A  118A  2440  120A  118A  	fcall	_write_char
  6384                           
  6385                           ;Button_src.c: 384:             write_char('i');
  6386  03D1  3069               	movlw	105
  6387  03D2  160A  118A  2440  120A  118A  	fcall	_write_char
  6388                           
  6389                           ;Button_src.c: 385:             write_char('n');
  6390  03D7  306E               	movlw	110
  6391  03D8  160A  118A  2440  120A  118A  	fcall	_write_char
  6392                           
  6393                           ;Button_src.c: 386:             write_char('g');
  6394  03DD  3067               	movlw	103
  6395  03DE  160A  118A  2440  120A  118A  	fcall	_write_char
  6396                           
  6397                           ;Button_src.c: 387:             write_char('s');
  6398  03E3  3073               	movlw	115
  6399  03E4  160A  118A  2440  120A  118A  	fcall	_write_char
  6400                           
  6401                           ;Button_src.c: 388:             RC0 = 1;
  6402  03E9  1407               	bsf	7,0	;volatile
  6403                           
  6404                           ;Button_src.c: 389:             RC1 = 0;
  6405  03EA  1087               	bcf	7,1	;volatile
  6406                           
  6407                           ;Button_src.c: 390:             RC2 = 1;
  6408  03EB  1507               	bsf	7,2	;volatile
  6409                           
  6410                           ;Button_src.c: 391:             RC3 = 1;
  6411  03EC  1587               	bsf	7,3	;volatile
  6412                           
  6413                           ;Button_src.c: 392:             if(RC7 == 0 && b =='x'){
  6414  03ED  1B87               	btfsc	7,7	;volatile
  6415  03EE  2C5F               	goto	l4103
  6416  03EF  3078               	movlw	120
  6417  03F0  0647               	xorwf	_b,w
  6418  03F1  1D03               	btfss	3,2
  6419  03F2  2C5F               	goto	l4103
  6420                           
  6421                           ;Button_src.c: 393:                 if(stats == 1)
  6422  03F3  0324               	decf	_stats,w
  6423  03F4  0425               	iorwf	_stats+1,w
  6424  03F5  1D03               	btfss	3,2
  6425  03F6  2BFB               	goto	l733
  6426                           
  6427                           ;Button_src.c: 394:                     a++;
  6428  03F7  3001               	movlw	1
  6429  03F8  00E3               	movwf	??_date_settings
  6430  03F9  0863               	movf	??_date_settings,w
  6431  03FA  07C8               	addwf	_a,f
  6432  03FB                     l733:	
  6433                           
  6434                           ;Button_src.c: 395:                 if(stats == 0){
  6435  03FB  0824               	movf	_stats,w
  6436  03FC  0425               	iorwf	_stats+1,w
  6437  03FD  1D03               	btfss	3,2
  6438  03FE  2C03               	goto	l734
  6439                           
  6440                           ;Button_src.c: 396:                     stats = 1;
  6441  03FF  3001               	movlw	1
  6442  0400  00A4               	movwf	_stats
  6443  0401  3000               	movlw	0
  6444  0402  00A5               	movwf	_stats+1
  6445  0403                     l734:	
  6446                           ;Button_src.c: 397:                 }
  6447                           
  6448                           
  6449                           ;Button_src.c: 399:                     x++ ;
  6450  0403  3001               	movlw	1
  6451  0404  07AE               	addwf	_x,f
  6452  0405  1803               	skipnc
  6453  0406  0AAF               	incf	_x+1,f
  6454  0407  3000               	movlw	0
  6455  0408  07AF               	addwf	_x+1,f
  6456                           
  6457                           ;Button_src.c: 400:                     x = modulus_func(x,10);
  6458  0409  082F               	movf	_x+1,w
  6459  040A  00F8               	movwf	modulus_func@x+1
  6460  040B  082E               	movf	_x,w
  6461  040C  00F7               	movwf	modulus_func@x
  6462  040D  300A               	movlw	10
  6463  040E  00F9               	movwf	modulus_func@y
  6464  040F  3000               	movlw	0
  6465  0410  00FA               	movwf	modulus_func@y+1
  6466  0411  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  6467  0416  0878               	movf	?_modulus_func+1,w
  6468  0417  00AF               	movwf	_x+1
  6469  0418  0877               	movf	?_modulus_func,w
  6470  0419  00AE               	movwf	_x
  6471                           
  6472                           ;Button_src.c: 401:                      if (p == 1){
  6473  041A  0322               	decf	_p,w
  6474  041B  0423               	iorwf	_p+1,w
  6475  041C  1D03               	btfss	3,2
  6476  041D  2C37               	goto	l4089
  6477                           
  6478                           ;Button_src.c: 402:                         y = incrementor(y,x,'0');
  6479  041E  082D               	movf	_y+1,w
  6480  041F  00DF               	movwf	incrementor@upper_val+1
  6481  0420  082C               	movf	_y,w
  6482  0421  00DE               	movwf	incrementor@upper_val
  6483  0422  082F               	movf	_x+1,w
  6484  0423  00E1               	movwf	incrementor@lower_val+1
  6485  0424  082E               	movf	_x,w
  6486  0425  00E0               	movwf	incrementor@lower_val
  6487  0426  3030               	movlw	48
  6488  0427  00E3               	movwf	??_date_settings
  6489  0428  0863               	movf	??_date_settings,w
  6490  0429  00E2               	movwf	incrementor@z
  6491  042A  160A  118A  24FC  120A  118A  	fcall	_incrementor
  6492  042F  00E4               	movwf	??_date_settings+1
  6493  0430  01E5               	clrf	??_date_settings+2
  6494  0431  0864               	movf	??_date_settings+1,w
  6495  0432  00AC               	movwf	_y
  6496  0433  0865               	movf	??_date_settings+2,w
  6497  0434  00AD               	movwf	_y+1
  6498                           
  6499                           ;Button_src.c: 403:                         p = 0;
  6500  0435  01A2               	clrf	_p
  6501  0436  01A3               	clrf	_p+1
  6502  0437                     l4089:	
  6503                           
  6504                           ;Button_src.c: 405:                     if (x == 9){
  6505  0437  3009               	movlw	9
  6506  0438  062E               	xorwf	_x,w
  6507  0439  042F               	iorwf	_x+1,w
  6508  043A  1D03               	btfss	3,2
  6509  043B  2C40               	goto	l4093
  6510                           
  6511                           ;Button_src.c: 406:                         p = 1;
  6512  043C  3001               	movlw	1
  6513  043D  00A2               	movwf	_p
  6514  043E  3000               	movlw	0
  6515  043F  00A3               	movwf	_p+1
  6516  0440                     l4093:	
  6517                           
  6518                           ;Button_src.c: 408:                     a = time_date_hex_terminator(a,'C');
  6519  0440  3043               	movlw	67
  6520  0441  00E3               	movwf	??_date_settings
  6521  0442  0863               	movf	??_date_settings,w
  6522  0443  00F0               	movwf	time_date_hex_terminator@limiter
  6523  0444  0848               	movf	_a,w
  6524  0445  160A  118A  23B1  120A  118A  	fcall	_time_date_hex_terminator
  6525  044A  00E4               	movwf	??_date_settings+1
  6526  044B  0864               	movf	??_date_settings+1,w
  6527  044C  00C8               	movwf	_a
  6528                           
  6529                           ;Button_src.c: 410:                     if(y == 1 && x == 3){
  6530  044D  032C               	decf	_y,w
  6531  044E  042D               	iorwf	_y+1,w
  6532  044F  1D03               	btfss	3,2
  6533  0450  2C5A               	goto	l4101
  6534  0451  3003               	movlw	3
  6535  0452  062E               	xorwf	_x,w
  6536  0453  042F               	iorwf	_x+1,w
  6537  0454  1D03               	btfss	3,2
  6538  0455  2C5A               	goto	l4101
  6539                           
  6540                           ;Button_src.c: 411:                         x = 0;
  6541  0456  01AE               	clrf	_x
  6542  0457  01AF               	clrf	_x+1
  6543                           
  6544                           ;Button_src.c: 412:                         y = 0;
  6545  0458  01AC               	clrf	_y
  6546  0459  01AD               	clrf	_y+1
  6547  045A                     l4101:	
  6548                           
  6549                           ;Button_src.c: 414:                     button_delay();
  6550  045A  160A  118A  23F0  120A  118A  	fcall	_button_delay
  6551  045F                     l4103:	
  6552                           
  6553                           ;Button_src.c: 416:             if(RC7==0 && b == 'y'){
  6554  045F  1283               	bcf	3,5	;RP0=0, select bank0
  6555  0460  1303               	bcf	3,6	;RP1=0, select bank0
  6556  0461  1B87               	btfsc	7,7	;volatile
  6557  0462  2CE5               	goto	l4137
  6558  0463  3079               	movlw	121
  6559  0464  0647               	xorwf	_b,w
  6560  0465  1D03               	btfss	3,2
  6561  0466  2CE5               	goto	l4137
  6562                           
  6563                           ;Button_src.c: 417:                  if(stats == 1)
  6564  0467  0324               	decf	_stats,w
  6565  0468  0425               	iorwf	_stats+1,w
  6566  0469  1D03               	btfss	3,2
  6567  046A  2C6F               	goto	l739
  6568                           
  6569                           ;Button_src.c: 418:                     day_hex++;
  6570  046B  3001               	movlw	1
  6571  046C  00E3               	movwf	??_date_settings
  6572  046D  0863               	movf	??_date_settings,w
  6573  046E  07C5               	addwf	_day_hex,f
  6574  046F                     l739:	
  6575                           
  6576                           ;Button_src.c: 419:                 if(stats == 0){
  6577  046F  0824               	movf	_stats,w
  6578  0470  0425               	iorwf	_stats+1,w
  6579  0471  1D03               	btfss	3,2
  6580  0472  2C77               	goto	l740
  6581                           
  6582                           ;Button_src.c: 420:                     stats = 1;
  6583  0473  3001               	movlw	1
  6584  0474  00A4               	movwf	_stats
  6585  0475  3000               	movlw	0
  6586  0476  00A5               	movwf	_stats+1
  6587  0477                     l740:	
  6588                           ;Button_src.c: 421:                 }
  6589                           
  6590                           
  6591                           ;Button_src.c: 423:                     day_low++;
  6592  0477  3001               	movlw	1
  6593  0478  07A8               	addwf	_day_low,f
  6594  0479  1803               	skipnc
  6595  047A  0AA9               	incf	_day_low+1,f
  6596  047B  3000               	movlw	0
  6597  047C  07A9               	addwf	_day_low+1,f
  6598                           
  6599                           ;Button_src.c: 424:                     day_low = modulus_func(day_low,10);
  6600  047D  0829               	movf	_day_low+1,w
  6601  047E  00F8               	movwf	modulus_func@x+1
  6602  047F  0828               	movf	_day_low,w
  6603  0480  00F7               	movwf	modulus_func@x
  6604  0481  300A               	movlw	10
  6605  0482  00F9               	movwf	modulus_func@y
  6606  0483  3000               	movlw	0
  6607  0484  00FA               	movwf	modulus_func@y+1
  6608  0485  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  6609  048A  0878               	movf	?_modulus_func+1,w
  6610  048B  00A9               	movwf	_day_low+1
  6611  048C  0877               	movf	?_modulus_func,w
  6612  048D  00A8               	movwf	_day_low
  6613                           
  6614                           ;Button_src.c: 425:                     day_counter = modulus_func(day_low,8);
  6615  048E  0829               	movf	_day_low+1,w
  6616  048F  00F8               	movwf	modulus_func@x+1
  6617  0490  0828               	movf	_day_low,w
  6618  0491  00F7               	movwf	modulus_func@x
  6619  0492  3008               	movlw	8
  6620  0493  00F9               	movwf	modulus_func@y
  6621  0494  3000               	movlw	0
  6622  0495  00FA               	movwf	modulus_func@y+1
  6623  0496  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  6624  049B  0878               	movf	?_modulus_func+1,w
  6625  049C  00A1               	movwf	_day_counter+1
  6626  049D  0877               	movf	?_modulus_func,w
  6627  049E  00A0               	movwf	_day_counter
  6628                           
  6629                           ;Button_src.c: 426:                     if (p == 1){
  6630  049F  0322               	decf	_p,w
  6631  04A0  0423               	iorwf	_p+1,w
  6632  04A1  1D03               	btfss	3,2
  6633  04A2  2CBC               	goto	l4123
  6634                           
  6635                           ;Button_src.c: 427:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6636  04A3  0827               	movf	_day_high+1,w
  6637  04A4  00DF               	movwf	incrementor@upper_val+1
  6638  04A5  0826               	movf	_day_high,w
  6639  04A6  00DE               	movwf	incrementor@upper_val
  6640  04A7  0829               	movf	_day_low+1,w
  6641  04A8  00E1               	movwf	incrementor@lower_val+1
  6642  04A9  0828               	movf	_day_low,w
  6643  04AA  00E0               	movwf	incrementor@lower_val
  6644  04AB  3030               	movlw	48
  6645  04AC  00E3               	movwf	??_date_settings
  6646  04AD  0863               	movf	??_date_settings,w
  6647  04AE  00E2               	movwf	incrementor@z
  6648  04AF  160A  118A  24FC  120A  118A  	fcall	_incrementor
  6649  04B4  00E4               	movwf	??_date_settings+1
  6650  04B5  01E5               	clrf	??_date_settings+2
  6651  04B6  0864               	movf	??_date_settings+1,w
  6652  04B7  00A6               	movwf	_day_high
  6653  04B8  0865               	movf	??_date_settings+2,w
  6654  04B9  00A7               	movwf	_day_high+1
  6655                           
  6656                           ;Button_src.c: 428:                         p = 0;
  6657  04BA  01A2               	clrf	_p
  6658  04BB  01A3               	clrf	_p+1
  6659  04BC                     l4123:	
  6660                           
  6661                           ;Button_src.c: 430:                     if (day_low == 9){
  6662  04BC  3009               	movlw	9
  6663  04BD  0628               	xorwf	_day_low,w
  6664  04BE  0429               	iorwf	_day_low+1,w
  6665  04BF  1D03               	btfss	3,2
  6666  04C0  2CC5               	goto	l4127
  6667                           
  6668                           ;Button_src.c: 431:                         p = 1;
  6669  04C1  3001               	movlw	1
  6670  04C2  00A2               	movwf	_p
  6671  04C3  3000               	movlw	0
  6672  04C4  00A3               	movwf	_p+1
  6673  04C5                     l4127:	
  6674                           
  6675                           ;Button_src.c: 433:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6676  04C5  3063               	movlw	99
  6677  04C6  00E3               	movwf	??_date_settings
  6678  04C7  0863               	movf	??_date_settings,w
  6679  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6680  04C9  0845               	movf	_day_hex,w
  6681  04CA  160A  118A  23B1  120A  118A  	fcall	_time_date_hex_terminator
  6682  04CF  00E4               	movwf	??_date_settings+1
  6683  04D0  0864               	movf	??_date_settings+1,w
  6684  04D1  00C5               	movwf	_day_hex
  6685                           
  6686                           ;Button_src.c: 434:                     if(day_high == 3 && day_low==2 ){
  6687  04D2  3003               	movlw	3
  6688  04D3  0626               	xorwf	_day_high,w
  6689  04D4  0427               	iorwf	_day_high+1,w
  6690  04D5  1D03               	btfss	3,2
  6691  04D6  2CE0               	goto	l4135
  6692  04D7  3002               	movlw	2
  6693  04D8  0628               	xorwf	_day_low,w
  6694  04D9  0429               	iorwf	_day_low+1,w
  6695  04DA  1D03               	btfss	3,2
  6696  04DB  2CE0               	goto	l4135
  6697                           
  6698                           ;Button_src.c: 435:                         day_high = 0;
  6699  04DC  01A6               	clrf	_day_high
  6700  04DD  01A7               	clrf	_day_high+1
  6701                           
  6702                           ;Button_src.c: 436:                         day_low = 0;
  6703  04DE  01A8               	clrf	_day_low
  6704  04DF  01A9               	clrf	_day_low+1
  6705  04E0                     l4135:	
  6706                           
  6707                           ;Button_src.c: 438:                     button_delay();
  6708  04E0  160A  118A  23F0  120A  118A  	fcall	_button_delay
  6709  04E5                     l4137:	
  6710                           
  6711                           ;Button_src.c: 440:             if(RC7==0 && b == 'z'){
  6712  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6713  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6714  04E7  1B87               	btfsc	7,7	;volatile
  6715  04E8  2D4C               	goto	l4169
  6716  04E9  307A               	movlw	122
  6717  04EA  0647               	xorwf	_b,w
  6718  04EB  1D03               	btfss	3,2
  6719  04EC  2D4C               	goto	l4169
  6720                           
  6721                           ;Button_src.c: 441:                 if(stats == 1)
  6722  04ED  0324               	decf	_stats,w
  6723  04EE  0425               	iorwf	_stats+1,w
  6724  04EF  1D03               	btfss	3,2
  6725  04F0  2CF5               	goto	l745
  6726                           
  6727                           ;Button_src.c: 442:                    c++;
  6728  04F1  3001               	movlw	1
  6729  04F2  00E3               	movwf	??_date_settings
  6730  04F3  0863               	movf	??_date_settings,w
  6731  04F4  07C6               	addwf	_c,f
  6732  04F5                     l745:	
  6733                           
  6734                           ;Button_src.c: 443:                 if(stats == 0){
  6735  04F5  0824               	movf	_stats,w
  6736  04F6  0425               	iorwf	_stats+1,w
  6737  04F7  1D03               	btfss	3,2
  6738  04F8  2CFD               	goto	l746
  6739                           
  6740                           ;Button_src.c: 444:                     stats = 1;
  6741  04F9  3001               	movlw	1
  6742  04FA  00A4               	movwf	_stats
  6743  04FB  3000               	movlw	0
  6744  04FC  00A5               	movwf	_stats+1
  6745  04FD                     l746:	
  6746                           ;Button_src.c: 445:                 }
  6747                           
  6748                           
  6749                           ;Button_src.c: 447:                     t++;
  6750  04FD  3001               	movlw	1
  6751  04FE  07B2               	addwf	_t,f
  6752  04FF  1803               	skipnc
  6753  0500  0AB3               	incf	_t+1,f
  6754  0501  3000               	movlw	0
  6755  0502  07B3               	addwf	_t+1,f
  6756                           
  6757                           ;Button_src.c: 448:                     t = modulus_func(t,10);
  6758  0503  0833               	movf	_t+1,w
  6759  0504  00F8               	movwf	modulus_func@x+1
  6760  0505  0832               	movf	_t,w
  6761  0506  00F7               	movwf	modulus_func@x
  6762  0507  300A               	movlw	10
  6763  0508  00F9               	movwf	modulus_func@y
  6764  0509  3000               	movlw	0
  6765  050A  00FA               	movwf	modulus_func@y+1
  6766  050B  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  6767  0510  0878               	movf	?_modulus_func+1,w
  6768  0511  00B3               	movwf	_t+1
  6769  0512  0877               	movf	?_modulus_func,w
  6770  0513  00B2               	movwf	_t
  6771                           
  6772                           ;Button_src.c: 449:                      if (p == 1){
  6773  0514  0322               	decf	_p,w
  6774  0515  0423               	iorwf	_p+1,w
  6775  0516  1D03               	btfss	3,2
  6776  0517  2D31               	goto	l4155
  6777                           
  6778                           ;Button_src.c: 450:                         w = incrementor(w,t,'0');
  6779  0518  0831               	movf	_w+1,w
  6780  0519  00DF               	movwf	incrementor@upper_val+1
  6781  051A  0830               	movf	_w,w
  6782  051B  00DE               	movwf	incrementor@upper_val
  6783  051C  0833               	movf	_t+1,w
  6784  051D  00E1               	movwf	incrementor@lower_val+1
  6785  051E  0832               	movf	_t,w
  6786  051F  00E0               	movwf	incrementor@lower_val
  6787  0520  3030               	movlw	48
  6788  0521  00E3               	movwf	??_date_settings
  6789  0522  0863               	movf	??_date_settings,w
  6790  0523  00E2               	movwf	incrementor@z
  6791  0524  160A  118A  24FC  120A  118A  	fcall	_incrementor
  6792  0529  00E4               	movwf	??_date_settings+1
  6793  052A  01E5               	clrf	??_date_settings+2
  6794  052B  0864               	movf	??_date_settings+1,w
  6795  052C  00B0               	movwf	_w
  6796  052D  0865               	movf	??_date_settings+2,w
  6797  052E  00B1               	movwf	_w+1
  6798                           
  6799                           ;Button_src.c: 451:                         p = 0;
  6800  052F  01A2               	clrf	_p
  6801  0530  01A3               	clrf	_p+1
  6802  0531                     l4155:	
  6803                           
  6804                           ;Button_src.c: 453:                     if (t == 9){
  6805  0531  3009               	movlw	9
  6806  0532  0632               	xorwf	_t,w
  6807  0533  0433               	iorwf	_t+1,w
  6808  0534  1D03               	btfss	3,2
  6809  0535  2D3A               	goto	l4159
  6810                           
  6811                           ;Button_src.c: 454:                         p = 1;
  6812  0536  3001               	movlw	1
  6813  0537  00A2               	movwf	_p
  6814  0538  3000               	movlw	0
  6815  0539  00A3               	movwf	_p+1
  6816  053A                     l4159:	
  6817                           
  6818                           ;Button_src.c: 457:                      if(c == (0x59 + 1)){
  6819  053A  305A               	movlw	90
  6820  053B  0646               	xorwf	_c,w
  6821  053C  1903               	btfsc	3,2
  6822                           
  6823                           ;Button_src.c: 458:                         c = 0x00;
  6824  053D  01C6               	clrf	_c
  6825                           
  6826                           ;Button_src.c: 460:                     if(w == 6){
  6827  053E  3006               	movlw	6
  6828  053F  0630               	xorwf	_w,w
  6829  0540  0431               	iorwf	_w+1,w
  6830  0541  1D03               	btfss	3,2
  6831  0542  2D47               	goto	l4167
  6832                           
  6833                           ;Button_src.c: 461:                         w = 0;
  6834  0543  01B0               	clrf	_w
  6835  0544  01B1               	clrf	_w+1
  6836                           
  6837                           ;Button_src.c: 462:                         t = 0;
  6838  0545  01B2               	clrf	_t
  6839  0546  01B3               	clrf	_t+1
  6840  0547                     l4167:	
  6841                           
  6842                           ;Button_src.c: 464:                     button_delay();
  6843  0547  160A  118A  23F0  120A  118A  	fcall	_button_delay
  6844  054C                     l4169:	
  6845                           
  6846                           ;Button_src.c: 471:                     a = time_date_delimiter(a,0x11,'9',1);
  6847  054C  3011               	movlw	17
  6848  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6849  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6850  054F  00E3               	movwf	??_date_settings
  6851  0550  0863               	movf	??_date_settings,w
  6852  0551  00F0               	movwf	time_date_delimiter@hex
  6853  0552  3039               	movlw	57
  6854  0553  00E4               	movwf	??_date_settings+1
  6855  0554  0864               	movf	??_date_settings+1,w
  6856  0555  00F1               	movwf	time_date_delimiter@limiter
  6857  0556  3001               	movlw	1
  6858  0557  00F2               	movwf	time_date_delimiter@type
  6859  0558  3000               	movlw	0
  6860  0559  00F3               	movwf	time_date_delimiter@type+1
  6861  055A  0848               	movf	_a,w
  6862  055B  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6863  0560  00E5               	movwf	??_date_settings+2
  6864  0561  0865               	movf	??_date_settings+2,w
  6865  0562  00C8               	movwf	_a
  6866                           
  6867                           ;Button_src.c: 473:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6868  0563  3011               	movlw	17
  6869  0564  00E3               	movwf	??_date_settings
  6870  0565  0863               	movf	??_date_settings,w
  6871  0566  00F0               	movwf	time_date_delimiter@hex
  6872  0567  3039               	movlw	57
  6873  0568  00E4               	movwf	??_date_settings+1
  6874  0569  0864               	movf	??_date_settings+1,w
  6875  056A  00F1               	movwf	time_date_delimiter@limiter
  6876  056B  3002               	movlw	2
  6877  056C  00F2               	movwf	time_date_delimiter@type
  6878  056D  3000               	movlw	0
  6879  056E  00F3               	movwf	time_date_delimiter@type+1
  6880  056F  0845               	movf	_day_hex,w
  6881  0570  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6882  0575  00E5               	movwf	??_date_settings+2
  6883  0576  0865               	movf	??_date_settings+2,w
  6884  0577  00C5               	movwf	_day_hex
  6885                           
  6886                           ;Button_src.c: 474:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6887  0578  3021               	movlw	33
  6888  0579  00E3               	movwf	??_date_settings
  6889  057A  0863               	movf	??_date_settings,w
  6890  057B  00F0               	movwf	time_date_delimiter@hex
  6891  057C  304A               	movlw	74
  6892  057D  00E4               	movwf	??_date_settings+1
  6893  057E  0864               	movf	??_date_settings+1,w
  6894  057F  00F1               	movwf	time_date_delimiter@limiter
  6895  0580  3002               	movlw	2
  6896  0581  00F2               	movwf	time_date_delimiter@type
  6897  0582  3000               	movlw	0
  6898  0583  00F3               	movwf	time_date_delimiter@type+1
  6899  0584  0845               	movf	_day_hex,w
  6900  0585  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6901  058A  00E5               	movwf	??_date_settings+2
  6902  058B  0865               	movf	??_date_settings+2,w
  6903  058C  00C5               	movwf	_day_hex
  6904                           
  6905                           ;Button_src.c: 475:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6906  058D  3011               	movlw	17
  6907  058E  00E3               	movwf	??_date_settings
  6908  058F  0863               	movf	??_date_settings,w
  6909  0590  00F0               	movwf	time_date_delimiter@hex
  6910  0591  3039               	movlw	57
  6911  0592  00E4               	movwf	??_date_settings+1
  6912  0593  0864               	movf	??_date_settings+1,w
  6913  0594  00F1               	movwf	time_date_delimiter@limiter
  6914  0595  3002               	movlw	2
  6915  0596  00F2               	movwf	time_date_delimiter@type
  6916  0597  3000               	movlw	0
  6917  0598  00F3               	movwf	time_date_delimiter@type+1
  6918  0599  0845               	movf	_day_hex,w
  6919  059A  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6920  059F  00E5               	movwf	??_date_settings+2
  6921  05A0  0865               	movf	??_date_settings+2,w
  6922  05A1  00C5               	movwf	_day_hex
  6923                           
  6924                           ;Button_src.c: 476:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6925  05A2  3021               	movlw	33
  6926  05A3  00E3               	movwf	??_date_settings
  6927  05A4  0863               	movf	??_date_settings,w
  6928  05A5  00F0               	movwf	time_date_delimiter@hex
  6929  05A6  304A               	movlw	74
  6930  05A7  00E4               	movwf	??_date_settings+1
  6931  05A8  0864               	movf	??_date_settings+1,w
  6932  05A9  00F1               	movwf	time_date_delimiter@limiter
  6933  05AA  3002               	movlw	2
  6934  05AB  00F2               	movwf	time_date_delimiter@type
  6935  05AC  3000               	movlw	0
  6936  05AD  00F3               	movwf	time_date_delimiter@type+1
  6937  05AE  0845               	movf	_day_hex,w
  6938  05AF  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6939  05B4  00E5               	movwf	??_date_settings+2
  6940  05B5  0865               	movf	??_date_settings+2,w
  6941  05B6  00C5               	movwf	_day_hex
  6942                           
  6943                           ;Button_src.c: 477:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6944  05B7  3031               	movlw	49
  6945  05B8  00E3               	movwf	??_date_settings
  6946  05B9  0863               	movf	??_date_settings,w
  6947  05BA  00F0               	movwf	time_date_delimiter@hex
  6948  05BB  3059               	movlw	89
  6949  05BC  00E4               	movwf	??_date_settings+1
  6950  05BD  0864               	movf	??_date_settings+1,w
  6951  05BE  00F1               	movwf	time_date_delimiter@limiter
  6952  05BF  3002               	movlw	2
  6953  05C0  00F2               	movwf	time_date_delimiter@type
  6954  05C1  3000               	movlw	0
  6955  05C2  00F3               	movwf	time_date_delimiter@type+1
  6956  05C3  0845               	movf	_day_hex,w
  6957  05C4  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6958  05C9  00E5               	movwf	??_date_settings+2
  6959  05CA  0865               	movf	??_date_settings+2,w
  6960  05CB  00C5               	movwf	_day_hex
  6961                           
  6962                           ;Button_src.c: 479:                     c = time_date_delimiter(c,0x11,'9',3);
  6963  05CC  3011               	movlw	17
  6964  05CD  00E3               	movwf	??_date_settings
  6965  05CE  0863               	movf	??_date_settings,w
  6966  05CF  00F0               	movwf	time_date_delimiter@hex
  6967  05D0  3039               	movlw	57
  6968  05D1  00E4               	movwf	??_date_settings+1
  6969  05D2  0864               	movf	??_date_settings+1,w
  6970  05D3  00F1               	movwf	time_date_delimiter@limiter
  6971  05D4  3003               	movlw	3
  6972  05D5  00F2               	movwf	time_date_delimiter@type
  6973  05D6  3000               	movlw	0
  6974  05D7  00F3               	movwf	time_date_delimiter@type+1
  6975  05D8  0846               	movf	_c,w
  6976  05D9  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6977  05DE  00E5               	movwf	??_date_settings+2
  6978  05DF  0865               	movf	??_date_settings+2,w
  6979  05E0  00C6               	movwf	_c
  6980                           
  6981                           ;Button_src.c: 480:                     c = time_date_delimiter(c,0x21,'J',3);
  6982  05E1  3021               	movlw	33
  6983  05E2  00E3               	movwf	??_date_settings
  6984  05E3  0863               	movf	??_date_settings,w
  6985  05E4  00F0               	movwf	time_date_delimiter@hex
  6986  05E5  304A               	movlw	74
  6987  05E6  00E4               	movwf	??_date_settings+1
  6988  05E7  0864               	movf	??_date_settings+1,w
  6989  05E8  00F1               	movwf	time_date_delimiter@limiter
  6990  05E9  3003               	movlw	3
  6991  05EA  00F2               	movwf	time_date_delimiter@type
  6992  05EB  3000               	movlw	0
  6993  05EC  00F3               	movwf	time_date_delimiter@type+1
  6994  05ED  0846               	movf	_c,w
  6995  05EE  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  6996  05F3  00E5               	movwf	??_date_settings+2
  6997  05F4  0865               	movf	??_date_settings+2,w
  6998  05F5  00C6               	movwf	_c
  6999                           
  7000                           ;Button_src.c: 481:                     c = time_date_delimiter(c,0x11,'9',3);
  7001  05F6  3011               	movlw	17
  7002  05F7  00E3               	movwf	??_date_settings
  7003  05F8  0863               	movf	??_date_settings,w
  7004  05F9  00F0               	movwf	time_date_delimiter@hex
  7005  05FA  3039               	movlw	57
  7006  05FB  00E4               	movwf	??_date_settings+1
  7007  05FC  0864               	movf	??_date_settings+1,w
  7008  05FD  00F1               	movwf	time_date_delimiter@limiter
  7009  05FE  3003               	movlw	3
  7010  05FF  00F2               	movwf	time_date_delimiter@type
  7011  0600  3000               	movlw	0
  7012  0601  00F3               	movwf	time_date_delimiter@type+1
  7013  0602  0846               	movf	_c,w
  7014  0603  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  7015  0608  00E5               	movwf	??_date_settings+2
  7016  0609  0865               	movf	??_date_settings+2,w
  7017  060A  00C6               	movwf	_c
  7018                           
  7019                           ;Button_src.c: 482:                     c = time_date_delimiter(c,0x21,'J',3);
  7020  060B  3021               	movlw	33
  7021  060C  00E3               	movwf	??_date_settings
  7022  060D  0863               	movf	??_date_settings,w
  7023  060E  00F0               	movwf	time_date_delimiter@hex
  7024  060F  304A               	movlw	74
  7025  0610  00E4               	movwf	??_date_settings+1
  7026  0611  0864               	movf	??_date_settings+1,w
  7027  0612  00F1               	movwf	time_date_delimiter@limiter
  7028  0613  3003               	movlw	3
  7029  0614  00F2               	movwf	time_date_delimiter@type
  7030  0615  3000               	movlw	0
  7031  0616  00F3               	movwf	time_date_delimiter@type+1
  7032  0617  0846               	movf	_c,w
  7033  0618  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  7034  061D  00E5               	movwf	??_date_settings+2
  7035  061E  0865               	movf	??_date_settings+2,w
  7036  061F  00C6               	movwf	_c
  7037                           
  7038                           ;Button_src.c: 483:                     c = time_date_delimiter(c,0x31,'Y',3);
  7039  0620  3031               	movlw	49
  7040  0621  00E3               	movwf	??_date_settings
  7041  0622  0863               	movf	??_date_settings,w
  7042  0623  00F0               	movwf	time_date_delimiter@hex
  7043  0624  3059               	movlw	89
  7044  0625  00E4               	movwf	??_date_settings+1
  7045  0626  0864               	movf	??_date_settings+1,w
  7046  0627  00F1               	movwf	time_date_delimiter@limiter
  7047  0628  3003               	movlw	3
  7048  0629  00F2               	movwf	time_date_delimiter@type
  7049  062A  3000               	movlw	0
  7050  062B  00F3               	movwf	time_date_delimiter@type+1
  7051  062C  0846               	movf	_c,w
  7052  062D  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  7053  0632  00E5               	movwf	??_date_settings+2
  7054  0633  0865               	movf	??_date_settings+2,w
  7055  0634  00C6               	movwf	_c
  7056                           
  7057                           ;Button_src.c: 484:                     c = time_date_delimiter(c,0x41,'j',3);
  7058  0635  3041               	movlw	65
  7059  0636  00E3               	movwf	??_date_settings
  7060  0637  0863               	movf	??_date_settings,w
  7061  0638  00F0               	movwf	time_date_delimiter@hex
  7062  0639  306A               	movlw	106
  7063  063A  00E4               	movwf	??_date_settings+1
  7064  063B  0864               	movf	??_date_settings+1,w
  7065  063C  00F1               	movwf	time_date_delimiter@limiter
  7066  063D  3003               	movlw	3
  7067  063E  00F2               	movwf	time_date_delimiter@type
  7068  063F  3000               	movlw	0
  7069  0640  00F3               	movwf	time_date_delimiter@type+1
  7070  0641  0846               	movf	_c,w
  7071  0642  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  7072  0647  00E5               	movwf	??_date_settings+2
  7073  0648  0865               	movf	??_date_settings+2,w
  7074  0649  00C6               	movwf	_c
  7075                           
  7076                           ;Button_src.c: 485:                     c = time_date_delimiter(c,0x51,'z',3);
  7077  064A  3051               	movlw	81
  7078  064B  00E3               	movwf	??_date_settings
  7079  064C  0863               	movf	??_date_settings,w
  7080  064D  00F0               	movwf	time_date_delimiter@hex
  7081  064E  307A               	movlw	122
  7082  064F  00E4               	movwf	??_date_settings+1
  7083  0650  0864               	movf	??_date_settings+1,w
  7084  0651  00F1               	movwf	time_date_delimiter@limiter
  7085  0652  3003               	movlw	3
  7086  0653  00F2               	movwf	time_date_delimiter@type
  7087  0654  3000               	movlw	0
  7088  0655  00F3               	movwf	time_date_delimiter@type+1
  7089  0656  0846               	movf	_c,w
  7090  0657  120A  158A  2276  120A  118A  	fcall	_time_date_delimiter
  7091  065C  00E5               	movwf	??_date_settings+2
  7092  065D  0865               	movf	??_date_settings+2,w
  7093  065E  00C6               	movwf	_c
  7094                           
  7095                           ;Button_src.c: 487:               if(stats==0){
  7096  065F  0824               	movf	_stats,w
  7097  0660  0425               	iorwf	_stats+1,w
  7098  0661  1D03               	btfss	3,2
  7099  0662  2E71               	goto	l4199
  7100                           
  7101                           ;Button_src.c: 488:                   table[4] = prev_hex;
  7102  0663  0843               	movf	_prev_hex,w
  7103  0664  00E3               	movwf	??_date_settings
  7104  0665  0863               	movf	??_date_settings,w
  7105  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7106  0667  00B1               	movwf	(_table^(0+128)+4)
  7107                           
  7108                           ;Button_src.c: 489:                   table[6] = prev_hex_year;
  7109  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7110  0669  0841               	movf	_prev_hex_year,w
  7111  066A  00E3               	movwf	??_date_settings
  7112  066B  0863               	movf	??_date_settings,w
  7113  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7114  066D  00B3               	movwf	(_table^(0+128)+6)
  7115                           
  7116                           ;Button_src.c: 490:                   table[3] = prev_hex_day;
  7117  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7118  066F  0842               	movf	_prev_hex_day,w
  7119  0670  2E82               	goto	L3
  7120  0671                     l4199:	
  7121                           ;Button_src.c: 491:               }
  7122                           
  7123  0671  0324               	decf	_stats,w
  7124  0672  0425               	iorwf	_stats+1,w
  7125  0673  1D03               	btfss	3,2
  7126  0674  2E86               	goto	l4203
  7127                           
  7128                           ;Button_src.c: 493:               {;Button_src.c: 494:                  table[4]= a;
  7129  0675  0848               	movf	_a,w
  7130  0676  00E3               	movwf	??_date_settings
  7131  0677  0863               	movf	??_date_settings,w
  7132  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7133  0679  00B1               	movwf	(_table^(0+128)+4)
  7134                           
  7135                           ;Button_src.c: 495:                  table[6] = c;
  7136  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7137  067B  0846               	movf	_c,w
  7138  067C  00E3               	movwf	??_date_settings
  7139  067D  0863               	movf	??_date_settings,w
  7140  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7141  067F  00B3               	movwf	(_table^(0+128)+6)
  7142                           
  7143                           ;Button_src.c: 496:                  table[3] = day_hex;
  7144  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7145  0681  0845               	movf	_day_hex,w
  7146  0682                     L3:	
  7147  0682  00E3               	movwf	??_date_settings
  7148  0683  0863               	movf	??_date_settings,w
  7149  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7150  0685  00B0               	movwf	(_table^(0+128)+3)
  7151  0686                     l4203:	
  7152                           
  7153                           ;Button_src.c: 499:              write_cmd(0x88);
  7154  0686  3088               	movlw	136
  7155  0687  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7156                           
  7157                           ;Button_src.c: 501:                   RC0 = 0;
  7158  068C  1007               	bcf	7,0	;volatile
  7159                           
  7160                           ;Button_src.c: 502:                   RC1 = 1;
  7161  068D  1487               	bsf	7,1	;volatile
  7162                           
  7163                           ;Button_src.c: 503:                   RC2 = 1;
  7164  068E  1507               	bsf	7,2	;volatile
  7165                           
  7166                           ;Button_src.c: 504:                   RC3 = 1;
  7167  068F  1587               	bsf	7,3	;volatile
  7168                           
  7169                           ;Button_src.c: 506:                     if (RC6 == 0 ){
  7170  0690  1B07               	btfsc	7,6	;volatile
  7171  0691  2EAB               	goto	l754
  7172                           
  7173                           ;Button_src.c: 507:                           a = 0x00;
  7174  0692  01C8               	clrf	_a
  7175                           
  7176                           ;Button_src.c: 508:                           c = 0x00;
  7177  0693  01C6               	clrf	_c
  7178                           
  7179                           ;Button_src.c: 509:                           day_hex = 0x00;
  7180  0694  01C5               	clrf	_day_hex
  7181                           
  7182                           ;Button_src.c: 510:                           day_high = 0;
  7183  0695  01A6               	clrf	_day_high
  7184  0696  01A7               	clrf	_day_high+1
  7185                           
  7186                           ;Button_src.c: 511:                           day_low = 0;
  7187  0697  01A8               	clrf	_day_low
  7188  0698  01A9               	clrf	_day_low+1
  7189                           
  7190                           ;Button_src.c: 512:                           x = 0;
  7191  0699  01AE               	clrf	_x
  7192  069A  01AF               	clrf	_x+1
  7193                           
  7194                           ;Button_src.c: 513:                           y = 0;
  7195  069B  01AC               	clrf	_y
  7196  069C  01AD               	clrf	_y+1
  7197                           
  7198                           ;Button_src.c: 514:                           w = 0;
  7199  069D  01B0               	clrf	_w
  7200  069E  01B1               	clrf	_w+1
  7201                           
  7202                           ;Button_src.c: 515:                           t = 0;
  7203  069F  01B2               	clrf	_t
  7204  06A0  01B3               	clrf	_t+1
  7205                           
  7206                           ;Button_src.c: 516:                           write_cmd(0x1);
  7207  06A1  3001               	movlw	1
  7208  06A2  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7209                           
  7210                           ;Button_src.c: 517:                           set_time();
  7211  06A7  160A  118A  256A   	fcall	_set_time
  7212  06AA  0008               	return
  7213  06AB                     l754:	
  7214                           ;Button_src.c: 519:                             }
  7215                           
  7216                           
  7217                           ;Button_src.c: 520:                   RC0 = 0;
  7218  06AB  1007               	bcf	7,0	;volatile
  7219                           
  7220                           ;Button_src.c: 521:                   RC1 = 1;
  7221  06AC  1487               	bsf	7,1	;volatile
  7222                           
  7223                           ;Button_src.c: 522:                   RC2 = 1;
  7224  06AD  1507               	bsf	7,2	;volatile
  7225                           
  7226                           ;Button_src.c: 523:                   RC3 = 1;
  7227  06AE  1587               	bsf	7,3	;volatile
  7228                           
  7229                           ;Button_src.c: 524:                   z = modulus_func(z,3);
  7230  06AF  082B               	movf	_z+1,w
  7231  06B0  00F8               	movwf	modulus_func@x+1
  7232  06B1  082A               	movf	_z,w
  7233  06B2  00F7               	movwf	modulus_func@x
  7234  06B3  3003               	movlw	3
  7235  06B4  00F9               	movwf	modulus_func@y
  7236  06B5  3000               	movlw	0
  7237  06B6  00FA               	movwf	modulus_func@y+1
  7238  06B7  160A  118A  23CF  120A  118A  	fcall	_modulus_func
  7239  06BC  0878               	movf	?_modulus_func+1,w
  7240  06BD  00AB               	movwf	_z+1
  7241  06BE  0877               	movf	?_modulus_func,w
  7242  06BF  00AA               	movwf	_z
  7243                           
  7244                           ;Button_src.c: 525:                   if(RC4 == 0 && z ==0){
  7245  06C0  1A07               	btfsc	7,4	;volatile
  7246  06C1  2F01               	goto	l4235
  7247  06C2  082A               	movf	_z,w
  7248  06C3  042B               	iorwf	_z+1,w
  7249  06C4  1D03               	btfss	3,2
  7250  06C5  2F01               	goto	l4235
  7251                           
  7252                           ;Button_src.c: 526:                       write_cmd(0x90);
  7253  06C6  3090               	movlw	144
  7254  06C7  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7255                           
  7256                           ;Button_src.c: 527:                       write_char('D');
  7257  06CC  3044               	movlw	68
  7258  06CD  160A  118A  2440  120A  118A  	fcall	_write_char
  7259                           
  7260                           ;Button_src.c: 528:                       write_char('a');
  7261  06D2  3061               	movlw	97
  7262  06D3  160A  118A  2440  120A  118A  	fcall	_write_char
  7263                           
  7264                           ;Button_src.c: 529:                       write_char('y');
  7265  06D8  3079               	movlw	121
  7266  06D9  160A  118A  2440  120A  118A  	fcall	_write_char
  7267                           
  7268                           ;Button_src.c: 530:                       write_char(':');
  7269  06DE  303A               	movlw	58
  7270  06DF  160A  118A  2440  120A  118A  	fcall	_write_char
  7271                           
  7272                           ;Button_src.c: 531:                       write_char(' ');
  7273  06E4  3020               	movlw	32
  7274  06E5  160A  118A  2440  120A  118A  	fcall	_write_char
  7275                           
  7276                           ;Button_src.c: 532:                       write_char(' ');
  7277  06EA  3020               	movlw	32
  7278  06EB  160A  118A  2440  120A  118A  	fcall	_write_char
  7279                           
  7280                           ;Button_src.c: 533:                       b = 'y';
  7281  06F0  3079               	movlw	121
  7282  06F1  00E3               	movwf	??_date_settings
  7283  06F2  0863               	movf	??_date_settings,w
  7284  06F3  00C7               	movwf	_b
  7285                           
  7286                           ;Button_src.c: 535:                       button_delay();
  7287  06F4  160A  118A  23F0  120A  118A  	fcall	_button_delay
  7288                           
  7289                           ;Button_src.c: 536:                       z++;
  7290  06F9  3001               	movlw	1
  7291  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7292  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7293  06FC  07AA               	addwf	_z,f
  7294  06FD  1803               	skipnc
  7295  06FE  0AAB               	incf	_z+1,f
  7296  06FF  3000               	movlw	0
  7297  0700  07AB               	addwf	_z+1,f
  7298  0701                     l4235:	
  7299                           
  7300                           ;Button_src.c: 538:                   RC0 = 0;
  7301  0701  1007               	bcf	7,0	;volatile
  7302                           
  7303                           ;Button_src.c: 539:                   RC1 = 1;
  7304  0702  1487               	bsf	7,1	;volatile
  7305                           
  7306                           ;Button_src.c: 540:                   RC2 = 1;
  7307  0703  1507               	bsf	7,2	;volatile
  7308                           
  7309                           ;Button_src.c: 541:                   RC3 = 1;
  7310  0704  1587               	bsf	7,3	;volatile
  7311                           
  7312                           ;Button_src.c: 542:                   if(RC4 == 0&& z ==1){
  7313  0705  1A07               	btfsc	7,4	;volatile
  7314  0706  2F44               	goto	l4265
  7315  0707  032A               	decf	_z,w
  7316  0708  042B               	iorwf	_z+1,w
  7317  0709  1D03               	btfss	3,2
  7318  070A  2F44               	goto	l4265
  7319                           
  7320                           ;Button_src.c: 543:                       z++;
  7321  070B  3001               	movlw	1
  7322  070C  07AA               	addwf	_z,f
  7323  070D  1803               	skipnc
  7324  070E  0AAB               	incf	_z+1,f
  7325  070F  3000               	movlw	0
  7326  0710  07AB               	addwf	_z+1,f
  7327                           
  7328                           ;Button_src.c: 544:                       button_delay();
  7329  0711  160A  118A  23F0  120A  118A  	fcall	_button_delay
  7330                           
  7331                           ;Button_src.c: 546:                       write_cmd(0x90);
  7332  0716  3090               	movlw	144
  7333  0717  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7334                           
  7335                           ;Button_src.c: 547:                       write_char('M');
  7336  071C  304D               	movlw	77
  7337  071D  160A  118A  2440  120A  118A  	fcall	_write_char
  7338                           
  7339                           ;Button_src.c: 548:                       write_char('o');
  7340  0722  306F               	movlw	111
  7341  0723  160A  118A  2440  120A  118A  	fcall	_write_char
  7342                           
  7343                           ;Button_src.c: 549:                       write_char('n');
  7344  0728  306E               	movlw	110
  7345  0729  160A  118A  2440  120A  118A  	fcall	_write_char
  7346                           
  7347                           ;Button_src.c: 550:                       write_char('t');
  7348  072E  3074               	movlw	116
  7349  072F  160A  118A  2440  120A  118A  	fcall	_write_char
  7350                           
  7351                           ;Button_src.c: 551:                       write_char('h');
  7352  0734  3068               	movlw	104
  7353  0735  160A  118A  2440  120A  118A  	fcall	_write_char
  7354                           
  7355                           ;Button_src.c: 552:                       write_char(':');
  7356  073A  303A               	movlw	58
  7357  073B  160A  118A  2440  120A  118A  	fcall	_write_char
  7358                           
  7359                           ;Button_src.c: 553:                       b = 'x';
  7360  0740  3078               	movlw	120
  7361  0741  00E3               	movwf	??_date_settings
  7362  0742  0863               	movf	??_date_settings,w
  7363  0743  00C7               	movwf	_b
  7364  0744                     l4265:	
  7365                           
  7366                           ;Button_src.c: 556:                   RC0 = 0;
  7367  0744  1007               	bcf	7,0	;volatile
  7368                           
  7369                           ;Button_src.c: 557:                   RC1 = 1;
  7370  0745  1487               	bsf	7,1	;volatile
  7371                           
  7372                           ;Button_src.c: 558:                   RC2 = 1;
  7373  0746  1507               	bsf	7,2	;volatile
  7374                           
  7375                           ;Button_src.c: 559:                   RC3 = 1;
  7376  0747  1587               	bsf	7,3	;volatile
  7377                           
  7378                           ;Button_src.c: 560:                   if(RC4 == 0&& z ==2){
  7379  0748  1A07               	btfsc	7,4	;volatile
  7380  0749  2F8A               	goto	l4295
  7381  074A  3002               	movlw	2
  7382  074B  062A               	xorwf	_z,w
  7383  074C  042B               	iorwf	_z+1,w
  7384  074D  1D03               	btfss	3,2
  7385  074E  2F8A               	goto	l4295
  7386                           
  7387                           ;Button_src.c: 561:                       button_delay();
  7388  074F  160A  118A  23F0  120A  118A  	fcall	_button_delay
  7389                           
  7390                           ;Button_src.c: 562:                       z++;
  7391  0754  3001               	movlw	1
  7392  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7393  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7394  0757  07AA               	addwf	_z,f
  7395  0758  1803               	skipnc
  7396  0759  0AAB               	incf	_z+1,f
  7397  075A  3000               	movlw	0
  7398  075B  07AB               	addwf	_z+1,f
  7399                           
  7400                           ;Button_src.c: 564:                       write_cmd(0x90);
  7401  075C  3090               	movlw	144
  7402  075D  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7403                           
  7404                           ;Button_src.c: 565:                       write_char('Y');
  7405  0762  3059               	movlw	89
  7406  0763  160A  118A  2440  120A  118A  	fcall	_write_char
  7407                           
  7408                           ;Button_src.c: 566:                       write_char('e');
  7409  0768  3065               	movlw	101
  7410  0769  160A  118A  2440  120A  118A  	fcall	_write_char
  7411                           
  7412                           ;Button_src.c: 567:                       write_char('a');
  7413  076E  3061               	movlw	97
  7414  076F  160A  118A  2440  120A  118A  	fcall	_write_char
  7415                           
  7416                           ;Button_src.c: 568:                       write_char('r');
  7417  0774  3072               	movlw	114
  7418  0775  160A  118A  2440  120A  118A  	fcall	_write_char
  7419                           
  7420                           ;Button_src.c: 569:                       write_char(':');
  7421  077A  303A               	movlw	58
  7422  077B  160A  118A  2440  120A  118A  	fcall	_write_char
  7423                           
  7424                           ;Button_src.c: 570:                       write_char(' ');
  7425  0780  3020               	movlw	32
  7426  0781  160A  118A  2440  120A  118A  	fcall	_write_char
  7427                           
  7428                           ;Button_src.c: 571:                       b = 'z';
  7429  0786  307A               	movlw	122
  7430  0787  00E3               	movwf	??_date_settings
  7431  0788  0863               	movf	??_date_settings,w
  7432  0789  00C7               	movwf	_b
  7433  078A                     l4295:	
  7434                           
  7435                           ;Button_src.c: 574:               write_cmd(0x88);
  7436  078A  3088               	movlw	136
  7437  078B  120A  118A  2006  120A  118A  	fcall	_write_cmd
  7438                           
  7439                           ;Button_src.c: 575:               write_char(day_high + '0');
  7440  0790  0826               	movf	_day_high,w
  7441  0791  3E30               	addlw	48
  7442  0792  160A  118A  2440  120A  118A  	fcall	_write_char
  7443                           
  7444                           ;Button_src.c: 576:               write_char(day_low + '0');
  7445  0797  0828               	movf	_day_low,w
  7446  0798  3E30               	addlw	48
  7447  0799  160A  118A  2440  120A  118A  	fcall	_write_char
  7448                           
  7449                           ;Button_src.c: 577:               write_char('/');
  7450  079E  302F               	movlw	47
  7451  079F  160A  118A  2440  120A  118A  	fcall	_write_char
  7452                           
  7453                           ;Button_src.c: 578:               write_char(y + '0');
  7454  07A4  082C               	movf	_y,w
  7455  07A5  3E30               	addlw	48
  7456  07A6  160A  118A  2440  120A  118A  	fcall	_write_char
  7457                           
  7458                           ;Button_src.c: 579:               write_char(x + '0');
  7459  07AB  082E               	movf	_x,w
  7460  07AC  3E30               	addlw	48
  7461  07AD  160A  118A  2440  120A  118A  	fcall	_write_char
  7462                           
  7463                           ;Button_src.c: 580:               write_char('/');
  7464  07B2  302F               	movlw	47
  7465  07B3  160A  118A  2440  120A  118A  	fcall	_write_char
  7466                           
  7467                           ;Button_src.c: 581:               write_char(w+ '0');
  7468  07B8  0830               	movf	_w,w
  7469  07B9  3E30               	addlw	48
  7470  07BA  160A  118A  2440  120A  118A  	fcall	_write_char
  7471                           
  7472                           ;Button_src.c: 582:               write_char(t+ '0');
  7473  07BF  0832               	movf	_t,w
  7474  07C0  3E30               	addlw	48
  7475  07C1  160A  118A  2440  120A  118A  	fcall	_write_char
  7476                           
  7477                           ;Button_src.c: 585:             RC0 = 0;
  7478  07C6  1007               	bcf	7,0	;volatile
  7479                           
  7480                           ;Button_src.c: 586:             RC1 = 1;
  7481  07C7  1487               	bsf	7,1	;volatile
  7482                           
  7483                           ;Button_src.c: 587:             RC2 = 1;
  7484  07C8  1507               	bsf	7,2	;volatile
  7485                           
  7486                           ;Button_src.c: 588:             RC3 = 1;
  7487  07C9  1587               	bsf	7,3	;volatile
  7488                           
  7489                           ;Button_src.c: 589:             if (RC7 == 0 ){
  7490  07CA  1B87               	btfsc	7,7	;volatile
  7491  07CB  2B95               	goto	l731
  7492                           
  7493                           ;Button_src.c: 590:             a = 0x00;
  7494  07CC  01C8               	clrf	_a
  7495                           
  7496                           ;Button_src.c: 591:             c = 0x00;
  7497  07CD  01C6               	clrf	_c
  7498                           
  7499                           ;Button_src.c: 592:             day_hex = 0x00;
  7500  07CE  01C5               	clrf	_day_hex
  7501                           
  7502                           ;Button_src.c: 593:             x = 0;
  7503  07CF  01AE               	clrf	_x
  7504  07D0  01AF               	clrf	_x+1
  7505                           
  7506                           ;Button_src.c: 594:             y = 0;
  7507  07D1  01AC               	clrf	_y
  7508  07D2  01AD               	clrf	_y+1
  7509                           
  7510                           ;Button_src.c: 595:             w = 0;
  7511  07D3  01B0               	clrf	_w
  7512  07D4  01B1               	clrf	_w+1
  7513                           
  7514                           ;Button_src.c: 596:             t = 0;
  7515  07D5  01B2               	clrf	_t
  7516  07D6  01B3               	clrf	_t+1
  7517                           
  7518                           ;Button_src.c: 597:             day_high = 0;
  7519  07D7  01A6               	clrf	_day_high
  7520  07D8  01A7               	clrf	_day_high+1
  7521                           
  7522                           ;Button_src.c: 598:             day_low = 0;
  7523  07D9  01A8               	clrf	_day_low
  7524  07DA  01A9               	clrf	_day_low+1
  7525                           
  7526                           ;Button_src.c: 599:             write_cmd(0x1);
  7527  07DB  3001               	movlw	1
  7528  07DC  120A  118A  2006   	fcall	_write_cmd
  7529                           
  7530                           ;Button_src.c: 600:             break;
  7531  07DF  0008               	return
  7532  07E0                     __end_of_date_settings:	
  7533                           
  7534                           	psect	text30
  7535  0006                     __ptext30:	
  7536 ;; *************** function _write_cmd *****************
  7537 ;; Defined at:
  7538 ;;		line 41 in file "LCD_src.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;  x               1    wreg     unsigned char 
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  x               1    2[COMMON] unsigned char 
  7543 ;;  i               2    0        int 
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      void 
  7546 ;; Registers used:
  7547 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 300/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7553 ;;      Params:         0       0       0       0       0
  7554 ;;      Locals:         1       0       0       0       0
  7555 ;;      Temps:          0       0       0       0       0
  7556 ;;      Totals:         1       0       0       0       0
  7557 ;;Total ram usage:        1 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    1
  7560 ;; This function calls:
  7561 ;;		_delay_screen
  7562 ;; This function is called by:
  7563 ;;		_main
  7564 ;;		_lcd_init
  7565 ;;		_thermometer_threshhold_settings
  7566 ;;		_time_settings
  7567 ;;		_date_settings
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _write_cmd
  7573  0006                     _write_cmd:	
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7577                           ;write_cmd@x stored from wreg
  7578  0006  00F2               	movwf	write_cmd@x
  7579                           
  7580                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7581  0007  1283               	bcf	3,5	;RP0=0, select bank0
  7582  0008  1303               	bcf	3,6	;RP1=0, select bank0
  7583  0009  1285               	bcf	5,5	;volatile
  7584                           
  7585                           ;LCD_src.c: 45:  RA4=0;
  7586  000A  1205               	bcf	5,4	;volatile
  7587                           
  7588                           ;LCD_src.c: 46:  RA3=0;
  7589  000B  1185               	bcf	5,3	;volatile
  7590                           
  7591                           ;LCD_src.c: 47:  delay_screen();
  7592  000C  160A  118A  2404  120A  118A  	fcall	_delay_screen
  7593                           
  7594                           ;LCD_src.c: 48:  RA3=1;
  7595  0011  1283               	bcf	3,5	;RP0=0, select bank0
  7596  0012  1303               	bcf	3,6	;RP1=0, select bank0
  7597  0013  1585               	bsf	5,3	;volatile
  7598                           
  7599                           ;LCD_src.c: 49:  PORTD=x;
  7600  0014  0872               	movf	write_cmd@x,w
  7601  0015  0088               	movwf	8	;volatile
  7602                           
  7603                           ;LCD_src.c: 50:  delay_screen();
  7604  0016  160A  118A  2404   	fcall	_delay_screen
  7605                           
  7606                           ;LCD_src.c: 51:  RA3=0;
  7607  0019  1283               	bcf	3,5	;RP0=0, select bank0
  7608  001A  1303               	bcf	3,6	;RP1=0, select bank0
  7609  001B  1185               	bcf	5,3	;volatile
  7610  001C  0008               	return
  7611  001D                     __end_of_write_cmd:	
  7612                           
  7613                           	psect	text31
  7614  1440                     __ptext31:	
  7615 ;; *************** function _write_char *****************
  7616 ;; Defined at:
  7617 ;;		line 28 in file "LCD_src.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  x               1    wreg     unsigned char 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  x               1    2[COMMON] unsigned char 
  7622 ;;  i               2    0        int 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 300/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7632 ;;      Params:         0       0       0       0       0
  7633 ;;      Locals:         1       0       0       0       0
  7634 ;;      Temps:          0       0       0       0       0
  7635 ;;      Totals:         1       0       0       0       0
  7636 ;;Total ram usage:        1 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    1
  7639 ;; This function calls:
  7640 ;;		_delay_screen
  7641 ;; This function is called by:
  7642 ;;		_main
  7643 ;;		_display_temp
  7644 ;;		_display_clock
  7645 ;;		_display_date
  7646 ;;		_thermometer_threshhold_settings
  7647 ;;		_time_settings
  7648 ;;		_date_settings
  7649 ;;		_set_upper_threshold
  7650 ;;		_set_lower_threshold
  7651 ;;		_reset_alarm
  7652 ;;		_display_day
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           
  7657                           ;psect for function _write_char
  7658  1440                     _write_char:	
  7659                           
  7660                           ;incstack = 0
  7661                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7662                           ;write_char@x stored from wreg
  7663  1440  00F2               	movwf	write_char@x
  7664                           
  7665                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  7666  1441  1283               	bcf	3,5	;RP0=0, select bank0
  7667  1442  1303               	bcf	3,6	;RP1=0, select bank0
  7668  1443  1685               	bsf	5,5	;volatile
  7669                           
  7670                           ;LCD_src.c: 32:  RA4=0;
  7671  1444  1205               	bcf	5,4	;volatile
  7672                           
  7673                           ;LCD_src.c: 33:  RA3=0;
  7674  1445  1185               	bcf	5,3	;volatile
  7675                           
  7676                           ;LCD_src.c: 34:  delay_screen();
  7677  1446  160A  118A  2404  160A  118A  	fcall	_delay_screen
  7678                           
  7679                           ;LCD_src.c: 35:  RA3=1;
  7680  144B  1283               	bcf	3,5	;RP0=0, select bank0
  7681  144C  1303               	bcf	3,6	;RP1=0, select bank0
  7682  144D  1585               	bsf	5,3	;volatile
  7683                           
  7684                           ;LCD_src.c: 36:  PORTD= x;
  7685  144E  0872               	movf	write_char@x,w
  7686  144F  0088               	movwf	8	;volatile
  7687                           
  7688                           ;LCD_src.c: 37:  delay_screen();
  7689  1450  160A  118A  2404   	fcall	_delay_screen
  7690                           
  7691                           ;LCD_src.c: 38:  RA3=0;
  7692  1453  1283               	bcf	3,5	;RP0=0, select bank0
  7693  1454  1303               	bcf	3,6	;RP1=0, select bank0
  7694  1455  1185               	bcf	5,3	;volatile
  7695  1456  0008               	return
  7696  1457                     __end_of_write_char:	
  7697                           
  7698                           	psect	text32
  7699  1404                     __ptext32:	
  7700 ;; *************** function _delay_screen *****************
  7701 ;; Defined at:
  7702 ;;		line 70 in file "LCD_src.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  i               2    0[COMMON] int 
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		wreg, status,2, btemp+1
  7711 ;; Tracked objects:
  7712 ;;		On entry : 300/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7716 ;;      Params:         0       0       0       0       0
  7717 ;;      Locals:         2       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0
  7719 ;;      Totals:         2       0       0       0       0
  7720 ;;Total ram usage:        2 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_lcd_init
  7726 ;;		_write_char
  7727 ;;		_write_cmd
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           
  7732                           ;psect for function _delay_screen
  7733  1404                     _delay_screen:	
  7734                           
  7735                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  7739  1404  01F0               	clrf	delay_screen@i
  7740  1405  01F1               	clrf	delay_screen@i+1
  7741  1406                     l3201:	
  7742  1406  3001               	movlw	1
  7743  1407  07F0               	addwf	delay_screen@i,f
  7744  1408  1803               	skipnc
  7745  1409  0AF1               	incf	delay_screen@i+1,f
  7746  140A  3000               	movlw	0
  7747  140B  07F1               	addwf	delay_screen@i+1,f
  7748  140C  0871               	movf	delay_screen@i+1,w
  7749  140D  3A80               	xorlw	128
  7750  140E  00FF               	movwf	127
  7751  140F  3080               	movlw	128
  7752  1410  027F               	subwf	127,w
  7753  1411  1D03               	skipz
  7754  1412  2C15               	goto	u2085
  7755  1413  3005               	movlw	5
  7756  1414  0270               	subwf	delay_screen@i,w
  7757  1415                     u2085:	
  7758  1415  1803               	btfsc	3,0
  7759  1416  0008               	return
  7760  1417  2C06               	goto	l3201
  7761  1418                     __end_of_delay_screen:	
  7762                           
  7763                           	psect	text33
  7764  13B1                     __ptext33:	
  7765 ;; *************** function _time_date_hex_terminator *****************
  7766 ;; Defined at:
  7767 ;;		line 87 in file "math_src.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  val             1    wreg     unsigned char 
  7770 ;;  limiter         1    0[COMMON] unsigned char 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  val             1    3[COMMON] unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      unsigned char 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2
  7777 ;; Tracked objects:
  7778 ;;		On entry : 300/0
  7779 ;;		On exit  : 300/0
  7780 ;;		Unchanged: 300/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7782 ;;      Params:         1       0       0       0       0
  7783 ;;      Locals:         1       0       0       0       0
  7784 ;;      Temps:          2       0       0       0       0
  7785 ;;      Totals:         4       0       0       0       0
  7786 ;;Total ram usage:        4 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; This function calls:
  7789 ;;		Nothing
  7790 ;; This function is called by:
  7791 ;;		_time_settings
  7792 ;;		_date_settings
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           
  7797                           ;psect for function _time_date_hex_terminator
  7798  13B1                     _time_date_hex_terminator:	
  7799                           
  7800                           ;incstack = 0
  7801                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7802                           ;time_date_hex_terminator@val stored from wreg
  7803  13B1  00F3               	movwf	time_date_hex_terminator@val
  7804                           
  7805                           ;math_src.c: 88:     if((val + '0') == limiter){
  7806  13B2  0873               	movf	time_date_hex_terminator@val,w
  7807  13B3  3E30               	addlw	48
  7808  13B4  00F1               	movwf	??_time_date_hex_terminator
  7809  13B5  3000               	movlw	0
  7810  13B6  1803               	skipnc
  7811  13B7  3001               	movlw	1
  7812  13B8  00F2               	movwf	??_time_date_hex_terminator+1
  7813  13B9  0870               	movf	time_date_hex_terminator@limiter,w
  7814  13BA  0671               	xorwf	??_time_date_hex_terminator,w
  7815  13BB  0472               	iorwf	??_time_date_hex_terminator+1,w
  7816  13BC  1903               	btfsc	3,2
  7817                           
  7818                           ;math_src.c: 89:     val = 0x00;
  7819  13BD  01F3               	clrf	time_date_hex_terminator@val
  7820                           
  7821                           ;math_src.c: 91:     return val;
  7822  13BE  0873               	movf	time_date_hex_terminator@val,w
  7823  13BF  0008               	return
  7824  13C0                     __end_of_time_date_hex_terminator:	
  7825                           
  7826                           	psect	text34
  7827  0A76                     __ptext34:	
  7828 ;; *************** function _time_date_delimiter *****************
  7829 ;; Defined at:
  7830 ;;		line 28 in file "math_src.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  val             1    wreg     unsigned char 
  7833 ;;  hex             1    0[COMMON] unsigned char 
  7834 ;;  limiter         1    1[COMMON] unsigned char 
  7835 ;;  type            2    2[COMMON] int 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  val             1    6[COMMON] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      unsigned char 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0
  7842 ;; Tracked objects:
  7843 ;;		On entry : 300/0
  7844 ;;		On exit  : 300/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7847 ;;      Params:         4       0       0       0       0
  7848 ;;      Locals:         1       0       0       0       0
  7849 ;;      Temps:          2       0       0       0       0
  7850 ;;      Totals:         7       0       0       0       0
  7851 ;;Total ram usage:        7 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; This function calls:
  7854 ;;		Nothing
  7855 ;; This function is called by:
  7856 ;;		_time_settings
  7857 ;;		_date_settings
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           
  7862                           ;psect for function _time_date_delimiter
  7863  0A76                     _time_date_delimiter:	
  7864                           
  7865                           ;incstack = 0
  7866                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7867                           ;time_date_delimiter@val stored from wreg
  7868  0A76  00F6               	movwf	time_date_delimiter@val
  7869                           
  7870                           ;math_src.c: 29:     if((val + '0') == limiter){
  7871  0A77  0876               	movf	time_date_delimiter@val,w
  7872  0A78  3E30               	addlw	48
  7873  0A79  00F4               	movwf	??_time_date_delimiter
  7874  0A7A  3000               	movlw	0
  7875  0A7B  1803               	skipnc
  7876  0A7C  3001               	movlw	1
  7877  0A7D  00F5               	movwf	??_time_date_delimiter+1
  7878  0A7E  0871               	movf	time_date_delimiter@limiter,w
  7879  0A7F  0674               	xorwf	??_time_date_delimiter,w
  7880  0A80  0475               	iorwf	??_time_date_delimiter+1,w
  7881  0A81  1D03               	skipz
  7882  0A82  2BCB               	goto	l3607
  7883                           
  7884                           ;math_src.c: 30:     val = hex;
  7885  0A83  0870               	movf	time_date_delimiter@hex,w
  7886  0A84  00F4               	movwf	??_time_date_delimiter
  7887  0A85  0874               	movf	??_time_date_delimiter,w
  7888  0A86  00F6               	movwf	time_date_delimiter@val
  7889                           
  7890                           ;math_src.c: 31:     stats=0;
  7891  0A87  01A4               	clrf	_stats
  7892  0A88  01A5               	clrf	_stats+1
  7893                           
  7894                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7895  0A89  3039               	movlw	57
  7896  0A8A  0671               	xorwf	time_date_delimiter@limiter,w
  7897  0A8B  1D03               	btfss	3,2
  7898  0A8C  2A95               	goto	l3461
  7899  0A8D  0372               	decf	time_date_delimiter@type,w
  7900  0A8E  0473               	iorwf	time_date_delimiter@type+1,w
  7901  0A8F  1D03               	btfss	3,2
  7902  0A90  2A95               	goto	l3461
  7903                           
  7904                           ;math_src.c: 33:         prev_hex= 0x09;
  7905  0A91  3009               	movlw	9
  7906  0A92  00F4               	movwf	??_time_date_delimiter
  7907  0A93  0874               	movf	??_time_date_delimiter,w
  7908  0A94  00C3               	movwf	_prev_hex
  7909  0A95                     l3461:	
  7910                           
  7911                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7912  0A95  304A               	movlw	74
  7913  0A96  0671               	xorwf	time_date_delimiter@limiter,w
  7914  0A97  1D03               	btfss	3,2
  7915  0A98  2AA1               	goto	l3467
  7916  0A99  0372               	decf	time_date_delimiter@type,w
  7917  0A9A  0473               	iorwf	time_date_delimiter@type+1,w
  7918  0A9B  1D03               	btfss	3,2
  7919  0A9C  2AA1               	goto	l3467
  7920                           
  7921                           ;math_src.c: 35:         prev_hex = 0x19;
  7922  0A9D  3019               	movlw	25
  7923  0A9E  00F4               	movwf	??_time_date_delimiter
  7924  0A9F  0874               	movf	??_time_date_delimiter,w
  7925  0AA0  00C3               	movwf	_prev_hex
  7926  0AA1                     l3467:	
  7927                           
  7928                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7929  0AA1  3059               	movlw	89
  7930  0AA2  0671               	xorwf	time_date_delimiter@limiter,w
  7931  0AA3  1D03               	btfss	3,2
  7932  0AA4  2AAD               	goto	l3473
  7933  0AA5  0372               	decf	time_date_delimiter@type,w
  7934  0AA6  0473               	iorwf	time_date_delimiter@type+1,w
  7935  0AA7  1D03               	btfss	3,2
  7936  0AA8  2AAD               	goto	l3473
  7937                           
  7938                           ;math_src.c: 37:         prev_hex = 0x29;
  7939  0AA9  3029               	movlw	41
  7940  0AAA  00F4               	movwf	??_time_date_delimiter
  7941  0AAB  0874               	movf	??_time_date_delimiter,w
  7942  0AAC  00C3               	movwf	_prev_hex
  7943  0AAD                     l3473:	
  7944                           
  7945                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7946  0AAD  306A               	movlw	106
  7947  0AAE  0671               	xorwf	time_date_delimiter@limiter,w
  7948  0AAF  1D03               	btfss	3,2
  7949  0AB0  2AB9               	goto	l3479
  7950  0AB1  0372               	decf	time_date_delimiter@type,w
  7951  0AB2  0473               	iorwf	time_date_delimiter@type+1,w
  7952  0AB3  1D03               	btfss	3,2
  7953  0AB4  2AB9               	goto	l3479
  7954                           
  7955                           ;math_src.c: 39:         prev_hex =0x39;
  7956  0AB5  3039               	movlw	57
  7957  0AB6  00F4               	movwf	??_time_date_delimiter
  7958  0AB7  0874               	movf	??_time_date_delimiter,w
  7959  0AB8  00C3               	movwf	_prev_hex
  7960  0AB9                     l3479:	
  7961                           
  7962                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7963  0AB9  307A               	movlw	122
  7964  0ABA  0671               	xorwf	time_date_delimiter@limiter,w
  7965  0ABB  1D03               	btfss	3,2
  7966  0ABC  2AC5               	goto	l3485
  7967  0ABD  0372               	decf	time_date_delimiter@type,w
  7968  0ABE  0473               	iorwf	time_date_delimiter@type+1,w
  7969  0ABF  1D03               	btfss	3,2
  7970  0AC0  2AC5               	goto	l3485
  7971                           
  7972                           ;math_src.c: 41:         prev_hex = 0x49;
  7973  0AC1  3049               	movlw	73
  7974  0AC2  00F4               	movwf	??_time_date_delimiter
  7975  0AC3  0874               	movf	??_time_date_delimiter,w
  7976  0AC4  00C3               	movwf	_prev_hex
  7977  0AC5                     l3485:	
  7978                           
  7979                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7980  0AC5  3039               	movlw	57
  7981  0AC6  0671               	xorwf	time_date_delimiter@limiter,w
  7982  0AC7  1D03               	btfss	3,2
  7983  0AC8  2AD2               	goto	l3491
  7984  0AC9  3002               	movlw	2
  7985  0ACA  0672               	xorwf	time_date_delimiter@type,w
  7986  0ACB  0473               	iorwf	time_date_delimiter@type+1,w
  7987  0ACC  1D03               	btfss	3,2
  7988  0ACD  2AD2               	goto	l3491
  7989                           
  7990                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7991  0ACE  3009               	movlw	9
  7992  0ACF  00F4               	movwf	??_time_date_delimiter
  7993  0AD0  0874               	movf	??_time_date_delimiter,w
  7994  0AD1  00C2               	movwf	_prev_hex_day
  7995  0AD2                     l3491:	
  7996                           
  7997                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7998  0AD2  304A               	movlw	74
  7999  0AD3  0671               	xorwf	time_date_delimiter@limiter,w
  8000  0AD4  1D03               	btfss	3,2
  8001  0AD5  2ADF               	goto	l3497
  8002  0AD6  3002               	movlw	2
  8003  0AD7  0672               	xorwf	time_date_delimiter@type,w
  8004  0AD8  0473               	iorwf	time_date_delimiter@type+1,w
  8005  0AD9  1D03               	btfss	3,2
  8006  0ADA  2ADF               	goto	l3497
  8007                           
  8008                           ;math_src.c: 45:         prev_hex_day = 0x19;
  8009  0ADB  3019               	movlw	25
  8010  0ADC  00F4               	movwf	??_time_date_delimiter
  8011  0ADD  0874               	movf	??_time_date_delimiter,w
  8012  0ADE  00C2               	movwf	_prev_hex_day
  8013  0ADF                     l3497:	
  8014                           
  8015                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  8016  0ADF  3059               	movlw	89
  8017  0AE0  0671               	xorwf	time_date_delimiter@limiter,w
  8018  0AE1  1D03               	btfss	3,2
  8019  0AE2  2AEC               	goto	l3503
  8020  0AE3  3002               	movlw	2
  8021  0AE4  0672               	xorwf	time_date_delimiter@type,w
  8022  0AE5  0473               	iorwf	time_date_delimiter@type+1,w
  8023  0AE6  1D03               	btfss	3,2
  8024  0AE7  2AEC               	goto	l3503
  8025                           
  8026                           ;math_src.c: 47:         prev_hex_day = 0x29;
  8027  0AE8  3029               	movlw	41
  8028  0AE9  00F4               	movwf	??_time_date_delimiter
  8029  0AEA  0874               	movf	??_time_date_delimiter,w
  8030  0AEB  00C2               	movwf	_prev_hex_day
  8031  0AEC                     l3503:	
  8032                           
  8033                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  8034  0AEC  306A               	movlw	106
  8035  0AED  0671               	xorwf	time_date_delimiter@limiter,w
  8036  0AEE  1D03               	btfss	3,2
  8037  0AEF  2AF9               	goto	l3509
  8038  0AF0  3002               	movlw	2
  8039  0AF1  0672               	xorwf	time_date_delimiter@type,w
  8040  0AF2  0473               	iorwf	time_date_delimiter@type+1,w
  8041  0AF3  1D03               	btfss	3,2
  8042  0AF4  2AF9               	goto	l3509
  8043                           
  8044                           ;math_src.c: 49:         prev_hex_day =0x39;
  8045  0AF5  3039               	movlw	57
  8046  0AF6  00F4               	movwf	??_time_date_delimiter
  8047  0AF7  0874               	movf	??_time_date_delimiter,w
  8048  0AF8  00C2               	movwf	_prev_hex_day
  8049  0AF9                     l3509:	
  8050                           
  8051                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  8052  0AF9  307A               	movlw	122
  8053  0AFA  0671               	xorwf	time_date_delimiter@limiter,w
  8054  0AFB  1D03               	btfss	3,2
  8055  0AFC  2B06               	goto	l3515
  8056  0AFD  3002               	movlw	2
  8057  0AFE  0672               	xorwf	time_date_delimiter@type,w
  8058  0AFF  0473               	iorwf	time_date_delimiter@type+1,w
  8059  0B00  1D03               	btfss	3,2
  8060  0B01  2B06               	goto	l3515
  8061                           
  8062                           ;math_src.c: 51:         prev_hex_day = 0x49;
  8063  0B02  3049               	movlw	73
  8064  0B03  00F4               	movwf	??_time_date_delimiter
  8065  0B04  0874               	movf	??_time_date_delimiter,w
  8066  0B05  00C2               	movwf	_prev_hex_day
  8067  0B06                     l3515:	
  8068                           
  8069                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  8070  0B06  3039               	movlw	57
  8071  0B07  0671               	xorwf	time_date_delimiter@limiter,w
  8072  0B08  1D03               	btfss	3,2
  8073  0B09  2B13               	goto	l3521
  8074  0B0A  3003               	movlw	3
  8075  0B0B  0672               	xorwf	time_date_delimiter@type,w
  8076  0B0C  0473               	iorwf	time_date_delimiter@type+1,w
  8077  0B0D  1D03               	btfss	3,2
  8078  0B0E  2B13               	goto	l3521
  8079                           
  8080                           ;math_src.c: 53:         prev_hex_year= 0x09;
  8081  0B0F  3009               	movlw	9
  8082  0B10  00F4               	movwf	??_time_date_delimiter
  8083  0B11  0874               	movf	??_time_date_delimiter,w
  8084  0B12  00C1               	movwf	_prev_hex_year
  8085  0B13                     l3521:	
  8086                           
  8087                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  8088  0B13  304A               	movlw	74
  8089  0B14  0671               	xorwf	time_date_delimiter@limiter,w
  8090  0B15  1D03               	btfss	3,2
  8091  0B16  2B20               	goto	l3527
  8092  0B17  3003               	movlw	3
  8093  0B18  0672               	xorwf	time_date_delimiter@type,w
  8094  0B19  0473               	iorwf	time_date_delimiter@type+1,w
  8095  0B1A  1D03               	btfss	3,2
  8096  0B1B  2B20               	goto	l3527
  8097                           
  8098                           ;math_src.c: 55:         prev_hex_year = 0x19;
  8099  0B1C  3019               	movlw	25
  8100  0B1D  00F4               	movwf	??_time_date_delimiter
  8101  0B1E  0874               	movf	??_time_date_delimiter,w
  8102  0B1F  00C1               	movwf	_prev_hex_year
  8103  0B20                     l3527:	
  8104                           
  8105                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  8106  0B20  3059               	movlw	89
  8107  0B21  0671               	xorwf	time_date_delimiter@limiter,w
  8108  0B22  1D03               	btfss	3,2
  8109  0B23  2B2D               	goto	l3533
  8110  0B24  3003               	movlw	3
  8111  0B25  0672               	xorwf	time_date_delimiter@type,w
  8112  0B26  0473               	iorwf	time_date_delimiter@type+1,w
  8113  0B27  1D03               	btfss	3,2
  8114  0B28  2B2D               	goto	l3533
  8115                           
  8116                           ;math_src.c: 57:         prev_hex_year = 0x29;
  8117  0B29  3029               	movlw	41
  8118  0B2A  00F4               	movwf	??_time_date_delimiter
  8119  0B2B  0874               	movf	??_time_date_delimiter,w
  8120  0B2C  00C1               	movwf	_prev_hex_year
  8121  0B2D                     l3533:	
  8122                           
  8123                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  8124  0B2D  306A               	movlw	106
  8125  0B2E  0671               	xorwf	time_date_delimiter@limiter,w
  8126  0B2F  1D03               	btfss	3,2
  8127  0B30  2B3A               	goto	l3539
  8128  0B31  3003               	movlw	3
  8129  0B32  0672               	xorwf	time_date_delimiter@type,w
  8130  0B33  0473               	iorwf	time_date_delimiter@type+1,w
  8131  0B34  1D03               	btfss	3,2
  8132  0B35  2B3A               	goto	l3539
  8133                           
  8134                           ;math_src.c: 59:         prev_hex_year =0x39;
  8135  0B36  3039               	movlw	57
  8136  0B37  00F4               	movwf	??_time_date_delimiter
  8137  0B38  0874               	movf	??_time_date_delimiter,w
  8138  0B39  00C1               	movwf	_prev_hex_year
  8139  0B3A                     l3539:	
  8140                           
  8141                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8142  0B3A  307A               	movlw	122
  8143  0B3B  0671               	xorwf	time_date_delimiter@limiter,w
  8144  0B3C  1D03               	btfss	3,2
  8145  0B3D  2B47               	goto	l3545
  8146  0B3E  3003               	movlw	3
  8147  0B3F  0672               	xorwf	time_date_delimiter@type,w
  8148  0B40  0473               	iorwf	time_date_delimiter@type+1,w
  8149  0B41  1D03               	btfss	3,2
  8150  0B42  2B47               	goto	l3545
  8151                           
  8152                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8153  0B43  3049               	movlw	73
  8154  0B44  00F4               	movwf	??_time_date_delimiter
  8155  0B45  0874               	movf	??_time_date_delimiter,w
  8156  0B46  00C1               	movwf	_prev_hex_year
  8157  0B47                     l3545:	
  8158                           
  8159                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8160  0B47  3039               	movlw	57
  8161  0B48  0671               	xorwf	time_date_delimiter@limiter,w
  8162  0B49  1D03               	btfss	3,2
  8163  0B4A  2B54               	goto	l3551
  8164  0B4B  3004               	movlw	4
  8165  0B4C  0672               	xorwf	time_date_delimiter@type,w
  8166  0B4D  0473               	iorwf	time_date_delimiter@type+1,w
  8167  0B4E  1D03               	btfss	3,2
  8168  0B4F  2B54               	goto	l3551
  8169                           
  8170                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8171  0B50  3009               	movlw	9
  8172  0B51  00F4               	movwf	??_time_date_delimiter
  8173  0B52  0874               	movf	??_time_date_delimiter,w
  8174  0B53  00C0               	movwf	_prev_hex_hours
  8175  0B54                     l3551:	
  8176                           
  8177                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8178  0B54  304A               	movlw	74
  8179  0B55  0671               	xorwf	time_date_delimiter@limiter,w
  8180  0B56  1D03               	btfss	3,2
  8181  0B57  2B61               	goto	l3557
  8182  0B58  3004               	movlw	4
  8183  0B59  0672               	xorwf	time_date_delimiter@type,w
  8184  0B5A  0473               	iorwf	time_date_delimiter@type+1,w
  8185  0B5B  1D03               	btfss	3,2
  8186  0B5C  2B61               	goto	l3557
  8187                           
  8188                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8189  0B5D  3019               	movlw	25
  8190  0B5E  00F4               	movwf	??_time_date_delimiter
  8191  0B5F  0874               	movf	??_time_date_delimiter,w
  8192  0B60  00C0               	movwf	_prev_hex_hours
  8193  0B61                     l3557:	
  8194                           
  8195                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8196  0B61  3059               	movlw	89
  8197  0B62  0671               	xorwf	time_date_delimiter@limiter,w
  8198  0B63  1D03               	btfss	3,2
  8199  0B64  2B6E               	goto	l3563
  8200  0B65  3004               	movlw	4
  8201  0B66  0672               	xorwf	time_date_delimiter@type,w
  8202  0B67  0473               	iorwf	time_date_delimiter@type+1,w
  8203  0B68  1D03               	btfss	3,2
  8204  0B69  2B6E               	goto	l3563
  8205                           
  8206                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8207  0B6A  3029               	movlw	41
  8208  0B6B  00F4               	movwf	??_time_date_delimiter
  8209  0B6C  0874               	movf	??_time_date_delimiter,w
  8210  0B6D  00C0               	movwf	_prev_hex_hours
  8211  0B6E                     l3563:	
  8212                           
  8213                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8214  0B6E  306A               	movlw	106
  8215  0B6F  0671               	xorwf	time_date_delimiter@limiter,w
  8216  0B70  1D03               	btfss	3,2
  8217  0B71  2B7B               	goto	l3569
  8218  0B72  3004               	movlw	4
  8219  0B73  0672               	xorwf	time_date_delimiter@type,w
  8220  0B74  0473               	iorwf	time_date_delimiter@type+1,w
  8221  0B75  1D03               	btfss	3,2
  8222  0B76  2B7B               	goto	l3569
  8223                           
  8224                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8225  0B77  3039               	movlw	57
  8226  0B78  00F4               	movwf	??_time_date_delimiter
  8227  0B79  0874               	movf	??_time_date_delimiter,w
  8228  0B7A  00C0               	movwf	_prev_hex_hours
  8229  0B7B                     l3569:	
  8230                           
  8231                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8232  0B7B  307A               	movlw	122
  8233  0B7C  0671               	xorwf	time_date_delimiter@limiter,w
  8234  0B7D  1D03               	btfss	3,2
  8235  0B7E  2B88               	goto	l3575
  8236  0B7F  3004               	movlw	4
  8237  0B80  0672               	xorwf	time_date_delimiter@type,w
  8238  0B81  0473               	iorwf	time_date_delimiter@type+1,w
  8239  0B82  1D03               	btfss	3,2
  8240  0B83  2B88               	goto	l3575
  8241                           
  8242                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8243  0B84  3049               	movlw	73
  8244  0B85  00F4               	movwf	??_time_date_delimiter
  8245  0B86  0874               	movf	??_time_date_delimiter,w
  8246  0B87  00C0               	movwf	_prev_hex_hours
  8247  0B88                     l3575:	
  8248                           
  8249                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8250  0B88  3039               	movlw	57
  8251  0B89  0671               	xorwf	time_date_delimiter@limiter,w
  8252  0B8A  1D03               	btfss	3,2
  8253  0B8B  2B95               	goto	l3581
  8254  0B8C  3005               	movlw	5
  8255  0B8D  0672               	xorwf	time_date_delimiter@type,w
  8256  0B8E  0473               	iorwf	time_date_delimiter@type+1,w
  8257  0B8F  1D03               	btfss	3,2
  8258  0B90  2B95               	goto	l3581
  8259                           
  8260                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8261  0B91  3009               	movlw	9
  8262  0B92  00F4               	movwf	??_time_date_delimiter
  8263  0B93  0874               	movf	??_time_date_delimiter,w
  8264  0B94  00BF               	movwf	_prev_hex_mins
  8265  0B95                     l3581:	
  8266                           
  8267                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8268  0B95  304A               	movlw	74
  8269  0B96  0671               	xorwf	time_date_delimiter@limiter,w
  8270  0B97  1D03               	btfss	3,2
  8271  0B98  2BA2               	goto	l3587
  8272  0B99  3005               	movlw	5
  8273  0B9A  0672               	xorwf	time_date_delimiter@type,w
  8274  0B9B  0473               	iorwf	time_date_delimiter@type+1,w
  8275  0B9C  1D03               	btfss	3,2
  8276  0B9D  2BA2               	goto	l3587
  8277                           
  8278                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8279  0B9E  3019               	movlw	25
  8280  0B9F  00F4               	movwf	??_time_date_delimiter
  8281  0BA0  0874               	movf	??_time_date_delimiter,w
  8282  0BA1  00BF               	movwf	_prev_hex_mins
  8283  0BA2                     l3587:	
  8284                           
  8285                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8286  0BA2  3059               	movlw	89
  8287  0BA3  0671               	xorwf	time_date_delimiter@limiter,w
  8288  0BA4  1D03               	btfss	3,2
  8289  0BA5  2BAF               	goto	l3593
  8290  0BA6  3005               	movlw	5
  8291  0BA7  0672               	xorwf	time_date_delimiter@type,w
  8292  0BA8  0473               	iorwf	time_date_delimiter@type+1,w
  8293  0BA9  1D03               	btfss	3,2
  8294  0BAA  2BAF               	goto	l3593
  8295                           
  8296                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8297  0BAB  3029               	movlw	41
  8298  0BAC  00F4               	movwf	??_time_date_delimiter
  8299  0BAD  0874               	movf	??_time_date_delimiter,w
  8300  0BAE  00BF               	movwf	_prev_hex_mins
  8301  0BAF                     l3593:	
  8302                           
  8303                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8304  0BAF  306A               	movlw	106
  8305  0BB0  0671               	xorwf	time_date_delimiter@limiter,w
  8306  0BB1  1D03               	btfss	3,2
  8307  0BB2  2BBC               	goto	l3599
  8308  0BB3  3005               	movlw	5
  8309  0BB4  0672               	xorwf	time_date_delimiter@type,w
  8310  0BB5  0473               	iorwf	time_date_delimiter@type+1,w
  8311  0BB6  1D03               	btfss	3,2
  8312  0BB7  2BBC               	goto	l3599
  8313                           
  8314                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8315  0BB8  3039               	movlw	57
  8316  0BB9  00F4               	movwf	??_time_date_delimiter
  8317  0BBA  0874               	movf	??_time_date_delimiter,w
  8318  0BBB  00BF               	movwf	_prev_hex_mins
  8319  0BBC                     l3599:	
  8320                           
  8321                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8322  0BBC  307A               	movlw	122
  8323  0BBD  0671               	xorwf	time_date_delimiter@limiter,w
  8324  0BBE  1D03               	btfss	3,2
  8325  0BBF  2BC9               	goto	l3605
  8326  0BC0  3005               	movlw	5
  8327  0BC1  0672               	xorwf	time_date_delimiter@type,w
  8328  0BC2  0473               	iorwf	time_date_delimiter@type+1,w
  8329  0BC3  1D03               	btfss	3,2
  8330  0BC4  2BC9               	goto	l3605
  8331                           
  8332                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8333  0BC5  3049               	movlw	73
  8334  0BC6  00F4               	movwf	??_time_date_delimiter
  8335  0BC7  0874               	movf	??_time_date_delimiter,w
  8336  0BC8  00BF               	movwf	_prev_hex_mins
  8337  0BC9                     l3605:	
  8338                           
  8339                           ;math_src.c: 82:     val--;
  8340  0BC9  3001               	movlw	1
  8341  0BCA  02F6               	subwf	time_date_delimiter@val,f
  8342  0BCB                     l3607:	
  8343                           
  8344                           ;math_src.c: 84:     return val;
  8345  0BCB  0876               	movf	time_date_delimiter@val,w
  8346  0BCC  0008               	return
  8347  0BCD                     __end_of_time_date_delimiter:	
  8348                           
  8349                           	psect	text35
  8350  156A                     __ptext35:	
  8351 ;; *************** function _set_time *****************
  8352 ;; Defined at:
  8353 ;;		line 12 in file "clock_src.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;		None
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;  i               2    5[COMMON] int 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  1    wreg      void 
  8360 ;; Registers used:
  8361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 300/0
  8364 ;;		On exit  : 300/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8367 ;;      Params:         0       0       0       0       0
  8368 ;;      Locals:         2       0       0       0       0
  8369 ;;      Temps:          0       0       0       0       0
  8370 ;;      Totals:         2       0       0       0       0
  8371 ;;Total ram usage:        2 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    1
  8374 ;; This function calls:
  8375 ;;		_time_write_1
  8376 ;; This function is called by:
  8377 ;;		_main
  8378 ;;		_time_settings
  8379 ;;		_date_settings
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function _set_time
  8385  156A                     _set_time:	
  8386                           
  8387                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8388                           
  8389                           ;incstack = 0
  8390                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8391  156A  1686               	bsf	6,5	;volatile
  8392                           
  8393                           ;clock_src.c: 16:    time_write_1(0xbe);
  8394  156B  30BE               	movlw	190
  8395  156C  160A  118A  2544  160A  118A  	fcall	_time_write_1
  8396                           
  8397                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8398  1571  01F5               	clrf	set_time@i
  8399  1572  01F6               	clrf	set_time@i+1
  8400  1573                     l3237:	
  8401                           
  8402                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8403  1573  0875               	movf	set_time@i,w
  8404  1574  3EAD               	addlw	(low (_table| 0))& (0+255)
  8405  1575  0084               	movwf	4
  8406  1576  1383               	bcf	3,7	;select IRP bank1
  8407  1577  0800               	movf	0,w
  8408  1578  160A  118A  2544  160A  118A  	fcall	_time_write_1
  8409                           
  8410                           ;clock_src.c: 20:      }
  8411  157D  3001               	movlw	1
  8412  157E  07F5               	addwf	set_time@i,f
  8413  157F  1803               	skipnc
  8414  1580  0AF6               	incf	set_time@i+1,f
  8415  1581  3000               	movlw	0
  8416  1582  07F6               	addwf	set_time@i+1,f
  8417  1583  0876               	movf	set_time@i+1,w
  8418  1584  3A80               	xorlw	128
  8419  1585  00FF               	movwf	127
  8420  1586  3080               	movlw	128
  8421  1587  027F               	subwf	127,w
  8422  1588  1D03               	skipz
  8423  1589  2D8C               	goto	u2135
  8424  158A  3008               	movlw	8
  8425  158B  0275               	subwf	set_time@i,w
  8426  158C                     u2135:	
  8427  158C  1C03               	skipc
  8428  158D  2D73               	goto	l3237
  8429                           
  8430                           ;clock_src.c: 21:    RB5=0;
  8431  158E  1283               	bcf	3,5	;RP0=0, select bank0
  8432  158F  1303               	bcf	3,6	;RP1=0, select bank0
  8433  1590  1286               	bcf	6,5	;volatile
  8434  1591  0008               	return
  8435  1592                     __end_of_set_time:	
  8436                           
  8437                           	psect	text36
  8438  1544                     __ptext36:	
  8439 ;; *************** function _time_write_1 *****************
  8440 ;; Defined at:
  8441 ;;		line 114 in file "clock_src.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  time_tx         1    wreg     unsigned char 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  time_tx         1    4[COMMON] unsigned char 
  8446 ;;  j               2    2[COMMON] int 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  1    wreg      void 
  8449 ;; Registers used:
  8450 ;;		wreg, status,2, status,0, btemp+1
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 300/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8456 ;;      Params:         0       0       0       0       0
  8457 ;;      Locals:         3       0       0       0       0
  8458 ;;      Temps:          2       0       0       0       0
  8459 ;;      Totals:         5       0       0       0       0
  8460 ;;Total ram usage:        5 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; This function calls:
  8463 ;;		Nothing
  8464 ;; This function is called by:
  8465 ;;		_ds1302_init
  8466 ;;		_set_time
  8467 ;;		_get_time
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _time_write_1
  8473  1544                     _time_write_1:	
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8477                           ;time_write_1@time_tx stored from wreg
  8478  1544  00F4               	movwf	time_write_1@time_tx
  8479                           
  8480                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8481  1545  01F2               	clrf	time_write_1@j
  8482  1546  01F3               	clrf	time_write_1@j+1
  8483  1547                     l446:	
  8484                           
  8485                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8486  1547  1283               	bcf	3,5	;RP0=0, select bank0
  8487  1548  1303               	bcf	3,6	;RP1=0, select bank0
  8488  1549  1206               	bcf	6,4	;volatile
  8489                           
  8490                           ;clock_src.c: 120:         RB0=0;
  8491  154A  1006               	bcf	6,0	;volatile
  8492                           
  8493                           ;clock_src.c: 121:         if(time_tx&0x01)
  8494  154B  1874               	btfsc	time_write_1@time_tx,0
  8495                           
  8496                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8497  154C  1606               	bsf	6,4	;volatile
  8498                           
  8499                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8500  154D  0874               	movf	time_write_1@time_tx,w
  8501  154E  00F0               	movwf	??_time_write_1
  8502  154F  1003               	clrc
  8503  1550  0C70               	rrf	??_time_write_1,w
  8504  1551  00F1               	movwf	??_time_write_1+1
  8505  1552  0871               	movf	??_time_write_1+1,w
  8506  1553  00F4               	movwf	time_write_1@time_tx
  8507                           
  8508                           ;clock_src.c: 126:         RB0=1;
  8509  1554  1406               	bsf	6,0	;volatile
  8510                           
  8511                           ;clock_src.c: 127:     }
  8512  1555  3001               	movlw	1
  8513  1556  07F2               	addwf	time_write_1@j,f
  8514  1557  1803               	skipnc
  8515  1558  0AF3               	incf	time_write_1@j+1,f
  8516  1559  3000               	movlw	0
  8517  155A  07F3               	addwf	time_write_1@j+1,f
  8518  155B  0873               	movf	time_write_1@j+1,w
  8519  155C  3A80               	xorlw	128
  8520  155D  00FF               	movwf	127
  8521  155E  3080               	movlw	128
  8522  155F  027F               	subwf	127,w
  8523  1560  1D03               	skipz
  8524  1561  2D64               	goto	u2125
  8525  1562  3008               	movlw	8
  8526  1563  0272               	subwf	time_write_1@j,w
  8527  1564                     u2125:	
  8528  1564  1C03               	skipc
  8529  1565  2D47               	goto	l446
  8530                           
  8531                           ;clock_src.c: 128:       RB0=0;
  8532  1566  1283               	bcf	3,5	;RP0=0, select bank0
  8533  1567  1303               	bcf	3,6	;RP1=0, select bank0
  8534  1568  1006               	bcf	6,0	;volatile
  8535  1569  0008               	return
  8536  156A                     __end_of_time_write_1:	
  8537                           
  8538                           	psect	text37
  8539  14FC                     __ptext37:	
  8540 ;; *************** function _incrementor *****************
  8541 ;; Defined at:
  8542 ;;		line 10 in file "math_src.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  upper_val       2    0[BANK0 ] int 
  8545 ;;  lower_val       2    2[BANK0 ] int 
  8546 ;;  z               1    4[BANK0 ] unsigned char 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      unsigned char 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2, status,0, pclath, cstack
  8553 ;; Tracked objects:
  8554 ;;		On entry : 300/0
  8555 ;;		On exit  : 300/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8558 ;;      Params:         0       5       0       0       0
  8559 ;;      Locals:         0       0       0       0       0
  8560 ;;      Temps:          2       0       0       0       0
  8561 ;;      Totals:         2       5       0       0       0
  8562 ;;Total ram usage:        7 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    2
  8565 ;; This function calls:
  8566 ;;		_modulus_func
  8567 ;; This function is called by:
  8568 ;;		_thermometer_threshhold_settings
  8569 ;;		_time_settings
  8570 ;;		_date_settings
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _incrementor
  8576  14FC                     _incrementor:	
  8577                           
  8578                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8582  14FC  0860               	movf	incrementor@lower_val,w
  8583  14FD  3E30               	addlw	48
  8584  14FE  00FB               	movwf	??_incrementor
  8585  14FF  0861               	movf	incrementor@lower_val+1,w
  8586  1500  1803               	skipnc
  8587  1501  3E01               	addlw	1
  8588  1502  3E00               	addlw	0
  8589  1503  00FC               	movwf	??_incrementor+1
  8590  1504  0862               	movf	incrementor@z,w
  8591  1505  067B               	xorwf	??_incrementor,w
  8592  1506  047C               	iorwf	??_incrementor+1,w
  8593  1507  1D03               	skipz
  8594  1508  2D1E               	goto	l3427
  8595                           
  8596                           ;math_src.c: 12:      upper_val++;
  8597  1509  3001               	movlw	1
  8598  150A  07DE               	addwf	incrementor@upper_val,f
  8599  150B  1803               	skipnc
  8600  150C  0ADF               	incf	incrementor@upper_val+1,f
  8601  150D  3000               	movlw	0
  8602  150E  07DF               	addwf	incrementor@upper_val+1,f
  8603                           
  8604                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8605  150F  085F               	movf	incrementor@upper_val+1,w
  8606  1510  00F8               	movwf	modulus_func@x+1
  8607  1511  085E               	movf	incrementor@upper_val,w
  8608  1512  00F7               	movwf	modulus_func@x
  8609  1513  300A               	movlw	10
  8610  1514  00F9               	movwf	modulus_func@y
  8611  1515  3000               	movlw	0
  8612  1516  00FA               	movwf	modulus_func@y+1
  8613  1517  160A  118A  23CF   	fcall	_modulus_func
  8614  151A  0878               	movf	?_modulus_func+1,w
  8615  151B  00DF               	movwf	incrementor@upper_val+1
  8616  151C  0877               	movf	?_modulus_func,w
  8617  151D  00DE               	movwf	incrementor@upper_val
  8618  151E                     l3427:	
  8619                           
  8620                           ;math_src.c: 15:      return upper_val;
  8621  151E  085E               	movf	incrementor@upper_val,w
  8622  151F  0008               	return
  8623  1520                     __end_of_incrementor:	
  8624                           
  8625                           	psect	text38
  8626  13CF                     __ptext38:	
  8627 ;; *************** function _modulus_func *****************
  8628 ;; Defined at:
  8629 ;;		line 5 in file "math_src.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  x               2    7[COMMON] int 
  8632 ;;  y               2    9[COMMON] int 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;		None
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  2    7[COMMON] int 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2, status,0, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 300/0
  8641 ;;		On exit  : 300/0
  8642 ;;		Unchanged: 300/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8644 ;;      Params:         4       0       0       0       0
  8645 ;;      Locals:         0       0       0       0       0
  8646 ;;      Temps:          0       0       0       0       0
  8647 ;;      Totals:         4       0       0       0       0
  8648 ;;Total ram usage:        4 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    1
  8651 ;; This function calls:
  8652 ;;		___awmod
  8653 ;; This function is called by:
  8654 ;;		_main
  8655 ;;		_thermometer_threshhold_settings
  8656 ;;		_time_settings
  8657 ;;		_date_settings
  8658 ;;		_incrementor
  8659 ;;		_decrementor
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function _modulus_func
  8665  13CF                     _modulus_func:	
  8666                           
  8667                           ;math_src.c: 6:     x = x % y;
  8668                           
  8669                           ;incstack = 0
  8670                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8671  13CF  087A               	movf	modulus_func@y+1,w
  8672  13D0  00F1               	movwf	___awmod@divisor+1
  8673  13D1  0879               	movf	modulus_func@y,w
  8674  13D2  00F0               	movwf	___awmod@divisor
  8675  13D3  0878               	movf	modulus_func@x+1,w
  8676  13D4  00F3               	movwf	___awmod@dividend+1
  8677  13D5  0877               	movf	modulus_func@x,w
  8678  13D6  00F2               	movwf	___awmod@dividend
  8679  13D7  160A  118A  273C   	fcall	___awmod
  8680  13DA  0871               	movf	?___awmod+1,w
  8681  13DB  00F8               	movwf	modulus_func@x+1
  8682  13DC  0870               	movf	?___awmod,w
  8683  13DD  00F7               	movwf	modulus_func@x
  8684                           
  8685                           ;math_src.c: 7:     return x;
  8686  13DE  0008               	return
  8687  13DF                     __end_of_modulus_func:	
  8688                           
  8689                           	psect	text39
  8690  173C                     __ptext39:	
  8691 ;; *************** function ___awmod *****************
  8692 ;; Defined at:
  8693 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  divisor         2    0[COMMON] int 
  8696 ;;  dividend        2    2[COMMON] int 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  sign            1    6[COMMON] unsigned char 
  8699 ;;  counter         1    5[COMMON] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  2    0[COMMON] int 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 300/0
  8706 ;;		On exit  : 300/0
  8707 ;;		Unchanged: 300/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8709 ;;      Params:         4       0       0       0       0
  8710 ;;      Locals:         2       0       0       0       0
  8711 ;;      Temps:          1       0       0       0       0
  8712 ;;      Totals:         7       0       0       0       0
  8713 ;;Total ram usage:        7 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_modulus_func
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function ___awmod
  8724  173C                     ___awmod:	
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8728  173C  01F6               	clrf	___awmod@sign
  8729  173D  1FF3               	btfss	___awmod@dividend+1,7
  8730  173E  2F46               	goto	l3159
  8731  173F  09F2               	comf	___awmod@dividend,f
  8732  1740  09F3               	comf	___awmod@dividend+1,f
  8733  1741  0AF2               	incf	___awmod@dividend,f
  8734  1742  1903               	skipnz
  8735  1743  0AF3               	incf	___awmod@dividend+1,f
  8736  1744  01F6               	clrf	___awmod@sign
  8737  1745  0AF6               	incf	___awmod@sign,f
  8738  1746                     l3159:	
  8739  1746  1FF1               	btfss	___awmod@divisor+1,7
  8740  1747  2F4D               	goto	l3163
  8741  1748  09F0               	comf	___awmod@divisor,f
  8742  1749  09F1               	comf	___awmod@divisor+1,f
  8743  174A  0AF0               	incf	___awmod@divisor,f
  8744  174B  1903               	skipnz
  8745  174C  0AF1               	incf	___awmod@divisor+1,f
  8746  174D                     l3163:	
  8747  174D  0870               	movf	___awmod@divisor,w
  8748  174E  0471               	iorwf	___awmod@divisor+1,w
  8749  174F  1903               	btfsc	3,2
  8750  1750  2F7A               	goto	l3181
  8751  1751  01F5               	clrf	___awmod@counter
  8752  1752  0AF5               	incf	___awmod@counter,f
  8753  1753                     l3171:	
  8754  1753  1BF1               	btfsc	___awmod@divisor+1,7
  8755  1754  2F61               	goto	l3173
  8756  1755  3001               	movlw	1
  8757  1756                     u2025:	
  8758  1756  1003               	clrc
  8759  1757  0DF0               	rlf	___awmod@divisor,f
  8760  1758  0DF1               	rlf	___awmod@divisor+1,f
  8761  1759  3EFF               	addlw	-1
  8762  175A  1D03               	skipz
  8763  175B  2F56               	goto	u2025
  8764  175C  3001               	movlw	1
  8765  175D  00F4               	movwf	??___awmod
  8766  175E  0874               	movf	??___awmod,w
  8767  175F  07F5               	addwf	___awmod@counter,f
  8768  1760  2F53               	goto	l3171
  8769  1761                     l3173:	
  8770  1761  0871               	movf	___awmod@divisor+1,w
  8771  1762  0273               	subwf	___awmod@dividend+1,w
  8772  1763  1D03               	skipz
  8773  1764  2F67               	goto	u2045
  8774  1765  0870               	movf	___awmod@divisor,w
  8775  1766  0272               	subwf	___awmod@dividend,w
  8776  1767                     u2045:	
  8777  1767  1C03               	skipc
  8778  1768  2F6F               	goto	l3177
  8779  1769  0870               	movf	___awmod@divisor,w
  8780  176A  02F2               	subwf	___awmod@dividend,f
  8781  176B  0871               	movf	___awmod@divisor+1,w
  8782  176C  1C03               	skipc
  8783  176D  03F3               	decf	___awmod@dividend+1,f
  8784  176E  02F3               	subwf	___awmod@dividend+1,f
  8785  176F                     l3177:	
  8786  176F  3001               	movlw	1
  8787  1770                     u2055:	
  8788  1770  1003               	clrc
  8789  1771  0CF1               	rrf	___awmod@divisor+1,f
  8790  1772  0CF0               	rrf	___awmod@divisor,f
  8791  1773  3EFF               	addlw	-1
  8792  1774  1D03               	skipz
  8793  1775  2F70               	goto	u2055
  8794  1776  3001               	movlw	1
  8795  1777  02F5               	subwf	___awmod@counter,f
  8796  1778  1D03               	btfss	3,2
  8797  1779  2F61               	goto	l3173
  8798  177A                     l3181:	
  8799  177A  0876               	movf	___awmod@sign,w
  8800  177B  1903               	btfsc	3,2
  8801  177C  2F82               	goto	l3185
  8802  177D  09F2               	comf	___awmod@dividend,f
  8803  177E  09F3               	comf	___awmod@dividend+1,f
  8804  177F  0AF2               	incf	___awmod@dividend,f
  8805  1780  1903               	skipnz
  8806  1781  0AF3               	incf	___awmod@dividend+1,f
  8807  1782                     l3185:	
  8808  1782  0873               	movf	___awmod@dividend+1,w
  8809  1783  00F1               	movwf	?___awmod+1
  8810  1784  0872               	movf	___awmod@dividend,w
  8811  1785  00F0               	movwf	?___awmod
  8812  1786  0008               	return
  8813  1787                     __end_of___awmod:	
  8814                           
  8815                           	psect	text40
  8816  13F0                     __ptext40:	
  8817 ;; *************** function _button_delay *****************
  8818 ;; Defined at:
  8819 ;;		line 606 in file "Button_src.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;		None
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  i               2    0[COMMON] int 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      void 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, btemp+1
  8828 ;; Tracked objects:
  8829 ;;		On entry : 300/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8833 ;;      Params:         0       0       0       0       0
  8834 ;;      Locals:         2       0       0       0       0
  8835 ;;      Temps:          0       0       0       0       0
  8836 ;;      Totals:         2       0       0       0       0
  8837 ;;Total ram usage:        2 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; This function calls:
  8840 ;;		Nothing
  8841 ;; This function is called by:
  8842 ;;		_set_beep_threshhold
  8843 ;;		_thermometer_threshhold_settings
  8844 ;;		_time_settings
  8845 ;;		_date_settings
  8846 ;; This function uses a non-reentrant model
  8847 ;;
  8848                           
  8849                           
  8850                           ;psect for function _button_delay
  8851  13F0                     _button_delay:	
  8852                           
  8853                           ;Button_src.c: 607:     for(int i=0;i<10000;i++);
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8857  13F0  01F0               	clrf	button_delay@i
  8858  13F1  01F1               	clrf	button_delay@i+1
  8859  13F2                     l3417:	
  8860  13F2  3001               	movlw	1
  8861  13F3  07F0               	addwf	button_delay@i,f
  8862  13F4  1803               	skipnc
  8863  13F5  0AF1               	incf	button_delay@i+1,f
  8864  13F6  3000               	movlw	0
  8865  13F7  07F1               	addwf	button_delay@i+1,f
  8866  13F8  0871               	movf	button_delay@i+1,w
  8867  13F9  3A80               	xorlw	128
  8868  13FA  00FF               	movwf	127
  8869  13FB  30A7               	movlw	167
  8870  13FC  027F               	subwf	127,w
  8871  13FD  1D03               	skipz
  8872  13FE  2C01               	goto	u2235
  8873  13FF  3010               	movlw	16
  8874  1400  0270               	subwf	button_delay@i,w
  8875  1401                     u2235:	
  8876  1401  1803               	btfsc	3,0
  8877  1402  0008               	return
  8878  1403  2BF2               	goto	l3417
  8879  1404                     __end_of_button_delay:	
  8880  007E                     btemp	set	126	;btemp
  8881  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      79
    BANK1            80      0      21
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _decrementor->_modulus_func
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _write_char->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod

Critical Paths under _main in BANK0

    _main->_thermometer_threshhold_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_decrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   44377
                                             10 BANK0      7     7      0
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      5     5      0    9705
                                              5 BANK0      5     5      0
                       _button_delay
                        _decrementor
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _decrementor                                          7     2      5    2809
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13054
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4177
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2491
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _decrementor
       _modulus_func
         ___awmod
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      15       7       26.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      72      12        0.0%
ABS                  0      0      72       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 11 15:54:29 2019

                                       _a 0048                                         _b 0047  
                                       _c 0046                                         _p 0022  
                                       _t 0032                                         _w 0030  
                                       _x 002E                                         _y 002C  
                                       _z 002A                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005A                                        _TZ 005B  
                                      _ge 0058                                        _wd 003C  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 1457  
                           ?_display_date 0070                                       l155 0D24  
                                     l339 13A4                                       l452 15C4  
                                     l446 1547                                       l713 0158  
                                     l705 007D                                       l722 0295  
                                     l714 0160                                       l731 0395  
                                     l707 00E3                                       l740 0477  
                                     l708 00EB                                       l733 03FB  
                                     l725 0322                                       l734 0403  
                                     l912 1738                                       l745 04F5  
                                     l754 06AB                                       l746 04FD  
                                     l906 006D                                       l739 046F  
                                     l692 0F3D                                       l697 0FA0  
                                     l698 0FED                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005C  
                           ?_display_temp 0070                                       _TLV 005D  
                                     _shi 0059                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0063  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1271 14D3                                      l3201 1406  
                                    l4101 045A                                      l4103 045F  
                                    l3207 13A8                                      l3401 15D5  
                                    l4017 0FAD                                      l3171 1753  
                                    l3163 174D                                      l4203 0686  
                                    l4123 04BC                                      l3331 1625  
                                    l3173 1761                                      l3181 177A  
                                    l3237 1573                                      l3309 16A2  
                                    l3159 1746                                      l3503 0AEC  
                                    l4135 04E0                                      l4127 04C5  
                                    l3417 13F2                                      l3185 1782  
                                    l3177 176F                                      l3521 0B13  
                                    l4137 04E5                                      l3281 1656  
                                    l3427 151E                                      l3515 0B06  
                                    l4235 0701                                      l4155 0531  
                                    l4411 01D8                                      l4403 01C1  
                                    l3605 0BC9                                      l3533 0B2D  
                                    l3509 0AF9                                      l3461 0A95  
                                    l4093 0440                                      l3621 149C  
                                    l3277 167C                                      l3437 1542  
                                    l4405 01C6                                      l3551 0B54  
                                    l3527 0B20                                      l3607 0BCB  
                                    l4167 0547                                      l4159 053A  
                                    l3623 14A5                                      l3383 141A  
                                    l3279 167D                                      l4415 01E7  
                                    l3545 0B47                                      l3473 0AAD  
                                    l4265 0744                                      l4169 054C  
                                    l4089 0437                                      l4601 178F  
                                    l3633 14B4                                      l3641 14BC  
                                    l3289 168D                                      l4361 0128  
                                    l3563 0B6E                                      l3539 0B3A  
                                    l3491 0AD2                                      l3467 0AA1  
                                    l4611 17BD                                      l4603 179B  
                                    l4371 0148                                      l3581 0B95  
                                    l3557 0B61                                      l3485 0AC5  
                                    l4357 011F                                      l3575 0B88  
                                    l3479 0AB9                                      l4295 078A  
                                    l4199 0671                                      l4623 17F0  
                                    l4615 17CE                                      l4607 17AC  
                                    l3671 16EA                                      l3663 16C6  
                                    l3593 0BAF                                      l3569 0B7B  
                                    l3497 0ADF                                      l3665 16D4  
                                    l3817 159D                                      l4393 019D  
                                    l4369 0143                                      l4713 0CEB  
                                    l3587 0BA2                                      l4619 17DF  
                                    l3675 16F5                                      l4651 0C03  
                                    l3829 0838                                      l3693 1610  
                                    l4469 02E5                                      l4389 0194  
                                    l4725 0D5E                                      l3599 0BBC  
                                    l3687 15F4                                      l4591 1470  
                                    l3927 0E8C                                      l3689 1602  
                                    l3697 161B                                      l3793 0A0E  
                                    l3785 09FA                                      l4577 082B  
                                    l3867 08D5                                      l3955 0EEB  
                                    l3797 0A18                                      l3789 0A04  
                                    l3993 0F29                            ?_display_clock 0070  
                                    u2025 1756                                      u2045 1767  
                                    u2125 1564                                      u2205 1429  
                                    u3005 09CA                                      u2055 1770  
                                    u2135 158C                                      u2225 15E5  
                                    u2235 1401                                      u3115 0F3A  
                                    u2085 1415                                      u3055 15B8  
                                    u2825 14BF                                      u2905 16EB  
                                    u2935 15F7                                      u2865 16C9  
                                    u2955 1608                                      u2885 16D5  
                                    u2965 1611                                      u3765 1703  
                                    u2895 16E1                                      u3775 170E  
                                    u2985 09B2                                      u3785 0024  
                                    u2995 09BD                                      u3795 002F  
                                    u3965 0D73               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0BCD  
                                    _init 138B                                      _var1 004D  
                                    _var2 004C                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 005E  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 14B6  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1787  
                         __end_of___lbmod 14D9                      __end_of_delay_screen 1418  
                         __end_of___lwdiv 16FA                           __end_of___lwmod 1620  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 0038                                     _table 00AD  
                                   _stats 0024                                     main@i 006D  
                          write_byte@temp 0076                       _set_lower_threshold 16FA  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                    __size_of_decrementor 0024                                     wtemp0 007E  
                         ___lbdiv@divisor 0070                           ___lbdiv@counter 0073  
                           ??_ds1302_init 0075                           __initialization 07E0  
                            __end_of_main 0D92                              __end_of_init 1393  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0068  
                                  ??_init 0070                      incrementor@lower_val 0060  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 005E  
                        __end_of_lcd_init 14FC                          __end_of_get_temp 0A76  
                        __end_of_get_time 15BE                                    _baifen 0056  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 1418                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00A7  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 13CF                       _set_upper_threshold 001D  
                                  _table1 00A0                           ___awmod@divisor 0070  
                                  _shifen 0057                                    _wanfen 0054  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 1592  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 08CA                      __end_of_display_temp 1495  
                          __pcstackCOMMON 0070                              __pidataBANK1 139B  
                   __size_of_delay_screen 0014                      __size_of_incrementor 0024  
                        ___lbdiv@quotient 0074                     ??_set_upper_threshold 0077  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 1404                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 13C0  
                              _delay_temp 13A3                                __pmaintext 0BCD  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0062  
                               ?_lcd_init 0070                                 ?_get_temp 0070  
                   __end_of_time_settings 0387                                 ?_get_time 0070  
                      __size_of_write_cmd 0017                              _heat_counter 003A  
                               ?_set_time 0070                      __size_of_reset_alarm 002C  
                          ??_modulus_func 007B              set_upper_threshold@lower_val 0075  
              __end_of_initialise_buttons 1440                  _time_date_hex_terminator 13B1  
                                 ___lbdiv 1495                                   ___awmod 173C  
                                 ___lbmod 14B6                           __size_of_delay2 0014  
                                 ___lwdiv 16BE                                   ___lwmod 15EE  
                                 _alarm__ 004B                                   _day_hex 0045  
                                 _day_low 0028                              _heater_state 004F  
                                 __ptext1 0071                                   __ptext2 0D92  
                                 __ptext3 1520                                   __ptext4 001D  
                                 __ptext5 16FA                                   __ptext6 1457  
                                 __ptext7 0801                                   __ptext8 14D9  
                                 __ptext9 142C                      __end_of_button_delay 1404  
                            _cold_counter 00AB                                   delay2@i 0070  
                       __end_of_init_temp 138B                          ___awmod@dividend 0072  
                       __end_of_read_byte 1654                                   _qianfen 0055  
                    __size_of_time_read_1 0030                                   _lower_t 0052  
             __end_of_set_beep_threshhold 1474              set_upper_threshold@upper_val 0073  
                   __size_of_display_date 009D                                   clrloop0 1394  
                              ??_lcd_init 0073                                   _upper_t 0053  
                           ??_decrementor 007B                                ??_get_temp 005E  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 1654  
                              ??_set_time 0075                       _time_date_delimiter 0A76  
                    decrementor@lower_val 005E                              _display_date 082D  
                            _display_temp 1474                         __end_of_write_cmd 001D  
                        ___lbmod@dividend 0074                              _cooler_state 004E  
                           modulus_func@x 0077                             modulus_func@y 0079  
                   __end_of_display_clock 096F                    __size_of_date_settings 0459  
                             ___lbmod@rem 0076                      ?_time_date_delimiter 0070  
                    decrementor@upper_val 0060                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 173C                       __end_of_decrementor 1544  
                           ??_display_day 0075                            __end_of_delay2 142C  
                              _write_char 1440                                _write_byte 1688  
                          _var_night_high 0034                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 13DF                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 13DF  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0387                               __pdataBANK1 00AD  
                              read_byte@i 0076                                read_byte@j 003E  
             __end_of_set_upper_threshold 0071                       __end_of_display_day 1800  
                               ___latbits 0002                             __pcstackBANK0 005E  
                             _decrementor 1520                      set_beep_threshhold@x 0072  
                       __size_of_lcd_init 0023                         __size_of_get_temp 0107  
                       __size_of_get_time 002C                ??_time_date_hex_terminator 0071  
                            _button_delay 13F0                          ___lwdiv@dividend 0078  
                             _day_counter 0020                                  ?___lbdiv 0070  
                          ?_date_settings 0070                                  ?___awmod 0070  
                                ?___lbmod 0070                                  ?___lwdiv 0076  
                                ?___lwmod 0070                         __size_of_set_time 0028  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 1520                      __end_of_time_write_1 156A  
                      _initialise_buttons 142C                           _day_of_week_var 00A9  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 1386                                 _read_byte 1620  
                            decrementor@z 0062                       ?_initialise_buttons 0070  
                               clear_ram0 1393                             ??_reset_alarm 0073  
                          _prev_hex_hours 0040                              ??_delay_temp 0071  
                               _temp_high 0049                               _display_day 1787  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 026E  
       ??_thermometer_threshhold_settings 0063          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0D92                      ??_initialise_buttons 0070  
                  __size_of_time_settings 0316          thermometer_threshhold_settings@i 0066  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 13B1  
                               _write_cmd 0006                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 0036  
                         _buzzer_watcher1 0050                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0063                      __size_of_ds1302_init 000F  
                             _incrementor 14FC                              _modulus_func 13CF  
                     __end_of_reset_alarm 082D                          __size_of___lbdiv 0021  
                        __size_of___awmod 004B                          __size_of___lbmod 0023  
                        __size_of___lwdiv 003C                          __size_of___lwmod 0032  
                                _day_high 0026                           ___lwdiv@divisor 0076  
                         ___lwdiv@counter 007D                                  __ptext10 1386  
                                __ptext11 138B                                  __ptext20 15EE  
                                __ptext12 1592                                  __ptext21 16BE  
                                __ptext13 15BE                                  __ptext30 0006  
                                __ptext22 14B6                                  __ptext14 096F  
                                __ptext31 1440                                  __ptext23 1495  
                                __ptext15 1688                                  __ptext40 13F0  
                                __ptext32 1404                                  __ptext24 13C0  
                                __ptext16 1654                                  __ptext33 13B1  
                                __ptext25 1474                                  __ptext17 1620  
                                __ptext34 0A76                                  __ptext26 1787  
                                __ptext18 13A3                                  __ptext35 156A  
                                __ptext27 082D                                  __ptext19 1418  
                                __ptext36 1544                                  __ptext28 08CA  
                                __ptext37 14FC                                  __ptext29 0387  
                                __ptext38 13CF                                  __ptext39 173C  
                     __end_of_time_read_1 15EE                                ?_write_cmd 0070  
                                _lcd_init 14D9                                  _get_temp 096F  
                                _get_time 1592                             _time_settings 0071  
        __end_of_time_date_hex_terminator 13C0                             __size_of_main 01C5  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0044                                 set_time@i 0075  
                           _prev_hex_mins 003F                             _prev_hex_year 0041  
                            ??_reset_temp 0074                                  _set_time 156A  
                                _temp_low 004A                                  _prev_hex 0043  
              time_date_delimiter@limiter 0071              __size_of_set_lower_threshold 0042  
                              write_cmd@x 0072                     __size_of_time_write_1 0026  
                  __size_of_display_clock 00A5                            _buzzer_watcher 0051  
                             delay_temp@x 0072                               delay_temp@y 0070  
                             delay_temp@z 0073                            read_byte@value 0075  
             __end_of_time_date_delimiter 0BCD                                  init_ram0 13E3  
                           button_delay@i 0070                               ??_init_temp 0070  
                      __end_of_reset_temp 1688                               ??_read_byte 0074  
                          ?_time_settings 0070                              ?_decrementor 005E  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 0801                              _time_write_1 1544  
                            _prev_hex_day 0042                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 15BE                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0054  
                           _display_clock 08CA                             time_write_1@j 0072  
                      __end_of_write_char 1457                        __end_of_write_byte 16BE  
