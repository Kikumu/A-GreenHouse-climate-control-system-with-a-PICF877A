

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Dec 12 17:28:41 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  0004                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  0004  3400               	retlw	0
   696  0005  3418               	retlw	24
   697  0006  3400               	retlw	0
   698  0007  3412               	retlw	18
   699  0008  3412               	retlw	18
   700  0009  3406               	retlw	6
   701  000A  3419               	retlw	25
   702  000B  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003F                     _RC7	set	63
   706  003E                     _RC6	set	62
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30BB               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3000               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  3004               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30B3               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  120A  158A  2005  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30B3               	movlw	low (__pbssBANK1+19)
   756  07F1  160A  118A  2291  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  3060               	movlw	low (__pbssBANK0+64)
   762  07F9  160A  118A  2291   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2B15   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _p:	
   773  0020                     	ds	2
   774  0022                     _stats:	
   775  0022                     	ds	2
   776  0024                     _day_high:	
   777  0024                     	ds	2
   778  0026                     _day_low:	
   779  0026                     	ds	2
   780  0028                     _z:	
   781  0028                     	ds	2
   782  002A                     _y:	
   783  002A                     	ds	2
   784  002C                     _x:	
   785  002C                     	ds	2
   786  002E                     _w:	
   787  002E                     	ds	2
   788  0030                     _t:	
   789  0030                     	ds	2
   790  0032                     _cold_low:	
   791  0032                     	ds	2
   792  0034                     _cold_high:	
   793  0034                     	ds	2
   794  0036                     _var_night_high:	
   795  0036                     	ds	2
   796  0038                     _var_night_low:	
   797  0038                     	ds	2
   798  003A                     _cold_counter:	
   799  003A                     	ds	2
   800  003C                     _heat_counter:	
   801  003C                     	ds	2
   802  003E                     _wd:	
   803  003E                     	ds	2
   804  0040                     read_byte@j:	
   805  0040                     	ds	1
   806  0041                     _prev_hex_mins:	
   807  0041                     	ds	1
   808  0042                     _prev_hex_hours:	
   809  0042                     	ds	1
   810  0043                     _prev_hex_year:	
   811  0043                     	ds	1
   812  0044                     _prev_hex_day:	
   813  0044                     	ds	1
   814  0045                     _prev_hex:	
   815  0045                     	ds	1
   816  0046                     _hrs_limiter:	
   817  0046                     	ds	1
   818  0047                     _day_hex:	
   819  0047                     	ds	1
   820  0048                     _c:	
   821  0048                     	ds	1
   822  0049                     _b:	
   823  0049                     	ds	1
   824  004A                     _a:	
   825  004A                     	ds	1
   826  004B                     _temp_high:	
   827  004B                     	ds	1
   828  004C                     _temp_low:	
   829  004C                     	ds	1
   830  004D                     _alarm__:	
   831  004D                     	ds	1
   832  004E                     _var2:	
   833  004E                     	ds	1
   834  004F                     _var1:	
   835  004F                     	ds	1
   836  0050                     _cooler_state:	
   837  0050                     	ds	1
   838  0051                     _heater_state:	
   839  0051                     	ds	1
   840  0052                     _buzzer_watcher1:	
   841  0052                     	ds	1
   842  0053                     _buzzer_watcher:	
   843  0053                     	ds	1
   844  0054                     _lower_t:	
   845  0054                     	ds	1
   846  0055                     _upper_t:	
   847  0055                     	ds	1
   848  0056                     _wanfen:	
   849  0056                     	ds	1
   850  0057                     _qianfen:	
   851  0057                     	ds	1
   852  0058                     _baifen:	
   853  0058                     	ds	1
   854  0059                     _shifen:	
   855  0059                     	ds	1
   856  005A                     _ge:	
   857  005A                     	ds	1
   858  005B                     _shi:	
   859  005B                     	ds	1
   860  005C                     _TX:	
   861  005C                     	ds	1
   862  005D                     _TZ:	
   863  005D                     	ds	1
   864  005E                     _THV:	
   865  005E                     	ds	1
   866  005F                     _TLV:	
   867  005F                     	ds	1
   868                           
   869                           	psect	bssBANK1
   870  00A0                     __pbssBANK1:	
   871  00A0                     _table1:	
   872  00A0                     	ds	7
   873  00A7                     _day_counter:	
   874  00A7                     	ds	2
   875  00A9                     _d_type:	
   876  00A9                     	ds	2
   877  00AB                     _day_of_week_var:	
   878  00AB                     	ds	2
   879  00AD                     _cold_low_night:	
   880  00AD                     	ds	2
   881  00AF                     _cold_high_night:	
   882  00AF                     	ds	2
   883  00B1                     _count:	
   884  00B1                     	ds	2
   885                           
   886                           	psect	dataBANK1
   887  00B3                     __pdataBANK1:	
   888  00B3                     _table:	
   889  00B3                     	ds	8
   890                           
   891                           	psect	inittext
   892  0801                     init_fetch0:	
   893                           ;	Called with low address in FSR and high address in W
   894                           
   895  0801  087E               	movf	126,w
   896  0802  008A               	movwf	10
   897  0803  087F               	movf	127,w
   898  0804  0082               	movwf	2
   899  0805                     init_ram0:	
   900                           ;Called with:
   901                           ;	high address of idata address in btemp 
   902                           ;	low address of idata address in btemp+1 
   903                           ;	low address of data in FSR
   904                           ;	high address + 1 of data in btemp-1
   905                           
   906  0805  2001  120A  158A   	fcall	init_fetch0
   907  0808  0080               	movwf	0
   908  0809  0A84               	incf	4,f
   909  080A  0804               	movf	4,w
   910  080B  067D               	xorwf	125,w
   911  080C  1903               	btfsc	3,2
   912  080D  3400               	retlw	0
   913  080E  0AFF               	incf	127,f
   914  080F  1903               	btfsc	3,2
   915  0810  0AFE               	incf	126,f
   916  0811  2805               	goto	init_ram0
   917                           
   918                           	psect	clrtext
   919  1291                     clear_ram0:	
   920                           ;	Called with FSR containing the base address, and
   921                           ;	W with the last address+1
   922                           
   923  1291  0064               	clrwdt	;clear the watchdog before getting into this loop
   924  1292                     clrloop0:	
   925  1292  0180               	clrf	0	;clear RAM location pointed to by FSR
   926  1293  0A84               	incf	4,f	;increment pointer
   927  1294  0604               	xorwf	4,w	;XOR with final address
   928  1295  1903               	btfsc	3,2	;have we reached the end yet?
   929  1296  3400               	retlw	0	;all done for this memory range, return
   930  1297  0604               	xorwf	4,w	;XOR again to restore value
   931  1298  2A92               	goto	clrloop0	;do the next byte
   932                           
   933                           	psect	cstackCOMMON
   934  0070                     __pcstackCOMMON:	
   935  0070                     ?_init_temp:	
   936  0070                     ??_init_temp:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_set_time:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_ds1302_init:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_init:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ??_init:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_lcd_init:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_initialise_buttons:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ??_initialise_buttons:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_get_temp:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_get_time:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_write_cmd:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_write_char:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_display_temp:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_display_date:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_display_clock:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_thermometer_threshhold_settings:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?_date_settings:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ?_time_settings:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_reset_alarm:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_set_beep_threshhold:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_delay_screen:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ??_delay_screen:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ?_delay_temp:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?_delay2:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ??_delay2:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_time_write_1:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ??_time_write_1:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_time_read_1:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ??_time_read_1:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_button_delay:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ??_button_delay:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_time_date_hex_terminator:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_time_date_delimiter:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_main:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_reset_temp:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_write_byte:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_read_byte:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?___lbdiv:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?___lbmod:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?___awmod:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?___lwmod:	
  1057                           ; 2 bytes @ 0x0
  1058                           
  1059  0070                     delay_temp@y:	
  1060                           ; 2 bytes @ 0x0
  1061                           
  1062  0070                     time_date_delimiter@hex:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     time_date_hex_terminator@limiter:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ___lbdiv@divisor:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ___lbmod@divisor:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     delay_screen@i:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     delay2@i:	
  1078                           ; 2 bytes @ 0x0
  1079                           
  1080  0070                     button_delay@i:	
  1081                           ; 2 bytes @ 0x0
  1082                           
  1083  0070                     ___awmod@divisor:	
  1084                           ; 2 bytes @ 0x0
  1085                           
  1086  0070                     ___lwmod@divisor:	
  1087                           ; 2 bytes @ 0x0
  1088                           
  1089                           
  1090                           ; 2 bytes @ 0x0
  1091  0070                     	ds	1
  1092  0071                     ??_delay_temp:	
  1093  0071                     ??_time_date_hex_terminator:	
  1094                           ; 1 bytes @ 0x1
  1095                           
  1096  0071                     ??___lbdiv:	
  1097                           ; 1 bytes @ 0x1
  1098                           
  1099  0071                     ??___lbmod:	
  1100                           ; 1 bytes @ 0x1
  1101                           
  1102  0071                     time_date_delimiter@limiter:	
  1103                           ; 1 bytes @ 0x1
  1104                           
  1105                           
  1106                           ; 1 bytes @ 0x1
  1107  0071                     	ds	1
  1108  0072                     ??_write_cmd:	
  1109  0072                     ??_write_char:	
  1110                           ; 1 bytes @ 0x2
  1111                           
  1112  0072                     ??_set_beep_threshhold:	
  1113                           ; 1 bytes @ 0x2
  1114                           
  1115  0072                     write_char@x:	
  1116                           ; 1 bytes @ 0x2
  1117                           
  1118  0072                     write_cmd@x:	
  1119                           ; 1 bytes @ 0x2
  1120                           
  1121  0072                     delay_temp@x:	
  1122                           ; 1 bytes @ 0x2
  1123                           
  1124  0072                     set_beep_threshhold@x:	
  1125                           ; 1 bytes @ 0x2
  1126                           
  1127  0072                     ___lbdiv@dividend:	
  1128                           ; 1 bytes @ 0x2
  1129                           
  1130  0072                     time_write_1@j:	
  1131                           ; 1 bytes @ 0x2
  1132                           
  1133  0072                     time_read_1@j:	
  1134                           ; 2 bytes @ 0x2
  1135                           
  1136  0072                     time_date_delimiter@type:	
  1137                           ; 2 bytes @ 0x2
  1138                           
  1139  0072                     ___awmod@dividend:	
  1140                           ; 2 bytes @ 0x2
  1141                           
  1142  0072                     ___lwmod@dividend:	
  1143                           ; 2 bytes @ 0x2
  1144                           
  1145                           
  1146                           ; 2 bytes @ 0x2
  1147  0072                     	ds	1
  1148  0073                     ??_lcd_init:	
  1149  0073                     ??_display_temp:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     ??_display_date:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155  0073                     ??_display_clock:	
  1156                           ; 1 bytes @ 0x3
  1157                           
  1158  0073                     ?_set_lower_threshold:	
  1159                           ; 1 bytes @ 0x3
  1160                           
  1161  0073                     ?_set_upper_threshold:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164  0073                     ?_cold_threshold:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167  0073                     ??_reset_alarm:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0073                     ?_display_day:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0073                     delay_temp@z:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176  0073                     time_date_hex_terminator@val:	
  1177                           ; 1 bytes @ 0x3
  1178                           
  1179  0073                     ___lbdiv@counter:	
  1180                           ; 1 bytes @ 0x3
  1181                           
  1182  0073                     set_upper_threshold@upper_val:	
  1183                           ; 1 bytes @ 0x3
  1184                           
  1185  0073                     cold_threshold@upper_val:	
  1186                           ; 2 bytes @ 0x3
  1187                           
  1188  0073                     set_lower_threshold@upper_val:	
  1189                           ; 2 bytes @ 0x3
  1190                           
  1191  0073                     display_day@num:	
  1192                           ; 2 bytes @ 0x3
  1193                           
  1194                           
  1195                           ; 2 bytes @ 0x3
  1196  0073                     	ds	1
  1197  0074                     ??_time_date_delimiter:	
  1198  0074                     ??_reset_temp:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     ??_write_byte:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     ??_read_byte:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207  0074                     ??___awmod:	
  1208                           ; 1 bytes @ 0x4
  1209                           
  1210  0074                     ??___lwmod:	
  1211                           ; 1 bytes @ 0x4
  1212                           
  1213  0074                     time_write_1@time_tx:	
  1214                           ; 1 bytes @ 0x4
  1215                           
  1216  0074                     time_read_1@time_rx:	
  1217                           ; 1 bytes @ 0x4
  1218                           
  1219  0074                     ___lbdiv@quotient:	
  1220                           ; 1 bytes @ 0x4
  1221                           
  1222  0074                     ___lbmod@dividend:	
  1223                           ; 1 bytes @ 0x4
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0x4
  1227  0074                     	ds	1
  1228  0075                     ??_set_time:	
  1229  0075                     ??_ds1302_init:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0075                     ??_get_time:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0075                     ??_display_day:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0075                     reset_temp@presence:	
  1239                           ; 1 bytes @ 0x5
  1240                           
  1241  0075                     read_byte@value:	
  1242                           ; 1 bytes @ 0x5
  1243                           
  1244  0075                     ___awmod@counter:	
  1245                           ; 1 bytes @ 0x5
  1246                           
  1247  0075                     ___lbmod@counter:	
  1248                           ; 1 bytes @ 0x5
  1249                           
  1250  0075                     ___lwmod@counter:	
  1251                           ; 1 bytes @ 0x5
  1252                           
  1253  0075                     set_time@i:	
  1254                           ; 1 bytes @ 0x5
  1255                           
  1256  0075                     display_clock@i:	
  1257                           ; 2 bytes @ 0x5
  1258                           
  1259  0075                     display_date@i:	
  1260                           ; 2 bytes @ 0x5
  1261                           
  1262  0075                     set_upper_threshold@lower_val:	
  1263                           ; 2 bytes @ 0x5
  1264                           
  1265  0075                     cold_threshold@lower_val:	
  1266                           ; 2 bytes @ 0x5
  1267                           
  1268  0075                     set_lower_threshold@lower_val:	
  1269                           ; 2 bytes @ 0x5
  1270                           
  1271                           
  1272                           ; 2 bytes @ 0x5
  1273  0075                     	ds	1
  1274  0076                     ?___lwdiv:	
  1275  0076                     write_byte@temp:	
  1276                           ; 2 bytes @ 0x6
  1277                           
  1278  0076                     read_byte@i:	
  1279                           ; 1 bytes @ 0x6
  1280                           
  1281  0076                     time_date_delimiter@val:	
  1282                           ; 1 bytes @ 0x6
  1283                           
  1284  0076                     ___awmod@sign:	
  1285                           ; 1 bytes @ 0x6
  1286                           
  1287  0076                     ___lbmod@rem:	
  1288                           ; 1 bytes @ 0x6
  1289                           
  1290  0076                     get_time@i:	
  1291                           ; 1 bytes @ 0x6
  1292                           
  1293  0076                     ___lwdiv@divisor:	
  1294                           ; 2 bytes @ 0x6
  1295                           
  1296                           
  1297                           ; 2 bytes @ 0x6
  1298  0076                     	ds	1
  1299  0077                     ??_set_lower_threshold:	
  1300  0077                     ??_set_upper_threshold:	
  1301                           ; 1 bytes @ 0x7
  1302                           
  1303  0077                     ??_cold_threshold:	
  1304                           ; 1 bytes @ 0x7
  1305                           
  1306  0077                     ?_modulus_func:	
  1307                           ; 1 bytes @ 0x7
  1308                           
  1309  0077                     write_byte@val:	
  1310                           ; 2 bytes @ 0x7
  1311                           
  1312  0077                     modulus_func@x:	
  1313                           ; 1 bytes @ 0x7
  1314                           
  1315                           
  1316                           ; 2 bytes @ 0x7
  1317  0077                     	ds	1
  1318  0078                     write_byte@i:	
  1319  0078                     ___lwdiv@dividend:	
  1320                           ; 1 bytes @ 0x8
  1321                           
  1322                           
  1323                           ; 2 bytes @ 0x8
  1324  0078                     	ds	1
  1325  0079                     modulus_func@y:	
  1326                           
  1327                           ; 2 bytes @ 0x9
  1328  0079                     	ds	1
  1329  007A                     ??___lwdiv:	
  1330                           
  1331                           ; 1 bytes @ 0xA
  1332  007A                     	ds	1
  1333  007B                     ??_modulus_func:	
  1334  007B                     ??_incrementor:	
  1335                           ; 1 bytes @ 0xB
  1336                           
  1337  007B                     ___lwdiv@quotient:	
  1338                           ; 1 bytes @ 0xB
  1339                           
  1340                           
  1341                           ; 2 bytes @ 0xB
  1342  007B                     	ds	2
  1343  007D                     ___lwdiv@counter:	
  1344                           
  1345                           ; 1 bytes @ 0xD
  1346  007D                     	ds	1
  1347                           
  1348                           	psect	cstackBANK0
  1349  0060                     __pcstackBANK0:	
  1350  0060                     ??_get_temp:	
  1351  0060                     ?_incrementor:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0060                     incrementor@upper_val:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357                           
  1358                           ; 2 bytes @ 0x0
  1359  0060                     	ds	2
  1360  0062                     incrementor@lower_val:	
  1361                           
  1362                           ; 2 bytes @ 0x2
  1363  0062                     	ds	2
  1364  0064                     incrementor@z:	
  1365                           
  1366                           ; 1 bytes @ 0x4
  1367  0064                     	ds	1
  1368  0065                     ??_thermometer_threshhold_settings:	
  1369  0065                     ??_date_settings:	
  1370                           ; 1 bytes @ 0x5
  1371                           
  1372  0065                     ??_time_settings:	
  1373                           ; 1 bytes @ 0x5
  1374                           
  1375                           
  1376                           ; 1 bytes @ 0x5
  1377  0065                     	ds	3
  1378  0068                     ??_main:	
  1379                           
  1380                           ; 1 bytes @ 0x8
  1381  0068                     	ds	5
  1382  006D                     main@i:	
  1383                           
  1384                           ; 2 bytes @ 0xD
  1385  006D                     	ds	2
  1386                           
  1387                           	psect	maintext
  1388  0B15                     __pmaintext:	
  1389 ;;
  1390 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1391 ;;
  1392 ;; *************** function _main *****************
  1393 ;; Defined at:
  1394 ;;		line 10 in file "mainLogic.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;		None
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  i               2   13[BANK0 ] int 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  1    wreg      void 
  1401 ;; Registers used:
  1402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : B00/0
  1405 ;;		On exit  : 200/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1408 ;;      Params:         0       0       0       0       0
  1409 ;;      Locals:         0       2       0       0       0
  1410 ;;      Temps:          0       5       0       0       0
  1411 ;;      Totals:         0       7       0       0       0
  1412 ;;Total ram usage:        7 bytes
  1413 ;; Hardware stack levels required when called:    4
  1414 ;; This function calls:
  1415 ;;		_cold_threshold
  1416 ;;		_date_settings
  1417 ;;		_display_clock
  1418 ;;		_display_date
  1419 ;;		_display_day
  1420 ;;		_display_temp
  1421 ;;		_ds1302_init
  1422 ;;		_get_temp
  1423 ;;		_get_time
  1424 ;;		_init
  1425 ;;		_init_temp
  1426 ;;		_initialise_buttons
  1427 ;;		_lcd_init
  1428 ;;		_modulus_func
  1429 ;;		_reset_alarm
  1430 ;;		_set_beep_threshhold
  1431 ;;		_set_lower_threshold
  1432 ;;		_set_time
  1433 ;;		_set_upper_threshold
  1434 ;;		_thermometer_threshhold_settings
  1435 ;;		_time_settings
  1436 ;;		_write_char
  1437 ;;		_write_cmd
  1438 ;; This function is called by:
  1439 ;;		Startup code after reset
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _main
  1445  0B15                     _main:	
  1446                           
  1447                           ;mainLogic.c: 11:     TRISB=0X02;
  1448                           
  1449                           ;incstack = 0
  1450                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1451  0B15  3002               	movlw	2
  1452  0B16  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0B17  0086               	movwf	6	;volatile
  1454                           
  1455                           ;mainLogic.c: 12:     init_temp();
  1456  0B18  160A  118A  2284  120A  158A  	fcall	_init_temp
  1457                           
  1458                           ;mainLogic.c: 13:     set_time();
  1459  0B1D  160A  118A  2442  120A  158A  	fcall	_set_time
  1460                           
  1461                           ;mainLogic.c: 14:     ds1302_init();
  1462  0B22  160A  118A  22B6  120A  158A  	fcall	_ds1302_init
  1463                           
  1464                           ;mainLogic.c: 16:     init();
  1465  0B27  160A  118A  2289  120A  158A  	fcall	_init
  1466                           
  1467                           ;mainLogic.c: 17:     lcd_init();
  1468  0B2C  160A  118A  23D5  120A  158A  	fcall	_lcd_init
  1469                           
  1470                           ;mainLogic.c: 18:     init_temp();
  1471  0B31  160A  118A  2284  120A  158A  	fcall	_init_temp
  1472                           
  1473                           ;mainLogic.c: 19:     initialise_buttons();
  1474  0B36  160A  118A  2311  120A  158A  	fcall	_initialise_buttons
  1475                           
  1476                           ;mainLogic.c: 20:     var1 = 3;
  1477  0B3B  3003               	movlw	3
  1478  0B3C  00E8               	movwf	??_main
  1479  0B3D  0868               	movf	??_main,w
  1480  0B3E  00CF               	movwf	_var1
  1481                           
  1482                           ;mainLogic.c: 21:     var2 = 4;
  1483  0B3F  3004               	movlw	4
  1484  0B40  00E8               	movwf	??_main
  1485  0B41  0868               	movf	??_main,w
  1486  0B42  00CE               	movwf	_var2
  1487                           
  1488                           ;mainLogic.c: 22:     var_night_low = 4;
  1489  0B43  3004               	movlw	4
  1490  0B44  00B8               	movwf	_var_night_low
  1491  0B45  3000               	movlw	0
  1492  0B46  00B9               	movwf	_var_night_low+1
  1493                           
  1494                           ;mainLogic.c: 23:     var_night_high = 2;
  1495  0B47  3002               	movlw	2
  1496  0B48  00B6               	movwf	_var_night_high
  1497  0B49  3000               	movlw	0
  1498  0B4A  00B7               	movwf	_var_night_high+1
  1499                           
  1500                           ;mainLogic.c: 24:     cold_high = 1;
  1501  0B4B  3001               	movlw	1
  1502  0B4C  00B4               	movwf	_cold_high
  1503  0B4D  3000               	movlw	0
  1504  0B4E  00B5               	movwf	_cold_high+1
  1505                           
  1506                           ;mainLogic.c: 25:     cold_low = 9;
  1507  0B4F  3009               	movlw	9
  1508  0B50  00B2               	movwf	_cold_low
  1509  0B51  3000               	movlw	0
  1510  0B52  00B3               	movwf	_cold_low+1
  1511  0B53                     l4881:	
  1512                           
  1513                           ;mainLogic.c: 28:     get_temp();
  1514  0B53  120A  158A  20B7  120A  158A  	fcall	_get_temp
  1515                           
  1516                           ;mainLogic.c: 29:     get_time();
  1517  0B58  160A  118A  246A  120A  158A  	fcall	_get_time
  1518                           
  1519                           ;mainLogic.c: 30:     write_cmd(0x80);
  1520  0B5D  3080               	movlw	128
  1521  0B5E  160A  118A  233C  120A  158A  	fcall	_write_cmd
  1522                           
  1523                           ;mainLogic.c: 31:     write_char('T');
  1524  0B63  3054               	movlw	84
  1525  0B64  160A  118A  2325  120A  158A  	fcall	_write_char
  1526                           
  1527                           ;mainLogic.c: 32:     write_char('e');
  1528  0B69  3065               	movlw	101
  1529  0B6A  160A  118A  2325  120A  158A  	fcall	_write_char
  1530                           
  1531                           ;mainLogic.c: 33:     write_char('m');
  1532  0B6F  306D               	movlw	109
  1533  0B70  160A  118A  2325  120A  158A  	fcall	_write_char
  1534                           
  1535                           ;mainLogic.c: 34:     write_char('p');
  1536  0B75  3070               	movlw	112
  1537  0B76  160A  118A  2325  120A  158A  	fcall	_write_char
  1538                           
  1539                           ;mainLogic.c: 35:     write_char(':');
  1540  0B7B  303A               	movlw	58
  1541  0B7C  160A  118A  2325  120A  158A  	fcall	_write_char
  1542                           
  1543                           ;mainLogic.c: 36:     display_temp();
  1544  0B81  160A  118A  2370  120A  158A  	fcall	_display_temp
  1545                           
  1546                           ;mainLogic.c: 38:     write_cmd(0x90);
  1547  0B86  3090               	movlw	144
  1548  0B87  160A  118A  233C  120A  158A  	fcall	_write_cmd
  1549                           
  1550                           ;mainLogic.c: 39:     write_char('D');
  1551  0B8C  3044               	movlw	68
  1552  0B8D  160A  118A  2325  120A  158A  	fcall	_write_char
  1553                           
  1554                           ;mainLogic.c: 40:     write_char('a');
  1555  0B92  3061               	movlw	97
  1556  0B93  160A  118A  2325  120A  158A  	fcall	_write_char
  1557                           
  1558                           ;mainLogic.c: 41:     write_char('t');
  1559  0B98  3074               	movlw	116
  1560  0B99  160A  118A  2325  120A  158A  	fcall	_write_char
  1561                           
  1562                           ;mainLogic.c: 42:     write_char('e');
  1563  0B9E  3065               	movlw	101
  1564  0B9F  160A  118A  2325  120A  158A  	fcall	_write_char
  1565                           
  1566                           ;mainLogic.c: 43:     write_char(':');
  1567  0BA4  303A               	movlw	58
  1568  0BA5  160A  118A  2325  120A  158A  	fcall	_write_char
  1569                           
  1570                           ;mainLogic.c: 44:     write_char(' ');
  1571  0BAA  3020               	movlw	32
  1572  0BAB  160A  118A  2325  120A  158A  	fcall	_write_char
  1573                           
  1574                           ;mainLogic.c: 46:     display_date();
  1575  0BB0  160A  118A  2763  120A  158A  	fcall	_display_date
  1576                           
  1577                           ;mainLogic.c: 48:     write_cmd(0x88);
  1578  0BB5  3088               	movlw	136
  1579  0BB6  160A  118A  233C  120A  158A  	fcall	_write_cmd
  1580                           
  1581                           ;mainLogic.c: 49:     write_char('T');
  1582  0BBB  3054               	movlw	84
  1583  0BBC  160A  118A  2325  120A  158A  	fcall	_write_char
  1584                           
  1585                           ;mainLogic.c: 50:     write_char('i');
  1586  0BC1  3069               	movlw	105
  1587  0BC2  160A  118A  2325  120A  158A  	fcall	_write_char
  1588                           
  1589                           ;mainLogic.c: 51:     write_char('m');
  1590  0BC7  306D               	movlw	109
  1591  0BC8  160A  118A  2325  120A  158A  	fcall	_write_char
  1592                           
  1593                           ;mainLogic.c: 52:     write_char('e');
  1594  0BCD  3065               	movlw	101
  1595  0BCE  160A  118A  2325  120A  158A  	fcall	_write_char
  1596                           
  1597                           ;mainLogic.c: 53:     write_char(':');
  1598  0BD3  303A               	movlw	58
  1599  0BD4  160A  118A  2325  120A  158A  	fcall	_write_char
  1600                           
  1601                           ;mainLogic.c: 54:     display_clock();
  1602  0BD9  120A  158A  2012  120A  158A  	fcall	_display_clock
  1603                           
  1604                           ;mainLogic.c: 55:     thermometer_threshhold_settings();
  1605  0BDE  120A  118A  2066  120A  158A  	fcall	_thermometer_threshhold_settings
  1606                           
  1607                           ;mainLogic.c: 56:     date_settings();
  1608  0BE3  120A  118A  2385  120A  158A  	fcall	_date_settings
  1609                           
  1610                           ;mainLogic.c: 57:     time_settings();
  1611  0BE8  120A  158A  2501  120A  158A  	fcall	_time_settings
  1612                           
  1613                           ;mainLogic.c: 58:     write_cmd(0x98);
  1614  0BED  3098               	movlw	152
  1615  0BEE  160A  118A  233C  120A  158A  	fcall	_write_cmd
  1616                           
  1617                           ;mainLogic.c: 60:      if((temp_high+'0')<= 1 && (temp_low + '0') < 8){
  1618  0BF3  084B               	movf	_temp_high,w
  1619  0BF4  3E30               	addlw	48
  1620  0BF5  00E8               	movwf	??_main
  1621  0BF6  3000               	movlw	0
  1622  0BF7  1803               	skipnc
  1623  0BF8  3001               	movlw	1
  1624  0BF9  00E9               	movwf	??_main+1
  1625  0BFA  3000               	movlw	0
  1626  0BFB  0269               	subwf	??_main+1,w
  1627  0BFC  3002               	movlw	2
  1628  0BFD  1903               	skipnz
  1629  0BFE  0268               	subwf	??_main,w
  1630  0BFF  1803               	skipnc
  1631  0C00  2C4B               	goto	l4943
  1632  0C01  084C               	movf	_temp_low,w
  1633  0C02  3E30               	addlw	48
  1634  0C03  00E8               	movwf	??_main
  1635  0C04  3000               	movlw	0
  1636  0C05  1803               	skipnc
  1637  0C06  3001               	movlw	1
  1638  0C07  00E9               	movwf	??_main+1
  1639  0C08  3000               	movlw	0
  1640  0C09  0269               	subwf	??_main+1,w
  1641  0C0A  3008               	movlw	8
  1642  0C0B  1903               	skipnz
  1643  0C0C  0268               	subwf	??_main,w
  1644  0C0D  1803               	skipnc
  1645  0C0E  2C4B               	goto	l4943
  1646                           
  1647                           ;mainLogic.c: 61:     alarm__ = set_lower_threshold(var1,var2);
  1648  0C0F  084F               	movf	_var1,w
  1649  0C10  00E8               	movwf	??_main
  1650  0C11  01E9               	clrf	??_main+1
  1651  0C12  0868               	movf	??_main,w
  1652  0C13  00F3               	movwf	set_lower_threshold@upper_val
  1653  0C14  0869               	movf	??_main+1,w
  1654  0C15  00F4               	movwf	set_lower_threshold@upper_val+1
  1655  0C16  084E               	movf	_var2,w
  1656  0C17  00EA               	movwf	??_main+2
  1657  0C18  01EB               	clrf	??_main+3
  1658  0C19  086A               	movf	??_main+2,w
  1659  0C1A  00F5               	movwf	set_lower_threshold@lower_val
  1660  0C1B  086B               	movf	??_main+3,w
  1661  0C1C  00F6               	movwf	set_lower_threshold@lower_val+1
  1662  0C1D  160A  118A  2600  120A  158A  	fcall	_set_lower_threshold
  1663  0C22  00EC               	movwf	??_main+4
  1664  0C23  086C               	movf	??_main+4,w
  1665  0C24  00CD               	movwf	_alarm__
  1666                           
  1667                           ;mainLogic.c: 62:     alarm__ = set_upper_threshold(var1,var2);
  1668  0C25  084F               	movf	_var1,w
  1669  0C26  00E8               	movwf	??_main
  1670  0C27  01E9               	clrf	??_main+1
  1671  0C28  0868               	movf	??_main,w
  1672  0C29  00F3               	movwf	set_upper_threshold@upper_val
  1673  0C2A  0869               	movf	??_main+1,w
  1674  0C2B  00F4               	movwf	set_upper_threshold@upper_val+1
  1675  0C2C  084E               	movf	_var2,w
  1676  0C2D  00EA               	movwf	??_main+2
  1677  0C2E  01EB               	clrf	??_main+3
  1678  0C2F  086A               	movf	??_main+2,w
  1679  0C30  00F5               	movwf	set_upper_threshold@lower_val
  1680  0C31  086B               	movf	??_main+3,w
  1681  0C32  00F6               	movwf	set_upper_threshold@lower_val+1
  1682  0C33  160A  118A  2694  120A  158A  	fcall	_set_upper_threshold
  1683  0C38  00EC               	movwf	??_main+4
  1684  0C39  086C               	movf	??_main+4,w
  1685  0C3A  00CD               	movwf	_alarm__
  1686                           
  1687                           ;mainLogic.c: 63:     alarm__ = cold_threshold(cold_high,cold_low);
  1688  0C3B  0835               	movf	_cold_high+1,w
  1689  0C3C  00F4               	movwf	cold_threshold@upper_val+1
  1690  0C3D  0834               	movf	_cold_high,w
  1691  0C3E  00F3               	movwf	cold_threshold@upper_val
  1692  0C3F  0833               	movf	_cold_low+1,w
  1693  0C40  00F6               	movwf	cold_threshold@lower_val+1
  1694  0C41  0832               	movf	_cold_low,w
  1695  0C42  00F5               	movwf	cold_threshold@lower_val
  1696  0C43  120A  118A  200C  120A  158A  	fcall	_cold_threshold
  1697  0C48  00E8               	movwf	??_main
  1698  0C49  0868               	movf	??_main,w
  1699  0C4A  00CD               	movwf	_alarm__
  1700  0C4B                     l4943:	
  1701                           
  1702                           ;mainLogic.c: 66:     if((temp_high+'0') >= 1 && (temp_low + '0') >= 8){
  1703  0C4B  084B               	movf	_temp_high,w
  1704  0C4C  3E30               	addlw	48
  1705  0C4D  00E8               	movwf	??_main
  1706  0C4E  3000               	movlw	0
  1707  0C4F  1803               	skipnc
  1708  0C50  3001               	movlw	1
  1709  0C51  00E9               	movwf	??_main+1
  1710  0C52  0868               	movf	??_main,w
  1711  0C53  0469               	iorwf	??_main+1,w
  1712  0C54  1903               	btfsc	3,2
  1713  0C55  2C92               	goto	l165
  1714  0C56  084C               	movf	_temp_low,w
  1715  0C57  3E30               	addlw	48
  1716  0C58  00E8               	movwf	??_main
  1717  0C59  3000               	movlw	0
  1718  0C5A  1803               	skipnc
  1719  0C5B  3001               	movlw	1
  1720  0C5C  00E9               	movwf	??_main+1
  1721  0C5D  3000               	movlw	0
  1722  0C5E  0269               	subwf	??_main+1,w
  1723  0C5F  3008               	movlw	8
  1724  0C60  1903               	skipnz
  1725  0C61  0268               	subwf	??_main,w
  1726  0C62  1C03               	skipc
  1727  0C63  2C92               	goto	l165
  1728                           
  1729                           ;mainLogic.c: 67:     alarm__ = set_lower_threshold(var_night_high,var_night_low);
  1730  0C64  0837               	movf	_var_night_high+1,w
  1731  0C65  00F4               	movwf	set_lower_threshold@upper_val+1
  1732  0C66  0836               	movf	_var_night_high,w
  1733  0C67  00F3               	movwf	set_lower_threshold@upper_val
  1734  0C68  0839               	movf	_var_night_low+1,w
  1735  0C69  00F6               	movwf	set_lower_threshold@lower_val+1
  1736  0C6A  0838               	movf	_var_night_low,w
  1737  0C6B  00F5               	movwf	set_lower_threshold@lower_val
  1738  0C6C  160A  118A  2600  120A  158A  	fcall	_set_lower_threshold
  1739  0C71  00E8               	movwf	??_main
  1740  0C72  0868               	movf	??_main,w
  1741  0C73  00CD               	movwf	_alarm__
  1742                           
  1743                           ;mainLogic.c: 68:     alarm__ = set_upper_threshold(var_night_high,var_night_low);
  1744  0C74  0837               	movf	_var_night_high+1,w
  1745  0C75  00F4               	movwf	set_upper_threshold@upper_val+1
  1746  0C76  0836               	movf	_var_night_high,w
  1747  0C77  00F3               	movwf	set_upper_threshold@upper_val
  1748  0C78  0839               	movf	_var_night_low+1,w
  1749  0C79  00F6               	movwf	set_upper_threshold@lower_val+1
  1750  0C7A  0838               	movf	_var_night_low,w
  1751  0C7B  00F5               	movwf	set_upper_threshold@lower_val
  1752  0C7C  160A  118A  2694  120A  158A  	fcall	_set_upper_threshold
  1753  0C81  00E8               	movwf	??_main
  1754  0C82  0868               	movf	??_main,w
  1755  0C83  00CD               	movwf	_alarm__
  1756                           
  1757                           ;mainLogic.c: 69:     alarm__ = cold_threshold(cold_high_night,cold_low_night);
  1758  0C84  3000               	movlw	0
  1759  0C85  00F3               	movwf	cold_threshold@upper_val
  1760  0C86  00F4               	movwf	cold_threshold@upper_val+1
  1761  0C87  3000               	movlw	0
  1762  0C88  00F5               	movwf	cold_threshold@lower_val
  1763  0C89  00F6               	movwf	cold_threshold@lower_val+1
  1764  0C8A  120A  118A  200C  120A  158A  	fcall	_cold_threshold
  1765  0C8F  00E8               	movwf	??_main
  1766  0C90  0868               	movf	??_main,w
  1767  0C91  00CD               	movwf	_alarm__
  1768  0C92                     l165:	
  1769                           ;mainLogic.c: 70:     }
  1770                           
  1771                           
  1772                           ;mainLogic.c: 71:     alarm__ = reset_alarm();
  1773  0C92  160A  118A  2496  120A  158A  	fcall	_reset_alarm
  1774  0C97  00E8               	movwf	??_main
  1775  0C98  0868               	movf	??_main,w
  1776  0C99  00CD               	movwf	_alarm__
  1777                           
  1778                           ;mainLogic.c: 72:     set_beep_threshhold(alarm__);
  1779  0C9A  084D               	movf	_alarm__,w
  1780  0C9B  160A  118A  2353  120A  158A  	fcall	_set_beep_threshhold
  1781                           
  1782                           ;mainLogic.c: 73:     write_char(' ');
  1783  0CA0  3020               	movlw	32
  1784  0CA1  160A  118A  2325  120A  158A  	fcall	_write_char
  1785                           
  1786                           ;mainLogic.c: 74:     write_char('H');
  1787  0CA6  3048               	movlw	72
  1788  0CA7  160A  118A  2325  120A  158A  	fcall	_write_char
  1789                           
  1790                           ;mainLogic.c: 75:     write_char(':');
  1791  0CAC  303A               	movlw	58
  1792  0CAD  160A  118A  2325  120A  158A  	fcall	_write_char
  1793                           
  1794                           ;mainLogic.c: 76:     write_char(heater_state);
  1795  0CB2  0851               	movf	_heater_state,w
  1796  0CB3  160A  118A  2325  120A  158A  	fcall	_write_char
  1797                           
  1798                           ;mainLogic.c: 77:     write_char('C');
  1799  0CB8  3043               	movlw	67
  1800  0CB9  160A  118A  2325  120A  158A  	fcall	_write_char
  1801                           
  1802                           ;mainLogic.c: 78:     write_char(':');
  1803  0CBE  303A               	movlw	58
  1804  0CBF  160A  118A  2325  120A  158A  	fcall	_write_char
  1805                           
  1806                           ;mainLogic.c: 79:     write_char(cooler_state);
  1807  0CC4  0850               	movf	_cooler_state,w
  1808  0CC5  160A  118A  2325  120A  158A  	fcall	_write_char
  1809                           
  1810                           ;mainLogic.c: 80:     for(int i = 0; i < 3; i++)
  1811  0CCA  01ED               	clrf	main@i
  1812  0CCB  01EE               	clrf	main@i+1
  1813  0CCC                     l4955:	
  1814                           
  1815                           ;mainLogic.c: 81:     write_char(' ');
  1816  0CCC  3020               	movlw	32
  1817  0CCD  160A  118A  2325  120A  158A  	fcall	_write_char
  1818  0CD2  3001               	movlw	1
  1819  0CD3  07ED               	addwf	main@i,f
  1820  0CD4  1803               	skipnc
  1821  0CD5  0AEE               	incf	main@i+1,f
  1822  0CD6  3000               	movlw	0
  1823  0CD7  07EE               	addwf	main@i+1,f
  1824  0CD8  086E               	movf	main@i+1,w
  1825  0CD9  3A80               	xorlw	128
  1826  0CDA  00FF               	movwf	127
  1827  0CDB  3080               	movlw	128
  1828  0CDC  027F               	subwf	127,w
  1829  0CDD  1D03               	skipz
  1830  0CDE  2CE1               	goto	u4185
  1831  0CDF  3003               	movlw	3
  1832  0CE0  026D               	subwf	main@i,w
  1833  0CE1                     u4185:	
  1834  0CE1  1C03               	skipc
  1835  0CE2  2CCC               	goto	l4955
  1836                           
  1837                           ;mainLogic.c: 82:     day_counter = modulus_func(day_low,8);
  1838  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0CE5  0827               	movf	_day_low+1,w
  1841  0CE6  00F8               	movwf	modulus_func@x+1
  1842  0CE7  0826               	movf	_day_low,w
  1843  0CE8  00F7               	movwf	modulus_func@x
  1844  0CE9  3008               	movlw	8
  1845  0CEA  00F9               	movwf	modulus_func@y
  1846  0CEB  3000               	movlw	0
  1847  0CEC  00FA               	movwf	modulus_func@y+1
  1848  0CED  160A  118A  22C5  120A  158A  	fcall	_modulus_func
  1849  0CF2  0878               	movf	?_modulus_func+1,w
  1850  0CF3  1683               	bsf	3,5	;RP0=1, select bank1
  1851  0CF4  00A8               	movwf	(_day_counter+1)^(0+128)
  1852  0CF5  0877               	movf	?_modulus_func,w
  1853  0CF6  00A7               	movwf	_day_counter^(0+128)
  1854                           
  1855                           ;mainLogic.c: 83:     display_day(day_counter);
  1856  0CF7  0828               	movf	(_day_counter+1)^(0+128),w
  1857  0CF8  00F4               	movwf	display_day@num+1
  1858  0CF9  0827               	movf	_day_counter^(0+128),w
  1859  0CFA  00F3               	movwf	display_day@num
  1860  0CFB  160A  118A  26EA  120A  158A  	fcall	_display_day
  1861  0D00  2B53               	goto	l4881
  1862  0D01                     __end_of_main:	
  1863                           
  1864                           	psect	text1
  1865  0D01                     __ptext1:	
  1866 ;; *************** function _time_settings *****************
  1867 ;; Defined at:
  1868 ;;		line 266 in file "Button_src.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 300/0
  1879 ;;		On exit  : 300/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0
  1884 ;;      Temps:          0       3       0       0       0
  1885 ;;      Totals:         0       3       0       0       0
  1886 ;;Total ram usage:        3 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		_button_delay
  1891 ;;		_incrementor
  1892 ;;		_modulus_func
  1893 ;;		_set_time
  1894 ;;		_time_date_delimiter
  1895 ;;		_time_date_hex_terminator
  1896 ;;		_write_char
  1897 ;;		_write_cmd
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           
  1904                           ;psect for function _time_settings
  1905  0D01                     _time_settings:	
  1906                           
  1907                           ;Button_src.c: 267:  RC0 = 1;
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1911  0D01  1407               	bsf	7,0	;volatile
  1912                           
  1913                           ;Button_src.c: 268:  RC1 = 1;
  1914  0D02  1487               	bsf	7,1	;volatile
  1915                           
  1916                           ;Button_src.c: 269:  RC2 = 0;
  1917  0D03  1107               	bcf	7,2	;volatile
  1918                           
  1919                           ;Button_src.c: 270:  RC3 = 1;
  1920  0D04  1587               	bsf	7,3	;volatile
  1921                           
  1922                           ;Button_src.c: 271:   if (RC4 == 0){
  1923  0D05  1A07               	btfsc	7,4	;volatile
  1924  0D06  0008               	return
  1925                           
  1926                           ;Button_src.c: 272:       write_cmd(0x1);
  1927  0D07  3001               	movlw	1
  1928  0D08  160A  118A  233C  120A  158A  	fcall	_write_cmd
  1929  0D0D                     l744:	
  1930                           ;Button_src.c: 273:       for(;;){
  1931                           
  1932                           
  1933                           ;Button_src.c: 274:             write_cmd(0x80);
  1934  0D0D  3080               	movlw	128
  1935  0D0E  160A  118A  233C  120A  158A  	fcall	_write_cmd
  1936                           
  1937                           ;Button_src.c: 275:             write_char('T');
  1938  0D13  3054               	movlw	84
  1939  0D14  160A  118A  2325  120A  158A  	fcall	_write_char
  1940                           
  1941                           ;Button_src.c: 276:             write_char('i');
  1942  0D19  3069               	movlw	105
  1943  0D1A  160A  118A  2325  120A  158A  	fcall	_write_char
  1944                           
  1945                           ;Button_src.c: 277:             write_char('m');
  1946  0D1F  306D               	movlw	109
  1947  0D20  160A  118A  2325  120A  158A  	fcall	_write_char
  1948                           
  1949                           ;Button_src.c: 278:             write_char('e');
  1950  0D25  3065               	movlw	101
  1951  0D26  160A  118A  2325  120A  158A  	fcall	_write_char
  1952                           
  1953                           ;Button_src.c: 279:             write_char('_');
  1954  0D2B  305F               	movlw	95
  1955  0D2C  160A  118A  2325  120A  158A  	fcall	_write_char
  1956                           
  1957                           ;Button_src.c: 280:             write_char('S');
  1958  0D31  3053               	movlw	83
  1959  0D32  160A  118A  2325  120A  158A  	fcall	_write_char
  1960                           
  1961                           ;Button_src.c: 281:             write_char('e');
  1962  0D37  3065               	movlw	101
  1963  0D38  160A  118A  2325  120A  158A  	fcall	_write_char
  1964                           
  1965                           ;Button_src.c: 282:             write_char('t');
  1966  0D3D  3074               	movlw	116
  1967  0D3E  160A  118A  2325  120A  158A  	fcall	_write_char
  1968                           
  1969                           ;Button_src.c: 283:             write_char('t');
  1970  0D43  3074               	movlw	116
  1971  0D44  160A  118A  2325  120A  158A  	fcall	_write_char
  1972                           
  1973                           ;Button_src.c: 284:             write_char('i');
  1974  0D49  3069               	movlw	105
  1975  0D4A  160A  118A  2325  120A  158A  	fcall	_write_char
  1976                           
  1977                           ;Button_src.c: 285:             write_char('n');
  1978  0D4F  306E               	movlw	110
  1979  0D50  160A  118A  2325  120A  158A  	fcall	_write_char
  1980                           
  1981                           ;Button_src.c: 286:             write_char('g');
  1982  0D55  3067               	movlw	103
  1983  0D56  160A  118A  2325  120A  158A  	fcall	_write_char
  1984                           
  1985                           ;Button_src.c: 287:             write_char('s');
  1986  0D5B  3073               	movlw	115
  1987  0D5C  160A  118A  2325  120A  158A  	fcall	_write_char
  1988                           
  1989                           ;Button_src.c: 289:             RC0 = 1;
  1990  0D61  1407               	bsf	7,0	;volatile
  1991                           
  1992                           ;Button_src.c: 290:             RC1 = 0;
  1993  0D62  1087               	bcf	7,1	;volatile
  1994                           
  1995                           ;Button_src.c: 291:             RC2 = 1;
  1996  0D63  1507               	bsf	7,2	;volatile
  1997                           
  1998                           ;Button_src.c: 292:             RC3 = 1;
  1999  0D64  1587               	bsf	7,3	;volatile
  2000                           
  2001                           ;Button_src.c: 294:             if(RC7 == 0 && b =='x'){
  2002  0D65  1B87               	btfsc	7,7	;volatile
  2003  0D66  2DD8               	goto	l4575
  2004  0D67  3078               	movlw	120
  2005  0D68  0649               	xorwf	_b,w
  2006  0D69  1D03               	btfss	3,2
  2007  0D6A  2DD8               	goto	l4575
  2008                           
  2009                           ;Button_src.c: 295:                 if(stats == 1)
  2010  0D6B  0322               	decf	_stats,w
  2011  0D6C  0423               	iorwf	_stats+1,w
  2012  0D6D  1D03               	btfss	3,2
  2013  0D6E  2D73               	goto	l746
  2014                           
  2015                           ;Button_src.c: 296:                    a++;
  2016  0D6F  3001               	movlw	1
  2017  0D70  00E5               	movwf	??_time_settings
  2018  0D71  0865               	movf	??_time_settings,w
  2019  0D72  07CA               	addwf	_a,f
  2020  0D73                     l746:	
  2021                           
  2022                           ;Button_src.c: 297:                 if(stats == 0){
  2023  0D73  0822               	movf	_stats,w
  2024  0D74  0423               	iorwf	_stats+1,w
  2025  0D75  1D03               	btfss	3,2
  2026  0D76  2D7B               	goto	l747
  2027                           
  2028                           ;Button_src.c: 298:                    stats = 1;
  2029  0D77  3001               	movlw	1
  2030  0D78  00A2               	movwf	_stats
  2031  0D79  3000               	movlw	0
  2032  0D7A  00A3               	movwf	_stats+1
  2033  0D7B                     l747:	
  2034                           ;Button_src.c: 299:                 }
  2035                           
  2036                           
  2037                           ;Button_src.c: 301:                     x++ ;
  2038  0D7B  3001               	movlw	1
  2039  0D7C  07AC               	addwf	_x,f
  2040  0D7D  1803               	skipnc
  2041  0D7E  0AAD               	incf	_x+1,f
  2042  0D7F  3000               	movlw	0
  2043  0D80  07AD               	addwf	_x+1,f
  2044                           
  2045                           ;Button_src.c: 302:                     x = modulus_func(x,10);
  2046  0D81  082D               	movf	_x+1,w
  2047  0D82  00F8               	movwf	modulus_func@x+1
  2048  0D83  082C               	movf	_x,w
  2049  0D84  00F7               	movwf	modulus_func@x
  2050  0D85  300A               	movlw	10
  2051  0D86  00F9               	movwf	modulus_func@y
  2052  0D87  3000               	movlw	0
  2053  0D88  00FA               	movwf	modulus_func@y+1
  2054  0D89  160A  118A  22C5  120A  158A  	fcall	_modulus_func
  2055  0D8E  0878               	movf	?_modulus_func+1,w
  2056  0D8F  00AD               	movwf	_x+1
  2057  0D90  0877               	movf	?_modulus_func,w
  2058  0D91  00AC               	movwf	_x
  2059                           
  2060                           ;Button_src.c: 303:                     if (p == 1){
  2061  0D92  0320               	decf	_p,w
  2062  0D93  0421               	iorwf	_p+1,w
  2063  0D94  1D03               	btfss	3,2
  2064  0D95  2DAF               	goto	l4561
  2065                           
  2066                           ;Button_src.c: 304:                         y = incrementor(y,x,'0');
  2067  0D96  082B               	movf	_y+1,w
  2068  0D97  00E1               	movwf	incrementor@upper_val+1
  2069  0D98  082A               	movf	_y,w
  2070  0D99  00E0               	movwf	incrementor@upper_val
  2071  0D9A  082D               	movf	_x+1,w
  2072  0D9B  00E3               	movwf	incrementor@lower_val+1
  2073  0D9C  082C               	movf	_x,w
  2074  0D9D  00E2               	movwf	incrementor@lower_val
  2075  0D9E  3030               	movlw	48
  2076  0D9F  00E5               	movwf	??_time_settings
  2077  0DA0  0865               	movf	??_time_settings,w
  2078  0DA1  00E4               	movwf	incrementor@z
  2079  0DA2  160A  118A  23F8  120A  158A  	fcall	_incrementor
  2080  0DA7  00E6               	movwf	??_time_settings+1
  2081  0DA8  01E7               	clrf	??_time_settings+2
  2082  0DA9  0866               	movf	??_time_settings+1,w
  2083  0DAA  00AA               	movwf	_y
  2084  0DAB  0867               	movf	??_time_settings+2,w
  2085  0DAC  00AB               	movwf	_y+1
  2086                           
  2087                           ;Button_src.c: 305:                         p = 0;
  2088  0DAD  01A0               	clrf	_p
  2089  0DAE  01A1               	clrf	_p+1
  2090  0DAF                     l4561:	
  2091                           
  2092                           ;Button_src.c: 307:                     if (x == 9){
  2093  0DAF  3009               	movlw	9
  2094  0DB0  062C               	xorwf	_x,w
  2095  0DB1  042D               	iorwf	_x+1,w
  2096  0DB2  1D03               	btfss	3,2
  2097  0DB3  2DB8               	goto	l4565
  2098                           
  2099                           ;Button_src.c: 308:                         p = 1;
  2100  0DB4  3001               	movlw	1
  2101  0DB5  00A0               	movwf	_p
  2102  0DB6  3000               	movlw	0
  2103  0DB7  00A1               	movwf	_p+1
  2104  0DB8                     l4565:	
  2105                           
  2106                           ;Button_src.c: 312:                     a = time_date_hex_terminator(a,'T');
  2107  0DB8  3054               	movlw	84
  2108  0DB9  00E5               	movwf	??_time_settings
  2109  0DBA  0865               	movf	??_time_settings,w
  2110  0DBB  00F0               	movwf	time_date_hex_terminator@limiter
  2111  0DBC  084A               	movf	_a,w
  2112  0DBD  160A  118A  22A7  120A  158A  	fcall	_time_date_hex_terminator
  2113  0DC2  00E6               	movwf	??_time_settings+1
  2114  0DC3  0866               	movf	??_time_settings+1,w
  2115  0DC4  00CA               	movwf	_a
  2116                           
  2117                           ;Button_src.c: 313:                     if(y == 2 && x == 4){
  2118  0DC5  3002               	movlw	2
  2119  0DC6  062A               	xorwf	_y,w
  2120  0DC7  042B               	iorwf	_y+1,w
  2121  0DC8  1D03               	btfss	3,2
  2122  0DC9  2DD3               	goto	l4573
  2123  0DCA  3004               	movlw	4
  2124  0DCB  062C               	xorwf	_x,w
  2125  0DCC  042D               	iorwf	_x+1,w
  2126  0DCD  1D03               	btfss	3,2
  2127  0DCE  2DD3               	goto	l4573
  2128                           
  2129                           ;Button_src.c: 314:                         x = 0;
  2130  0DCF  01AC               	clrf	_x
  2131  0DD0  01AD               	clrf	_x+1
  2132                           
  2133                           ;Button_src.c: 315:                         y = 0;
  2134  0DD1  01AA               	clrf	_y
  2135  0DD2  01AB               	clrf	_y+1
  2136  0DD3                     l4573:	
  2137                           
  2138                           ;Button_src.c: 317:                     button_delay();
  2139  0DD3  160A  118A  22E9  120A  158A  	fcall	_button_delay
  2140  0DD8                     l4575:	
  2141                           
  2142                           ;Button_src.c: 319:             if(RC7==0 && b == 'y'){
  2143  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  2144  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  2145  0DDA  1B87               	btfsc	7,7	;volatile
  2146  0DDB  2E3F               	goto	l4607
  2147  0DDC  3079               	movlw	121
  2148  0DDD  0649               	xorwf	_b,w
  2149  0DDE  1D03               	btfss	3,2
  2150  0DDF  2E3F               	goto	l4607
  2151                           
  2152                           ;Button_src.c: 320:                  if(stats == 1)
  2153  0DE0  0322               	decf	_stats,w
  2154  0DE1  0423               	iorwf	_stats+1,w
  2155  0DE2  1D03               	btfss	3,2
  2156  0DE3  2DE8               	goto	l752
  2157                           
  2158                           ;Button_src.c: 321:                    c++;
  2159  0DE4  3001               	movlw	1
  2160  0DE5  00E5               	movwf	??_time_settings
  2161  0DE6  0865               	movf	??_time_settings,w
  2162  0DE7  07C8               	addwf	_c,f
  2163  0DE8                     l752:	
  2164                           
  2165                           ;Button_src.c: 322:                 if(stats == 0){
  2166  0DE8  0822               	movf	_stats,w
  2167  0DE9  0423               	iorwf	_stats+1,w
  2168  0DEA  1D03               	btfss	3,2
  2169  0DEB  2DF0               	goto	l753
  2170                           
  2171                           ;Button_src.c: 323:                     stats = 1;
  2172  0DEC  3001               	movlw	1
  2173  0DED  00A2               	movwf	_stats
  2174  0DEE  3000               	movlw	0
  2175  0DEF  00A3               	movwf	_stats+1
  2176  0DF0                     l753:	
  2177                           ;Button_src.c: 324:                 }
  2178                           
  2179                           
  2180                           ;Button_src.c: 326:                     t++;
  2181  0DF0  3001               	movlw	1
  2182  0DF1  07B0               	addwf	_t,f
  2183  0DF2  1803               	skipnc
  2184  0DF3  0AB1               	incf	_t+1,f
  2185  0DF4  3000               	movlw	0
  2186  0DF5  07B1               	addwf	_t+1,f
  2187                           
  2188                           ;Button_src.c: 327:                     t = modulus_func(t,10);
  2189  0DF6  0831               	movf	_t+1,w
  2190  0DF7  00F8               	movwf	modulus_func@x+1
  2191  0DF8  0830               	movf	_t,w
  2192  0DF9  00F7               	movwf	modulus_func@x
  2193  0DFA  300A               	movlw	10
  2194  0DFB  00F9               	movwf	modulus_func@y
  2195  0DFC  3000               	movlw	0
  2196  0DFD  00FA               	movwf	modulus_func@y+1
  2197  0DFE  160A  118A  22C5  120A  158A  	fcall	_modulus_func
  2198  0E03  0878               	movf	?_modulus_func+1,w
  2199  0E04  00B1               	movwf	_t+1
  2200  0E05  0877               	movf	?_modulus_func,w
  2201  0E06  00B0               	movwf	_t
  2202                           
  2203                           ;Button_src.c: 328:                       if (p == 1){
  2204  0E07  0320               	decf	_p,w
  2205  0E08  0421               	iorwf	_p+1,w
  2206  0E09  1D03               	btfss	3,2
  2207  0E0A  2E24               	goto	l4593
  2208                           
  2209                           ;Button_src.c: 329:                         w = incrementor(w,t,'0');
  2210  0E0B  082F               	movf	_w+1,w
  2211  0E0C  00E1               	movwf	incrementor@upper_val+1
  2212  0E0D  082E               	movf	_w,w
  2213  0E0E  00E0               	movwf	incrementor@upper_val
  2214  0E0F  0831               	movf	_t+1,w
  2215  0E10  00E3               	movwf	incrementor@lower_val+1
  2216  0E11  0830               	movf	_t,w
  2217  0E12  00E2               	movwf	incrementor@lower_val
  2218  0E13  3030               	movlw	48
  2219  0E14  00E5               	movwf	??_time_settings
  2220  0E15  0865               	movf	??_time_settings,w
  2221  0E16  00E4               	movwf	incrementor@z
  2222  0E17  160A  118A  23F8  120A  158A  	fcall	_incrementor
  2223  0E1C  00E6               	movwf	??_time_settings+1
  2224  0E1D  01E7               	clrf	??_time_settings+2
  2225  0E1E  0866               	movf	??_time_settings+1,w
  2226  0E1F  00AE               	movwf	_w
  2227  0E20  0867               	movf	??_time_settings+2,w
  2228  0E21  00AF               	movwf	_w+1
  2229                           
  2230                           ;Button_src.c: 330:                         p = 0;
  2231  0E22  01A0               	clrf	_p
  2232  0E23  01A1               	clrf	_p+1
  2233  0E24                     l4593:	
  2234                           
  2235                           ;Button_src.c: 332:                     if (t == 9){
  2236  0E24  3009               	movlw	9
  2237  0E25  0630               	xorwf	_t,w
  2238  0E26  0431               	iorwf	_t+1,w
  2239  0E27  1D03               	btfss	3,2
  2240  0E28  2E2D               	goto	l4597
  2241                           
  2242                           ;Button_src.c: 333:                         p = 1;
  2243  0E29  3001               	movlw	1
  2244  0E2A  00A0               	movwf	_p
  2245  0E2B  3000               	movlw	0
  2246  0E2C  00A1               	movwf	_p+1
  2247  0E2D                     l4597:	
  2248                           
  2249                           ;Button_src.c: 336:                     if(c == (0x59 + 1)){
  2250  0E2D  305A               	movlw	90
  2251  0E2E  0648               	xorwf	_c,w
  2252  0E2F  1903               	btfsc	3,2
  2253                           
  2254                           ;Button_src.c: 337:                         c = 0x00;
  2255  0E30  01C8               	clrf	_c
  2256                           
  2257                           ;Button_src.c: 339:                     if(w == 6){
  2258  0E31  3006               	movlw	6
  2259  0E32  062E               	xorwf	_w,w
  2260  0E33  042F               	iorwf	_w+1,w
  2261  0E34  1D03               	btfss	3,2
  2262  0E35  2E3A               	goto	l4605
  2263                           
  2264                           ;Button_src.c: 340:                         w = 0;
  2265  0E36  01AE               	clrf	_w
  2266  0E37  01AF               	clrf	_w+1
  2267                           
  2268                           ;Button_src.c: 341:                         t = 0;
  2269  0E38  01B0               	clrf	_t
  2270  0E39  01B1               	clrf	_t+1
  2271  0E3A                     l4605:	
  2272                           
  2273                           ;Button_src.c: 343:                     button_delay();
  2274  0E3A  160A  118A  22E9  120A  158A  	fcall	_button_delay
  2275  0E3F                     l4607:	
  2276                           
  2277                           ;Button_src.c: 346:              write_cmd(0x88);
  2278  0E3F  3088               	movlw	136
  2279  0E40  160A  118A  233C  120A  158A  	fcall	_write_cmd
  2280                           
  2281                           ;Button_src.c: 347:               if(stats==0){
  2282  0E45  0822               	movf	_stats,w
  2283  0E46  0423               	iorwf	_stats+1,w
  2284  0E47  1D03               	btfss	3,2
  2285  0E48  2E51               	goto	l4613
  2286                           
  2287                           ;Button_src.c: 348:                   table[2] = prev_hex_hours;
  2288  0E49  0842               	movf	_prev_hex_hours,w
  2289  0E4A  00E5               	movwf	??_time_settings
  2290  0E4B  0865               	movf	??_time_settings,w
  2291  0E4C  1683               	bsf	3,5	;RP0=1, select bank1
  2292  0E4D  00B5               	movwf	(_table^(0+128)+2)
  2293                           
  2294                           ;Button_src.c: 349:                   table[1] = prev_hex_mins;
  2295  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0E4F  0841               	movf	_prev_hex_mins,w
  2297  0E50  2E5C               	goto	L1
  2298  0E51                     l4613:	
  2299                           ;Button_src.c: 350:               }
  2300                           
  2301  0E51  0322               	decf	_stats,w
  2302  0E52  0423               	iorwf	_stats+1,w
  2303  0E53  1D03               	btfss	3,2
  2304  0E54  2E60               	goto	l4617
  2305                           
  2306                           ;Button_src.c: 352:               {;Button_src.c: 353:                  table[2]= a;
  2307  0E55  084A               	movf	_a,w
  2308  0E56  00E5               	movwf	??_time_settings
  2309  0E57  0865               	movf	??_time_settings,w
  2310  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  2311  0E59  00B5               	movwf	(_table^(0+128)+2)
  2312                           
  2313                           ;Button_src.c: 354:                  table[1] = c;
  2314  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0E5B  0848               	movf	_c,w
  2316  0E5C                     L1:	
  2317  0E5C  00E5               	movwf	??_time_settings
  2318  0E5D  0865               	movf	??_time_settings,w
  2319  0E5E  1683               	bsf	3,5	;RP0=1, select bank1
  2320  0E5F  00B4               	movwf	(_table^(0+128)+1)
  2321  0E60                     l4617:	
  2322                           
  2323                           ;Button_src.c: 358:                     a = time_date_delimiter(a,0x11,'9',4);
  2324  0E60  3011               	movlw	17
  2325  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  2326  0E62  00E5               	movwf	??_time_settings
  2327  0E63  0865               	movf	??_time_settings,w
  2328  0E64  00F0               	movwf	time_date_delimiter@hex
  2329  0E65  3039               	movlw	57
  2330  0E66  00E6               	movwf	??_time_settings+1
  2331  0E67  0866               	movf	??_time_settings+1,w
  2332  0E68  00F1               	movwf	time_date_delimiter@limiter
  2333  0E69  3004               	movlw	4
  2334  0E6A  00F2               	movwf	time_date_delimiter@type
  2335  0E6B  3000               	movlw	0
  2336  0E6C  00F3               	movwf	time_date_delimiter@type+1
  2337  0E6D  084A               	movf	_a,w
  2338  0E6E  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2339  0E73  00E7               	movwf	??_time_settings+2
  2340  0E74  0867               	movf	??_time_settings+2,w
  2341  0E75  00CA               	movwf	_a
  2342                           
  2343                           ;Button_src.c: 359:                     a = time_date_delimiter(a,0x21,'J',4);
  2344  0E76  3021               	movlw	33
  2345  0E77  00E5               	movwf	??_time_settings
  2346  0E78  0865               	movf	??_time_settings,w
  2347  0E79  00F0               	movwf	time_date_delimiter@hex
  2348  0E7A  304A               	movlw	74
  2349  0E7B  00E6               	movwf	??_time_settings+1
  2350  0E7C  0866               	movf	??_time_settings+1,w
  2351  0E7D  00F1               	movwf	time_date_delimiter@limiter
  2352  0E7E  3004               	movlw	4
  2353  0E7F  00F2               	movwf	time_date_delimiter@type
  2354  0E80  3000               	movlw	0
  2355  0E81  00F3               	movwf	time_date_delimiter@type+1
  2356  0E82  084A               	movf	_a,w
  2357  0E83  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2358  0E88  00E7               	movwf	??_time_settings+2
  2359  0E89  0867               	movf	??_time_settings+2,w
  2360  0E8A  00CA               	movwf	_a
  2361                           
  2362                           ;Button_src.c: 361:                     c = time_date_delimiter(c,0x11,'9',5);
  2363  0E8B  3011               	movlw	17
  2364  0E8C  00E5               	movwf	??_time_settings
  2365  0E8D  0865               	movf	??_time_settings,w
  2366  0E8E  00F0               	movwf	time_date_delimiter@hex
  2367  0E8F  3039               	movlw	57
  2368  0E90  00E6               	movwf	??_time_settings+1
  2369  0E91  0866               	movf	??_time_settings+1,w
  2370  0E92  00F1               	movwf	time_date_delimiter@limiter
  2371  0E93  3005               	movlw	5
  2372  0E94  00F2               	movwf	time_date_delimiter@type
  2373  0E95  3000               	movlw	0
  2374  0E96  00F3               	movwf	time_date_delimiter@type+1
  2375  0E97  0848               	movf	_c,w
  2376  0E98  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2377  0E9D  00E7               	movwf	??_time_settings+2
  2378  0E9E  0867               	movf	??_time_settings+2,w
  2379  0E9F  00C8               	movwf	_c
  2380                           
  2381                           ;Button_src.c: 362:                     c = time_date_delimiter(c,0x21,'J',5);
  2382  0EA0  3021               	movlw	33
  2383  0EA1  00E5               	movwf	??_time_settings
  2384  0EA2  0865               	movf	??_time_settings,w
  2385  0EA3  00F0               	movwf	time_date_delimiter@hex
  2386  0EA4  304A               	movlw	74
  2387  0EA5  00E6               	movwf	??_time_settings+1
  2388  0EA6  0866               	movf	??_time_settings+1,w
  2389  0EA7  00F1               	movwf	time_date_delimiter@limiter
  2390  0EA8  3005               	movlw	5
  2391  0EA9  00F2               	movwf	time_date_delimiter@type
  2392  0EAA  3000               	movlw	0
  2393  0EAB  00F3               	movwf	time_date_delimiter@type+1
  2394  0EAC  0848               	movf	_c,w
  2395  0EAD  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2396  0EB2  00E7               	movwf	??_time_settings+2
  2397  0EB3  0867               	movf	??_time_settings+2,w
  2398  0EB4  00C8               	movwf	_c
  2399                           
  2400                           ;Button_src.c: 363:                     c = time_date_delimiter(c,0x31,'Y',5);
  2401  0EB5  3031               	movlw	49
  2402  0EB6  00E5               	movwf	??_time_settings
  2403  0EB7  0865               	movf	??_time_settings,w
  2404  0EB8  00F0               	movwf	time_date_delimiter@hex
  2405  0EB9  3059               	movlw	89
  2406  0EBA  00E6               	movwf	??_time_settings+1
  2407  0EBB  0866               	movf	??_time_settings+1,w
  2408  0EBC  00F1               	movwf	time_date_delimiter@limiter
  2409  0EBD  3005               	movlw	5
  2410  0EBE  00F2               	movwf	time_date_delimiter@type
  2411  0EBF  3000               	movlw	0
  2412  0EC0  00F3               	movwf	time_date_delimiter@type+1
  2413  0EC1  0848               	movf	_c,w
  2414  0EC2  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2415  0EC7  00E7               	movwf	??_time_settings+2
  2416  0EC8  0867               	movf	??_time_settings+2,w
  2417  0EC9  00C8               	movwf	_c
  2418                           
  2419                           ;Button_src.c: 364:                     c = time_date_delimiter(c,0x41,'j',5);
  2420  0ECA  3041               	movlw	65
  2421  0ECB  00E5               	movwf	??_time_settings
  2422  0ECC  0865               	movf	??_time_settings,w
  2423  0ECD  00F0               	movwf	time_date_delimiter@hex
  2424  0ECE  306A               	movlw	106
  2425  0ECF  00E6               	movwf	??_time_settings+1
  2426  0ED0  0866               	movf	??_time_settings+1,w
  2427  0ED1  00F1               	movwf	time_date_delimiter@limiter
  2428  0ED2  3005               	movlw	5
  2429  0ED3  00F2               	movwf	time_date_delimiter@type
  2430  0ED4  3000               	movlw	0
  2431  0ED5  00F3               	movwf	time_date_delimiter@type+1
  2432  0ED6  0848               	movf	_c,w
  2433  0ED7  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2434  0EDC  00E7               	movwf	??_time_settings+2
  2435  0EDD  0867               	movf	??_time_settings+2,w
  2436  0EDE  00C8               	movwf	_c
  2437                           
  2438                           ;Button_src.c: 365:                     c = time_date_delimiter(c,0x51,'z',5);
  2439  0EDF  3051               	movlw	81
  2440  0EE0  00E5               	movwf	??_time_settings
  2441  0EE1  0865               	movf	??_time_settings,w
  2442  0EE2  00F0               	movwf	time_date_delimiter@hex
  2443  0EE3  307A               	movlw	122
  2444  0EE4  00E6               	movwf	??_time_settings+1
  2445  0EE5  0866               	movf	??_time_settings+1,w
  2446  0EE6  00F1               	movwf	time_date_delimiter@limiter
  2447  0EE7  3005               	movlw	5
  2448  0EE8  00F2               	movwf	time_date_delimiter@type
  2449  0EE9  3000               	movlw	0
  2450  0EEA  00F3               	movwf	time_date_delimiter@type+1
  2451  0EEB  0848               	movf	_c,w
  2452  0EEC  120A  158A  21BE  120A  158A  	fcall	_time_date_delimiter
  2453  0EF1  00E7               	movwf	??_time_settings+2
  2454  0EF2  0867               	movf	??_time_settings+2,w
  2455  0EF3  00C8               	movwf	_c
  2456                           
  2457                           ;Button_src.c: 367:                   RC0 = 0;
  2458  0EF4  1007               	bcf	7,0	;volatile
  2459                           
  2460                           ;Button_src.c: 368:                   RC1 = 1;
  2461  0EF5  1487               	bsf	7,1	;volatile
  2462                           
  2463                           ;Button_src.c: 369:                   RC2 = 1;
  2464  0EF6  1507               	bsf	7,2	;volatile
  2465                           
  2466                           ;Button_src.c: 370:                   RC3 = 1;
  2467  0EF7  1587               	bsf	7,3	;volatile
  2468                           
  2469                           ;Button_src.c: 371:                     if (RC6 == 0 ){
  2470  0EF8  1B07               	btfsc	7,6	;volatile
  2471  0EF9  2F0E               	goto	l761
  2472                           
  2473                           ;Button_src.c: 372:                           write_cmd(0x1);
  2474  0EFA  3001               	movlw	1
  2475  0EFB  160A  118A  233C  120A  158A  	fcall	_write_cmd
  2476                           
  2477                           ;Button_src.c: 373:                           set_time();
  2478  0F00  160A  118A  2442   	fcall	_set_time
  2479                           
  2480                           ;Button_src.c: 374:                           a = 0x00;
  2481  0F03  01CA               	clrf	_a
  2482                           
  2483                           ;Button_src.c: 375:                           c = 0x00;
  2484  0F04  01C8               	clrf	_c
  2485                           
  2486                           ;Button_src.c: 376:                           x = 0;
  2487  0F05  01AC               	clrf	_x
  2488  0F06  01AD               	clrf	_x+1
  2489                           
  2490                           ;Button_src.c: 377:                           y = 0;
  2491  0F07  01AA               	clrf	_y
  2492  0F08  01AB               	clrf	_y+1
  2493                           
  2494                           ;Button_src.c: 378:                           w = 0;
  2495  0F09  01AE               	clrf	_w
  2496  0F0A  01AF               	clrf	_w+1
  2497                           
  2498                           ;Button_src.c: 379:                           t = 0;
  2499  0F0B  01B0               	clrf	_t
  2500  0F0C  01B1               	clrf	_t+1
  2501  0F0D  0008               	return
  2502  0F0E                     l761:	
  2503                           ;Button_src.c: 382:                             }
  2504                           
  2505                           
  2506                           ;Button_src.c: 383:                   RC0 = 1;
  2507  0F0E  1407               	bsf	7,0	;volatile
  2508                           
  2509                           ;Button_src.c: 384:                   RC1 = 1;
  2510  0F0F  1487               	bsf	7,1	;volatile
  2511                           
  2512                           ;Button_src.c: 385:                   RC2 = 0;
  2513  0F10  1107               	bcf	7,2	;volatile
  2514                           
  2515                           ;Button_src.c: 386:                   RC3 = 1;
  2516  0F11  1587               	bsf	7,3	;volatile
  2517                           
  2518                           ;Button_src.c: 387:                   z = modulus_func(z,2);
  2519  0F12  0829               	movf	_z+1,w
  2520  0F13  00F8               	movwf	modulus_func@x+1
  2521  0F14  0828               	movf	_z,w
  2522  0F15  00F7               	movwf	modulus_func@x
  2523  0F16  3002               	movlw	2
  2524  0F17  00F9               	movwf	modulus_func@y
  2525  0F18  3000               	movlw	0
  2526  0F19  00FA               	movwf	modulus_func@y+1
  2527  0F1A  160A  118A  22C5  120A  158A  	fcall	_modulus_func
  2528  0F1F  0878               	movf	?_modulus_func+1,w
  2529  0F20  00A9               	movwf	_z+1
  2530  0F21  0877               	movf	?_modulus_func,w
  2531  0F22  00A8               	movwf	_z
  2532                           
  2533                           ;Button_src.c: 388:                   if(RC4 == 0 && z ==0){
  2534  0F23  1A07               	btfsc	7,4	;volatile
  2535  0F24  2F5E               	goto	l4671
  2536  0F25  0828               	movf	_z,w
  2537  0F26  0429               	iorwf	_z+1,w
  2538  0F27  1D03               	btfss	3,2
  2539  0F28  2F5E               	goto	l4671
  2540                           
  2541                           ;Button_src.c: 389:                       write_cmd(0x90);
  2542  0F29  3090               	movlw	144
  2543  0F2A  160A  118A  233C  120A  158A  	fcall	_write_cmd
  2544                           
  2545                           ;Button_src.c: 390:                       write_char('H');
  2546  0F2F  3048               	movlw	72
  2547  0F30  160A  118A  2325  120A  158A  	fcall	_write_char
  2548                           
  2549                           ;Button_src.c: 391:                       write_char('o');
  2550  0F35  306F               	movlw	111
  2551  0F36  160A  118A  2325  120A  158A  	fcall	_write_char
  2552                           
  2553                           ;Button_src.c: 392:                       write_char('u');
  2554  0F3B  3075               	movlw	117
  2555  0F3C  160A  118A  2325  120A  158A  	fcall	_write_char
  2556                           
  2557                           ;Button_src.c: 393:                       write_char('r');
  2558  0F41  3072               	movlw	114
  2559  0F42  160A  118A  2325  120A  158A  	fcall	_write_char
  2560                           
  2561                           ;Button_src.c: 394:                       write_char(':');
  2562  0F47  303A               	movlw	58
  2563  0F48  160A  118A  2325  120A  158A  	fcall	_write_char
  2564                           
  2565                           ;Button_src.c: 395:                       b = 'x';
  2566  0F4D  3078               	movlw	120
  2567  0F4E  00E5               	movwf	??_time_settings
  2568  0F4F  0865               	movf	??_time_settings,w
  2569  0F50  00C9               	movwf	_b
  2570                           
  2571                           ;Button_src.c: 396:                       button_delay();
  2572  0F51  160A  118A  22E9  120A  158A  	fcall	_button_delay
  2573                           
  2574                           ;Button_src.c: 397:                       z++;
  2575  0F56  3001               	movlw	1
  2576  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  2577  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  2578  0F59  07A8               	addwf	_z,f
  2579  0F5A  1803               	skipnc
  2580  0F5B  0AA9               	incf	_z+1,f
  2581  0F5C  3000               	movlw	0
  2582  0F5D  07A9               	addwf	_z+1,f
  2583  0F5E                     l4671:	
  2584                           
  2585                           ;Button_src.c: 399:                   RC0 = 1;
  2586  0F5E  1407               	bsf	7,0	;volatile
  2587                           
  2588                           ;Button_src.c: 400:                   RC1 = 1;
  2589  0F5F  1487               	bsf	7,1	;volatile
  2590                           
  2591                           ;Button_src.c: 401:                   RC2 = 0;
  2592  0F60  1107               	bcf	7,2	;volatile
  2593                           
  2594                           ;Button_src.c: 402:                   RC3 = 1;
  2595  0F61  1587               	bsf	7,3	;volatile
  2596                           
  2597                           ;Button_src.c: 404:                   if(RC4 == 0&& z ==1){
  2598  0F62  1A07               	btfsc	7,4	;volatile
  2599  0F63  2F9B               	goto	l764
  2600  0F64  0328               	decf	_z,w
  2601  0F65  0429               	iorwf	_z+1,w
  2602  0F66  1D03               	btfss	3,2
  2603  0F67  2F9B               	goto	l764
  2604                           
  2605                           ;Button_src.c: 405:                     z++;
  2606  0F68  3001               	movlw	1
  2607  0F69  07A8               	addwf	_z,f
  2608  0F6A  1803               	skipnc
  2609  0F6B  0AA9               	incf	_z+1,f
  2610  0F6C  3000               	movlw	0
  2611  0F6D  07A9               	addwf	_z+1,f
  2612                           
  2613                           ;Button_src.c: 406:                     button_delay();
  2614  0F6E  160A  118A  22E9  120A  158A  	fcall	_button_delay
  2615                           
  2616                           ;Button_src.c: 407:                     write_cmd(0x90);
  2617  0F73  3090               	movlw	144
  2618  0F74  160A  118A  233C  120A  158A  	fcall	_write_cmd
  2619                           
  2620                           ;Button_src.c: 408:                     write_char('M');
  2621  0F79  304D               	movlw	77
  2622  0F7A  160A  118A  2325  120A  158A  	fcall	_write_char
  2623                           
  2624                           ;Button_src.c: 409:                     write_char('i');
  2625  0F7F  3069               	movlw	105
  2626  0F80  160A  118A  2325  120A  158A  	fcall	_write_char
  2627                           
  2628                           ;Button_src.c: 410:                     write_char('n');
  2629  0F85  306E               	movlw	110
  2630  0F86  160A  118A  2325  120A  158A  	fcall	_write_char
  2631                           
  2632                           ;Button_src.c: 411:                     write_char('s');
  2633  0F8B  3073               	movlw	115
  2634  0F8C  160A  118A  2325  120A  158A  	fcall	_write_char
  2635                           
  2636                           ;Button_src.c: 412:                     write_char(':');
  2637  0F91  303A               	movlw	58
  2638  0F92  160A  118A  2325  120A  158A  	fcall	_write_char
  2639                           
  2640                           ;Button_src.c: 413:                     b = 'y';
  2641  0F97  3079               	movlw	121
  2642  0F98  00E5               	movwf	??_time_settings
  2643  0F99  0865               	movf	??_time_settings,w
  2644  0F9A  00C9               	movwf	_b
  2645  0F9B                     l764:	
  2646                           ;Button_src.c: 414:                   }
  2647                           
  2648                           
  2649                           ;Button_src.c: 415:                    write_cmd(0x88);
  2650  0F9B  3088               	movlw	136
  2651  0F9C  160A  118A  233C  120A  158A  	fcall	_write_cmd
  2652                           
  2653                           ;Button_src.c: 419:                   RC0 = 1;
  2654  0FA1  1407               	bsf	7,0	;volatile
  2655                           
  2656                           ;Button_src.c: 420:                   RC1 = 1;
  2657  0FA2  1487               	bsf	7,1	;volatile
  2658                           
  2659                           ;Button_src.c: 421:                   RC2 = 0;
  2660  0FA3  1107               	bcf	7,2	;volatile
  2661                           
  2662                           ;Button_src.c: 422:                   RC3 = 1;
  2663  0FA4  1587               	bsf	7,3	;volatile
  2664                           
  2665                           ;Button_src.c: 424:              write_cmd(0x88);
  2666  0FA5  3088               	movlw	136
  2667  0FA6  160A  118A  233C  120A  158A  	fcall	_write_cmd
  2668                           
  2669                           ;Button_src.c: 425:              write_char('T');
  2670  0FAB  3054               	movlw	84
  2671  0FAC  160A  118A  2325  120A  158A  	fcall	_write_char
  2672                           
  2673                           ;Button_src.c: 426:              write_char('i');
  2674  0FB1  3069               	movlw	105
  2675  0FB2  160A  118A  2325  120A  158A  	fcall	_write_char
  2676                           
  2677                           ;Button_src.c: 427:              write_char('m');
  2678  0FB7  306D               	movlw	109
  2679  0FB8  160A  118A  2325  120A  158A  	fcall	_write_char
  2680                           
  2681                           ;Button_src.c: 428:              write_char('e');
  2682  0FBD  3065               	movlw	101
  2683  0FBE  160A  118A  2325  120A  158A  	fcall	_write_char
  2684                           
  2685                           ;Button_src.c: 429:              write_char(':');
  2686  0FC3  303A               	movlw	58
  2687  0FC4  160A  118A  2325  120A  158A  	fcall	_write_char
  2688                           
  2689                           ;Button_src.c: 430:              write_char(y + '0');
  2690  0FC9  082A               	movf	_y,w
  2691  0FCA  3E30               	addlw	48
  2692  0FCB  160A  118A  2325  120A  158A  	fcall	_write_char
  2693                           
  2694                           ;Button_src.c: 431:              write_char(x + '0');
  2695  0FD0  082C               	movf	_x,w
  2696  0FD1  3E30               	addlw	48
  2697  0FD2  160A  118A  2325  120A  158A  	fcall	_write_char
  2698                           
  2699                           ;Button_src.c: 432:              write_char(':');
  2700  0FD7  303A               	movlw	58
  2701  0FD8  160A  118A  2325  120A  158A  	fcall	_write_char
  2702                           
  2703                           ;Button_src.c: 433:              write_char(w + '0');
  2704  0FDD  082E               	movf	_w,w
  2705  0FDE  3E30               	addlw	48
  2706  0FDF  160A  118A  2325  120A  158A  	fcall	_write_char
  2707                           
  2708                           ;Button_src.c: 434:              write_char(t + '0');
  2709  0FE4  0830               	movf	_t,w
  2710  0FE5  3E30               	addlw	48
  2711  0FE6  160A  118A  2325  120A  158A  	fcall	_write_char
  2712                           
  2713                           ;Button_src.c: 436:             RC0 = 0;
  2714  0FEB  1007               	bcf	7,0	;volatile
  2715                           
  2716                           ;Button_src.c: 437:             RC1 = 1;
  2717  0FEC  1487               	bsf	7,1	;volatile
  2718                           
  2719                           ;Button_src.c: 438:             RC2 = 1;
  2720  0FED  1507               	bsf	7,2	;volatile
  2721                           
  2722                           ;Button_src.c: 439:             RC3 = 1;
  2723  0FEE  1587               	bsf	7,3	;volatile
  2724                           
  2725                           ;Button_src.c: 440:             if (RC7 == 0 ){
  2726  0FEF  1B87               	btfsc	7,7	;volatile
  2727  0FF0  2D0D               	goto	l744
  2728                           
  2729                           ;Button_src.c: 441:             a = 0x00;
  2730  0FF1  01CA               	clrf	_a
  2731                           
  2732                           ;Button_src.c: 442:             c = 0x00;
  2733  0FF2  01C8               	clrf	_c
  2734                           
  2735                           ;Button_src.c: 443:             x = 0;
  2736  0FF3  01AC               	clrf	_x
  2737  0FF4  01AD               	clrf	_x+1
  2738                           
  2739                           ;Button_src.c: 444:             y = 0;
  2740  0FF5  01AA               	clrf	_y
  2741  0FF6  01AB               	clrf	_y+1
  2742                           
  2743                           ;Button_src.c: 445:             w = 0;
  2744  0FF7  01AE               	clrf	_w
  2745  0FF8  01AF               	clrf	_w+1
  2746                           
  2747                           ;Button_src.c: 446:             t = 0;
  2748  0FF9  01B0               	clrf	_t
  2749  0FFA  01B1               	clrf	_t+1
  2750                           
  2751                           ;Button_src.c: 447:             write_cmd(0x1);
  2752  0FFB  3001               	movlw	1
  2753  0FFC  160A  118A  233C   	fcall	_write_cmd
  2754                           
  2755                           ;Button_src.c: 448:             break;
  2756  0FFF  0008               	return
  2757  1000                     __end_of_time_settings:	
  2758                           
  2759                           	psect	text2
  2760  0066                     __ptext2:	
  2761 ;; *************** function _thermometer_threshhold_settings *****************
  2762 ;; Defined at:
  2763 ;;		line 23 in file "Button_src.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 300/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2777 ;;      Params:         0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0
  2779 ;;      Temps:          0       3       0       0       0
  2780 ;;      Totals:         0       3       0       0       0
  2781 ;;Total ram usage:        3 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    3
  2784 ;; This function calls:
  2785 ;;		_button_delay
  2786 ;;		_incrementor
  2787 ;;		_modulus_func
  2788 ;;		_time_date_hex_terminator
  2789 ;;		_write_char
  2790 ;;		_write_cmd
  2791 ;; This function is called by:
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _thermometer_threshhold_settings
  2798  0066                     _thermometer_threshhold_settings:	
  2799                           
  2800                           ;Button_src.c: 24:  RC0 = 1;
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2804  0066  1407               	bsf	7,0	;volatile
  2805                           
  2806                           ;Button_src.c: 25:  RC1 = 0;
  2807  0067  1087               	bcf	7,1	;volatile
  2808                           
  2809                           ;Button_src.c: 26:  RC2 = 1;
  2810  0068  1507               	bsf	7,2	;volatile
  2811                           
  2812                           ;Button_src.c: 27:  RC3 = 1;
  2813  0069  1587               	bsf	7,3	;volatile
  2814                           
  2815                           ;Button_src.c: 28:   if (RC4 == 0){
  2816  006A  1A07               	btfsc	7,4	;volatile
  2817  006B  0008               	return
  2818                           
  2819                           ;Button_src.c: 29:       write_cmd(0x1);
  2820  006C  3001               	movlw	1
  2821  006D  160A  118A  233C  120A  118A  	fcall	_write_cmd
  2822  0072                     l729:	
  2823                           ;Button_src.c: 30:       for(;;){
  2824                           
  2825                           
  2826                           ;Button_src.c: 31:             write_cmd(0x80);
  2827  0072  3080               	movlw	128
  2828  0073  160A  118A  233C  120A  118A  	fcall	_write_cmd
  2829                           
  2830                           ;Button_src.c: 32:             write_char(' ');
  2831  0078  3020               	movlw	32
  2832  0079  160A  118A  2325  120A  118A  	fcall	_write_char
  2833                           
  2834                           ;Button_src.c: 33:             write_char(' ');
  2835  007E  3020               	movlw	32
  2836  007F  160A  118A  2325  120A  118A  	fcall	_write_char
  2837                           
  2838                           ;Button_src.c: 34:             write_char(' ');
  2839  0084  3020               	movlw	32
  2840  0085  160A  118A  2325  120A  118A  	fcall	_write_char
  2841                           
  2842                           ;Button_src.c: 35:             write_char(' ');
  2843  008A  3020               	movlw	32
  2844  008B  160A  118A  2325  120A  118A  	fcall	_write_char
  2845                           
  2846                           ;Button_src.c: 36:             write_char(' ');
  2847  0090  3020               	movlw	32
  2848  0091  160A  118A  2325  120A  118A  	fcall	_write_char
  2849                           
  2850                           ;Button_src.c: 37:             write_char(' ');
  2851  0096  3020               	movlw	32
  2852  0097  160A  118A  2325  120A  118A  	fcall	_write_char
  2853                           
  2854                           ;Button_src.c: 38:             write_char(' ');
  2855  009C  3020               	movlw	32
  2856  009D  160A  118A  2325  120A  118A  	fcall	_write_char
  2857                           
  2858                           ;Button_src.c: 39:             write_char(' ');
  2859  00A2  3020               	movlw	32
  2860  00A3  160A  118A  2325  120A  118A  	fcall	_write_char
  2861                           
  2862                           ;Button_src.c: 40:             write_char(' ');
  2863  00A8  3020               	movlw	32
  2864  00A9  160A  118A  2325  120A  118A  	fcall	_write_char
  2865                           
  2866                           ;Button_src.c: 42:             write_cmd(0x90);
  2867  00AE  3090               	movlw	144
  2868  00AF  160A  118A  233C  120A  118A  	fcall	_write_cmd
  2869                           
  2870                           ;Button_src.c: 43:             write_char('T');
  2871  00B4  3054               	movlw	84
  2872  00B5  160A  118A  2325  120A  118A  	fcall	_write_char
  2873                           
  2874                           ;Button_src.c: 44:             write_char('h');
  2875  00BA  3068               	movlw	104
  2876  00BB  160A  118A  2325  120A  118A  	fcall	_write_char
  2877                           
  2878                           ;Button_src.c: 45:             write_char('r');
  2879  00C0  3072               	movlw	114
  2880  00C1  160A  118A  2325  120A  118A  	fcall	_write_char
  2881                           
  2882                           ;Button_src.c: 46:             write_char('e');
  2883  00C6  3065               	movlw	101
  2884  00C7  160A  118A  2325  120A  118A  	fcall	_write_char
  2885                           
  2886                           ;Button_src.c: 47:             write_char('s');
  2887  00CC  3073               	movlw	115
  2888  00CD  160A  118A  2325  120A  118A  	fcall	_write_char
  2889                           
  2890                           ;Button_src.c: 48:             write_char('h');
  2891  00D2  3068               	movlw	104
  2892  00D3  160A  118A  2325  120A  118A  	fcall	_write_char
  2893                           
  2894                           ;Button_src.c: 49:             write_char('o');
  2895  00D8  306F               	movlw	111
  2896  00D9  160A  118A  2325  120A  118A  	fcall	_write_char
  2897                           
  2898                           ;Button_src.c: 50:             write_char('l');
  2899  00DE  306C               	movlw	108
  2900  00DF  160A  118A  2325  120A  118A  	fcall	_write_char
  2901                           
  2902                           ;Button_src.c: 51:              write_char('d');
  2903  00E4  3064               	movlw	100
  2904  00E5  160A  118A  2325  120A  118A  	fcall	_write_char
  2905                           
  2906                           ;Button_src.c: 52:               write_char('s');
  2907  00EA  3073               	movlw	115
  2908  00EB  160A  118A  2325  120A  118A  	fcall	_write_char
  2909                           
  2910                           ;Button_src.c: 53:                write_char(':');
  2911  00F0  303A               	movlw	58
  2912  00F1  160A  118A  2325  120A  118A  	fcall	_write_char
  2913                           
  2914                           ;Button_src.c: 59:             RC0 = 1;
  2915  00F6  1407               	bsf	7,0	;volatile
  2916                           
  2917                           ;Button_src.c: 60:             RC1 = 0;
  2918  00F7  1087               	bcf	7,1	;volatile
  2919                           
  2920                           ;Button_src.c: 61:             RC2 = 1;
  2921  00F8  1507               	bsf	7,2	;volatile
  2922                           
  2923                           ;Button_src.c: 62:             RC3 = 1;
  2924  00F9  1587               	bsf	7,3	;volatile
  2925                           
  2926                           ;Button_src.c: 64:             if(RC4 == 0 && b =='x'){
  2927  00FA  1A07               	btfsc	7,4	;volatile
  2928  00FB  2944               	goto	l4061
  2929  00FC  3078               	movlw	120
  2930  00FD  0649               	xorwf	_b,w
  2931  00FE  1D03               	btfss	3,2
  2932  00FF  2944               	goto	l4061
  2933                           
  2934                           ;Button_src.c: 65:                     a++;
  2935  0100  3001               	movlw	1
  2936  0101  00E5               	movwf	??_thermometer_threshhold_settings
  2937  0102  0865               	movf	??_thermometer_threshhold_settings,w
  2938  0103  07CA               	addwf	_a,f
  2939                           
  2940                           ;Button_src.c: 66:                     x++ ;
  2941  0104  3001               	movlw	1
  2942  0105  07AC               	addwf	_x,f
  2943  0106  1803               	skipnc
  2944  0107  0AAD               	incf	_x+1,f
  2945  0108  3000               	movlw	0
  2946  0109  07AD               	addwf	_x+1,f
  2947                           
  2948                           ;Button_src.c: 67:                     x = modulus_func(x,10);
  2949  010A  082D               	movf	_x+1,w
  2950  010B  00F8               	movwf	modulus_func@x+1
  2951  010C  082C               	movf	_x,w
  2952  010D  00F7               	movwf	modulus_func@x
  2953  010E  300A               	movlw	10
  2954  010F  00F9               	movwf	modulus_func@y
  2955  0110  3000               	movlw	0
  2956  0111  00FA               	movwf	modulus_func@y+1
  2957  0112  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  2958  0117  0878               	movf	?_modulus_func+1,w
  2959  0118  00AD               	movwf	_x+1
  2960  0119  0877               	movf	?_modulus_func,w
  2961  011A  00AC               	movwf	_x
  2962                           
  2963                           ;Button_src.c: 68:                     y = incrementor(y,x,'9');
  2964  011B  082B               	movf	_y+1,w
  2965  011C  00E1               	movwf	incrementor@upper_val+1
  2966  011D  082A               	movf	_y,w
  2967  011E  00E0               	movwf	incrementor@upper_val
  2968  011F  082D               	movf	_x+1,w
  2969  0120  00E3               	movwf	incrementor@lower_val+1
  2970  0121  082C               	movf	_x,w
  2971  0122  00E2               	movwf	incrementor@lower_val
  2972  0123  3039               	movlw	57
  2973  0124  00E5               	movwf	??_thermometer_threshhold_settings
  2974  0125  0865               	movf	??_thermometer_threshhold_settings,w
  2975  0126  00E4               	movwf	incrementor@z
  2976  0127  160A  118A  23F8  120A  118A  	fcall	_incrementor
  2977  012C  00E6               	movwf	??_thermometer_threshhold_settings+1
  2978  012D  01E7               	clrf	??_thermometer_threshhold_settings+2
  2979  012E  0866               	movf	??_thermometer_threshhold_settings+1,w
  2980  012F  00AA               	movwf	_y
  2981  0130  0867               	movf	??_thermometer_threshhold_settings+2,w
  2982  0131  00AB               	movwf	_y+1
  2983                           
  2984                           ;Button_src.c: 70:                     a = time_date_hex_terminator(a,'T');
  2985  0132  3054               	movlw	84
  2986  0133  00E5               	movwf	??_thermometer_threshhold_settings
  2987  0134  0865               	movf	??_thermometer_threshhold_settings,w
  2988  0135  00F0               	movwf	time_date_hex_terminator@limiter
  2989  0136  084A               	movf	_a,w
  2990  0137  160A  118A  22A7  120A  118A  	fcall	_time_date_hex_terminator
  2991  013C  00E6               	movwf	??_thermometer_threshhold_settings+1
  2992  013D  0866               	movf	??_thermometer_threshhold_settings+1,w
  2993  013E  00CA               	movwf	_a
  2994                           
  2995                           ;Button_src.c: 71:                     button_delay();
  2996  013F  160A  118A  22E9  120A  118A  	fcall	_button_delay
  2997  0144                     l4061:	
  2998                           
  2999                           ;Button_src.c: 73:             if(RC4==0 && b == 'y'){
  3000  0144  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0145  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0146  1A07               	btfsc	7,4	;volatile
  3003  0147  2987               	goto	l4079
  3004  0148  3079               	movlw	121
  3005  0149  0649               	xorwf	_b,w
  3006  014A  1D03               	btfss	3,2
  3007  014B  2987               	goto	l4079
  3008                           
  3009                           ;Button_src.c: 74:                     c++;
  3010  014C  3001               	movlw	1
  3011  014D  00E5               	movwf	??_thermometer_threshhold_settings
  3012  014E  0865               	movf	??_thermometer_threshhold_settings,w
  3013  014F  07C8               	addwf	_c,f
  3014                           
  3015                           ;Button_src.c: 75:                     t++;
  3016  0150  3001               	movlw	1
  3017  0151  07B0               	addwf	_t,f
  3018  0152  1803               	skipnc
  3019  0153  0AB1               	incf	_t+1,f
  3020  0154  3000               	movlw	0
  3021  0155  07B1               	addwf	_t+1,f
  3022                           
  3023                           ;Button_src.c: 76:                     t = modulus_func(t,10);
  3024  0156  0831               	movf	_t+1,w
  3025  0157  00F8               	movwf	modulus_func@x+1
  3026  0158  0830               	movf	_t,w
  3027  0159  00F7               	movwf	modulus_func@x
  3028  015A  300A               	movlw	10
  3029  015B  00F9               	movwf	modulus_func@y
  3030  015C  3000               	movlw	0
  3031  015D  00FA               	movwf	modulus_func@y+1
  3032  015E  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  3033  0163  0878               	movf	?_modulus_func+1,w
  3034  0164  00B1               	movwf	_t+1
  3035  0165  0877               	movf	?_modulus_func,w
  3036  0166  00B0               	movwf	_t
  3037                           
  3038                           ;Button_src.c: 77:                     w = incrementor(w,t,'9');
  3039  0167  082F               	movf	_w+1,w
  3040  0168  00E1               	movwf	incrementor@upper_val+1
  3041  0169  082E               	movf	_w,w
  3042  016A  00E0               	movwf	incrementor@upper_val
  3043  016B  0831               	movf	_t+1,w
  3044  016C  00E3               	movwf	incrementor@lower_val+1
  3045  016D  0830               	movf	_t,w
  3046  016E  00E2               	movwf	incrementor@lower_val
  3047  016F  3039               	movlw	57
  3048  0170  00E5               	movwf	??_thermometer_threshhold_settings
  3049  0171  0865               	movf	??_thermometer_threshhold_settings,w
  3050  0172  00E4               	movwf	incrementor@z
  3051  0173  160A  118A  23F8  120A  118A  	fcall	_incrementor
  3052  0178  00E6               	movwf	??_thermometer_threshhold_settings+1
  3053  0179  01E7               	clrf	??_thermometer_threshhold_settings+2
  3054  017A  0866               	movf	??_thermometer_threshhold_settings+1,w
  3055  017B  00AE               	movwf	_w
  3056  017C  0867               	movf	??_thermometer_threshhold_settings+2,w
  3057  017D  00AF               	movwf	_w+1
  3058                           
  3059                           ;Button_src.c: 78:                     if(c == (0x59 + 1)){
  3060  017E  305A               	movlw	90
  3061  017F  0648               	xorwf	_c,w
  3062  0180  1903               	btfsc	3,2
  3063                           
  3064                           ;Button_src.c: 79:                         c = 0x00;
  3065  0181  01C8               	clrf	_c
  3066                           
  3067                           ;Button_src.c: 81:                     button_delay();
  3068  0182  160A  118A  22E9  120A  118A  	fcall	_button_delay
  3069  0187                     l4079:	
  3070                           
  3071                           ;Button_src.c: 83:             RC0 = 1;
  3072  0187  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0188  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0189  1407               	bsf	7,0	;volatile
  3075                           
  3076                           ;Button_src.c: 84:             RC1 = 0;
  3077  018A  1087               	bcf	7,1	;volatile
  3078                           
  3079                           ;Button_src.c: 85:             RC2 = 1;
  3080  018B  1507               	bsf	7,2	;volatile
  3081                           
  3082                           ;Button_src.c: 86:             RC3 = 1;
  3083  018C  1587               	bsf	7,3	;volatile
  3084                           
  3085                           ;Button_src.c: 87:             z = modulus_func(z,4);
  3086  018D  0829               	movf	_z+1,w
  3087  018E  00F8               	movwf	modulus_func@x+1
  3088  018F  0828               	movf	_z,w
  3089  0190  00F7               	movwf	modulus_func@x
  3090  0191  3004               	movlw	4
  3091  0192  00F9               	movwf	modulus_func@y
  3092  0193  3000               	movlw	0
  3093  0194  00FA               	movwf	modulus_func@y+1
  3094  0195  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  3095  019A  0878               	movf	?_modulus_func+1,w
  3096  019B  00A9               	movwf	_z+1
  3097  019C  0877               	movf	?_modulus_func,w
  3098  019D  00A8               	movwf	_z
  3099                           
  3100                           ;Button_src.c: 88:             if(RC4 == 0 && z ==0){
  3101  019E  1A07               	btfsc	7,4	;volatile
  3102  019F  29FD               	goto	l4121
  3103  01A0  0828               	movf	_z,w
  3104  01A1  0429               	iorwf	_z+1,w
  3105  01A2  1D03               	btfss	3,2
  3106  01A3  29FD               	goto	l4121
  3107                           
  3108                           ;Button_src.c: 89:             z++;
  3109  01A4  3001               	movlw	1
  3110  01A5  07A8               	addwf	_z,f
  3111  01A6  1803               	skipnc
  3112  01A7  0AA9               	incf	_z+1,f
  3113  01A8  3000               	movlw	0
  3114  01A9  07A9               	addwf	_z+1,f
  3115                           
  3116                           ;Button_src.c: 90:             write_cmd(0x88);
  3117  01AA  3088               	movlw	136
  3118  01AB  160A  118A  233C  120A  118A  	fcall	_write_cmd
  3119                           
  3120                           ;Button_src.c: 91:             write_char('D');
  3121  01B0  3044               	movlw	68
  3122  01B1  160A  118A  2325  120A  118A  	fcall	_write_char
  3123                           
  3124                           ;Button_src.c: 92:             write_char('a');
  3125  01B6  3061               	movlw	97
  3126  01B7  160A  118A  2325  120A  118A  	fcall	_write_char
  3127                           
  3128                           ;Button_src.c: 93:             write_char('y');
  3129  01BC  3079               	movlw	121
  3130  01BD  160A  118A  2325  120A  118A  	fcall	_write_char
  3131                           
  3132                           ;Button_src.c: 94:             write_char('(');
  3133  01C2  3028               	movlw	40
  3134  01C3  160A  118A  2325  120A  118A  	fcall	_write_char
  3135                           
  3136                           ;Button_src.c: 95:             write_char('U');
  3137  01C8  3055               	movlw	85
  3138  01C9  160A  118A  2325  120A  118A  	fcall	_write_char
  3139                           
  3140                           ;Button_src.c: 96:             write_char(')');
  3141  01CE  3029               	movlw	41
  3142  01CF  160A  118A  2325  120A  118A  	fcall	_write_char
  3143                           
  3144                           ;Button_src.c: 97:             write_char(':');
  3145  01D4  303A               	movlw	58
  3146  01D5  160A  118A  2325  120A  118A  	fcall	_write_char
  3147                           
  3148                           ;Button_src.c: 98:             write_char(' ');
  3149  01DA  3020               	movlw	32
  3150  01DB  160A  118A  2325  120A  118A  	fcall	_write_char
  3151                           
  3152                           ;Button_src.c: 99:             write_char(' ');
  3153  01E0  3020               	movlw	32
  3154  01E1  160A  118A  2325  120A  118A  	fcall	_write_char
  3155                           
  3156                           ;Button_src.c: 100:             write_char(var1 + '0');
  3157  01E6  084F               	movf	_var1,w
  3158  01E7  3E30               	addlw	48
  3159  01E8  160A  118A  2325  120A  118A  	fcall	_write_char
  3160                           
  3161                           ;Button_src.c: 101:             write_char(var2 + '0');
  3162  01ED  084E               	movf	_var2,w
  3163  01EE  3E30               	addlw	48
  3164  01EF  160A  118A  2325  120A  118A  	fcall	_write_char
  3165                           
  3166                           ;Button_src.c: 102:             b = 'x';
  3167  01F4  3078               	movlw	120
  3168  01F5  00E5               	movwf	??_thermometer_threshhold_settings
  3169  01F6  0865               	movf	??_thermometer_threshhold_settings,w
  3170  01F7  00C9               	movwf	_b
  3171                           
  3172                           ;Button_src.c: 103:             button_delay();
  3173  01F8  160A  118A  22E9  120A  118A  	fcall	_button_delay
  3174  01FD                     l4121:	
  3175                           
  3176                           ;Button_src.c: 106:             RC0 = 1;
  3177  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  3178  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  3179  01FF  1407               	bsf	7,0	;volatile
  3180                           
  3181                           ;Button_src.c: 107:             RC1 = 0;
  3182  0200  1087               	bcf	7,1	;volatile
  3183                           
  3184                           ;Button_src.c: 108:             RC2 = 1;
  3185  0201  1507               	bsf	7,2	;volatile
  3186                           
  3187                           ;Button_src.c: 109:             RC3 = 1;
  3188  0202  1587               	bsf	7,3	;volatile
  3189                           
  3190                           ;Button_src.c: 110:             if(RC4 == 0 && z ==1){
  3191  0203  1A07               	btfsc	7,4	;volatile
  3192  0204  2A62               	goto	l4139
  3193  0205  0328               	decf	_z,w
  3194  0206  0429               	iorwf	_z+1,w
  3195  0207  1D03               	btfss	3,2
  3196  0208  2A62               	goto	l4139
  3197                           
  3198                           ;Button_src.c: 111:             write_cmd(0x88);
  3199  0209  3088               	movlw	136
  3200  020A  160A  118A  233C  120A  118A  	fcall	_write_cmd
  3201                           
  3202                           ;Button_src.c: 112:             write_char('N');
  3203  020F  304E               	movlw	78
  3204  0210  160A  118A  2325  120A  118A  	fcall	_write_char
  3205                           
  3206                           ;Button_src.c: 113:             write_char('i');
  3207  0215  3069               	movlw	105
  3208  0216  160A  118A  2325  120A  118A  	fcall	_write_char
  3209                           
  3210                           ;Button_src.c: 114:             write_char('g');
  3211  021B  3067               	movlw	103
  3212  021C  160A  118A  2325  120A  118A  	fcall	_write_char
  3213                           
  3214                           ;Button_src.c: 115:             write_char('h');
  3215  0221  3068               	movlw	104
  3216  0222  160A  118A  2325  120A  118A  	fcall	_write_char
  3217                           
  3218                           ;Button_src.c: 116:             write_char('t');
  3219  0227  3074               	movlw	116
  3220  0228  160A  118A  2325  120A  118A  	fcall	_write_char
  3221                           
  3222                           ;Button_src.c: 117:             write_char('(');
  3223  022D  3028               	movlw	40
  3224  022E  160A  118A  2325  120A  118A  	fcall	_write_char
  3225                           
  3226                           ;Button_src.c: 118:             write_char('U');
  3227  0233  3055               	movlw	85
  3228  0234  160A  118A  2325  120A  118A  	fcall	_write_char
  3229                           
  3230                           ;Button_src.c: 119:             write_char(')');
  3231  0239  3029               	movlw	41
  3232  023A  160A  118A  2325  120A  118A  	fcall	_write_char
  3233                           
  3234                           ;Button_src.c: 120:             write_char(':');
  3235  023F  303A               	movlw	58
  3236  0240  160A  118A  2325  120A  118A  	fcall	_write_char
  3237                           
  3238                           ;Button_src.c: 121:             write_char(var_night_high + '0');
  3239  0245  0836               	movf	_var_night_high,w
  3240  0246  3E30               	addlw	48
  3241  0247  160A  118A  2325  120A  118A  	fcall	_write_char
  3242                           
  3243                           ;Button_src.c: 122:             write_char(var_night_low + '0');
  3244  024C  0838               	movf	_var_night_low,w
  3245  024D  3E30               	addlw	48
  3246  024E  160A  118A  2325  120A  118A  	fcall	_write_char
  3247                           
  3248                           ;Button_src.c: 123:             b = 'y';
  3249  0253  3079               	movlw	121
  3250  0254  00E5               	movwf	??_thermometer_threshhold_settings
  3251  0255  0865               	movf	??_thermometer_threshhold_settings,w
  3252  0256  00C9               	movwf	_b
  3253                           
  3254                           ;Button_src.c: 124:             z++;
  3255  0257  3001               	movlw	1
  3256  0258  07A8               	addwf	_z,f
  3257  0259  1803               	skipnc
  3258  025A  0AA9               	incf	_z+1,f
  3259  025B  3000               	movlw	0
  3260  025C  07A9               	addwf	_z+1,f
  3261                           
  3262                           ;Button_src.c: 125:             button_delay();
  3263  025D  160A  118A  22E9  120A  118A  	fcall	_button_delay
  3264  0262                     l4139:	
  3265                           
  3266                           ;Button_src.c: 127:             RC0 = 1;
  3267  0262  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0263  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0264  1407               	bsf	7,0	;volatile
  3270                           
  3271                           ;Button_src.c: 128:             RC1 = 0;
  3272  0265  1087               	bcf	7,1	;volatile
  3273                           
  3274                           ;Button_src.c: 129:             RC2 = 1;
  3275  0266  1507               	bsf	7,2	;volatile
  3276                           
  3277                           ;Button_src.c: 130:             RC3 = 1;
  3278  0267  1587               	bsf	7,3	;volatile
  3279                           
  3280                           ;Button_src.c: 131:             if(RC4 == 0 && z ==2){
  3281  0268  1A07               	btfsc	7,4	;volatile
  3282  0269  2AC6               	goto	l4157
  3283  026A  3002               	movlw	2
  3284  026B  0628               	xorwf	_z,w
  3285  026C  0429               	iorwf	_z+1,w
  3286  026D  1D03               	btfss	3,2
  3287  026E  2AC6               	goto	l4157
  3288                           
  3289                           ;Button_src.c: 132:             write_cmd(0x88);
  3290  026F  3088               	movlw	136
  3291  0270  160A  118A  233C  120A  118A  	fcall	_write_cmd
  3292                           
  3293                           ;Button_src.c: 133:             write_char('N');
  3294  0275  304E               	movlw	78
  3295  0276  160A  118A  2325  120A  118A  	fcall	_write_char
  3296                           
  3297                           ;Button_src.c: 134:             write_char('i');
  3298  027B  3069               	movlw	105
  3299  027C  160A  118A  2325  120A  118A  	fcall	_write_char
  3300                           
  3301                           ;Button_src.c: 135:             write_char('g');
  3302  0281  3067               	movlw	103
  3303  0282  160A  118A  2325  120A  118A  	fcall	_write_char
  3304                           
  3305                           ;Button_src.c: 136:             write_char('h');
  3306  0287  3068               	movlw	104
  3307  0288  160A  118A  2325  120A  118A  	fcall	_write_char
  3308                           
  3309                           ;Button_src.c: 137:             write_char('t');
  3310  028D  3074               	movlw	116
  3311  028E  160A  118A  2325  120A  118A  	fcall	_write_char
  3312                           
  3313                           ;Button_src.c: 138:             write_char('(');
  3314  0293  3028               	movlw	40
  3315  0294  160A  118A  2325  120A  118A  	fcall	_write_char
  3316                           
  3317                           ;Button_src.c: 139:             write_char('L');
  3318  0299  304C               	movlw	76
  3319  029A  160A  118A  2325  120A  118A  	fcall	_write_char
  3320                           
  3321                           ;Button_src.c: 140:             write_char(')');
  3322  029F  3029               	movlw	41
  3323  02A0  160A  118A  2325  120A  118A  	fcall	_write_char
  3324                           
  3325                           ;Button_src.c: 141:             write_char(':');
  3326  02A5  303A               	movlw	58
  3327  02A6  160A  118A  2325  120A  118A  	fcall	_write_char
  3328                           
  3329                           ;Button_src.c: 142:             write_char(cold_high_night + '0');
  3330  02AB  3030               	movlw	48
  3331  02AC  160A  118A  2325  120A  118A  	fcall	_write_char
  3332                           
  3333                           ;Button_src.c: 143:             write_char(cold_low_night + '0');
  3334  02B1  3030               	movlw	48
  3335  02B2  160A  118A  2325  120A  118A  	fcall	_write_char
  3336                           
  3337                           ;Button_src.c: 144:             b = 'y';
  3338  02B7  3079               	movlw	121
  3339  02B8  00E5               	movwf	??_thermometer_threshhold_settings
  3340  02B9  0865               	movf	??_thermometer_threshhold_settings,w
  3341  02BA  00C9               	movwf	_b
  3342                           
  3343                           ;Button_src.c: 145:             z++;
  3344  02BB  3001               	movlw	1
  3345  02BC  07A8               	addwf	_z,f
  3346  02BD  1803               	skipnc
  3347  02BE  0AA9               	incf	_z+1,f
  3348  02BF  3000               	movlw	0
  3349  02C0  07A9               	addwf	_z+1,f
  3350                           
  3351                           ;Button_src.c: 146:             button_delay();
  3352  02C1  160A  118A  22E9  120A  118A  	fcall	_button_delay
  3353  02C6                     l4157:	
  3354                           
  3355                           ;Button_src.c: 148:             if(RC4 == 0 && z ==3){
  3356  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  3357  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  3358  02C8  1A07               	btfsc	7,4	;volatile
  3359  02C9  2B28               	goto	l4189
  3360  02CA  3003               	movlw	3
  3361  02CB  0628               	xorwf	_z,w
  3362  02CC  0429               	iorwf	_z+1,w
  3363  02CD  1D03               	btfss	3,2
  3364  02CE  2B28               	goto	l4189
  3365                           
  3366                           ;Button_src.c: 149:             z++;
  3367  02CF  3001               	movlw	1
  3368  02D0  07A8               	addwf	_z,f
  3369  02D1  1803               	skipnc
  3370  02D2  0AA9               	incf	_z+1,f
  3371  02D3  3000               	movlw	0
  3372  02D4  07A9               	addwf	_z+1,f
  3373                           
  3374                           ;Button_src.c: 150:             write_cmd(0x88);
  3375  02D5  3088               	movlw	136
  3376  02D6  160A  118A  233C  120A  118A  	fcall	_write_cmd
  3377                           
  3378                           ;Button_src.c: 151:             write_char('D');
  3379  02DB  3044               	movlw	68
  3380  02DC  160A  118A  2325  120A  118A  	fcall	_write_char
  3381                           
  3382                           ;Button_src.c: 152:             write_char('a');
  3383  02E1  3061               	movlw	97
  3384  02E2  160A  118A  2325  120A  118A  	fcall	_write_char
  3385                           
  3386                           ;Button_src.c: 153:             write_char('y');
  3387  02E7  3079               	movlw	121
  3388  02E8  160A  118A  2325  120A  118A  	fcall	_write_char
  3389                           
  3390                           ;Button_src.c: 154:             write_char('(');
  3391  02ED  3028               	movlw	40
  3392  02EE  160A  118A  2325  120A  118A  	fcall	_write_char
  3393                           
  3394                           ;Button_src.c: 155:             write_char('L');
  3395  02F3  304C               	movlw	76
  3396  02F4  160A  118A  2325  120A  118A  	fcall	_write_char
  3397                           
  3398                           ;Button_src.c: 156:             write_char(')');
  3399  02F9  3029               	movlw	41
  3400  02FA  160A  118A  2325  120A  118A  	fcall	_write_char
  3401                           
  3402                           ;Button_src.c: 157:             write_char(':');
  3403  02FF  303A               	movlw	58
  3404  0300  160A  118A  2325  120A  118A  	fcall	_write_char
  3405                           
  3406                           ;Button_src.c: 158:             write_char(' ');
  3407  0305  3020               	movlw	32
  3408  0306  160A  118A  2325  120A  118A  	fcall	_write_char
  3409                           
  3410                           ;Button_src.c: 159:             write_char(' ');
  3411  030B  3020               	movlw	32
  3412  030C  160A  118A  2325  120A  118A  	fcall	_write_char
  3413                           
  3414                           ;Button_src.c: 160:             write_char(cold_high + '0');
  3415  0311  0834               	movf	_cold_high,w
  3416  0312  3E30               	addlw	48
  3417  0313  160A  118A  2325  120A  118A  	fcall	_write_char
  3418                           
  3419                           ;Button_src.c: 161:             write_char(cold_low + '0');
  3420  0318  0832               	movf	_cold_low,w
  3421  0319  3E30               	addlw	48
  3422  031A  160A  118A  2325  120A  118A  	fcall	_write_char
  3423                           
  3424                           ;Button_src.c: 162:             b = 'x';
  3425  031F  3078               	movlw	120
  3426  0320  00E5               	movwf	??_thermometer_threshhold_settings
  3427  0321  0865               	movf	??_thermometer_threshhold_settings,w
  3428  0322  00C9               	movwf	_b
  3429                           
  3430                           ;Button_src.c: 163:             button_delay();
  3431  0323  160A  118A  22E9  120A  118A  	fcall	_button_delay
  3432  0328                     l4189:	
  3433                           
  3434                           ;Button_src.c: 168:             t = 0;
  3435  0328  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0329  1303               	bcf	3,6	;RP1=0, select bank0
  3437  032A  01B0               	clrf	_t
  3438  032B  01B1               	clrf	_t+1
  3439                           
  3440                           ;Button_src.c: 169:             w = 0;
  3441  032C  01AE               	clrf	_w
  3442  032D  01AF               	clrf	_w+1
  3443                           
  3444                           ;Button_src.c: 170:             x = 0;
  3445  032E  01AC               	clrf	_x
  3446  032F  01AD               	clrf	_x+1
  3447                           
  3448                           ;Button_src.c: 171:             y = 0;
  3449  0330  01AA               	clrf	_y
  3450  0331  01AB               	clrf	_y+1
  3451                           
  3452                           ;Button_src.c: 172:             x = 0x00;
  3453  0332  01AC               	clrf	_x
  3454  0333  01AD               	clrf	_x+1
  3455                           
  3456                           ;Button_src.c: 229:                 RC0 = 0;
  3457  0334  1007               	bcf	7,0	;volatile
  3458                           
  3459                           ;Button_src.c: 230:                 RC1 = 1;
  3460  0335  1487               	bsf	7,1	;volatile
  3461                           
  3462                           ;Button_src.c: 231:                 RC2 = 1;
  3463  0336  1507               	bsf	7,2	;volatile
  3464                           
  3465                           ;Button_src.c: 232:                 RC3 = 1;
  3466  0337  1587               	bsf	7,3	;volatile
  3467                           
  3468                           ;Button_src.c: 233:                     if(RC6 == 0){
  3469  0338  1B07               	btfsc	7,6	;volatile
  3470  0339  2B72               	goto	l737
  3471                           
  3472                           ;Button_src.c: 234:                         var1 = w;
  3473  033A  082E               	movf	_w,w
  3474  033B  00E5               	movwf	??_thermometer_threshhold_settings
  3475  033C  0865               	movf	??_thermometer_threshhold_settings,w
  3476  033D  00CF               	movwf	_var1
  3477                           
  3478                           ;Button_src.c: 235:                         var2 = t;
  3479  033E  0830               	movf	_t,w
  3480  033F  00E5               	movwf	??_thermometer_threshhold_settings
  3481  0340  0865               	movf	??_thermometer_threshhold_settings,w
  3482  0341  00CE               	movwf	_var2
  3483                           
  3484                           ;Button_src.c: 236:                         w = 0;
  3485  0342  01AE               	clrf	_w
  3486  0343  01AF               	clrf	_w+1
  3487                           
  3488                           ;Button_src.c: 237:                         t = 0;
  3489  0344  01B0               	clrf	_t
  3490  0345  01B1               	clrf	_t+1
  3491                           
  3492                           ;Button_src.c: 238:                         x = 0;
  3493  0346  01AC               	clrf	_x
  3494  0347  01AD               	clrf	_x+1
  3495                           
  3496                           ;Button_src.c: 239:                         t = 0;
  3497  0348  01B0               	clrf	_t
  3498  0349  01B1               	clrf	_t+1
  3499                           
  3500                           ;Button_src.c: 241:                         write_cmd(0x1);
  3501  034A  3001               	movlw	1
  3502  034B  160A  118A  233C  120A  118A  	fcall	_write_cmd
  3503                           
  3504                           ;Button_src.c: 242:                         write_char('S');
  3505  0350  3053               	movlw	83
  3506  0351  160A  118A  2325  120A  118A  	fcall	_write_char
  3507                           
  3508                           ;Button_src.c: 243:                         write_char('A');
  3509  0356  3041               	movlw	65
  3510  0357  160A  118A  2325  120A  118A  	fcall	_write_char
  3511                           
  3512                           ;Button_src.c: 244:                         write_char('V');
  3513  035C  3056               	movlw	86
  3514  035D  160A  118A  2325  120A  118A  	fcall	_write_char
  3515                           
  3516                           ;Button_src.c: 245:                         write_char('E');
  3517  0362  3045               	movlw	69
  3518  0363  160A  118A  2325  120A  118A  	fcall	_write_char
  3519                           
  3520                           ;Button_src.c: 246:                         write_char('D');
  3521  0368  3044               	movlw	68
  3522  0369  160A  118A  2325  120A  118A  	fcall	_write_char
  3523                           
  3524                           ;Button_src.c: 247:                         button_delay();
  3525  036E  160A  118A  22E9   	fcall	_button_delay
  3526  0371  0008               	return
  3527  0372                     l737:	
  3528                           ;Button_src.c: 249:                     }
  3529                           
  3530                           
  3531                           ;Button_src.c: 250:             RC0 = 0;
  3532  0372  1007               	bcf	7,0	;volatile
  3533                           
  3534                           ;Button_src.c: 251:             RC1 = 1;
  3535  0373  1487               	bsf	7,1	;volatile
  3536                           
  3537                           ;Button_src.c: 252:             RC2 = 1;
  3538  0374  1507               	bsf	7,2	;volatile
  3539                           
  3540                           ;Button_src.c: 253:             RC3 = 1;
  3541  0375  1587               	bsf	7,3	;volatile
  3542                           
  3543                           ;Button_src.c: 254:             if (RC7 == 0 ){
  3544  0376  1B87               	btfsc	7,7	;volatile
  3545  0377  2872               	goto	l729
  3546                           
  3547                           ;Button_src.c: 255:             write_cmd(0x1);
  3548  0378  3001               	movlw	1
  3549  0379  160A  118A  233C   	fcall	_write_cmd
  3550                           
  3551                           ;Button_src.c: 256:              w = 0;
  3552  037C  01AE               	clrf	_w
  3553  037D  01AF               	clrf	_w+1
  3554                           
  3555                           ;Button_src.c: 257:                         t = 0;
  3556  037E  01B0               	clrf	_t
  3557  037F  01B1               	clrf	_t+1
  3558                           
  3559                           ;Button_src.c: 258:                         x = 0;
  3560  0380  01AC               	clrf	_x
  3561  0381  01AD               	clrf	_x+1
  3562                           
  3563                           ;Button_src.c: 259:                         t = 0;
  3564  0382  01B0               	clrf	_t
  3565  0383  01B1               	clrf	_t+1
  3566  0384  0008               	return
  3567  0385                     __end_of_thermometer_threshhold_settings:	
  3568                           
  3569                           	psect	text3
  3570  1694                     __ptext3:	
  3571 ;; *************** function _set_upper_threshold *****************
  3572 ;; Defined at:
  3573 ;;		line 4 in file "threshold_src.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  upper_val       2    3[COMMON] int 
  3576 ;;  lower_val       2    5[COMMON] int 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      unsigned char 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 300/0
  3585 ;;		On exit  : 300/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3588 ;;      Params:         4       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0
  3590 ;;      Temps:          1       0       0       0       0
  3591 ;;      Totals:         5       0       0       0       0
  3592 ;;Total ram usage:        5 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    2
  3595 ;; This function calls:
  3596 ;;		_write_char
  3597 ;; This function is called by:
  3598 ;;		_main
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _set_upper_threshold
  3604  1694                     _set_upper_threshold:	
  3605                           
  3606                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3610  1694  0874               	movf	set_upper_threshold@upper_val+1,w
  3611  1695  3A80               	xorlw	128
  3612  1696  3C80               	sublw	128
  3613  1697  1D03               	skipz
  3614  1698  2E9B               	goto	u3965
  3615  1699  0873               	movf	set_upper_threshold@upper_val,w
  3616  169A  025B               	subwf	_shi,w
  3617  169B                     u3965:	
  3618  169B  1C03               	skipc
  3619  169C  2EE6               	goto	l945
  3620  169D  0876               	movf	set_upper_threshold@lower_val+1,w
  3621  169E  3A80               	xorlw	128
  3622  169F  3C80               	sublw	128
  3623  16A0  1D03               	skipz
  3624  16A1  2EA6               	goto	u3975
  3625  16A2  0875               	movf	set_upper_threshold@lower_val,w
  3626  16A3  1283               	bcf	3,5	;RP0=0, select bank0
  3627  16A4  1303               	bcf	3,6	;RP1=0, select bank0
  3628  16A5  025A               	subwf	_ge,w
  3629  16A6                     u3975:	
  3630  16A6  1C03               	skipc
  3631  16A7  2EE6               	goto	l945
  3632                           
  3633                           ;threshold_src.c: 6:     heat_counter ++;
  3634  16A8  3001               	movlw	1
  3635  16A9  1283               	bcf	3,5	;RP0=0, select bank0
  3636  16AA  1303               	bcf	3,6	;RP1=0, select bank0
  3637  16AB  07BC               	addwf	_heat_counter,f
  3638  16AC  1803               	skipnc
  3639  16AD  0ABD               	incf	_heat_counter+1,f
  3640  16AE  3000               	movlw	0
  3641  16AF  07BD               	addwf	_heat_counter+1,f
  3642                           
  3643                           ;threshold_src.c: 7:     heater_state = '0';
  3644  16B0  3030               	movlw	48
  3645  16B1  00F7               	movwf	??_set_upper_threshold
  3646  16B2  0877               	movf	??_set_upper_threshold,w
  3647  16B3  00D1               	movwf	_heater_state
  3648                           
  3649                           ;threshold_src.c: 8:     cooler_state = '1';
  3650  16B4  3031               	movlw	49
  3651  16B5  00F7               	movwf	??_set_upper_threshold
  3652  16B6  0877               	movf	??_set_upper_threshold,w
  3653  16B7  00D0               	movwf	_cooler_state
  3654                           
  3655                           ;threshold_src.c: 9:     write_char('W');
  3656  16B8  3057               	movlw	87
  3657  16B9  160A  118A  2325  160A  118A  	fcall	_write_char
  3658                           
  3659                           ;threshold_src.c: 10:     write_char('A');
  3660  16BE  3041               	movlw	65
  3661  16BF  160A  118A  2325  160A  118A  	fcall	_write_char
  3662                           
  3663                           ;threshold_src.c: 11:     write_char('R');
  3664  16C4  3052               	movlw	82
  3665  16C5  160A  118A  2325  160A  118A  	fcall	_write_char
  3666                           
  3667                           ;threshold_src.c: 12:     write_char('M');
  3668  16CA  304D               	movlw	77
  3669  16CB  160A  118A  2325  160A  118A  	fcall	_write_char
  3670                           
  3671                           ;threshold_src.c: 13:     if(heat_counter > 1000){
  3672  16D0  3003               	movlw	3
  3673  16D1  023D               	subwf	_heat_counter+1,w
  3674  16D2  30E9               	movlw	233
  3675  16D3  1903               	skipnz
  3676  16D4  023C               	subwf	_heat_counter,w
  3677  16D5  1C03               	skipc
  3678  16D6  2EE6               	goto	l945
  3679                           
  3680                           ;threshold_src.c: 14:         cooler_state = '-';
  3681  16D7  302D               	movlw	45
  3682  16D8  00F7               	movwf	??_set_upper_threshold
  3683  16D9  0877               	movf	??_set_upper_threshold,w
  3684  16DA  00D0               	movwf	_cooler_state
  3685                           
  3686                           ;threshold_src.c: 15:         if(count == 2)
  3687  16DB  3002               	movlw	2
  3688  16DC  1683               	bsf	3,5	;RP0=1, select bank1
  3689  16DD  0631               	xorwf	_count^(0+128),w
  3690  16DE  0432               	iorwf	(_count+1)^(0+128),w
  3691  16DF  1D03               	btfss	3,2
  3692  16E0  2EE6               	goto	l945
  3693                           
  3694                           ;threshold_src.c: 16:         buzzer_watcher = 'w';
  3695  16E1  3077               	movlw	119
  3696  16E2  00F7               	movwf	??_set_upper_threshold
  3697  16E3  0877               	movf	??_set_upper_threshold,w
  3698  16E4  1283               	bcf	3,5	;RP0=0, select bank0
  3699  16E5  00D3               	movwf	_buzzer_watcher
  3700  16E6                     l945:	
  3701                           ;threshold_src.c: 18:     }
  3702                           
  3703                           
  3704                           ;threshold_src.c: 19:     return buzzer_watcher;
  3705  16E6  1283               	bcf	3,5	;RP0=0, select bank0
  3706  16E7  1303               	bcf	3,6	;RP1=0, select bank0
  3707  16E8  0853               	movf	_buzzer_watcher,w
  3708  16E9  0008               	return
  3709  16EA                     __end_of_set_upper_threshold:	
  3710                           
  3711                           	psect	text4
  3712  1600                     __ptext4:	
  3713 ;; *************** function _set_lower_threshold *****************
  3714 ;; Defined at:
  3715 ;;		line 41 in file "threshold_src.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;  upper_val       2    3[COMMON] int 
  3718 ;;  lower_val       2    5[COMMON] int 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;		None
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      unsigned char 
  3723 ;; Registers used:
  3724 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 300/0
  3727 ;;		On exit  : 300/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3730 ;;      Params:         4       0       0       0       0
  3731 ;;      Locals:         0       0       0       0       0
  3732 ;;      Temps:          1       0       0       0       0
  3733 ;;      Totals:         5       0       0       0       0
  3734 ;;Total ram usage:        5 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    2
  3737 ;; This function calls:
  3738 ;;		_write_char
  3739 ;; This function is called by:
  3740 ;;		_main
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function _set_lower_threshold
  3746  1600                     _set_lower_threshold:	
  3747                           
  3748                           ;threshold_src.c: 42:     if((shi <= upper_val && ge <= lower_val))
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3752  1600  0874               	movf	set_lower_threshold@upper_val+1,w
  3753  1601  3A80               	xorlw	128
  3754  1602  00F7               	movwf	??_set_lower_threshold
  3755  1603  3080               	movlw	128
  3756  1604  0277               	subwf	??_set_lower_threshold,w
  3757  1605  1D03               	skipz
  3758  1606  2E09               	goto	u3945
  3759  1607  085B               	movf	_shi,w
  3760  1608  0273               	subwf	set_lower_threshold@upper_val,w
  3761  1609                     u3945:	
  3762  1609  1C03               	skipc
  3763  160A  2E45               	goto	l958
  3764  160B  0876               	movf	set_lower_threshold@lower_val+1,w
  3765  160C  3A80               	xorlw	128
  3766  160D  00F7               	movwf	??_set_lower_threshold
  3767  160E  3080               	movlw	128
  3768  160F  0277               	subwf	??_set_lower_threshold,w
  3769  1610  1D03               	skipz
  3770  1611  2E16               	goto	u3955
  3771  1612  1283               	bcf	3,5	;RP0=0, select bank0
  3772  1613  1303               	bcf	3,6	;RP1=0, select bank0
  3773  1614  085A               	movf	_ge,w
  3774  1615  0275               	subwf	set_lower_threshold@lower_val,w
  3775  1616                     u3955:	
  3776  1616  1C03               	skipc
  3777  1617  2E45               	goto	l958
  3778                           
  3779                           ;threshold_src.c: 43:     {;threshold_src.c: 44:     count = 2;
  3780  1618  3002               	movlw	2
  3781  1619  1683               	bsf	3,5	;RP0=1, select bank1
  3782  161A  1303               	bcf	3,6	;RP1=0, select bank1
  3783  161B  00B1               	movwf	_count^(0+128)
  3784  161C  3000               	movlw	0
  3785  161D  00B2               	movwf	(_count^(0+128)+1)
  3786                           
  3787                           ;threshold_src.c: 45:     buzzer_watcher = 'x';
  3788  161E  3078               	movlw	120
  3789  161F  00F7               	movwf	??_set_lower_threshold
  3790  1620  0877               	movf	??_set_lower_threshold,w
  3791  1621  1283               	bcf	3,5	;RP0=0, select bank0
  3792  1622  00D3               	movwf	_buzzer_watcher
  3793                           
  3794                           ;threshold_src.c: 46:     heater_state = '0';
  3795  1623  3030               	movlw	48
  3796  1624  00F7               	movwf	??_set_lower_threshold
  3797  1625  0877               	movf	??_set_lower_threshold,w
  3798  1626  00D1               	movwf	_heater_state
  3799                           
  3800                           ;threshold_src.c: 47:     cooler_state = '0';
  3801  1627  3030               	movlw	48
  3802  1628  00F7               	movwf	??_set_lower_threshold
  3803  1629  0877               	movf	??_set_lower_threshold,w
  3804  162A  00D0               	movwf	_cooler_state
  3805                           
  3806                           ;threshold_src.c: 48:     heat_counter = 0;
  3807  162B  01BC               	clrf	_heat_counter
  3808  162C  01BD               	clrf	_heat_counter+1
  3809                           
  3810                           ;threshold_src.c: 49:     cold_counter = 0;
  3811  162D  01BA               	clrf	_cold_counter
  3812  162E  01BB               	clrf	_cold_counter+1
  3813                           
  3814                           ;threshold_src.c: 50:     write_char('O');
  3815  162F  304F               	movlw	79
  3816  1630  160A  118A  2325  160A  118A  	fcall	_write_char
  3817                           
  3818                           ;threshold_src.c: 51:     write_char('K');
  3819  1635  304B               	movlw	75
  3820  1636  160A  118A  2325  160A  118A  	fcall	_write_char
  3821                           
  3822                           ;threshold_src.c: 52:     write_char(' ');
  3823  163B  3020               	movlw	32
  3824  163C  160A  118A  2325  160A  118A  	fcall	_write_char
  3825                           
  3826                           ;threshold_src.c: 53:     write_char(' ');
  3827  1641  3020               	movlw	32
  3828  1642  160A  118A  2325   	fcall	_write_char
  3829  1645                     l958:	
  3830                           ;threshold_src.c: 54:     }
  3831                           
  3832                           
  3833                           ;threshold_src.c: 55:     return buzzer_watcher;
  3834  1645  1283               	bcf	3,5	;RP0=0, select bank0
  3835  1646  1303               	bcf	3,6	;RP1=0, select bank0
  3836  1647  0853               	movf	_buzzer_watcher,w
  3837  1648  0008               	return
  3838  1649                     __end_of_set_lower_threshold:	
  3839                           
  3840                           	psect	text5
  3841  1353                     __ptext5:	
  3842 ;; *************** function _set_beep_threshhold *****************
  3843 ;; Defined at:
  3844 ;;		line 5 in file "buzzer_src.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  x               1    wreg     unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  x               1    2[COMMON] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 300/0
  3855 ;;		On exit  : 300/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3858 ;;      Params:         0       0       0       0       0
  3859 ;;      Locals:         1       0       0       0       0
  3860 ;;      Temps:          0       0       0       0       0
  3861 ;;      Totals:         1       0       0       0       0
  3862 ;;Total ram usage:        1 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    1
  3865 ;; This function calls:
  3866 ;;		_button_delay
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _set_beep_threshhold
  3874  1353                     _set_beep_threshhold:	
  3875                           
  3876                           ;incstack = 0
  3877                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3878                           ;set_beep_threshhold@x stored from wreg
  3879  1353  00F2               	movwf	set_beep_threshhold@x
  3880                           
  3881                           ;buzzer_src.c: 6:     if (x == 'w'){
  3882  1354  3077               	movlw	119
  3883  1355  0672               	xorwf	set_beep_threshhold@x,w
  3884  1356  1D03               	btfss	3,2
  3885  1357  2B6C               	goto	l4817
  3886                           
  3887                           ;buzzer_src.c: 7:         RE2 = 1;
  3888  1358  1509               	bsf	9,2	;volatile
  3889                           
  3890                           ;buzzer_src.c: 8:         button_delay();
  3891  1359  160A  118A  22E9  160A  118A  	fcall	_button_delay
  3892                           
  3893                           ;buzzer_src.c: 9:         RE2 = 0;
  3894  135E  1283               	bcf	3,5	;RP0=0, select bank0
  3895  135F  1303               	bcf	3,6	;RP1=0, select bank0
  3896  1360  1109               	bcf	9,2	;volatile
  3897                           
  3898                           ;buzzer_src.c: 10:         button_delay();
  3899  1361  160A  118A  22E9  160A  118A  	fcall	_button_delay
  3900                           
  3901                           ;buzzer_src.c: 11:         RE2 = 1;
  3902  1366  1283               	bcf	3,5	;RP0=0, select bank0
  3903  1367  1303               	bcf	3,6	;RP1=0, select bank0
  3904  1368  1509               	bsf	9,2	;volatile
  3905                           
  3906                           ;buzzer_src.c: 12:         button_delay();
  3907  1369  160A  118A  22E9   	fcall	_button_delay
  3908  136C                     l4817:	
  3909                           
  3910                           ;buzzer_src.c: 13:         RE2 = 0;
  3911  136C  1283               	bcf	3,5	;RP0=0, select bank0
  3912  136D  1303               	bcf	3,6	;RP1=0, select bank0
  3913  136E  1109               	bcf	9,2	;volatile
  3914  136F  0008               	return
  3915  1370                     __end_of_set_beep_threshhold:	
  3916                           
  3917                           	psect	text6
  3918  1496                     __ptext6:	
  3919 ;; *************** function _reset_alarm *****************
  3920 ;; Defined at:
  3921 ;;		line 58 in file "threshold_src.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      unsigned char 
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 300/0
  3932 ;;		On exit  : 300/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3935 ;;      Params:         0       0       0       0       0
  3936 ;;      Locals:         0       0       0       0       0
  3937 ;;      Temps:          1       0       0       0       0
  3938 ;;      Totals:         1       0       0       0       0
  3939 ;;Total ram usage:        1 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    2
  3942 ;; This function calls:
  3943 ;;		_write_char
  3944 ;; This function is called by:
  3945 ;;		_main
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           
  3950                           ;psect for function _reset_alarm
  3951  1496                     _reset_alarm:	
  3952                           
  3953                           ;threshold_src.c: 59:     RC0 = 1;
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3957  1496  1407               	bsf	7,0	;volatile
  3958                           
  3959                           ;threshold_src.c: 60:     RC1 = 1;
  3960  1497  1487               	bsf	7,1	;volatile
  3961                           
  3962                           ;threshold_src.c: 61:     RC2 = 1;
  3963  1498  1507               	bsf	7,2	;volatile
  3964                           
  3965                           ;threshold_src.c: 62:     RC3 = 0;
  3966  1499  1187               	bcf	7,3	;volatile
  3967                           
  3968                           ;threshold_src.c: 63:     if(RC4 == 0){
  3969  149A  1A07               	btfsc	7,4	;volatile
  3970  149B  2CC2               	goto	l4803
  3971                           
  3972                           ;threshold_src.c: 64:         count = 0;
  3973  149C  1683               	bsf	3,5	;RP0=1, select bank1
  3974  149D  01B1               	clrf	_count^(0+128)
  3975  149E  01B2               	clrf	(_count+1)^(0+128)
  3976                           
  3977                           ;threshold_src.c: 65:         buzzer_watcher = 'x';
  3978  149F  3078               	movlw	120
  3979  14A0  00F3               	movwf	??_reset_alarm
  3980  14A1  0873               	movf	??_reset_alarm,w
  3981  14A2  1283               	bcf	3,5	;RP0=0, select bank0
  3982  14A3  00D3               	movwf	_buzzer_watcher
  3983                           
  3984                           ;threshold_src.c: 66:         heat_counter = 0;
  3985  14A4  01BC               	clrf	_heat_counter
  3986  14A5  01BD               	clrf	_heat_counter+1
  3987                           
  3988                           ;threshold_src.c: 67:         write_char('R');
  3989  14A6  3052               	movlw	82
  3990  14A7  160A  118A  2325  160A  118A  	fcall	_write_char
  3991                           
  3992                           ;threshold_src.c: 68:         write_char('E');
  3993  14AC  3045               	movlw	69
  3994  14AD  160A  118A  2325  160A  118A  	fcall	_write_char
  3995                           
  3996                           ;threshold_src.c: 69:         write_char('S');
  3997  14B2  3053               	movlw	83
  3998  14B3  160A  118A  2325  160A  118A  	fcall	_write_char
  3999                           
  4000                           ;threshold_src.c: 70:         write_char('E');
  4001  14B8  3045               	movlw	69
  4002  14B9  160A  118A  2325  160A  118A  	fcall	_write_char
  4003                           
  4004                           ;threshold_src.c: 71:         write_char('T');
  4005  14BE  3054               	movlw	84
  4006  14BF  160A  118A  2325   	fcall	_write_char
  4007  14C2                     l4803:	
  4008                           
  4009                           ;threshold_src.c: 73:     return buzzer_watcher;
  4010  14C2  0853               	movf	_buzzer_watcher,w
  4011  14C3  0008               	return
  4012  14C4                     __end_of_reset_alarm:	
  4013                           
  4014                           	psect	text7
  4015  13D5                     __ptext7:	
  4016 ;; *************** function _lcd_init *****************
  4017 ;; Defined at:
  4018 ;;		line 14 in file "LCD_src.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  i               2    0        int 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 300/100
  4029 ;;		On exit  : 300/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4032 ;;      Params:         0       0       0       0       0
  4033 ;;      Locals:         0       0       0       0       0
  4034 ;;      Temps:          0       0       0       0       0
  4035 ;;      Totals:         0       0       0       0       0
  4036 ;;Total ram usage:        0 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    2
  4039 ;; This function calls:
  4040 ;;		_delay_screen
  4041 ;;		_write_cmd
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _lcd_init
  4049  13D5                     _lcd_init:	
  4050                           
  4051                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4055  13D5  0185               	clrf	5	;volatile
  4056                           
  4057                           ;LCD_src.c: 18:  RA0=0;
  4058  13D6  1283               	bcf	3,5	;RP0=0, select bank0
  4059  13D7  1005               	bcf	5,0	;volatile
  4060                           
  4061                           ;LCD_src.c: 19:  delay_screen();
  4062  13D8  160A  118A  22D5  160A  118A  	fcall	_delay_screen
  4063                           
  4064                           ;LCD_src.c: 20:  RA0=1;
  4065  13DD  1283               	bcf	3,5	;RP0=0, select bank0
  4066  13DE  1303               	bcf	3,6	;RP1=0, select bank0
  4067  13DF  1405               	bsf	5,0	;volatile
  4068                           
  4069                           ;LCD_src.c: 21:  RA2=1;
  4070  13E0  1505               	bsf	5,2	;volatile
  4071                           
  4072                           ;LCD_src.c: 22:  write_cmd(0x30);
  4073  13E1  3030               	movlw	48
  4074  13E2  160A  118A  233C  160A  118A  	fcall	_write_cmd
  4075                           
  4076                           ;LCD_src.c: 23:  write_cmd(0x01);
  4077  13E7  3001               	movlw	1
  4078  13E8  160A  118A  233C  160A  118A  	fcall	_write_cmd
  4079                           
  4080                           ;LCD_src.c: 24:  write_cmd(0x06);
  4081  13ED  3006               	movlw	6
  4082  13EE  160A  118A  233C  160A  118A  	fcall	_write_cmd
  4083                           
  4084                           ;LCD_src.c: 25:  write_cmd(0x0c);
  4085  13F3  300C               	movlw	12
  4086  13F4  160A  118A  233C   	fcall	_write_cmd
  4087  13F7  0008               	return
  4088  13F8                     __end_of_lcd_init:	
  4089                           
  4090                           	psect	text8
  4091  1311                     __ptext8:	
  4092 ;; *************** function _initialise_buttons *****************
  4093 ;; Defined at:
  4094 ;;		line 11 in file "Button_src.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;		None
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, status,2
  4103 ;; Tracked objects:
  4104 ;;		On entry : 300/0
  4105 ;;		On exit  : 300/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4108 ;;      Params:         0       0       0       0       0
  4109 ;;      Locals:         0       0       0       0       0
  4110 ;;      Temps:          0       0       0       0       0
  4111 ;;      Totals:         0       0       0       0       0
  4112 ;;Total ram usage:        0 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_main
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function _initialise_buttons
  4123  1311                     _initialise_buttons:	
  4124                           
  4125                           ;Button_src.c: 12:     ADCON1 = 0x06;
  4126                           
  4127                           ;incstack = 0
  4128                           ; Regs used in _initialise_buttons: [wreg+status,2]
  4129  1311  3006               	movlw	6
  4130  1312  1683               	bsf	3,5	;RP0=1, select bank1
  4131  1313  009F               	movwf	31	;volatile
  4132                           
  4133                           ;Button_src.c: 13:     TRISC = 0xf0;
  4134  1314  30F0               	movlw	240
  4135  1315  0087               	movwf	7	;volatile
  4136                           
  4137                           ;Button_src.c: 14:     a = 0x00;
  4138  1316  1283               	bcf	3,5	;RP0=0, select bank0
  4139  1317  01CA               	clrf	_a
  4140                           
  4141                           ;Button_src.c: 15:     b = 0x00;
  4142  1318  01C9               	clrf	_b
  4143                           
  4144                           ;Button_src.c: 16:     c = 0x00;
  4145  1319  01C8               	clrf	_c
  4146                           
  4147                           ;Button_src.c: 17:     z = 0;
  4148  131A  01A8               	clrf	_z
  4149  131B  01A9               	clrf	_z+1
  4150                           
  4151                           ;Button_src.c: 18:     day_low = 0;
  4152  131C  01A6               	clrf	_day_low
  4153  131D  01A7               	clrf	_day_low+1
  4154                           
  4155                           ;Button_src.c: 19:     stats = 1;
  4156  131E  3001               	movlw	1
  4157  131F  00A2               	movwf	_stats
  4158  1320  3000               	movlw	0
  4159  1321  00A3               	movwf	_stats+1
  4160                           
  4161                           ;Button_src.c: 20:     p = 0;
  4162  1322  01A0               	clrf	_p
  4163  1323  01A1               	clrf	_p+1
  4164  1324  0008               	return
  4165  1325                     __end_of_initialise_buttons:	
  4166                           
  4167                           	psect	text9
  4168  1284                     __ptext9:	
  4169 ;; *************** function _init_temp *****************
  4170 ;; Defined at:
  4171 ;;		line 6 in file "Thermometer_src.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		status,2
  4180 ;; Tracked objects:
  4181 ;;		On entry : 200/100
  4182 ;;		On exit  : 300/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4185 ;;      Params:         0       0       0       0       0
  4186 ;;      Locals:         0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0
  4188 ;;      Totals:         0       0       0       0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _init_temp
  4200  1284                     _init_temp:	
  4201                           
  4202                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _init_temp: [status,2]
  4206  1284  1683               	bsf	3,5	;RP0=1, select bank1
  4207  1285  0189               	clrf	9	;volatile
  4208                           
  4209                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4210  1286  1283               	bcf	3,5	;RP0=0, select bank0
  4211  1287  0189               	clrf	9	;volatile
  4212  1288  0008               	return
  4213  1289                     __end_of_init_temp:	
  4214                           
  4215                           	psect	text10
  4216  1289                     __ptext10:	
  4217 ;; *************** function _init *****************
  4218 ;; Defined at:
  4219 ;;		line 5 in file "LCD_src.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;		None
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  1    wreg      void 
  4226 ;; Registers used:
  4227 ;;		wreg, status,2
  4228 ;; Tracked objects:
  4229 ;;		On entry : 300/0
  4230 ;;		On exit  : 300/100
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4233 ;;      Params:         0       0       0       0       0
  4234 ;;      Locals:         0       0       0       0       0
  4235 ;;      Temps:          0       0       0       0       0
  4236 ;;      Totals:         0       0       0       0       0
  4237 ;;Total ram usage:        0 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_main
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function _init
  4248  1289                     _init:	
  4249                           
  4250                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4251                           
  4252                           ;incstack = 0
  4253                           ; Regs used in _init: [wreg+status,2]
  4254  1289  3007               	movlw	7
  4255  128A  1683               	bsf	3,5	;RP0=1, select bank1
  4256  128B  009F               	movwf	31	;volatile
  4257                           
  4258                           ;LCD_src.c: 8:  TRISA0=1;
  4259  128C  1405               	bsf	5,0	;volatile
  4260                           
  4261                           ;LCD_src.c: 9:  TRISD=0X00;
  4262  128D  0188               	clrf	8	;volatile
  4263                           
  4264                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4265  128E  0181               	clrf	1	;volatile
  4266                           
  4267                           ;LCD_src.c: 11:  TRISE = 0X00;
  4268  128F  0189               	clrf	9	;volatile
  4269  1290  0008               	return
  4270  1291                     __end_of_init:	
  4271                           
  4272                           	psect	text11
  4273  146A                     __ptext11:	
  4274 ;; *************** function _get_time *****************
  4275 ;; Defined at:
  4276 ;;		line 23 in file "clock_src.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  i               2    6[COMMON] int 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 300/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4290 ;;      Params:         0       0       0       0       0
  4291 ;;      Locals:         2       0       0       0       0
  4292 ;;      Temps:          1       0       0       0       0
  4293 ;;      Totals:         3       0       0       0       0
  4294 ;;Total ram usage:        3 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    1
  4297 ;; This function calls:
  4298 ;;		_time_read_1
  4299 ;;		_time_write_1
  4300 ;; This function is called by:
  4301 ;;		_main
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           
  4306                           ;psect for function _get_time
  4307  146A                     _get_time:	
  4308                           
  4309                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4313  146A  1283               	bcf	3,5	;RP0=0, select bank0
  4314  146B  1303               	bcf	3,6	;RP1=0, select bank0
  4315  146C  1686               	bsf	6,5	;volatile
  4316                           
  4317                           ;clock_src.c: 27:    time_write_1(0xbf);
  4318  146D  30BF               	movlw	191
  4319  146E  160A  118A  241C  160A  118A  	fcall	_time_write_1
  4320                           
  4321                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4322  1473  01F6               	clrf	get_time@i
  4323  1474  01F7               	clrf	get_time@i+1
  4324  1475                     l3945:	
  4325                           
  4326                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4327  1475  160A  118A  24C4  160A  118A  	fcall	_time_read_1
  4328  147A  00F5               	movwf	??_get_time
  4329  147B  0876               	movf	get_time@i,w
  4330  147C  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4331  147D  0084               	movwf	4
  4332  147E  0875               	movf	??_get_time,w
  4333  147F  1383               	bcf	3,7	;select IRP bank1
  4334  1480  0080               	movwf	0
  4335                           
  4336                           ;clock_src.c: 31:      }
  4337  1481  3001               	movlw	1
  4338  1482  07F6               	addwf	get_time@i,f
  4339  1483  1803               	skipnc
  4340  1484  0AF7               	incf	get_time@i+1,f
  4341  1485  3000               	movlw	0
  4342  1486  07F7               	addwf	get_time@i+1,f
  4343  1487  0877               	movf	get_time@i+1,w
  4344  1488  3A80               	xorlw	128
  4345  1489  00FF               	movwf	127
  4346  148A  3080               	movlw	128
  4347  148B  027F               	subwf	127,w
  4348  148C  1D03               	skipz
  4349  148D  2C90               	goto	u3155
  4350  148E  3007               	movlw	7
  4351  148F  0276               	subwf	get_time@i,w
  4352  1490                     u3155:	
  4353  1490  1C03               	skipc
  4354  1491  2C75               	goto	l3945
  4355                           
  4356                           ;clock_src.c: 32:    RB5=0;
  4357  1492  1283               	bcf	3,5	;RP0=0, select bank0
  4358  1493  1303               	bcf	3,6	;RP1=0, select bank0
  4359  1494  1286               	bcf	6,5	;volatile
  4360  1495  0008               	return
  4361  1496                     __end_of_get_time:	
  4362                           
  4363                           	psect	text12
  4364  14C4                     __ptext12:	
  4365 ;; *************** function _time_read_1 *****************
  4366 ;; Defined at:
  4367 ;;		line 130 in file "clock_src.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;		None
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  j               2    2[COMMON] int 
  4372 ;;  time_rx         1    4[COMMON] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      unsigned char 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0, btemp+1
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 300/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4382 ;;      Params:         0       0       0       0       0
  4383 ;;      Locals:         3       0       0       0       0
  4384 ;;      Temps:          2       0       0       0       0
  4385 ;;      Totals:         5       0       0       0       0
  4386 ;;Total ram usage:        5 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_get_time
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function _time_read_1
  4397  14C4                     _time_read_1:	
  4398                           
  4399                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4400                           
  4401                           ;incstack = 0
  4402                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4403  14C4  01F4               	clrf	time_read_1@time_rx
  4404                           
  4405                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4406  14C5  1683               	bsf	3,5	;RP0=1, select bank1
  4407  14C6  1303               	bcf	3,6	;RP1=0, select bank1
  4408  14C7  1606               	bsf	6,4	;volatile
  4409                           
  4410                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4411  14C8  01F2               	clrf	time_read_1@j
  4412  14C9  01F3               	clrf	time_read_1@j+1
  4413  14CA                     l478:	
  4414                           
  4415                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4416  14CA  1283               	bcf	3,5	;RP0=0, select bank0
  4417  14CB  1303               	bcf	3,6	;RP1=0, select bank0
  4418  14CC  1006               	bcf	6,0	;volatile
  4419                           
  4420                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4421  14CD  0874               	movf	time_read_1@time_rx,w
  4422  14CE  00F0               	movwf	??_time_read_1
  4423  14CF  1003               	clrc
  4424  14D0  0C70               	rrf	??_time_read_1,w
  4425  14D1  00F1               	movwf	??_time_read_1+1
  4426  14D2  0871               	movf	??_time_read_1+1,w
  4427  14D3  00F4               	movwf	time_read_1@time_rx
  4428                           
  4429                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4430  14D4  1E06               	btfss	6,4	;volatile
  4431  14D5  2CDB               	goto	l3539
  4432  14D6  0874               	movf	time_read_1@time_rx,w
  4433  14D7  3880               	iorlw	128
  4434  14D8  00F0               	movwf	??_time_read_1
  4435  14D9  0870               	movf	??_time_read_1,w
  4436  14DA  00F4               	movwf	time_read_1@time_rx
  4437  14DB                     l3539:	
  4438                           
  4439                           ;clock_src.c: 141:        RB0=1;
  4440  14DB  1406               	bsf	6,0	;volatile
  4441                           
  4442                           ;clock_src.c: 142:       }
  4443  14DC  3001               	movlw	1
  4444  14DD  07F2               	addwf	time_read_1@j,f
  4445  14DE  1803               	skipnc
  4446  14DF  0AF3               	incf	time_read_1@j+1,f
  4447  14E0  3000               	movlw	0
  4448  14E1  07F3               	addwf	time_read_1@j+1,f
  4449  14E2  0873               	movf	time_read_1@j+1,w
  4450  14E3  3A80               	xorlw	128
  4451  14E4  00FF               	movwf	127
  4452  14E5  3080               	movlw	128
  4453  14E6  027F               	subwf	127,w
  4454  14E7  1D03               	skipz
  4455  14E8  2CEB               	goto	u2335
  4456  14E9  3008               	movlw	8
  4457  14EA  0272               	subwf	time_read_1@j,w
  4458  14EB                     u2335:	
  4459  14EB  1C03               	skipc
  4460  14EC  2CCA               	goto	l478
  4461                           
  4462                           ;clock_src.c: 143:     TRISB4=0;
  4463  14ED  1683               	bsf	3,5	;RP0=1, select bank1
  4464  14EE  1303               	bcf	3,6	;RP1=0, select bank1
  4465  14EF  1206               	bcf	6,4	;volatile
  4466                           
  4467                           ;clock_src.c: 144:     RB0=0;
  4468  14F0  1283               	bcf	3,5	;RP0=0, select bank0
  4469  14F1  1006               	bcf	6,0	;volatile
  4470                           
  4471                           ;clock_src.c: 145:     return(time_rx);
  4472  14F2  0874               	movf	time_read_1@time_rx,w
  4473  14F3  0008               	return
  4474  14F4                     __end_of_time_read_1:	
  4475                           
  4476                           	psect	text13
  4477  08B7                     __ptext13:	
  4478 ;; *************** function _get_temp *****************
  4479 ;; Defined at:
  4480 ;;		line 89 in file "Thermometer_src.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;		None
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  i               2    0        int 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      void 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 200/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4494 ;;      Params:         0       0       0       0       0
  4495 ;;      Locals:         0       0       0       0       0
  4496 ;;      Temps:          0       4       0       0       0
  4497 ;;      Totals:         0       4       0       0       0
  4498 ;;Total ram usage:        4 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    2
  4501 ;; This function calls:
  4502 ;;		___lbdiv
  4503 ;;		___lbmod
  4504 ;;		___lwdiv
  4505 ;;		___lwmod
  4506 ;;		_delay2
  4507 ;;		_read_byte
  4508 ;;		_reset_temp
  4509 ;;		_write_byte
  4510 ;; This function is called by:
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _get_temp
  4517  08B7                     _get_temp:	
  4518                           
  4519                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4523  08B7  1683               	bsf	3,5	;RP0=1, select bank1
  4524  08B8  1409               	bsf	9,0	;volatile
  4525                           
  4526                           ;Thermometer_src.c: 93: reset_temp();
  4527  08B9  160A  118A  255A  120A  158A  	fcall	_reset_temp
  4528                           
  4529                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4530  08BE  30CC               	movlw	204
  4531  08BF  160A  118A  258E  120A  158A  	fcall	_write_byte
  4532                           
  4533                           ;Thermometer_src.c: 95: delay2();
  4534  08C4  160A  118A  22FD  120A  158A  	fcall	_delay2
  4535                           
  4536                           ;Thermometer_src.c: 96: write_byte(0X44);
  4537  08C9  3044               	movlw	68
  4538  08CA  160A  118A  258E  120A  158A  	fcall	_write_byte
  4539                           
  4540                           ;Thermometer_src.c: 98: reset_temp();
  4541  08CF  160A  118A  255A  120A  158A  	fcall	_reset_temp
  4542                           
  4543                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4544  08D4  30CC               	movlw	204
  4545  08D5  160A  118A  258E  120A  158A  	fcall	_write_byte
  4546                           
  4547                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4548  08DA  30BE               	movlw	190
  4549  08DB  160A  118A  258E  120A  158A  	fcall	_write_byte
  4550                           
  4551                           ;Thermometer_src.c: 101: TLV=read_byte();
  4552  08E0  160A  118A  2526  120A  158A  	fcall	_read_byte
  4553  08E5  1283               	bcf	3,5	;RP0=0, select bank0
  4554  08E6  1303               	bcf	3,6	;RP1=0, select bank0
  4555  08E7  00E0               	movwf	??_get_temp
  4556  08E8  0860               	movf	??_get_temp,w
  4557  08E9  00DF               	movwf	_TLV
  4558                           
  4559                           ;Thermometer_src.c: 102: THV=read_byte();
  4560  08EA  160A  118A  2526  120A  158A  	fcall	_read_byte
  4561  08EF  1283               	bcf	3,5	;RP0=0, select bank0
  4562  08F0  1303               	bcf	3,6	;RP1=0, select bank0
  4563  08F1  00E0               	movwf	??_get_temp
  4564  08F2  0860               	movf	??_get_temp,w
  4565  08F3  00DE               	movwf	_THV
  4566                           
  4567                           ;Thermometer_src.c: 103: TRISE0 =1;
  4568  08F4  1683               	bsf	3,5	;RP0=1, select bank1
  4569  08F5  1409               	bsf	9,0	;volatile
  4570                           
  4571                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4572  08F6  1283               	bcf	3,5	;RP0=0, select bank0
  4573  08F7  085E               	movf	_THV,w
  4574  08F8  00E0               	movwf	??_get_temp
  4575  08F9  3004               	movlw	4
  4576  08FA                     u3085:	
  4577  08FA  1003               	clrc
  4578  08FB  0DE0               	rlf	??_get_temp,f
  4579  08FC  3EFF               	addlw	-1
  4580  08FD  1D03               	skipz
  4581  08FE  28FA               	goto	u3085
  4582  08FF  303F               	movlw	63
  4583  0900  0560               	andwf	??_get_temp,w
  4584  0901  00E1               	movwf	??_get_temp+1
  4585  0902  085F               	movf	_TLV,w
  4586  0903  00E2               	movwf	??_get_temp+2
  4587  0904  3004               	movlw	4
  4588  0905                     u3095:	
  4589  0905  1003               	clrc
  4590  0906  0CE2               	rrf	??_get_temp+2,f
  4591  0907  3EFF               	addlw	-1
  4592  0908  1D03               	skipz
  4593  0909  2905               	goto	u3095
  4594  090A  0862               	movf	??_get_temp+2,w
  4595  090B  0461               	iorwf	??_get_temp+1,w
  4596  090C  00E3               	movwf	??_get_temp+3
  4597  090D  0863               	movf	??_get_temp+3,w
  4598  090E  00DD               	movwf	_TZ
  4599                           
  4600                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4601  090F  085F               	movf	_TLV,w
  4602  0910  00E0               	movwf	??_get_temp
  4603  0911  3003               	movlw	3
  4604  0912                     u3105:	
  4605  0912  1003               	clrc
  4606  0913  0DE0               	rlf	??_get_temp,f
  4607  0914  3EFF               	addlw	-1
  4608  0915  1D03               	skipz
  4609  0916  2912               	goto	u3105
  4610  0917  1003               	clrc
  4611  0918  0D60               	rlf	??_get_temp,w
  4612  0919  00E1               	movwf	??_get_temp+1
  4613  091A  0861               	movf	??_get_temp+1,w
  4614  091B  00DC               	movwf	_TX
  4615                           
  4616                           ;Thermometer_src.c: 107: ge=TZ%10;
  4617  091C  300A               	movlw	10
  4618  091D  00E0               	movwf	??_get_temp
  4619  091E  0860               	movf	??_get_temp,w
  4620  091F  00F0               	movwf	___lbmod@divisor
  4621  0920  085D               	movf	_TZ,w
  4622  0921  160A  118A  23B2  120A  158A  	fcall	___lbmod
  4623  0926  00E1               	movwf	??_get_temp+1
  4624  0927  0861               	movf	??_get_temp+1,w
  4625  0928  00DA               	movwf	_ge
  4626                           
  4627                           ;Thermometer_src.c: 108: shi=TZ/10;
  4628  0929  300A               	movlw	10
  4629  092A  00E0               	movwf	??_get_temp
  4630  092B  0860               	movf	??_get_temp,w
  4631  092C  00F0               	movwf	___lbdiv@divisor
  4632  092D  085D               	movf	_TZ,w
  4633  092E  160A  118A  2391  120A  158A  	fcall	___lbdiv
  4634  0933  00E1               	movwf	??_get_temp+1
  4635  0934  0861               	movf	??_get_temp+1,w
  4636  0935  00DB               	movwf	_shi
  4637                           
  4638                           ;Thermometer_src.c: 109: wd=0;
  4639  0936  01BE               	clrf	_wd
  4640  0937  01BF               	clrf	_wd+1
  4641                           
  4642                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4643  0938  1FDC               	btfss	_TX,7
  4644  0939  2942               	goto	l3913
  4645  093A  083E               	movf	_wd,w
  4646  093B  3E88               	addlw	136
  4647  093C  00BE               	movwf	_wd
  4648  093D  083F               	movf	_wd+1,w
  4649  093E  1803               	skipnc
  4650  093F  3E01               	addlw	1
  4651  0940  3E13               	addlw	19
  4652  0941  00BF               	movwf	_wd+1
  4653  0942                     l3913:	
  4654                           
  4655                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4656  0942  1F5C               	btfss	_TX,6
  4657  0943  294C               	goto	l3917
  4658  0944  083E               	movf	_wd,w
  4659  0945  3EC4               	addlw	196
  4660  0946  00BE               	movwf	_wd
  4661  0947  083F               	movf	_wd+1,w
  4662  0948  1803               	skipnc
  4663  0949  3E01               	addlw	1
  4664  094A  3E09               	addlw	9
  4665  094B  00BF               	movwf	_wd+1
  4666  094C                     l3917:	
  4667                           
  4668                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4669  094C  1EDC               	btfss	_TX,5
  4670  094D  2956               	goto	l3921
  4671  094E  083E               	movf	_wd,w
  4672  094F  3EE2               	addlw	226
  4673  0950  00BE               	movwf	_wd
  4674  0951  083F               	movf	_wd+1,w
  4675  0952  1803               	skipnc
  4676  0953  3E01               	addlw	1
  4677  0954  3E04               	addlw	4
  4678  0955  00BF               	movwf	_wd+1
  4679  0956                     l3921:	
  4680                           
  4681                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4682  0956  1E5C               	btfss	_TX,4
  4683  0957  2960               	goto	l3925
  4684  0958  083E               	movf	_wd,w
  4685  0959  3E71               	addlw	113
  4686  095A  00BE               	movwf	_wd
  4687  095B  083F               	movf	_wd+1,w
  4688  095C  1803               	skipnc
  4689  095D  3E01               	addlw	1
  4690  095E  3E02               	addlw	2
  4691  095F  00BF               	movwf	_wd+1
  4692  0960                     l3925:	
  4693                           
  4694                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4695  0960  30E8               	movlw	232
  4696  0961  00F6               	movwf	___lwdiv@divisor
  4697  0962  3003               	movlw	3
  4698  0963  00F7               	movwf	___lwdiv@divisor+1
  4699  0964  083F               	movf	_wd+1,w
  4700  0965  00F9               	movwf	___lwdiv@dividend+1
  4701  0966  083E               	movf	_wd,w
  4702  0967  00F8               	movwf	___lwdiv@dividend
  4703  0968  160A  118A  25C4  120A  158A  	fcall	___lwdiv
  4704  096D  0876               	movf	?___lwdiv,w
  4705  096E  00E0               	movwf	??_get_temp
  4706  096F  0860               	movf	??_get_temp,w
  4707  0970  00D9               	movwf	_shifen
  4708                           
  4709                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4710  0971  3064               	movlw	100
  4711  0972  00F6               	movwf	___lwdiv@divisor
  4712  0973  3000               	movlw	0
  4713  0974  00F7               	movwf	___lwdiv@divisor+1
  4714  0975  083F               	movf	_wd+1,w
  4715  0976  00F3               	movwf	___lwmod@dividend+1
  4716  0977  083E               	movf	_wd,w
  4717  0978  00F2               	movwf	___lwmod@dividend
  4718  0979  30E8               	movlw	232
  4719  097A  00F0               	movwf	___lwmod@divisor
  4720  097B  3003               	movlw	3
  4721  097C  00F1               	movwf	___lwmod@divisor+1
  4722  097D  160A  118A  24F4  120A  158A  	fcall	___lwmod
  4723  0982  0871               	movf	?___lwmod+1,w
  4724  0983  00F9               	movwf	___lwdiv@dividend+1
  4725  0984  0870               	movf	?___lwmod,w
  4726  0985  00F8               	movwf	___lwdiv@dividend
  4727  0986  160A  118A  25C4  120A  158A  	fcall	___lwdiv
  4728  098B  0876               	movf	?___lwdiv,w
  4729  098C  00E0               	movwf	??_get_temp
  4730  098D  0860               	movf	??_get_temp,w
  4731  098E  00D8               	movwf	_baifen
  4732                           
  4733                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4734  098F  300A               	movlw	10
  4735  0990  00F6               	movwf	___lwdiv@divisor
  4736  0991  3000               	movlw	0
  4737  0992  00F7               	movwf	___lwdiv@divisor+1
  4738  0993  083F               	movf	_wd+1,w
  4739  0994  00F3               	movwf	___lwmod@dividend+1
  4740  0995  083E               	movf	_wd,w
  4741  0996  00F2               	movwf	___lwmod@dividend
  4742  0997  3064               	movlw	100
  4743  0998  00F0               	movwf	___lwmod@divisor
  4744  0999  3000               	movlw	0
  4745  099A  00F1               	movwf	___lwmod@divisor+1
  4746  099B  160A  118A  24F4  120A  158A  	fcall	___lwmod
  4747  09A0  0871               	movf	?___lwmod+1,w
  4748  09A1  00F9               	movwf	___lwdiv@dividend+1
  4749  09A2  0870               	movf	?___lwmod,w
  4750  09A3  00F8               	movwf	___lwdiv@dividend
  4751  09A4  160A  118A  25C4  120A  158A  	fcall	___lwdiv
  4752  09A9  0876               	movf	?___lwdiv,w
  4753  09AA  00E0               	movwf	??_get_temp
  4754  09AB  0860               	movf	??_get_temp,w
  4755  09AC  00D7               	movwf	_qianfen
  4756                           
  4757                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4758  09AD  300A               	movlw	10
  4759  09AE  00F0               	movwf	___lwmod@divisor
  4760  09AF  3000               	movlw	0
  4761  09B0  00F1               	movwf	___lwmod@divisor+1
  4762  09B1  083F               	movf	_wd+1,w
  4763  09B2  00F3               	movwf	___lwmod@dividend+1
  4764  09B3  083E               	movf	_wd,w
  4765  09B4  00F2               	movwf	___lwmod@dividend
  4766  09B5  160A  118A  24F4   	fcall	___lwmod
  4767  09B8  0870               	movf	?___lwmod,w
  4768  09B9  00E0               	movwf	??_get_temp
  4769  09BA  0860               	movf	??_get_temp,w
  4770  09BB  00D6               	movwf	_wanfen
  4771                           
  4772                           ;Thermometer_src.c: 118: __nop();
  4773  09BC  0000               	nop
  4774  09BD  0008               	return
  4775  09BE                     __end_of_get_temp:	
  4776                           
  4777                           	psect	text14
  4778  158E                     __ptext14:	
  4779 ;; *************** function _write_byte *****************
  4780 ;; Defined at:
  4781 ;;		line 40 in file "Thermometer_src.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  val             1    wreg     unsigned char 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  val             1    7[COMMON] unsigned char 
  4786 ;;  i               1    8[COMMON] unsigned char 
  4787 ;;  temp            1    6[COMMON] unsigned char 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      void 
  4790 ;; Registers used:
  4791 ;;		wreg, status,2, status,0, pclath, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/100
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4797 ;;      Params:         0       0       0       0       0
  4798 ;;      Locals:         3       0       0       0       0
  4799 ;;      Temps:          2       0       0       0       0
  4800 ;;      Totals:         5       0       0       0       0
  4801 ;;Total ram usage:        5 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    1
  4804 ;; This function calls:
  4805 ;;		_delay_temp
  4806 ;; This function is called by:
  4807 ;;		_get_temp
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function _write_byte
  4813  158E                     _write_byte:	
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4817                           ;write_byte@val stored from wreg
  4818  158E  00F7               	movwf	write_byte@val
  4819                           
  4820                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4821  158F  3008               	movlw	8
  4822  1590  00F4               	movwf	??_write_byte
  4823  1591  0874               	movf	??_write_byte,w
  4824  1592  00F8               	movwf	write_byte@i
  4825  1593                     l3427:	
  4826                           
  4827                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4828  1593  0877               	movf	write_byte@val,w
  4829  1594  3901               	andlw	1
  4830  1595  00F4               	movwf	??_write_byte
  4831  1596  0874               	movf	??_write_byte,w
  4832  1597  00F6               	movwf	write_byte@temp
  4833                           
  4834                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4835  1598  1283               	bcf	3,5	;RP0=0, select bank0
  4836  1599  1303               	bcf	3,6	;RP1=0, select bank0
  4837  159A  1009               	bcf	9,0	;volatile
  4838  159B  1683               	bsf	3,5	;RP0=1, select bank1
  4839  159C  1009               	bcf	9,0	;volatile
  4840                           
  4841                           ;Thermometer_src.c: 48:    __nop();
  4842  159D  0000               	nop
  4843                           
  4844                           ;Thermometer_src.c: 49:    __nop();
  4845  159E  0000               	nop
  4846                           
  4847                           ;Thermometer_src.c: 50:    __nop();
  4848  159F  0000               	nop
  4849                           
  4850                           ;Thermometer_src.c: 51:    __nop();
  4851  15A0  0000               	nop
  4852                           
  4853                           ;Thermometer_src.c: 52:    __nop();
  4854  15A1  0000               	nop
  4855                           
  4856                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4857  15A2  0376               	decf	write_byte@temp,w
  4858  15A3  1D03               	btfss	3,2
  4859  15A4  2DA8               	goto	l3447
  4860  15A5  1683               	bsf	3,5	;RP0=1, select bank1
  4861  15A6  1303               	bcf	3,6	;RP1=0, select bank1
  4862  15A7  1409               	bsf	9,0	;volatile
  4863  15A8                     l3447:	
  4864                           
  4865                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4866  15A8  3007               	movlw	7
  4867  15A9  00F4               	movwf	??_write_byte
  4868  15AA  0874               	movf	??_write_byte,w
  4869  15AB  00F0               	movwf	delay_temp@y
  4870  15AC  3002               	movlw	2
  4871  15AD  160A  118A  2299  160A  118A  	fcall	_delay_temp
  4872                           
  4873                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4874  15B2  1683               	bsf	3,5	;RP0=1, select bank1
  4875  15B3  1303               	bcf	3,6	;RP1=0, select bank1
  4876  15B4  1409               	bsf	9,0	;volatile
  4877                           
  4878                           ;Thermometer_src.c: 56:    __nop();
  4879  15B5  0000               	nop
  4880                           
  4881                           ;Thermometer_src.c: 57:    __nop();
  4882  15B6  0000               	nop
  4883                           
  4884                           ;Thermometer_src.c: 58:    val=val>>1;
  4885  15B7  0877               	movf	write_byte@val,w
  4886  15B8  00F4               	movwf	??_write_byte
  4887  15B9  1003               	clrc
  4888  15BA  0C74               	rrf	??_write_byte,w
  4889  15BB  00F5               	movwf	??_write_byte+1
  4890  15BC  0875               	movf	??_write_byte+1,w
  4891  15BD  00F7               	movwf	write_byte@val
  4892                           
  4893                           ;Thermometer_src.c: 59:   }
  4894  15BE  3001               	movlw	1
  4895  15BF  02F8               	subwf	write_byte@i,f
  4896  15C0  0878               	movf	write_byte@i,w
  4897  15C1  1903               	btfsc	3,2
  4898  15C2  0008               	return
  4899  15C3  2D93               	goto	l3427
  4900  15C4                     __end_of_write_byte:	
  4901                           
  4902                           	psect	text15
  4903  155A                     __ptext15:	
  4904 ;; *************** function _reset_temp *****************
  4905 ;; Defined at:
  4906 ;;		line 25 in file "Thermometer_src.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  presence        1    5[COMMON] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0, pclath, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/100
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4920 ;;      Params:         0       0       0       0       0
  4921 ;;      Locals:         1       0       0       0       0
  4922 ;;      Temps:          1       0       0       0       0
  4923 ;;      Totals:         2       0       0       0       0
  4924 ;;Total ram usage:        2 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    1
  4927 ;; This function calls:
  4928 ;;		_delay_temp
  4929 ;; This function is called by:
  4930 ;;		_get_temp
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function _reset_temp
  4936  155A                     _reset_temp:	
  4937                           
  4938                           ;Thermometer_src.c: 27:   char presence=1;
  4939                           
  4940                           ;incstack = 0
  4941                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4942  155A  01F5               	clrf	reset_temp@presence
  4943  155B  0AF5               	incf	reset_temp@presence,f
  4944  155C                     l3419:	
  4945                           ;Thermometer_src.c: 28:   while(presence)
  4946                           
  4947                           
  4948                           ;Thermometer_src.c: 28:   while(presence)
  4949  155C  0875               	movf	reset_temp@presence,w
  4950  155D  1903               	btfsc	3,2
  4951  155E  0008               	return
  4952                           
  4953                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4954  155F  1283               	bcf	3,5	;RP0=0, select bank0
  4955  1560  1303               	bcf	3,6	;RP1=0, select bank0
  4956  1561  1009               	bcf	9,0	;volatile
  4957  1562  1683               	bsf	3,5	;RP0=1, select bank1
  4958  1563  1009               	bcf	9,0	;volatile
  4959                           
  4960                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4961  1564  3046               	movlw	70
  4962  1565  00F4               	movwf	??_reset_temp
  4963  1566  0874               	movf	??_reset_temp,w
  4964  1567  00F0               	movwf	delay_temp@y
  4965  1568  3002               	movlw	2
  4966  1569  160A  118A  2299  160A  118A  	fcall	_delay_temp
  4967                           
  4968                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4969  156E  1683               	bsf	3,5	;RP0=1, select bank1
  4970  156F  1303               	bcf	3,6	;RP1=0, select bank1
  4971  1570  1409               	bsf	9,0	;volatile
  4972                           
  4973                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4974  1571  3008               	movlw	8
  4975  1572  00F4               	movwf	??_reset_temp
  4976  1573  0874               	movf	??_reset_temp,w
  4977  1574  00F0               	movwf	delay_temp@y
  4978  1575  3002               	movlw	2
  4979  1576  160A  118A  2299  160A  118A  	fcall	_delay_temp
  4980                           
  4981                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4982  157B  1283               	bcf	3,5	;RP0=0, select bank0
  4983  157C  1303               	bcf	3,6	;RP1=0, select bank0
  4984  157D  1C09               	btfss	9,0	;volatile
  4985  157E  2D82               	goto	l3415
  4986  157F  01F5               	clrf	reset_temp@presence
  4987  1580  0AF5               	incf	reset_temp@presence,f
  4988  1581  2D83               	goto	l3417
  4989  1582                     l3415:	
  4990  1582  01F5               	clrf	reset_temp@presence
  4991  1583                     l3417:	
  4992                           
  4993                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4994  1583  303C               	movlw	60
  4995  1584  00F4               	movwf	??_reset_temp
  4996  1585  0874               	movf	??_reset_temp,w
  4997  1586  00F0               	movwf	delay_temp@y
  4998  1587  3002               	movlw	2
  4999  1588  160A  118A  2299  160A  118A  	fcall	_delay_temp
  5000  158D  2D5C               	goto	l3419
  5001  158E                     __end_of_reset_temp:	
  5002                           
  5003                           	psect	text16
  5004  1526                     __ptext16:	
  5005 ;; *************** function _read_byte *****************
  5006 ;; Defined at:
  5007 ;;		line 62 in file "Thermometer_src.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;		None
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  i               1    6[COMMON] unsigned char 
  5012 ;;  value           1    5[COMMON] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      unsigned char 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0, pclath, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/100
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5022 ;;      Params:         0       0       0       0       0
  5023 ;;      Locals:         2       0       0       0       0
  5024 ;;      Temps:          1       0       0       0       0
  5025 ;;      Totals:         3       0       0       0       0
  5026 ;;Total ram usage:        3 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    1
  5029 ;; This function calls:
  5030 ;;		_delay_temp
  5031 ;; This function is called by:
  5032 ;;		_get_temp
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _read_byte
  5038  1526                     _read_byte:	
  5039                           
  5040                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  5041                           
  5042                           ;incstack = 0
  5043                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5044  1526  01F5               	clrf	read_byte@value
  5045                           
  5046                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  5047  1527  3008               	movlw	8
  5048  1528  00F4               	movwf	??_read_byte
  5049  1529  0874               	movf	??_read_byte,w
  5050  152A  00F6               	movwf	read_byte@i
  5051  152B                     l3469:	
  5052                           
  5053                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  5054  152B  1003               	clrc
  5055  152C  0CF5               	rrf	read_byte@value,f
  5056                           
  5057                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  5058  152D  1283               	bcf	3,5	;RP0=0, select bank0
  5059  152E  1303               	bcf	3,6	;RP1=0, select bank0
  5060  152F  1009               	bcf	9,0	;volatile
  5061  1530  1683               	bsf	3,5	;RP0=1, select bank1
  5062  1531  1009               	bcf	9,0	;volatile
  5063                           
  5064                           ;Thermometer_src.c: 71:    __nop();
  5065  1532  0000               	nop
  5066                           
  5067                           ;Thermometer_src.c: 72:    __nop();
  5068  1533  0000               	nop
  5069                           
  5070                           ;Thermometer_src.c: 73:    __nop();
  5071  1534  0000               	nop
  5072                           
  5073                           ;Thermometer_src.c: 74:    __nop();
  5074  1535  0000               	nop
  5075                           
  5076                           ;Thermometer_src.c: 75:    __nop();
  5077  1536  0000               	nop
  5078                           
  5079                           ;Thermometer_src.c: 76:    __nop();
  5080  1537  0000               	nop
  5081                           
  5082                           ;Thermometer_src.c: 77:    TRISE0 =1;
  5083  1538  1683               	bsf	3,5	;RP0=1, select bank1
  5084  1539  1303               	bcf	3,6	;RP1=0, select bank1
  5085  153A  1409               	bsf	9,0	;volatile
  5086                           
  5087                           ;Thermometer_src.c: 78:    __nop();
  5088  153B  0000               	nop
  5089                           
  5090                           ;Thermometer_src.c: 79:    __nop();
  5091  153C  0000               	nop
  5092                           
  5093                           ;Thermometer_src.c: 80:    __nop();
  5094  153D  0000               	nop
  5095                           
  5096                           ;Thermometer_src.c: 81:    __nop();
  5097  153E  0000               	nop
  5098                           
  5099                           ;Thermometer_src.c: 82:    __nop();
  5100  153F  0000               	nop
  5101                           
  5102                           ;Thermometer_src.c: 83:    j=RE0;
  5103  1540  3000               	movlw	0
  5104  1541  1283               	bcf	3,5	;RP0=0, select bank0
  5105  1542  1303               	bcf	3,6	;RP1=0, select bank0
  5106  1543  1809               	btfsc	9,0	;volatile
  5107  1544  3001               	movlw	1
  5108  1545  00C0               	movwf	read_byte@j
  5109                           
  5110                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  5111  1546  0840               	movf	read_byte@j,w
  5112  1547  1D03               	btfss	3,2
  5113  1548  17F5               	bsf	read_byte@value,7
  5114                           
  5115                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  5116  1549  3007               	movlw	7
  5117  154A  00F4               	movwf	??_read_byte
  5118  154B  0874               	movf	??_read_byte,w
  5119  154C  00F0               	movwf	delay_temp@y
  5120  154D  3002               	movlw	2
  5121  154E  160A  118A  2299  160A  118A  	fcall	_delay_temp
  5122                           
  5123                           ;Thermometer_src.c: 86:   }
  5124  1553  3001               	movlw	1
  5125  1554  02F6               	subwf	read_byte@i,f
  5126  1555  0876               	movf	read_byte@i,w
  5127  1556  1D03               	btfss	3,2
  5128  1557  2D2B               	goto	l3469
  5129                           
  5130                           ;Thermometer_src.c: 87:   return(value);
  5131  1558  0875               	movf	read_byte@value,w
  5132  1559  0008               	return
  5133  155A                     __end_of_read_byte:	
  5134                           
  5135                           	psect	text17
  5136  1299                     __ptext17:	
  5137 ;; *************** function _delay_temp *****************
  5138 ;; Defined at:
  5139 ;;		line 121 in file "Thermometer_src.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  x               1    wreg     unsigned char 
  5142 ;;  y               1    0[COMMON] unsigned char 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  x               1    2[COMMON] unsigned char 
  5145 ;;  z               1    3[COMMON] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/100
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5155 ;;      Params:         1       0       0       0       0
  5156 ;;      Locals:         2       0       0       0       0
  5157 ;;      Temps:          1       0       0       0       0
  5158 ;;      Totals:         4       0       0       0       0
  5159 ;;Total ram usage:        4 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_reset_temp
  5165 ;;		_write_byte
  5166 ;;		_read_byte
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function _delay_temp
  5172  1299                     _delay_temp:	
  5173                           
  5174                           ;incstack = 0
  5175                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5176                           ;delay_temp@x stored from wreg
  5177  1299  00F2               	movwf	delay_temp@x
  5178  129A                     l357:	
  5179                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5180                           
  5181                           
  5182                           ;Thermometer_src.c: 125:  z=y;
  5183  129A  0870               	movf	delay_temp@y,w
  5184  129B  00F1               	movwf	??_delay_temp
  5185  129C  0871               	movf	??_delay_temp,w
  5186  129D  00F3               	movwf	delay_temp@z
  5187  129E                     l3345:	
  5188  129E  3001               	movlw	1
  5189  129F  02F3               	subwf	delay_temp@z,f
  5190  12A0  1D03               	btfss	3,2
  5191  12A1  2A9E               	goto	l3345
  5192                           
  5193                           ;Thermometer_src.c: 127:  }while(--x);
  5194  12A2  3001               	movlw	1
  5195  12A3  02F2               	subwf	delay_temp@x,f
  5196  12A4  1903               	btfsc	3,2
  5197  12A5  0008               	return
  5198  12A6  2A9A               	goto	l357
  5199  12A7                     __end_of_delay_temp:	
  5200                           
  5201                           	psect	text18
  5202  12FD                     __ptext18:	
  5203 ;; *************** function _delay2 *****************
  5204 ;; Defined at:
  5205 ;;		line 130 in file "Thermometer_src.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;		None
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  i               2    0[COMMON] int 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  1    wreg      void 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, btemp+1
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/100
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5219 ;;      Params:         0       0       0       0       0
  5220 ;;      Locals:         2       0       0       0       0
  5221 ;;      Temps:          0       0       0       0       0
  5222 ;;      Totals:         2       0       0       0       0
  5223 ;;Total ram usage:        2 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_get_temp
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           
  5233                           ;psect for function _delay2
  5234  12FD                     _delay2:	
  5235                           
  5236                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5237                           
  5238                           ;incstack = 0
  5239                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5240  12FD  01F0               	clrf	delay2@i
  5241  12FE  01F1               	clrf	delay2@i+1
  5242  12FF                     l3521:	
  5243                           
  5244                           ;Thermometer_src.c: 132:  }
  5245  12FF  3001               	movlw	1
  5246  1300  07F0               	addwf	delay2@i,f
  5247  1301  1803               	skipnc
  5248  1302  0AF1               	incf	delay2@i+1,f
  5249  1303  3000               	movlw	0
  5250  1304  07F1               	addwf	delay2@i+1,f
  5251  1305  0871               	movf	delay2@i+1,w
  5252  1306  3A80               	xorlw	128
  5253  1307  00FF               	movwf	127
  5254  1308  3080               	movlw	128
  5255  1309  027F               	subwf	127,w
  5256  130A  1D03               	skipz
  5257  130B  2B0E               	goto	u2315
  5258  130C  3032               	movlw	50
  5259  130D  0270               	subwf	delay2@i,w
  5260  130E                     u2315:	
  5261  130E  1803               	btfsc	3,0
  5262  130F  0008               	return
  5263  1310  2AFF               	goto	l3521
  5264  1311                     __end_of_delay2:	
  5265                           
  5266                           	psect	text19
  5267  14F4                     __ptext19:	
  5268 ;; *************** function ___lwmod *****************
  5269 ;; Defined at:
  5270 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  divisor         2    0[COMMON] unsigned int 
  5273 ;;  dividend        2    2[COMMON] unsigned int 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  counter         1    5[COMMON] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  2    0[COMMON] unsigned int 
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, status,0
  5280 ;; Tracked objects:
  5281 ;;		On entry : 300/0
  5282 ;;		On exit  : 300/0
  5283 ;;		Unchanged: 300/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5285 ;;      Params:         4       0       0       0       0
  5286 ;;      Locals:         1       0       0       0       0
  5287 ;;      Temps:          1       0       0       0       0
  5288 ;;      Totals:         6       0       0       0       0
  5289 ;;Total ram usage:        6 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_get_temp
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function ___lwmod
  5300  14F4                     ___lwmod:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5304  14F4  0870               	movf	___lwmod@divisor,w
  5305  14F5  0471               	iorwf	___lwmod@divisor+1,w
  5306  14F6  1903               	btfsc	3,2
  5307  14F7  2D21               	goto	l3825
  5308  14F8  01F5               	clrf	___lwmod@counter
  5309  14F9  0AF5               	incf	___lwmod@counter,f
  5310  14FA                     l3815:	
  5311  14FA  1BF1               	btfsc	___lwmod@divisor+1,7
  5312  14FB  2D08               	goto	l3817
  5313  14FC  3001               	movlw	1
  5314  14FD                     u3035:	
  5315  14FD  1003               	clrc
  5316  14FE  0DF0               	rlf	___lwmod@divisor,f
  5317  14FF  0DF1               	rlf	___lwmod@divisor+1,f
  5318  1500  3EFF               	addlw	-1
  5319  1501  1D03               	skipz
  5320  1502  2CFD               	goto	u3035
  5321  1503  3001               	movlw	1
  5322  1504  00F4               	movwf	??___lwmod
  5323  1505  0874               	movf	??___lwmod,w
  5324  1506  07F5               	addwf	___lwmod@counter,f
  5325  1507  2CFA               	goto	l3815
  5326  1508                     l3817:	
  5327  1508  0871               	movf	___lwmod@divisor+1,w
  5328  1509  0273               	subwf	___lwmod@dividend+1,w
  5329  150A  1D03               	skipz
  5330  150B  2D0E               	goto	u3055
  5331  150C  0870               	movf	___lwmod@divisor,w
  5332  150D  0272               	subwf	___lwmod@dividend,w
  5333  150E                     u3055:	
  5334  150E  1C03               	skipc
  5335  150F  2D16               	goto	l3821
  5336  1510  0870               	movf	___lwmod@divisor,w
  5337  1511  02F2               	subwf	___lwmod@dividend,f
  5338  1512  0871               	movf	___lwmod@divisor+1,w
  5339  1513  1C03               	skipc
  5340  1514  03F3               	decf	___lwmod@dividend+1,f
  5341  1515  02F3               	subwf	___lwmod@dividend+1,f
  5342  1516                     l3821:	
  5343  1516  3001               	movlw	1
  5344  1517                     u3065:	
  5345  1517  1003               	clrc
  5346  1518  0CF1               	rrf	___lwmod@divisor+1,f
  5347  1519  0CF0               	rrf	___lwmod@divisor,f
  5348  151A  3EFF               	addlw	-1
  5349  151B  1D03               	skipz
  5350  151C  2D17               	goto	u3065
  5351  151D  3001               	movlw	1
  5352  151E  02F5               	subwf	___lwmod@counter,f
  5353  151F  1D03               	btfss	3,2
  5354  1520  2D08               	goto	l3817
  5355  1521                     l3825:	
  5356  1521  0873               	movf	___lwmod@dividend+1,w
  5357  1522  00F1               	movwf	?___lwmod+1
  5358  1523  0872               	movf	___lwmod@dividend,w
  5359  1524  00F0               	movwf	?___lwmod
  5360  1525  0008               	return
  5361  1526                     __end_of___lwmod:	
  5362                           
  5363                           	psect	text20
  5364  15C4                     __ptext20:	
  5365 ;; *************** function ___lwdiv *****************
  5366 ;; Defined at:
  5367 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;  divisor         2    6[COMMON] unsigned int 
  5370 ;;  dividend        2    8[COMMON] unsigned int 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  quotient        2   11[COMMON] unsigned int 
  5373 ;;  counter         1   13[COMMON] unsigned char 
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  2    6[COMMON] unsigned int 
  5376 ;; Registers used:
  5377 ;;		wreg, status,2, status,0
  5378 ;; Tracked objects:
  5379 ;;		On entry : 300/0
  5380 ;;		On exit  : 300/0
  5381 ;;		Unchanged: 300/0
  5382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5383 ;;      Params:         4       0       0       0       0
  5384 ;;      Locals:         3       0       0       0       0
  5385 ;;      Temps:          1       0       0       0       0
  5386 ;;      Totals:         8       0       0       0       0
  5387 ;;Total ram usage:        8 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_get_temp
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function ___lwdiv
  5398  15C4                     ___lwdiv:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5402  15C4  01FB               	clrf	___lwdiv@quotient
  5403  15C5  01FC               	clrf	___lwdiv@quotient+1
  5404  15C6  0876               	movf	___lwdiv@divisor,w
  5405  15C7  0477               	iorwf	___lwdiv@divisor+1,w
  5406  15C8  1903               	btfsc	3,2
  5407  15C9  2DFB               	goto	l3803
  5408  15CA  01FD               	clrf	___lwdiv@counter
  5409  15CB  0AFD               	incf	___lwdiv@counter,f
  5410  15CC                     l3791:	
  5411  15CC  1BF7               	btfsc	___lwdiv@divisor+1,7
  5412  15CD  2DDA               	goto	l3793
  5413  15CE  3001               	movlw	1
  5414  15CF                     u2965:	
  5415  15CF  1003               	clrc
  5416  15D0  0DF6               	rlf	___lwdiv@divisor,f
  5417  15D1  0DF7               	rlf	___lwdiv@divisor+1,f
  5418  15D2  3EFF               	addlw	-1
  5419  15D3  1D03               	skipz
  5420  15D4  2DCF               	goto	u2965
  5421  15D5  3001               	movlw	1
  5422  15D6  00FA               	movwf	??___lwdiv
  5423  15D7  087A               	movf	??___lwdiv,w
  5424  15D8  07FD               	addwf	___lwdiv@counter,f
  5425  15D9  2DCC               	goto	l3791
  5426  15DA                     l3793:	
  5427  15DA  3001               	movlw	1
  5428  15DB                     u2985:	
  5429  15DB  1003               	clrc
  5430  15DC  0DFB               	rlf	___lwdiv@quotient,f
  5431  15DD  0DFC               	rlf	___lwdiv@quotient+1,f
  5432  15DE  3EFF               	addlw	-1
  5433  15DF  1D03               	skipz
  5434  15E0  2DDB               	goto	u2985
  5435  15E1  0877               	movf	___lwdiv@divisor+1,w
  5436  15E2  0279               	subwf	___lwdiv@dividend+1,w
  5437  15E3  1D03               	skipz
  5438  15E4  2DE7               	goto	u2995
  5439  15E5  0876               	movf	___lwdiv@divisor,w
  5440  15E6  0278               	subwf	___lwdiv@dividend,w
  5441  15E7                     u2995:	
  5442  15E7  1C03               	skipc
  5443  15E8  2DF0               	goto	l3799
  5444  15E9  0876               	movf	___lwdiv@divisor,w
  5445  15EA  02F8               	subwf	___lwdiv@dividend,f
  5446  15EB  0877               	movf	___lwdiv@divisor+1,w
  5447  15EC  1C03               	skipc
  5448  15ED  03F9               	decf	___lwdiv@dividend+1,f
  5449  15EE  02F9               	subwf	___lwdiv@dividend+1,f
  5450  15EF  147B               	bsf	___lwdiv@quotient,0
  5451  15F0                     l3799:	
  5452  15F0  3001               	movlw	1
  5453  15F1                     u3005:	
  5454  15F1  1003               	clrc
  5455  15F2  0CF7               	rrf	___lwdiv@divisor+1,f
  5456  15F3  0CF6               	rrf	___lwdiv@divisor,f
  5457  15F4  3EFF               	addlw	-1
  5458  15F5  1D03               	skipz
  5459  15F6  2DF1               	goto	u3005
  5460  15F7  3001               	movlw	1
  5461  15F8  02FD               	subwf	___lwdiv@counter,f
  5462  15F9  1D03               	btfss	3,2
  5463  15FA  2DDA               	goto	l3793
  5464  15FB                     l3803:	
  5465  15FB  087C               	movf	___lwdiv@quotient+1,w
  5466  15FC  00F7               	movwf	?___lwdiv+1
  5467  15FD  087B               	movf	___lwdiv@quotient,w
  5468  15FE  00F6               	movwf	?___lwdiv
  5469  15FF  0008               	return
  5470  1600                     __end_of___lwdiv:	
  5471                           
  5472                           	psect	text21
  5473  13B2                     __ptext21:	
  5474 ;; *************** function ___lbmod *****************
  5475 ;; Defined at:
  5476 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  dividend        1    wreg     unsigned char 
  5479 ;;  divisor         1    0[COMMON] unsigned char 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  dividend        1    4[COMMON] unsigned char 
  5482 ;;  rem             1    6[COMMON] unsigned char 
  5483 ;;  counter         1    5[COMMON] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      unsigned char 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0
  5488 ;; Tracked objects:
  5489 ;;		On entry : 300/0
  5490 ;;		On exit  : 300/0
  5491 ;;		Unchanged: 300/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5493 ;;      Params:         1       0       0       0       0
  5494 ;;      Locals:         3       0       0       0       0
  5495 ;;      Temps:          3       0       0       0       0
  5496 ;;      Totals:         7       0       0       0       0
  5497 ;;Total ram usage:        7 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_get_temp
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           
  5507                           ;psect for function ___lbmod
  5508  13B2                     ___lbmod:	
  5509                           
  5510                           ;incstack = 0
  5511                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5512                           ;___lbmod@dividend stored from wreg
  5513  13B2  00F4               	movwf	___lbmod@dividend
  5514  13B3  3008               	movlw	8
  5515  13B4  00F1               	movwf	??___lbmod
  5516  13B5  0871               	movf	??___lbmod,w
  5517  13B6  00F5               	movwf	___lbmod@counter
  5518  13B7  01F6               	clrf	___lbmod@rem
  5519  13B8                     l3769:	
  5520  13B8  0874               	movf	___lbmod@dividend,w
  5521  13B9  00F1               	movwf	??___lbmod
  5522  13BA  3007               	movlw	7
  5523  13BB                     u2925:	
  5524  13BB  1003               	clrc
  5525  13BC  0CF1               	rrf	??___lbmod,f
  5526  13BD  3EFF               	addlw	-1
  5527  13BE  1D03               	skipz
  5528  13BF  2BBB               	goto	u2925
  5529  13C0  0876               	movf	___lbmod@rem,w
  5530  13C1  00F2               	movwf	??___lbmod+1
  5531  13C2  0772               	addwf	??___lbmod+1,w
  5532  13C3  0471               	iorwf	??___lbmod,w
  5533  13C4  00F3               	movwf	??___lbmod+2
  5534  13C5  0873               	movf	??___lbmod+2,w
  5535  13C6  00F6               	movwf	___lbmod@rem
  5536  13C7  1003               	clrc
  5537  13C8  0DF4               	rlf	___lbmod@dividend,f
  5538  13C9  0870               	movf	___lbmod@divisor,w
  5539  13CA  0276               	subwf	___lbmod@rem,w
  5540  13CB  1C03               	skipc
  5541  13CC  2BCF               	goto	l1317
  5542  13CD  0870               	movf	___lbmod@divisor,w
  5543  13CE  02F6               	subwf	___lbmod@rem,f
  5544  13CF                     l1317:	
  5545  13CF  3001               	movlw	1
  5546  13D0  02F5               	subwf	___lbmod@counter,f
  5547  13D1  1D03               	btfss	3,2
  5548  13D2  2BB8               	goto	l3769
  5549  13D3  0876               	movf	___lbmod@rem,w
  5550  13D4  0008               	return
  5551  13D5                     __end_of___lbmod:	
  5552                           
  5553                           	psect	text22
  5554  1391                     __ptext22:	
  5555 ;; *************** function ___lbdiv *****************
  5556 ;; Defined at:
  5557 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  dividend        1    wreg     unsigned char 
  5560 ;;  divisor         1    0[COMMON] unsigned char 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  dividend        1    2[COMMON] unsigned char 
  5563 ;;  quotient        1    4[COMMON] unsigned char 
  5564 ;;  counter         1    3[COMMON] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      unsigned char 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 300/0
  5571 ;;		On exit  : 300/0
  5572 ;;		Unchanged: 300/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5574 ;;      Params:         1       0       0       0       0
  5575 ;;      Locals:         3       0       0       0       0
  5576 ;;      Temps:          1       0       0       0       0
  5577 ;;      Totals:         5       0       0       0       0
  5578 ;;Total ram usage:        5 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_get_temp
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function ___lbdiv
  5589  1391                     ___lbdiv:	
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5593                           ;___lbdiv@dividend stored from wreg
  5594  1391  00F2               	movwf	___lbdiv@dividend
  5595  1392  01F4               	clrf	___lbdiv@quotient
  5596  1393  0870               	movf	___lbdiv@divisor,w
  5597  1394  1903               	btfsc	3,2
  5598  1395  2BB0               	goto	l3761
  5599  1396  01F3               	clrf	___lbdiv@counter
  5600  1397  0AF3               	incf	___lbdiv@counter,f
  5601  1398                     l3749:	
  5602  1398  1BF0               	btfsc	___lbdiv@divisor,7
  5603  1399  2BA1               	goto	l3751
  5604  139A  1003               	clrc
  5605  139B  0DF0               	rlf	___lbdiv@divisor,f
  5606  139C  3001               	movlw	1
  5607  139D  00F1               	movwf	??___lbdiv
  5608  139E  0871               	movf	??___lbdiv,w
  5609  139F  07F3               	addwf	___lbdiv@counter,f
  5610  13A0  2B98               	goto	l3749
  5611  13A1                     l3751:	
  5612  13A1  1003               	clrc
  5613  13A2  0DF4               	rlf	___lbdiv@quotient,f
  5614  13A3  0870               	movf	___lbdiv@divisor,w
  5615  13A4  0272               	subwf	___lbdiv@dividend,w
  5616  13A5  1C03               	skipc
  5617  13A6  2BAB               	goto	L2
  5618  13A7  0870               	movf	___lbdiv@divisor,w
  5619  13A8  02F2               	subwf	___lbdiv@dividend,f
  5620  13A9  1474               	bsf	___lbdiv@quotient,0
  5621  13AA  1003               	clrc
  5622  13AB                     L2:	
  5623  13AB  0CF0               	rrf	___lbdiv@divisor,f
  5624  13AC  3001               	movlw	1
  5625  13AD  02F3               	subwf	___lbdiv@counter,f
  5626  13AE  1D03               	btfss	3,2
  5627  13AF  2BA1               	goto	l3751
  5628  13B0                     l3761:	
  5629  13B0  0874               	movf	___lbdiv@quotient,w
  5630  13B1  0008               	return
  5631  13B2                     __end_of___lbdiv:	
  5632                           
  5633                           	psect	text23
  5634  12B6                     __ptext23:	
  5635 ;; *************** function _ds1302_init *****************
  5636 ;; Defined at:
  5637 ;;		line 3 in file "clock_src.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;		None
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      void 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 300/0
  5648 ;;		On exit  : 300/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5651 ;;      Params:         0       0       0       0       0
  5652 ;;      Locals:         0       0       0       0       0
  5653 ;;      Temps:          0       0       0       0       0
  5654 ;;      Totals:         0       0       0       0       0
  5655 ;;Total ram usage:        0 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    1
  5658 ;; This function calls:
  5659 ;;		_time_write_1
  5660 ;; This function is called by:
  5661 ;;		_main
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           
  5666                           ;psect for function _ds1302_init
  5667  12B6                     _ds1302_init:	
  5668                           
  5669                           ;clock_src.c: 5:    RB0=0;
  5670                           
  5671                           ;incstack = 0
  5672                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5673  12B6  1006               	bcf	6,0	;volatile
  5674                           
  5675                           ;clock_src.c: 6:    RB5 =0;
  5676  12B7  1286               	bcf	6,5	;volatile
  5677                           
  5678                           ;clock_src.c: 7:    RB5=1;
  5679  12B8  1686               	bsf	6,5	;volatile
  5680                           
  5681                           ;clock_src.c: 8:    time_write_1(0x8e);
  5682  12B9  308E               	movlw	142
  5683  12BA  160A  118A  241C  160A  118A  	fcall	_time_write_1
  5684                           
  5685                           ;clock_src.c: 9:    time_write_1(0);
  5686  12BF  3000               	movlw	0
  5687  12C0  160A  118A  241C   	fcall	_time_write_1
  5688                           
  5689                           ;clock_src.c: 10:    RB5=0;
  5690  12C3  1286               	bcf	6,5	;volatile
  5691  12C4  0008               	return
  5692  12C5                     __end_of_ds1302_init:	
  5693                           
  5694                           	psect	text24
  5695  1370                     __ptext24:	
  5696 ;; *************** function _display_temp *****************
  5697 ;; Defined at:
  5698 ;;		line 12 in file "Thermometer_src.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      void 
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 300/0
  5709 ;;		On exit  : 300/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5712 ;;      Params:         0       0       0       0       0
  5713 ;;      Locals:         0       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0
  5715 ;;      Totals:         0       0       0       0       0
  5716 ;;Total ram usage:        0 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    2
  5719 ;; This function calls:
  5720 ;;		_write_char
  5721 ;; This function is called by:
  5722 ;;		_main
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           
  5727                           ;psect for function _display_temp
  5728  1370                     _display_temp:	
  5729                           
  5730                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5731                           
  5732                           ;incstack = 0
  5733                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5734  1370  085B               	movf	_shi,w
  5735  1371  3E30               	addlw	48
  5736  1372  160A  118A  2325  160A  118A  	fcall	_write_char
  5737                           
  5738                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5739  1377  085A               	movf	_ge,w
  5740  1378  3E30               	addlw	48
  5741  1379  160A  118A  2325  160A  118A  	fcall	_write_char
  5742                           
  5743                           ;Thermometer_src.c: 17:  write_char('.');
  5744  137E  302E               	movlw	46
  5745  137F  160A  118A  2325  160A  118A  	fcall	_write_char
  5746                           
  5747                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5748  1384  0859               	movf	_shifen,w
  5749  1385  3E30               	addlw	48
  5750  1386  160A  118A  2325  160A  118A  	fcall	_write_char
  5751                           
  5752                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5753  138B  0858               	movf	_baifen,w
  5754  138C  3E30               	addlw	48
  5755  138D  160A  118A  2325   	fcall	_write_char
  5756  1390  0008               	return
  5757  1391                     __end_of_display_temp:	
  5758                           
  5759                           	psect	text25
  5760  16EA                     __ptext25:	
  5761 ;; *************** function _display_day *****************
  5762 ;; Defined at:
  5763 ;;		line 4 in file "Day_of_week_src.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  num             2    3[COMMON] int 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 300/100
  5774 ;;		On exit  : 200/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5777 ;;      Params:         2       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0
  5780 ;;      Totals:         2       0       0       0       0
  5781 ;;Total ram usage:        2 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    2
  5784 ;; This function calls:
  5785 ;;		_write_char
  5786 ;; This function is called by:
  5787 ;;		_main
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function _display_day
  5793  16EA                     _display_day:	
  5794                           
  5795                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5799  16EA  0373               	decf	display_day@num,w
  5800  16EB  0474               	iorwf	display_day@num+1,w
  5801  16EC  1903               	btfsc	3,2
  5802  16ED  2EF2               	goto	l4827
  5803  16EE  0873               	movf	display_day@num,w
  5804  16EF  0474               	iorwf	display_day@num+1,w
  5805  16F0  1D03               	btfss	3,2
  5806  16F1  2EFE               	goto	l4829
  5807  16F2                     l4827:	
  5808                           
  5809                           ;Day_of_week_src.c: 6:     write_char('M');
  5810  16F2  304D               	movlw	77
  5811  16F3  160A  118A  2325  160A  118A  	fcall	_write_char
  5812                           
  5813                           ;Day_of_week_src.c: 7:     write_char('o');
  5814  16F8  306F               	movlw	111
  5815  16F9  160A  118A  2325  160A  118A  	fcall	_write_char
  5816  16FE                     l4829:	
  5817                           
  5818                           ;Day_of_week_src.c: 10:     if(num == 2){
  5819  16FE  3002               	movlw	2
  5820  16FF  0673               	xorwf	display_day@num,w
  5821  1700  0474               	iorwf	display_day@num+1,w
  5822  1701  1D03               	btfss	3,2
  5823  1702  2F0F               	goto	l4833
  5824                           
  5825                           ;Day_of_week_src.c: 11:     write_char('T');
  5826  1703  3054               	movlw	84
  5827  1704  160A  118A  2325  160A  118A  	fcall	_write_char
  5828                           
  5829                           ;Day_of_week_src.c: 12:     write_char('u');
  5830  1709  3075               	movlw	117
  5831  170A  160A  118A  2325  160A  118A  	fcall	_write_char
  5832  170F                     l4833:	
  5833                           
  5834                           ;Day_of_week_src.c: 15:     if(num == 3){
  5835  170F  3003               	movlw	3
  5836  1710  0673               	xorwf	display_day@num,w
  5837  1711  0474               	iorwf	display_day@num+1,w
  5838  1712  1D03               	btfss	3,2
  5839  1713  2F20               	goto	l4837
  5840                           
  5841                           ;Day_of_week_src.c: 16:     write_char('W');
  5842  1714  3057               	movlw	87
  5843  1715  160A  118A  2325  160A  118A  	fcall	_write_char
  5844                           
  5845                           ;Day_of_week_src.c: 17:     write_char('e');
  5846  171A  3065               	movlw	101
  5847  171B  160A  118A  2325  160A  118A  	fcall	_write_char
  5848  1720                     l4837:	
  5849                           
  5850                           ;Day_of_week_src.c: 20:     if(num == 4){
  5851  1720  3004               	movlw	4
  5852  1721  0673               	xorwf	display_day@num,w
  5853  1722  0474               	iorwf	display_day@num+1,w
  5854  1723  1D03               	btfss	3,2
  5855  1724  2F31               	goto	l4841
  5856                           
  5857                           ;Day_of_week_src.c: 21:     write_char('T');
  5858  1725  3054               	movlw	84
  5859  1726  160A  118A  2325  160A  118A  	fcall	_write_char
  5860                           
  5861                           ;Day_of_week_src.c: 22:     write_char('h');
  5862  172B  3068               	movlw	104
  5863  172C  160A  118A  2325  160A  118A  	fcall	_write_char
  5864  1731                     l4841:	
  5865                           
  5866                           ;Day_of_week_src.c: 25:     if(num == 5){
  5867  1731  3005               	movlw	5
  5868  1732  0673               	xorwf	display_day@num,w
  5869  1733  0474               	iorwf	display_day@num+1,w
  5870  1734  1D03               	btfss	3,2
  5871  1735  2F42               	goto	l4845
  5872                           
  5873                           ;Day_of_week_src.c: 26:     write_char('F');
  5874  1736  3046               	movlw	70
  5875  1737  160A  118A  2325  160A  118A  	fcall	_write_char
  5876                           
  5877                           ;Day_of_week_src.c: 27:     write_char('r');
  5878  173C  3072               	movlw	114
  5879  173D  160A  118A  2325  160A  118A  	fcall	_write_char
  5880  1742                     l4845:	
  5881                           
  5882                           ;Day_of_week_src.c: 30:     if(num == 6){
  5883  1742  3006               	movlw	6
  5884  1743  0673               	xorwf	display_day@num,w
  5885  1744  0474               	iorwf	display_day@num+1,w
  5886  1745  1D03               	btfss	3,2
  5887  1746  2F53               	goto	l4849
  5888                           
  5889                           ;Day_of_week_src.c: 31:     write_char('S');
  5890  1747  3053               	movlw	83
  5891  1748  160A  118A  2325  160A  118A  	fcall	_write_char
  5892                           
  5893                           ;Day_of_week_src.c: 32:     write_char('a');
  5894  174D  3061               	movlw	97
  5895  174E  160A  118A  2325  160A  118A  	fcall	_write_char
  5896  1753                     l4849:	
  5897                           
  5898                           ;Day_of_week_src.c: 35:     if(num == 7){
  5899  1753  3007               	movlw	7
  5900  1754  0673               	xorwf	display_day@num,w
  5901  1755  0474               	iorwf	display_day@num+1,w
  5902  1756  1D03               	btfss	3,2
  5903  1757  0008               	return
  5904                           
  5905                           ;Day_of_week_src.c: 36:     write_char('S');
  5906  1758  3053               	movlw	83
  5907  1759  160A  118A  2325  160A  118A  	fcall	_write_char
  5908                           
  5909                           ;Day_of_week_src.c: 37:     write_char('u');
  5910  175E  3075               	movlw	117
  5911  175F  160A  118A  2325   	fcall	_write_char
  5912  1762  0008               	return
  5913  1763                     __end_of_display_day:	
  5914                           
  5915                           	psect	text26
  5916  1763                     __ptext26:	
  5917 ;; *************** function _display_date *****************
  5918 ;; Defined at:
  5919 ;;		line 77 in file "clock_src.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;		None
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  i               2    5[COMMON] int 
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5928 ;; Tracked objects:
  5929 ;;		On entry : 300/0
  5930 ;;		On exit  : 300/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5933 ;;      Params:         0       0       0       0       0
  5934 ;;      Locals:         2       0       0       0       0
  5935 ;;      Temps:          2       0       0       0       0
  5936 ;;      Totals:         4       0       0       0       0
  5937 ;;Total ram usage:        4 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    2
  5940 ;; This function calls:
  5941 ;;		_write_char
  5942 ;; This function is called by:
  5943 ;;		_main
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           
  5948                           ;psect for function _display_date
  5949  1763                     _display_date:	
  5950                           
  5951                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5952                           
  5953                           ;incstack = 0
  5954                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5955  1763  1886               	btfsc	6,1	;volatile
  5956  1764  2F6E               	goto	l3957
  5957                           
  5958                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5959  1765  1683               	bsf	3,5	;RP0=1, select bank1
  5960  1766  0823               	movf	(_table1^(0+128)+3),w
  5961  1767  00F3               	movwf	??_display_date
  5962  1768  0873               	movf	??_display_date,w
  5963  1769  00A0               	movwf	_table1^(0+128)
  5964                           
  5965                           ;clock_src.c: 83:           table1[1]=table1[4];
  5966  176A  0824               	movf	(_table1^(0+128)+4),w
  5967  176B  00F3               	movwf	??_display_date
  5968  176C  0873               	movf	??_display_date,w
  5969  176D  00A1               	movwf	(_table1^(0+128)+1)
  5970  176E                     l3957:	
  5971                           
  5972                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5973  176E  1683               	bsf	3,5	;RP0=1, select bank1
  5974  176F  0823               	movf	(_table1^(0+128)+3),w
  5975  1770  39F0               	andlw	240
  5976  1771  00F3               	movwf	??_display_date
  5977  1772  01F4               	clrf	??_display_date+1
  5978  1773  0873               	movf	??_display_date,w
  5979  1774  00F5               	movwf	display_date@i
  5980  1775  0874               	movf	??_display_date+1,w
  5981  1776  00F6               	movwf	display_date@i+1
  5982                           
  5983                           ;clock_src.c: 86:      i=i>>4;
  5984  1777  0E75               	swapf	display_date@i,w
  5985  1778  390F               	andlw	15
  5986  1779  00F5               	movwf	display_date@i
  5987  177A  0E76               	swapf	display_date@i+1,w
  5988  177B  39F0               	andlw	240
  5989  177C  04F5               	iorwf	display_date@i,f
  5990  177D  0E76               	swapf	display_date@i+1,w
  5991  177E  390F               	andlw	15
  5992  177F  00F6               	movwf	display_date@i+1
  5993  1780  30F0               	movlw	240
  5994  1781  1DF6               	btfss	display_date@i+1,3
  5995  1782  3000               	movlw	0
  5996  1783  04F6               	iorwf	display_date@i+1,f
  5997                           
  5998                           ;clock_src.c: 87:      write_char(i + '0');
  5999  1784  0875               	movf	display_date@i,w
  6000  1785  3E30               	addlw	48
  6001  1786  160A  118A  2325  160A  118A  	fcall	_write_char
  6002                           
  6003                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  6004  178B  1683               	bsf	3,5	;RP0=1, select bank1
  6005  178C  0823               	movf	(_table1^(0+128)+3),w
  6006  178D  390F               	andlw	15
  6007  178E  00F3               	movwf	??_display_date
  6008  178F  01F4               	clrf	??_display_date+1
  6009  1790  0873               	movf	??_display_date,w
  6010  1791  00F5               	movwf	display_date@i
  6011  1792  0874               	movf	??_display_date+1,w
  6012  1793  00F6               	movwf	display_date@i+1
  6013                           
  6014                           ;clock_src.c: 90:      write_char(i + '0');
  6015  1794  0875               	movf	display_date@i,w
  6016  1795  3E30               	addlw	48
  6017  1796  160A  118A  2325  160A  118A  	fcall	_write_char
  6018                           
  6019                           ;clock_src.c: 91:      write_char('/');
  6020  179B  302F               	movlw	47
  6021  179C  160A  118A  2325  160A  118A  	fcall	_write_char
  6022                           
  6023                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  6024  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  6025  17A2  0824               	movf	(_table1^(0+128)+4),w
  6026  17A3  39F0               	andlw	240
  6027  17A4  00F3               	movwf	??_display_date
  6028  17A5  01F4               	clrf	??_display_date+1
  6029  17A6  0873               	movf	??_display_date,w
  6030  17A7  00F5               	movwf	display_date@i
  6031  17A8  0874               	movf	??_display_date+1,w
  6032  17A9  00F6               	movwf	display_date@i+1
  6033                           
  6034                           ;clock_src.c: 96:      i=i>>4;
  6035  17AA  0E75               	swapf	display_date@i,w
  6036  17AB  390F               	andlw	15
  6037  17AC  00F5               	movwf	display_date@i
  6038  17AD  0E76               	swapf	display_date@i+1,w
  6039  17AE  39F0               	andlw	240
  6040  17AF  04F5               	iorwf	display_date@i,f
  6041  17B0  0E76               	swapf	display_date@i+1,w
  6042  17B1  390F               	andlw	15
  6043  17B2  00F6               	movwf	display_date@i+1
  6044  17B3  30F0               	movlw	240
  6045  17B4  1DF6               	btfss	display_date@i+1,3
  6046  17B5  3000               	movlw	0
  6047  17B6  04F6               	iorwf	display_date@i+1,f
  6048                           
  6049                           ;clock_src.c: 97:      write_char(i + '0');
  6050  17B7  0875               	movf	display_date@i,w
  6051  17B8  3E30               	addlw	48
  6052  17B9  160A  118A  2325  160A  118A  	fcall	_write_char
  6053                           
  6054                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  6055  17BE  1683               	bsf	3,5	;RP0=1, select bank1
  6056  17BF  0824               	movf	(_table1^(0+128)+4),w
  6057  17C0  390F               	andlw	15
  6058  17C1  00F3               	movwf	??_display_date
  6059  17C2  01F4               	clrf	??_display_date+1
  6060  17C3  0873               	movf	??_display_date,w
  6061  17C4  00F5               	movwf	display_date@i
  6062  17C5  0874               	movf	??_display_date+1,w
  6063  17C6  00F6               	movwf	display_date@i+1
  6064                           
  6065                           ;clock_src.c: 100:      write_char(i + '0');
  6066  17C7  0875               	movf	display_date@i,w
  6067  17C8  3E30               	addlw	48
  6068  17C9  160A  118A  2325  160A  118A  	fcall	_write_char
  6069                           
  6070                           ;clock_src.c: 101:      write_char('/');
  6071  17CE  302F               	movlw	47
  6072  17CF  160A  118A  2325  160A  118A  	fcall	_write_char
  6073                           
  6074                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  6075  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  6076  17D5  0826               	movf	(_table1^(0+128)+6),w
  6077  17D6  39F0               	andlw	240
  6078  17D7  00F3               	movwf	??_display_date
  6079  17D8  01F4               	clrf	??_display_date+1
  6080  17D9  0873               	movf	??_display_date,w
  6081  17DA  00F5               	movwf	display_date@i
  6082  17DB  0874               	movf	??_display_date+1,w
  6083  17DC  00F6               	movwf	display_date@i+1
  6084                           
  6085                           ;clock_src.c: 106:      i=i>>4;
  6086  17DD  0E75               	swapf	display_date@i,w
  6087  17DE  390F               	andlw	15
  6088  17DF  00F5               	movwf	display_date@i
  6089  17E0  0E76               	swapf	display_date@i+1,w
  6090  17E1  39F0               	andlw	240
  6091  17E2  04F5               	iorwf	display_date@i,f
  6092  17E3  0E76               	swapf	display_date@i+1,w
  6093  17E4  390F               	andlw	15
  6094  17E5  00F6               	movwf	display_date@i+1
  6095  17E6  30F0               	movlw	240
  6096  17E7  1DF6               	btfss	display_date@i+1,3
  6097  17E8  3000               	movlw	0
  6098  17E9  04F6               	iorwf	display_date@i+1,f
  6099                           
  6100                           ;clock_src.c: 107:      write_char(i + '0');
  6101  17EA  0875               	movf	display_date@i,w
  6102  17EB  3E30               	addlw	48
  6103  17EC  160A  118A  2325  160A  118A  	fcall	_write_char
  6104                           
  6105                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  6106  17F1  1683               	bsf	3,5	;RP0=1, select bank1
  6107  17F2  0826               	movf	(_table1^(0+128)+6),w
  6108  17F3  390F               	andlw	15
  6109  17F4  00F3               	movwf	??_display_date
  6110  17F5  01F4               	clrf	??_display_date+1
  6111  17F6  0873               	movf	??_display_date,w
  6112  17F7  00F5               	movwf	display_date@i
  6113  17F8  0874               	movf	??_display_date+1,w
  6114  17F9  00F6               	movwf	display_date@i+1
  6115                           
  6116                           ;clock_src.c: 110:      write_char(i + '0');
  6117  17FA  0875               	movf	display_date@i,w
  6118  17FB  3E30               	addlw	48
  6119  17FC  160A  118A  2325   	fcall	_write_char
  6120  17FF  0008               	return
  6121  1800                     __end_of_display_date:	
  6122                           
  6123                           	psect	text27
  6124  0812                     __ptext27:	
  6125 ;; *************** function _display_clock *****************
  6126 ;; Defined at:
  6127 ;;		line 34 in file "clock_src.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;		None
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  i               2    5[COMMON] int 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 300/0
  6138 ;;		On exit  : 300/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6141 ;;      Params:         0       0       0       0       0
  6142 ;;      Locals:         2       0       0       0       0
  6143 ;;      Temps:          2       0       0       0       0
  6144 ;;      Totals:         4       0       0       0       0
  6145 ;;Total ram usage:        4 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    2
  6148 ;; This function calls:
  6149 ;;		_write_char
  6150 ;; This function is called by:
  6151 ;;		_main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _display_clock
  6157  0812                     _display_clock:	
  6158                           
  6159                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6163  0812  1886               	btfsc	6,1	;volatile
  6164  0813  281D               	goto	l3995
  6165                           
  6166                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6167  0814  1683               	bsf	3,5	;RP0=1, select bank1
  6168  0815  0823               	movf	(_table1^(0+128)+3),w
  6169  0816  00F3               	movwf	??_display_clock
  6170  0817  0873               	movf	??_display_clock,w
  6171  0818  00A0               	movwf	_table1^(0+128)
  6172                           
  6173                           ;clock_src.c: 40:           table1[1]=table1[4];
  6174  0819  0824               	movf	(_table1^(0+128)+4),w
  6175  081A  00F3               	movwf	??_display_clock
  6176  081B  0873               	movf	??_display_clock,w
  6177  081C  00A1               	movwf	(_table1^(0+128)+1)
  6178  081D                     l3995:	
  6179                           
  6180                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6181  081D  1683               	bsf	3,5	;RP0=1, select bank1
  6182  081E  0822               	movf	(_table1^(0+128)+2),w
  6183  081F  39F0               	andlw	240
  6184  0820  00F3               	movwf	??_display_clock
  6185  0821  01F4               	clrf	??_display_clock+1
  6186  0822  0873               	movf	??_display_clock,w
  6187  0823  00F5               	movwf	display_clock@i
  6188  0824  0874               	movf	??_display_clock+1,w
  6189  0825  00F6               	movwf	display_clock@i+1
  6190                           
  6191                           ;clock_src.c: 44:      i=i>>4;
  6192  0826  0E75               	swapf	display_clock@i,w
  6193  0827  390F               	andlw	15
  6194  0828  00F5               	movwf	display_clock@i
  6195  0829  0E76               	swapf	display_clock@i+1,w
  6196  082A  39F0               	andlw	240
  6197  082B  04F5               	iorwf	display_clock@i,f
  6198  082C  0E76               	swapf	display_clock@i+1,w
  6199  082D  390F               	andlw	15
  6200  082E  00F6               	movwf	display_clock@i+1
  6201  082F  30F0               	movlw	240
  6202  0830  1DF6               	btfss	display_clock@i+1,3
  6203  0831  3000               	movlw	0
  6204  0832  04F6               	iorwf	display_clock@i+1,f
  6205                           
  6206                           ;clock_src.c: 45:      write_char(i + '0');
  6207  0833  0875               	movf	display_clock@i,w
  6208  0834  3E30               	addlw	48
  6209  0835  160A  118A  2325  120A  158A  	fcall	_write_char
  6210                           
  6211                           ;clock_src.c: 46:      temp_high = i;
  6212  083A  0875               	movf	display_clock@i,w
  6213  083B  00F3               	movwf	??_display_clock
  6214  083C  0873               	movf	??_display_clock,w
  6215  083D  00CB               	movwf	_temp_high
  6216                           
  6217                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6218  083E  1683               	bsf	3,5	;RP0=1, select bank1
  6219  083F  0822               	movf	(_table1^(0+128)+2),w
  6220  0840  390F               	andlw	15
  6221  0841  00F3               	movwf	??_display_clock
  6222  0842  01F4               	clrf	??_display_clock+1
  6223  0843  0873               	movf	??_display_clock,w
  6224  0844  00F5               	movwf	display_clock@i
  6225  0845  0874               	movf	??_display_clock+1,w
  6226  0846  00F6               	movwf	display_clock@i+1
  6227                           
  6228                           ;clock_src.c: 50:      write_char(i + '0');
  6229  0847  0875               	movf	display_clock@i,w
  6230  0848  3E30               	addlw	48
  6231  0849  160A  118A  2325  120A  158A  	fcall	_write_char
  6232                           
  6233                           ;clock_src.c: 51:      write_char(':');
  6234  084E  303A               	movlw	58
  6235  084F  160A  118A  2325  120A  158A  	fcall	_write_char
  6236                           
  6237                           ;clock_src.c: 52:      temp_low = i;
  6238  0854  0875               	movf	display_clock@i,w
  6239  0855  00F3               	movwf	??_display_clock
  6240  0856  0873               	movf	??_display_clock,w
  6241  0857  00CC               	movwf	_temp_low
  6242                           
  6243                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6244  0858  1683               	bsf	3,5	;RP0=1, select bank1
  6245  0859  0821               	movf	(_table1^(0+128)+1),w
  6246  085A  39F0               	andlw	240
  6247  085B  00F3               	movwf	??_display_clock
  6248  085C  01F4               	clrf	??_display_clock+1
  6249  085D  0873               	movf	??_display_clock,w
  6250  085E  00F5               	movwf	display_clock@i
  6251  085F  0874               	movf	??_display_clock+1,w
  6252  0860  00F6               	movwf	display_clock@i+1
  6253                           
  6254                           ;clock_src.c: 56:      i=i>>4;
  6255  0861  0E75               	swapf	display_clock@i,w
  6256  0862  390F               	andlw	15
  6257  0863  00F5               	movwf	display_clock@i
  6258  0864  0E76               	swapf	display_clock@i+1,w
  6259  0865  39F0               	andlw	240
  6260  0866  04F5               	iorwf	display_clock@i,f
  6261  0867  0E76               	swapf	display_clock@i+1,w
  6262  0868  390F               	andlw	15
  6263  0869  00F6               	movwf	display_clock@i+1
  6264  086A  30F0               	movlw	240
  6265  086B  1DF6               	btfss	display_clock@i+1,3
  6266  086C  3000               	movlw	0
  6267  086D  04F6               	iorwf	display_clock@i+1,f
  6268                           
  6269                           ;clock_src.c: 57:      write_char(i + '0');
  6270  086E  0875               	movf	display_clock@i,w
  6271  086F  3E30               	addlw	48
  6272  0870  160A  118A  2325  120A  158A  	fcall	_write_char
  6273                           
  6274                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6275  0875  1683               	bsf	3,5	;RP0=1, select bank1
  6276  0876  0821               	movf	(_table1^(0+128)+1),w
  6277  0877  390F               	andlw	15
  6278  0878  00F3               	movwf	??_display_clock
  6279  0879  01F4               	clrf	??_display_clock+1
  6280  087A  0873               	movf	??_display_clock,w
  6281  087B  00F5               	movwf	display_clock@i
  6282  087C  0874               	movf	??_display_clock+1,w
  6283  087D  00F6               	movwf	display_clock@i+1
  6284                           
  6285                           ;clock_src.c: 61:      write_char(i + '0');
  6286  087E  0875               	movf	display_clock@i,w
  6287  087F  3E30               	addlw	48
  6288  0880  160A  118A  2325  120A  158A  	fcall	_write_char
  6289                           
  6290                           ;clock_src.c: 62:      write_char(':');
  6291  0885  303A               	movlw	58
  6292  0886  160A  118A  2325  120A  158A  	fcall	_write_char
  6293                           
  6294                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6295  088B  1683               	bsf	3,5	;RP0=1, select bank1
  6296  088C  0820               	movf	_table1^(0+128),w
  6297  088D  39F0               	andlw	240
  6298  088E  00F3               	movwf	??_display_clock
  6299  088F  01F4               	clrf	??_display_clock+1
  6300  0890  0873               	movf	??_display_clock,w
  6301  0891  00F5               	movwf	display_clock@i
  6302  0892  0874               	movf	??_display_clock+1,w
  6303  0893  00F6               	movwf	display_clock@i+1
  6304                           
  6305                           ;clock_src.c: 66:      i=i>>4;
  6306  0894  0E75               	swapf	display_clock@i,w
  6307  0895  390F               	andlw	15
  6308  0896  00F5               	movwf	display_clock@i
  6309  0897  0E76               	swapf	display_clock@i+1,w
  6310  0898  39F0               	andlw	240
  6311  0899  04F5               	iorwf	display_clock@i,f
  6312  089A  0E76               	swapf	display_clock@i+1,w
  6313  089B  390F               	andlw	15
  6314  089C  00F6               	movwf	display_clock@i+1
  6315  089D  30F0               	movlw	240
  6316  089E  1DF6               	btfss	display_clock@i+1,3
  6317  089F  3000               	movlw	0
  6318  08A0  04F6               	iorwf	display_clock@i+1,f
  6319                           
  6320                           ;clock_src.c: 67:      write_char(i + '0');
  6321  08A1  0875               	movf	display_clock@i,w
  6322  08A2  3E30               	addlw	48
  6323  08A3  160A  118A  2325  120A  158A  	fcall	_write_char
  6324                           
  6325                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6326  08A8  1683               	bsf	3,5	;RP0=1, select bank1
  6327  08A9  0820               	movf	_table1^(0+128),w
  6328  08AA  390F               	andlw	15
  6329  08AB  00F3               	movwf	??_display_clock
  6330  08AC  01F4               	clrf	??_display_clock+1
  6331  08AD  0873               	movf	??_display_clock,w
  6332  08AE  00F5               	movwf	display_clock@i
  6333  08AF  0874               	movf	??_display_clock+1,w
  6334  08B0  00F6               	movwf	display_clock@i+1
  6335                           
  6336                           ;clock_src.c: 71:      write_char(i + '0');
  6337  08B1  0875               	movf	display_clock@i,w
  6338  08B2  3E30               	addlw	48
  6339  08B3  160A  118A  2325   	fcall	_write_char
  6340  08B6  0008               	return
  6341  08B7                     __end_of_display_clock:	
  6342                           
  6343                           	psect	text28
  6344  0385                     __ptext28:	
  6345 ;; *************** function _date_settings *****************
  6346 ;; Defined at:
  6347 ;;		line 454 in file "Button_src.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  1    wreg      void 
  6354 ;; Registers used:
  6355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 300/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6361 ;;      Params:         0       0       0       0       0
  6362 ;;      Locals:         0       0       0       0       0
  6363 ;;      Temps:          0       3       0       0       0
  6364 ;;      Totals:         0       3       0       0       0
  6365 ;;Total ram usage:        3 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    3
  6368 ;; This function calls:
  6369 ;;		_button_delay
  6370 ;;		_incrementor
  6371 ;;		_modulus_func
  6372 ;;		_set_time
  6373 ;;		_time_date_delimiter
  6374 ;;		_time_date_hex_terminator
  6375 ;;		_write_char
  6376 ;;		_write_cmd
  6377 ;; This function is called by:
  6378 ;;		_main
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           
  6383                           ;psect for function _date_settings
  6384  0385                     _date_settings:	
  6385                           
  6386                           ;Button_src.c: 455:  RC0 = 0;
  6387                           
  6388                           ;incstack = 0
  6389                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6390  0385  1283               	bcf	3,5	;RP0=0, select bank0
  6391  0386  1303               	bcf	3,6	;RP1=0, select bank0
  6392  0387  1007               	bcf	7,0	;volatile
  6393                           
  6394                           ;Button_src.c: 456:  RC1 = 1;
  6395  0388  1487               	bsf	7,1	;volatile
  6396                           
  6397                           ;Button_src.c: 457:  RC2 = 1;
  6398  0389  1507               	bsf	7,2	;volatile
  6399                           
  6400                           ;Button_src.c: 458:  RC3 = 1;
  6401  038A  1587               	bsf	7,3	;volatile
  6402                           
  6403                           ;Button_src.c: 459:   if (RC4 == 0){
  6404  038B  1A07               	btfsc	7,4	;volatile
  6405  038C  0008               	return
  6406                           
  6407                           ;Button_src.c: 460:       write_cmd(0x1);
  6408  038D  3001               	movlw	1
  6409  038E  160A  118A  233C  120A  118A  	fcall	_write_cmd
  6410  0393                     l770:	
  6411                           ;Button_src.c: 461:       for(;;){
  6412                           
  6413                           
  6414                           ;Button_src.c: 462:             write_cmd(0x80);
  6415  0393  3080               	movlw	128
  6416  0394  160A  118A  233C  120A  118A  	fcall	_write_cmd
  6417                           
  6418                           ;Button_src.c: 463:             write_char('D');
  6419  0399  3044               	movlw	68
  6420  039A  160A  118A  2325  120A  118A  	fcall	_write_char
  6421                           
  6422                           ;Button_src.c: 464:             write_char('a');
  6423  039F  3061               	movlw	97
  6424  03A0  160A  118A  2325  120A  118A  	fcall	_write_char
  6425                           
  6426                           ;Button_src.c: 465:             write_char('t');
  6427  03A5  3074               	movlw	116
  6428  03A6  160A  118A  2325  120A  118A  	fcall	_write_char
  6429                           
  6430                           ;Button_src.c: 466:             write_char('e');
  6431  03AB  3065               	movlw	101
  6432  03AC  160A  118A  2325  120A  118A  	fcall	_write_char
  6433                           
  6434                           ;Button_src.c: 467:             write_char('_');
  6435  03B1  305F               	movlw	95
  6436  03B2  160A  118A  2325  120A  118A  	fcall	_write_char
  6437                           
  6438                           ;Button_src.c: 468:             write_char('S');
  6439  03B7  3053               	movlw	83
  6440  03B8  160A  118A  2325  120A  118A  	fcall	_write_char
  6441                           
  6442                           ;Button_src.c: 469:             write_char('e');
  6443  03BD  3065               	movlw	101
  6444  03BE  160A  118A  2325  120A  118A  	fcall	_write_char
  6445                           
  6446                           ;Button_src.c: 470:             write_char('t');
  6447  03C3  3074               	movlw	116
  6448  03C4  160A  118A  2325  120A  118A  	fcall	_write_char
  6449                           
  6450                           ;Button_src.c: 471:             write_char('t');
  6451  03C9  3074               	movlw	116
  6452  03CA  160A  118A  2325  120A  118A  	fcall	_write_char
  6453                           
  6454                           ;Button_src.c: 472:             write_char('i');
  6455  03CF  3069               	movlw	105
  6456  03D0  160A  118A  2325  120A  118A  	fcall	_write_char
  6457                           
  6458                           ;Button_src.c: 473:             write_char('n');
  6459  03D5  306E               	movlw	110
  6460  03D6  160A  118A  2325  120A  118A  	fcall	_write_char
  6461                           
  6462                           ;Button_src.c: 474:             write_char('g');
  6463  03DB  3067               	movlw	103
  6464  03DC  160A  118A  2325  120A  118A  	fcall	_write_char
  6465                           
  6466                           ;Button_src.c: 475:             write_char('s');
  6467  03E1  3073               	movlw	115
  6468  03E2  160A  118A  2325  120A  118A  	fcall	_write_char
  6469                           
  6470                           ;Button_src.c: 476:             RC0 = 1;
  6471  03E7  1407               	bsf	7,0	;volatile
  6472                           
  6473                           ;Button_src.c: 477:             RC1 = 0;
  6474  03E8  1087               	bcf	7,1	;volatile
  6475                           
  6476                           ;Button_src.c: 478:             RC2 = 1;
  6477  03E9  1507               	bsf	7,2	;volatile
  6478                           
  6479                           ;Button_src.c: 479:             RC3 = 1;
  6480  03EA  1587               	bsf	7,3	;volatile
  6481                           
  6482                           ;Button_src.c: 480:             if(RC7 == 0 && b =='x'){
  6483  03EB  1B87               	btfsc	7,7	;volatile
  6484  03EC  2C5D               	goto	l4291
  6485  03ED  3078               	movlw	120
  6486  03EE  0649               	xorwf	_b,w
  6487  03EF  1D03               	btfss	3,2
  6488  03F0  2C5D               	goto	l4291
  6489                           
  6490                           ;Button_src.c: 481:                 if(stats == 1)
  6491  03F1  0322               	decf	_stats,w
  6492  03F2  0423               	iorwf	_stats+1,w
  6493  03F3  1D03               	btfss	3,2
  6494  03F4  2BF9               	goto	l772
  6495                           
  6496                           ;Button_src.c: 482:                     a++;
  6497  03F5  3001               	movlw	1
  6498  03F6  00E5               	movwf	??_date_settings
  6499  03F7  0865               	movf	??_date_settings,w
  6500  03F8  07CA               	addwf	_a,f
  6501  03F9                     l772:	
  6502                           
  6503                           ;Button_src.c: 483:                 if(stats == 0){
  6504  03F9  0822               	movf	_stats,w
  6505  03FA  0423               	iorwf	_stats+1,w
  6506  03FB  1D03               	btfss	3,2
  6507  03FC  2C01               	goto	l773
  6508                           
  6509                           ;Button_src.c: 484:                     stats = 1;
  6510  03FD  3001               	movlw	1
  6511  03FE  00A2               	movwf	_stats
  6512  03FF  3000               	movlw	0
  6513  0400  00A3               	movwf	_stats+1
  6514  0401                     l773:	
  6515                           ;Button_src.c: 485:                 }
  6516                           
  6517                           
  6518                           ;Button_src.c: 487:                     x++ ;
  6519  0401  3001               	movlw	1
  6520  0402  07AC               	addwf	_x,f
  6521  0403  1803               	skipnc
  6522  0404  0AAD               	incf	_x+1,f
  6523  0405  3000               	movlw	0
  6524  0406  07AD               	addwf	_x+1,f
  6525                           
  6526                           ;Button_src.c: 488:                     x = modulus_func(x,10);
  6527  0407  082D               	movf	_x+1,w
  6528  0408  00F8               	movwf	modulus_func@x+1
  6529  0409  082C               	movf	_x,w
  6530  040A  00F7               	movwf	modulus_func@x
  6531  040B  300A               	movlw	10
  6532  040C  00F9               	movwf	modulus_func@y
  6533  040D  3000               	movlw	0
  6534  040E  00FA               	movwf	modulus_func@y+1
  6535  040F  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  6536  0414  0878               	movf	?_modulus_func+1,w
  6537  0415  00AD               	movwf	_x+1
  6538  0416  0877               	movf	?_modulus_func,w
  6539  0417  00AC               	movwf	_x
  6540                           
  6541                           ;Button_src.c: 489:                      if (p == 1){
  6542  0418  0320               	decf	_p,w
  6543  0419  0421               	iorwf	_p+1,w
  6544  041A  1D03               	btfss	3,2
  6545  041B  2C35               	goto	l4277
  6546                           
  6547                           ;Button_src.c: 490:                         y = incrementor(y,x,'0');
  6548  041C  082B               	movf	_y+1,w
  6549  041D  00E1               	movwf	incrementor@upper_val+1
  6550  041E  082A               	movf	_y,w
  6551  041F  00E0               	movwf	incrementor@upper_val
  6552  0420  082D               	movf	_x+1,w
  6553  0421  00E3               	movwf	incrementor@lower_val+1
  6554  0422  082C               	movf	_x,w
  6555  0423  00E2               	movwf	incrementor@lower_val
  6556  0424  3030               	movlw	48
  6557  0425  00E5               	movwf	??_date_settings
  6558  0426  0865               	movf	??_date_settings,w
  6559  0427  00E4               	movwf	incrementor@z
  6560  0428  160A  118A  23F8  120A  118A  	fcall	_incrementor
  6561  042D  00E6               	movwf	??_date_settings+1
  6562  042E  01E7               	clrf	??_date_settings+2
  6563  042F  0866               	movf	??_date_settings+1,w
  6564  0430  00AA               	movwf	_y
  6565  0431  0867               	movf	??_date_settings+2,w
  6566  0432  00AB               	movwf	_y+1
  6567                           
  6568                           ;Button_src.c: 491:                         p = 0;
  6569  0433  01A0               	clrf	_p
  6570  0434  01A1               	clrf	_p+1
  6571  0435                     l4277:	
  6572                           
  6573                           ;Button_src.c: 493:                     if (x == 9){
  6574  0435  3009               	movlw	9
  6575  0436  062C               	xorwf	_x,w
  6576  0437  042D               	iorwf	_x+1,w
  6577  0438  1D03               	btfss	3,2
  6578  0439  2C3E               	goto	l4281
  6579                           
  6580                           ;Button_src.c: 494:                         p = 1;
  6581  043A  3001               	movlw	1
  6582  043B  00A0               	movwf	_p
  6583  043C  3000               	movlw	0
  6584  043D  00A1               	movwf	_p+1
  6585  043E                     l4281:	
  6586                           
  6587                           ;Button_src.c: 496:                     a = time_date_hex_terminator(a,'C');
  6588  043E  3043               	movlw	67
  6589  043F  00E5               	movwf	??_date_settings
  6590  0440  0865               	movf	??_date_settings,w
  6591  0441  00F0               	movwf	time_date_hex_terminator@limiter
  6592  0442  084A               	movf	_a,w
  6593  0443  160A  118A  22A7  120A  118A  	fcall	_time_date_hex_terminator
  6594  0448  00E6               	movwf	??_date_settings+1
  6595  0449  0866               	movf	??_date_settings+1,w
  6596  044A  00CA               	movwf	_a
  6597                           
  6598                           ;Button_src.c: 498:                     if(y == 1 && x == 3){
  6599  044B  032A               	decf	_y,w
  6600  044C  042B               	iorwf	_y+1,w
  6601  044D  1D03               	btfss	3,2
  6602  044E  2C58               	goto	l4289
  6603  044F  3003               	movlw	3
  6604  0450  062C               	xorwf	_x,w
  6605  0451  042D               	iorwf	_x+1,w
  6606  0452  1D03               	btfss	3,2
  6607  0453  2C58               	goto	l4289
  6608                           
  6609                           ;Button_src.c: 499:                         x = 0;
  6610  0454  01AC               	clrf	_x
  6611  0455  01AD               	clrf	_x+1
  6612                           
  6613                           ;Button_src.c: 500:                         y = 0;
  6614  0456  01AA               	clrf	_y
  6615  0457  01AB               	clrf	_y+1
  6616  0458                     l4289:	
  6617                           
  6618                           ;Button_src.c: 502:                     button_delay();
  6619  0458  160A  118A  22E9  120A  118A  	fcall	_button_delay
  6620  045D                     l4291:	
  6621                           
  6622                           ;Button_src.c: 504:             if(RC7==0 && b == 'y'){
  6623  045D  1283               	bcf	3,5	;RP0=0, select bank0
  6624  045E  1303               	bcf	3,6	;RP1=0, select bank0
  6625  045F  1B87               	btfsc	7,7	;volatile
  6626  0460  2CE5               	goto	l4325
  6627  0461  3079               	movlw	121
  6628  0462  0649               	xorwf	_b,w
  6629  0463  1D03               	btfss	3,2
  6630  0464  2CE5               	goto	l4325
  6631                           
  6632                           ;Button_src.c: 505:                  if(stats == 1)
  6633  0465  0322               	decf	_stats,w
  6634  0466  0423               	iorwf	_stats+1,w
  6635  0467  1D03               	btfss	3,2
  6636  0468  2C6D               	goto	l778
  6637                           
  6638                           ;Button_src.c: 506:                     day_hex++;
  6639  0469  3001               	movlw	1
  6640  046A  00E5               	movwf	??_date_settings
  6641  046B  0865               	movf	??_date_settings,w
  6642  046C  07C7               	addwf	_day_hex,f
  6643  046D                     l778:	
  6644                           
  6645                           ;Button_src.c: 507:                 if(stats == 0){
  6646  046D  0822               	movf	_stats,w
  6647  046E  0423               	iorwf	_stats+1,w
  6648  046F  1D03               	btfss	3,2
  6649  0470  2C75               	goto	l779
  6650                           
  6651                           ;Button_src.c: 508:                     stats = 1;
  6652  0471  3001               	movlw	1
  6653  0472  00A2               	movwf	_stats
  6654  0473  3000               	movlw	0
  6655  0474  00A3               	movwf	_stats+1
  6656  0475                     l779:	
  6657                           ;Button_src.c: 509:                 }
  6658                           
  6659                           
  6660                           ;Button_src.c: 511:                     day_low++;
  6661  0475  3001               	movlw	1
  6662  0476  07A6               	addwf	_day_low,f
  6663  0477  1803               	skipnc
  6664  0478  0AA7               	incf	_day_low+1,f
  6665  0479  3000               	movlw	0
  6666  047A  07A7               	addwf	_day_low+1,f
  6667                           
  6668                           ;Button_src.c: 512:                     day_low = modulus_func(day_low,10);
  6669  047B  0827               	movf	_day_low+1,w
  6670  047C  00F8               	movwf	modulus_func@x+1
  6671  047D  0826               	movf	_day_low,w
  6672  047E  00F7               	movwf	modulus_func@x
  6673  047F  300A               	movlw	10
  6674  0480  00F9               	movwf	modulus_func@y
  6675  0481  3000               	movlw	0
  6676  0482  00FA               	movwf	modulus_func@y+1
  6677  0483  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  6678  0488  0878               	movf	?_modulus_func+1,w
  6679  0489  00A7               	movwf	_day_low+1
  6680  048A  0877               	movf	?_modulus_func,w
  6681  048B  00A6               	movwf	_day_low
  6682                           
  6683                           ;Button_src.c: 513:                     day_counter = modulus_func(day_low,8);
  6684  048C  0827               	movf	_day_low+1,w
  6685  048D  00F8               	movwf	modulus_func@x+1
  6686  048E  0826               	movf	_day_low,w
  6687  048F  00F7               	movwf	modulus_func@x
  6688  0490  3008               	movlw	8
  6689  0491  00F9               	movwf	modulus_func@y
  6690  0492  3000               	movlw	0
  6691  0493  00FA               	movwf	modulus_func@y+1
  6692  0494  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  6693  0499  0878               	movf	?_modulus_func+1,w
  6694  049A  1683               	bsf	3,5	;RP0=1, select bank1
  6695  049B  00A8               	movwf	(_day_counter+1)^(0+128)
  6696  049C  0877               	movf	?_modulus_func,w
  6697  049D  00A7               	movwf	_day_counter^(0+128)
  6698                           
  6699                           ;Button_src.c: 514:                     if (p == 1){
  6700  049E  1283               	bcf	3,5	;RP0=0, select bank0
  6701  049F  0320               	decf	_p,w
  6702  04A0  0421               	iorwf	_p+1,w
  6703  04A1  1D03               	btfss	3,2
  6704  04A2  2CBC               	goto	l4311
  6705                           
  6706                           ;Button_src.c: 515:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6707  04A3  0825               	movf	_day_high+1,w
  6708  04A4  00E1               	movwf	incrementor@upper_val+1
  6709  04A5  0824               	movf	_day_high,w
  6710  04A6  00E0               	movwf	incrementor@upper_val
  6711  04A7  0827               	movf	_day_low+1,w
  6712  04A8  00E3               	movwf	incrementor@lower_val+1
  6713  04A9  0826               	movf	_day_low,w
  6714  04AA  00E2               	movwf	incrementor@lower_val
  6715  04AB  3030               	movlw	48
  6716  04AC  00E5               	movwf	??_date_settings
  6717  04AD  0865               	movf	??_date_settings,w
  6718  04AE  00E4               	movwf	incrementor@z
  6719  04AF  160A  118A  23F8  120A  118A  	fcall	_incrementor
  6720  04B4  00E6               	movwf	??_date_settings+1
  6721  04B5  01E7               	clrf	??_date_settings+2
  6722  04B6  0866               	movf	??_date_settings+1,w
  6723  04B7  00A4               	movwf	_day_high
  6724  04B8  0867               	movf	??_date_settings+2,w
  6725  04B9  00A5               	movwf	_day_high+1
  6726                           
  6727                           ;Button_src.c: 516:                         p = 0;
  6728  04BA  01A0               	clrf	_p
  6729  04BB  01A1               	clrf	_p+1
  6730  04BC                     l4311:	
  6731                           
  6732                           ;Button_src.c: 518:                     if (day_low == 9){
  6733  04BC  3009               	movlw	9
  6734  04BD  0626               	xorwf	_day_low,w
  6735  04BE  0427               	iorwf	_day_low+1,w
  6736  04BF  1D03               	btfss	3,2
  6737  04C0  2CC5               	goto	l4315
  6738                           
  6739                           ;Button_src.c: 519:                         p = 1;
  6740  04C1  3001               	movlw	1
  6741  04C2  00A0               	movwf	_p
  6742  04C3  3000               	movlw	0
  6743  04C4  00A1               	movwf	_p+1
  6744  04C5                     l4315:	
  6745                           
  6746                           ;Button_src.c: 521:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6747  04C5  3063               	movlw	99
  6748  04C6  00E5               	movwf	??_date_settings
  6749  04C7  0865               	movf	??_date_settings,w
  6750  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6751  04C9  0847               	movf	_day_hex,w
  6752  04CA  160A  118A  22A7  120A  118A  	fcall	_time_date_hex_terminator
  6753  04CF  00E6               	movwf	??_date_settings+1
  6754  04D0  0866               	movf	??_date_settings+1,w
  6755  04D1  00C7               	movwf	_day_hex
  6756                           
  6757                           ;Button_src.c: 522:                     if(day_high == 3 && day_low==2 ){
  6758  04D2  3003               	movlw	3
  6759  04D3  0624               	xorwf	_day_high,w
  6760  04D4  0425               	iorwf	_day_high+1,w
  6761  04D5  1D03               	btfss	3,2
  6762  04D6  2CE0               	goto	l4323
  6763  04D7  3002               	movlw	2
  6764  04D8  0626               	xorwf	_day_low,w
  6765  04D9  0427               	iorwf	_day_low+1,w
  6766  04DA  1D03               	btfss	3,2
  6767  04DB  2CE0               	goto	l4323
  6768                           
  6769                           ;Button_src.c: 523:                         day_high = 0;
  6770  04DC  01A4               	clrf	_day_high
  6771  04DD  01A5               	clrf	_day_high+1
  6772                           
  6773                           ;Button_src.c: 524:                         day_low = 0;
  6774  04DE  01A6               	clrf	_day_low
  6775  04DF  01A7               	clrf	_day_low+1
  6776  04E0                     l4323:	
  6777                           
  6778                           ;Button_src.c: 526:                     button_delay();
  6779  04E0  160A  118A  22E9  120A  118A  	fcall	_button_delay
  6780  04E5                     l4325:	
  6781                           
  6782                           ;Button_src.c: 528:             if(RC7==0 && b == 'z'){
  6783  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6784  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6785  04E7  1B87               	btfsc	7,7	;volatile
  6786  04E8  2D4C               	goto	l4357
  6787  04E9  307A               	movlw	122
  6788  04EA  0649               	xorwf	_b,w
  6789  04EB  1D03               	btfss	3,2
  6790  04EC  2D4C               	goto	l4357
  6791                           
  6792                           ;Button_src.c: 529:                 if(stats == 1)
  6793  04ED  0322               	decf	_stats,w
  6794  04EE  0423               	iorwf	_stats+1,w
  6795  04EF  1D03               	btfss	3,2
  6796  04F0  2CF5               	goto	l784
  6797                           
  6798                           ;Button_src.c: 530:                    c++;
  6799  04F1  3001               	movlw	1
  6800  04F2  00E5               	movwf	??_date_settings
  6801  04F3  0865               	movf	??_date_settings,w
  6802  04F4  07C8               	addwf	_c,f
  6803  04F5                     l784:	
  6804                           
  6805                           ;Button_src.c: 531:                 if(stats == 0){
  6806  04F5  0822               	movf	_stats,w
  6807  04F6  0423               	iorwf	_stats+1,w
  6808  04F7  1D03               	btfss	3,2
  6809  04F8  2CFD               	goto	l785
  6810                           
  6811                           ;Button_src.c: 532:                     stats = 1;
  6812  04F9  3001               	movlw	1
  6813  04FA  00A2               	movwf	_stats
  6814  04FB  3000               	movlw	0
  6815  04FC  00A3               	movwf	_stats+1
  6816  04FD                     l785:	
  6817                           ;Button_src.c: 533:                 }
  6818                           
  6819                           
  6820                           ;Button_src.c: 535:                     t++;
  6821  04FD  3001               	movlw	1
  6822  04FE  07B0               	addwf	_t,f
  6823  04FF  1803               	skipnc
  6824  0500  0AB1               	incf	_t+1,f
  6825  0501  3000               	movlw	0
  6826  0502  07B1               	addwf	_t+1,f
  6827                           
  6828                           ;Button_src.c: 536:                     t = modulus_func(t,10);
  6829  0503  0831               	movf	_t+1,w
  6830  0504  00F8               	movwf	modulus_func@x+1
  6831  0505  0830               	movf	_t,w
  6832  0506  00F7               	movwf	modulus_func@x
  6833  0507  300A               	movlw	10
  6834  0508  00F9               	movwf	modulus_func@y
  6835  0509  3000               	movlw	0
  6836  050A  00FA               	movwf	modulus_func@y+1
  6837  050B  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  6838  0510  0878               	movf	?_modulus_func+1,w
  6839  0511  00B1               	movwf	_t+1
  6840  0512  0877               	movf	?_modulus_func,w
  6841  0513  00B0               	movwf	_t
  6842                           
  6843                           ;Button_src.c: 537:                      if (p == 1){
  6844  0514  0320               	decf	_p,w
  6845  0515  0421               	iorwf	_p+1,w
  6846  0516  1D03               	btfss	3,2
  6847  0517  2D31               	goto	l4343
  6848                           
  6849                           ;Button_src.c: 538:                         w = incrementor(w,t,'0');
  6850  0518  082F               	movf	_w+1,w
  6851  0519  00E1               	movwf	incrementor@upper_val+1
  6852  051A  082E               	movf	_w,w
  6853  051B  00E0               	movwf	incrementor@upper_val
  6854  051C  0831               	movf	_t+1,w
  6855  051D  00E3               	movwf	incrementor@lower_val+1
  6856  051E  0830               	movf	_t,w
  6857  051F  00E2               	movwf	incrementor@lower_val
  6858  0520  3030               	movlw	48
  6859  0521  00E5               	movwf	??_date_settings
  6860  0522  0865               	movf	??_date_settings,w
  6861  0523  00E4               	movwf	incrementor@z
  6862  0524  160A  118A  23F8  120A  118A  	fcall	_incrementor
  6863  0529  00E6               	movwf	??_date_settings+1
  6864  052A  01E7               	clrf	??_date_settings+2
  6865  052B  0866               	movf	??_date_settings+1,w
  6866  052C  00AE               	movwf	_w
  6867  052D  0867               	movf	??_date_settings+2,w
  6868  052E  00AF               	movwf	_w+1
  6869                           
  6870                           ;Button_src.c: 539:                         p = 0;
  6871  052F  01A0               	clrf	_p
  6872  0530  01A1               	clrf	_p+1
  6873  0531                     l4343:	
  6874                           
  6875                           ;Button_src.c: 541:                     if (t == 9){
  6876  0531  3009               	movlw	9
  6877  0532  0630               	xorwf	_t,w
  6878  0533  0431               	iorwf	_t+1,w
  6879  0534  1D03               	btfss	3,2
  6880  0535  2D3A               	goto	l4347
  6881                           
  6882                           ;Button_src.c: 542:                         p = 1;
  6883  0536  3001               	movlw	1
  6884  0537  00A0               	movwf	_p
  6885  0538  3000               	movlw	0
  6886  0539  00A1               	movwf	_p+1
  6887  053A                     l4347:	
  6888                           
  6889                           ;Button_src.c: 545:                      if(c == (0x59 + 1)){
  6890  053A  305A               	movlw	90
  6891  053B  0648               	xorwf	_c,w
  6892  053C  1903               	btfsc	3,2
  6893                           
  6894                           ;Button_src.c: 546:                         c = 0x00;
  6895  053D  01C8               	clrf	_c
  6896                           
  6897                           ;Button_src.c: 548:                     if(w == 6){
  6898  053E  3006               	movlw	6
  6899  053F  062E               	xorwf	_w,w
  6900  0540  042F               	iorwf	_w+1,w
  6901  0541  1D03               	btfss	3,2
  6902  0542  2D47               	goto	l4355
  6903                           
  6904                           ;Button_src.c: 549:                         w = 0;
  6905  0543  01AE               	clrf	_w
  6906  0544  01AF               	clrf	_w+1
  6907                           
  6908                           ;Button_src.c: 550:                         t = 0;
  6909  0545  01B0               	clrf	_t
  6910  0546  01B1               	clrf	_t+1
  6911  0547                     l4355:	
  6912                           
  6913                           ;Button_src.c: 552:                     button_delay();
  6914  0547  160A  118A  22E9  120A  118A  	fcall	_button_delay
  6915  054C                     l4357:	
  6916                           
  6917                           ;Button_src.c: 559:                     a = time_date_delimiter(a,0x11,'9',1);
  6918  054C  3011               	movlw	17
  6919  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6920  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6921  054F  00E5               	movwf	??_date_settings
  6922  0550  0865               	movf	??_date_settings,w
  6923  0551  00F0               	movwf	time_date_delimiter@hex
  6924  0552  3039               	movlw	57
  6925  0553  00E6               	movwf	??_date_settings+1
  6926  0554  0866               	movf	??_date_settings+1,w
  6927  0555  00F1               	movwf	time_date_delimiter@limiter
  6928  0556  3001               	movlw	1
  6929  0557  00F2               	movwf	time_date_delimiter@type
  6930  0558  3000               	movlw	0
  6931  0559  00F3               	movwf	time_date_delimiter@type+1
  6932  055A  084A               	movf	_a,w
  6933  055B  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  6934  0560  00E7               	movwf	??_date_settings+2
  6935  0561  0867               	movf	??_date_settings+2,w
  6936  0562  00CA               	movwf	_a
  6937                           
  6938                           ;Button_src.c: 561:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6939  0563  3011               	movlw	17
  6940  0564  00E5               	movwf	??_date_settings
  6941  0565  0865               	movf	??_date_settings,w
  6942  0566  00F0               	movwf	time_date_delimiter@hex
  6943  0567  3039               	movlw	57
  6944  0568  00E6               	movwf	??_date_settings+1
  6945  0569  0866               	movf	??_date_settings+1,w
  6946  056A  00F1               	movwf	time_date_delimiter@limiter
  6947  056B  3002               	movlw	2
  6948  056C  00F2               	movwf	time_date_delimiter@type
  6949  056D  3000               	movlw	0
  6950  056E  00F3               	movwf	time_date_delimiter@type+1
  6951  056F  0847               	movf	_day_hex,w
  6952  0570  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  6953  0575  00E7               	movwf	??_date_settings+2
  6954  0576  0867               	movf	??_date_settings+2,w
  6955  0577  00C7               	movwf	_day_hex
  6956                           
  6957                           ;Button_src.c: 562:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6958  0578  3021               	movlw	33
  6959  0579  00E5               	movwf	??_date_settings
  6960  057A  0865               	movf	??_date_settings,w
  6961  057B  00F0               	movwf	time_date_delimiter@hex
  6962  057C  304A               	movlw	74
  6963  057D  00E6               	movwf	??_date_settings+1
  6964  057E  0866               	movf	??_date_settings+1,w
  6965  057F  00F1               	movwf	time_date_delimiter@limiter
  6966  0580  3002               	movlw	2
  6967  0581  00F2               	movwf	time_date_delimiter@type
  6968  0582  3000               	movlw	0
  6969  0583  00F3               	movwf	time_date_delimiter@type+1
  6970  0584  0847               	movf	_day_hex,w
  6971  0585  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  6972  058A  00E7               	movwf	??_date_settings+2
  6973  058B  0867               	movf	??_date_settings+2,w
  6974  058C  00C7               	movwf	_day_hex
  6975                           
  6976                           ;Button_src.c: 563:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6977  058D  3011               	movlw	17
  6978  058E  00E5               	movwf	??_date_settings
  6979  058F  0865               	movf	??_date_settings,w
  6980  0590  00F0               	movwf	time_date_delimiter@hex
  6981  0591  3039               	movlw	57
  6982  0592  00E6               	movwf	??_date_settings+1
  6983  0593  0866               	movf	??_date_settings+1,w
  6984  0594  00F1               	movwf	time_date_delimiter@limiter
  6985  0595  3002               	movlw	2
  6986  0596  00F2               	movwf	time_date_delimiter@type
  6987  0597  3000               	movlw	0
  6988  0598  00F3               	movwf	time_date_delimiter@type+1
  6989  0599  0847               	movf	_day_hex,w
  6990  059A  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  6991  059F  00E7               	movwf	??_date_settings+2
  6992  05A0  0867               	movf	??_date_settings+2,w
  6993  05A1  00C7               	movwf	_day_hex
  6994                           
  6995                           ;Button_src.c: 564:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6996  05A2  3021               	movlw	33
  6997  05A3  00E5               	movwf	??_date_settings
  6998  05A4  0865               	movf	??_date_settings,w
  6999  05A5  00F0               	movwf	time_date_delimiter@hex
  7000  05A6  304A               	movlw	74
  7001  05A7  00E6               	movwf	??_date_settings+1
  7002  05A8  0866               	movf	??_date_settings+1,w
  7003  05A9  00F1               	movwf	time_date_delimiter@limiter
  7004  05AA  3002               	movlw	2
  7005  05AB  00F2               	movwf	time_date_delimiter@type
  7006  05AC  3000               	movlw	0
  7007  05AD  00F3               	movwf	time_date_delimiter@type+1
  7008  05AE  0847               	movf	_day_hex,w
  7009  05AF  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7010  05B4  00E7               	movwf	??_date_settings+2
  7011  05B5  0867               	movf	??_date_settings+2,w
  7012  05B6  00C7               	movwf	_day_hex
  7013                           
  7014                           ;Button_src.c: 565:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  7015  05B7  3031               	movlw	49
  7016  05B8  00E5               	movwf	??_date_settings
  7017  05B9  0865               	movf	??_date_settings,w
  7018  05BA  00F0               	movwf	time_date_delimiter@hex
  7019  05BB  3059               	movlw	89
  7020  05BC  00E6               	movwf	??_date_settings+1
  7021  05BD  0866               	movf	??_date_settings+1,w
  7022  05BE  00F1               	movwf	time_date_delimiter@limiter
  7023  05BF  3002               	movlw	2
  7024  05C0  00F2               	movwf	time_date_delimiter@type
  7025  05C1  3000               	movlw	0
  7026  05C2  00F3               	movwf	time_date_delimiter@type+1
  7027  05C3  0847               	movf	_day_hex,w
  7028  05C4  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7029  05C9  00E7               	movwf	??_date_settings+2
  7030  05CA  0867               	movf	??_date_settings+2,w
  7031  05CB  00C7               	movwf	_day_hex
  7032                           
  7033                           ;Button_src.c: 567:                     c = time_date_delimiter(c,0x11,'9',3);
  7034  05CC  3011               	movlw	17
  7035  05CD  00E5               	movwf	??_date_settings
  7036  05CE  0865               	movf	??_date_settings,w
  7037  05CF  00F0               	movwf	time_date_delimiter@hex
  7038  05D0  3039               	movlw	57
  7039  05D1  00E6               	movwf	??_date_settings+1
  7040  05D2  0866               	movf	??_date_settings+1,w
  7041  05D3  00F1               	movwf	time_date_delimiter@limiter
  7042  05D4  3003               	movlw	3
  7043  05D5  00F2               	movwf	time_date_delimiter@type
  7044  05D6  3000               	movlw	0
  7045  05D7  00F3               	movwf	time_date_delimiter@type+1
  7046  05D8  0848               	movf	_c,w
  7047  05D9  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7048  05DE  00E7               	movwf	??_date_settings+2
  7049  05DF  0867               	movf	??_date_settings+2,w
  7050  05E0  00C8               	movwf	_c
  7051                           
  7052                           ;Button_src.c: 568:                     c = time_date_delimiter(c,0x21,'J',3);
  7053  05E1  3021               	movlw	33
  7054  05E2  00E5               	movwf	??_date_settings
  7055  05E3  0865               	movf	??_date_settings,w
  7056  05E4  00F0               	movwf	time_date_delimiter@hex
  7057  05E5  304A               	movlw	74
  7058  05E6  00E6               	movwf	??_date_settings+1
  7059  05E7  0866               	movf	??_date_settings+1,w
  7060  05E8  00F1               	movwf	time_date_delimiter@limiter
  7061  05E9  3003               	movlw	3
  7062  05EA  00F2               	movwf	time_date_delimiter@type
  7063  05EB  3000               	movlw	0
  7064  05EC  00F3               	movwf	time_date_delimiter@type+1
  7065  05ED  0848               	movf	_c,w
  7066  05EE  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7067  05F3  00E7               	movwf	??_date_settings+2
  7068  05F4  0867               	movf	??_date_settings+2,w
  7069  05F5  00C8               	movwf	_c
  7070                           
  7071                           ;Button_src.c: 569:                     c = time_date_delimiter(c,0x11,'9',3);
  7072  05F6  3011               	movlw	17
  7073  05F7  00E5               	movwf	??_date_settings
  7074  05F8  0865               	movf	??_date_settings,w
  7075  05F9  00F0               	movwf	time_date_delimiter@hex
  7076  05FA  3039               	movlw	57
  7077  05FB  00E6               	movwf	??_date_settings+1
  7078  05FC  0866               	movf	??_date_settings+1,w
  7079  05FD  00F1               	movwf	time_date_delimiter@limiter
  7080  05FE  3003               	movlw	3
  7081  05FF  00F2               	movwf	time_date_delimiter@type
  7082  0600  3000               	movlw	0
  7083  0601  00F3               	movwf	time_date_delimiter@type+1
  7084  0602  0848               	movf	_c,w
  7085  0603  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7086  0608  00E7               	movwf	??_date_settings+2
  7087  0609  0867               	movf	??_date_settings+2,w
  7088  060A  00C8               	movwf	_c
  7089                           
  7090                           ;Button_src.c: 570:                     c = time_date_delimiter(c,0x21,'J',3);
  7091  060B  3021               	movlw	33
  7092  060C  00E5               	movwf	??_date_settings
  7093  060D  0865               	movf	??_date_settings,w
  7094  060E  00F0               	movwf	time_date_delimiter@hex
  7095  060F  304A               	movlw	74
  7096  0610  00E6               	movwf	??_date_settings+1
  7097  0611  0866               	movf	??_date_settings+1,w
  7098  0612  00F1               	movwf	time_date_delimiter@limiter
  7099  0613  3003               	movlw	3
  7100  0614  00F2               	movwf	time_date_delimiter@type
  7101  0615  3000               	movlw	0
  7102  0616  00F3               	movwf	time_date_delimiter@type+1
  7103  0617  0848               	movf	_c,w
  7104  0618  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7105  061D  00E7               	movwf	??_date_settings+2
  7106  061E  0867               	movf	??_date_settings+2,w
  7107  061F  00C8               	movwf	_c
  7108                           
  7109                           ;Button_src.c: 571:                     c = time_date_delimiter(c,0x31,'Y',3);
  7110  0620  3031               	movlw	49
  7111  0621  00E5               	movwf	??_date_settings
  7112  0622  0865               	movf	??_date_settings,w
  7113  0623  00F0               	movwf	time_date_delimiter@hex
  7114  0624  3059               	movlw	89
  7115  0625  00E6               	movwf	??_date_settings+1
  7116  0626  0866               	movf	??_date_settings+1,w
  7117  0627  00F1               	movwf	time_date_delimiter@limiter
  7118  0628  3003               	movlw	3
  7119  0629  00F2               	movwf	time_date_delimiter@type
  7120  062A  3000               	movlw	0
  7121  062B  00F3               	movwf	time_date_delimiter@type+1
  7122  062C  0848               	movf	_c,w
  7123  062D  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7124  0632  00E7               	movwf	??_date_settings+2
  7125  0633  0867               	movf	??_date_settings+2,w
  7126  0634  00C8               	movwf	_c
  7127                           
  7128                           ;Button_src.c: 572:                     c = time_date_delimiter(c,0x41,'j',3);
  7129  0635  3041               	movlw	65
  7130  0636  00E5               	movwf	??_date_settings
  7131  0637  0865               	movf	??_date_settings,w
  7132  0638  00F0               	movwf	time_date_delimiter@hex
  7133  0639  306A               	movlw	106
  7134  063A  00E6               	movwf	??_date_settings+1
  7135  063B  0866               	movf	??_date_settings+1,w
  7136  063C  00F1               	movwf	time_date_delimiter@limiter
  7137  063D  3003               	movlw	3
  7138  063E  00F2               	movwf	time_date_delimiter@type
  7139  063F  3000               	movlw	0
  7140  0640  00F3               	movwf	time_date_delimiter@type+1
  7141  0641  0848               	movf	_c,w
  7142  0642  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7143  0647  00E7               	movwf	??_date_settings+2
  7144  0648  0867               	movf	??_date_settings+2,w
  7145  0649  00C8               	movwf	_c
  7146                           
  7147                           ;Button_src.c: 573:                     c = time_date_delimiter(c,0x51,'z',3);
  7148  064A  3051               	movlw	81
  7149  064B  00E5               	movwf	??_date_settings
  7150  064C  0865               	movf	??_date_settings,w
  7151  064D  00F0               	movwf	time_date_delimiter@hex
  7152  064E  307A               	movlw	122
  7153  064F  00E6               	movwf	??_date_settings+1
  7154  0650  0866               	movf	??_date_settings+1,w
  7155  0651  00F1               	movwf	time_date_delimiter@limiter
  7156  0652  3003               	movlw	3
  7157  0653  00F2               	movwf	time_date_delimiter@type
  7158  0654  3000               	movlw	0
  7159  0655  00F3               	movwf	time_date_delimiter@type+1
  7160  0656  0848               	movf	_c,w
  7161  0657  120A  158A  21BE  120A  118A  	fcall	_time_date_delimiter
  7162  065C  00E7               	movwf	??_date_settings+2
  7163  065D  0867               	movf	??_date_settings+2,w
  7164  065E  00C8               	movwf	_c
  7165                           
  7166                           ;Button_src.c: 575:               if(stats==0){
  7167  065F  0822               	movf	_stats,w
  7168  0660  0423               	iorwf	_stats+1,w
  7169  0661  1D03               	btfss	3,2
  7170  0662  2E71               	goto	l4387
  7171                           
  7172                           ;Button_src.c: 576:                   table[4] = prev_hex;
  7173  0663  0845               	movf	_prev_hex,w
  7174  0664  00E5               	movwf	??_date_settings
  7175  0665  0865               	movf	??_date_settings,w
  7176  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7177  0667  00B7               	movwf	(_table^(0+128)+4)
  7178                           
  7179                           ;Button_src.c: 577:                   table[6] = prev_hex_year;
  7180  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7181  0669  0843               	movf	_prev_hex_year,w
  7182  066A  00E5               	movwf	??_date_settings
  7183  066B  0865               	movf	??_date_settings,w
  7184  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7185  066D  00B9               	movwf	(_table^(0+128)+6)
  7186                           
  7187                           ;Button_src.c: 578:                   table[3] = prev_hex_day;
  7188  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7189  066F  0844               	movf	_prev_hex_day,w
  7190  0670  2E82               	goto	L3
  7191  0671                     l4387:	
  7192                           ;Button_src.c: 579:               }
  7193                           
  7194  0671  0322               	decf	_stats,w
  7195  0672  0423               	iorwf	_stats+1,w
  7196  0673  1D03               	btfss	3,2
  7197  0674  2E86               	goto	l4391
  7198                           
  7199                           ;Button_src.c: 581:               {;Button_src.c: 582:                  table[4]= a;
  7200  0675  084A               	movf	_a,w
  7201  0676  00E5               	movwf	??_date_settings
  7202  0677  0865               	movf	??_date_settings,w
  7203  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7204  0679  00B7               	movwf	(_table^(0+128)+4)
  7205                           
  7206                           ;Button_src.c: 583:                  table[6] = c;
  7207  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7208  067B  0848               	movf	_c,w
  7209  067C  00E5               	movwf	??_date_settings
  7210  067D  0865               	movf	??_date_settings,w
  7211  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7212  067F  00B9               	movwf	(_table^(0+128)+6)
  7213                           
  7214                           ;Button_src.c: 584:                  table[3] = day_hex;
  7215  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7216  0681  0847               	movf	_day_hex,w
  7217  0682                     L3:	
  7218  0682  00E5               	movwf	??_date_settings
  7219  0683  0865               	movf	??_date_settings,w
  7220  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7221  0685  00B6               	movwf	(_table^(0+128)+3)
  7222  0686                     l4391:	
  7223                           
  7224                           ;Button_src.c: 587:              write_cmd(0x88);
  7225  0686  3088               	movlw	136
  7226  0687  160A  118A  233C  120A  118A  	fcall	_write_cmd
  7227                           
  7228                           ;Button_src.c: 589:                   RC0 = 0;
  7229  068C  1007               	bcf	7,0	;volatile
  7230                           
  7231                           ;Button_src.c: 590:                   RC1 = 1;
  7232  068D  1487               	bsf	7,1	;volatile
  7233                           
  7234                           ;Button_src.c: 591:                   RC2 = 1;
  7235  068E  1507               	bsf	7,2	;volatile
  7236                           
  7237                           ;Button_src.c: 592:                   RC3 = 1;
  7238  068F  1587               	bsf	7,3	;volatile
  7239                           
  7240                           ;Button_src.c: 594:                     if (RC6 == 0 ){
  7241  0690  1B07               	btfsc	7,6	;volatile
  7242  0691  2EAB               	goto	l793
  7243                           
  7244                           ;Button_src.c: 595:                           set_time();
  7245  0692  160A  118A  2442  120A  118A  	fcall	_set_time
  7246                           
  7247                           ;Button_src.c: 596:                           a = 0x00;
  7248  0697  01CA               	clrf	_a
  7249                           
  7250                           ;Button_src.c: 597:                           c = 0x00;
  7251  0698  01C8               	clrf	_c
  7252                           
  7253                           ;Button_src.c: 598:                           day_hex = 0x00;
  7254  0699  01C7               	clrf	_day_hex
  7255                           
  7256                           ;Button_src.c: 599:                           day_high = 0;
  7257  069A  01A4               	clrf	_day_high
  7258  069B  01A5               	clrf	_day_high+1
  7259                           
  7260                           ;Button_src.c: 600:                           day_low = 0;
  7261  069C  01A6               	clrf	_day_low
  7262  069D  01A7               	clrf	_day_low+1
  7263                           
  7264                           ;Button_src.c: 601:                           x = 0;
  7265  069E  01AC               	clrf	_x
  7266  069F  01AD               	clrf	_x+1
  7267                           
  7268                           ;Button_src.c: 602:                           y = 0;
  7269  06A0  01AA               	clrf	_y
  7270  06A1  01AB               	clrf	_y+1
  7271                           
  7272                           ;Button_src.c: 603:                           w = 0;
  7273  06A2  01AE               	clrf	_w
  7274  06A3  01AF               	clrf	_w+1
  7275                           
  7276                           ;Button_src.c: 604:                           t = 0;
  7277  06A4  01B0               	clrf	_t
  7278  06A5  01B1               	clrf	_t+1
  7279                           
  7280                           ;Button_src.c: 605:                           write_cmd(0x1);
  7281  06A6  3001               	movlw	1
  7282  06A7  160A  118A  233C   	fcall	_write_cmd
  7283  06AA  0008               	return
  7284  06AB                     l793:	
  7285                           ;Button_src.c: 607:                             }
  7286                           
  7287                           
  7288                           ;Button_src.c: 608:                   RC0 = 0;
  7289  06AB  1007               	bcf	7,0	;volatile
  7290                           
  7291                           ;Button_src.c: 609:                   RC1 = 1;
  7292  06AC  1487               	bsf	7,1	;volatile
  7293                           
  7294                           ;Button_src.c: 610:                   RC2 = 1;
  7295  06AD  1507               	bsf	7,2	;volatile
  7296                           
  7297                           ;Button_src.c: 611:                   RC3 = 1;
  7298  06AE  1587               	bsf	7,3	;volatile
  7299                           
  7300                           ;Button_src.c: 612:                   z = modulus_func(z,3);
  7301  06AF  0829               	movf	_z+1,w
  7302  06B0  00F8               	movwf	modulus_func@x+1
  7303  06B1  0828               	movf	_z,w
  7304  06B2  00F7               	movwf	modulus_func@x
  7305  06B3  3003               	movlw	3
  7306  06B4  00F9               	movwf	modulus_func@y
  7307  06B5  3000               	movlw	0
  7308  06B6  00FA               	movwf	modulus_func@y+1
  7309  06B7  160A  118A  22C5  120A  118A  	fcall	_modulus_func
  7310  06BC  0878               	movf	?_modulus_func+1,w
  7311  06BD  00A9               	movwf	_z+1
  7312  06BE  0877               	movf	?_modulus_func,w
  7313  06BF  00A8               	movwf	_z
  7314                           
  7315                           ;Button_src.c: 613:                   if(RC4 == 0 && z ==0){
  7316  06C0  1A07               	btfsc	7,4	;volatile
  7317  06C1  2F01               	goto	l4439
  7318  06C2  0828               	movf	_z,w
  7319  06C3  0429               	iorwf	_z+1,w
  7320  06C4  1D03               	btfss	3,2
  7321  06C5  2F01               	goto	l4439
  7322                           
  7323                           ;Button_src.c: 614:                       write_cmd(0x90);
  7324  06C6  3090               	movlw	144
  7325  06C7  160A  118A  233C  120A  118A  	fcall	_write_cmd
  7326                           
  7327                           ;Button_src.c: 615:                       write_char('D');
  7328  06CC  3044               	movlw	68
  7329  06CD  160A  118A  2325  120A  118A  	fcall	_write_char
  7330                           
  7331                           ;Button_src.c: 616:                       write_char('a');
  7332  06D2  3061               	movlw	97
  7333  06D3  160A  118A  2325  120A  118A  	fcall	_write_char
  7334                           
  7335                           ;Button_src.c: 617:                       write_char('y');
  7336  06D8  3079               	movlw	121
  7337  06D9  160A  118A  2325  120A  118A  	fcall	_write_char
  7338                           
  7339                           ;Button_src.c: 618:                       write_char(':');
  7340  06DE  303A               	movlw	58
  7341  06DF  160A  118A  2325  120A  118A  	fcall	_write_char
  7342                           
  7343                           ;Button_src.c: 619:                       write_char(' ');
  7344  06E4  3020               	movlw	32
  7345  06E5  160A  118A  2325  120A  118A  	fcall	_write_char
  7346                           
  7347                           ;Button_src.c: 620:                       write_char(' ');
  7348  06EA  3020               	movlw	32
  7349  06EB  160A  118A  2325  120A  118A  	fcall	_write_char
  7350                           
  7351                           ;Button_src.c: 621:                       b = 'y';
  7352  06F0  3079               	movlw	121
  7353  06F1  00E5               	movwf	??_date_settings
  7354  06F2  0865               	movf	??_date_settings,w
  7355  06F3  00C9               	movwf	_b
  7356                           
  7357                           ;Button_src.c: 623:                       button_delay();
  7358  06F4  160A  118A  22E9  120A  118A  	fcall	_button_delay
  7359                           
  7360                           ;Button_src.c: 624:                       z++;
  7361  06F9  3001               	movlw	1
  7362  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7363  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7364  06FC  07A8               	addwf	_z,f
  7365  06FD  1803               	skipnc
  7366  06FE  0AA9               	incf	_z+1,f
  7367  06FF  3000               	movlw	0
  7368  0700  07A9               	addwf	_z+1,f
  7369  0701                     l4439:	
  7370                           
  7371                           ;Button_src.c: 626:                   RC0 = 0;
  7372  0701  1007               	bcf	7,0	;volatile
  7373                           
  7374                           ;Button_src.c: 627:                   RC1 = 1;
  7375  0702  1487               	bsf	7,1	;volatile
  7376                           
  7377                           ;Button_src.c: 628:                   RC2 = 1;
  7378  0703  1507               	bsf	7,2	;volatile
  7379                           
  7380                           ;Button_src.c: 629:                   RC3 = 1;
  7381  0704  1587               	bsf	7,3	;volatile
  7382                           
  7383                           ;Button_src.c: 630:                   if(RC4 == 0&& z ==1){
  7384  0705  1A07               	btfsc	7,4	;volatile
  7385  0706  2F44               	goto	l4469
  7386  0707  0328               	decf	_z,w
  7387  0708  0429               	iorwf	_z+1,w
  7388  0709  1D03               	btfss	3,2
  7389  070A  2F44               	goto	l4469
  7390                           
  7391                           ;Button_src.c: 631:                       z++;
  7392  070B  3001               	movlw	1
  7393  070C  07A8               	addwf	_z,f
  7394  070D  1803               	skipnc
  7395  070E  0AA9               	incf	_z+1,f
  7396  070F  3000               	movlw	0
  7397  0710  07A9               	addwf	_z+1,f
  7398                           
  7399                           ;Button_src.c: 632:                       button_delay();
  7400  0711  160A  118A  22E9  120A  118A  	fcall	_button_delay
  7401                           
  7402                           ;Button_src.c: 634:                       write_cmd(0x90);
  7403  0716  3090               	movlw	144
  7404  0717  160A  118A  233C  120A  118A  	fcall	_write_cmd
  7405                           
  7406                           ;Button_src.c: 635:                       write_char('M');
  7407  071C  304D               	movlw	77
  7408  071D  160A  118A  2325  120A  118A  	fcall	_write_char
  7409                           
  7410                           ;Button_src.c: 636:                       write_char('o');
  7411  0722  306F               	movlw	111
  7412  0723  160A  118A  2325  120A  118A  	fcall	_write_char
  7413                           
  7414                           ;Button_src.c: 637:                       write_char('n');
  7415  0728  306E               	movlw	110
  7416  0729  160A  118A  2325  120A  118A  	fcall	_write_char
  7417                           
  7418                           ;Button_src.c: 638:                       write_char('t');
  7419  072E  3074               	movlw	116
  7420  072F  160A  118A  2325  120A  118A  	fcall	_write_char
  7421                           
  7422                           ;Button_src.c: 639:                       write_char('h');
  7423  0734  3068               	movlw	104
  7424  0735  160A  118A  2325  120A  118A  	fcall	_write_char
  7425                           
  7426                           ;Button_src.c: 640:                       write_char(':');
  7427  073A  303A               	movlw	58
  7428  073B  160A  118A  2325  120A  118A  	fcall	_write_char
  7429                           
  7430                           ;Button_src.c: 641:                       b = 'x';
  7431  0740  3078               	movlw	120
  7432  0741  00E5               	movwf	??_date_settings
  7433  0742  0865               	movf	??_date_settings,w
  7434  0743  00C9               	movwf	_b
  7435  0744                     l4469:	
  7436                           
  7437                           ;Button_src.c: 644:                   RC0 = 0;
  7438  0744  1007               	bcf	7,0	;volatile
  7439                           
  7440                           ;Button_src.c: 645:                   RC1 = 1;
  7441  0745  1487               	bsf	7,1	;volatile
  7442                           
  7443                           ;Button_src.c: 646:                   RC2 = 1;
  7444  0746  1507               	bsf	7,2	;volatile
  7445                           
  7446                           ;Button_src.c: 647:                   RC3 = 1;
  7447  0747  1587               	bsf	7,3	;volatile
  7448                           
  7449                           ;Button_src.c: 648:                   if(RC4 == 0&& z ==2){
  7450  0748  1A07               	btfsc	7,4	;volatile
  7451  0749  2F8A               	goto	l4499
  7452  074A  3002               	movlw	2
  7453  074B  0628               	xorwf	_z,w
  7454  074C  0429               	iorwf	_z+1,w
  7455  074D  1D03               	btfss	3,2
  7456  074E  2F8A               	goto	l4499
  7457                           
  7458                           ;Button_src.c: 649:                       button_delay();
  7459  074F  160A  118A  22E9  120A  118A  	fcall	_button_delay
  7460                           
  7461                           ;Button_src.c: 650:                       z++;
  7462  0754  3001               	movlw	1
  7463  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7464  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7465  0757  07A8               	addwf	_z,f
  7466  0758  1803               	skipnc
  7467  0759  0AA9               	incf	_z+1,f
  7468  075A  3000               	movlw	0
  7469  075B  07A9               	addwf	_z+1,f
  7470                           
  7471                           ;Button_src.c: 652:                       write_cmd(0x90);
  7472  075C  3090               	movlw	144
  7473  075D  160A  118A  233C  120A  118A  	fcall	_write_cmd
  7474                           
  7475                           ;Button_src.c: 653:                       write_char('Y');
  7476  0762  3059               	movlw	89
  7477  0763  160A  118A  2325  120A  118A  	fcall	_write_char
  7478                           
  7479                           ;Button_src.c: 654:                       write_char('e');
  7480  0768  3065               	movlw	101
  7481  0769  160A  118A  2325  120A  118A  	fcall	_write_char
  7482                           
  7483                           ;Button_src.c: 655:                       write_char('a');
  7484  076E  3061               	movlw	97
  7485  076F  160A  118A  2325  120A  118A  	fcall	_write_char
  7486                           
  7487                           ;Button_src.c: 656:                       write_char('r');
  7488  0774  3072               	movlw	114
  7489  0775  160A  118A  2325  120A  118A  	fcall	_write_char
  7490                           
  7491                           ;Button_src.c: 657:                       write_char(':');
  7492  077A  303A               	movlw	58
  7493  077B  160A  118A  2325  120A  118A  	fcall	_write_char
  7494                           
  7495                           ;Button_src.c: 658:                       write_char(' ');
  7496  0780  3020               	movlw	32
  7497  0781  160A  118A  2325  120A  118A  	fcall	_write_char
  7498                           
  7499                           ;Button_src.c: 659:                       b = 'z';
  7500  0786  307A               	movlw	122
  7501  0787  00E5               	movwf	??_date_settings
  7502  0788  0865               	movf	??_date_settings,w
  7503  0789  00C9               	movwf	_b
  7504  078A                     l4499:	
  7505                           
  7506                           ;Button_src.c: 662:               write_cmd(0x88);
  7507  078A  3088               	movlw	136
  7508  078B  160A  118A  233C  120A  118A  	fcall	_write_cmd
  7509                           
  7510                           ;Button_src.c: 663:               write_char(day_high + '0');
  7511  0790  0824               	movf	_day_high,w
  7512  0791  3E30               	addlw	48
  7513  0792  160A  118A  2325  120A  118A  	fcall	_write_char
  7514                           
  7515                           ;Button_src.c: 664:               write_char(day_low + '0');
  7516  0797  0826               	movf	_day_low,w
  7517  0798  3E30               	addlw	48
  7518  0799  160A  118A  2325  120A  118A  	fcall	_write_char
  7519                           
  7520                           ;Button_src.c: 665:               write_char('/');
  7521  079E  302F               	movlw	47
  7522  079F  160A  118A  2325  120A  118A  	fcall	_write_char
  7523                           
  7524                           ;Button_src.c: 666:               write_char(y + '0');
  7525  07A4  082A               	movf	_y,w
  7526  07A5  3E30               	addlw	48
  7527  07A6  160A  118A  2325  120A  118A  	fcall	_write_char
  7528                           
  7529                           ;Button_src.c: 667:               write_char(x + '0');
  7530  07AB  082C               	movf	_x,w
  7531  07AC  3E30               	addlw	48
  7532  07AD  160A  118A  2325  120A  118A  	fcall	_write_char
  7533                           
  7534                           ;Button_src.c: 668:               write_char('/');
  7535  07B2  302F               	movlw	47
  7536  07B3  160A  118A  2325  120A  118A  	fcall	_write_char
  7537                           
  7538                           ;Button_src.c: 669:               write_char(w+ '0');
  7539  07B8  082E               	movf	_w,w
  7540  07B9  3E30               	addlw	48
  7541  07BA  160A  118A  2325  120A  118A  	fcall	_write_char
  7542                           
  7543                           ;Button_src.c: 670:               write_char(t+ '0');
  7544  07BF  0830               	movf	_t,w
  7545  07C0  3E30               	addlw	48
  7546  07C1  160A  118A  2325  120A  118A  	fcall	_write_char
  7547                           
  7548                           ;Button_src.c: 673:             RC0 = 0;
  7549  07C6  1007               	bcf	7,0	;volatile
  7550                           
  7551                           ;Button_src.c: 674:             RC1 = 1;
  7552  07C7  1487               	bsf	7,1	;volatile
  7553                           
  7554                           ;Button_src.c: 675:             RC2 = 1;
  7555  07C8  1507               	bsf	7,2	;volatile
  7556                           
  7557                           ;Button_src.c: 676:             RC3 = 1;
  7558  07C9  1587               	bsf	7,3	;volatile
  7559                           
  7560                           ;Button_src.c: 677:             if (RC7 == 0 ){
  7561  07CA  1B87               	btfsc	7,7	;volatile
  7562  07CB  2B93               	goto	l770
  7563                           
  7564                           ;Button_src.c: 678:             a = 0x00;
  7565  07CC  01CA               	clrf	_a
  7566                           
  7567                           ;Button_src.c: 679:             c = 0x00;
  7568  07CD  01C8               	clrf	_c
  7569                           
  7570                           ;Button_src.c: 680:             day_hex = 0x00;
  7571  07CE  01C7               	clrf	_day_hex
  7572                           
  7573                           ;Button_src.c: 681:             x = 0;
  7574  07CF  01AC               	clrf	_x
  7575  07D0  01AD               	clrf	_x+1
  7576                           
  7577                           ;Button_src.c: 682:             y = 0;
  7578  07D1  01AA               	clrf	_y
  7579  07D2  01AB               	clrf	_y+1
  7580                           
  7581                           ;Button_src.c: 683:             w = 0;
  7582  07D3  01AE               	clrf	_w
  7583  07D4  01AF               	clrf	_w+1
  7584                           
  7585                           ;Button_src.c: 684:             t = 0;
  7586  07D5  01B0               	clrf	_t
  7587  07D6  01B1               	clrf	_t+1
  7588                           
  7589                           ;Button_src.c: 685:             day_high = 0;
  7590  07D7  01A4               	clrf	_day_high
  7591  07D8  01A5               	clrf	_day_high+1
  7592                           
  7593                           ;Button_src.c: 686:             day_low = 0;
  7594  07D9  01A6               	clrf	_day_low
  7595  07DA  01A7               	clrf	_day_low+1
  7596                           
  7597                           ;Button_src.c: 687:             write_cmd(0x1);
  7598  07DB  3001               	movlw	1
  7599  07DC  160A  118A  233C   	fcall	_write_cmd
  7600                           
  7601                           ;Button_src.c: 688:             break;
  7602  07DF  0008               	return
  7603  07E0                     __end_of_date_settings:	
  7604                           
  7605                           	psect	text29
  7606  133C                     __ptext29:	
  7607 ;; *************** function _write_cmd *****************
  7608 ;; Defined at:
  7609 ;;		line 41 in file "LCD_src.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  x               1    wreg     unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  x               1    2[COMMON] unsigned char 
  7614 ;;  i               2    0        int 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  1    wreg      void 
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 300/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7624 ;;      Params:         0       0       0       0       0
  7625 ;;      Locals:         1       0       0       0       0
  7626 ;;      Temps:          0       0       0       0       0
  7627 ;;      Totals:         1       0       0       0       0
  7628 ;;Total ram usage:        1 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    1
  7631 ;; This function calls:
  7632 ;;		_delay_screen
  7633 ;; This function is called by:
  7634 ;;		_main
  7635 ;;		_lcd_init
  7636 ;;		_thermometer_threshhold_settings
  7637 ;;		_time_settings
  7638 ;;		_date_settings
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           
  7643                           ;psect for function _write_cmd
  7644  133C                     _write_cmd:	
  7645                           
  7646                           ;incstack = 0
  7647                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7648                           ;write_cmd@x stored from wreg
  7649  133C  00F2               	movwf	write_cmd@x
  7650                           
  7651                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7652  133D  1283               	bcf	3,5	;RP0=0, select bank0
  7653  133E  1303               	bcf	3,6	;RP1=0, select bank0
  7654  133F  1285               	bcf	5,5	;volatile
  7655                           
  7656                           ;LCD_src.c: 45:  RA4=0;
  7657  1340  1205               	bcf	5,4	;volatile
  7658                           
  7659                           ;LCD_src.c: 46:  RA3=0;
  7660  1341  1185               	bcf	5,3	;volatile
  7661                           
  7662                           ;LCD_src.c: 47:  delay_screen();
  7663  1342  160A  118A  22D5  160A  118A  	fcall	_delay_screen
  7664                           
  7665                           ;LCD_src.c: 48:  RA3=1;
  7666  1347  1283               	bcf	3,5	;RP0=0, select bank0
  7667  1348  1303               	bcf	3,6	;RP1=0, select bank0
  7668  1349  1585               	bsf	5,3	;volatile
  7669                           
  7670                           ;LCD_src.c: 49:  PORTD=x;
  7671  134A  0872               	movf	write_cmd@x,w
  7672  134B  0088               	movwf	8	;volatile
  7673                           
  7674                           ;LCD_src.c: 50:  delay_screen();
  7675  134C  160A  118A  22D5   	fcall	_delay_screen
  7676                           
  7677                           ;LCD_src.c: 51:  RA3=0;
  7678  134F  1283               	bcf	3,5	;RP0=0, select bank0
  7679  1350  1303               	bcf	3,6	;RP1=0, select bank0
  7680  1351  1185               	bcf	5,3	;volatile
  7681  1352  0008               	return
  7682  1353                     __end_of_write_cmd:	
  7683                           
  7684                           	psect	text30
  7685  12A7                     __ptext30:	
  7686 ;; *************** function _time_date_hex_terminator *****************
  7687 ;; Defined at:
  7688 ;;		line 87 in file "math_src.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;  val             1    wreg     unsigned char 
  7691 ;;  limiter         1    0[COMMON] unsigned char 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  val             1    3[COMMON] unsigned char 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      unsigned char 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2
  7698 ;; Tracked objects:
  7699 ;;		On entry : 300/0
  7700 ;;		On exit  : 300/0
  7701 ;;		Unchanged: 300/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7703 ;;      Params:         1       0       0       0       0
  7704 ;;      Locals:         1       0       0       0       0
  7705 ;;      Temps:          2       0       0       0       0
  7706 ;;      Totals:         4       0       0       0       0
  7707 ;;Total ram usage:        4 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; This function calls:
  7710 ;;		Nothing
  7711 ;; This function is called by:
  7712 ;;		_thermometer_threshhold_settings
  7713 ;;		_time_settings
  7714 ;;		_date_settings
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _time_date_hex_terminator
  7720  12A7                     _time_date_hex_terminator:	
  7721                           
  7722                           ;incstack = 0
  7723                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7724                           ;time_date_hex_terminator@val stored from wreg
  7725  12A7  00F3               	movwf	time_date_hex_terminator@val
  7726                           
  7727                           ;math_src.c: 88:     if((val + '0') == limiter){
  7728  12A8  0873               	movf	time_date_hex_terminator@val,w
  7729  12A9  3E30               	addlw	48
  7730  12AA  00F1               	movwf	??_time_date_hex_terminator
  7731  12AB  3000               	movlw	0
  7732  12AC  1803               	skipnc
  7733  12AD  3001               	movlw	1
  7734  12AE  00F2               	movwf	??_time_date_hex_terminator+1
  7735  12AF  0870               	movf	time_date_hex_terminator@limiter,w
  7736  12B0  0671               	xorwf	??_time_date_hex_terminator,w
  7737  12B1  0472               	iorwf	??_time_date_hex_terminator+1,w
  7738  12B2  1903               	btfsc	3,2
  7739                           
  7740                           ;math_src.c: 89:     val = 0x00;
  7741  12B3  01F3               	clrf	time_date_hex_terminator@val
  7742                           
  7743                           ;math_src.c: 91:     return val;
  7744  12B4  0873               	movf	time_date_hex_terminator@val,w
  7745  12B5  0008               	return
  7746  12B6                     __end_of_time_date_hex_terminator:	
  7747                           
  7748                           	psect	text31
  7749  09BE                     __ptext31:	
  7750 ;; *************** function _time_date_delimiter *****************
  7751 ;; Defined at:
  7752 ;;		line 28 in file "math_src.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  val             1    wreg     unsigned char 
  7755 ;;  hex             1    0[COMMON] unsigned char 
  7756 ;;  limiter         1    1[COMMON] unsigned char 
  7757 ;;  type            2    2[COMMON] int 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  val             1    6[COMMON] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  1    wreg      unsigned char 
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 300/0
  7766 ;;		On exit  : 300/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7769 ;;      Params:         4       0       0       0       0
  7770 ;;      Locals:         1       0       0       0       0
  7771 ;;      Temps:          2       0       0       0       0
  7772 ;;      Totals:         7       0       0       0       0
  7773 ;;Total ram usage:        7 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_time_settings
  7779 ;;		_date_settings
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _time_date_delimiter
  7785  09BE                     _time_date_delimiter:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7789                           ;time_date_delimiter@val stored from wreg
  7790  09BE  00F6               	movwf	time_date_delimiter@val
  7791                           
  7792                           ;math_src.c: 29:     if((val + '0') == limiter){
  7793  09BF  0876               	movf	time_date_delimiter@val,w
  7794  09C0  3E30               	addlw	48
  7795  09C1  00F4               	movwf	??_time_date_delimiter
  7796  09C2  3000               	movlw	0
  7797  09C3  1803               	skipnc
  7798  09C4  3001               	movlw	1
  7799  09C5  00F5               	movwf	??_time_date_delimiter+1
  7800  09C6  0871               	movf	time_date_delimiter@limiter,w
  7801  09C7  0674               	xorwf	??_time_date_delimiter,w
  7802  09C8  0475               	iorwf	??_time_date_delimiter+1,w
  7803  09C9  1D03               	skipz
  7804  09CA  2B13               	goto	l3735
  7805                           
  7806                           ;math_src.c: 30:     val = hex;
  7807  09CB  0870               	movf	time_date_delimiter@hex,w
  7808  09CC  00F4               	movwf	??_time_date_delimiter
  7809  09CD  0874               	movf	??_time_date_delimiter,w
  7810  09CE  00F6               	movwf	time_date_delimiter@val
  7811                           
  7812                           ;math_src.c: 31:     stats=0;
  7813  09CF  01A2               	clrf	_stats
  7814  09D0  01A3               	clrf	_stats+1
  7815                           
  7816                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7817  09D1  3039               	movlw	57
  7818  09D2  0671               	xorwf	time_date_delimiter@limiter,w
  7819  09D3  1D03               	btfss	3,2
  7820  09D4  29DD               	goto	l3589
  7821  09D5  0372               	decf	time_date_delimiter@type,w
  7822  09D6  0473               	iorwf	time_date_delimiter@type+1,w
  7823  09D7  1D03               	btfss	3,2
  7824  09D8  29DD               	goto	l3589
  7825                           
  7826                           ;math_src.c: 33:         prev_hex= 0x09;
  7827  09D9  3009               	movlw	9
  7828  09DA  00F4               	movwf	??_time_date_delimiter
  7829  09DB  0874               	movf	??_time_date_delimiter,w
  7830  09DC  00C5               	movwf	_prev_hex
  7831  09DD                     l3589:	
  7832                           
  7833                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7834  09DD  304A               	movlw	74
  7835  09DE  0671               	xorwf	time_date_delimiter@limiter,w
  7836  09DF  1D03               	btfss	3,2
  7837  09E0  29E9               	goto	l3595
  7838  09E1  0372               	decf	time_date_delimiter@type,w
  7839  09E2  0473               	iorwf	time_date_delimiter@type+1,w
  7840  09E3  1D03               	btfss	3,2
  7841  09E4  29E9               	goto	l3595
  7842                           
  7843                           ;math_src.c: 35:         prev_hex = 0x19;
  7844  09E5  3019               	movlw	25
  7845  09E6  00F4               	movwf	??_time_date_delimiter
  7846  09E7  0874               	movf	??_time_date_delimiter,w
  7847  09E8  00C5               	movwf	_prev_hex
  7848  09E9                     l3595:	
  7849                           
  7850                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7851  09E9  3059               	movlw	89
  7852  09EA  0671               	xorwf	time_date_delimiter@limiter,w
  7853  09EB  1D03               	btfss	3,2
  7854  09EC  29F5               	goto	l3601
  7855  09ED  0372               	decf	time_date_delimiter@type,w
  7856  09EE  0473               	iorwf	time_date_delimiter@type+1,w
  7857  09EF  1D03               	btfss	3,2
  7858  09F0  29F5               	goto	l3601
  7859                           
  7860                           ;math_src.c: 37:         prev_hex = 0x29;
  7861  09F1  3029               	movlw	41
  7862  09F2  00F4               	movwf	??_time_date_delimiter
  7863  09F3  0874               	movf	??_time_date_delimiter,w
  7864  09F4  00C5               	movwf	_prev_hex
  7865  09F5                     l3601:	
  7866                           
  7867                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7868  09F5  306A               	movlw	106
  7869  09F6  0671               	xorwf	time_date_delimiter@limiter,w
  7870  09F7  1D03               	btfss	3,2
  7871  09F8  2A01               	goto	l3607
  7872  09F9  0372               	decf	time_date_delimiter@type,w
  7873  09FA  0473               	iorwf	time_date_delimiter@type+1,w
  7874  09FB  1D03               	btfss	3,2
  7875  09FC  2A01               	goto	l3607
  7876                           
  7877                           ;math_src.c: 39:         prev_hex =0x39;
  7878  09FD  3039               	movlw	57
  7879  09FE  00F4               	movwf	??_time_date_delimiter
  7880  09FF  0874               	movf	??_time_date_delimiter,w
  7881  0A00  00C5               	movwf	_prev_hex
  7882  0A01                     l3607:	
  7883                           
  7884                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7885  0A01  307A               	movlw	122
  7886  0A02  0671               	xorwf	time_date_delimiter@limiter,w
  7887  0A03  1D03               	btfss	3,2
  7888  0A04  2A0D               	goto	l3613
  7889  0A05  0372               	decf	time_date_delimiter@type,w
  7890  0A06  0473               	iorwf	time_date_delimiter@type+1,w
  7891  0A07  1D03               	btfss	3,2
  7892  0A08  2A0D               	goto	l3613
  7893                           
  7894                           ;math_src.c: 41:         prev_hex = 0x49;
  7895  0A09  3049               	movlw	73
  7896  0A0A  00F4               	movwf	??_time_date_delimiter
  7897  0A0B  0874               	movf	??_time_date_delimiter,w
  7898  0A0C  00C5               	movwf	_prev_hex
  7899  0A0D                     l3613:	
  7900                           
  7901                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7902  0A0D  3039               	movlw	57
  7903  0A0E  0671               	xorwf	time_date_delimiter@limiter,w
  7904  0A0F  1D03               	btfss	3,2
  7905  0A10  2A1A               	goto	l3619
  7906  0A11  3002               	movlw	2
  7907  0A12  0672               	xorwf	time_date_delimiter@type,w
  7908  0A13  0473               	iorwf	time_date_delimiter@type+1,w
  7909  0A14  1D03               	btfss	3,2
  7910  0A15  2A1A               	goto	l3619
  7911                           
  7912                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7913  0A16  3009               	movlw	9
  7914  0A17  00F4               	movwf	??_time_date_delimiter
  7915  0A18  0874               	movf	??_time_date_delimiter,w
  7916  0A19  00C4               	movwf	_prev_hex_day
  7917  0A1A                     l3619:	
  7918                           
  7919                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7920  0A1A  304A               	movlw	74
  7921  0A1B  0671               	xorwf	time_date_delimiter@limiter,w
  7922  0A1C  1D03               	btfss	3,2
  7923  0A1D  2A27               	goto	l3625
  7924  0A1E  3002               	movlw	2
  7925  0A1F  0672               	xorwf	time_date_delimiter@type,w
  7926  0A20  0473               	iorwf	time_date_delimiter@type+1,w
  7927  0A21  1D03               	btfss	3,2
  7928  0A22  2A27               	goto	l3625
  7929                           
  7930                           ;math_src.c: 45:         prev_hex_day = 0x19;
  7931  0A23  3019               	movlw	25
  7932  0A24  00F4               	movwf	??_time_date_delimiter
  7933  0A25  0874               	movf	??_time_date_delimiter,w
  7934  0A26  00C4               	movwf	_prev_hex_day
  7935  0A27                     l3625:	
  7936                           
  7937                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  7938  0A27  3059               	movlw	89
  7939  0A28  0671               	xorwf	time_date_delimiter@limiter,w
  7940  0A29  1D03               	btfss	3,2
  7941  0A2A  2A34               	goto	l3631
  7942  0A2B  3002               	movlw	2
  7943  0A2C  0672               	xorwf	time_date_delimiter@type,w
  7944  0A2D  0473               	iorwf	time_date_delimiter@type+1,w
  7945  0A2E  1D03               	btfss	3,2
  7946  0A2F  2A34               	goto	l3631
  7947                           
  7948                           ;math_src.c: 47:         prev_hex_day = 0x29;
  7949  0A30  3029               	movlw	41
  7950  0A31  00F4               	movwf	??_time_date_delimiter
  7951  0A32  0874               	movf	??_time_date_delimiter,w
  7952  0A33  00C4               	movwf	_prev_hex_day
  7953  0A34                     l3631:	
  7954                           
  7955                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  7956  0A34  306A               	movlw	106
  7957  0A35  0671               	xorwf	time_date_delimiter@limiter,w
  7958  0A36  1D03               	btfss	3,2
  7959  0A37  2A41               	goto	l3637
  7960  0A38  3002               	movlw	2
  7961  0A39  0672               	xorwf	time_date_delimiter@type,w
  7962  0A3A  0473               	iorwf	time_date_delimiter@type+1,w
  7963  0A3B  1D03               	btfss	3,2
  7964  0A3C  2A41               	goto	l3637
  7965                           
  7966                           ;math_src.c: 49:         prev_hex_day =0x39;
  7967  0A3D  3039               	movlw	57
  7968  0A3E  00F4               	movwf	??_time_date_delimiter
  7969  0A3F  0874               	movf	??_time_date_delimiter,w
  7970  0A40  00C4               	movwf	_prev_hex_day
  7971  0A41                     l3637:	
  7972                           
  7973                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  7974  0A41  307A               	movlw	122
  7975  0A42  0671               	xorwf	time_date_delimiter@limiter,w
  7976  0A43  1D03               	btfss	3,2
  7977  0A44  2A4E               	goto	l3643
  7978  0A45  3002               	movlw	2
  7979  0A46  0672               	xorwf	time_date_delimiter@type,w
  7980  0A47  0473               	iorwf	time_date_delimiter@type+1,w
  7981  0A48  1D03               	btfss	3,2
  7982  0A49  2A4E               	goto	l3643
  7983                           
  7984                           ;math_src.c: 51:         prev_hex_day = 0x49;
  7985  0A4A  3049               	movlw	73
  7986  0A4B  00F4               	movwf	??_time_date_delimiter
  7987  0A4C  0874               	movf	??_time_date_delimiter,w
  7988  0A4D  00C4               	movwf	_prev_hex_day
  7989  0A4E                     l3643:	
  7990                           
  7991                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  7992  0A4E  3039               	movlw	57
  7993  0A4F  0671               	xorwf	time_date_delimiter@limiter,w
  7994  0A50  1D03               	btfss	3,2
  7995  0A51  2A5B               	goto	l3649
  7996  0A52  3003               	movlw	3
  7997  0A53  0672               	xorwf	time_date_delimiter@type,w
  7998  0A54  0473               	iorwf	time_date_delimiter@type+1,w
  7999  0A55  1D03               	btfss	3,2
  8000  0A56  2A5B               	goto	l3649
  8001                           
  8002                           ;math_src.c: 53:         prev_hex_year= 0x09;
  8003  0A57  3009               	movlw	9
  8004  0A58  00F4               	movwf	??_time_date_delimiter
  8005  0A59  0874               	movf	??_time_date_delimiter,w
  8006  0A5A  00C3               	movwf	_prev_hex_year
  8007  0A5B                     l3649:	
  8008                           
  8009                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  8010  0A5B  304A               	movlw	74
  8011  0A5C  0671               	xorwf	time_date_delimiter@limiter,w
  8012  0A5D  1D03               	btfss	3,2
  8013  0A5E  2A68               	goto	l3655
  8014  0A5F  3003               	movlw	3
  8015  0A60  0672               	xorwf	time_date_delimiter@type,w
  8016  0A61  0473               	iorwf	time_date_delimiter@type+1,w
  8017  0A62  1D03               	btfss	3,2
  8018  0A63  2A68               	goto	l3655
  8019                           
  8020                           ;math_src.c: 55:         prev_hex_year = 0x19;
  8021  0A64  3019               	movlw	25
  8022  0A65  00F4               	movwf	??_time_date_delimiter
  8023  0A66  0874               	movf	??_time_date_delimiter,w
  8024  0A67  00C3               	movwf	_prev_hex_year
  8025  0A68                     l3655:	
  8026                           
  8027                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  8028  0A68  3059               	movlw	89
  8029  0A69  0671               	xorwf	time_date_delimiter@limiter,w
  8030  0A6A  1D03               	btfss	3,2
  8031  0A6B  2A75               	goto	l3661
  8032  0A6C  3003               	movlw	3
  8033  0A6D  0672               	xorwf	time_date_delimiter@type,w
  8034  0A6E  0473               	iorwf	time_date_delimiter@type+1,w
  8035  0A6F  1D03               	btfss	3,2
  8036  0A70  2A75               	goto	l3661
  8037                           
  8038                           ;math_src.c: 57:         prev_hex_year = 0x29;
  8039  0A71  3029               	movlw	41
  8040  0A72  00F4               	movwf	??_time_date_delimiter
  8041  0A73  0874               	movf	??_time_date_delimiter,w
  8042  0A74  00C3               	movwf	_prev_hex_year
  8043  0A75                     l3661:	
  8044                           
  8045                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  8046  0A75  306A               	movlw	106
  8047  0A76  0671               	xorwf	time_date_delimiter@limiter,w
  8048  0A77  1D03               	btfss	3,2
  8049  0A78  2A82               	goto	l3667
  8050  0A79  3003               	movlw	3
  8051  0A7A  0672               	xorwf	time_date_delimiter@type,w
  8052  0A7B  0473               	iorwf	time_date_delimiter@type+1,w
  8053  0A7C  1D03               	btfss	3,2
  8054  0A7D  2A82               	goto	l3667
  8055                           
  8056                           ;math_src.c: 59:         prev_hex_year =0x39;
  8057  0A7E  3039               	movlw	57
  8058  0A7F  00F4               	movwf	??_time_date_delimiter
  8059  0A80  0874               	movf	??_time_date_delimiter,w
  8060  0A81  00C3               	movwf	_prev_hex_year
  8061  0A82                     l3667:	
  8062                           
  8063                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8064  0A82  307A               	movlw	122
  8065  0A83  0671               	xorwf	time_date_delimiter@limiter,w
  8066  0A84  1D03               	btfss	3,2
  8067  0A85  2A8F               	goto	l3673
  8068  0A86  3003               	movlw	3
  8069  0A87  0672               	xorwf	time_date_delimiter@type,w
  8070  0A88  0473               	iorwf	time_date_delimiter@type+1,w
  8071  0A89  1D03               	btfss	3,2
  8072  0A8A  2A8F               	goto	l3673
  8073                           
  8074                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8075  0A8B  3049               	movlw	73
  8076  0A8C  00F4               	movwf	??_time_date_delimiter
  8077  0A8D  0874               	movf	??_time_date_delimiter,w
  8078  0A8E  00C3               	movwf	_prev_hex_year
  8079  0A8F                     l3673:	
  8080                           
  8081                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8082  0A8F  3039               	movlw	57
  8083  0A90  0671               	xorwf	time_date_delimiter@limiter,w
  8084  0A91  1D03               	btfss	3,2
  8085  0A92  2A9C               	goto	l3679
  8086  0A93  3004               	movlw	4
  8087  0A94  0672               	xorwf	time_date_delimiter@type,w
  8088  0A95  0473               	iorwf	time_date_delimiter@type+1,w
  8089  0A96  1D03               	btfss	3,2
  8090  0A97  2A9C               	goto	l3679
  8091                           
  8092                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8093  0A98  3009               	movlw	9
  8094  0A99  00F4               	movwf	??_time_date_delimiter
  8095  0A9A  0874               	movf	??_time_date_delimiter,w
  8096  0A9B  00C2               	movwf	_prev_hex_hours
  8097  0A9C                     l3679:	
  8098                           
  8099                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8100  0A9C  304A               	movlw	74
  8101  0A9D  0671               	xorwf	time_date_delimiter@limiter,w
  8102  0A9E  1D03               	btfss	3,2
  8103  0A9F  2AA9               	goto	l3685
  8104  0AA0  3004               	movlw	4
  8105  0AA1  0672               	xorwf	time_date_delimiter@type,w
  8106  0AA2  0473               	iorwf	time_date_delimiter@type+1,w
  8107  0AA3  1D03               	btfss	3,2
  8108  0AA4  2AA9               	goto	l3685
  8109                           
  8110                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8111  0AA5  3019               	movlw	25
  8112  0AA6  00F4               	movwf	??_time_date_delimiter
  8113  0AA7  0874               	movf	??_time_date_delimiter,w
  8114  0AA8  00C2               	movwf	_prev_hex_hours
  8115  0AA9                     l3685:	
  8116                           
  8117                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8118  0AA9  3059               	movlw	89
  8119  0AAA  0671               	xorwf	time_date_delimiter@limiter,w
  8120  0AAB  1D03               	btfss	3,2
  8121  0AAC  2AB6               	goto	l3691
  8122  0AAD  3004               	movlw	4
  8123  0AAE  0672               	xorwf	time_date_delimiter@type,w
  8124  0AAF  0473               	iorwf	time_date_delimiter@type+1,w
  8125  0AB0  1D03               	btfss	3,2
  8126  0AB1  2AB6               	goto	l3691
  8127                           
  8128                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8129  0AB2  3029               	movlw	41
  8130  0AB3  00F4               	movwf	??_time_date_delimiter
  8131  0AB4  0874               	movf	??_time_date_delimiter,w
  8132  0AB5  00C2               	movwf	_prev_hex_hours
  8133  0AB6                     l3691:	
  8134                           
  8135                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8136  0AB6  306A               	movlw	106
  8137  0AB7  0671               	xorwf	time_date_delimiter@limiter,w
  8138  0AB8  1D03               	btfss	3,2
  8139  0AB9  2AC3               	goto	l3697
  8140  0ABA  3004               	movlw	4
  8141  0ABB  0672               	xorwf	time_date_delimiter@type,w
  8142  0ABC  0473               	iorwf	time_date_delimiter@type+1,w
  8143  0ABD  1D03               	btfss	3,2
  8144  0ABE  2AC3               	goto	l3697
  8145                           
  8146                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8147  0ABF  3039               	movlw	57
  8148  0AC0  00F4               	movwf	??_time_date_delimiter
  8149  0AC1  0874               	movf	??_time_date_delimiter,w
  8150  0AC2  00C2               	movwf	_prev_hex_hours
  8151  0AC3                     l3697:	
  8152                           
  8153                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8154  0AC3  307A               	movlw	122
  8155  0AC4  0671               	xorwf	time_date_delimiter@limiter,w
  8156  0AC5  1D03               	btfss	3,2
  8157  0AC6  2AD0               	goto	l3703
  8158  0AC7  3004               	movlw	4
  8159  0AC8  0672               	xorwf	time_date_delimiter@type,w
  8160  0AC9  0473               	iorwf	time_date_delimiter@type+1,w
  8161  0ACA  1D03               	btfss	3,2
  8162  0ACB  2AD0               	goto	l3703
  8163                           
  8164                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8165  0ACC  3049               	movlw	73
  8166  0ACD  00F4               	movwf	??_time_date_delimiter
  8167  0ACE  0874               	movf	??_time_date_delimiter,w
  8168  0ACF  00C2               	movwf	_prev_hex_hours
  8169  0AD0                     l3703:	
  8170                           
  8171                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8172  0AD0  3039               	movlw	57
  8173  0AD1  0671               	xorwf	time_date_delimiter@limiter,w
  8174  0AD2  1D03               	btfss	3,2
  8175  0AD3  2ADD               	goto	l3709
  8176  0AD4  3005               	movlw	5
  8177  0AD5  0672               	xorwf	time_date_delimiter@type,w
  8178  0AD6  0473               	iorwf	time_date_delimiter@type+1,w
  8179  0AD7  1D03               	btfss	3,2
  8180  0AD8  2ADD               	goto	l3709
  8181                           
  8182                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8183  0AD9  3009               	movlw	9
  8184  0ADA  00F4               	movwf	??_time_date_delimiter
  8185  0ADB  0874               	movf	??_time_date_delimiter,w
  8186  0ADC  00C1               	movwf	_prev_hex_mins
  8187  0ADD                     l3709:	
  8188                           
  8189                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8190  0ADD  304A               	movlw	74
  8191  0ADE  0671               	xorwf	time_date_delimiter@limiter,w
  8192  0ADF  1D03               	btfss	3,2
  8193  0AE0  2AEA               	goto	l3715
  8194  0AE1  3005               	movlw	5
  8195  0AE2  0672               	xorwf	time_date_delimiter@type,w
  8196  0AE3  0473               	iorwf	time_date_delimiter@type+1,w
  8197  0AE4  1D03               	btfss	3,2
  8198  0AE5  2AEA               	goto	l3715
  8199                           
  8200                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8201  0AE6  3019               	movlw	25
  8202  0AE7  00F4               	movwf	??_time_date_delimiter
  8203  0AE8  0874               	movf	??_time_date_delimiter,w
  8204  0AE9  00C1               	movwf	_prev_hex_mins
  8205  0AEA                     l3715:	
  8206                           
  8207                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8208  0AEA  3059               	movlw	89
  8209  0AEB  0671               	xorwf	time_date_delimiter@limiter,w
  8210  0AEC  1D03               	btfss	3,2
  8211  0AED  2AF7               	goto	l3721
  8212  0AEE  3005               	movlw	5
  8213  0AEF  0672               	xorwf	time_date_delimiter@type,w
  8214  0AF0  0473               	iorwf	time_date_delimiter@type+1,w
  8215  0AF1  1D03               	btfss	3,2
  8216  0AF2  2AF7               	goto	l3721
  8217                           
  8218                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8219  0AF3  3029               	movlw	41
  8220  0AF4  00F4               	movwf	??_time_date_delimiter
  8221  0AF5  0874               	movf	??_time_date_delimiter,w
  8222  0AF6  00C1               	movwf	_prev_hex_mins
  8223  0AF7                     l3721:	
  8224                           
  8225                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8226  0AF7  306A               	movlw	106
  8227  0AF8  0671               	xorwf	time_date_delimiter@limiter,w
  8228  0AF9  1D03               	btfss	3,2
  8229  0AFA  2B04               	goto	l3727
  8230  0AFB  3005               	movlw	5
  8231  0AFC  0672               	xorwf	time_date_delimiter@type,w
  8232  0AFD  0473               	iorwf	time_date_delimiter@type+1,w
  8233  0AFE  1D03               	btfss	3,2
  8234  0AFF  2B04               	goto	l3727
  8235                           
  8236                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8237  0B00  3039               	movlw	57
  8238  0B01  00F4               	movwf	??_time_date_delimiter
  8239  0B02  0874               	movf	??_time_date_delimiter,w
  8240  0B03  00C1               	movwf	_prev_hex_mins
  8241  0B04                     l3727:	
  8242                           
  8243                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8244  0B04  307A               	movlw	122
  8245  0B05  0671               	xorwf	time_date_delimiter@limiter,w
  8246  0B06  1D03               	btfss	3,2
  8247  0B07  2B11               	goto	l3733
  8248  0B08  3005               	movlw	5
  8249  0B09  0672               	xorwf	time_date_delimiter@type,w
  8250  0B0A  0473               	iorwf	time_date_delimiter@type+1,w
  8251  0B0B  1D03               	btfss	3,2
  8252  0B0C  2B11               	goto	l3733
  8253                           
  8254                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8255  0B0D  3049               	movlw	73
  8256  0B0E  00F4               	movwf	??_time_date_delimiter
  8257  0B0F  0874               	movf	??_time_date_delimiter,w
  8258  0B10  00C1               	movwf	_prev_hex_mins
  8259  0B11                     l3733:	
  8260                           
  8261                           ;math_src.c: 82:     val--;
  8262  0B11  3001               	movlw	1
  8263  0B12  02F6               	subwf	time_date_delimiter@val,f
  8264  0B13                     l3735:	
  8265                           
  8266                           ;math_src.c: 84:     return val;
  8267  0B13  0876               	movf	time_date_delimiter@val,w
  8268  0B14  0008               	return
  8269  0B15                     __end_of_time_date_delimiter:	
  8270                           
  8271                           	psect	text32
  8272  1442                     __ptext32:	
  8273 ;; *************** function _set_time *****************
  8274 ;; Defined at:
  8275 ;;		line 12 in file "clock_src.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;		None
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;  i               2    5[COMMON] int 
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      void 
  8282 ;; Registers used:
  8283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8284 ;; Tracked objects:
  8285 ;;		On entry : 300/0
  8286 ;;		On exit  : 300/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8289 ;;      Params:         0       0       0       0       0
  8290 ;;      Locals:         2       0       0       0       0
  8291 ;;      Temps:          0       0       0       0       0
  8292 ;;      Totals:         2       0       0       0       0
  8293 ;;Total ram usage:        2 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    1
  8296 ;; This function calls:
  8297 ;;		_time_write_1
  8298 ;; This function is called by:
  8299 ;;		_main
  8300 ;;		_time_settings
  8301 ;;		_date_settings
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function _set_time
  8307  1442                     _set_time:	
  8308                           
  8309                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8313  1442  1686               	bsf	6,5	;volatile
  8314                           
  8315                           ;clock_src.c: 16:    time_write_1(0xbe);
  8316  1443  30BE               	movlw	190
  8317  1444  160A  118A  241C  160A  118A  	fcall	_time_write_1
  8318                           
  8319                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8320  1449  01F5               	clrf	set_time@i
  8321  144A  01F6               	clrf	set_time@i+1
  8322  144B                     l3375:	
  8323                           
  8324                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8325  144B  0875               	movf	set_time@i,w
  8326  144C  3EB3               	addlw	(low (_table| 0))& (0+255)
  8327  144D  0084               	movwf	4
  8328  144E  1383               	bcf	3,7	;select IRP bank1
  8329  144F  0800               	movf	0,w
  8330  1450  160A  118A  241C  160A  118A  	fcall	_time_write_1
  8331                           
  8332                           ;clock_src.c: 20:      }
  8333  1455  3001               	movlw	1
  8334  1456  07F5               	addwf	set_time@i,f
  8335  1457  1803               	skipnc
  8336  1458  0AF6               	incf	set_time@i+1,f
  8337  1459  3000               	movlw	0
  8338  145A  07F6               	addwf	set_time@i+1,f
  8339  145B  0876               	movf	set_time@i+1,w
  8340  145C  3A80               	xorlw	128
  8341  145D  00FF               	movwf	127
  8342  145E  3080               	movlw	128
  8343  145F  027F               	subwf	127,w
  8344  1460  1D03               	skipz
  8345  1461  2C64               	goto	u2245
  8346  1462  3008               	movlw	8
  8347  1463  0275               	subwf	set_time@i,w
  8348  1464                     u2245:	
  8349  1464  1C03               	skipc
  8350  1465  2C4B               	goto	l3375
  8351                           
  8352                           ;clock_src.c: 21:    RB5=0;
  8353  1466  1283               	bcf	3,5	;RP0=0, select bank0
  8354  1467  1303               	bcf	3,6	;RP1=0, select bank0
  8355  1468  1286               	bcf	6,5	;volatile
  8356  1469  0008               	return
  8357  146A                     __end_of_set_time:	
  8358                           
  8359                           	psect	text33
  8360  141C                     __ptext33:	
  8361 ;; *************** function _time_write_1 *****************
  8362 ;; Defined at:
  8363 ;;		line 114 in file "clock_src.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;  time_tx         1    wreg     unsigned char 
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  time_tx         1    4[COMMON] unsigned char 
  8368 ;;  j               2    2[COMMON] int 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      void 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, btemp+1
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 300/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8378 ;;      Params:         0       0       0       0       0
  8379 ;;      Locals:         3       0       0       0       0
  8380 ;;      Temps:          2       0       0       0       0
  8381 ;;      Totals:         5       0       0       0       0
  8382 ;;Total ram usage:        5 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; This function calls:
  8385 ;;		Nothing
  8386 ;; This function is called by:
  8387 ;;		_ds1302_init
  8388 ;;		_set_time
  8389 ;;		_get_time
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           
  8394                           ;psect for function _time_write_1
  8395  141C                     _time_write_1:	
  8396                           
  8397                           ;incstack = 0
  8398                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8399                           ;time_write_1@time_tx stored from wreg
  8400  141C  00F4               	movwf	time_write_1@time_tx
  8401                           
  8402                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8403  141D  01F2               	clrf	time_write_1@j
  8404  141E  01F3               	clrf	time_write_1@j+1
  8405  141F                     l472:	
  8406                           
  8407                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8408  141F  1283               	bcf	3,5	;RP0=0, select bank0
  8409  1420  1303               	bcf	3,6	;RP1=0, select bank0
  8410  1421  1206               	bcf	6,4	;volatile
  8411                           
  8412                           ;clock_src.c: 120:         RB0=0;
  8413  1422  1006               	bcf	6,0	;volatile
  8414                           
  8415                           ;clock_src.c: 121:         if(time_tx&0x01)
  8416  1423  1874               	btfsc	time_write_1@time_tx,0
  8417                           
  8418                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8419  1424  1606               	bsf	6,4	;volatile
  8420                           
  8421                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8422  1425  0874               	movf	time_write_1@time_tx,w
  8423  1426  00F0               	movwf	??_time_write_1
  8424  1427  1003               	clrc
  8425  1428  0C70               	rrf	??_time_write_1,w
  8426  1429  00F1               	movwf	??_time_write_1+1
  8427  142A  0871               	movf	??_time_write_1+1,w
  8428  142B  00F4               	movwf	time_write_1@time_tx
  8429                           
  8430                           ;clock_src.c: 126:         RB0=1;
  8431  142C  1406               	bsf	6,0	;volatile
  8432                           
  8433                           ;clock_src.c: 127:     }
  8434  142D  3001               	movlw	1
  8435  142E  07F2               	addwf	time_write_1@j,f
  8436  142F  1803               	skipnc
  8437  1430  0AF3               	incf	time_write_1@j+1,f
  8438  1431  3000               	movlw	0
  8439  1432  07F3               	addwf	time_write_1@j+1,f
  8440  1433  0873               	movf	time_write_1@j+1,w
  8441  1434  3A80               	xorlw	128
  8442  1435  00FF               	movwf	127
  8443  1436  3080               	movlw	128
  8444  1437  027F               	subwf	127,w
  8445  1438  1D03               	skipz
  8446  1439  2C3C               	goto	u2235
  8447  143A  3008               	movlw	8
  8448  143B  0272               	subwf	time_write_1@j,w
  8449  143C                     u2235:	
  8450  143C  1C03               	skipc
  8451  143D  2C1F               	goto	l472
  8452                           
  8453                           ;clock_src.c: 128:       RB0=0;
  8454  143E  1283               	bcf	3,5	;RP0=0, select bank0
  8455  143F  1303               	bcf	3,6	;RP1=0, select bank0
  8456  1440  1006               	bcf	6,0	;volatile
  8457  1441  0008               	return
  8458  1442                     __end_of_time_write_1:	
  8459                           
  8460                           	psect	text34
  8461  13F8                     __ptext34:	
  8462 ;; *************** function _incrementor *****************
  8463 ;; Defined at:
  8464 ;;		line 10 in file "math_src.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  upper_val       2    0[BANK0 ] int 
  8467 ;;  lower_val       2    2[BANK0 ] int 
  8468 ;;  z               1    4[BANK0 ] unsigned char 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      unsigned char 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0, pclath, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 300/0
  8477 ;;		On exit  : 300/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8480 ;;      Params:         0       5       0       0       0
  8481 ;;      Locals:         0       0       0       0       0
  8482 ;;      Temps:          2       0       0       0       0
  8483 ;;      Totals:         2       5       0       0       0
  8484 ;;Total ram usage:        7 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    2
  8487 ;; This function calls:
  8488 ;;		_modulus_func
  8489 ;; This function is called by:
  8490 ;;		_thermometer_threshhold_settings
  8491 ;;		_time_settings
  8492 ;;		_date_settings
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _incrementor
  8498  13F8                     _incrementor:	
  8499                           
  8500                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8504  13F8  0862               	movf	incrementor@lower_val,w
  8505  13F9  3E30               	addlw	48
  8506  13FA  00FB               	movwf	??_incrementor
  8507  13FB  0863               	movf	incrementor@lower_val+1,w
  8508  13FC  1803               	skipnc
  8509  13FD  3E01               	addlw	1
  8510  13FE  3E00               	addlw	0
  8511  13FF  00FC               	movwf	??_incrementor+1
  8512  1400  0864               	movf	incrementor@z,w
  8513  1401  067B               	xorwf	??_incrementor,w
  8514  1402  047C               	iorwf	??_incrementor+1,w
  8515  1403  1D03               	skipz
  8516  1404  2C1A               	goto	l3565
  8517                           
  8518                           ;math_src.c: 12:      upper_val++;
  8519  1405  3001               	movlw	1
  8520  1406  07E0               	addwf	incrementor@upper_val,f
  8521  1407  1803               	skipnc
  8522  1408  0AE1               	incf	incrementor@upper_val+1,f
  8523  1409  3000               	movlw	0
  8524  140A  07E1               	addwf	incrementor@upper_val+1,f
  8525                           
  8526                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8527  140B  0861               	movf	incrementor@upper_val+1,w
  8528  140C  00F8               	movwf	modulus_func@x+1
  8529  140D  0860               	movf	incrementor@upper_val,w
  8530  140E  00F7               	movwf	modulus_func@x
  8531  140F  300A               	movlw	10
  8532  1410  00F9               	movwf	modulus_func@y
  8533  1411  3000               	movlw	0
  8534  1412  00FA               	movwf	modulus_func@y+1
  8535  1413  160A  118A  22C5   	fcall	_modulus_func
  8536  1416  0878               	movf	?_modulus_func+1,w
  8537  1417  00E1               	movwf	incrementor@upper_val+1
  8538  1418  0877               	movf	?_modulus_func,w
  8539  1419  00E0               	movwf	incrementor@upper_val
  8540  141A                     l3565:	
  8541                           
  8542                           ;math_src.c: 15:      return upper_val;
  8543  141A  0860               	movf	incrementor@upper_val,w
  8544  141B  0008               	return
  8545  141C                     __end_of_incrementor:	
  8546                           
  8547                           	psect	text35
  8548  12C5                     __ptext35:	
  8549 ;; *************** function _modulus_func *****************
  8550 ;; Defined at:
  8551 ;;		line 5 in file "math_src.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  x               2    7[COMMON] int 
  8554 ;;  y               2    9[COMMON] int 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;		None
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  2    7[COMMON] int 
  8559 ;; Registers used:
  8560 ;;		wreg, status,2, status,0, pclath, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 300/0
  8563 ;;		On exit  : 300/0
  8564 ;;		Unchanged: 300/0
  8565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8566 ;;      Params:         4       0       0       0       0
  8567 ;;      Locals:         0       0       0       0       0
  8568 ;;      Temps:          0       0       0       0       0
  8569 ;;      Totals:         4       0       0       0       0
  8570 ;;Total ram usage:        4 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    1
  8573 ;; This function calls:
  8574 ;;		___awmod
  8575 ;; This function is called by:
  8576 ;;		_main
  8577 ;;		_thermometer_threshhold_settings
  8578 ;;		_time_settings
  8579 ;;		_date_settings
  8580 ;;		_incrementor
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           
  8585                           ;psect for function _modulus_func
  8586  12C5                     _modulus_func:	
  8587                           
  8588                           ;math_src.c: 6:     x = x % y;
  8589                           
  8590                           ;incstack = 0
  8591                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8592  12C5  087A               	movf	modulus_func@y+1,w
  8593  12C6  00F1               	movwf	___awmod@divisor+1
  8594  12C7  0879               	movf	modulus_func@y,w
  8595  12C8  00F0               	movwf	___awmod@divisor
  8596  12C9  0878               	movf	modulus_func@x+1,w
  8597  12CA  00F3               	movwf	___awmod@dividend+1
  8598  12CB  0877               	movf	modulus_func@x,w
  8599  12CC  00F2               	movwf	___awmod@dividend
  8600  12CD  160A  118A  2649   	fcall	___awmod
  8601  12D0  0871               	movf	?___awmod+1,w
  8602  12D1  00F8               	movwf	modulus_func@x+1
  8603  12D2  0870               	movf	?___awmod,w
  8604  12D3  00F7               	movwf	modulus_func@x
  8605                           
  8606                           ;math_src.c: 7:     return x;
  8607  12D4  0008               	return
  8608  12D5                     __end_of_modulus_func:	
  8609                           
  8610                           	psect	text36
  8611  1649                     __ptext36:	
  8612 ;; *************** function ___awmod *****************
  8613 ;; Defined at:
  8614 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  divisor         2    0[COMMON] int 
  8617 ;;  dividend        2    2[COMMON] int 
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  sign            1    6[COMMON] unsigned char 
  8620 ;;  counter         1    5[COMMON] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  2    0[COMMON] int 
  8623 ;; Registers used:
  8624 ;;		wreg, status,2, status,0
  8625 ;; Tracked objects:
  8626 ;;		On entry : 300/0
  8627 ;;		On exit  : 300/0
  8628 ;;		Unchanged: 300/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8630 ;;      Params:         4       0       0       0       0
  8631 ;;      Locals:         2       0       0       0       0
  8632 ;;      Temps:          1       0       0       0       0
  8633 ;;      Totals:         7       0       0       0       0
  8634 ;;Total ram usage:        7 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; This function calls:
  8637 ;;		Nothing
  8638 ;; This function is called by:
  8639 ;;		_modulus_func
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function ___awmod
  8645  1649                     ___awmod:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8649  1649  01F6               	clrf	___awmod@sign
  8650  164A  1FF3               	btfss	___awmod@dividend+1,7
  8651  164B  2E53               	goto	l3297
  8652  164C  09F2               	comf	___awmod@dividend,f
  8653  164D  09F3               	comf	___awmod@dividend+1,f
  8654  164E  0AF2               	incf	___awmod@dividend,f
  8655  164F  1903               	skipnz
  8656  1650  0AF3               	incf	___awmod@dividend+1,f
  8657  1651  01F6               	clrf	___awmod@sign
  8658  1652  0AF6               	incf	___awmod@sign,f
  8659  1653                     l3297:	
  8660  1653  1FF1               	btfss	___awmod@divisor+1,7
  8661  1654  2E5A               	goto	l3301
  8662  1655  09F0               	comf	___awmod@divisor,f
  8663  1656  09F1               	comf	___awmod@divisor+1,f
  8664  1657  0AF0               	incf	___awmod@divisor,f
  8665  1658  1903               	skipnz
  8666  1659  0AF1               	incf	___awmod@divisor+1,f
  8667  165A                     l3301:	
  8668  165A  0870               	movf	___awmod@divisor,w
  8669  165B  0471               	iorwf	___awmod@divisor+1,w
  8670  165C  1903               	btfsc	3,2
  8671  165D  2E87               	goto	l3319
  8672  165E  01F5               	clrf	___awmod@counter
  8673  165F  0AF5               	incf	___awmod@counter,f
  8674  1660                     l3309:	
  8675  1660  1BF1               	btfsc	___awmod@divisor+1,7
  8676  1661  2E6E               	goto	l3311
  8677  1662  3001               	movlw	1
  8678  1663                     u2135:	
  8679  1663  1003               	clrc
  8680  1664  0DF0               	rlf	___awmod@divisor,f
  8681  1665  0DF1               	rlf	___awmod@divisor+1,f
  8682  1666  3EFF               	addlw	-1
  8683  1667  1D03               	skipz
  8684  1668  2E63               	goto	u2135
  8685  1669  3001               	movlw	1
  8686  166A  00F4               	movwf	??___awmod
  8687  166B  0874               	movf	??___awmod,w
  8688  166C  07F5               	addwf	___awmod@counter,f
  8689  166D  2E60               	goto	l3309
  8690  166E                     l3311:	
  8691  166E  0871               	movf	___awmod@divisor+1,w
  8692  166F  0273               	subwf	___awmod@dividend+1,w
  8693  1670  1D03               	skipz
  8694  1671  2E74               	goto	u2155
  8695  1672  0870               	movf	___awmod@divisor,w
  8696  1673  0272               	subwf	___awmod@dividend,w
  8697  1674                     u2155:	
  8698  1674  1C03               	skipc
  8699  1675  2E7C               	goto	l3315
  8700  1676  0870               	movf	___awmod@divisor,w
  8701  1677  02F2               	subwf	___awmod@dividend,f
  8702  1678  0871               	movf	___awmod@divisor+1,w
  8703  1679  1C03               	skipc
  8704  167A  03F3               	decf	___awmod@dividend+1,f
  8705  167B  02F3               	subwf	___awmod@dividend+1,f
  8706  167C                     l3315:	
  8707  167C  3001               	movlw	1
  8708  167D                     u2165:	
  8709  167D  1003               	clrc
  8710  167E  0CF1               	rrf	___awmod@divisor+1,f
  8711  167F  0CF0               	rrf	___awmod@divisor,f
  8712  1680  3EFF               	addlw	-1
  8713  1681  1D03               	skipz
  8714  1682  2E7D               	goto	u2165
  8715  1683  3001               	movlw	1
  8716  1684  02F5               	subwf	___awmod@counter,f
  8717  1685  1D03               	btfss	3,2
  8718  1686  2E6E               	goto	l3311
  8719  1687                     l3319:	
  8720  1687  0876               	movf	___awmod@sign,w
  8721  1688  1903               	btfsc	3,2
  8722  1689  2E8F               	goto	l3323
  8723  168A  09F2               	comf	___awmod@dividend,f
  8724  168B  09F3               	comf	___awmod@dividend+1,f
  8725  168C  0AF2               	incf	___awmod@dividend,f
  8726  168D  1903               	skipnz
  8727  168E  0AF3               	incf	___awmod@dividend+1,f
  8728  168F                     l3323:	
  8729  168F  0873               	movf	___awmod@dividend+1,w
  8730  1690  00F1               	movwf	?___awmod+1
  8731  1691  0872               	movf	___awmod@dividend,w
  8732  1692  00F0               	movwf	?___awmod
  8733  1693  0008               	return
  8734  1694                     __end_of___awmod:	
  8735                           
  8736                           	psect	text37
  8737  12E9                     __ptext37:	
  8738 ;; *************** function _button_delay *****************
  8739 ;; Defined at:
  8740 ;;		line 694 in file "Button_src.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;		None
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;  i               2    0[COMMON] int 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;                  1    wreg      void 
  8747 ;; Registers used:
  8748 ;;		wreg, status,2, btemp+1
  8749 ;; Tracked objects:
  8750 ;;		On entry : 300/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8754 ;;      Params:         0       0       0       0       0
  8755 ;;      Locals:         2       0       0       0       0
  8756 ;;      Temps:          0       0       0       0       0
  8757 ;;      Totals:         2       0       0       0       0
  8758 ;;Total ram usage:        2 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; This function calls:
  8761 ;;		Nothing
  8762 ;; This function is called by:
  8763 ;;		_set_beep_threshhold
  8764 ;;		_thermometer_threshhold_settings
  8765 ;;		_time_settings
  8766 ;;		_date_settings
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _button_delay
  8772  12E9                     _button_delay:	
  8773                           
  8774                           ;Button_src.c: 695:     for(int i=0;i<10000;i++);
  8775                           
  8776                           ;incstack = 0
  8777                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8778  12E9  01F0               	clrf	button_delay@i
  8779  12EA  01F1               	clrf	button_delay@i+1
  8780  12EB                     l3555:	
  8781  12EB  3001               	movlw	1
  8782  12EC  07F0               	addwf	button_delay@i,f
  8783  12ED  1803               	skipnc
  8784  12EE  0AF1               	incf	button_delay@i+1,f
  8785  12EF  3000               	movlw	0
  8786  12F0  07F1               	addwf	button_delay@i+1,f
  8787  12F1  0871               	movf	button_delay@i+1,w
  8788  12F2  3A80               	xorlw	128
  8789  12F3  00FF               	movwf	127
  8790  12F4  30A7               	movlw	167
  8791  12F5  027F               	subwf	127,w
  8792  12F6  1D03               	skipz
  8793  12F7  2AFA               	goto	u2345
  8794  12F8  3010               	movlw	16
  8795  12F9  0270               	subwf	button_delay@i,w
  8796  12FA                     u2345:	
  8797  12FA  1803               	btfsc	3,0
  8798  12FB  0008               	return
  8799  12FC  2AEB               	goto	l3555
  8800  12FD                     __end_of_button_delay:	
  8801                           
  8802                           	psect	text38
  8803  000C                     __ptext38:	
  8804 ;; *************** function _cold_threshold *****************
  8805 ;; Defined at:
  8806 ;;		line 22 in file "threshold_src.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  upper_val       2    3[COMMON] int 
  8809 ;;  lower_val       2    5[COMMON] int 
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      unsigned char 
  8814 ;; Registers used:
  8815 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 300/0
  8818 ;;		On exit  : 300/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8821 ;;      Params:         4       0       0       0       0
  8822 ;;      Locals:         0       0       0       0       0
  8823 ;;      Temps:          1       0       0       0       0
  8824 ;;      Totals:         5       0       0       0       0
  8825 ;;Total ram usage:        5 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    2
  8828 ;; This function calls:
  8829 ;;		_write_char
  8830 ;; This function is called by:
  8831 ;;		_main
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _cold_threshold
  8837  000C                     _cold_threshold:	
  8838                           
  8839                           ;threshold_src.c: 23:      if(shi <= upper_val && (ge <= lower_val || ge >= lower_val)){
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _cold_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8843  000C  0874               	movf	cold_threshold@upper_val+1,w
  8844  000D  3A80               	xorlw	128
  8845  000E  00F7               	movwf	??_cold_threshold
  8846  000F  3080               	movlw	128
  8847  0010  0277               	subwf	??_cold_threshold,w
  8848  0011  1D03               	skipz
  8849  0012  2815               	goto	u4005
  8850  0013  085B               	movf	_shi,w
  8851  0014  0273               	subwf	cold_threshold@upper_val,w
  8852  0015                     u4005:	
  8853  0015  1C03               	skipc
  8854  0016  2862               	goto	l951
  8855  0017  0876               	movf	cold_threshold@lower_val+1,w
  8856  0018  3A80               	xorlw	128
  8857  0019  00F7               	movwf	??_cold_threshold
  8858  001A  3080               	movlw	128
  8859  001B  0277               	subwf	??_cold_threshold,w
  8860  001C  1D03               	skipz
  8861  001D  2822               	goto	u4015
  8862  001E  1283               	bcf	3,5	;RP0=0, select bank0
  8863  001F  1303               	bcf	3,6	;RP1=0, select bank0
  8864  0020  085A               	movf	_ge,w
  8865  0021  0275               	subwf	cold_threshold@lower_val,w
  8866  0022                     u4015:	
  8867  0022  1803               	skipnc
  8868  0023  282F               	goto	l4771
  8869  0024  0876               	movf	cold_threshold@lower_val+1,w
  8870  0025  3A80               	xorlw	128
  8871  0026  3C80               	sublw	128
  8872  0027  1D03               	skipz
  8873  0028  282D               	goto	u4025
  8874  0029  0875               	movf	cold_threshold@lower_val,w
  8875  002A  1283               	bcf	3,5	;RP0=0, select bank0
  8876  002B  1303               	bcf	3,6	;RP1=0, select bank0
  8877  002C  025A               	subwf	_ge,w
  8878  002D                     u4025:	
  8879  002D  1C03               	skipc
  8880  002E  2862               	goto	l951
  8881  002F                     l4771:	
  8882                           
  8883                           ;threshold_src.c: 24:     cold_counter ++;
  8884  002F  3001               	movlw	1
  8885  0030  1283               	bcf	3,5	;RP0=0, select bank0
  8886  0031  1303               	bcf	3,6	;RP1=0, select bank0
  8887  0032  07BA               	addwf	_cold_counter,f
  8888  0033  1803               	skipnc
  8889  0034  0ABB               	incf	_cold_counter+1,f
  8890  0035  3000               	movlw	0
  8891  0036  07BB               	addwf	_cold_counter+1,f
  8892                           
  8893                           ;threshold_src.c: 25:     heater_state = '1';
  8894  0037  3031               	movlw	49
  8895  0038  00F7               	movwf	??_cold_threshold
  8896  0039  0877               	movf	??_cold_threshold,w
  8897  003A  00D1               	movwf	_heater_state
  8898                           
  8899                           ;threshold_src.c: 26:     cooler_state = '0';
  8900  003B  3030               	movlw	48
  8901  003C  00F7               	movwf	??_cold_threshold
  8902  003D  0877               	movf	??_cold_threshold,w
  8903  003E  00D0               	movwf	_cooler_state
  8904                           
  8905                           ;threshold_src.c: 27:     write_char('C');
  8906  003F  3043               	movlw	67
  8907  0040  160A  118A  2325  120A  118A  	fcall	_write_char
  8908                           
  8909                           ;threshold_src.c: 28:     write_char('O');
  8910  0045  304F               	movlw	79
  8911  0046  160A  118A  2325  120A  118A  	fcall	_write_char
  8912                           
  8913                           ;threshold_src.c: 29:     write_char('L');
  8914  004B  304C               	movlw	76
  8915  004C  160A  118A  2325  120A  118A  	fcall	_write_char
  8916                           
  8917                           ;threshold_src.c: 30:     write_char('D');
  8918  0051  3044               	movlw	68
  8919  0052  160A  118A  2325  120A  118A  	fcall	_write_char
  8920                           
  8921                           ;threshold_src.c: 31:     if(cold_counter > 1000){
  8922  0057  3003               	movlw	3
  8923  0058  023B               	subwf	_cold_counter+1,w
  8924  0059  30E9               	movlw	233
  8925  005A  1903               	skipnz
  8926  005B  023A               	subwf	_cold_counter,w
  8927  005C  1C03               	skipc
  8928  005D  2862               	goto	l951
  8929                           
  8930                           ;threshold_src.c: 32:         heater_state = '-';
  8931  005E  302D               	movlw	45
  8932  005F  00F7               	movwf	??_cold_threshold
  8933  0060  0877               	movf	??_cold_threshold,w
  8934  0061  00D1               	movwf	_heater_state
  8935  0062                     l951:	
  8936                           ;threshold_src.c: 36:     }
  8937                           
  8938                           
  8939                           ;threshold_src.c: 37:     return buzzer_watcher;
  8940  0062  1283               	bcf	3,5	;RP0=0, select bank0
  8941  0063  1303               	bcf	3,6	;RP1=0, select bank0
  8942  0064  0853               	movf	_buzzer_watcher,w
  8943  0065  0008               	return
  8944  0066                     __end_of_cold_threshold:	
  8945                           
  8946                           	psect	text39
  8947  1325                     __ptext39:	
  8948 ;; *************** function _write_char *****************
  8949 ;; Defined at:
  8950 ;;		line 28 in file "LCD_src.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  x               1    wreg     unsigned char 
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;  x               1    2[COMMON] unsigned char 
  8955 ;;  i               2    0        int 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 300/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8965 ;;      Params:         0       0       0       0       0
  8966 ;;      Locals:         1       0       0       0       0
  8967 ;;      Temps:          0       0       0       0       0
  8968 ;;      Totals:         1       0       0       0       0
  8969 ;;Total ram usage:        1 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    1
  8972 ;; This function calls:
  8973 ;;		_delay_screen
  8974 ;; This function is called by:
  8975 ;;		_main
  8976 ;;		_display_temp
  8977 ;;		_display_clock
  8978 ;;		_display_date
  8979 ;;		_thermometer_threshhold_settings
  8980 ;;		_time_settings
  8981 ;;		_date_settings
  8982 ;;		_set_upper_threshold
  8983 ;;		_cold_threshold
  8984 ;;		_set_lower_threshold
  8985 ;;		_reset_alarm
  8986 ;;		_display_day
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           
  8991                           ;psect for function _write_char
  8992  1325                     _write_char:	
  8993                           
  8994                           ;incstack = 0
  8995                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8996                           ;write_char@x stored from wreg
  8997  1325  00F2               	movwf	write_char@x
  8998                           
  8999                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  9000  1326  1283               	bcf	3,5	;RP0=0, select bank0
  9001  1327  1303               	bcf	3,6	;RP1=0, select bank0
  9002  1328  1685               	bsf	5,5	;volatile
  9003                           
  9004                           ;LCD_src.c: 32:  RA4=0;
  9005  1329  1205               	bcf	5,4	;volatile
  9006                           
  9007                           ;LCD_src.c: 33:  RA3=0;
  9008  132A  1185               	bcf	5,3	;volatile
  9009                           
  9010                           ;LCD_src.c: 34:  delay_screen();
  9011  132B  160A  118A  22D5  160A  118A  	fcall	_delay_screen
  9012                           
  9013                           ;LCD_src.c: 35:  RA3=1;
  9014  1330  1283               	bcf	3,5	;RP0=0, select bank0
  9015  1331  1303               	bcf	3,6	;RP1=0, select bank0
  9016  1332  1585               	bsf	5,3	;volatile
  9017                           
  9018                           ;LCD_src.c: 36:  PORTD= x;
  9019  1333  0872               	movf	write_char@x,w
  9020  1334  0088               	movwf	8	;volatile
  9021                           
  9022                           ;LCD_src.c: 37:  delay_screen();
  9023  1335  160A  118A  22D5   	fcall	_delay_screen
  9024                           
  9025                           ;LCD_src.c: 38:  RA3=0;
  9026  1338  1283               	bcf	3,5	;RP0=0, select bank0
  9027  1339  1303               	bcf	3,6	;RP1=0, select bank0
  9028  133A  1185               	bcf	5,3	;volatile
  9029  133B  0008               	return
  9030  133C                     __end_of_write_char:	
  9031                           
  9032                           	psect	text40
  9033  12D5                     __ptext40:	
  9034 ;; *************** function _delay_screen *****************
  9035 ;; Defined at:
  9036 ;;		line 70 in file "LCD_src.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;		None
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  i               2    0[COMMON] int 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      void 
  9043 ;; Registers used:
  9044 ;;		wreg, status,2, btemp+1
  9045 ;; Tracked objects:
  9046 ;;		On entry : 300/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9050 ;;      Params:         0       0       0       0       0
  9051 ;;      Locals:         2       0       0       0       0
  9052 ;;      Temps:          0       0       0       0       0
  9053 ;;      Totals:         2       0       0       0       0
  9054 ;;Total ram usage:        2 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; This function calls:
  9057 ;;		Nothing
  9058 ;; This function is called by:
  9059 ;;		_lcd_init
  9060 ;;		_write_char
  9061 ;;		_write_cmd
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           
  9066                           ;psect for function _delay_screen
  9067  12D5                     _delay_screen:	
  9068                           
  9069                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  9070                           
  9071                           ;incstack = 0
  9072                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  9073  12D5  01F0               	clrf	delay_screen@i
  9074  12D6  01F1               	clrf	delay_screen@i+1
  9075  12D7                     l3339:	
  9076  12D7  3001               	movlw	1
  9077  12D8  07F0               	addwf	delay_screen@i,f
  9078  12D9  1803               	skipnc
  9079  12DA  0AF1               	incf	delay_screen@i+1,f
  9080  12DB  3000               	movlw	0
  9081  12DC  07F1               	addwf	delay_screen@i+1,f
  9082  12DD  0871               	movf	delay_screen@i+1,w
  9083  12DE  3A80               	xorlw	128
  9084  12DF  00FF               	movwf	127
  9085  12E0  3080               	movlw	128
  9086  12E1  027F               	subwf	127,w
  9087  12E2  1D03               	skipz
  9088  12E3  2AE6               	goto	u2195
  9089  12E4  3005               	movlw	5
  9090  12E5  0270               	subwf	delay_screen@i,w
  9091  12E6                     u2195:	
  9092  12E6  1803               	btfsc	3,0
  9093  12E7  0008               	return
  9094  12E8  2AD7               	goto	l3339
  9095  12E9                     __end_of_delay_screen:	
  9096  007E                     btemp	set	126	;btemp
  9097  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      79
    BANK1            80      0      27
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod
    _cold_threshold->_write_char
    _write_char->_delay_screen

Critical Paths under _main in BANK0

    _main->_date_settings
    _main->_thermometer_threshhold_settings
    _main->_time_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   43365
                                              8 BANK0      7     7      0
                     _cold_threshold
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13382
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      3     3      0    7473
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13382
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     371
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4303
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2617
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _cold_threshold                                       5     1      4     438
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cold_threshold
     _write_char
       _delay_screen
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1B       7       33.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      78      12        0.0%
ABS                  0      0      78       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Dec 12 17:28:41 2019

                                       _a 004A                                         _b 0049  
                                       _c 0048                                         _p 0020  
                                       _t 0030                                         _w 002E  
                                       _x 002C                                         _y 002A  
                                       _z 0028                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005C                                        _TZ 005D  
                                      _ge 005A                                        _wd 003E  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 1353  
                           ?_display_date 0070                                       l165 0C92  
                                     l357 129A                                       l472 141F  
                                     l478 14CA                                       l752 0DE8  
                                     l744 0D0D                                       l737 0372  
                                     l729 0072                                       l761 0F0E  
                                     l753 0DF0                                       l770 0393  
                                     l746 0D73                                       l747 0D7B  
                                     l772 03F9                                       l764 0F9B  
                                     l773 0401                                       l951 0062  
                                     l784 04F5                                       l793 06AB  
                                     l785 04FD                                       l945 16E6  
                                     l778 046D                                       l779 0475  
                                     l958 1645                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005E  
                           ?_display_temp 0070                                       _TLV 005F  
                                     _shi 005B                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0065  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1317 13CF                                      l3301 165A  
                                    l3311 166E                                      l4121 01FD  
                                    l3323 168F                                      l3315 167C  
                                    l3309 1660                                      l4061 0144  
                                    l3319 1687                                      l4311 04BC  
                                    l3415 1582                                      l3601 09F5  
                                    l3521 12FF                                      l3345 129E  
                                    l3417 1583                                      l3339 12D7  
                                    l4323 04E0                                      l4315 04C5  
                                    l3419 155C                                      l3427 1593  
                                    l4139 0262                                      l3613 0A0D  
                                    l4325 04E5                                      l4157 02C6  
                                    l3375 144B                                      l3703 0AD0  
                                    l3631 0A34                                      l3607 0A01  
                                    l4343 0531                                      l3447 15A8  
                                    l4079 0187                                      l3297 1653  
                                    l3721 0AF7                                      l3625 0A27  
                                    l4281 043E                                      l3555 12EB  
                                    l3715 0AEA                                      l3643 0A4E  
                                    l3619 0A1A                                      l4355 0547  
                                    l4347 053A                                      l4291 045D  
                                    l3803 15FB                                      l3539 14DB  
                                    l3565 141A                                      l3733 0B11  
                                    l3709 0ADD                                      l3661 0A75  
                                    l3637 0A41                                      l4357 054C  
                                    l4277 0435                                      l3821 1516  
                                    l3469 152B                                      l4189 0328  
                                    l4613 0E51                                      l4605 0E3A  
                                    l3727 0B04                                      l3655 0A68  
                                    l3735 0B13                                      l4439 0701  
                                    l4391 0686                                      l3751 13A1  
                                    l3815 14FA                                      l4607 0E3F  
                                    l3673 0A8F                                      l3649 0A5B  
                                    l4289 0458                                      l3761 13B0  
                                    l3817 1508                                      l3825 1521  
                                    l3921 0956                                      l3913 0942  
                                    l4617 0E60                                      l4561 0DAF  
                                    l3691 0AB6                                      l3667 0A82  
                                    l3595 09E9                                      l4387 0671  
                                    l4803 14C2                                      l3685 0AA9  
                                    l3589 09DD                                      l4469 0744  
                                    l3749 1398                                      l3925 0960  
                                    l3917 094C                                      l4573 0DD3  
                                    l4565 0DB8                                      l3679 0A9C  
                                    l3791 15CC                                      l4671 0F5E  
                                    l4575 0DD8                                      l3697 0AC3  
                                    l4841 1731                                      l4833 170F  
                                    l3769 13B8                                      l3793 15DA  
                                    l3945 1475                                      l4817 136C  
                                    l4593 0E24                                      l4771 002F  
                                    l4499 078A                                      l4827 16F2  
                                    l3957 176E                                      l4845 1742  
                                    l4837 1720                                      l4829 16FE  
                                    l4597 0E2D                                      l3799 15F0  
                                    l4943 0C4B                                      l4849 1753  
                                    l4881 0B53                            ?_display_clock 0070  
                                    l3995 081D                                      l4955 0CCC  
                                    u3005 15F1                                      u2135 1663  
                                    u3105 0912                                      u2155 1674  
                                    u2235 143C                                      u3035 14FD  
                                    u2315 130E                                      u4005 0015  
                                    u2165 167D                                      u2245 1464  
                                    u4015 0022                                      u3055 150E  
                                    u2335 14EB                                      u4025 002D  
                                    u2345 12FA                                      u3065 1517  
                                    u2195 12E6                                      u3155 1490  
                                    u3085 08FA                                      u3095 0905  
                                    u4185 0CE1                                      u2925 13BB  
                                    u2965 15CF                                      u2985 15DB  
                                    u3945 1609                                      u2995 15E7  
                                    u3955 1616                                      u3965 169B  
                                    u3975 16A6               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0B15  
                                    _init 1289                                      _var1 004F  
                                    _var2 004E                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 0060  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 13B2  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1694  
                         __end_of___lbmod 13D5                      __end_of_delay_screen 12E9  
                         __end_of___lwdiv 1600                           __end_of___lwmod 1526  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 00B1                                     _table 00B3  
                                   _stats 0022                                     main@i 006D  
                          write_byte@temp 0076                       _set_lower_threshold 1600  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                        ??_cold_threshold 0077                           __initialization 07E0  
                            __end_of_main 0D01                              __end_of_init 1291  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0068  
                                  ??_init 0070                      incrementor@lower_val 0062  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0060  
                        __end_of_lcd_init 13F8                          __end_of_get_temp 09BE  
                        __end_of_get_time 1496                                    _baifen 0058  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 12FD                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00A9  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 12C5                       _set_upper_threshold 1694  
                                  _table1 00A0                           ___awmod@divisor 0070  
                                  _shifen 0059                                    _wanfen 0056  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 146A  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 1800                      __end_of_display_temp 1391  
                          __pcstackCOMMON 0070                              __pidataBANK1 0004  
                   __size_of_delay_screen 0014                   cold_threshold@lower_val 0075  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                   cold_threshold@upper_val 0073  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 12D5                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 12B6  
                              _delay_temp 1299                                __pmaintext 0B15  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0064  
                         _cold_high_night 00AF                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 1000  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                            _heat_counter 003C                                 ?_set_time 0070  
                    __size_of_reset_alarm 002E                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 1325  
                _time_date_hex_terminator 12A7                                   ___lbdiv 1391  
                                 ___awmod 1649                                   ___lbmod 13B2  
                         __size_of_delay2 0014                                   ___lwdiv 15C4  
                                 ___lwmod 14F4                                   _alarm__ 004D  
                                 _day_hex 0047                                   _day_low 0026  
                            _heater_state 0051                                   __ptext1 0D01  
                                 __ptext2 0066                                   __ptext3 1694  
                                 __ptext4 1600                                   __ptext5 1353  
                                 __ptext6 1496                                   __ptext7 13D5  
                                 __ptext8 1311                                   __ptext9 1284  
                    __end_of_button_delay 12FD                              _cold_counter 003A  
                                 delay2@i 0070                         __end_of_init_temp 1289  
                        ___awmod@dividend 0072                         __end_of_read_byte 155A  
                                 _qianfen 0057                      __size_of_time_read_1 0030  
                                 _lower_t 0054               __end_of_set_beep_threshhold 1370  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 009D  
                                 clrloop0 1292                                ??_lcd_init 0073  
                                 _upper_t 0055                                ??_get_temp 0060  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 155A  
                              ??_set_time 0075                       _time_date_delimiter 09BE  
                            _display_date 1763                              _display_temp 1370  
                       __end_of_write_cmd 1353                          ___lbmod@dividend 0074  
                            _cooler_state 0050                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 08B7  
                  __size_of_date_settings 045B                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 1649                             ??_display_day 0075  
                          __end_of_delay2 1311                                _write_char 1325  
                              _write_byte 158E                   __size_of_cold_threshold 005A  
                          _var_night_high 0036                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 12D5                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 0801  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0385                               __pdataBANK1 00B3  
                              read_byte@i 0076                                read_byte@j 0040  
             __end_of_set_upper_threshold 16EA                       __end_of_display_day 1763  
                               ___latbits 0002                             __pcstackBANK0 0060  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 12E9  
                        ___lwdiv@dividend 0078                               _day_counter 00A7  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                                 _cold_high 0034  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 141C                      __end_of_time_write_1 1442  
                      _initialise_buttons 1311                           _day_of_week_var 00AB  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 1284                                 _read_byte 1526  
                     ?_initialise_buttons 0070                                 clear_ram0 1291  
                           ??_reset_alarm 0073                            _prev_hex_hours 0042  
                            ??_delay_temp 0071                            _cold_low_night 00AD  
                               _temp_high 004B                               _display_day 16EA  
 __end_of_thermometer_threshhold_settings 0385  __size_of_thermometer_threshhold_settings 031F  
       ??_thermometer_threshhold_settings 0065          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0066                      ??_initialise_buttons 0070  
                  __size_of_time_settings 02FF                            _cold_threshold 000C  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 12A7  
                               _write_cmd 133C                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 0038  
                         _buzzer_watcher1 0052                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0065                      __size_of_ds1302_init 000F  
                             _incrementor 13F8                    __end_of_cold_threshold 0066  
                            _modulus_func 12C5                       __end_of_reset_alarm 14C4  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0024  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 1289                                  __ptext11 146A  
                                __ptext20 15C4                                  __ptext12 14C4  
                                __ptext21 13B2                                  __ptext13 08B7  
                                __ptext30 12A7                                  __ptext22 1391  
                                __ptext14 158E                                  __ptext31 09BE  
                                __ptext23 12B6                                  __ptext15 155A  
                                __ptext40 12D5                                  __ptext32 1442  
                                __ptext24 1370                                  __ptext16 1526  
                                __ptext33 141C                                  __ptext25 16EA  
                                __ptext17 1299                                  __ptext34 13F8  
                                __ptext26 1763                                  __ptext18 12FD  
                                __ptext35 12C5                                  __ptext27 0812  
                                __ptext19 14F4                                  __ptext36 1649  
                                __ptext28 0385                                  __ptext37 12E9  
                                __ptext29 133C                                  __ptext38 000C  
                                __ptext39 1325                       __end_of_time_read_1 14F4  
                                _cold_low 0032                                ?_write_cmd 0070  
                                _lcd_init 13D5                                  _get_temp 08B7  
                                _get_time 146A                             _time_settings 0D01  
        __end_of_time_date_hex_terminator 12B6                             __size_of_main 01EC  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0046                                 set_time@i 0075  
                           _prev_hex_mins 0041                             _prev_hex_year 0043  
                            ??_reset_temp 0074                                  _set_time 1442  
                                _temp_low 004C                                  _prev_hex 0045  
              time_date_delimiter@limiter 0071                           ?_cold_threshold 0073  
            __size_of_set_lower_threshold 0049                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 00A5  
                          _buzzer_watcher 0053                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0B15  
                                init_ram0 0805                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 158E  
                             ??_read_byte 0074                            ?_time_settings 0070  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 1496                              _time_write_1 141C  
                            _prev_hex_day 0044                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 14C4                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0056  
                           _display_clock 0812                             time_write_1@j 0072  
                      __end_of_write_char 133C                        __end_of_write_byte 15C4  
