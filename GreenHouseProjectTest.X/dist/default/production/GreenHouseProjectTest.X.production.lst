

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Dec 12 08:48:48 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  133C                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  133C  3400               	retlw	0
   696  133D  3418               	retlw	24
   697  133E  3400               	retlw	0
   698  133F  3412               	retlw	18
   699  1340  3412               	retlw	18
   700  1341  3406               	retlw	6
   701  1342  3419               	retlw	25
   702  1343  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003F                     _RC7	set	63
   706  003E                     _RC6	set	62
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30BB               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3013               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  303C               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30B3               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  2384  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30B3               	movlw	low (__pbssBANK1+19)
   756  07F1  160A  118A  2334  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  3060               	movlw	low (__pbssBANK0+64)
   762  07F9  160A  118A  2334   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2B94   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _day_counter:	
   773  0020                     	ds	2
   774  0022                     _p:	
   775  0022                     	ds	2
   776  0024                     _stats:	
   777  0024                     	ds	2
   778  0026                     _day_high:	
   779  0026                     	ds	2
   780  0028                     _day_low:	
   781  0028                     	ds	2
   782  002A                     _z:	
   783  002A                     	ds	2
   784  002C                     _y:	
   785  002C                     	ds	2
   786  002E                     _x:	
   787  002E                     	ds	2
   788  0030                     _w:	
   789  0030                     	ds	2
   790  0032                     _t:	
   791  0032                     	ds	2
   792  0034                     _cold_low:	
   793  0034                     	ds	2
   794  0036                     _cold_high:	
   795  0036                     	ds	2
   796  0038                     _var_night_high:	
   797  0038                     	ds	2
   798  003A                     _var_night_low:	
   799  003A                     	ds	2
   800  003C                     _heat_counter:	
   801  003C                     	ds	2
   802  003E                     _wd:	
   803  003E                     	ds	2
   804  0040                     read_byte@j:	
   805  0040                     	ds	1
   806  0041                     _prev_hex_mins:	
   807  0041                     	ds	1
   808  0042                     _prev_hex_hours:	
   809  0042                     	ds	1
   810  0043                     _prev_hex_year:	
   811  0043                     	ds	1
   812  0044                     _prev_hex_day:	
   813  0044                     	ds	1
   814  0045                     _prev_hex:	
   815  0045                     	ds	1
   816  0046                     _hrs_limiter:	
   817  0046                     	ds	1
   818  0047                     _day_hex:	
   819  0047                     	ds	1
   820  0048                     _c:	
   821  0048                     	ds	1
   822  0049                     _b:	
   823  0049                     	ds	1
   824  004A                     _a:	
   825  004A                     	ds	1
   826  004B                     _temp_high:	
   827  004B                     	ds	1
   828  004C                     _temp_low:	
   829  004C                     	ds	1
   830  004D                     _alarm__:	
   831  004D                     	ds	1
   832  004E                     _var2:	
   833  004E                     	ds	1
   834  004F                     _var1:	
   835  004F                     	ds	1
   836  0050                     _cooler_state:	
   837  0050                     	ds	1
   838  0051                     _heater_state:	
   839  0051                     	ds	1
   840  0052                     _buzzer_watcher1:	
   841  0052                     	ds	1
   842  0053                     _buzzer_watcher:	
   843  0053                     	ds	1
   844  0054                     _lower_t:	
   845  0054                     	ds	1
   846  0055                     _upper_t:	
   847  0055                     	ds	1
   848  0056                     _wanfen:	
   849  0056                     	ds	1
   850  0057                     _qianfen:	
   851  0057                     	ds	1
   852  0058                     _baifen:	
   853  0058                     	ds	1
   854  0059                     _shifen:	
   855  0059                     	ds	1
   856  005A                     _ge:	
   857  005A                     	ds	1
   858  005B                     _shi:	
   859  005B                     	ds	1
   860  005C                     _TX:	
   861  005C                     	ds	1
   862  005D                     _TZ:	
   863  005D                     	ds	1
   864  005E                     _THV:	
   865  005E                     	ds	1
   866  005F                     _TLV:	
   867  005F                     	ds	1
   868                           
   869                           	psect	bssBANK1
   870  00A0                     __pbssBANK1:	
   871  00A0                     _table1:	
   872  00A0                     	ds	7
   873  00A7                     _d_type:	
   874  00A7                     	ds	2
   875  00A9                     _day_of_week_var:	
   876  00A9                     	ds	2
   877  00AB                     _cold_low_night:	
   878  00AB                     	ds	2
   879  00AD                     _cold_high_night:	
   880  00AD                     	ds	2
   881  00AF                     _count:	
   882  00AF                     	ds	2
   883  00B1                     _cold_counter:	
   884  00B1                     	ds	2
   885                           
   886                           	psect	dataBANK1
   887  00B3                     __pdataBANK1:	
   888  00B3                     _table:	
   889  00B3                     	ds	8
   890                           
   891                           	psect	inittext
   892  1380                     init_fetch0:	
   893                           ;	Called with low address in FSR and high address in W
   894                           
   895  1380  087E               	movf	126,w
   896  1381  008A               	movwf	10
   897  1382  087F               	movf	127,w
   898  1383  0082               	movwf	2
   899  1384                     init_ram0:	
   900                           ;Called with:
   901                           ;	high address of idata address in btemp 
   902                           ;	low address of idata address in btemp+1 
   903                           ;	low address of data in FSR
   904                           ;	high address + 1 of data in btemp-1
   905                           
   906  1384  2380  160A  118A   	fcall	init_fetch0
   907  1387  0080               	movwf	0
   908  1388  0A84               	incf	4,f
   909  1389  0804               	movf	4,w
   910  138A  067D               	xorwf	125,w
   911  138B  1903               	btfsc	3,2
   912  138C  3400               	retlw	0
   913  138D  0AFF               	incf	127,f
   914  138E  1903               	btfsc	3,2
   915  138F  0AFE               	incf	126,f
   916  1390  2B84               	goto	init_ram0
   917                           
   918                           	psect	clrtext
   919  1334                     clear_ram0:	
   920                           ;	Called with FSR containing the base address, and
   921                           ;	W with the last address+1
   922                           
   923  1334  0064               	clrwdt	;clear the watchdog before getting into this loop
   924  1335                     clrloop0:	
   925  1335  0180               	clrf	0	;clear RAM location pointed to by FSR
   926  1336  0A84               	incf	4,f	;increment pointer
   927  1337  0604               	xorwf	4,w	;XOR with final address
   928  1338  1903               	btfsc	3,2	;have we reached the end yet?
   929  1339  3400               	retlw	0	;all done for this memory range, return
   930  133A  0604               	xorwf	4,w	;XOR again to restore value
   931  133B  2B35               	goto	clrloop0	;do the next byte
   932                           
   933                           	psect	cstackCOMMON
   934  0070                     __pcstackCOMMON:	
   935  0070                     ?_init_temp:	
   936  0070                     ??_init_temp:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_set_time:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_ds1302_init:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_init:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ??_init:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_lcd_init:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_initialise_buttons:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ??_initialise_buttons:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_get_temp:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_get_time:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_write_cmd:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_write_char:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_display_temp:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_display_date:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_display_clock:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_thermometer_threshhold_settings:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?_date_settings:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ?_time_settings:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ?_reset_alarm:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_set_beep_threshhold:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_delay_screen:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ??_delay_screen:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ?_delay_temp:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?_delay2:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ??_delay2:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_time_write_1:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ??_time_write_1:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_time_read_1:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ??_time_read_1:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_button_delay:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ??_button_delay:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_time_date_hex_terminator:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_time_date_delimiter:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_main:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_reset_temp:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_write_byte:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_read_byte:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?___lbdiv:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?___lbmod:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?___awmod:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?___lwmod:	
  1057                           ; 2 bytes @ 0x0
  1058                           
  1059  0070                     delay_temp@y:	
  1060                           ; 2 bytes @ 0x0
  1061                           
  1062  0070                     time_date_delimiter@hex:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     time_date_hex_terminator@limiter:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ___lbdiv@divisor:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ___lbmod@divisor:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     delay_screen@i:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     delay2@i:	
  1078                           ; 2 bytes @ 0x0
  1079                           
  1080  0070                     button_delay@i:	
  1081                           ; 2 bytes @ 0x0
  1082                           
  1083  0070                     ___awmod@divisor:	
  1084                           ; 2 bytes @ 0x0
  1085                           
  1086  0070                     ___lwmod@divisor:	
  1087                           ; 2 bytes @ 0x0
  1088                           
  1089                           
  1090                           ; 2 bytes @ 0x0
  1091  0070                     	ds	1
  1092  0071                     ??_delay_temp:	
  1093  0071                     ??_time_date_hex_terminator:	
  1094                           ; 1 bytes @ 0x1
  1095                           
  1096  0071                     ??___lbdiv:	
  1097                           ; 1 bytes @ 0x1
  1098                           
  1099  0071                     ??___lbmod:	
  1100                           ; 1 bytes @ 0x1
  1101                           
  1102  0071                     time_date_delimiter@limiter:	
  1103                           ; 1 bytes @ 0x1
  1104                           
  1105                           
  1106                           ; 1 bytes @ 0x1
  1107  0071                     	ds	1
  1108  0072                     ??_write_cmd:	
  1109  0072                     ??_write_char:	
  1110                           ; 1 bytes @ 0x2
  1111                           
  1112  0072                     ??_set_beep_threshhold:	
  1113                           ; 1 bytes @ 0x2
  1114                           
  1115  0072                     write_char@x:	
  1116                           ; 1 bytes @ 0x2
  1117                           
  1118  0072                     write_cmd@x:	
  1119                           ; 1 bytes @ 0x2
  1120                           
  1121  0072                     delay_temp@x:	
  1122                           ; 1 bytes @ 0x2
  1123                           
  1124  0072                     set_beep_threshhold@x:	
  1125                           ; 1 bytes @ 0x2
  1126                           
  1127  0072                     ___lbdiv@dividend:	
  1128                           ; 1 bytes @ 0x2
  1129                           
  1130  0072                     time_write_1@j:	
  1131                           ; 1 bytes @ 0x2
  1132                           
  1133  0072                     time_read_1@j:	
  1134                           ; 2 bytes @ 0x2
  1135                           
  1136  0072                     time_date_delimiter@type:	
  1137                           ; 2 bytes @ 0x2
  1138                           
  1139  0072                     ___awmod@dividend:	
  1140                           ; 2 bytes @ 0x2
  1141                           
  1142  0072                     ___lwmod@dividend:	
  1143                           ; 2 bytes @ 0x2
  1144                           
  1145                           
  1146                           ; 2 bytes @ 0x2
  1147  0072                     	ds	1
  1148  0073                     ??_lcd_init:	
  1149  0073                     ??_display_temp:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     ??_display_date:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155  0073                     ??_display_clock:	
  1156                           ; 1 bytes @ 0x3
  1157                           
  1158  0073                     ?_set_lower_threshold:	
  1159                           ; 1 bytes @ 0x3
  1160                           
  1161  0073                     ?_set_upper_threshold:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164  0073                     ?_cold_threshold:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167  0073                     ??_reset_alarm:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0073                     ?_display_day:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0073                     delay_temp@z:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176  0073                     time_date_hex_terminator@val:	
  1177                           ; 1 bytes @ 0x3
  1178                           
  1179  0073                     ___lbdiv@counter:	
  1180                           ; 1 bytes @ 0x3
  1181                           
  1182  0073                     set_upper_threshold@upper_val:	
  1183                           ; 1 bytes @ 0x3
  1184                           
  1185  0073                     cold_threshold@upper_val:	
  1186                           ; 2 bytes @ 0x3
  1187                           
  1188  0073                     set_lower_threshold@upper_val:	
  1189                           ; 2 bytes @ 0x3
  1190                           
  1191  0073                     display_day@num:	
  1192                           ; 2 bytes @ 0x3
  1193                           
  1194                           
  1195                           ; 2 bytes @ 0x3
  1196  0073                     	ds	1
  1197  0074                     ??_time_date_delimiter:	
  1198  0074                     ??_reset_temp:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     ??_write_byte:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     ??_read_byte:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207  0074                     ??___awmod:	
  1208                           ; 1 bytes @ 0x4
  1209                           
  1210  0074                     ??___lwmod:	
  1211                           ; 1 bytes @ 0x4
  1212                           
  1213  0074                     time_write_1@time_tx:	
  1214                           ; 1 bytes @ 0x4
  1215                           
  1216  0074                     time_read_1@time_rx:	
  1217                           ; 1 bytes @ 0x4
  1218                           
  1219  0074                     ___lbdiv@quotient:	
  1220                           ; 1 bytes @ 0x4
  1221                           
  1222  0074                     ___lbmod@dividend:	
  1223                           ; 1 bytes @ 0x4
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0x4
  1227  0074                     	ds	1
  1228  0075                     ??_set_time:	
  1229  0075                     ??_ds1302_init:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0075                     ??_get_time:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0075                     ??_display_day:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0075                     reset_temp@presence:	
  1239                           ; 1 bytes @ 0x5
  1240                           
  1241  0075                     read_byte@value:	
  1242                           ; 1 bytes @ 0x5
  1243                           
  1244  0075                     ___awmod@counter:	
  1245                           ; 1 bytes @ 0x5
  1246                           
  1247  0075                     ___lbmod@counter:	
  1248                           ; 1 bytes @ 0x5
  1249                           
  1250  0075                     ___lwmod@counter:	
  1251                           ; 1 bytes @ 0x5
  1252                           
  1253  0075                     set_time@i:	
  1254                           ; 1 bytes @ 0x5
  1255                           
  1256  0075                     display_clock@i:	
  1257                           ; 2 bytes @ 0x5
  1258                           
  1259  0075                     display_date@i:	
  1260                           ; 2 bytes @ 0x5
  1261                           
  1262  0075                     set_upper_threshold@lower_val:	
  1263                           ; 2 bytes @ 0x5
  1264                           
  1265  0075                     cold_threshold@lower_val:	
  1266                           ; 2 bytes @ 0x5
  1267                           
  1268  0075                     set_lower_threshold@lower_val:	
  1269                           ; 2 bytes @ 0x5
  1270                           
  1271                           
  1272                           ; 2 bytes @ 0x5
  1273  0075                     	ds	1
  1274  0076                     ?___lwdiv:	
  1275  0076                     write_byte@temp:	
  1276                           ; 2 bytes @ 0x6
  1277                           
  1278  0076                     read_byte@i:	
  1279                           ; 1 bytes @ 0x6
  1280                           
  1281  0076                     time_date_delimiter@val:	
  1282                           ; 1 bytes @ 0x6
  1283                           
  1284  0076                     ___awmod@sign:	
  1285                           ; 1 bytes @ 0x6
  1286                           
  1287  0076                     ___lbmod@rem:	
  1288                           ; 1 bytes @ 0x6
  1289                           
  1290  0076                     get_time@i:	
  1291                           ; 1 bytes @ 0x6
  1292                           
  1293  0076                     ___lwdiv@divisor:	
  1294                           ; 2 bytes @ 0x6
  1295                           
  1296                           
  1297                           ; 2 bytes @ 0x6
  1298  0076                     	ds	1
  1299  0077                     ??_set_lower_threshold:	
  1300  0077                     ??_set_upper_threshold:	
  1301                           ; 1 bytes @ 0x7
  1302                           
  1303  0077                     ??_cold_threshold:	
  1304                           ; 1 bytes @ 0x7
  1305                           
  1306  0077                     ?_modulus_func:	
  1307                           ; 1 bytes @ 0x7
  1308                           
  1309  0077                     write_byte@val:	
  1310                           ; 2 bytes @ 0x7
  1311                           
  1312  0077                     modulus_func@x:	
  1313                           ; 1 bytes @ 0x7
  1314                           
  1315                           
  1316                           ; 2 bytes @ 0x7
  1317  0077                     	ds	1
  1318  0078                     write_byte@i:	
  1319  0078                     ___lwdiv@dividend:	
  1320                           ; 1 bytes @ 0x8
  1321                           
  1322                           
  1323                           ; 2 bytes @ 0x8
  1324  0078                     	ds	1
  1325  0079                     modulus_func@y:	
  1326                           
  1327                           ; 2 bytes @ 0x9
  1328  0079                     	ds	1
  1329  007A                     ??___lwdiv:	
  1330                           
  1331                           ; 1 bytes @ 0xA
  1332  007A                     	ds	1
  1333  007B                     ??_modulus_func:	
  1334  007B                     ??_incrementor:	
  1335                           ; 1 bytes @ 0xB
  1336                           
  1337  007B                     ___lwdiv@quotient:	
  1338                           ; 1 bytes @ 0xB
  1339                           
  1340                           
  1341                           ; 2 bytes @ 0xB
  1342  007B                     	ds	2
  1343  007D                     ___lwdiv@counter:	
  1344                           
  1345                           ; 1 bytes @ 0xD
  1346  007D                     	ds	1
  1347                           
  1348                           	psect	cstackBANK0
  1349  0060                     __pcstackBANK0:	
  1350  0060                     ??_get_temp:	
  1351  0060                     ?_incrementor:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0060                     incrementor@upper_val:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357                           
  1358                           ; 2 bytes @ 0x0
  1359  0060                     	ds	2
  1360  0062                     incrementor@lower_val:	
  1361                           
  1362                           ; 2 bytes @ 0x2
  1363  0062                     	ds	2
  1364  0064                     incrementor@z:	
  1365                           
  1366                           ; 1 bytes @ 0x4
  1367  0064                     	ds	1
  1368  0065                     ??_thermometer_threshhold_settings:	
  1369  0065                     ??_date_settings:	
  1370                           ; 1 bytes @ 0x5
  1371                           
  1372  0065                     ??_time_settings:	
  1373                           ; 1 bytes @ 0x5
  1374                           
  1375                           
  1376                           ; 1 bytes @ 0x5
  1377  0065                     	ds	3
  1378  0068                     ??_main:	
  1379                           
  1380                           ; 1 bytes @ 0x8
  1381  0068                     	ds	5
  1382  006D                     main@i:	
  1383                           
  1384                           ; 2 bytes @ 0xD
  1385  006D                     	ds	2
  1386                           
  1387                           	psect	maintext
  1388  0B94                     __pmaintext:	
  1389 ;;
  1390 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1391 ;;
  1392 ;; *************** function _main *****************
  1393 ;; Defined at:
  1394 ;;		line 10 in file "mainLogic.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;		None
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  i               2   13[BANK0 ] int 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  1    wreg      void 
  1401 ;; Registers used:
  1402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : B00/0
  1405 ;;		On exit  : 300/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1408 ;;      Params:         0       0       0       0       0
  1409 ;;      Locals:         0       2       0       0       0
  1410 ;;      Temps:          0       5       0       0       0
  1411 ;;      Totals:         0       7       0       0       0
  1412 ;;Total ram usage:        7 bytes
  1413 ;; Hardware stack levels required when called:    4
  1414 ;; This function calls:
  1415 ;;		_cold_threshold
  1416 ;;		_date_settings
  1417 ;;		_display_clock
  1418 ;;		_display_date
  1419 ;;		_display_day
  1420 ;;		_display_temp
  1421 ;;		_ds1302_init
  1422 ;;		_get_temp
  1423 ;;		_get_time
  1424 ;;		_init
  1425 ;;		_init_temp
  1426 ;;		_initialise_buttons
  1427 ;;		_lcd_init
  1428 ;;		_modulus_func
  1429 ;;		_reset_alarm
  1430 ;;		_set_beep_threshhold
  1431 ;;		_set_lower_threshold
  1432 ;;		_set_time
  1433 ;;		_set_upper_threshold
  1434 ;;		_thermometer_threshhold_settings
  1435 ;;		_time_settings
  1436 ;;		_write_char
  1437 ;;		_write_cmd
  1438 ;; This function is called by:
  1439 ;;		Startup code after reset
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _main
  1445  0B94                     _main:	
  1446                           
  1447                           ;mainLogic.c: 11:     TRISB=0X02;
  1448                           
  1449                           ;incstack = 0
  1450                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1451  0B94  3002               	movlw	2
  1452  0B95  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0B96  0086               	movwf	6	;volatile
  1454                           
  1455                           ;mainLogic.c: 12:     init_temp();
  1456  0B97  160A  118A  2327  120A  158A  	fcall	_init_temp
  1457                           
  1458                           ;mainLogic.c: 13:     set_time();
  1459  0B9C  160A  118A  24CA  120A  158A  	fcall	_set_time
  1460                           
  1461                           ;mainLogic.c: 14:     ds1302_init();
  1462  0BA1  160A  118A  2361  120A  158A  	fcall	_ds1302_init
  1463                           
  1464                           ;mainLogic.c: 16:     init();
  1465  0BA6  160A  118A  232C  120A  158A  	fcall	_init
  1466                           
  1467                           ;mainLogic.c: 17:     lcd_init();
  1468  0BAB  160A  118A  245D  120A  158A  	fcall	_lcd_init
  1469                           
  1470                           ;mainLogic.c: 18:     init_temp();
  1471  0BB0  160A  118A  2327  120A  158A  	fcall	_init_temp
  1472                           
  1473                           ;mainLogic.c: 19:     initialise_buttons();
  1474  0BB5  160A  118A  23CD  120A  158A  	fcall	_initialise_buttons
  1475                           
  1476                           ;mainLogic.c: 20:     var1 = 3;
  1477  0BBA  3003               	movlw	3
  1478  0BBB  00E8               	movwf	??_main
  1479  0BBC  0868               	movf	??_main,w
  1480  0BBD  00CF               	movwf	_var1
  1481                           
  1482                           ;mainLogic.c: 21:     var2 = 4;
  1483  0BBE  3004               	movlw	4
  1484  0BBF  00E8               	movwf	??_main
  1485  0BC0  0868               	movf	??_main,w
  1486  0BC1  00CE               	movwf	_var2
  1487                           
  1488                           ;mainLogic.c: 22:     var_night_low = 4;
  1489  0BC2  3004               	movlw	4
  1490  0BC3  00BA               	movwf	_var_night_low
  1491  0BC4  3000               	movlw	0
  1492  0BC5  00BB               	movwf	_var_night_low+1
  1493                           
  1494                           ;mainLogic.c: 23:     var_night_high = 2;
  1495  0BC6  3002               	movlw	2
  1496  0BC7  00B8               	movwf	_var_night_high
  1497  0BC8  3000               	movlw	0
  1498  0BC9  00B9               	movwf	_var_night_high+1
  1499                           
  1500                           ;mainLogic.c: 24:     cold_high = 1;
  1501  0BCA  3001               	movlw	1
  1502  0BCB  00B6               	movwf	_cold_high
  1503  0BCC  3000               	movlw	0
  1504  0BCD  00B7               	movwf	_cold_high+1
  1505                           
  1506                           ;mainLogic.c: 25:     cold_low = 9;
  1507  0BCE  3009               	movlw	9
  1508  0BCF  00B4               	movwf	_cold_low
  1509  0BD0  3000               	movlw	0
  1510  0BD1  00B5               	movwf	_cold_low+1
  1511  0BD2                     l4750:	
  1512                           
  1513                           ;mainLogic.c: 28:     get_temp();
  1514  0BD2  120A  158A  2136  120A  158A  	fcall	_get_temp
  1515                           
  1516                           ;mainLogic.c: 29:     get_time();
  1517  0BD7  160A  118A  24F2  120A  158A  	fcall	_get_time
  1518                           
  1519                           ;mainLogic.c: 30:     write_cmd(0x80);
  1520  0BDC  3080               	movlw	128
  1521  0BDD  120A  158A  2001  120A  158A  	fcall	_write_cmd
  1522                           
  1523                           ;mainLogic.c: 31:     write_char('T');
  1524  0BE2  3054               	movlw	84
  1525  0BE3  160A  118A  23E1  120A  158A  	fcall	_write_char
  1526                           
  1527                           ;mainLogic.c: 32:     write_char('e');
  1528  0BE8  3065               	movlw	101
  1529  0BE9  160A  118A  23E1  120A  158A  	fcall	_write_char
  1530                           
  1531                           ;mainLogic.c: 33:     write_char('m');
  1532  0BEE  306D               	movlw	109
  1533  0BEF  160A  118A  23E1  120A  158A  	fcall	_write_char
  1534                           
  1535                           ;mainLogic.c: 34:     write_char('p');
  1536  0BF4  3070               	movlw	112
  1537  0BF5  160A  118A  23E1  120A  158A  	fcall	_write_char
  1538                           
  1539                           ;mainLogic.c: 35:     write_char(':');
  1540  0BFA  303A               	movlw	58
  1541  0BFB  160A  118A  23E1  120A  158A  	fcall	_write_char
  1542                           
  1543                           ;mainLogic.c: 36:     display_temp();
  1544  0C00  160A  118A  23F8  120A  158A  	fcall	_display_temp
  1545                           
  1546                           ;mainLogic.c: 38:     write_cmd(0x90);
  1547  0C05  3090               	movlw	144
  1548  0C06  120A  158A  2001  120A  158A  	fcall	_write_cmd
  1549                           
  1550                           ;mainLogic.c: 39:     write_char('D');
  1551  0C0B  3044               	movlw	68
  1552  0C0C  160A  118A  23E1  120A  158A  	fcall	_write_char
  1553                           
  1554                           ;mainLogic.c: 40:     write_char('a');
  1555  0C11  3061               	movlw	97
  1556  0C12  160A  118A  23E1  120A  158A  	fcall	_write_char
  1557                           
  1558                           ;mainLogic.c: 41:     write_char('t');
  1559  0C17  3074               	movlw	116
  1560  0C18  160A  118A  23E1  120A  158A  	fcall	_write_char
  1561                           
  1562                           ;mainLogic.c: 42:     write_char('e');
  1563  0C1D  3065               	movlw	101
  1564  0C1E  160A  118A  23E1  120A  158A  	fcall	_write_char
  1565                           
  1566                           ;mainLogic.c: 43:     write_char(':');
  1567  0C23  303A               	movlw	58
  1568  0C24  160A  118A  23E1  120A  158A  	fcall	_write_char
  1569                           
  1570                           ;mainLogic.c: 44:     write_char(' ');
  1571  0C29  3020               	movlw	32
  1572  0C2A  160A  118A  23E1  120A  158A  	fcall	_write_char
  1573                           
  1574                           ;mainLogic.c: 46:     display_date();
  1575  0C2F  160A  118A  2763  120A  158A  	fcall	_display_date
  1576                           
  1577                           ;mainLogic.c: 48:     write_cmd(0x88);
  1578  0C34  3088               	movlw	136
  1579  0C35  120A  158A  2001  120A  158A  	fcall	_write_cmd
  1580                           
  1581                           ;mainLogic.c: 49:     write_char('T');
  1582  0C3A  3054               	movlw	84
  1583  0C3B  160A  118A  23E1  120A  158A  	fcall	_write_char
  1584                           
  1585                           ;mainLogic.c: 50:     write_char('i');
  1586  0C40  3069               	movlw	105
  1587  0C41  160A  118A  23E1  120A  158A  	fcall	_write_char
  1588                           
  1589                           ;mainLogic.c: 51:     write_char('m');
  1590  0C46  306D               	movlw	109
  1591  0C47  160A  118A  23E1  120A  158A  	fcall	_write_char
  1592                           
  1593                           ;mainLogic.c: 52:     write_char('e');
  1594  0C4C  3065               	movlw	101
  1595  0C4D  160A  118A  23E1  120A  158A  	fcall	_write_char
  1596                           
  1597                           ;mainLogic.c: 53:     write_char(':');
  1598  0C52  303A               	movlw	58
  1599  0C53  160A  118A  23E1  120A  158A  	fcall	_write_char
  1600                           
  1601                           ;mainLogic.c: 54:     display_clock();
  1602  0C58  120A  158A  2091  120A  158A  	fcall	_display_clock
  1603                           
  1604                           ;mainLogic.c: 55:     thermometer_threshhold_settings();
  1605  0C5D  120A  158A  257F  120A  158A  	fcall	_thermometer_threshhold_settings
  1606                           
  1607                           ;mainLogic.c: 56:     date_settings();
  1608  0C62  120A  118A  2387  120A  158A  	fcall	_date_settings
  1609                           
  1610                           ;mainLogic.c: 57:     time_settings();
  1611  0C67  120A  118A  2071  120A  158A  	fcall	_time_settings
  1612                           
  1613                           ;mainLogic.c: 58:     write_cmd(0x98);
  1614  0C6C  3098               	movlw	152
  1615  0C6D  120A  158A  2001  120A  158A  	fcall	_write_cmd
  1616                           
  1617                           ;mainLogic.c: 60:      if((temp_high+'0')<= 1 && (temp_low + '0') < 8){
  1618  0C72  084B               	movf	_temp_high,w
  1619  0C73  3E30               	addlw	48
  1620  0C74  00E8               	movwf	??_main
  1621  0C75  3000               	movlw	0
  1622  0C76  1803               	skipnc
  1623  0C77  3001               	movlw	1
  1624  0C78  00E9               	movwf	??_main+1
  1625  0C79  3000               	movlw	0
  1626  0C7A  0269               	subwf	??_main+1,w
  1627  0C7B  3002               	movlw	2
  1628  0C7C  1903               	skipnz
  1629  0C7D  0268               	subwf	??_main,w
  1630  0C7E  1803               	skipnc
  1631  0C7F  2CCA               	goto	l4812
  1632  0C80  084C               	movf	_temp_low,w
  1633  0C81  3E30               	addlw	48
  1634  0C82  00E8               	movwf	??_main
  1635  0C83  3000               	movlw	0
  1636  0C84  1803               	skipnc
  1637  0C85  3001               	movlw	1
  1638  0C86  00E9               	movwf	??_main+1
  1639  0C87  3000               	movlw	0
  1640  0C88  0269               	subwf	??_main+1,w
  1641  0C89  3008               	movlw	8
  1642  0C8A  1903               	skipnz
  1643  0C8B  0268               	subwf	??_main,w
  1644  0C8C  1803               	skipnc
  1645  0C8D  2CCA               	goto	l4812
  1646                           
  1647                           ;mainLogic.c: 61:     alarm__ = set_lower_threshold(var1,var2);
  1648  0C8E  084F               	movf	_var1,w
  1649  0C8F  00E8               	movwf	??_main
  1650  0C90  01E9               	clrf	??_main+1
  1651  0C91  0868               	movf	??_main,w
  1652  0C92  00F3               	movwf	set_lower_threshold@upper_val
  1653  0C93  0869               	movf	??_main+1,w
  1654  0C94  00F4               	movwf	set_lower_threshold@upper_val+1
  1655  0C95  084E               	movf	_var2,w
  1656  0C96  00EA               	movwf	??_main+2
  1657  0C97  01EB               	clrf	??_main+3
  1658  0C98  086A               	movf	??_main+2,w
  1659  0C99  00F5               	movwf	set_lower_threshold@lower_val
  1660  0C9A  086B               	movf	??_main+3,w
  1661  0C9B  00F6               	movwf	set_lower_threshold@lower_val+1
  1662  0C9C  160A  118A  2688  120A  158A  	fcall	_set_lower_threshold
  1663  0CA1  00EC               	movwf	??_main+4
  1664  0CA2  086C               	movf	??_main+4,w
  1665  0CA3  00CD               	movwf	_alarm__
  1666                           
  1667                           ;mainLogic.c: 62:     alarm__ = set_upper_threshold(var1,var2);
  1668  0CA4  084F               	movf	_var1,w
  1669  0CA5  00E8               	movwf	??_main
  1670  0CA6  01E9               	clrf	??_main+1
  1671  0CA7  0868               	movf	??_main,w
  1672  0CA8  00F3               	movwf	set_upper_threshold@upper_val
  1673  0CA9  0869               	movf	??_main+1,w
  1674  0CAA  00F4               	movwf	set_upper_threshold@upper_val+1
  1675  0CAB  084E               	movf	_var2,w
  1676  0CAC  00EA               	movwf	??_main+2
  1677  0CAD  01EB               	clrf	??_main+3
  1678  0CAE  086A               	movf	??_main+2,w
  1679  0CAF  00F5               	movwf	set_upper_threshold@lower_val
  1680  0CB0  086B               	movf	??_main+3,w
  1681  0CB1  00F6               	movwf	set_upper_threshold@lower_val+1
  1682  0CB2  160A  118A  2718  120A  158A  	fcall	_set_upper_threshold
  1683  0CB7  00EC               	movwf	??_main+4
  1684  0CB8  086C               	movf	??_main+4,w
  1685  0CB9  00CD               	movwf	_alarm__
  1686                           
  1687                           ;mainLogic.c: 63:     alarm__ = cold_threshold(cold_high,cold_low);
  1688  0CBA  0837               	movf	_cold_high+1,w
  1689  0CBB  00F4               	movwf	cold_threshold@upper_val+1
  1690  0CBC  0836               	movf	_cold_high,w
  1691  0CBD  00F3               	movwf	cold_threshold@upper_val
  1692  0CBE  0835               	movf	_cold_low+1,w
  1693  0CBF  00F6               	movwf	cold_threshold@lower_val+1
  1694  0CC0  0834               	movf	_cold_low,w
  1695  0CC1  00F5               	movwf	cold_threshold@lower_val
  1696  0CC2  120A  118A  2023  120A  158A  	fcall	_cold_threshold
  1697  0CC7  00E8               	movwf	??_main
  1698  0CC8  0868               	movf	??_main,w
  1699  0CC9  00CD               	movwf	_alarm__
  1700  0CCA                     l4812:	
  1701                           
  1702                           ;mainLogic.c: 66:     if((temp_high+'0') >= 1 && (temp_low + '0') >= 8){
  1703  0CCA  084B               	movf	_temp_high,w
  1704  0CCB  3E30               	addlw	48
  1705  0CCC  00E8               	movwf	??_main
  1706  0CCD  3000               	movlw	0
  1707  0CCE  1803               	skipnc
  1708  0CCF  3001               	movlw	1
  1709  0CD0  00E9               	movwf	??_main+1
  1710  0CD1  0868               	movf	??_main,w
  1711  0CD2  0469               	iorwf	??_main+1,w
  1712  0CD3  1903               	btfsc	3,2
  1713  0CD4  2D11               	goto	l165
  1714  0CD5  084C               	movf	_temp_low,w
  1715  0CD6  3E30               	addlw	48
  1716  0CD7  00E8               	movwf	??_main
  1717  0CD8  3000               	movlw	0
  1718  0CD9  1803               	skipnc
  1719  0CDA  3001               	movlw	1
  1720  0CDB  00E9               	movwf	??_main+1
  1721  0CDC  3000               	movlw	0
  1722  0CDD  0269               	subwf	??_main+1,w
  1723  0CDE  3008               	movlw	8
  1724  0CDF  1903               	skipnz
  1725  0CE0  0268               	subwf	??_main,w
  1726  0CE1  1C03               	skipc
  1727  0CE2  2D11               	goto	l165
  1728                           
  1729                           ;mainLogic.c: 67:     alarm__ = set_lower_threshold(var_night_high,var_night_low);
  1730  0CE3  0839               	movf	_var_night_high+1,w
  1731  0CE4  00F4               	movwf	set_lower_threshold@upper_val+1
  1732  0CE5  0838               	movf	_var_night_high,w
  1733  0CE6  00F3               	movwf	set_lower_threshold@upper_val
  1734  0CE7  083B               	movf	_var_night_low+1,w
  1735  0CE8  00F6               	movwf	set_lower_threshold@lower_val+1
  1736  0CE9  083A               	movf	_var_night_low,w
  1737  0CEA  00F5               	movwf	set_lower_threshold@lower_val
  1738  0CEB  160A  118A  2688  120A  158A  	fcall	_set_lower_threshold
  1739  0CF0  00E8               	movwf	??_main
  1740  0CF1  0868               	movf	??_main,w
  1741  0CF2  00CD               	movwf	_alarm__
  1742                           
  1743                           ;mainLogic.c: 68:     alarm__ = set_upper_threshold(var_night_high,var_night_low);
  1744  0CF3  0839               	movf	_var_night_high+1,w
  1745  0CF4  00F4               	movwf	set_upper_threshold@upper_val+1
  1746  0CF5  0838               	movf	_var_night_high,w
  1747  0CF6  00F3               	movwf	set_upper_threshold@upper_val
  1748  0CF7  083B               	movf	_var_night_low+1,w
  1749  0CF8  00F6               	movwf	set_upper_threshold@lower_val+1
  1750  0CF9  083A               	movf	_var_night_low,w
  1751  0CFA  00F5               	movwf	set_upper_threshold@lower_val
  1752  0CFB  160A  118A  2718  120A  158A  	fcall	_set_upper_threshold
  1753  0D00  00E8               	movwf	??_main
  1754  0D01  0868               	movf	??_main,w
  1755  0D02  00CD               	movwf	_alarm__
  1756                           
  1757                           ;mainLogic.c: 69:     alarm__ = cold_threshold(cold_high_night,cold_low_night);
  1758  0D03  3000               	movlw	0
  1759  0D04  00F3               	movwf	cold_threshold@upper_val
  1760  0D05  00F4               	movwf	cold_threshold@upper_val+1
  1761  0D06  3000               	movlw	0
  1762  0D07  00F5               	movwf	cold_threshold@lower_val
  1763  0D08  00F6               	movwf	cold_threshold@lower_val+1
  1764  0D09  120A  118A  2023  120A  158A  	fcall	_cold_threshold
  1765  0D0E  00E8               	movwf	??_main
  1766  0D0F  0868               	movf	??_main,w
  1767  0D10  00CD               	movwf	_alarm__
  1768  0D11                     l165:	
  1769                           ;mainLogic.c: 70:     }
  1770                           
  1771                           
  1772                           ;mainLogic.c: 71:     alarm__ = reset_alarm();
  1773  0D11  160A  118A  251E  120A  158A  	fcall	_reset_alarm
  1774  0D16  00E8               	movwf	??_main
  1775  0D17  0868               	movf	??_main,w
  1776  0D18  00CD               	movwf	_alarm__
  1777                           
  1778                           ;mainLogic.c: 72:     set_beep_threshhold(alarm__);
  1779  0D19  084D               	movf	_alarm__,w
  1780  0D1A  120A  118A  2006  120A  158A  	fcall	_set_beep_threshhold
  1781                           
  1782                           ;mainLogic.c: 73:     write_char(' ');
  1783  0D1F  3020               	movlw	32
  1784  0D20  160A  118A  23E1  120A  158A  	fcall	_write_char
  1785                           
  1786                           ;mainLogic.c: 74:     write_char('H');
  1787  0D25  3048               	movlw	72
  1788  0D26  160A  118A  23E1  120A  158A  	fcall	_write_char
  1789                           
  1790                           ;mainLogic.c: 75:     write_char(':');
  1791  0D2B  303A               	movlw	58
  1792  0D2C  160A  118A  23E1  120A  158A  	fcall	_write_char
  1793                           
  1794                           ;mainLogic.c: 76:     write_char(heater_state);
  1795  0D31  0851               	movf	_heater_state,w
  1796  0D32  160A  118A  23E1  120A  158A  	fcall	_write_char
  1797                           
  1798                           ;mainLogic.c: 77:     write_char('C');
  1799  0D37  3043               	movlw	67
  1800  0D38  160A  118A  23E1  120A  158A  	fcall	_write_char
  1801                           
  1802                           ;mainLogic.c: 78:     write_char(':');
  1803  0D3D  303A               	movlw	58
  1804  0D3E  160A  118A  23E1  120A  158A  	fcall	_write_char
  1805                           
  1806                           ;mainLogic.c: 79:     write_char(cooler_state);
  1807  0D43  0850               	movf	_cooler_state,w
  1808  0D44  160A  118A  23E1  120A  158A  	fcall	_write_char
  1809                           
  1810                           ;mainLogic.c: 80:     for(int i = 0; i < 3; i++)
  1811  0D49  01ED               	clrf	main@i
  1812  0D4A  01EE               	clrf	main@i+1
  1813  0D4B                     l4824:	
  1814                           
  1815                           ;mainLogic.c: 81:     write_char(' ');
  1816  0D4B  3020               	movlw	32
  1817  0D4C  160A  118A  23E1  120A  158A  	fcall	_write_char
  1818  0D51  3001               	movlw	1
  1819  0D52  07ED               	addwf	main@i,f
  1820  0D53  1803               	skipnc
  1821  0D54  0AEE               	incf	main@i+1,f
  1822  0D55  3000               	movlw	0
  1823  0D56  07EE               	addwf	main@i+1,f
  1824  0D57  086E               	movf	main@i+1,w
  1825  0D58  3A80               	xorlw	128
  1826  0D59  00FF               	movwf	127
  1827  0D5A  3080               	movlw	128
  1828  0D5B  027F               	subwf	127,w
  1829  0D5C  1D03               	skipz
  1830  0D5D  2D60               	goto	u4065
  1831  0D5E  3003               	movlw	3
  1832  0D5F  026D               	subwf	main@i,w
  1833  0D60                     u4065:	
  1834  0D60  1C03               	skipc
  1835  0D61  2D4B               	goto	l4824
  1836                           
  1837                           ;mainLogic.c: 82:     day_counter = modulus_func(day_low,8);
  1838  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0D64  0829               	movf	_day_low+1,w
  1841  0D65  00F8               	movwf	modulus_func@x+1
  1842  0D66  0828               	movf	_day_low,w
  1843  0D67  00F7               	movwf	modulus_func@x
  1844  0D68  3008               	movlw	8
  1845  0D69  00F9               	movwf	modulus_func@y
  1846  0D6A  3000               	movlw	0
  1847  0D6B  00FA               	movwf	modulus_func@y+1
  1848  0D6C  160A  118A  2370  120A  158A  	fcall	_modulus_func
  1849  0D71  0878               	movf	?_modulus_func+1,w
  1850  0D72  00A1               	movwf	_day_counter+1
  1851  0D73  0877               	movf	?_modulus_func,w
  1852  0D74  00A0               	movwf	_day_counter
  1853                           
  1854                           ;mainLogic.c: 83:     display_day(day_counter);
  1855  0D75  0821               	movf	_day_counter+1,w
  1856  0D76  00F4               	movwf	display_day@num+1
  1857  0D77  0820               	movf	_day_counter,w
  1858  0D78  00F3               	movwf	display_day@num
  1859  0D79  120A  158A  2018  120A  158A  	fcall	_display_day
  1860  0D7E  2BD2               	goto	l4750
  1861  0D7F                     __end_of_main:	
  1862                           
  1863                           	psect	text1
  1864  0071                     __ptext1:	
  1865 ;; *************** function _time_settings *****************
  1866 ;; Defined at:
  1867 ;;		line 233 in file "Button_src.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 300/0
  1878 ;;		On exit  : 300/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1881 ;;      Params:         0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0
  1883 ;;      Temps:          0       3       0       0       0
  1884 ;;      Totals:         0       3       0       0       0
  1885 ;;Total ram usage:        3 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    3
  1888 ;; This function calls:
  1889 ;;		_button_delay
  1890 ;;		_incrementor
  1891 ;;		_modulus_func
  1892 ;;		_set_time
  1893 ;;		_time_date_delimiter
  1894 ;;		_time_date_hex_terminator
  1895 ;;		_write_char
  1896 ;;		_write_cmd
  1897 ;; This function is called by:
  1898 ;;		_main
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function _time_settings
  1904  0071                     _time_settings:	
  1905                           
  1906                           ;Button_src.c: 234:  RC0 = 1;
  1907                           
  1908                           ;incstack = 0
  1909                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1910  0071  1407               	bsf	7,0	;volatile
  1911                           
  1912                           ;Button_src.c: 235:  RC1 = 1;
  1913  0072  1487               	bsf	7,1	;volatile
  1914                           
  1915                           ;Button_src.c: 236:  RC2 = 0;
  1916  0073  1107               	bcf	7,2	;volatile
  1917                           
  1918                           ;Button_src.c: 237:  RC3 = 1;
  1919  0074  1587               	bsf	7,3	;volatile
  1920                           
  1921                           ;Button_src.c: 238:   if (RC4 == 0){
  1922  0075  1A07               	btfsc	7,4	;volatile
  1923  0076  0008               	return
  1924                           
  1925                           ;Button_src.c: 239:       write_cmd(0x1);
  1926  0077  3001               	movlw	1
  1927  0078  120A  158A  2001  120A  118A  	fcall	_write_cmd
  1928  007D                     l742:	
  1929                           ;Button_src.c: 240:       for(;;){
  1930                           
  1931                           
  1932                           ;Button_src.c: 241:             write_cmd(0x80);
  1933  007D  3080               	movlw	128
  1934  007E  120A  158A  2001  120A  118A  	fcall	_write_cmd
  1935                           
  1936                           ;Button_src.c: 242:             write_char('T');
  1937  0083  3054               	movlw	84
  1938  0084  160A  118A  23E1  120A  118A  	fcall	_write_char
  1939                           
  1940                           ;Button_src.c: 243:             write_char('i');
  1941  0089  3069               	movlw	105
  1942  008A  160A  118A  23E1  120A  118A  	fcall	_write_char
  1943                           
  1944                           ;Button_src.c: 244:             write_char('m');
  1945  008F  306D               	movlw	109
  1946  0090  160A  118A  23E1  120A  118A  	fcall	_write_char
  1947                           
  1948                           ;Button_src.c: 245:             write_char('e');
  1949  0095  3065               	movlw	101
  1950  0096  160A  118A  23E1  120A  118A  	fcall	_write_char
  1951                           
  1952                           ;Button_src.c: 246:             write_char('_');
  1953  009B  305F               	movlw	95
  1954  009C  160A  118A  23E1  120A  118A  	fcall	_write_char
  1955                           
  1956                           ;Button_src.c: 247:             write_char('S');
  1957  00A1  3053               	movlw	83
  1958  00A2  160A  118A  23E1  120A  118A  	fcall	_write_char
  1959                           
  1960                           ;Button_src.c: 248:             write_char('e');
  1961  00A7  3065               	movlw	101
  1962  00A8  160A  118A  23E1  120A  118A  	fcall	_write_char
  1963                           
  1964                           ;Button_src.c: 249:             write_char('t');
  1965  00AD  3074               	movlw	116
  1966  00AE  160A  118A  23E1  120A  118A  	fcall	_write_char
  1967                           
  1968                           ;Button_src.c: 250:             write_char('t');
  1969  00B3  3074               	movlw	116
  1970  00B4  160A  118A  23E1  120A  118A  	fcall	_write_char
  1971                           
  1972                           ;Button_src.c: 251:             write_char('i');
  1973  00B9  3069               	movlw	105
  1974  00BA  160A  118A  23E1  120A  118A  	fcall	_write_char
  1975                           
  1976                           ;Button_src.c: 252:             write_char('n');
  1977  00BF  306E               	movlw	110
  1978  00C0  160A  118A  23E1  120A  118A  	fcall	_write_char
  1979                           
  1980                           ;Button_src.c: 253:             write_char('g');
  1981  00C5  3067               	movlw	103
  1982  00C6  160A  118A  23E1  120A  118A  	fcall	_write_char
  1983                           
  1984                           ;Button_src.c: 254:             write_char('s');
  1985  00CB  3073               	movlw	115
  1986  00CC  160A  118A  23E1  120A  118A  	fcall	_write_char
  1987                           
  1988                           ;Button_src.c: 256:             RC0 = 1;
  1989  00D1  1407               	bsf	7,0	;volatile
  1990                           
  1991                           ;Button_src.c: 257:             RC1 = 0;
  1992  00D2  1087               	bcf	7,1	;volatile
  1993                           
  1994                           ;Button_src.c: 258:             RC2 = 1;
  1995  00D3  1507               	bsf	7,2	;volatile
  1996                           
  1997                           ;Button_src.c: 259:             RC3 = 1;
  1998  00D4  1587               	bsf	7,3	;volatile
  1999                           
  2000                           ;Button_src.c: 261:             if(RC7 == 0 && b =='x'){
  2001  00D5  1B87               	btfsc	7,7	;volatile
  2002  00D6  2948               	goto	l4450
  2003  00D7  3078               	movlw	120
  2004  00D8  0649               	xorwf	_b,w
  2005  00D9  1D03               	btfss	3,2
  2006  00DA  2948               	goto	l4450
  2007                           
  2008                           ;Button_src.c: 262:                 if(stats == 1)
  2009  00DB  0324               	decf	_stats,w
  2010  00DC  0425               	iorwf	_stats+1,w
  2011  00DD  1D03               	btfss	3,2
  2012  00DE  28E3               	goto	l744
  2013                           
  2014                           ;Button_src.c: 263:                    a++;
  2015  00DF  3001               	movlw	1
  2016  00E0  00E5               	movwf	??_time_settings
  2017  00E1  0865               	movf	??_time_settings,w
  2018  00E2  07CA               	addwf	_a,f
  2019  00E3                     l744:	
  2020                           
  2021                           ;Button_src.c: 264:                 if(stats == 0){
  2022  00E3  0824               	movf	_stats,w
  2023  00E4  0425               	iorwf	_stats+1,w
  2024  00E5  1D03               	btfss	3,2
  2025  00E6  28EB               	goto	l745
  2026                           
  2027                           ;Button_src.c: 265:                    stats = 1;
  2028  00E7  3001               	movlw	1
  2029  00E8  00A4               	movwf	_stats
  2030  00E9  3000               	movlw	0
  2031  00EA  00A5               	movwf	_stats+1
  2032  00EB                     l745:	
  2033                           ;Button_src.c: 266:                 }
  2034                           
  2035                           
  2036                           ;Button_src.c: 268:                     x++ ;
  2037  00EB  3001               	movlw	1
  2038  00EC  07AE               	addwf	_x,f
  2039  00ED  1803               	skipnc
  2040  00EE  0AAF               	incf	_x+1,f
  2041  00EF  3000               	movlw	0
  2042  00F0  07AF               	addwf	_x+1,f
  2043                           
  2044                           ;Button_src.c: 269:                     x = modulus_func(x,10);
  2045  00F1  082F               	movf	_x+1,w
  2046  00F2  00F8               	movwf	modulus_func@x+1
  2047  00F3  082E               	movf	_x,w
  2048  00F4  00F7               	movwf	modulus_func@x
  2049  00F5  300A               	movlw	10
  2050  00F6  00F9               	movwf	modulus_func@y
  2051  00F7  3000               	movlw	0
  2052  00F8  00FA               	movwf	modulus_func@y+1
  2053  00F9  160A  118A  2370  120A  118A  	fcall	_modulus_func
  2054  00FE  0878               	movf	?_modulus_func+1,w
  2055  00FF  00AF               	movwf	_x+1
  2056  0100  0877               	movf	?_modulus_func,w
  2057  0101  00AE               	movwf	_x
  2058                           
  2059                           ;Button_src.c: 270:                     if (p == 1){
  2060  0102  0322               	decf	_p,w
  2061  0103  0423               	iorwf	_p+1,w
  2062  0104  1D03               	btfss	3,2
  2063  0105  291F               	goto	l4436
  2064                           
  2065                           ;Button_src.c: 271:                         y = incrementor(y,x,'0');
  2066  0106  082D               	movf	_y+1,w
  2067  0107  00E1               	movwf	incrementor@upper_val+1
  2068  0108  082C               	movf	_y,w
  2069  0109  00E0               	movwf	incrementor@upper_val
  2070  010A  082F               	movf	_x+1,w
  2071  010B  00E3               	movwf	incrementor@lower_val+1
  2072  010C  082E               	movf	_x,w
  2073  010D  00E2               	movwf	incrementor@lower_val
  2074  010E  3030               	movlw	48
  2075  010F  00E5               	movwf	??_time_settings
  2076  0110  0865               	movf	??_time_settings,w
  2077  0111  00E4               	movwf	incrementor@z
  2078  0112  160A  118A  2480  120A  118A  	fcall	_incrementor
  2079  0117  00E6               	movwf	??_time_settings+1
  2080  0118  01E7               	clrf	??_time_settings+2
  2081  0119  0866               	movf	??_time_settings+1,w
  2082  011A  00AC               	movwf	_y
  2083  011B  0867               	movf	??_time_settings+2,w
  2084  011C  00AD               	movwf	_y+1
  2085                           
  2086                           ;Button_src.c: 272:                         p = 0;
  2087  011D  01A2               	clrf	_p
  2088  011E  01A3               	clrf	_p+1
  2089  011F                     l4436:	
  2090                           
  2091                           ;Button_src.c: 274:                     if (x == 9){
  2092  011F  3009               	movlw	9
  2093  0120  062E               	xorwf	_x,w
  2094  0121  042F               	iorwf	_x+1,w
  2095  0122  1D03               	btfss	3,2
  2096  0123  2928               	goto	l4440
  2097                           
  2098                           ;Button_src.c: 275:                         p = 1;
  2099  0124  3001               	movlw	1
  2100  0125  00A2               	movwf	_p
  2101  0126  3000               	movlw	0
  2102  0127  00A3               	movwf	_p+1
  2103  0128                     l4440:	
  2104                           
  2105                           ;Button_src.c: 279:                     a = time_date_hex_terminator(a,'T');
  2106  0128  3054               	movlw	84
  2107  0129  00E5               	movwf	??_time_settings
  2108  012A  0865               	movf	??_time_settings,w
  2109  012B  00F0               	movwf	time_date_hex_terminator@limiter
  2110  012C  084A               	movf	_a,w
  2111  012D  160A  118A  2352  120A  118A  	fcall	_time_date_hex_terminator
  2112  0132  00E6               	movwf	??_time_settings+1
  2113  0133  0866               	movf	??_time_settings+1,w
  2114  0134  00CA               	movwf	_a
  2115                           
  2116                           ;Button_src.c: 280:                     if(y == 2 && x == 4){
  2117  0135  3002               	movlw	2
  2118  0136  062C               	xorwf	_y,w
  2119  0137  042D               	iorwf	_y+1,w
  2120  0138  1D03               	btfss	3,2
  2121  0139  2943               	goto	l4448
  2122  013A  3004               	movlw	4
  2123  013B  062E               	xorwf	_x,w
  2124  013C  042F               	iorwf	_x+1,w
  2125  013D  1D03               	btfss	3,2
  2126  013E  2943               	goto	l4448
  2127                           
  2128                           ;Button_src.c: 281:                         x = 0;
  2129  013F  01AE               	clrf	_x
  2130  0140  01AF               	clrf	_x+1
  2131                           
  2132                           ;Button_src.c: 282:                         y = 0;
  2133  0141  01AC               	clrf	_y
  2134  0142  01AD               	clrf	_y+1
  2135  0143                     l4448:	
  2136                           
  2137                           ;Button_src.c: 284:                     button_delay();
  2138  0143  160A  118A  23A5  120A  118A  	fcall	_button_delay
  2139  0148                     l4450:	
  2140                           
  2141                           ;Button_src.c: 286:             if(RC7==0 && b == 'y'){
  2142  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2144  014A  1B87               	btfsc	7,7	;volatile
  2145  014B  29C6               	goto	l4484
  2146  014C  3079               	movlw	121
  2147  014D  0649               	xorwf	_b,w
  2148  014E  1D03               	btfss	3,2
  2149  014F  29C6               	goto	l4484
  2150                           
  2151                           ;Button_src.c: 287:                  if(stats == 1)
  2152  0150  0324               	decf	_stats,w
  2153  0151  0425               	iorwf	_stats+1,w
  2154  0152  1D03               	btfss	3,2
  2155  0153  2958               	goto	l750
  2156                           
  2157                           ;Button_src.c: 288:                    c++;
  2158  0154  3001               	movlw	1
  2159  0155  00E5               	movwf	??_time_settings
  2160  0156  0865               	movf	??_time_settings,w
  2161  0157  07C8               	addwf	_c,f
  2162  0158                     l750:	
  2163                           
  2164                           ;Button_src.c: 289:                 if(stats == 0){
  2165  0158  0824               	movf	_stats,w
  2166  0159  0425               	iorwf	_stats+1,w
  2167  015A  1D03               	btfss	3,2
  2168  015B  2960               	goto	l751
  2169                           
  2170                           ;Button_src.c: 290:                     stats = 1;
  2171  015C  3001               	movlw	1
  2172  015D  00A4               	movwf	_stats
  2173  015E  3000               	movlw	0
  2174  015F  00A5               	movwf	_stats+1
  2175  0160                     l751:	
  2176                           ;Button_src.c: 291:                 }
  2177                           
  2178                           
  2179                           ;Button_src.c: 293:                     t++;
  2180  0160  3001               	movlw	1
  2181  0161  07B2               	addwf	_t,f
  2182  0162  1803               	skipnc
  2183  0163  0AB3               	incf	_t+1,f
  2184  0164  3000               	movlw	0
  2185  0165  07B3               	addwf	_t+1,f
  2186                           
  2187                           ;Button_src.c: 294:                     t = modulus_func(t,10);
  2188  0166  0833               	movf	_t+1,w
  2189  0167  00F8               	movwf	modulus_func@x+1
  2190  0168  0832               	movf	_t,w
  2191  0169  00F7               	movwf	modulus_func@x
  2192  016A  300A               	movlw	10
  2193  016B  00F9               	movwf	modulus_func@y
  2194  016C  3000               	movlw	0
  2195  016D  00FA               	movwf	modulus_func@y+1
  2196  016E  160A  118A  2370  120A  118A  	fcall	_modulus_func
  2197  0173  0878               	movf	?_modulus_func+1,w
  2198  0174  00B3               	movwf	_t+1
  2199  0175  0877               	movf	?_modulus_func,w
  2200  0176  00B2               	movwf	_t
  2201                           
  2202                           ;Button_src.c: 295:                       if (p == 1){
  2203  0177  0322               	decf	_p,w
  2204  0178  0423               	iorwf	_p+1,w
  2205  0179  1D03               	btfss	3,2
  2206  017A  2994               	goto	l4468
  2207                           
  2208                           ;Button_src.c: 296:                         w = incrementor(w,t,'0');
  2209  017B  0831               	movf	_w+1,w
  2210  017C  00E1               	movwf	incrementor@upper_val+1
  2211  017D  0830               	movf	_w,w
  2212  017E  00E0               	movwf	incrementor@upper_val
  2213  017F  0833               	movf	_t+1,w
  2214  0180  00E3               	movwf	incrementor@lower_val+1
  2215  0181  0832               	movf	_t,w
  2216  0182  00E2               	movwf	incrementor@lower_val
  2217  0183  3030               	movlw	48
  2218  0184  00E5               	movwf	??_time_settings
  2219  0185  0865               	movf	??_time_settings,w
  2220  0186  00E4               	movwf	incrementor@z
  2221  0187  160A  118A  2480  120A  118A  	fcall	_incrementor
  2222  018C  00E6               	movwf	??_time_settings+1
  2223  018D  01E7               	clrf	??_time_settings+2
  2224  018E  0866               	movf	??_time_settings+1,w
  2225  018F  00B0               	movwf	_w
  2226  0190  0867               	movf	??_time_settings+2,w
  2227  0191  00B1               	movwf	_w+1
  2228                           
  2229                           ;Button_src.c: 297:                         p = 0;
  2230  0192  01A2               	clrf	_p
  2231  0193  01A3               	clrf	_p+1
  2232  0194                     l4468:	
  2233                           
  2234                           ;Button_src.c: 299:                     if (t == 9){
  2235  0194  3009               	movlw	9
  2236  0195  0632               	xorwf	_t,w
  2237  0196  0433               	iorwf	_t+1,w
  2238  0197  1D03               	btfss	3,2
  2239  0198  299D               	goto	l4472
  2240                           
  2241                           ;Button_src.c: 300:                         p = 1;
  2242  0199  3001               	movlw	1
  2243  019A  00A2               	movwf	_p
  2244  019B  3000               	movlw	0
  2245  019C  00A3               	movwf	_p+1
  2246  019D                     l4472:	
  2247                           
  2248                           ;Button_src.c: 302:                     w = incrementor(w,t,'9');
  2249  019D  0831               	movf	_w+1,w
  2250  019E  00E1               	movwf	incrementor@upper_val+1
  2251  019F  0830               	movf	_w,w
  2252  01A0  00E0               	movwf	incrementor@upper_val
  2253  01A1  0833               	movf	_t+1,w
  2254  01A2  00E3               	movwf	incrementor@lower_val+1
  2255  01A3  0832               	movf	_t,w
  2256  01A4  00E2               	movwf	incrementor@lower_val
  2257  01A5  3039               	movlw	57
  2258  01A6  00E5               	movwf	??_time_settings
  2259  01A7  0865               	movf	??_time_settings,w
  2260  01A8  00E4               	movwf	incrementor@z
  2261  01A9  160A  118A  2480  120A  118A  	fcall	_incrementor
  2262  01AE  00E6               	movwf	??_time_settings+1
  2263  01AF  01E7               	clrf	??_time_settings+2
  2264  01B0  0866               	movf	??_time_settings+1,w
  2265  01B1  00B0               	movwf	_w
  2266  01B2  0867               	movf	??_time_settings+2,w
  2267  01B3  00B1               	movwf	_w+1
  2268                           
  2269                           ;Button_src.c: 303:                     if(c == (0x59 + 1)){
  2270  01B4  305A               	movlw	90
  2271  01B5  0648               	xorwf	_c,w
  2272  01B6  1903               	btfsc	3,2
  2273                           
  2274                           ;Button_src.c: 304:                         c = 0x00;
  2275  01B7  01C8               	clrf	_c
  2276                           
  2277                           ;Button_src.c: 306:                     if(w == 6){
  2278  01B8  3006               	movlw	6
  2279  01B9  0630               	xorwf	_w,w
  2280  01BA  0431               	iorwf	_w+1,w
  2281  01BB  1D03               	btfss	3,2
  2282  01BC  29C1               	goto	l4482
  2283                           
  2284                           ;Button_src.c: 307:                         w = 0;
  2285  01BD  01B0               	clrf	_w
  2286  01BE  01B1               	clrf	_w+1
  2287                           
  2288                           ;Button_src.c: 308:                         t = 0;
  2289  01BF  01B2               	clrf	_t
  2290  01C0  01B3               	clrf	_t+1
  2291  01C1                     l4482:	
  2292                           
  2293                           ;Button_src.c: 310:                     button_delay();
  2294  01C1  160A  118A  23A5  120A  118A  	fcall	_button_delay
  2295  01C6                     l4484:	
  2296                           
  2297                           ;Button_src.c: 313:              write_cmd(0x88);
  2298  01C6  3088               	movlw	136
  2299  01C7  120A  158A  2001  120A  118A  	fcall	_write_cmd
  2300                           
  2301                           ;Button_src.c: 314:               if(stats==0){
  2302  01CC  0824               	movf	_stats,w
  2303  01CD  0425               	iorwf	_stats+1,w
  2304  01CE  1D03               	btfss	3,2
  2305  01CF  29D8               	goto	l4490
  2306                           
  2307                           ;Button_src.c: 315:                   table[2] = prev_hex_hours;
  2308  01D0  0842               	movf	_prev_hex_hours,w
  2309  01D1  00E5               	movwf	??_time_settings
  2310  01D2  0865               	movf	??_time_settings,w
  2311  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2312  01D4  00B5               	movwf	(_table^(0+128)+2)
  2313                           
  2314                           ;Button_src.c: 316:                   table[1] = prev_hex_mins;
  2315  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2316  01D6  0841               	movf	_prev_hex_mins,w
  2317  01D7  29E3               	goto	L1
  2318  01D8                     l4490:	
  2319                           ;Button_src.c: 317:               }
  2320                           
  2321  01D8  0324               	decf	_stats,w
  2322  01D9  0425               	iorwf	_stats+1,w
  2323  01DA  1D03               	btfss	3,2
  2324  01DB  29E7               	goto	l4494
  2325                           
  2326                           ;Button_src.c: 319:               {;Button_src.c: 320:                  table[2]= a;
  2327  01DC  084A               	movf	_a,w
  2328  01DD  00E5               	movwf	??_time_settings
  2329  01DE  0865               	movf	??_time_settings,w
  2330  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2331  01E0  00B5               	movwf	(_table^(0+128)+2)
  2332                           
  2333                           ;Button_src.c: 321:                  table[1] = c;
  2334  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2335  01E2  0848               	movf	_c,w
  2336  01E3                     L1:	
  2337  01E3  00E5               	movwf	??_time_settings
  2338  01E4  0865               	movf	??_time_settings,w
  2339  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2340  01E6  00B4               	movwf	(_table^(0+128)+1)
  2341  01E7                     l4494:	
  2342                           
  2343                           ;Button_src.c: 325:                     a = time_date_delimiter(a,0x11,'9',4);
  2344  01E7  3011               	movlw	17
  2345  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2346  01E9  00E5               	movwf	??_time_settings
  2347  01EA  0865               	movf	??_time_settings,w
  2348  01EB  00F0               	movwf	time_date_delimiter@hex
  2349  01EC  3039               	movlw	57
  2350  01ED  00E6               	movwf	??_time_settings+1
  2351  01EE  0866               	movf	??_time_settings+1,w
  2352  01EF  00F1               	movwf	time_date_delimiter@limiter
  2353  01F0  3004               	movlw	4
  2354  01F1  00F2               	movwf	time_date_delimiter@type
  2355  01F2  3000               	movlw	0
  2356  01F3  00F3               	movwf	time_date_delimiter@type+1
  2357  01F4  084A               	movf	_a,w
  2358  01F5  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2359  01FA  00E7               	movwf	??_time_settings+2
  2360  01FB  0867               	movf	??_time_settings+2,w
  2361  01FC  00CA               	movwf	_a
  2362                           
  2363                           ;Button_src.c: 326:                     a = time_date_delimiter(a,0x21,'J',4);
  2364  01FD  3021               	movlw	33
  2365  01FE  00E5               	movwf	??_time_settings
  2366  01FF  0865               	movf	??_time_settings,w
  2367  0200  00F0               	movwf	time_date_delimiter@hex
  2368  0201  304A               	movlw	74
  2369  0202  00E6               	movwf	??_time_settings+1
  2370  0203  0866               	movf	??_time_settings+1,w
  2371  0204  00F1               	movwf	time_date_delimiter@limiter
  2372  0205  3004               	movlw	4
  2373  0206  00F2               	movwf	time_date_delimiter@type
  2374  0207  3000               	movlw	0
  2375  0208  00F3               	movwf	time_date_delimiter@type+1
  2376  0209  084A               	movf	_a,w
  2377  020A  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2378  020F  00E7               	movwf	??_time_settings+2
  2379  0210  0867               	movf	??_time_settings+2,w
  2380  0211  00CA               	movwf	_a
  2381                           
  2382                           ;Button_src.c: 328:                     c = time_date_delimiter(c,0x11,'9',5);
  2383  0212  3011               	movlw	17
  2384  0213  00E5               	movwf	??_time_settings
  2385  0214  0865               	movf	??_time_settings,w
  2386  0215  00F0               	movwf	time_date_delimiter@hex
  2387  0216  3039               	movlw	57
  2388  0217  00E6               	movwf	??_time_settings+1
  2389  0218  0866               	movf	??_time_settings+1,w
  2390  0219  00F1               	movwf	time_date_delimiter@limiter
  2391  021A  3005               	movlw	5
  2392  021B  00F2               	movwf	time_date_delimiter@type
  2393  021C  3000               	movlw	0
  2394  021D  00F3               	movwf	time_date_delimiter@type+1
  2395  021E  0848               	movf	_c,w
  2396  021F  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2397  0224  00E7               	movwf	??_time_settings+2
  2398  0225  0867               	movf	??_time_settings+2,w
  2399  0226  00C8               	movwf	_c
  2400                           
  2401                           ;Button_src.c: 329:                     c = time_date_delimiter(c,0x21,'J',5);
  2402  0227  3021               	movlw	33
  2403  0228  00E5               	movwf	??_time_settings
  2404  0229  0865               	movf	??_time_settings,w
  2405  022A  00F0               	movwf	time_date_delimiter@hex
  2406  022B  304A               	movlw	74
  2407  022C  00E6               	movwf	??_time_settings+1
  2408  022D  0866               	movf	??_time_settings+1,w
  2409  022E  00F1               	movwf	time_date_delimiter@limiter
  2410  022F  3005               	movlw	5
  2411  0230  00F2               	movwf	time_date_delimiter@type
  2412  0231  3000               	movlw	0
  2413  0232  00F3               	movwf	time_date_delimiter@type+1
  2414  0233  0848               	movf	_c,w
  2415  0234  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2416  0239  00E7               	movwf	??_time_settings+2
  2417  023A  0867               	movf	??_time_settings+2,w
  2418  023B  00C8               	movwf	_c
  2419                           
  2420                           ;Button_src.c: 330:                     c = time_date_delimiter(c,0x31,'Y',5);
  2421  023C  3031               	movlw	49
  2422  023D  00E5               	movwf	??_time_settings
  2423  023E  0865               	movf	??_time_settings,w
  2424  023F  00F0               	movwf	time_date_delimiter@hex
  2425  0240  3059               	movlw	89
  2426  0241  00E6               	movwf	??_time_settings+1
  2427  0242  0866               	movf	??_time_settings+1,w
  2428  0243  00F1               	movwf	time_date_delimiter@limiter
  2429  0244  3005               	movlw	5
  2430  0245  00F2               	movwf	time_date_delimiter@type
  2431  0246  3000               	movlw	0
  2432  0247  00F3               	movwf	time_date_delimiter@type+1
  2433  0248  0848               	movf	_c,w
  2434  0249  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2435  024E  00E7               	movwf	??_time_settings+2
  2436  024F  0867               	movf	??_time_settings+2,w
  2437  0250  00C8               	movwf	_c
  2438                           
  2439                           ;Button_src.c: 331:                     c = time_date_delimiter(c,0x41,'j',5);
  2440  0251  3041               	movlw	65
  2441  0252  00E5               	movwf	??_time_settings
  2442  0253  0865               	movf	??_time_settings,w
  2443  0254  00F0               	movwf	time_date_delimiter@hex
  2444  0255  306A               	movlw	106
  2445  0256  00E6               	movwf	??_time_settings+1
  2446  0257  0866               	movf	??_time_settings+1,w
  2447  0258  00F1               	movwf	time_date_delimiter@limiter
  2448  0259  3005               	movlw	5
  2449  025A  00F2               	movwf	time_date_delimiter@type
  2450  025B  3000               	movlw	0
  2451  025C  00F3               	movwf	time_date_delimiter@type+1
  2452  025D  0848               	movf	_c,w
  2453  025E  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2454  0263  00E7               	movwf	??_time_settings+2
  2455  0264  0867               	movf	??_time_settings+2,w
  2456  0265  00C8               	movwf	_c
  2457                           
  2458                           ;Button_src.c: 332:                     c = time_date_delimiter(c,0x51,'z',5);
  2459  0266  3051               	movlw	81
  2460  0267  00E5               	movwf	??_time_settings
  2461  0268  0865               	movf	??_time_settings,w
  2462  0269  00F0               	movwf	time_date_delimiter@hex
  2463  026A  307A               	movlw	122
  2464  026B  00E6               	movwf	??_time_settings+1
  2465  026C  0866               	movf	??_time_settings+1,w
  2466  026D  00F1               	movwf	time_date_delimiter@limiter
  2467  026E  3005               	movlw	5
  2468  026F  00F2               	movwf	time_date_delimiter@type
  2469  0270  3000               	movlw	0
  2470  0271  00F3               	movwf	time_date_delimiter@type+1
  2471  0272  0848               	movf	_c,w
  2472  0273  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  2473  0278  00E7               	movwf	??_time_settings+2
  2474  0279  0867               	movf	??_time_settings+2,w
  2475  027A  00C8               	movwf	_c
  2476                           
  2477                           ;Button_src.c: 334:                   RC0 = 0;
  2478  027B  1007               	bcf	7,0	;volatile
  2479                           
  2480                           ;Button_src.c: 335:                   RC1 = 1;
  2481  027C  1487               	bsf	7,1	;volatile
  2482                           
  2483                           ;Button_src.c: 336:                   RC2 = 1;
  2484  027D  1507               	bsf	7,2	;volatile
  2485                           
  2486                           ;Button_src.c: 337:                   RC3 = 1;
  2487  027E  1587               	bsf	7,3	;volatile
  2488                           
  2489                           ;Button_src.c: 338:                     if (RC6 == 0 ){
  2490  027F  1B07               	btfsc	7,6	;volatile
  2491  0280  2A95               	goto	l759
  2492                           
  2493                           ;Button_src.c: 339:                           write_cmd(0x1);
  2494  0281  3001               	movlw	1
  2495  0282  120A  158A  2001  120A  118A  	fcall	_write_cmd
  2496                           
  2497                           ;Button_src.c: 340:                           a = 0x00;
  2498  0287  01CA               	clrf	_a
  2499                           
  2500                           ;Button_src.c: 341:                           c = 0x00;
  2501  0288  01C8               	clrf	_c
  2502                           
  2503                           ;Button_src.c: 342:                           x = 0;
  2504  0289  01AE               	clrf	_x
  2505  028A  01AF               	clrf	_x+1
  2506                           
  2507                           ;Button_src.c: 343:                           y = 0;
  2508  028B  01AC               	clrf	_y
  2509  028C  01AD               	clrf	_y+1
  2510                           
  2511                           ;Button_src.c: 344:                           w = 0;
  2512  028D  01B0               	clrf	_w
  2513  028E  01B1               	clrf	_w+1
  2514                           
  2515                           ;Button_src.c: 345:                           t = 0;
  2516  028F  01B2               	clrf	_t
  2517  0290  01B3               	clrf	_t+1
  2518                           
  2519                           ;Button_src.c: 346:                           set_time();
  2520  0291  160A  118A  24CA   	fcall	_set_time
  2521  0294  0008               	return
  2522  0295                     l759:	
  2523                           ;Button_src.c: 348:                             }
  2524                           
  2525                           
  2526                           ;Button_src.c: 349:                   RC0 = 1;
  2527  0295  1407               	bsf	7,0	;volatile
  2528                           
  2529                           ;Button_src.c: 350:                   RC1 = 1;
  2530  0296  1487               	bsf	7,1	;volatile
  2531                           
  2532                           ;Button_src.c: 351:                   RC2 = 0;
  2533  0297  1107               	bcf	7,2	;volatile
  2534                           
  2535                           ;Button_src.c: 352:                   RC3 = 1;
  2536  0298  1587               	bsf	7,3	;volatile
  2537                           
  2538                           ;Button_src.c: 353:                   z = modulus_func(z,2);
  2539  0299  082B               	movf	_z+1,w
  2540  029A  00F8               	movwf	modulus_func@x+1
  2541  029B  082A               	movf	_z,w
  2542  029C  00F7               	movwf	modulus_func@x
  2543  029D  3002               	movlw	2
  2544  029E  00F9               	movwf	modulus_func@y
  2545  029F  3000               	movlw	0
  2546  02A0  00FA               	movwf	modulus_func@y+1
  2547  02A1  160A  118A  2370  120A  118A  	fcall	_modulus_func
  2548  02A6  0878               	movf	?_modulus_func+1,w
  2549  02A7  00AB               	movwf	_z+1
  2550  02A8  0877               	movf	?_modulus_func,w
  2551  02A9  00AA               	movwf	_z
  2552                           
  2553                           ;Button_src.c: 354:                   if(RC4 == 0 && z ==0){
  2554  02AA  1A07               	btfsc	7,4	;volatile
  2555  02AB  2AE5               	goto	l4548
  2556  02AC  082A               	movf	_z,w
  2557  02AD  042B               	iorwf	_z+1,w
  2558  02AE  1D03               	btfss	3,2
  2559  02AF  2AE5               	goto	l4548
  2560                           
  2561                           ;Button_src.c: 355:                       write_cmd(0x90);
  2562  02B0  3090               	movlw	144
  2563  02B1  120A  158A  2001  120A  118A  	fcall	_write_cmd
  2564                           
  2565                           ;Button_src.c: 356:                       write_char('H');
  2566  02B6  3048               	movlw	72
  2567  02B7  160A  118A  23E1  120A  118A  	fcall	_write_char
  2568                           
  2569                           ;Button_src.c: 357:                       write_char('o');
  2570  02BC  306F               	movlw	111
  2571  02BD  160A  118A  23E1  120A  118A  	fcall	_write_char
  2572                           
  2573                           ;Button_src.c: 358:                       write_char('u');
  2574  02C2  3075               	movlw	117
  2575  02C3  160A  118A  23E1  120A  118A  	fcall	_write_char
  2576                           
  2577                           ;Button_src.c: 359:                       write_char('r');
  2578  02C8  3072               	movlw	114
  2579  02C9  160A  118A  23E1  120A  118A  	fcall	_write_char
  2580                           
  2581                           ;Button_src.c: 360:                       write_char(':');
  2582  02CE  303A               	movlw	58
  2583  02CF  160A  118A  23E1  120A  118A  	fcall	_write_char
  2584                           
  2585                           ;Button_src.c: 361:                       b = 'x';
  2586  02D4  3078               	movlw	120
  2587  02D5  00E5               	movwf	??_time_settings
  2588  02D6  0865               	movf	??_time_settings,w
  2589  02D7  00C9               	movwf	_b
  2590                           
  2591                           ;Button_src.c: 362:                       button_delay();
  2592  02D8  160A  118A  23A5  120A  118A  	fcall	_button_delay
  2593                           
  2594                           ;Button_src.c: 363:                       z++;
  2595  02DD  3001               	movlw	1
  2596  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2597  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2598  02E0  07AA               	addwf	_z,f
  2599  02E1  1803               	skipnc
  2600  02E2  0AAB               	incf	_z+1,f
  2601  02E3  3000               	movlw	0
  2602  02E4  07AB               	addwf	_z+1,f
  2603  02E5                     l4548:	
  2604                           
  2605                           ;Button_src.c: 365:                   RC0 = 1;
  2606  02E5  1407               	bsf	7,0	;volatile
  2607                           
  2608                           ;Button_src.c: 366:                   RC1 = 1;
  2609  02E6  1487               	bsf	7,1	;volatile
  2610                           
  2611                           ;Button_src.c: 367:                   RC2 = 0;
  2612  02E7  1107               	bcf	7,2	;volatile
  2613                           
  2614                           ;Button_src.c: 368:                   RC3 = 1;
  2615  02E8  1587               	bsf	7,3	;volatile
  2616                           
  2617                           ;Button_src.c: 370:                   if(RC4 == 0&& z ==1){
  2618  02E9  1A07               	btfsc	7,4	;volatile
  2619  02EA  2B22               	goto	l762
  2620  02EB  032A               	decf	_z,w
  2621  02EC  042B               	iorwf	_z+1,w
  2622  02ED  1D03               	btfss	3,2
  2623  02EE  2B22               	goto	l762
  2624                           
  2625                           ;Button_src.c: 371:                     z++;
  2626  02EF  3001               	movlw	1
  2627  02F0  07AA               	addwf	_z,f
  2628  02F1  1803               	skipnc
  2629  02F2  0AAB               	incf	_z+1,f
  2630  02F3  3000               	movlw	0
  2631  02F4  07AB               	addwf	_z+1,f
  2632                           
  2633                           ;Button_src.c: 372:                     button_delay();
  2634  02F5  160A  118A  23A5  120A  118A  	fcall	_button_delay
  2635                           
  2636                           ;Button_src.c: 373:                     write_cmd(0x90);
  2637  02FA  3090               	movlw	144
  2638  02FB  120A  158A  2001  120A  118A  	fcall	_write_cmd
  2639                           
  2640                           ;Button_src.c: 374:                     write_char('M');
  2641  0300  304D               	movlw	77
  2642  0301  160A  118A  23E1  120A  118A  	fcall	_write_char
  2643                           
  2644                           ;Button_src.c: 375:                     write_char('i');
  2645  0306  3069               	movlw	105
  2646  0307  160A  118A  23E1  120A  118A  	fcall	_write_char
  2647                           
  2648                           ;Button_src.c: 376:                     write_char('n');
  2649  030C  306E               	movlw	110
  2650  030D  160A  118A  23E1  120A  118A  	fcall	_write_char
  2651                           
  2652                           ;Button_src.c: 377:                     write_char('s');
  2653  0312  3073               	movlw	115
  2654  0313  160A  118A  23E1  120A  118A  	fcall	_write_char
  2655                           
  2656                           ;Button_src.c: 378:                     write_char(':');
  2657  0318  303A               	movlw	58
  2658  0319  160A  118A  23E1  120A  118A  	fcall	_write_char
  2659                           
  2660                           ;Button_src.c: 379:                     b = 'y';
  2661  031E  3079               	movlw	121
  2662  031F  00E5               	movwf	??_time_settings
  2663  0320  0865               	movf	??_time_settings,w
  2664  0321  00C9               	movwf	_b
  2665  0322                     l762:	
  2666                           ;Button_src.c: 380:                   }
  2667                           
  2668                           
  2669                           ;Button_src.c: 381:                    write_cmd(0x88);
  2670  0322  3088               	movlw	136
  2671  0323  120A  158A  2001  120A  118A  	fcall	_write_cmd
  2672                           
  2673                           ;Button_src.c: 385:                   RC0 = 1;
  2674  0328  1407               	bsf	7,0	;volatile
  2675                           
  2676                           ;Button_src.c: 386:                   RC1 = 1;
  2677  0329  1487               	bsf	7,1	;volatile
  2678                           
  2679                           ;Button_src.c: 387:                   RC2 = 0;
  2680  032A  1107               	bcf	7,2	;volatile
  2681                           
  2682                           ;Button_src.c: 388:                   RC3 = 1;
  2683  032B  1587               	bsf	7,3	;volatile
  2684                           
  2685                           ;Button_src.c: 390:              write_cmd(0x88);
  2686  032C  3088               	movlw	136
  2687  032D  120A  158A  2001  120A  118A  	fcall	_write_cmd
  2688                           
  2689                           ;Button_src.c: 391:              write_char('T');
  2690  0332  3054               	movlw	84
  2691  0333  160A  118A  23E1  120A  118A  	fcall	_write_char
  2692                           
  2693                           ;Button_src.c: 392:              write_char('i');
  2694  0338  3069               	movlw	105
  2695  0339  160A  118A  23E1  120A  118A  	fcall	_write_char
  2696                           
  2697                           ;Button_src.c: 393:              write_char('m');
  2698  033E  306D               	movlw	109
  2699  033F  160A  118A  23E1  120A  118A  	fcall	_write_char
  2700                           
  2701                           ;Button_src.c: 394:              write_char('e');
  2702  0344  3065               	movlw	101
  2703  0345  160A  118A  23E1  120A  118A  	fcall	_write_char
  2704                           
  2705                           ;Button_src.c: 395:              write_char(':');
  2706  034A  303A               	movlw	58
  2707  034B  160A  118A  23E1  120A  118A  	fcall	_write_char
  2708                           
  2709                           ;Button_src.c: 396:              write_char(y + '0');
  2710  0350  082C               	movf	_y,w
  2711  0351  3E30               	addlw	48
  2712  0352  160A  118A  23E1  120A  118A  	fcall	_write_char
  2713                           
  2714                           ;Button_src.c: 397:              write_char(x + '0');
  2715  0357  082E               	movf	_x,w
  2716  0358  3E30               	addlw	48
  2717  0359  160A  118A  23E1  120A  118A  	fcall	_write_char
  2718                           
  2719                           ;Button_src.c: 398:              write_char(':');
  2720  035E  303A               	movlw	58
  2721  035F  160A  118A  23E1  120A  118A  	fcall	_write_char
  2722                           
  2723                           ;Button_src.c: 399:              write_char(w + '0');
  2724  0364  0830               	movf	_w,w
  2725  0365  3E30               	addlw	48
  2726  0366  160A  118A  23E1  120A  118A  	fcall	_write_char
  2727                           
  2728                           ;Button_src.c: 400:              write_char(t + '0');
  2729  036B  0832               	movf	_t,w
  2730  036C  3E30               	addlw	48
  2731  036D  160A  118A  23E1  120A  118A  	fcall	_write_char
  2732                           
  2733                           ;Button_src.c: 402:             RC0 = 0;
  2734  0372  1007               	bcf	7,0	;volatile
  2735                           
  2736                           ;Button_src.c: 403:             RC1 = 1;
  2737  0373  1487               	bsf	7,1	;volatile
  2738                           
  2739                           ;Button_src.c: 404:             RC2 = 1;
  2740  0374  1507               	bsf	7,2	;volatile
  2741                           
  2742                           ;Button_src.c: 405:             RC3 = 1;
  2743  0375  1587               	bsf	7,3	;volatile
  2744                           
  2745                           ;Button_src.c: 406:             if (RC7 == 0 ){
  2746  0376  1B87               	btfsc	7,7	;volatile
  2747  0377  287D               	goto	l742
  2748                           
  2749                           ;Button_src.c: 407:             a = 0x00;
  2750  0378  01CA               	clrf	_a
  2751                           
  2752                           ;Button_src.c: 408:             c = 0x00;
  2753  0379  01C8               	clrf	_c
  2754                           
  2755                           ;Button_src.c: 409:             x = 0;
  2756  037A  01AE               	clrf	_x
  2757  037B  01AF               	clrf	_x+1
  2758                           
  2759                           ;Button_src.c: 410:             y = 0;
  2760  037C  01AC               	clrf	_y
  2761  037D  01AD               	clrf	_y+1
  2762                           
  2763                           ;Button_src.c: 411:             w = 0;
  2764  037E  01B0               	clrf	_w
  2765  037F  01B1               	clrf	_w+1
  2766                           
  2767                           ;Button_src.c: 412:             t = 0;
  2768  0380  01B2               	clrf	_t
  2769  0381  01B3               	clrf	_t+1
  2770                           
  2771                           ;Button_src.c: 413:             write_cmd(0x1);
  2772  0382  3001               	movlw	1
  2773  0383  120A  158A  2001   	fcall	_write_cmd
  2774                           
  2775                           ;Button_src.c: 414:             break;
  2776  0386  0008               	return
  2777  0387                     __end_of_time_settings:	
  2778                           
  2779                           	psect	text2
  2780  0D7F                     __ptext2:	
  2781 ;; *************** function _thermometer_threshhold_settings *****************
  2782 ;; Defined at:
  2783 ;;		line 23 in file "Button_src.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 300/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2797 ;;      Params:         0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0
  2799 ;;      Temps:          0       3       0       0       0
  2800 ;;      Totals:         0       3       0       0       0
  2801 ;;Total ram usage:        3 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    3
  2804 ;; This function calls:
  2805 ;;		_button_delay
  2806 ;;		_incrementor
  2807 ;;		_modulus_func
  2808 ;;		_time_date_hex_terminator
  2809 ;;		_write_char
  2810 ;;		_write_cmd
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           
  2817                           ;psect for function _thermometer_threshhold_settings
  2818  0D7F                     _thermometer_threshhold_settings:	
  2819                           
  2820                           ;Button_src.c: 24:  RC0 = 1;
  2821                           
  2822                           ;incstack = 0
  2823                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2824  0D7F  1407               	bsf	7,0	;volatile
  2825                           
  2826                           ;Button_src.c: 25:  RC1 = 0;
  2827  0D80  1087               	bcf	7,1	;volatile
  2828                           
  2829                           ;Button_src.c: 26:  RC2 = 1;
  2830  0D81  1507               	bsf	7,2	;volatile
  2831                           
  2832                           ;Button_src.c: 27:  RC3 = 1;
  2833  0D82  1587               	bsf	7,3	;volatile
  2834                           
  2835                           ;Button_src.c: 28:   if (RC4 == 0){
  2836  0D83  1A07               	btfsc	7,4	;volatile
  2837  0D84  0008               	return
  2838                           
  2839                           ;Button_src.c: 29:       write_cmd(0x1);
  2840  0D85  3001               	movlw	1
  2841  0D86  120A  158A  2001  120A  158A  	fcall	_write_cmd
  2842  0D8B                     l729:	
  2843                           ;Button_src.c: 30:       for(;;){
  2844                           
  2845                           
  2846                           ;Button_src.c: 31:             write_cmd(0x80);
  2847  0D8B  3080               	movlw	128
  2848  0D8C  120A  158A  2001  120A  158A  	fcall	_write_cmd
  2849                           
  2850                           ;Button_src.c: 32:             write_char(' ');
  2851  0D91  3020               	movlw	32
  2852  0D92  160A  118A  23E1  120A  158A  	fcall	_write_char
  2853                           
  2854                           ;Button_src.c: 33:             write_char(' ');
  2855  0D97  3020               	movlw	32
  2856  0D98  160A  118A  23E1  120A  158A  	fcall	_write_char
  2857                           
  2858                           ;Button_src.c: 34:             write_char(' ');
  2859  0D9D  3020               	movlw	32
  2860  0D9E  160A  118A  23E1  120A  158A  	fcall	_write_char
  2861                           
  2862                           ;Button_src.c: 35:             write_char(' ');
  2863  0DA3  3020               	movlw	32
  2864  0DA4  160A  118A  23E1  120A  158A  	fcall	_write_char
  2865                           
  2866                           ;Button_src.c: 36:             write_char(' ');
  2867  0DA9  3020               	movlw	32
  2868  0DAA  160A  118A  23E1  120A  158A  	fcall	_write_char
  2869                           
  2870                           ;Button_src.c: 37:             write_char(' ');
  2871  0DAF  3020               	movlw	32
  2872  0DB0  160A  118A  23E1  120A  158A  	fcall	_write_char
  2873                           
  2874                           ;Button_src.c: 38:             write_char(' ');
  2875  0DB5  3020               	movlw	32
  2876  0DB6  160A  118A  23E1  120A  158A  	fcall	_write_char
  2877                           
  2878                           ;Button_src.c: 39:             write_char(' ');
  2879  0DBB  3020               	movlw	32
  2880  0DBC  160A  118A  23E1  120A  158A  	fcall	_write_char
  2881                           
  2882                           ;Button_src.c: 40:             write_char(' ');
  2883  0DC1  3020               	movlw	32
  2884  0DC2  160A  118A  23E1  120A  158A  	fcall	_write_char
  2885                           
  2886                           ;Button_src.c: 42:             write_cmd(0x90);
  2887  0DC7  3090               	movlw	144
  2888  0DC8  120A  158A  2001  120A  158A  	fcall	_write_cmd
  2889                           
  2890                           ;Button_src.c: 43:             write_char('C');
  2891  0DCD  3043               	movlw	67
  2892  0DCE  160A  118A  23E1  120A  158A  	fcall	_write_char
  2893                           
  2894                           ;Button_src.c: 44:             write_char('u');
  2895  0DD3  3075               	movlw	117
  2896  0DD4  160A  118A  23E1  120A  158A  	fcall	_write_char
  2897                           
  2898                           ;Button_src.c: 45:             write_char('r');
  2899  0DD9  3072               	movlw	114
  2900  0DDA  160A  118A  23E1  120A  158A  	fcall	_write_char
  2901                           
  2902                           ;Button_src.c: 46:             write_char('r');
  2903  0DDF  3072               	movlw	114
  2904  0DE0  160A  118A  23E1  120A  158A  	fcall	_write_char
  2905                           
  2906                           ;Button_src.c: 47:             write_char('e');
  2907  0DE5  3065               	movlw	101
  2908  0DE6  160A  118A  23E1  120A  158A  	fcall	_write_char
  2909                           
  2910                           ;Button_src.c: 48:             write_char('n');
  2911  0DEB  306E               	movlw	110
  2912  0DEC  160A  118A  23E1  120A  158A  	fcall	_write_char
  2913                           
  2914                           ;Button_src.c: 49:             write_char('t');
  2915  0DF1  3074               	movlw	116
  2916  0DF2  160A  118A  23E1  120A  158A  	fcall	_write_char
  2917                           
  2918                           ;Button_src.c: 50:             write_char(':');
  2919  0DF7  303A               	movlw	58
  2920  0DF8  160A  118A  23E1  120A  158A  	fcall	_write_char
  2921                           
  2922                           ;Button_src.c: 53:             write_char(var1 + '0');
  2923  0DFD  084F               	movf	_var1,w
  2924  0DFE  3E30               	addlw	48
  2925  0DFF  160A  118A  23E1  120A  158A  	fcall	_write_char
  2926                           
  2927                           ;Button_src.c: 54:             write_char(var2 + '0');
  2928  0E04  084E               	movf	_var2,w
  2929  0E05  3E30               	addlw	48
  2930  0E06  160A  118A  23E1  120A  158A  	fcall	_write_char
  2931                           
  2932                           ;Button_src.c: 57:             RC0 = 1;
  2933  0E0B  1407               	bsf	7,0	;volatile
  2934                           
  2935                           ;Button_src.c: 58:             RC1 = 0;
  2936  0E0C  1087               	bcf	7,1	;volatile
  2937                           
  2938                           ;Button_src.c: 59:             RC2 = 1;
  2939  0E0D  1507               	bsf	7,2	;volatile
  2940                           
  2941                           ;Button_src.c: 60:             RC3 = 1;
  2942  0E0E  1587               	bsf	7,3	;volatile
  2943                           
  2944                           ;Button_src.c: 62:             if(RC4 == 0 && b =='x'){
  2945  0E0F  1A07               	btfsc	7,4	;volatile
  2946  0E10  2E59               	goto	l3994
  2947  0E11  3078               	movlw	120
  2948  0E12  0649               	xorwf	_b,w
  2949  0E13  1D03               	btfss	3,2
  2950  0E14  2E59               	goto	l3994
  2951                           
  2952                           ;Button_src.c: 63:                     a++;
  2953  0E15  3001               	movlw	1
  2954  0E16  00E5               	movwf	??_thermometer_threshhold_settings
  2955  0E17  0865               	movf	??_thermometer_threshhold_settings,w
  2956  0E18  07CA               	addwf	_a,f
  2957                           
  2958                           ;Button_src.c: 64:                     x++ ;
  2959  0E19  3001               	movlw	1
  2960  0E1A  07AE               	addwf	_x,f
  2961  0E1B  1803               	skipnc
  2962  0E1C  0AAF               	incf	_x+1,f
  2963  0E1D  3000               	movlw	0
  2964  0E1E  07AF               	addwf	_x+1,f
  2965                           
  2966                           ;Button_src.c: 65:                     x = modulus_func(x,10);
  2967  0E1F  082F               	movf	_x+1,w
  2968  0E20  00F8               	movwf	modulus_func@x+1
  2969  0E21  082E               	movf	_x,w
  2970  0E22  00F7               	movwf	modulus_func@x
  2971  0E23  300A               	movlw	10
  2972  0E24  00F9               	movwf	modulus_func@y
  2973  0E25  3000               	movlw	0
  2974  0E26  00FA               	movwf	modulus_func@y+1
  2975  0E27  160A  118A  2370  120A  158A  	fcall	_modulus_func
  2976  0E2C  0878               	movf	?_modulus_func+1,w
  2977  0E2D  00AF               	movwf	_x+1
  2978  0E2E  0877               	movf	?_modulus_func,w
  2979  0E2F  00AE               	movwf	_x
  2980                           
  2981                           ;Button_src.c: 66:                     y = incrementor(y,x,'9');
  2982  0E30  082D               	movf	_y+1,w
  2983  0E31  00E1               	movwf	incrementor@upper_val+1
  2984  0E32  082C               	movf	_y,w
  2985  0E33  00E0               	movwf	incrementor@upper_val
  2986  0E34  082F               	movf	_x+1,w
  2987  0E35  00E3               	movwf	incrementor@lower_val+1
  2988  0E36  082E               	movf	_x,w
  2989  0E37  00E2               	movwf	incrementor@lower_val
  2990  0E38  3039               	movlw	57
  2991  0E39  00E5               	movwf	??_thermometer_threshhold_settings
  2992  0E3A  0865               	movf	??_thermometer_threshhold_settings,w
  2993  0E3B  00E4               	movwf	incrementor@z
  2994  0E3C  160A  118A  2480  120A  158A  	fcall	_incrementor
  2995  0E41  00E6               	movwf	??_thermometer_threshhold_settings+1
  2996  0E42  01E7               	clrf	??_thermometer_threshhold_settings+2
  2997  0E43  0866               	movf	??_thermometer_threshhold_settings+1,w
  2998  0E44  00AC               	movwf	_y
  2999  0E45  0867               	movf	??_thermometer_threshhold_settings+2,w
  3000  0E46  00AD               	movwf	_y+1
  3001                           
  3002                           ;Button_src.c: 68:                     a = time_date_hex_terminator(a,'T');
  3003  0E47  3054               	movlw	84
  3004  0E48  00E5               	movwf	??_thermometer_threshhold_settings
  3005  0E49  0865               	movf	??_thermometer_threshhold_settings,w
  3006  0E4A  00F0               	movwf	time_date_hex_terminator@limiter
  3007  0E4B  084A               	movf	_a,w
  3008  0E4C  160A  118A  2352  120A  158A  	fcall	_time_date_hex_terminator
  3009  0E51  00E6               	movwf	??_thermometer_threshhold_settings+1
  3010  0E52  0866               	movf	??_thermometer_threshhold_settings+1,w
  3011  0E53  00CA               	movwf	_a
  3012                           
  3013                           ;Button_src.c: 69:                     button_delay();
  3014  0E54  160A  118A  23A5  120A  158A  	fcall	_button_delay
  3015  0E59                     l3994:	
  3016                           
  3017                           ;Button_src.c: 71:             if(RC4==0 && b == 'y'){
  3018  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  3020  0E5B  1A07               	btfsc	7,4	;volatile
  3021  0E5C  2E9C               	goto	l4012
  3022  0E5D  3079               	movlw	121
  3023  0E5E  0649               	xorwf	_b,w
  3024  0E5F  1D03               	btfss	3,2
  3025  0E60  2E9C               	goto	l4012
  3026                           
  3027                           ;Button_src.c: 72:                     c++;
  3028  0E61  3001               	movlw	1
  3029  0E62  00E5               	movwf	??_thermometer_threshhold_settings
  3030  0E63  0865               	movf	??_thermometer_threshhold_settings,w
  3031  0E64  07C8               	addwf	_c,f
  3032                           
  3033                           ;Button_src.c: 73:                     t++;
  3034  0E65  3001               	movlw	1
  3035  0E66  07B2               	addwf	_t,f
  3036  0E67  1803               	skipnc
  3037  0E68  0AB3               	incf	_t+1,f
  3038  0E69  3000               	movlw	0
  3039  0E6A  07B3               	addwf	_t+1,f
  3040                           
  3041                           ;Button_src.c: 74:                     t = modulus_func(t,10);
  3042  0E6B  0833               	movf	_t+1,w
  3043  0E6C  00F8               	movwf	modulus_func@x+1
  3044  0E6D  0832               	movf	_t,w
  3045  0E6E  00F7               	movwf	modulus_func@x
  3046  0E6F  300A               	movlw	10
  3047  0E70  00F9               	movwf	modulus_func@y
  3048  0E71  3000               	movlw	0
  3049  0E72  00FA               	movwf	modulus_func@y+1
  3050  0E73  160A  118A  2370  120A  158A  	fcall	_modulus_func
  3051  0E78  0878               	movf	?_modulus_func+1,w
  3052  0E79  00B3               	movwf	_t+1
  3053  0E7A  0877               	movf	?_modulus_func,w
  3054  0E7B  00B2               	movwf	_t
  3055                           
  3056                           ;Button_src.c: 75:                     w = incrementor(w,t,'9');
  3057  0E7C  0831               	movf	_w+1,w
  3058  0E7D  00E1               	movwf	incrementor@upper_val+1
  3059  0E7E  0830               	movf	_w,w
  3060  0E7F  00E0               	movwf	incrementor@upper_val
  3061  0E80  0833               	movf	_t+1,w
  3062  0E81  00E3               	movwf	incrementor@lower_val+1
  3063  0E82  0832               	movf	_t,w
  3064  0E83  00E2               	movwf	incrementor@lower_val
  3065  0E84  3039               	movlw	57
  3066  0E85  00E5               	movwf	??_thermometer_threshhold_settings
  3067  0E86  0865               	movf	??_thermometer_threshhold_settings,w
  3068  0E87  00E4               	movwf	incrementor@z
  3069  0E88  160A  118A  2480  120A  158A  	fcall	_incrementor
  3070  0E8D  00E6               	movwf	??_thermometer_threshhold_settings+1
  3071  0E8E  01E7               	clrf	??_thermometer_threshhold_settings+2
  3072  0E8F  0866               	movf	??_thermometer_threshhold_settings+1,w
  3073  0E90  00B0               	movwf	_w
  3074  0E91  0867               	movf	??_thermometer_threshhold_settings+2,w
  3075  0E92  00B1               	movwf	_w+1
  3076                           
  3077                           ;Button_src.c: 76:                     if(c == (0x59 + 1)){
  3078  0E93  305A               	movlw	90
  3079  0E94  0648               	xorwf	_c,w
  3080  0E95  1903               	btfsc	3,2
  3081                           
  3082                           ;Button_src.c: 77:                         c = 0x00;
  3083  0E96  01C8               	clrf	_c
  3084                           
  3085                           ;Button_src.c: 79:                     button_delay();
  3086  0E97  160A  118A  23A5  120A  158A  	fcall	_button_delay
  3087  0E9C                     l4012:	
  3088                           
  3089                           ;Button_src.c: 81:             RC0 = 1;
  3090  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0E9E  1407               	bsf	7,0	;volatile
  3093                           
  3094                           ;Button_src.c: 82:             RC1 = 0;
  3095  0E9F  1087               	bcf	7,1	;volatile
  3096                           
  3097                           ;Button_src.c: 83:             RC2 = 1;
  3098  0EA0  1507               	bsf	7,2	;volatile
  3099                           
  3100                           ;Button_src.c: 84:             RC3 = 1;
  3101  0EA1  1587               	bsf	7,3	;volatile
  3102                           
  3103                           ;Button_src.c: 85:             z = modulus_func(z,2);
  3104  0EA2  082B               	movf	_z+1,w
  3105  0EA3  00F8               	movwf	modulus_func@x+1
  3106  0EA4  082A               	movf	_z,w
  3107  0EA5  00F7               	movwf	modulus_func@x
  3108  0EA6  3002               	movlw	2
  3109  0EA7  00F9               	movwf	modulus_func@y
  3110  0EA8  3000               	movlw	0
  3111  0EA9  00FA               	movwf	modulus_func@y+1
  3112  0EAA  160A  118A  2370  120A  158A  	fcall	_modulus_func
  3113  0EAF  0878               	movf	?_modulus_func+1,w
  3114  0EB0  00AB               	movwf	_z+1
  3115  0EB1  0877               	movf	?_modulus_func,w
  3116  0EB2  00AA               	movwf	_z
  3117                           
  3118                           ;Button_src.c: 86:             if(RC4 == 0 && z ==0){
  3119  0EB3  1A07               	btfsc	7,4	;volatile
  3120  0EB4  2F28               	goto	l4062
  3121  0EB5  082A               	movf	_z,w
  3122  0EB6  042B               	iorwf	_z+1,w
  3123  0EB7  1D03               	btfss	3,2
  3124  0EB8  2F28               	goto	l4062
  3125                           
  3126                           ;Button_src.c: 87:             z++;
  3127  0EB9  3001               	movlw	1
  3128  0EBA  07AA               	addwf	_z,f
  3129  0EBB  1803               	skipnc
  3130  0EBC  0AAB               	incf	_z+1,f
  3131  0EBD  3000               	movlw	0
  3132  0EBE  07AB               	addwf	_z+1,f
  3133                           
  3134                           ;Button_src.c: 88:             write_cmd(0x88);
  3135  0EBF  3088               	movlw	136
  3136  0EC0  120A  158A  2001  120A  158A  	fcall	_write_cmd
  3137                           
  3138                           ;Button_src.c: 89:             write_char('D');
  3139  0EC5  3044               	movlw	68
  3140  0EC6  160A  118A  23E1  120A  158A  	fcall	_write_char
  3141                           
  3142                           ;Button_src.c: 90:             write_char('a');
  3143  0ECB  3061               	movlw	97
  3144  0ECC  160A  118A  23E1  120A  158A  	fcall	_write_char
  3145                           
  3146                           ;Button_src.c: 91:             write_char('y');
  3147  0ED1  3079               	movlw	121
  3148  0ED2  160A  118A  23E1  120A  158A  	fcall	_write_char
  3149                           
  3150                           ;Button_src.c: 92:             write_char('_');
  3151  0ED7  305F               	movlw	95
  3152  0ED8  160A  118A  23E1  120A  158A  	fcall	_write_char
  3153                           
  3154                           ;Button_src.c: 93:             write_char('t');
  3155  0EDD  3074               	movlw	116
  3156  0EDE  160A  118A  23E1  120A  158A  	fcall	_write_char
  3157                           
  3158                           ;Button_src.c: 94:             write_char('h');
  3159  0EE3  3068               	movlw	104
  3160  0EE4  160A  118A  23E1  120A  158A  	fcall	_write_char
  3161                           
  3162                           ;Button_src.c: 95:             write_char('r');
  3163  0EE9  3072               	movlw	114
  3164  0EEA  160A  118A  23E1  120A  158A  	fcall	_write_char
  3165                           
  3166                           ;Button_src.c: 96:             write_char('e');
  3167  0EEF  3065               	movlw	101
  3168  0EF0  160A  118A  23E1  120A  158A  	fcall	_write_char
  3169                           
  3170                           ;Button_src.c: 97:             write_char('s');
  3171  0EF5  3073               	movlw	115
  3172  0EF6  160A  118A  23E1  120A  158A  	fcall	_write_char
  3173                           
  3174                           ;Button_src.c: 98:             write_char('h');
  3175  0EFB  3068               	movlw	104
  3176  0EFC  160A  118A  23E1  120A  158A  	fcall	_write_char
  3177                           
  3178                           ;Button_src.c: 99:             write_char('o');
  3179  0F01  306F               	movlw	111
  3180  0F02  160A  118A  23E1  120A  158A  	fcall	_write_char
  3181                           
  3182                           ;Button_src.c: 100:             write_char('l');
  3183  0F07  306C               	movlw	108
  3184  0F08  160A  118A  23E1  120A  158A  	fcall	_write_char
  3185                           
  3186                           ;Button_src.c: 101:             write_char('d');
  3187  0F0D  3064               	movlw	100
  3188  0F0E  160A  118A  23E1  120A  158A  	fcall	_write_char
  3189                           
  3190                           ;Button_src.c: 102:             write_char(':');
  3191  0F13  303A               	movlw	58
  3192  0F14  160A  118A  23E1  120A  158A  	fcall	_write_char
  3193                           
  3194                           ;Button_src.c: 103:             write_char(' ');
  3195  0F19  3020               	movlw	32
  3196  0F1A  160A  118A  23E1  120A  158A  	fcall	_write_char
  3197                           
  3198                           ;Button_src.c: 104:             b = 'x';
  3199  0F1F  3078               	movlw	120
  3200  0F20  00E5               	movwf	??_thermometer_threshhold_settings
  3201  0F21  0865               	movf	??_thermometer_threshhold_settings,w
  3202  0F22  00C9               	movwf	_b
  3203                           
  3204                           ;Button_src.c: 105:             button_delay();
  3205  0F23  160A  118A  23A5  120A  158A  	fcall	_button_delay
  3206  0F28                     l4062:	
  3207                           
  3208                           ;Button_src.c: 108:             RC0 = 1;
  3209  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0F2A  1407               	bsf	7,0	;volatile
  3212                           
  3213                           ;Button_src.c: 109:             RC1 = 0;
  3214  0F2B  1087               	bcf	7,1	;volatile
  3215                           
  3216                           ;Button_src.c: 110:             RC2 = 1;
  3217  0F2C  1507               	bsf	7,2	;volatile
  3218                           
  3219                           ;Button_src.c: 111:             RC3 = 1;
  3220  0F2D  1587               	bsf	7,3	;volatile
  3221                           
  3222                           ;Button_src.c: 112:             if(RC4 == 0 && z ==1){
  3223  0F2E  1A07               	btfsc	7,4	;volatile
  3224  0F2F  2FA3               	goto	l4080
  3225  0F30  032A               	decf	_z,w
  3226  0F31  042B               	iorwf	_z+1,w
  3227  0F32  1D03               	btfss	3,2
  3228  0F33  2FA3               	goto	l4080
  3229                           
  3230                           ;Button_src.c: 113:             write_cmd(0x88);
  3231  0F34  3088               	movlw	136
  3232  0F35  120A  158A  2001  120A  158A  	fcall	_write_cmd
  3233                           
  3234                           ;Button_src.c: 114:             write_char('N');
  3235  0F3A  304E               	movlw	78
  3236  0F3B  160A  118A  23E1  120A  158A  	fcall	_write_char
  3237                           
  3238                           ;Button_src.c: 115:             write_char('i');
  3239  0F40  3069               	movlw	105
  3240  0F41  160A  118A  23E1  120A  158A  	fcall	_write_char
  3241                           
  3242                           ;Button_src.c: 116:             write_char('g');
  3243  0F46  3067               	movlw	103
  3244  0F47  160A  118A  23E1  120A  158A  	fcall	_write_char
  3245                           
  3246                           ;Button_src.c: 117:             write_char('h');
  3247  0F4C  3068               	movlw	104
  3248  0F4D  160A  118A  23E1  120A  158A  	fcall	_write_char
  3249                           
  3250                           ;Button_src.c: 118:             write_char('t');
  3251  0F52  3074               	movlw	116
  3252  0F53  160A  118A  23E1  120A  158A  	fcall	_write_char
  3253                           
  3254                           ;Button_src.c: 119:             write_char('_');
  3255  0F58  305F               	movlw	95
  3256  0F59  160A  118A  23E1  120A  158A  	fcall	_write_char
  3257                           
  3258                           ;Button_src.c: 120:             write_char('h');
  3259  0F5E  3068               	movlw	104
  3260  0F5F  160A  118A  23E1  120A  158A  	fcall	_write_char
  3261                           
  3262                           ;Button_src.c: 121:             write_char('r');
  3263  0F64  3072               	movlw	114
  3264  0F65  160A  118A  23E1  120A  158A  	fcall	_write_char
  3265                           
  3266                           ;Button_src.c: 122:             write_char('e');
  3267  0F6A  3065               	movlw	101
  3268  0F6B  160A  118A  23E1  120A  158A  	fcall	_write_char
  3269                           
  3270                           ;Button_src.c: 123:             write_char('s');
  3271  0F70  3073               	movlw	115
  3272  0F71  160A  118A  23E1  120A  158A  	fcall	_write_char
  3273                           
  3274                           ;Button_src.c: 124:             write_char('h');
  3275  0F76  3068               	movlw	104
  3276  0F77  160A  118A  23E1  120A  158A  	fcall	_write_char
  3277                           
  3278                           ;Button_src.c: 125:             write_char('o');
  3279  0F7C  306F               	movlw	111
  3280  0F7D  160A  118A  23E1  120A  158A  	fcall	_write_char
  3281                           
  3282                           ;Button_src.c: 126:             write_char('l');
  3283  0F82  306C               	movlw	108
  3284  0F83  160A  118A  23E1  120A  158A  	fcall	_write_char
  3285                           
  3286                           ;Button_src.c: 127:             write_char('d');
  3287  0F88  3064               	movlw	100
  3288  0F89  160A  118A  23E1  120A  158A  	fcall	_write_char
  3289                           
  3290                           ;Button_src.c: 128:             write_char(':');
  3291  0F8E  303A               	movlw	58
  3292  0F8F  160A  118A  23E1  120A  158A  	fcall	_write_char
  3293                           
  3294                           ;Button_src.c: 129:             b = 'y';
  3295  0F94  3079               	movlw	121
  3296  0F95  00E5               	movwf	??_thermometer_threshhold_settings
  3297  0F96  0865               	movf	??_thermometer_threshhold_settings,w
  3298  0F97  00C9               	movwf	_b
  3299                           
  3300                           ;Button_src.c: 130:             z++;
  3301  0F98  3001               	movlw	1
  3302  0F99  07AA               	addwf	_z,f
  3303  0F9A  1803               	skipnc
  3304  0F9B  0AAB               	incf	_z+1,f
  3305  0F9C  3000               	movlw	0
  3306  0F9D  07AB               	addwf	_z+1,f
  3307                           
  3308                           ;Button_src.c: 131:             button_delay();
  3309  0F9E  160A  118A  23A5  120A  158A  	fcall	_button_delay
  3310  0FA3                     l4080:	
  3311                           
  3312                           ;Button_src.c: 135:             t = 0;
  3313  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  3314  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  3315  0FA5  01B2               	clrf	_t
  3316  0FA6  01B3               	clrf	_t+1
  3317                           
  3318                           ;Button_src.c: 136:             w = 0;
  3319  0FA7  01B0               	clrf	_w
  3320  0FA8  01B1               	clrf	_w+1
  3321                           
  3322                           ;Button_src.c: 137:             x = 0;
  3323  0FA9  01AE               	clrf	_x
  3324  0FAA  01AF               	clrf	_x+1
  3325                           
  3326                           ;Button_src.c: 138:             y = 0;
  3327  0FAB  01AC               	clrf	_y
  3328  0FAC  01AD               	clrf	_y+1
  3329                           
  3330                           ;Button_src.c: 139:             x = 0x00;
  3331  0FAD  01AE               	clrf	_x
  3332  0FAE  01AF               	clrf	_x+1
  3333                           
  3334                           ;Button_src.c: 196:                 RC0 = 0;
  3335  0FAF  1007               	bcf	7,0	;volatile
  3336                           
  3337                           ;Button_src.c: 197:                 RC1 = 1;
  3338  0FB0  1487               	bsf	7,1	;volatile
  3339                           
  3340                           ;Button_src.c: 198:                 RC2 = 1;
  3341  0FB1  1507               	bsf	7,2	;volatile
  3342                           
  3343                           ;Button_src.c: 199:                 RC3 = 1;
  3344  0FB2  1587               	bsf	7,3	;volatile
  3345                           
  3346                           ;Button_src.c: 200:                     if(RC6 == 0){
  3347  0FB3  1B07               	btfsc	7,6	;volatile
  3348  0FB4  2FED               	goto	l735
  3349                           
  3350                           ;Button_src.c: 201:                         var1 = w;
  3351  0FB5  0830               	movf	_w,w
  3352  0FB6  00E5               	movwf	??_thermometer_threshhold_settings
  3353  0FB7  0865               	movf	??_thermometer_threshhold_settings,w
  3354  0FB8  00CF               	movwf	_var1
  3355                           
  3356                           ;Button_src.c: 202:                         var2 = t;
  3357  0FB9  0832               	movf	_t,w
  3358  0FBA  00E5               	movwf	??_thermometer_threshhold_settings
  3359  0FBB  0865               	movf	??_thermometer_threshhold_settings,w
  3360  0FBC  00CE               	movwf	_var2
  3361                           
  3362                           ;Button_src.c: 203:                         w = 0;
  3363  0FBD  01B0               	clrf	_w
  3364  0FBE  01B1               	clrf	_w+1
  3365                           
  3366                           ;Button_src.c: 204:                         t = 0;
  3367  0FBF  01B2               	clrf	_t
  3368  0FC0  01B3               	clrf	_t+1
  3369                           
  3370                           ;Button_src.c: 205:                         x = 0;
  3371  0FC1  01AE               	clrf	_x
  3372  0FC2  01AF               	clrf	_x+1
  3373                           
  3374                           ;Button_src.c: 206:                         t = 0;
  3375  0FC3  01B2               	clrf	_t
  3376  0FC4  01B3               	clrf	_t+1
  3377                           
  3378                           ;Button_src.c: 208:                         write_cmd(0x1);
  3379  0FC5  3001               	movlw	1
  3380  0FC6  120A  158A  2001  120A  158A  	fcall	_write_cmd
  3381                           
  3382                           ;Button_src.c: 209:                         write_char('S');
  3383  0FCB  3053               	movlw	83
  3384  0FCC  160A  118A  23E1  120A  158A  	fcall	_write_char
  3385                           
  3386                           ;Button_src.c: 210:                         write_char('A');
  3387  0FD1  3041               	movlw	65
  3388  0FD2  160A  118A  23E1  120A  158A  	fcall	_write_char
  3389                           
  3390                           ;Button_src.c: 211:                         write_char('V');
  3391  0FD7  3056               	movlw	86
  3392  0FD8  160A  118A  23E1  120A  158A  	fcall	_write_char
  3393                           
  3394                           ;Button_src.c: 212:                         write_char('E');
  3395  0FDD  3045               	movlw	69
  3396  0FDE  160A  118A  23E1  120A  158A  	fcall	_write_char
  3397                           
  3398                           ;Button_src.c: 213:                         write_char('D');
  3399  0FE3  3044               	movlw	68
  3400  0FE4  160A  118A  23E1  120A  158A  	fcall	_write_char
  3401                           
  3402                           ;Button_src.c: 214:                         button_delay();
  3403  0FE9  160A  118A  23A5   	fcall	_button_delay
  3404  0FEC  0008               	return
  3405  0FED                     l735:	
  3406                           ;Button_src.c: 216:                     }
  3407                           
  3408                           
  3409                           ;Button_src.c: 217:             RC0 = 0;
  3410  0FED  1007               	bcf	7,0	;volatile
  3411                           
  3412                           ;Button_src.c: 218:             RC1 = 1;
  3413  0FEE  1487               	bsf	7,1	;volatile
  3414                           
  3415                           ;Button_src.c: 219:             RC2 = 1;
  3416  0FEF  1507               	bsf	7,2	;volatile
  3417                           
  3418                           ;Button_src.c: 220:             RC3 = 1;
  3419  0FF0  1587               	bsf	7,3	;volatile
  3420                           
  3421                           ;Button_src.c: 221:             if (RC7 == 0 ){
  3422  0FF1  1B87               	btfsc	7,7	;volatile
  3423  0FF2  2D8B               	goto	l729
  3424                           
  3425                           ;Button_src.c: 222:             write_cmd(0x1);
  3426  0FF3  3001               	movlw	1
  3427  0FF4  120A  158A  2001   	fcall	_write_cmd
  3428                           
  3429                           ;Button_src.c: 223:              w = 0;
  3430  0FF7  01B0               	clrf	_w
  3431  0FF8  01B1               	clrf	_w+1
  3432                           
  3433                           ;Button_src.c: 224:                         t = 0;
  3434  0FF9  01B2               	clrf	_t
  3435  0FFA  01B3               	clrf	_t+1
  3436                           
  3437                           ;Button_src.c: 225:                         x = 0;
  3438  0FFB  01AE               	clrf	_x
  3439  0FFC  01AF               	clrf	_x+1
  3440                           
  3441                           ;Button_src.c: 226:                         t = 0;
  3442  0FFD  01B2               	clrf	_t
  3443  0FFE  01B3               	clrf	_t+1
  3444  0FFF  0008               	return
  3445  1000                     __end_of_thermometer_threshhold_settings:	
  3446                           
  3447                           	psect	text3
  3448  1718                     __ptext3:	
  3449 ;; *************** function _set_upper_threshold *****************
  3450 ;; Defined at:
  3451 ;;		line 4 in file "threshold_src.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  upper_val       2    3[COMMON] int 
  3454 ;;  lower_val       2    5[COMMON] int 
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      unsigned char 
  3459 ;; Registers used:
  3460 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 300/0
  3463 ;;		On exit  : 300/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3466 ;;      Params:         4       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0
  3468 ;;      Temps:          1       0       0       0       0
  3469 ;;      Totals:         5       0       0       0       0
  3470 ;;Total ram usage:        5 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    2
  3473 ;; This function calls:
  3474 ;;		_write_char
  3475 ;; This function is called by:
  3476 ;;		_main
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _set_upper_threshold
  3482  1718                     _set_upper_threshold:	
  3483                           
  3484                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3488  1718  0874               	movf	set_upper_threshold@upper_val+1,w
  3489  1719  3A80               	xorlw	128
  3490  171A  3C80               	sublw	128
  3491  171B  1D03               	skipz
  3492  171C  2F1F               	goto	u3865
  3493  171D  0873               	movf	set_upper_threshold@upper_val,w
  3494  171E  025B               	subwf	_shi,w
  3495  171F                     u3865:	
  3496  171F  1C03               	skipc
  3497  1720  2F5F               	goto	l943
  3498  1721  0876               	movf	set_upper_threshold@lower_val+1,w
  3499  1722  3A80               	xorlw	128
  3500  1723  3C80               	sublw	128
  3501  1724  1D03               	skipz
  3502  1725  2F2A               	goto	u3875
  3503  1726  0875               	movf	set_upper_threshold@lower_val,w
  3504  1727  1283               	bcf	3,5	;RP0=0, select bank0
  3505  1728  1303               	bcf	3,6	;RP1=0, select bank0
  3506  1729  025A               	subwf	_ge,w
  3507  172A                     u3875:	
  3508  172A  1C03               	skipc
  3509  172B  2F5F               	goto	l943
  3510                           
  3511                           ;threshold_src.c: 6:     heat_counter ++;
  3512  172C  3001               	movlw	1
  3513  172D  1283               	bcf	3,5	;RP0=0, select bank0
  3514  172E  1303               	bcf	3,6	;RP1=0, select bank0
  3515  172F  07BC               	addwf	_heat_counter,f
  3516  1730  1803               	skipnc
  3517  1731  0ABD               	incf	_heat_counter+1,f
  3518  1732  3000               	movlw	0
  3519  1733  07BD               	addwf	_heat_counter+1,f
  3520                           
  3521                           ;threshold_src.c: 7:     heater_state = '0';
  3522  1734  3030               	movlw	48
  3523  1735  00F7               	movwf	??_set_upper_threshold
  3524  1736  0877               	movf	??_set_upper_threshold,w
  3525  1737  00D1               	movwf	_heater_state
  3526                           
  3527                           ;threshold_src.c: 8:     cooler_state = '1';
  3528  1738  3031               	movlw	49
  3529  1739  00F7               	movwf	??_set_upper_threshold
  3530  173A  0877               	movf	??_set_upper_threshold,w
  3531  173B  00D0               	movwf	_cooler_state
  3532                           
  3533                           ;threshold_src.c: 9:     write_char('W');
  3534  173C  3057               	movlw	87
  3535  173D  160A  118A  23E1  160A  118A  	fcall	_write_char
  3536                           
  3537                           ;threshold_src.c: 10:     write_char('A');
  3538  1742  3041               	movlw	65
  3539  1743  160A  118A  23E1  160A  118A  	fcall	_write_char
  3540                           
  3541                           ;threshold_src.c: 11:     write_char('R');
  3542  1748  3052               	movlw	82
  3543  1749  160A  118A  23E1  160A  118A  	fcall	_write_char
  3544                           
  3545                           ;threshold_src.c: 12:     write_char('M');
  3546  174E  304D               	movlw	77
  3547  174F  160A  118A  23E1  160A  118A  	fcall	_write_char
  3548                           
  3549                           ;threshold_src.c: 13:     if(heat_counter > 10000){
  3550  1754  3027               	movlw	39
  3551  1755  023D               	subwf	_heat_counter+1,w
  3552  1756  3011               	movlw	17
  3553  1757  1903               	skipnz
  3554  1758  023C               	subwf	_heat_counter,w
  3555  1759  1C03               	skipc
  3556  175A  2F5F               	goto	l943
  3557                           
  3558                           ;threshold_src.c: 14:         cooler_state = '-';
  3559  175B  302D               	movlw	45
  3560  175C  00F7               	movwf	??_set_upper_threshold
  3561  175D  0877               	movf	??_set_upper_threshold,w
  3562  175E  00D0               	movwf	_cooler_state
  3563  175F                     l943:	
  3564                           ;threshold_src.c: 18:     }
  3565                           
  3566                           
  3567                           ;threshold_src.c: 19:     return buzzer_watcher;
  3568  175F  1283               	bcf	3,5	;RP0=0, select bank0
  3569  1760  1303               	bcf	3,6	;RP1=0, select bank0
  3570  1761  0853               	movf	_buzzer_watcher,w
  3571  1762  0008               	return
  3572  1763                     __end_of_set_upper_threshold:	
  3573                           
  3574                           	psect	text4
  3575  1688                     __ptext4:	
  3576 ;; *************** function _set_lower_threshold *****************
  3577 ;; Defined at:
  3578 ;;		line 41 in file "threshold_src.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  upper_val       2    3[COMMON] int 
  3581 ;;  lower_val       2    5[COMMON] int 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      unsigned char 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 300/0
  3590 ;;		On exit  : 300/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3593 ;;      Params:         4       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0
  3595 ;;      Temps:          1       0       0       0       0
  3596 ;;      Totals:         5       0       0       0       0
  3597 ;;Total ram usage:        5 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    2
  3600 ;; This function calls:
  3601 ;;		_write_char
  3602 ;; This function is called by:
  3603 ;;		_main
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _set_lower_threshold
  3609  1688                     _set_lower_threshold:	
  3610                           
  3611                           ;threshold_src.c: 42:     if((shi <= upper_val && ge <= lower_val))
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3615  1688  0874               	movf	set_lower_threshold@upper_val+1,w
  3616  1689  3A80               	xorlw	128
  3617  168A  00F7               	movwf	??_set_lower_threshold
  3618  168B  3080               	movlw	128
  3619  168C  0277               	subwf	??_set_lower_threshold,w
  3620  168D  1D03               	skipz
  3621  168E  2E91               	goto	u3845
  3622  168F  085B               	movf	_shi,w
  3623  1690  0273               	subwf	set_lower_threshold@upper_val,w
  3624  1691                     u3845:	
  3625  1691  1C03               	skipc
  3626  1692  2EC9               	goto	l955
  3627  1693  0876               	movf	set_lower_threshold@lower_val+1,w
  3628  1694  3A80               	xorlw	128
  3629  1695  00F7               	movwf	??_set_lower_threshold
  3630  1696  3080               	movlw	128
  3631  1697  0277               	subwf	??_set_lower_threshold,w
  3632  1698  1D03               	skipz
  3633  1699  2E9E               	goto	u3855
  3634  169A  1283               	bcf	3,5	;RP0=0, select bank0
  3635  169B  1303               	bcf	3,6	;RP1=0, select bank0
  3636  169C  085A               	movf	_ge,w
  3637  169D  0275               	subwf	set_lower_threshold@lower_val,w
  3638  169E                     u3855:	
  3639  169E  1C03               	skipc
  3640  169F  2EC9               	goto	l955
  3641                           
  3642                           ;threshold_src.c: 43:     {;threshold_src.c: 44:     count = 2;
  3643  16A0  3002               	movlw	2
  3644  16A1  1683               	bsf	3,5	;RP0=1, select bank1
  3645  16A2  1303               	bcf	3,6	;RP1=0, select bank1
  3646  16A3  00AF               	movwf	_count^(0+128)
  3647  16A4  3000               	movlw	0
  3648  16A5  00B0               	movwf	(_count^(0+128)+1)
  3649                           
  3650                           ;threshold_src.c: 45:     buzzer_watcher = 'x';
  3651  16A6  3078               	movlw	120
  3652  16A7  00F7               	movwf	??_set_lower_threshold
  3653  16A8  0877               	movf	??_set_lower_threshold,w
  3654  16A9  1283               	bcf	3,5	;RP0=0, select bank0
  3655  16AA  00D3               	movwf	_buzzer_watcher
  3656                           
  3657                           ;threshold_src.c: 46:     heater_state = '0';
  3658  16AB  3030               	movlw	48
  3659  16AC  00F7               	movwf	??_set_lower_threshold
  3660  16AD  0877               	movf	??_set_lower_threshold,w
  3661  16AE  00D1               	movwf	_heater_state
  3662                           
  3663                           ;threshold_src.c: 47:     cooler_state = '0';
  3664  16AF  3030               	movlw	48
  3665  16B0  00F7               	movwf	??_set_lower_threshold
  3666  16B1  0877               	movf	??_set_lower_threshold,w
  3667  16B2  00D0               	movwf	_cooler_state
  3668                           
  3669                           ;threshold_src.c: 48:     write_char('O');
  3670  16B3  304F               	movlw	79
  3671  16B4  160A  118A  23E1  160A  118A  	fcall	_write_char
  3672                           
  3673                           ;threshold_src.c: 49:     write_char('K');
  3674  16B9  304B               	movlw	75
  3675  16BA  160A  118A  23E1  160A  118A  	fcall	_write_char
  3676                           
  3677                           ;threshold_src.c: 50:     write_char(' ');
  3678  16BF  3020               	movlw	32
  3679  16C0  160A  118A  23E1  160A  118A  	fcall	_write_char
  3680                           
  3681                           ;threshold_src.c: 51:     write_char(' ');
  3682  16C5  3020               	movlw	32
  3683  16C6  160A  118A  23E1   	fcall	_write_char
  3684  16C9                     l955:	
  3685                           ;threshold_src.c: 52:     }
  3686                           
  3687                           
  3688                           ;threshold_src.c: 53:     return buzzer_watcher;
  3689  16C9  1283               	bcf	3,5	;RP0=0, select bank0
  3690  16CA  1303               	bcf	3,6	;RP1=0, select bank0
  3691  16CB  0853               	movf	_buzzer_watcher,w
  3692  16CC  0008               	return
  3693  16CD                     __end_of_set_lower_threshold:	
  3694                           
  3695                           	psect	text5
  3696  0006                     __ptext5:	
  3697 ;; *************** function _set_beep_threshhold *****************
  3698 ;; Defined at:
  3699 ;;		line 5 in file "buzzer_src.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  x               1    wreg     unsigned char 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  x               1    2[COMMON] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 300/0
  3710 ;;		On exit  : 300/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3713 ;;      Params:         0       0       0       0       0
  3714 ;;      Locals:         1       0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0
  3716 ;;      Totals:         1       0       0       0       0
  3717 ;;Total ram usage:        1 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    1
  3720 ;; This function calls:
  3721 ;;		_button_delay
  3722 ;; This function is called by:
  3723 ;;		_main
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _set_beep_threshhold
  3729  0006                     _set_beep_threshhold:	
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3733                           ;set_beep_threshhold@x stored from wreg
  3734  0006  00F2               	movwf	set_beep_threshhold@x
  3735                           
  3736                           ;buzzer_src.c: 6:     if (x == 'w'){
  3737  0007  3077               	movlw	119
  3738  0008  0672               	xorwf	set_beep_threshhold@x,w
  3739  0009  1D03               	btfss	3,2
  3740  000A  281F               	goto	l4686
  3741                           
  3742                           ;buzzer_src.c: 7:         RE2 = 1;
  3743  000B  1509               	bsf	9,2	;volatile
  3744                           
  3745                           ;buzzer_src.c: 8:         button_delay();
  3746  000C  160A  118A  23A5  120A  118A  	fcall	_button_delay
  3747                           
  3748                           ;buzzer_src.c: 9:         RE2 = 0;
  3749  0011  1283               	bcf	3,5	;RP0=0, select bank0
  3750  0012  1303               	bcf	3,6	;RP1=0, select bank0
  3751  0013  1109               	bcf	9,2	;volatile
  3752                           
  3753                           ;buzzer_src.c: 10:         button_delay();
  3754  0014  160A  118A  23A5  120A  118A  	fcall	_button_delay
  3755                           
  3756                           ;buzzer_src.c: 11:         RE2 = 1;
  3757  0019  1283               	bcf	3,5	;RP0=0, select bank0
  3758  001A  1303               	bcf	3,6	;RP1=0, select bank0
  3759  001B  1509               	bsf	9,2	;volatile
  3760                           
  3761                           ;buzzer_src.c: 12:         button_delay();
  3762  001C  160A  118A  23A5   	fcall	_button_delay
  3763  001F                     l4686:	
  3764                           
  3765                           ;buzzer_src.c: 13:         RE2 = 0;
  3766  001F  1283               	bcf	3,5	;RP0=0, select bank0
  3767  0020  1303               	bcf	3,6	;RP1=0, select bank0
  3768  0021  1109               	bcf	9,2	;volatile
  3769  0022  0008               	return
  3770  0023                     __end_of_set_beep_threshhold:	
  3771                           
  3772                           	psect	text6
  3773  151E                     __ptext6:	
  3774 ;; *************** function _reset_alarm *****************
  3775 ;; Defined at:
  3776 ;;		line 56 in file "threshold_src.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      unsigned char 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 300/0
  3787 ;;		On exit  : 300/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3790 ;;      Params:         0       0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0
  3792 ;;      Temps:          1       0       0       0       0
  3793 ;;      Totals:         1       0       0       0       0
  3794 ;;Total ram usage:        1 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    2
  3797 ;; This function calls:
  3798 ;;		_write_char
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           
  3805                           ;psect for function _reset_alarm
  3806  151E                     _reset_alarm:	
  3807                           
  3808                           ;threshold_src.c: 57:     RC0 = 1;
  3809                           
  3810                           ;incstack = 0
  3811                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3812  151E  1407               	bsf	7,0	;volatile
  3813                           
  3814                           ;threshold_src.c: 58:     RC1 = 1;
  3815  151F  1487               	bsf	7,1	;volatile
  3816                           
  3817                           ;threshold_src.c: 59:     RC2 = 1;
  3818  1520  1507               	bsf	7,2	;volatile
  3819                           
  3820                           ;threshold_src.c: 60:     RC3 = 0;
  3821  1521  1187               	bcf	7,3	;volatile
  3822                           
  3823                           ;threshold_src.c: 61:     if(RC4 == 0){
  3824  1522  1A07               	btfsc	7,4	;volatile
  3825  1523  2D4A               	goto	l4672
  3826                           
  3827                           ;threshold_src.c: 62:         count = 0;
  3828  1524  1683               	bsf	3,5	;RP0=1, select bank1
  3829  1525  01AF               	clrf	_count^(0+128)
  3830  1526  01B0               	clrf	(_count+1)^(0+128)
  3831                           
  3832                           ;threshold_src.c: 63:         buzzer_watcher = 'x';
  3833  1527  3078               	movlw	120
  3834  1528  00F3               	movwf	??_reset_alarm
  3835  1529  0873               	movf	??_reset_alarm,w
  3836  152A  1283               	bcf	3,5	;RP0=0, select bank0
  3837  152B  00D3               	movwf	_buzzer_watcher
  3838                           
  3839                           ;threshold_src.c: 64:         heat_counter = 0;
  3840  152C  01BC               	clrf	_heat_counter
  3841  152D  01BD               	clrf	_heat_counter+1
  3842                           
  3843                           ;threshold_src.c: 65:         write_char('R');
  3844  152E  3052               	movlw	82
  3845  152F  160A  118A  23E1  160A  118A  	fcall	_write_char
  3846                           
  3847                           ;threshold_src.c: 66:         write_char('E');
  3848  1534  3045               	movlw	69
  3849  1535  160A  118A  23E1  160A  118A  	fcall	_write_char
  3850                           
  3851                           ;threshold_src.c: 67:         write_char('S');
  3852  153A  3053               	movlw	83
  3853  153B  160A  118A  23E1  160A  118A  	fcall	_write_char
  3854                           
  3855                           ;threshold_src.c: 68:         write_char('E');
  3856  1540  3045               	movlw	69
  3857  1541  160A  118A  23E1  160A  118A  	fcall	_write_char
  3858                           
  3859                           ;threshold_src.c: 69:         write_char('T');
  3860  1546  3054               	movlw	84
  3861  1547  160A  118A  23E1   	fcall	_write_char
  3862  154A                     l4672:	
  3863                           
  3864                           ;threshold_src.c: 71:     return buzzer_watcher;
  3865  154A  0853               	movf	_buzzer_watcher,w
  3866  154B  0008               	return
  3867  154C                     __end_of_reset_alarm:	
  3868                           
  3869                           	psect	text7
  3870  145D                     __ptext7:	
  3871 ;; *************** function _lcd_init *****************
  3872 ;; Defined at:
  3873 ;;		line 14 in file "LCD_src.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  i               2    0        int 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 300/100
  3884 ;;		On exit  : 300/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3887 ;;      Params:         0       0       0       0       0
  3888 ;;      Locals:         0       0       0       0       0
  3889 ;;      Temps:          0       0       0       0       0
  3890 ;;      Totals:         0       0       0       0       0
  3891 ;;Total ram usage:        0 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    2
  3894 ;; This function calls:
  3895 ;;		_delay_screen
  3896 ;;		_write_cmd
  3897 ;; This function is called by:
  3898 ;;		_main
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _lcd_init
  3904  145D                     _lcd_init:	
  3905                           
  3906                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3910  145D  0185               	clrf	5	;volatile
  3911                           
  3912                           ;LCD_src.c: 18:  RA0=0;
  3913  145E  1283               	bcf	3,5	;RP0=0, select bank0
  3914  145F  1005               	bcf	5,0	;volatile
  3915                           
  3916                           ;LCD_src.c: 19:  delay_screen();
  3917  1460  160A  118A  2391  160A  118A  	fcall	_delay_screen
  3918                           
  3919                           ;LCD_src.c: 20:  RA0=1;
  3920  1465  1283               	bcf	3,5	;RP0=0, select bank0
  3921  1466  1303               	bcf	3,6	;RP1=0, select bank0
  3922  1467  1405               	bsf	5,0	;volatile
  3923                           
  3924                           ;LCD_src.c: 21:  RA2=1;
  3925  1468  1505               	bsf	5,2	;volatile
  3926                           
  3927                           ;LCD_src.c: 22:  write_cmd(0x30);
  3928  1469  3030               	movlw	48
  3929  146A  120A  158A  2001  160A  118A  	fcall	_write_cmd
  3930                           
  3931                           ;LCD_src.c: 23:  write_cmd(0x01);
  3932  146F  3001               	movlw	1
  3933  1470  120A  158A  2001  160A  118A  	fcall	_write_cmd
  3934                           
  3935                           ;LCD_src.c: 24:  write_cmd(0x06);
  3936  1475  3006               	movlw	6
  3937  1476  120A  158A  2001  160A  118A  	fcall	_write_cmd
  3938                           
  3939                           ;LCD_src.c: 25:  write_cmd(0x0c);
  3940  147B  300C               	movlw	12
  3941  147C  120A  158A  2001   	fcall	_write_cmd
  3942  147F  0008               	return
  3943  1480                     __end_of_lcd_init:	
  3944                           
  3945                           	psect	text8
  3946  13CD                     __ptext8:	
  3947 ;; *************** function _initialise_buttons *****************
  3948 ;; Defined at:
  3949 ;;		line 11 in file "Button_src.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2
  3958 ;; Tracked objects:
  3959 ;;		On entry : 300/0
  3960 ;;		On exit  : 300/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3963 ;;      Params:         0       0       0       0       0
  3964 ;;      Locals:         0       0       0       0       0
  3965 ;;      Temps:          0       0       0       0       0
  3966 ;;      Totals:         0       0       0       0       0
  3967 ;;Total ram usage:        0 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_main
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           
  3977                           ;psect for function _initialise_buttons
  3978  13CD                     _initialise_buttons:	
  3979                           
  3980                           ;Button_src.c: 12:     ADCON1 = 0x06;
  3981                           
  3982                           ;incstack = 0
  3983                           ; Regs used in _initialise_buttons: [wreg+status,2]
  3984  13CD  3006               	movlw	6
  3985  13CE  1683               	bsf	3,5	;RP0=1, select bank1
  3986  13CF  009F               	movwf	31	;volatile
  3987                           
  3988                           ;Button_src.c: 13:     TRISC = 0xf0;
  3989  13D0  30F0               	movlw	240
  3990  13D1  0087               	movwf	7	;volatile
  3991                           
  3992                           ;Button_src.c: 14:     a = 0x00;
  3993  13D2  1283               	bcf	3,5	;RP0=0, select bank0
  3994  13D3  01CA               	clrf	_a
  3995                           
  3996                           ;Button_src.c: 15:     b = 0x00;
  3997  13D4  01C9               	clrf	_b
  3998                           
  3999                           ;Button_src.c: 16:     c = 0x00;
  4000  13D5  01C8               	clrf	_c
  4001                           
  4002                           ;Button_src.c: 17:     z = 0;
  4003  13D6  01AA               	clrf	_z
  4004  13D7  01AB               	clrf	_z+1
  4005                           
  4006                           ;Button_src.c: 18:     day_low = 0;
  4007  13D8  01A8               	clrf	_day_low
  4008  13D9  01A9               	clrf	_day_low+1
  4009                           
  4010                           ;Button_src.c: 19:     stats = 1;
  4011  13DA  3001               	movlw	1
  4012  13DB  00A4               	movwf	_stats
  4013  13DC  3000               	movlw	0
  4014  13DD  00A5               	movwf	_stats+1
  4015                           
  4016                           ;Button_src.c: 20:     p = 0;
  4017  13DE  01A2               	clrf	_p
  4018  13DF  01A3               	clrf	_p+1
  4019  13E0  0008               	return
  4020  13E1                     __end_of_initialise_buttons:	
  4021                           
  4022                           	psect	text9
  4023  1327                     __ptext9:	
  4024 ;; *************** function _init_temp *****************
  4025 ;; Defined at:
  4026 ;;		line 6 in file "Thermometer_src.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		status,2
  4035 ;; Tracked objects:
  4036 ;;		On entry : 200/100
  4037 ;;		On exit  : 300/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4040 ;;      Params:         0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0
  4043 ;;      Totals:         0       0       0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_main
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           
  4054                           ;psect for function _init_temp
  4055  1327                     _init_temp:	
  4056                           
  4057                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4058                           
  4059                           ;incstack = 0
  4060                           ; Regs used in _init_temp: [status,2]
  4061  1327  1683               	bsf	3,5	;RP0=1, select bank1
  4062  1328  0189               	clrf	9	;volatile
  4063                           
  4064                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4065  1329  1283               	bcf	3,5	;RP0=0, select bank0
  4066  132A  0189               	clrf	9	;volatile
  4067  132B  0008               	return
  4068  132C                     __end_of_init_temp:	
  4069                           
  4070                           	psect	text10
  4071  132C                     __ptext10:	
  4072 ;; *************** function _init *****************
  4073 ;; Defined at:
  4074 ;;		line 5 in file "LCD_src.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;		None
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, status,2
  4083 ;; Tracked objects:
  4084 ;;		On entry : 300/0
  4085 ;;		On exit  : 300/100
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4088 ;;      Params:         0       0       0       0       0
  4089 ;;      Locals:         0       0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0
  4091 ;;      Totals:         0       0       0       0       0
  4092 ;;Total ram usage:        0 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_main
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function _init
  4103  132C                     _init:	
  4104                           
  4105                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _init: [wreg+status,2]
  4109  132C  3007               	movlw	7
  4110  132D  1683               	bsf	3,5	;RP0=1, select bank1
  4111  132E  009F               	movwf	31	;volatile
  4112                           
  4113                           ;LCD_src.c: 8:  TRISA0=1;
  4114  132F  1405               	bsf	5,0	;volatile
  4115                           
  4116                           ;LCD_src.c: 9:  TRISD=0X00;
  4117  1330  0188               	clrf	8	;volatile
  4118                           
  4119                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4120  1331  0181               	clrf	1	;volatile
  4121                           
  4122                           ;LCD_src.c: 11:  TRISE = 0X00;
  4123  1332  0189               	clrf	9	;volatile
  4124  1333  0008               	return
  4125  1334                     __end_of_init:	
  4126                           
  4127                           	psect	text11
  4128  14F2                     __ptext11:	
  4129 ;; *************** function _get_time *****************
  4130 ;; Defined at:
  4131 ;;		line 23 in file "clock_src.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  i               2    6[COMMON] int 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 300/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4145 ;;      Params:         0       0       0       0       0
  4146 ;;      Locals:         2       0       0       0       0
  4147 ;;      Temps:          1       0       0       0       0
  4148 ;;      Totals:         3       0       0       0       0
  4149 ;;Total ram usage:        3 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    1
  4152 ;; This function calls:
  4153 ;;		_time_read_1
  4154 ;;		_time_write_1
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _get_time
  4162  14F2                     _get_time:	
  4163                           
  4164                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4168  14F2  1283               	bcf	3,5	;RP0=0, select bank0
  4169  14F3  1303               	bcf	3,6	;RP1=0, select bank0
  4170  14F4  1686               	bsf	6,5	;volatile
  4171                           
  4172                           ;clock_src.c: 27:    time_write_1(0xbf);
  4173  14F5  30BF               	movlw	191
  4174  14F6  160A  118A  24A4  160A  118A  	fcall	_time_write_1
  4175                           
  4176                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4177  14FB  01F6               	clrf	get_time@i
  4178  14FC  01F7               	clrf	get_time@i+1
  4179  14FD                     l3878:	
  4180                           
  4181                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4182  14FD  160A  118A  254C  160A  118A  	fcall	_time_read_1
  4183  1502  00F5               	movwf	??_get_time
  4184  1503  0876               	movf	get_time@i,w
  4185  1504  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4186  1505  0084               	movwf	4
  4187  1506  0875               	movf	??_get_time,w
  4188  1507  1383               	bcf	3,7	;select IRP bank1
  4189  1508  0080               	movwf	0
  4190                           
  4191                           ;clock_src.c: 31:      }
  4192  1509  3001               	movlw	1
  4193  150A  07F6               	addwf	get_time@i,f
  4194  150B  1803               	skipnc
  4195  150C  0AF7               	incf	get_time@i+1,f
  4196  150D  3000               	movlw	0
  4197  150E  07F7               	addwf	get_time@i+1,f
  4198  150F  0877               	movf	get_time@i+1,w
  4199  1510  3A80               	xorlw	128
  4200  1511  00FF               	movwf	127
  4201  1512  3080               	movlw	128
  4202  1513  027F               	subwf	127,w
  4203  1514  1D03               	skipz
  4204  1515  2D18               	goto	u3095
  4205  1516  3007               	movlw	7
  4206  1517  0276               	subwf	get_time@i,w
  4207  1518                     u3095:	
  4208  1518  1C03               	skipc
  4209  1519  2CFD               	goto	l3878
  4210                           
  4211                           ;clock_src.c: 32:    RB5=0;
  4212  151A  1283               	bcf	3,5	;RP0=0, select bank0
  4213  151B  1303               	bcf	3,6	;RP1=0, select bank0
  4214  151C  1286               	bcf	6,5	;volatile
  4215  151D  0008               	return
  4216  151E                     __end_of_get_time:	
  4217                           
  4218                           	psect	text12
  4219  154C                     __ptext12:	
  4220 ;; *************** function _time_read_1 *****************
  4221 ;; Defined at:
  4222 ;;		line 130 in file "clock_src.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;		None
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  j               2    2[COMMON] int 
  4227 ;;  time_rx         1    4[COMMON] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      unsigned char 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0, btemp+1
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 300/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4237 ;;      Params:         0       0       0       0       0
  4238 ;;      Locals:         3       0       0       0       0
  4239 ;;      Temps:          2       0       0       0       0
  4240 ;;      Totals:         5       0       0       0       0
  4241 ;;Total ram usage:        5 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_get_time
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           
  4251                           ;psect for function _time_read_1
  4252  154C                     _time_read_1:	
  4253                           
  4254                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4258  154C  01F4               	clrf	time_read_1@time_rx
  4259                           
  4260                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4261  154D  1683               	bsf	3,5	;RP0=1, select bank1
  4262  154E  1303               	bcf	3,6	;RP1=0, select bank1
  4263  154F  1606               	bsf	6,4	;volatile
  4264                           
  4265                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4266  1550  01F2               	clrf	time_read_1@j
  4267  1551  01F3               	clrf	time_read_1@j+1
  4268  1552                     l478:	
  4269                           
  4270                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4271  1552  1283               	bcf	3,5	;RP0=0, select bank0
  4272  1553  1303               	bcf	3,6	;RP1=0, select bank0
  4273  1554  1006               	bcf	6,0	;volatile
  4274                           
  4275                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4276  1555  0874               	movf	time_read_1@time_rx,w
  4277  1556  00F0               	movwf	??_time_read_1
  4278  1557  1003               	clrc
  4279  1558  0C70               	rrf	??_time_read_1,w
  4280  1559  00F1               	movwf	??_time_read_1+1
  4281  155A  0871               	movf	??_time_read_1+1,w
  4282  155B  00F4               	movwf	time_read_1@time_rx
  4283                           
  4284                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4285  155C  1E06               	btfss	6,4	;volatile
  4286  155D  2D63               	goto	l3472
  4287  155E  0874               	movf	time_read_1@time_rx,w
  4288  155F  3880               	iorlw	128
  4289  1560  00F0               	movwf	??_time_read_1
  4290  1561  0870               	movf	??_time_read_1,w
  4291  1562  00F4               	movwf	time_read_1@time_rx
  4292  1563                     l3472:	
  4293                           
  4294                           ;clock_src.c: 141:        RB0=1;
  4295  1563  1406               	bsf	6,0	;volatile
  4296                           
  4297                           ;clock_src.c: 142:       }
  4298  1564  3001               	movlw	1
  4299  1565  07F2               	addwf	time_read_1@j,f
  4300  1566  1803               	skipnc
  4301  1567  0AF3               	incf	time_read_1@j+1,f
  4302  1568  3000               	movlw	0
  4303  1569  07F3               	addwf	time_read_1@j+1,f
  4304  156A  0873               	movf	time_read_1@j+1,w
  4305  156B  3A80               	xorlw	128
  4306  156C  00FF               	movwf	127
  4307  156D  3080               	movlw	128
  4308  156E  027F               	subwf	127,w
  4309  156F  1D03               	skipz
  4310  1570  2D73               	goto	u2275
  4311  1571  3008               	movlw	8
  4312  1572  0272               	subwf	time_read_1@j,w
  4313  1573                     u2275:	
  4314  1573  1C03               	skipc
  4315  1574  2D52               	goto	l478
  4316                           
  4317                           ;clock_src.c: 143:     TRISB4=0;
  4318  1575  1683               	bsf	3,5	;RP0=1, select bank1
  4319  1576  1303               	bcf	3,6	;RP1=0, select bank1
  4320  1577  1206               	bcf	6,4	;volatile
  4321                           
  4322                           ;clock_src.c: 144:     RB0=0;
  4323  1578  1283               	bcf	3,5	;RP0=0, select bank0
  4324  1579  1006               	bcf	6,0	;volatile
  4325                           
  4326                           ;clock_src.c: 145:     return(time_rx);
  4327  157A  0874               	movf	time_read_1@time_rx,w
  4328  157B  0008               	return
  4329  157C                     __end_of_time_read_1:	
  4330                           
  4331                           	psect	text13
  4332  0936                     __ptext13:	
  4333 ;; *************** function _get_temp *****************
  4334 ;; Defined at:
  4335 ;;		line 89 in file "Thermometer_src.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  i               2    0        int 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 300/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0
  4351 ;;      Temps:          0       4       0       0       0
  4352 ;;      Totals:         0       4       0       0       0
  4353 ;;Total ram usage:        4 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    2
  4356 ;; This function calls:
  4357 ;;		___lbdiv
  4358 ;;		___lbmod
  4359 ;;		___lwdiv
  4360 ;;		___lwmod
  4361 ;;		_delay2
  4362 ;;		_read_byte
  4363 ;;		_reset_temp
  4364 ;;		_write_byte
  4365 ;; This function is called by:
  4366 ;;		_main
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           
  4371                           ;psect for function _get_temp
  4372  0936                     _get_temp:	
  4373                           
  4374                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4375                           
  4376                           ;incstack = 0
  4377                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4378  0936  1683               	bsf	3,5	;RP0=1, select bank1
  4379  0937  1409               	bsf	9,0	;volatile
  4380                           
  4381                           ;Thermometer_src.c: 93: reset_temp();
  4382  0938  160A  118A  25E2  120A  158A  	fcall	_reset_temp
  4383                           
  4384                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4385  093D  30CC               	movlw	204
  4386  093E  160A  118A  2616  120A  158A  	fcall	_write_byte
  4387                           
  4388                           ;Thermometer_src.c: 95: delay2();
  4389  0943  160A  118A  23B9  120A  158A  	fcall	_delay2
  4390                           
  4391                           ;Thermometer_src.c: 96: write_byte(0X44);
  4392  0948  3044               	movlw	68
  4393  0949  160A  118A  2616  120A  158A  	fcall	_write_byte
  4394                           
  4395                           ;Thermometer_src.c: 98: reset_temp();
  4396  094E  160A  118A  25E2  120A  158A  	fcall	_reset_temp
  4397                           
  4398                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4399  0953  30CC               	movlw	204
  4400  0954  160A  118A  2616  120A  158A  	fcall	_write_byte
  4401                           
  4402                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4403  0959  30BE               	movlw	190
  4404  095A  160A  118A  2616  120A  158A  	fcall	_write_byte
  4405                           
  4406                           ;Thermometer_src.c: 101: TLV=read_byte();
  4407  095F  160A  118A  25AE  120A  158A  	fcall	_read_byte
  4408  0964  1283               	bcf	3,5	;RP0=0, select bank0
  4409  0965  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0966  00E0               	movwf	??_get_temp
  4411  0967  0860               	movf	??_get_temp,w
  4412  0968  00DF               	movwf	_TLV
  4413                           
  4414                           ;Thermometer_src.c: 102: THV=read_byte();
  4415  0969  160A  118A  25AE  120A  158A  	fcall	_read_byte
  4416  096E  1283               	bcf	3,5	;RP0=0, select bank0
  4417  096F  1303               	bcf	3,6	;RP1=0, select bank0
  4418  0970  00E0               	movwf	??_get_temp
  4419  0971  0860               	movf	??_get_temp,w
  4420  0972  00DE               	movwf	_THV
  4421                           
  4422                           ;Thermometer_src.c: 103: TRISE0 =1;
  4423  0973  1683               	bsf	3,5	;RP0=1, select bank1
  4424  0974  1409               	bsf	9,0	;volatile
  4425                           
  4426                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4427  0975  1283               	bcf	3,5	;RP0=0, select bank0
  4428  0976  085E               	movf	_THV,w
  4429  0977  00E0               	movwf	??_get_temp
  4430  0978  3004               	movlw	4
  4431  0979                     u3025:	
  4432  0979  1003               	clrc
  4433  097A  0DE0               	rlf	??_get_temp,f
  4434  097B  3EFF               	addlw	-1
  4435  097C  1D03               	skipz
  4436  097D  2979               	goto	u3025
  4437  097E  303F               	movlw	63
  4438  097F  0560               	andwf	??_get_temp,w
  4439  0980  00E1               	movwf	??_get_temp+1
  4440  0981  085F               	movf	_TLV,w
  4441  0982  00E2               	movwf	??_get_temp+2
  4442  0983  3004               	movlw	4
  4443  0984                     u3035:	
  4444  0984  1003               	clrc
  4445  0985  0CE2               	rrf	??_get_temp+2,f
  4446  0986  3EFF               	addlw	-1
  4447  0987  1D03               	skipz
  4448  0988  2984               	goto	u3035
  4449  0989  0862               	movf	??_get_temp+2,w
  4450  098A  0461               	iorwf	??_get_temp+1,w
  4451  098B  00E3               	movwf	??_get_temp+3
  4452  098C  0863               	movf	??_get_temp+3,w
  4453  098D  00DD               	movwf	_TZ
  4454                           
  4455                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4456  098E  085F               	movf	_TLV,w
  4457  098F  00E0               	movwf	??_get_temp
  4458  0990  3003               	movlw	3
  4459  0991                     u3045:	
  4460  0991  1003               	clrc
  4461  0992  0DE0               	rlf	??_get_temp,f
  4462  0993  3EFF               	addlw	-1
  4463  0994  1D03               	skipz
  4464  0995  2991               	goto	u3045
  4465  0996  1003               	clrc
  4466  0997  0D60               	rlf	??_get_temp,w
  4467  0998  00E1               	movwf	??_get_temp+1
  4468  0999  0861               	movf	??_get_temp+1,w
  4469  099A  00DC               	movwf	_TX
  4470                           
  4471                           ;Thermometer_src.c: 107: ge=TZ%10;
  4472  099B  300A               	movlw	10
  4473  099C  00E0               	movwf	??_get_temp
  4474  099D  0860               	movf	??_get_temp,w
  4475  099E  00F0               	movwf	___lbmod@divisor
  4476  099F  085D               	movf	_TZ,w
  4477  09A0  160A  118A  243A  120A  158A  	fcall	___lbmod
  4478  09A5  00E1               	movwf	??_get_temp+1
  4479  09A6  0861               	movf	??_get_temp+1,w
  4480  09A7  00DA               	movwf	_ge
  4481                           
  4482                           ;Thermometer_src.c: 108: shi=TZ/10;
  4483  09A8  300A               	movlw	10
  4484  09A9  00E0               	movwf	??_get_temp
  4485  09AA  0860               	movf	??_get_temp,w
  4486  09AB  00F0               	movwf	___lbdiv@divisor
  4487  09AC  085D               	movf	_TZ,w
  4488  09AD  160A  118A  2419  120A  158A  	fcall	___lbdiv
  4489  09B2  00E1               	movwf	??_get_temp+1
  4490  09B3  0861               	movf	??_get_temp+1,w
  4491  09B4  00DB               	movwf	_shi
  4492                           
  4493                           ;Thermometer_src.c: 109: wd=0;
  4494  09B5  01BE               	clrf	_wd
  4495  09B6  01BF               	clrf	_wd+1
  4496                           
  4497                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4498  09B7  1FDC               	btfss	_TX,7
  4499  09B8  29C1               	goto	l3846
  4500  09B9  083E               	movf	_wd,w
  4501  09BA  3E88               	addlw	136
  4502  09BB  00BE               	movwf	_wd
  4503  09BC  083F               	movf	_wd+1,w
  4504  09BD  1803               	skipnc
  4505  09BE  3E01               	addlw	1
  4506  09BF  3E13               	addlw	19
  4507  09C0  00BF               	movwf	_wd+1
  4508  09C1                     l3846:	
  4509                           
  4510                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4511  09C1  1F5C               	btfss	_TX,6
  4512  09C2  29CB               	goto	l3850
  4513  09C3  083E               	movf	_wd,w
  4514  09C4  3EC4               	addlw	196
  4515  09C5  00BE               	movwf	_wd
  4516  09C6  083F               	movf	_wd+1,w
  4517  09C7  1803               	skipnc
  4518  09C8  3E01               	addlw	1
  4519  09C9  3E09               	addlw	9
  4520  09CA  00BF               	movwf	_wd+1
  4521  09CB                     l3850:	
  4522                           
  4523                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4524  09CB  1EDC               	btfss	_TX,5
  4525  09CC  29D5               	goto	l3854
  4526  09CD  083E               	movf	_wd,w
  4527  09CE  3EE2               	addlw	226
  4528  09CF  00BE               	movwf	_wd
  4529  09D0  083F               	movf	_wd+1,w
  4530  09D1  1803               	skipnc
  4531  09D2  3E01               	addlw	1
  4532  09D3  3E04               	addlw	4
  4533  09D4  00BF               	movwf	_wd+1
  4534  09D5                     l3854:	
  4535                           
  4536                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4537  09D5  1E5C               	btfss	_TX,4
  4538  09D6  29DF               	goto	l3858
  4539  09D7  083E               	movf	_wd,w
  4540  09D8  3E71               	addlw	113
  4541  09D9  00BE               	movwf	_wd
  4542  09DA  083F               	movf	_wd+1,w
  4543  09DB  1803               	skipnc
  4544  09DC  3E01               	addlw	1
  4545  09DD  3E02               	addlw	2
  4546  09DE  00BF               	movwf	_wd+1
  4547  09DF                     l3858:	
  4548                           
  4549                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4550  09DF  30E8               	movlw	232
  4551  09E0  00F6               	movwf	___lwdiv@divisor
  4552  09E1  3003               	movlw	3
  4553  09E2  00F7               	movwf	___lwdiv@divisor+1
  4554  09E3  083F               	movf	_wd+1,w
  4555  09E4  00F9               	movwf	___lwdiv@dividend+1
  4556  09E5  083E               	movf	_wd,w
  4557  09E6  00F8               	movwf	___lwdiv@dividend
  4558  09E7  160A  118A  264C  120A  158A  	fcall	___lwdiv
  4559  09EC  0876               	movf	?___lwdiv,w
  4560  09ED  00E0               	movwf	??_get_temp
  4561  09EE  0860               	movf	??_get_temp,w
  4562  09EF  00D9               	movwf	_shifen
  4563                           
  4564                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4565  09F0  3064               	movlw	100
  4566  09F1  00F6               	movwf	___lwdiv@divisor
  4567  09F2  3000               	movlw	0
  4568  09F3  00F7               	movwf	___lwdiv@divisor+1
  4569  09F4  083F               	movf	_wd+1,w
  4570  09F5  00F3               	movwf	___lwmod@dividend+1
  4571  09F6  083E               	movf	_wd,w
  4572  09F7  00F2               	movwf	___lwmod@dividend
  4573  09F8  30E8               	movlw	232
  4574  09F9  00F0               	movwf	___lwmod@divisor
  4575  09FA  3003               	movlw	3
  4576  09FB  00F1               	movwf	___lwmod@divisor+1
  4577  09FC  160A  118A  257C  120A  158A  	fcall	___lwmod
  4578  0A01  0871               	movf	?___lwmod+1,w
  4579  0A02  00F9               	movwf	___lwdiv@dividend+1
  4580  0A03  0870               	movf	?___lwmod,w
  4581  0A04  00F8               	movwf	___lwdiv@dividend
  4582  0A05  160A  118A  264C  120A  158A  	fcall	___lwdiv
  4583  0A0A  0876               	movf	?___lwdiv,w
  4584  0A0B  00E0               	movwf	??_get_temp
  4585  0A0C  0860               	movf	??_get_temp,w
  4586  0A0D  00D8               	movwf	_baifen
  4587                           
  4588                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4589  0A0E  300A               	movlw	10
  4590  0A0F  00F6               	movwf	___lwdiv@divisor
  4591  0A10  3000               	movlw	0
  4592  0A11  00F7               	movwf	___lwdiv@divisor+1
  4593  0A12  083F               	movf	_wd+1,w
  4594  0A13  00F3               	movwf	___lwmod@dividend+1
  4595  0A14  083E               	movf	_wd,w
  4596  0A15  00F2               	movwf	___lwmod@dividend
  4597  0A16  3064               	movlw	100
  4598  0A17  00F0               	movwf	___lwmod@divisor
  4599  0A18  3000               	movlw	0
  4600  0A19  00F1               	movwf	___lwmod@divisor+1
  4601  0A1A  160A  118A  257C  120A  158A  	fcall	___lwmod
  4602  0A1F  0871               	movf	?___lwmod+1,w
  4603  0A20  00F9               	movwf	___lwdiv@dividend+1
  4604  0A21  0870               	movf	?___lwmod,w
  4605  0A22  00F8               	movwf	___lwdiv@dividend
  4606  0A23  160A  118A  264C  120A  158A  	fcall	___lwdiv
  4607  0A28  0876               	movf	?___lwdiv,w
  4608  0A29  00E0               	movwf	??_get_temp
  4609  0A2A  0860               	movf	??_get_temp,w
  4610  0A2B  00D7               	movwf	_qianfen
  4611                           
  4612                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4613  0A2C  300A               	movlw	10
  4614  0A2D  00F0               	movwf	___lwmod@divisor
  4615  0A2E  3000               	movlw	0
  4616  0A2F  00F1               	movwf	___lwmod@divisor+1
  4617  0A30  083F               	movf	_wd+1,w
  4618  0A31  00F3               	movwf	___lwmod@dividend+1
  4619  0A32  083E               	movf	_wd,w
  4620  0A33  00F2               	movwf	___lwmod@dividend
  4621  0A34  160A  118A  257C   	fcall	___lwmod
  4622  0A37  0870               	movf	?___lwmod,w
  4623  0A38  00E0               	movwf	??_get_temp
  4624  0A39  0860               	movf	??_get_temp,w
  4625  0A3A  00D6               	movwf	_wanfen
  4626                           
  4627                           ;Thermometer_src.c: 118: __nop();
  4628  0A3B  0000               	nop
  4629  0A3C  0008               	return
  4630  0A3D                     __end_of_get_temp:	
  4631                           
  4632                           	psect	text14
  4633  1616                     __ptext14:	
  4634 ;; *************** function _write_byte *****************
  4635 ;; Defined at:
  4636 ;;		line 40 in file "Thermometer_src.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  val             1    wreg     unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  val             1    7[COMMON] unsigned char 
  4641 ;;  i               1    8[COMMON] unsigned char 
  4642 ;;  temp            1    6[COMMON] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/100
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4652 ;;      Params:         0       0       0       0       0
  4653 ;;      Locals:         3       0       0       0       0
  4654 ;;      Temps:          2       0       0       0       0
  4655 ;;      Totals:         5       0       0       0       0
  4656 ;;Total ram usage:        5 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    1
  4659 ;; This function calls:
  4660 ;;		_delay_temp
  4661 ;; This function is called by:
  4662 ;;		_get_temp
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _write_byte
  4668  1616                     _write_byte:	
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4672                           ;write_byte@val stored from wreg
  4673  1616  00F7               	movwf	write_byte@val
  4674                           
  4675                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  4676  1617  3008               	movlw	8
  4677  1618  00F4               	movwf	??_write_byte
  4678  1619  0874               	movf	??_write_byte,w
  4679  161A  00F8               	movwf	write_byte@i
  4680  161B                     l3360:	
  4681                           
  4682                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  4683  161B  0877               	movf	write_byte@val,w
  4684  161C  3901               	andlw	1
  4685  161D  00F4               	movwf	??_write_byte
  4686  161E  0874               	movf	??_write_byte,w
  4687  161F  00F6               	movwf	write_byte@temp
  4688                           
  4689                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  4690  1620  1283               	bcf	3,5	;RP0=0, select bank0
  4691  1621  1303               	bcf	3,6	;RP1=0, select bank0
  4692  1622  1009               	bcf	9,0	;volatile
  4693  1623  1683               	bsf	3,5	;RP0=1, select bank1
  4694  1624  1009               	bcf	9,0	;volatile
  4695                           
  4696                           ;Thermometer_src.c: 48:    __nop();
  4697  1625  0000               	nop
  4698                           
  4699                           ;Thermometer_src.c: 49:    __nop();
  4700  1626  0000               	nop
  4701                           
  4702                           ;Thermometer_src.c: 50:    __nop();
  4703  1627  0000               	nop
  4704                           
  4705                           ;Thermometer_src.c: 51:    __nop();
  4706  1628  0000               	nop
  4707                           
  4708                           ;Thermometer_src.c: 52:    __nop();
  4709  1629  0000               	nop
  4710                           
  4711                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  4712  162A  0376               	decf	write_byte@temp,w
  4713  162B  1D03               	btfss	3,2
  4714  162C  2E30               	goto	l3380
  4715  162D  1683               	bsf	3,5	;RP0=1, select bank1
  4716  162E  1303               	bcf	3,6	;RP1=0, select bank1
  4717  162F  1409               	bsf	9,0	;volatile
  4718  1630                     l3380:	
  4719                           
  4720                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  4721  1630  3007               	movlw	7
  4722  1631  00F4               	movwf	??_write_byte
  4723  1632  0874               	movf	??_write_byte,w
  4724  1633  00F0               	movwf	delay_temp@y
  4725  1634  3002               	movlw	2
  4726  1635  160A  118A  2344  160A  118A  	fcall	_delay_temp
  4727                           
  4728                           ;Thermometer_src.c: 55:    TRISE0 =1;
  4729  163A  1683               	bsf	3,5	;RP0=1, select bank1
  4730  163B  1303               	bcf	3,6	;RP1=0, select bank1
  4731  163C  1409               	bsf	9,0	;volatile
  4732                           
  4733                           ;Thermometer_src.c: 56:    __nop();
  4734  163D  0000               	nop
  4735                           
  4736                           ;Thermometer_src.c: 57:    __nop();
  4737  163E  0000               	nop
  4738                           
  4739                           ;Thermometer_src.c: 58:    val=val>>1;
  4740  163F  0877               	movf	write_byte@val,w
  4741  1640  00F4               	movwf	??_write_byte
  4742  1641  1003               	clrc
  4743  1642  0C74               	rrf	??_write_byte,w
  4744  1643  00F5               	movwf	??_write_byte+1
  4745  1644  0875               	movf	??_write_byte+1,w
  4746  1645  00F7               	movwf	write_byte@val
  4747                           
  4748                           ;Thermometer_src.c: 59:   }
  4749  1646  3001               	movlw	1
  4750  1647  02F8               	subwf	write_byte@i,f
  4751  1648  0878               	movf	write_byte@i,w
  4752  1649  1903               	btfsc	3,2
  4753  164A  0008               	return
  4754  164B  2E1B               	goto	l3360
  4755  164C                     __end_of_write_byte:	
  4756                           
  4757                           	psect	text15
  4758  15E2                     __ptext15:	
  4759 ;; *************** function _reset_temp *****************
  4760 ;; Defined at:
  4761 ;;		line 25 in file "Thermometer_src.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  presence        1    5[COMMON] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0, pclath, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/100
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4775 ;;      Params:         0       0       0       0       0
  4776 ;;      Locals:         1       0       0       0       0
  4777 ;;      Temps:          1       0       0       0       0
  4778 ;;      Totals:         2       0       0       0       0
  4779 ;;Total ram usage:        2 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    1
  4782 ;; This function calls:
  4783 ;;		_delay_temp
  4784 ;; This function is called by:
  4785 ;;		_get_temp
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           
  4790                           ;psect for function _reset_temp
  4791  15E2                     _reset_temp:	
  4792                           
  4793                           ;Thermometer_src.c: 27:   char presence=1;
  4794                           
  4795                           ;incstack = 0
  4796                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  4797  15E2  01F5               	clrf	reset_temp@presence
  4798  15E3  0AF5               	incf	reset_temp@presence,f
  4799  15E4                     l3352:	
  4800                           ;Thermometer_src.c: 28:   while(presence)
  4801                           
  4802                           
  4803                           ;Thermometer_src.c: 28:   while(presence)
  4804  15E4  0875               	movf	reset_temp@presence,w
  4805  15E5  1903               	btfsc	3,2
  4806  15E6  0008               	return
  4807                           
  4808                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  4809  15E7  1283               	bcf	3,5	;RP0=0, select bank0
  4810  15E8  1303               	bcf	3,6	;RP1=0, select bank0
  4811  15E9  1009               	bcf	9,0	;volatile
  4812  15EA  1683               	bsf	3,5	;RP0=1, select bank1
  4813  15EB  1009               	bcf	9,0	;volatile
  4814                           
  4815                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  4816  15EC  3046               	movlw	70
  4817  15ED  00F4               	movwf	??_reset_temp
  4818  15EE  0874               	movf	??_reset_temp,w
  4819  15EF  00F0               	movwf	delay_temp@y
  4820  15F0  3002               	movlw	2
  4821  15F1  160A  118A  2344  160A  118A  	fcall	_delay_temp
  4822                           
  4823                           ;Thermometer_src.c: 32:     TRISE0 =1;
  4824  15F6  1683               	bsf	3,5	;RP0=1, select bank1
  4825  15F7  1303               	bcf	3,6	;RP1=0, select bank1
  4826  15F8  1409               	bsf	9,0	;volatile
  4827                           
  4828                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  4829  15F9  3008               	movlw	8
  4830  15FA  00F4               	movwf	??_reset_temp
  4831  15FB  0874               	movf	??_reset_temp,w
  4832  15FC  00F0               	movwf	delay_temp@y
  4833  15FD  3002               	movlw	2
  4834  15FE  160A  118A  2344  160A  118A  	fcall	_delay_temp
  4835                           
  4836                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  4837  1603  1283               	bcf	3,5	;RP0=0, select bank0
  4838  1604  1303               	bcf	3,6	;RP1=0, select bank0
  4839  1605  1C09               	btfss	9,0	;volatile
  4840  1606  2E0A               	goto	l3348
  4841  1607  01F5               	clrf	reset_temp@presence
  4842  1608  0AF5               	incf	reset_temp@presence,f
  4843  1609  2E0B               	goto	l3350
  4844  160A                     l3348:	
  4845  160A  01F5               	clrf	reset_temp@presence
  4846  160B                     l3350:	
  4847                           
  4848                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  4849  160B  303C               	movlw	60
  4850  160C  00F4               	movwf	??_reset_temp
  4851  160D  0874               	movf	??_reset_temp,w
  4852  160E  00F0               	movwf	delay_temp@y
  4853  160F  3002               	movlw	2
  4854  1610  160A  118A  2344  160A  118A  	fcall	_delay_temp
  4855  1615  2DE4               	goto	l3352
  4856  1616                     __end_of_reset_temp:	
  4857                           
  4858                           	psect	text16
  4859  15AE                     __ptext16:	
  4860 ;; *************** function _read_byte *****************
  4861 ;; Defined at:
  4862 ;;		line 62 in file "Thermometer_src.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  i               1    6[COMMON] unsigned char 
  4867 ;;  value           1    5[COMMON] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      unsigned char 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/100
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4877 ;;      Params:         0       0       0       0       0
  4878 ;;      Locals:         2       0       0       0       0
  4879 ;;      Temps:          1       0       0       0       0
  4880 ;;      Totals:         3       0       0       0       0
  4881 ;;Total ram usage:        3 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    1
  4884 ;; This function calls:
  4885 ;;		_delay_temp
  4886 ;; This function is called by:
  4887 ;;		_get_temp
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           
  4892                           ;psect for function _read_byte
  4893  15AE                     _read_byte:	
  4894                           
  4895                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  4896                           
  4897                           ;incstack = 0
  4898                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  4899  15AE  01F5               	clrf	read_byte@value
  4900                           
  4901                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  4902  15AF  3008               	movlw	8
  4903  15B0  00F4               	movwf	??_read_byte
  4904  15B1  0874               	movf	??_read_byte,w
  4905  15B2  00F6               	movwf	read_byte@i
  4906  15B3                     l3402:	
  4907                           
  4908                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  4909  15B3  1003               	clrc
  4910  15B4  0CF5               	rrf	read_byte@value,f
  4911                           
  4912                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  4913  15B5  1283               	bcf	3,5	;RP0=0, select bank0
  4914  15B6  1303               	bcf	3,6	;RP1=0, select bank0
  4915  15B7  1009               	bcf	9,0	;volatile
  4916  15B8  1683               	bsf	3,5	;RP0=1, select bank1
  4917  15B9  1009               	bcf	9,0	;volatile
  4918                           
  4919                           ;Thermometer_src.c: 71:    __nop();
  4920  15BA  0000               	nop
  4921                           
  4922                           ;Thermometer_src.c: 72:    __nop();
  4923  15BB  0000               	nop
  4924                           
  4925                           ;Thermometer_src.c: 73:    __nop();
  4926  15BC  0000               	nop
  4927                           
  4928                           ;Thermometer_src.c: 74:    __nop();
  4929  15BD  0000               	nop
  4930                           
  4931                           ;Thermometer_src.c: 75:    __nop();
  4932  15BE  0000               	nop
  4933                           
  4934                           ;Thermometer_src.c: 76:    __nop();
  4935  15BF  0000               	nop
  4936                           
  4937                           ;Thermometer_src.c: 77:    TRISE0 =1;
  4938  15C0  1683               	bsf	3,5	;RP0=1, select bank1
  4939  15C1  1303               	bcf	3,6	;RP1=0, select bank1
  4940  15C2  1409               	bsf	9,0	;volatile
  4941                           
  4942                           ;Thermometer_src.c: 78:    __nop();
  4943  15C3  0000               	nop
  4944                           
  4945                           ;Thermometer_src.c: 79:    __nop();
  4946  15C4  0000               	nop
  4947                           
  4948                           ;Thermometer_src.c: 80:    __nop();
  4949  15C5  0000               	nop
  4950                           
  4951                           ;Thermometer_src.c: 81:    __nop();
  4952  15C6  0000               	nop
  4953                           
  4954                           ;Thermometer_src.c: 82:    __nop();
  4955  15C7  0000               	nop
  4956                           
  4957                           ;Thermometer_src.c: 83:    j=RE0;
  4958  15C8  3000               	movlw	0
  4959  15C9  1283               	bcf	3,5	;RP0=0, select bank0
  4960  15CA  1303               	bcf	3,6	;RP1=0, select bank0
  4961  15CB  1809               	btfsc	9,0	;volatile
  4962  15CC  3001               	movlw	1
  4963  15CD  00C0               	movwf	read_byte@j
  4964                           
  4965                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  4966  15CE  0840               	movf	read_byte@j,w
  4967  15CF  1D03               	btfss	3,2
  4968  15D0  17F5               	bsf	read_byte@value,7
  4969                           
  4970                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  4971  15D1  3007               	movlw	7
  4972  15D2  00F4               	movwf	??_read_byte
  4973  15D3  0874               	movf	??_read_byte,w
  4974  15D4  00F0               	movwf	delay_temp@y
  4975  15D5  3002               	movlw	2
  4976  15D6  160A  118A  2344  160A  118A  	fcall	_delay_temp
  4977                           
  4978                           ;Thermometer_src.c: 86:   }
  4979  15DB  3001               	movlw	1
  4980  15DC  02F6               	subwf	read_byte@i,f
  4981  15DD  0876               	movf	read_byte@i,w
  4982  15DE  1D03               	btfss	3,2
  4983  15DF  2DB3               	goto	l3402
  4984                           
  4985                           ;Thermometer_src.c: 87:   return(value);
  4986  15E0  0875               	movf	read_byte@value,w
  4987  15E1  0008               	return
  4988  15E2                     __end_of_read_byte:	
  4989                           
  4990                           	psect	text17
  4991  1344                     __ptext17:	
  4992 ;; *************** function _delay_temp *****************
  4993 ;; Defined at:
  4994 ;;		line 121 in file "Thermometer_src.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  x               1    wreg     unsigned char 
  4997 ;;  y               1    0[COMMON] unsigned char 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  x               1    2[COMMON] unsigned char 
  5000 ;;  z               1    3[COMMON] unsigned char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/100
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5010 ;;      Params:         1       0       0       0       0
  5011 ;;      Locals:         2       0       0       0       0
  5012 ;;      Temps:          1       0       0       0       0
  5013 ;;      Totals:         4       0       0       0       0
  5014 ;;Total ram usage:        4 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_reset_temp
  5020 ;;		_write_byte
  5021 ;;		_read_byte
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           
  5026                           ;psect for function _delay_temp
  5027  1344                     _delay_temp:	
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5031                           ;delay_temp@x stored from wreg
  5032  1344  00F2               	movwf	delay_temp@x
  5033  1345                     l357:	
  5034                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5035                           
  5036                           
  5037                           ;Thermometer_src.c: 125:  z=y;
  5038  1345  0870               	movf	delay_temp@y,w
  5039  1346  00F1               	movwf	??_delay_temp
  5040  1347  0871               	movf	??_delay_temp,w
  5041  1348  00F3               	movwf	delay_temp@z
  5042  1349                     l3278:	
  5043  1349  3001               	movlw	1
  5044  134A  02F3               	subwf	delay_temp@z,f
  5045  134B  1D03               	btfss	3,2
  5046  134C  2B49               	goto	l3278
  5047                           
  5048                           ;Thermometer_src.c: 127:  }while(--x);
  5049  134D  3001               	movlw	1
  5050  134E  02F2               	subwf	delay_temp@x,f
  5051  134F  1903               	btfsc	3,2
  5052  1350  0008               	return
  5053  1351  2B45               	goto	l357
  5054  1352                     __end_of_delay_temp:	
  5055                           
  5056                           	psect	text18
  5057  13B9                     __ptext18:	
  5058 ;; *************** function _delay2 *****************
  5059 ;; Defined at:
  5060 ;;		line 130 in file "Thermometer_src.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;  i               2    0[COMMON] int 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, btemp+1
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/100
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5074 ;;      Params:         0       0       0       0       0
  5075 ;;      Locals:         2       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0
  5077 ;;      Totals:         2       0       0       0       0
  5078 ;;Total ram usage:        2 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_get_temp
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _delay2
  5089  13B9                     _delay2:	
  5090                           
  5091                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5092                           
  5093                           ;incstack = 0
  5094                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5095  13B9  01F0               	clrf	delay2@i
  5096  13BA  01F1               	clrf	delay2@i+1
  5097  13BB                     l3454:	
  5098                           
  5099                           ;Thermometer_src.c: 132:  }
  5100  13BB  3001               	movlw	1
  5101  13BC  07F0               	addwf	delay2@i,f
  5102  13BD  1803               	skipnc
  5103  13BE  0AF1               	incf	delay2@i+1,f
  5104  13BF  3000               	movlw	0
  5105  13C0  07F1               	addwf	delay2@i+1,f
  5106  13C1  0871               	movf	delay2@i+1,w
  5107  13C2  3A80               	xorlw	128
  5108  13C3  00FF               	movwf	127
  5109  13C4  3080               	movlw	128
  5110  13C5  027F               	subwf	127,w
  5111  13C6  1D03               	skipz
  5112  13C7  2BCA               	goto	u2255
  5113  13C8  3032               	movlw	50
  5114  13C9  0270               	subwf	delay2@i,w
  5115  13CA                     u2255:	
  5116  13CA  1803               	btfsc	3,0
  5117  13CB  0008               	return
  5118  13CC  2BBB               	goto	l3454
  5119  13CD                     __end_of_delay2:	
  5120                           
  5121                           	psect	text19
  5122  157C                     __ptext19:	
  5123 ;; *************** function ___lwmod *****************
  5124 ;; Defined at:
  5125 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  divisor         2    0[COMMON] unsigned int 
  5128 ;;  dividend        2    2[COMMON] unsigned int 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;  counter         1    5[COMMON] unsigned char 
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  2    0[COMMON] unsigned int 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 300/0
  5137 ;;		On exit  : 300/0
  5138 ;;		Unchanged: 300/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5140 ;;      Params:         4       0       0       0       0
  5141 ;;      Locals:         1       0       0       0       0
  5142 ;;      Temps:          1       0       0       0       0
  5143 ;;      Totals:         6       0       0       0       0
  5144 ;;Total ram usage:        6 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_get_temp
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function ___lwmod
  5155  157C                     ___lwmod:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5159  157C  0870               	movf	___lwmod@divisor,w
  5160  157D  0471               	iorwf	___lwmod@divisor+1,w
  5161  157E  1903               	btfsc	3,2
  5162  157F  2DA9               	goto	l3758
  5163  1580  01F5               	clrf	___lwmod@counter
  5164  1581  0AF5               	incf	___lwmod@counter,f
  5165  1582                     l3748:	
  5166  1582  1BF1               	btfsc	___lwmod@divisor+1,7
  5167  1583  2D90               	goto	l3750
  5168  1584  3001               	movlw	1
  5169  1585                     u2975:	
  5170  1585  1003               	clrc
  5171  1586  0DF0               	rlf	___lwmod@divisor,f
  5172  1587  0DF1               	rlf	___lwmod@divisor+1,f
  5173  1588  3EFF               	addlw	-1
  5174  1589  1D03               	skipz
  5175  158A  2D85               	goto	u2975
  5176  158B  3001               	movlw	1
  5177  158C  00F4               	movwf	??___lwmod
  5178  158D  0874               	movf	??___lwmod,w
  5179  158E  07F5               	addwf	___lwmod@counter,f
  5180  158F  2D82               	goto	l3748
  5181  1590                     l3750:	
  5182  1590  0871               	movf	___lwmod@divisor+1,w
  5183  1591  0273               	subwf	___lwmod@dividend+1,w
  5184  1592  1D03               	skipz
  5185  1593  2D96               	goto	u2995
  5186  1594  0870               	movf	___lwmod@divisor,w
  5187  1595  0272               	subwf	___lwmod@dividend,w
  5188  1596                     u2995:	
  5189  1596  1C03               	skipc
  5190  1597  2D9E               	goto	l3754
  5191  1598  0870               	movf	___lwmod@divisor,w
  5192  1599  02F2               	subwf	___lwmod@dividend,f
  5193  159A  0871               	movf	___lwmod@divisor+1,w
  5194  159B  1C03               	skipc
  5195  159C  03F3               	decf	___lwmod@dividend+1,f
  5196  159D  02F3               	subwf	___lwmod@dividend+1,f
  5197  159E                     l3754:	
  5198  159E  3001               	movlw	1
  5199  159F                     u3005:	
  5200  159F  1003               	clrc
  5201  15A0  0CF1               	rrf	___lwmod@divisor+1,f
  5202  15A1  0CF0               	rrf	___lwmod@divisor,f
  5203  15A2  3EFF               	addlw	-1
  5204  15A3  1D03               	skipz
  5205  15A4  2D9F               	goto	u3005
  5206  15A5  3001               	movlw	1
  5207  15A6  02F5               	subwf	___lwmod@counter,f
  5208  15A7  1D03               	btfss	3,2
  5209  15A8  2D90               	goto	l3750
  5210  15A9                     l3758:	
  5211  15A9  0873               	movf	___lwmod@dividend+1,w
  5212  15AA  00F1               	movwf	?___lwmod+1
  5213  15AB  0872               	movf	___lwmod@dividend,w
  5214  15AC  00F0               	movwf	?___lwmod
  5215  15AD  0008               	return
  5216  15AE                     __end_of___lwmod:	
  5217                           
  5218                           	psect	text20
  5219  164C                     __ptext20:	
  5220 ;; *************** function ___lwdiv *****************
  5221 ;; Defined at:
  5222 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  divisor         2    6[COMMON] unsigned int 
  5225 ;;  dividend        2    8[COMMON] unsigned int 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  quotient        2   11[COMMON] unsigned int 
  5228 ;;  counter         1   13[COMMON] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2    6[COMMON] unsigned int 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 300/0
  5235 ;;		On exit  : 300/0
  5236 ;;		Unchanged: 300/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5238 ;;      Params:         4       0       0       0       0
  5239 ;;      Locals:         3       0       0       0       0
  5240 ;;      Temps:          1       0       0       0       0
  5241 ;;      Totals:         8       0       0       0       0
  5242 ;;Total ram usage:        8 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; This function calls:
  5245 ;;		Nothing
  5246 ;; This function is called by:
  5247 ;;		_get_temp
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           
  5252                           ;psect for function ___lwdiv
  5253  164C                     ___lwdiv:	
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5257  164C  01FB               	clrf	___lwdiv@quotient
  5258  164D  01FC               	clrf	___lwdiv@quotient+1
  5259  164E  0876               	movf	___lwdiv@divisor,w
  5260  164F  0477               	iorwf	___lwdiv@divisor+1,w
  5261  1650  1903               	btfsc	3,2
  5262  1651  2E83               	goto	l3736
  5263  1652  01FD               	clrf	___lwdiv@counter
  5264  1653  0AFD               	incf	___lwdiv@counter,f
  5265  1654                     l3724:	
  5266  1654  1BF7               	btfsc	___lwdiv@divisor+1,7
  5267  1655  2E62               	goto	l3726
  5268  1656  3001               	movlw	1
  5269  1657                     u2905:	
  5270  1657  1003               	clrc
  5271  1658  0DF6               	rlf	___lwdiv@divisor,f
  5272  1659  0DF7               	rlf	___lwdiv@divisor+1,f
  5273  165A  3EFF               	addlw	-1
  5274  165B  1D03               	skipz
  5275  165C  2E57               	goto	u2905
  5276  165D  3001               	movlw	1
  5277  165E  00FA               	movwf	??___lwdiv
  5278  165F  087A               	movf	??___lwdiv,w
  5279  1660  07FD               	addwf	___lwdiv@counter,f
  5280  1661  2E54               	goto	l3724
  5281  1662                     l3726:	
  5282  1662  3001               	movlw	1
  5283  1663                     u2925:	
  5284  1663  1003               	clrc
  5285  1664  0DFB               	rlf	___lwdiv@quotient,f
  5286  1665  0DFC               	rlf	___lwdiv@quotient+1,f
  5287  1666  3EFF               	addlw	-1
  5288  1667  1D03               	skipz
  5289  1668  2E63               	goto	u2925
  5290  1669  0877               	movf	___lwdiv@divisor+1,w
  5291  166A  0279               	subwf	___lwdiv@dividend+1,w
  5292  166B  1D03               	skipz
  5293  166C  2E6F               	goto	u2935
  5294  166D  0876               	movf	___lwdiv@divisor,w
  5295  166E  0278               	subwf	___lwdiv@dividend,w
  5296  166F                     u2935:	
  5297  166F  1C03               	skipc
  5298  1670  2E78               	goto	l3732
  5299  1671  0876               	movf	___lwdiv@divisor,w
  5300  1672  02F8               	subwf	___lwdiv@dividend,f
  5301  1673  0877               	movf	___lwdiv@divisor+1,w
  5302  1674  1C03               	skipc
  5303  1675  03F9               	decf	___lwdiv@dividend+1,f
  5304  1676  02F9               	subwf	___lwdiv@dividend+1,f
  5305  1677  147B               	bsf	___lwdiv@quotient,0
  5306  1678                     l3732:	
  5307  1678  3001               	movlw	1
  5308  1679                     u2945:	
  5309  1679  1003               	clrc
  5310  167A  0CF7               	rrf	___lwdiv@divisor+1,f
  5311  167B  0CF6               	rrf	___lwdiv@divisor,f
  5312  167C  3EFF               	addlw	-1
  5313  167D  1D03               	skipz
  5314  167E  2E79               	goto	u2945
  5315  167F  3001               	movlw	1
  5316  1680  02FD               	subwf	___lwdiv@counter,f
  5317  1681  1D03               	btfss	3,2
  5318  1682  2E62               	goto	l3726
  5319  1683                     l3736:	
  5320  1683  087C               	movf	___lwdiv@quotient+1,w
  5321  1684  00F7               	movwf	?___lwdiv+1
  5322  1685  087B               	movf	___lwdiv@quotient,w
  5323  1686  00F6               	movwf	?___lwdiv
  5324  1687  0008               	return
  5325  1688                     __end_of___lwdiv:	
  5326                           
  5327                           	psect	text21
  5328  143A                     __ptext21:	
  5329 ;; *************** function ___lbmod *****************
  5330 ;; Defined at:
  5331 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;  dividend        1    wreg     unsigned char 
  5334 ;;  divisor         1    0[COMMON] unsigned char 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  dividend        1    4[COMMON] unsigned char 
  5337 ;;  rem             1    6[COMMON] unsigned char 
  5338 ;;  counter         1    5[COMMON] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      unsigned char 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0
  5343 ;; Tracked objects:
  5344 ;;		On entry : 300/0
  5345 ;;		On exit  : 300/0
  5346 ;;		Unchanged: 300/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5348 ;;      Params:         1       0       0       0       0
  5349 ;;      Locals:         3       0       0       0       0
  5350 ;;      Temps:          3       0       0       0       0
  5351 ;;      Totals:         7       0       0       0       0
  5352 ;;Total ram usage:        7 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		_get_temp
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           
  5362                           ;psect for function ___lbmod
  5363  143A                     ___lbmod:	
  5364                           
  5365                           ;incstack = 0
  5366                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5367                           ;___lbmod@dividend stored from wreg
  5368  143A  00F4               	movwf	___lbmod@dividend
  5369  143B  3008               	movlw	8
  5370  143C  00F1               	movwf	??___lbmod
  5371  143D  0871               	movf	??___lbmod,w
  5372  143E  00F5               	movwf	___lbmod@counter
  5373  143F  01F6               	clrf	___lbmod@rem
  5374  1440                     l3702:	
  5375  1440  0874               	movf	___lbmod@dividend,w
  5376  1441  00F1               	movwf	??___lbmod
  5377  1442  3007               	movlw	7
  5378  1443                     u2865:	
  5379  1443  1003               	clrc
  5380  1444  0CF1               	rrf	??___lbmod,f
  5381  1445  3EFF               	addlw	-1
  5382  1446  1D03               	skipz
  5383  1447  2C43               	goto	u2865
  5384  1448  0876               	movf	___lbmod@rem,w
  5385  1449  00F2               	movwf	??___lbmod+1
  5386  144A  0772               	addwf	??___lbmod+1,w
  5387  144B  0471               	iorwf	??___lbmod,w
  5388  144C  00F3               	movwf	??___lbmod+2
  5389  144D  0873               	movf	??___lbmod+2,w
  5390  144E  00F6               	movwf	___lbmod@rem
  5391  144F  1003               	clrc
  5392  1450  0DF4               	rlf	___lbmod@dividend,f
  5393  1451  0870               	movf	___lbmod@divisor,w
  5394  1452  0276               	subwf	___lbmod@rem,w
  5395  1453  1C03               	skipc
  5396  1454  2C57               	goto	l1314
  5397  1455  0870               	movf	___lbmod@divisor,w
  5398  1456  02F6               	subwf	___lbmod@rem,f
  5399  1457                     l1314:	
  5400  1457  3001               	movlw	1
  5401  1458  02F5               	subwf	___lbmod@counter,f
  5402  1459  1D03               	btfss	3,2
  5403  145A  2C40               	goto	l3702
  5404  145B  0876               	movf	___lbmod@rem,w
  5405  145C  0008               	return
  5406  145D                     __end_of___lbmod:	
  5407                           
  5408                           	psect	text22
  5409  1419                     __ptext22:	
  5410 ;; *************** function ___lbdiv *****************
  5411 ;; Defined at:
  5412 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  dividend        1    wreg     unsigned char 
  5415 ;;  divisor         1    0[COMMON] unsigned char 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  dividend        1    2[COMMON] unsigned char 
  5418 ;;  quotient        1    4[COMMON] unsigned char 
  5419 ;;  counter         1    3[COMMON] unsigned char 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  1    wreg      unsigned char 
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0
  5424 ;; Tracked objects:
  5425 ;;		On entry : 300/0
  5426 ;;		On exit  : 300/0
  5427 ;;		Unchanged: 300/0
  5428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5429 ;;      Params:         1       0       0       0       0
  5430 ;;      Locals:         3       0       0       0       0
  5431 ;;      Temps:          1       0       0       0       0
  5432 ;;      Totals:         5       0       0       0       0
  5433 ;;Total ram usage:        5 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_get_temp
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           
  5443                           ;psect for function ___lbdiv
  5444  1419                     ___lbdiv:	
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5448                           ;___lbdiv@dividend stored from wreg
  5449  1419  00F2               	movwf	___lbdiv@dividend
  5450  141A  01F4               	clrf	___lbdiv@quotient
  5451  141B  0870               	movf	___lbdiv@divisor,w
  5452  141C  1903               	btfsc	3,2
  5453  141D  2C38               	goto	l3694
  5454  141E  01F3               	clrf	___lbdiv@counter
  5455  141F  0AF3               	incf	___lbdiv@counter,f
  5456  1420                     l3682:	
  5457  1420  1BF0               	btfsc	___lbdiv@divisor,7
  5458  1421  2C29               	goto	l3684
  5459  1422  1003               	clrc
  5460  1423  0DF0               	rlf	___lbdiv@divisor,f
  5461  1424  3001               	movlw	1
  5462  1425  00F1               	movwf	??___lbdiv
  5463  1426  0871               	movf	??___lbdiv,w
  5464  1427  07F3               	addwf	___lbdiv@counter,f
  5465  1428  2C20               	goto	l3682
  5466  1429                     l3684:	
  5467  1429  1003               	clrc
  5468  142A  0DF4               	rlf	___lbdiv@quotient,f
  5469  142B  0870               	movf	___lbdiv@divisor,w
  5470  142C  0272               	subwf	___lbdiv@dividend,w
  5471  142D  1C03               	skipc
  5472  142E  2C33               	goto	L2
  5473  142F  0870               	movf	___lbdiv@divisor,w
  5474  1430  02F2               	subwf	___lbdiv@dividend,f
  5475  1431  1474               	bsf	___lbdiv@quotient,0
  5476  1432  1003               	clrc
  5477  1433                     L2:	
  5478  1433  0CF0               	rrf	___lbdiv@divisor,f
  5479  1434  3001               	movlw	1
  5480  1435  02F3               	subwf	___lbdiv@counter,f
  5481  1436  1D03               	btfss	3,2
  5482  1437  2C29               	goto	l3684
  5483  1438                     l3694:	
  5484  1438  0874               	movf	___lbdiv@quotient,w
  5485  1439  0008               	return
  5486  143A                     __end_of___lbdiv:	
  5487                           
  5488                           	psect	text23
  5489  1361                     __ptext23:	
  5490 ;; *************** function _ds1302_init *****************
  5491 ;; Defined at:
  5492 ;;		line 3 in file "clock_src.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      void 
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 300/0
  5503 ;;		On exit  : 300/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5506 ;;      Params:         0       0       0       0       0
  5507 ;;      Locals:         0       0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0
  5509 ;;      Totals:         0       0       0       0       0
  5510 ;;Total ram usage:        0 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    1
  5513 ;; This function calls:
  5514 ;;		_time_write_1
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _ds1302_init
  5522  1361                     _ds1302_init:	
  5523                           
  5524                           ;clock_src.c: 5:    RB0=0;
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5528  1361  1006               	bcf	6,0	;volatile
  5529                           
  5530                           ;clock_src.c: 6:    RB5 =0;
  5531  1362  1286               	bcf	6,5	;volatile
  5532                           
  5533                           ;clock_src.c: 7:    RB5=1;
  5534  1363  1686               	bsf	6,5	;volatile
  5535                           
  5536                           ;clock_src.c: 8:    time_write_1(0x8e);
  5537  1364  308E               	movlw	142
  5538  1365  160A  118A  24A4  160A  118A  	fcall	_time_write_1
  5539                           
  5540                           ;clock_src.c: 9:    time_write_1(0);
  5541  136A  3000               	movlw	0
  5542  136B  160A  118A  24A4   	fcall	_time_write_1
  5543                           
  5544                           ;clock_src.c: 10:    RB5=0;
  5545  136E  1286               	bcf	6,5	;volatile
  5546  136F  0008               	return
  5547  1370                     __end_of_ds1302_init:	
  5548                           
  5549                           	psect	text24
  5550  13F8                     __ptext24:	
  5551 ;; *************** function _display_temp *****************
  5552 ;; Defined at:
  5553 ;;		line 12 in file "Thermometer_src.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;		None
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 300/0
  5564 ;;		On exit  : 300/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5567 ;;      Params:         0       0       0       0       0
  5568 ;;      Locals:         0       0       0       0       0
  5569 ;;      Temps:          0       0       0       0       0
  5570 ;;      Totals:         0       0       0       0       0
  5571 ;;Total ram usage:        0 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    2
  5574 ;; This function calls:
  5575 ;;		_write_char
  5576 ;; This function is called by:
  5577 ;;		_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _display_temp
  5583  13F8                     _display_temp:	
  5584                           
  5585                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5589  13F8  085B               	movf	_shi,w
  5590  13F9  3E30               	addlw	48
  5591  13FA  160A  118A  23E1  160A  118A  	fcall	_write_char
  5592                           
  5593                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5594  13FF  085A               	movf	_ge,w
  5595  1400  3E30               	addlw	48
  5596  1401  160A  118A  23E1  160A  118A  	fcall	_write_char
  5597                           
  5598                           ;Thermometer_src.c: 17:  write_char('.');
  5599  1406  302E               	movlw	46
  5600  1407  160A  118A  23E1  160A  118A  	fcall	_write_char
  5601                           
  5602                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5603  140C  0859               	movf	_shifen,w
  5604  140D  3E30               	addlw	48
  5605  140E  160A  118A  23E1  160A  118A  	fcall	_write_char
  5606                           
  5607                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5608  1413  0858               	movf	_baifen,w
  5609  1414  3E30               	addlw	48
  5610  1415  160A  118A  23E1   	fcall	_write_char
  5611  1418  0008               	return
  5612  1419                     __end_of_display_temp:	
  5613                           
  5614                           	psect	text25
  5615  0818                     __ptext25:	
  5616 ;; *************** function _display_day *****************
  5617 ;; Defined at:
  5618 ;;		line 4 in file "Day_of_week_src.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  num             2    3[COMMON] int 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;		None
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 300/0
  5629 ;;		On exit  : 300/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5632 ;;      Params:         2       0       0       0       0
  5633 ;;      Locals:         0       0       0       0       0
  5634 ;;      Temps:          0       0       0       0       0
  5635 ;;      Totals:         2       0       0       0       0
  5636 ;;Total ram usage:        2 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    2
  5639 ;; This function calls:
  5640 ;;		_write_char
  5641 ;; This function is called by:
  5642 ;;		_main
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           
  5647                           ;psect for function _display_day
  5648  0818                     _display_day:	
  5649                           
  5650                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  5651                           
  5652                           ;incstack = 0
  5653                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5654  0818  0373               	decf	display_day@num,w
  5655  0819  0474               	iorwf	display_day@num+1,w
  5656  081A  1903               	btfsc	3,2
  5657  081B  2820               	goto	l4696
  5658  081C  0873               	movf	display_day@num,w
  5659  081D  0474               	iorwf	display_day@num+1,w
  5660  081E  1D03               	btfss	3,2
  5661  081F  282C               	goto	l4698
  5662  0820                     l4696:	
  5663                           
  5664                           ;Day_of_week_src.c: 6:     write_char('M');
  5665  0820  304D               	movlw	77
  5666  0821  160A  118A  23E1  120A  158A  	fcall	_write_char
  5667                           
  5668                           ;Day_of_week_src.c: 7:     write_char('o');
  5669  0826  306F               	movlw	111
  5670  0827  160A  118A  23E1  120A  158A  	fcall	_write_char
  5671  082C                     l4698:	
  5672                           
  5673                           ;Day_of_week_src.c: 10:     if(num == 2){
  5674  082C  3002               	movlw	2
  5675  082D  0673               	xorwf	display_day@num,w
  5676  082E  0474               	iorwf	display_day@num+1,w
  5677  082F  1D03               	btfss	3,2
  5678  0830  283D               	goto	l4702
  5679                           
  5680                           ;Day_of_week_src.c: 11:     write_char('T');
  5681  0831  3054               	movlw	84
  5682  0832  160A  118A  23E1  120A  158A  	fcall	_write_char
  5683                           
  5684                           ;Day_of_week_src.c: 12:     write_char('u');
  5685  0837  3075               	movlw	117
  5686  0838  160A  118A  23E1  120A  158A  	fcall	_write_char
  5687  083D                     l4702:	
  5688                           
  5689                           ;Day_of_week_src.c: 15:     if(num == 3){
  5690  083D  3003               	movlw	3
  5691  083E  0673               	xorwf	display_day@num,w
  5692  083F  0474               	iorwf	display_day@num+1,w
  5693  0840  1D03               	btfss	3,2
  5694  0841  284E               	goto	l4706
  5695                           
  5696                           ;Day_of_week_src.c: 16:     write_char('W');
  5697  0842  3057               	movlw	87
  5698  0843  160A  118A  23E1  120A  158A  	fcall	_write_char
  5699                           
  5700                           ;Day_of_week_src.c: 17:     write_char('e');
  5701  0848  3065               	movlw	101
  5702  0849  160A  118A  23E1  120A  158A  	fcall	_write_char
  5703  084E                     l4706:	
  5704                           
  5705                           ;Day_of_week_src.c: 20:     if(num == 4){
  5706  084E  3004               	movlw	4
  5707  084F  0673               	xorwf	display_day@num,w
  5708  0850  0474               	iorwf	display_day@num+1,w
  5709  0851  1D03               	btfss	3,2
  5710  0852  285F               	goto	l4710
  5711                           
  5712                           ;Day_of_week_src.c: 21:     write_char('T');
  5713  0853  3054               	movlw	84
  5714  0854  160A  118A  23E1  120A  158A  	fcall	_write_char
  5715                           
  5716                           ;Day_of_week_src.c: 22:     write_char('h');
  5717  0859  3068               	movlw	104
  5718  085A  160A  118A  23E1  120A  158A  	fcall	_write_char
  5719  085F                     l4710:	
  5720                           
  5721                           ;Day_of_week_src.c: 25:     if(num == 5){
  5722  085F  3005               	movlw	5
  5723  0860  0673               	xorwf	display_day@num,w
  5724  0861  0474               	iorwf	display_day@num+1,w
  5725  0862  1D03               	btfss	3,2
  5726  0863  2870               	goto	l4714
  5727                           
  5728                           ;Day_of_week_src.c: 26:     write_char('F');
  5729  0864  3046               	movlw	70
  5730  0865  160A  118A  23E1  120A  158A  	fcall	_write_char
  5731                           
  5732                           ;Day_of_week_src.c: 27:     write_char('r');
  5733  086A  3072               	movlw	114
  5734  086B  160A  118A  23E1  120A  158A  	fcall	_write_char
  5735  0870                     l4714:	
  5736                           
  5737                           ;Day_of_week_src.c: 30:     if(num == 6){
  5738  0870  3006               	movlw	6
  5739  0871  0673               	xorwf	display_day@num,w
  5740  0872  0474               	iorwf	display_day@num+1,w
  5741  0873  1D03               	btfss	3,2
  5742  0874  2881               	goto	l4718
  5743                           
  5744                           ;Day_of_week_src.c: 31:     write_char('S');
  5745  0875  3053               	movlw	83
  5746  0876  160A  118A  23E1  120A  158A  	fcall	_write_char
  5747                           
  5748                           ;Day_of_week_src.c: 32:     write_char('a');
  5749  087B  3061               	movlw	97
  5750  087C  160A  118A  23E1  120A  158A  	fcall	_write_char
  5751  0881                     l4718:	
  5752                           
  5753                           ;Day_of_week_src.c: 35:     if(num == 7){
  5754  0881  3007               	movlw	7
  5755  0882  0673               	xorwf	display_day@num,w
  5756  0883  0474               	iorwf	display_day@num+1,w
  5757  0884  1D03               	btfss	3,2
  5758  0885  0008               	return
  5759                           
  5760                           ;Day_of_week_src.c: 36:     write_char('S');
  5761  0886  3053               	movlw	83
  5762  0887  160A  118A  23E1  120A  158A  	fcall	_write_char
  5763                           
  5764                           ;Day_of_week_src.c: 37:     write_char('u');
  5765  088C  3075               	movlw	117
  5766  088D  160A  118A  23E1   	fcall	_write_char
  5767  0890  0008               	return
  5768  0891                     __end_of_display_day:	
  5769                           
  5770                           	psect	text26
  5771  1763                     __ptext26:	
  5772 ;; *************** function _display_date *****************
  5773 ;; Defined at:
  5774 ;;		line 77 in file "clock_src.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  i               2    5[COMMON] int 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 300/0
  5785 ;;		On exit  : 300/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5788 ;;      Params:         0       0       0       0       0
  5789 ;;      Locals:         2       0       0       0       0
  5790 ;;      Temps:          2       0       0       0       0
  5791 ;;      Totals:         4       0       0       0       0
  5792 ;;Total ram usage:        4 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    2
  5795 ;; This function calls:
  5796 ;;		_write_char
  5797 ;; This function is called by:
  5798 ;;		_main
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           
  5803                           ;psect for function _display_date
  5804  1763                     _display_date:	
  5805                           
  5806                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  5807                           
  5808                           ;incstack = 0
  5809                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5810  1763  1886               	btfsc	6,1	;volatile
  5811  1764  2F6E               	goto	l3890
  5812                           
  5813                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  5814  1765  1683               	bsf	3,5	;RP0=1, select bank1
  5815  1766  0823               	movf	(_table1^(0+128)+3),w
  5816  1767  00F3               	movwf	??_display_date
  5817  1768  0873               	movf	??_display_date,w
  5818  1769  00A0               	movwf	_table1^(0+128)
  5819                           
  5820                           ;clock_src.c: 83:           table1[1]=table1[4];
  5821  176A  0824               	movf	(_table1^(0+128)+4),w
  5822  176B  00F3               	movwf	??_display_date
  5823  176C  0873               	movf	??_display_date,w
  5824  176D  00A1               	movwf	(_table1^(0+128)+1)
  5825  176E                     l3890:	
  5826                           
  5827                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  5828  176E  1683               	bsf	3,5	;RP0=1, select bank1
  5829  176F  0823               	movf	(_table1^(0+128)+3),w
  5830  1770  39F0               	andlw	240
  5831  1771  00F3               	movwf	??_display_date
  5832  1772  01F4               	clrf	??_display_date+1
  5833  1773  0873               	movf	??_display_date,w
  5834  1774  00F5               	movwf	display_date@i
  5835  1775  0874               	movf	??_display_date+1,w
  5836  1776  00F6               	movwf	display_date@i+1
  5837                           
  5838                           ;clock_src.c: 86:      i=i>>4;
  5839  1777  0E75               	swapf	display_date@i,w
  5840  1778  390F               	andlw	15
  5841  1779  00F5               	movwf	display_date@i
  5842  177A  0E76               	swapf	display_date@i+1,w
  5843  177B  39F0               	andlw	240
  5844  177C  04F5               	iorwf	display_date@i,f
  5845  177D  0E76               	swapf	display_date@i+1,w
  5846  177E  390F               	andlw	15
  5847  177F  00F6               	movwf	display_date@i+1
  5848  1780  30F0               	movlw	240
  5849  1781  1DF6               	btfss	display_date@i+1,3
  5850  1782  3000               	movlw	0
  5851  1783  04F6               	iorwf	display_date@i+1,f
  5852                           
  5853                           ;clock_src.c: 87:      write_char(i + '0');
  5854  1784  0875               	movf	display_date@i,w
  5855  1785  3E30               	addlw	48
  5856  1786  160A  118A  23E1  160A  118A  	fcall	_write_char
  5857                           
  5858                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  5859  178B  1683               	bsf	3,5	;RP0=1, select bank1
  5860  178C  0823               	movf	(_table1^(0+128)+3),w
  5861  178D  390F               	andlw	15
  5862  178E  00F3               	movwf	??_display_date
  5863  178F  01F4               	clrf	??_display_date+1
  5864  1790  0873               	movf	??_display_date,w
  5865  1791  00F5               	movwf	display_date@i
  5866  1792  0874               	movf	??_display_date+1,w
  5867  1793  00F6               	movwf	display_date@i+1
  5868                           
  5869                           ;clock_src.c: 90:      write_char(i + '0');
  5870  1794  0875               	movf	display_date@i,w
  5871  1795  3E30               	addlw	48
  5872  1796  160A  118A  23E1  160A  118A  	fcall	_write_char
  5873                           
  5874                           ;clock_src.c: 91:      write_char('/');
  5875  179B  302F               	movlw	47
  5876  179C  160A  118A  23E1  160A  118A  	fcall	_write_char
  5877                           
  5878                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  5879  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  5880  17A2  0824               	movf	(_table1^(0+128)+4),w
  5881  17A3  39F0               	andlw	240
  5882  17A4  00F3               	movwf	??_display_date
  5883  17A5  01F4               	clrf	??_display_date+1
  5884  17A6  0873               	movf	??_display_date,w
  5885  17A7  00F5               	movwf	display_date@i
  5886  17A8  0874               	movf	??_display_date+1,w
  5887  17A9  00F6               	movwf	display_date@i+1
  5888                           
  5889                           ;clock_src.c: 96:      i=i>>4;
  5890  17AA  0E75               	swapf	display_date@i,w
  5891  17AB  390F               	andlw	15
  5892  17AC  00F5               	movwf	display_date@i
  5893  17AD  0E76               	swapf	display_date@i+1,w
  5894  17AE  39F0               	andlw	240
  5895  17AF  04F5               	iorwf	display_date@i,f
  5896  17B0  0E76               	swapf	display_date@i+1,w
  5897  17B1  390F               	andlw	15
  5898  17B2  00F6               	movwf	display_date@i+1
  5899  17B3  30F0               	movlw	240
  5900  17B4  1DF6               	btfss	display_date@i+1,3
  5901  17B5  3000               	movlw	0
  5902  17B6  04F6               	iorwf	display_date@i+1,f
  5903                           
  5904                           ;clock_src.c: 97:      write_char(i + '0');
  5905  17B7  0875               	movf	display_date@i,w
  5906  17B8  3E30               	addlw	48
  5907  17B9  160A  118A  23E1  160A  118A  	fcall	_write_char
  5908                           
  5909                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  5910  17BE  1683               	bsf	3,5	;RP0=1, select bank1
  5911  17BF  0824               	movf	(_table1^(0+128)+4),w
  5912  17C0  390F               	andlw	15
  5913  17C1  00F3               	movwf	??_display_date
  5914  17C2  01F4               	clrf	??_display_date+1
  5915  17C3  0873               	movf	??_display_date,w
  5916  17C4  00F5               	movwf	display_date@i
  5917  17C5  0874               	movf	??_display_date+1,w
  5918  17C6  00F6               	movwf	display_date@i+1
  5919                           
  5920                           ;clock_src.c: 100:      write_char(i + '0');
  5921  17C7  0875               	movf	display_date@i,w
  5922  17C8  3E30               	addlw	48
  5923  17C9  160A  118A  23E1  160A  118A  	fcall	_write_char
  5924                           
  5925                           ;clock_src.c: 101:      write_char('/');
  5926  17CE  302F               	movlw	47
  5927  17CF  160A  118A  23E1  160A  118A  	fcall	_write_char
  5928                           
  5929                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  5930  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  5931  17D5  0826               	movf	(_table1^(0+128)+6),w
  5932  17D6  39F0               	andlw	240
  5933  17D7  00F3               	movwf	??_display_date
  5934  17D8  01F4               	clrf	??_display_date+1
  5935  17D9  0873               	movf	??_display_date,w
  5936  17DA  00F5               	movwf	display_date@i
  5937  17DB  0874               	movf	??_display_date+1,w
  5938  17DC  00F6               	movwf	display_date@i+1
  5939                           
  5940                           ;clock_src.c: 106:      i=i>>4;
  5941  17DD  0E75               	swapf	display_date@i,w
  5942  17DE  390F               	andlw	15
  5943  17DF  00F5               	movwf	display_date@i
  5944  17E0  0E76               	swapf	display_date@i+1,w
  5945  17E1  39F0               	andlw	240
  5946  17E2  04F5               	iorwf	display_date@i,f
  5947  17E3  0E76               	swapf	display_date@i+1,w
  5948  17E4  390F               	andlw	15
  5949  17E5  00F6               	movwf	display_date@i+1
  5950  17E6  30F0               	movlw	240
  5951  17E7  1DF6               	btfss	display_date@i+1,3
  5952  17E8  3000               	movlw	0
  5953  17E9  04F6               	iorwf	display_date@i+1,f
  5954                           
  5955                           ;clock_src.c: 107:      write_char(i + '0');
  5956  17EA  0875               	movf	display_date@i,w
  5957  17EB  3E30               	addlw	48
  5958  17EC  160A  118A  23E1  160A  118A  	fcall	_write_char
  5959                           
  5960                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  5961  17F1  1683               	bsf	3,5	;RP0=1, select bank1
  5962  17F2  0826               	movf	(_table1^(0+128)+6),w
  5963  17F3  390F               	andlw	15
  5964  17F4  00F3               	movwf	??_display_date
  5965  17F5  01F4               	clrf	??_display_date+1
  5966  17F6  0873               	movf	??_display_date,w
  5967  17F7  00F5               	movwf	display_date@i
  5968  17F8  0874               	movf	??_display_date+1,w
  5969  17F9  00F6               	movwf	display_date@i+1
  5970                           
  5971                           ;clock_src.c: 110:      write_char(i + '0');
  5972  17FA  0875               	movf	display_date@i,w
  5973  17FB  3E30               	addlw	48
  5974  17FC  160A  118A  23E1   	fcall	_write_char
  5975  17FF  0008               	return
  5976  1800                     __end_of_display_date:	
  5977                           
  5978                           	psect	text27
  5979  0891                     __ptext27:	
  5980 ;; *************** function _display_clock *****************
  5981 ;; Defined at:
  5982 ;;		line 34 in file "clock_src.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  i               2    5[COMMON] int 
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 300/0
  5993 ;;		On exit  : 300/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5996 ;;      Params:         0       0       0       0       0
  5997 ;;      Locals:         2       0       0       0       0
  5998 ;;      Temps:          2       0       0       0       0
  5999 ;;      Totals:         4       0       0       0       0
  6000 ;;Total ram usage:        4 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    2
  6003 ;; This function calls:
  6004 ;;		_write_char
  6005 ;; This function is called by:
  6006 ;;		_main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _display_clock
  6012  0891                     _display_clock:	
  6013                           
  6014                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6018  0891  1886               	btfsc	6,1	;volatile
  6019  0892  289C               	goto	l3928
  6020                           
  6021                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6022  0893  1683               	bsf	3,5	;RP0=1, select bank1
  6023  0894  0823               	movf	(_table1^(0+128)+3),w
  6024  0895  00F3               	movwf	??_display_clock
  6025  0896  0873               	movf	??_display_clock,w
  6026  0897  00A0               	movwf	_table1^(0+128)
  6027                           
  6028                           ;clock_src.c: 40:           table1[1]=table1[4];
  6029  0898  0824               	movf	(_table1^(0+128)+4),w
  6030  0899  00F3               	movwf	??_display_clock
  6031  089A  0873               	movf	??_display_clock,w
  6032  089B  00A1               	movwf	(_table1^(0+128)+1)
  6033  089C                     l3928:	
  6034                           
  6035                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6036  089C  1683               	bsf	3,5	;RP0=1, select bank1
  6037  089D  0822               	movf	(_table1^(0+128)+2),w
  6038  089E  39F0               	andlw	240
  6039  089F  00F3               	movwf	??_display_clock
  6040  08A0  01F4               	clrf	??_display_clock+1
  6041  08A1  0873               	movf	??_display_clock,w
  6042  08A2  00F5               	movwf	display_clock@i
  6043  08A3  0874               	movf	??_display_clock+1,w
  6044  08A4  00F6               	movwf	display_clock@i+1
  6045                           
  6046                           ;clock_src.c: 44:      i=i>>4;
  6047  08A5  0E75               	swapf	display_clock@i,w
  6048  08A6  390F               	andlw	15
  6049  08A7  00F5               	movwf	display_clock@i
  6050  08A8  0E76               	swapf	display_clock@i+1,w
  6051  08A9  39F0               	andlw	240
  6052  08AA  04F5               	iorwf	display_clock@i,f
  6053  08AB  0E76               	swapf	display_clock@i+1,w
  6054  08AC  390F               	andlw	15
  6055  08AD  00F6               	movwf	display_clock@i+1
  6056  08AE  30F0               	movlw	240
  6057  08AF  1DF6               	btfss	display_clock@i+1,3
  6058  08B0  3000               	movlw	0
  6059  08B1  04F6               	iorwf	display_clock@i+1,f
  6060                           
  6061                           ;clock_src.c: 45:      write_char(i + '0');
  6062  08B2  0875               	movf	display_clock@i,w
  6063  08B3  3E30               	addlw	48
  6064  08B4  160A  118A  23E1  120A  158A  	fcall	_write_char
  6065                           
  6066                           ;clock_src.c: 46:      temp_high = i;
  6067  08B9  0875               	movf	display_clock@i,w
  6068  08BA  00F3               	movwf	??_display_clock
  6069  08BB  0873               	movf	??_display_clock,w
  6070  08BC  00CB               	movwf	_temp_high
  6071                           
  6072                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6073  08BD  1683               	bsf	3,5	;RP0=1, select bank1
  6074  08BE  0822               	movf	(_table1^(0+128)+2),w
  6075  08BF  390F               	andlw	15
  6076  08C0  00F3               	movwf	??_display_clock
  6077  08C1  01F4               	clrf	??_display_clock+1
  6078  08C2  0873               	movf	??_display_clock,w
  6079  08C3  00F5               	movwf	display_clock@i
  6080  08C4  0874               	movf	??_display_clock+1,w
  6081  08C5  00F6               	movwf	display_clock@i+1
  6082                           
  6083                           ;clock_src.c: 50:      write_char(i + '0');
  6084  08C6  0875               	movf	display_clock@i,w
  6085  08C7  3E30               	addlw	48
  6086  08C8  160A  118A  23E1  120A  158A  	fcall	_write_char
  6087                           
  6088                           ;clock_src.c: 51:      write_char(':');
  6089  08CD  303A               	movlw	58
  6090  08CE  160A  118A  23E1  120A  158A  	fcall	_write_char
  6091                           
  6092                           ;clock_src.c: 52:      temp_low = i;
  6093  08D3  0875               	movf	display_clock@i,w
  6094  08D4  00F3               	movwf	??_display_clock
  6095  08D5  0873               	movf	??_display_clock,w
  6096  08D6  00CC               	movwf	_temp_low
  6097                           
  6098                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6099  08D7  1683               	bsf	3,5	;RP0=1, select bank1
  6100  08D8  0821               	movf	(_table1^(0+128)+1),w
  6101  08D9  39F0               	andlw	240
  6102  08DA  00F3               	movwf	??_display_clock
  6103  08DB  01F4               	clrf	??_display_clock+1
  6104  08DC  0873               	movf	??_display_clock,w
  6105  08DD  00F5               	movwf	display_clock@i
  6106  08DE  0874               	movf	??_display_clock+1,w
  6107  08DF  00F6               	movwf	display_clock@i+1
  6108                           
  6109                           ;clock_src.c: 56:      i=i>>4;
  6110  08E0  0E75               	swapf	display_clock@i,w
  6111  08E1  390F               	andlw	15
  6112  08E2  00F5               	movwf	display_clock@i
  6113  08E3  0E76               	swapf	display_clock@i+1,w
  6114  08E4  39F0               	andlw	240
  6115  08E5  04F5               	iorwf	display_clock@i,f
  6116  08E6  0E76               	swapf	display_clock@i+1,w
  6117  08E7  390F               	andlw	15
  6118  08E8  00F6               	movwf	display_clock@i+1
  6119  08E9  30F0               	movlw	240
  6120  08EA  1DF6               	btfss	display_clock@i+1,3
  6121  08EB  3000               	movlw	0
  6122  08EC  04F6               	iorwf	display_clock@i+1,f
  6123                           
  6124                           ;clock_src.c: 57:      write_char(i + '0');
  6125  08ED  0875               	movf	display_clock@i,w
  6126  08EE  3E30               	addlw	48
  6127  08EF  160A  118A  23E1  120A  158A  	fcall	_write_char
  6128                           
  6129                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6130  08F4  1683               	bsf	3,5	;RP0=1, select bank1
  6131  08F5  0821               	movf	(_table1^(0+128)+1),w
  6132  08F6  390F               	andlw	15
  6133  08F7  00F3               	movwf	??_display_clock
  6134  08F8  01F4               	clrf	??_display_clock+1
  6135  08F9  0873               	movf	??_display_clock,w
  6136  08FA  00F5               	movwf	display_clock@i
  6137  08FB  0874               	movf	??_display_clock+1,w
  6138  08FC  00F6               	movwf	display_clock@i+1
  6139                           
  6140                           ;clock_src.c: 61:      write_char(i + '0');
  6141  08FD  0875               	movf	display_clock@i,w
  6142  08FE  3E30               	addlw	48
  6143  08FF  160A  118A  23E1  120A  158A  	fcall	_write_char
  6144                           
  6145                           ;clock_src.c: 62:      write_char(':');
  6146  0904  303A               	movlw	58
  6147  0905  160A  118A  23E1  120A  158A  	fcall	_write_char
  6148                           
  6149                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6150  090A  1683               	bsf	3,5	;RP0=1, select bank1
  6151  090B  0820               	movf	_table1^(0+128),w
  6152  090C  39F0               	andlw	240
  6153  090D  00F3               	movwf	??_display_clock
  6154  090E  01F4               	clrf	??_display_clock+1
  6155  090F  0873               	movf	??_display_clock,w
  6156  0910  00F5               	movwf	display_clock@i
  6157  0911  0874               	movf	??_display_clock+1,w
  6158  0912  00F6               	movwf	display_clock@i+1
  6159                           
  6160                           ;clock_src.c: 66:      i=i>>4;
  6161  0913  0E75               	swapf	display_clock@i,w
  6162  0914  390F               	andlw	15
  6163  0915  00F5               	movwf	display_clock@i
  6164  0916  0E76               	swapf	display_clock@i+1,w
  6165  0917  39F0               	andlw	240
  6166  0918  04F5               	iorwf	display_clock@i,f
  6167  0919  0E76               	swapf	display_clock@i+1,w
  6168  091A  390F               	andlw	15
  6169  091B  00F6               	movwf	display_clock@i+1
  6170  091C  30F0               	movlw	240
  6171  091D  1DF6               	btfss	display_clock@i+1,3
  6172  091E  3000               	movlw	0
  6173  091F  04F6               	iorwf	display_clock@i+1,f
  6174                           
  6175                           ;clock_src.c: 67:      write_char(i + '0');
  6176  0920  0875               	movf	display_clock@i,w
  6177  0921  3E30               	addlw	48
  6178  0922  160A  118A  23E1  120A  158A  	fcall	_write_char
  6179                           
  6180                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6181  0927  1683               	bsf	3,5	;RP0=1, select bank1
  6182  0928  0820               	movf	_table1^(0+128),w
  6183  0929  390F               	andlw	15
  6184  092A  00F3               	movwf	??_display_clock
  6185  092B  01F4               	clrf	??_display_clock+1
  6186  092C  0873               	movf	??_display_clock,w
  6187  092D  00F5               	movwf	display_clock@i
  6188  092E  0874               	movf	??_display_clock+1,w
  6189  092F  00F6               	movwf	display_clock@i+1
  6190                           
  6191                           ;clock_src.c: 71:      write_char(i + '0');
  6192  0930  0875               	movf	display_clock@i,w
  6193  0931  3E30               	addlw	48
  6194  0932  160A  118A  23E1   	fcall	_write_char
  6195  0935  0008               	return
  6196  0936                     __end_of_display_clock:	
  6197                           
  6198                           	psect	text28
  6199  0387                     __ptext28:	
  6200 ;; *************** function _date_settings *****************
  6201 ;; Defined at:
  6202 ;;		line 420 in file "Button_src.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 300/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6216 ;;      Params:         0       0       0       0       0
  6217 ;;      Locals:         0       0       0       0       0
  6218 ;;      Temps:          0       3       0       0       0
  6219 ;;      Totals:         0       3       0       0       0
  6220 ;;Total ram usage:        3 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    3
  6223 ;; This function calls:
  6224 ;;		_button_delay
  6225 ;;		_incrementor
  6226 ;;		_modulus_func
  6227 ;;		_set_time
  6228 ;;		_time_date_delimiter
  6229 ;;		_time_date_hex_terminator
  6230 ;;		_write_char
  6231 ;;		_write_cmd
  6232 ;; This function is called by:
  6233 ;;		_main
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _date_settings
  6239  0387                     _date_settings:	
  6240                           
  6241                           ;Button_src.c: 421:  RC0 = 0;
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6245  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6246  0388  1303               	bcf	3,6	;RP1=0, select bank0
  6247  0389  1007               	bcf	7,0	;volatile
  6248                           
  6249                           ;Button_src.c: 422:  RC1 = 1;
  6250  038A  1487               	bsf	7,1	;volatile
  6251                           
  6252                           ;Button_src.c: 423:  RC2 = 1;
  6253  038B  1507               	bsf	7,2	;volatile
  6254                           
  6255                           ;Button_src.c: 424:  RC3 = 1;
  6256  038C  1587               	bsf	7,3	;volatile
  6257                           
  6258                           ;Button_src.c: 425:   if (RC4 == 0){
  6259  038D  1A07               	btfsc	7,4	;volatile
  6260  038E  0008               	return
  6261                           
  6262                           ;Button_src.c: 426:       write_cmd(0x1);
  6263  038F  3001               	movlw	1
  6264  0390  120A  158A  2001  120A  118A  	fcall	_write_cmd
  6265  0395                     l768:	
  6266                           ;Button_src.c: 427:       for(;;){
  6267                           
  6268                           
  6269                           ;Button_src.c: 428:             write_cmd(0x80);
  6270  0395  3080               	movlw	128
  6271  0396  120A  158A  2001  120A  118A  	fcall	_write_cmd
  6272                           
  6273                           ;Button_src.c: 429:             write_char('D');
  6274  039B  3044               	movlw	68
  6275  039C  160A  118A  23E1  120A  118A  	fcall	_write_char
  6276                           
  6277                           ;Button_src.c: 430:             write_char('a');
  6278  03A1  3061               	movlw	97
  6279  03A2  160A  118A  23E1  120A  118A  	fcall	_write_char
  6280                           
  6281                           ;Button_src.c: 431:             write_char('t');
  6282  03A7  3074               	movlw	116
  6283  03A8  160A  118A  23E1  120A  118A  	fcall	_write_char
  6284                           
  6285                           ;Button_src.c: 432:             write_char('e');
  6286  03AD  3065               	movlw	101
  6287  03AE  160A  118A  23E1  120A  118A  	fcall	_write_char
  6288                           
  6289                           ;Button_src.c: 433:             write_char('_');
  6290  03B3  305F               	movlw	95
  6291  03B4  160A  118A  23E1  120A  118A  	fcall	_write_char
  6292                           
  6293                           ;Button_src.c: 434:             write_char('S');
  6294  03B9  3053               	movlw	83
  6295  03BA  160A  118A  23E1  120A  118A  	fcall	_write_char
  6296                           
  6297                           ;Button_src.c: 435:             write_char('e');
  6298  03BF  3065               	movlw	101
  6299  03C0  160A  118A  23E1  120A  118A  	fcall	_write_char
  6300                           
  6301                           ;Button_src.c: 436:             write_char('t');
  6302  03C5  3074               	movlw	116
  6303  03C6  160A  118A  23E1  120A  118A  	fcall	_write_char
  6304                           
  6305                           ;Button_src.c: 437:             write_char('t');
  6306  03CB  3074               	movlw	116
  6307  03CC  160A  118A  23E1  120A  118A  	fcall	_write_char
  6308                           
  6309                           ;Button_src.c: 438:             write_char('i');
  6310  03D1  3069               	movlw	105
  6311  03D2  160A  118A  23E1  120A  118A  	fcall	_write_char
  6312                           
  6313                           ;Button_src.c: 439:             write_char('n');
  6314  03D7  306E               	movlw	110
  6315  03D8  160A  118A  23E1  120A  118A  	fcall	_write_char
  6316                           
  6317                           ;Button_src.c: 440:             write_char('g');
  6318  03DD  3067               	movlw	103
  6319  03DE  160A  118A  23E1  120A  118A  	fcall	_write_char
  6320                           
  6321                           ;Button_src.c: 441:             write_char('s');
  6322  03E3  3073               	movlw	115
  6323  03E4  160A  118A  23E1  120A  118A  	fcall	_write_char
  6324                           
  6325                           ;Button_src.c: 442:             RC0 = 1;
  6326  03E9  1407               	bsf	7,0	;volatile
  6327                           
  6328                           ;Button_src.c: 443:             RC1 = 0;
  6329  03EA  1087               	bcf	7,1	;volatile
  6330                           
  6331                           ;Button_src.c: 444:             RC2 = 1;
  6332  03EB  1507               	bsf	7,2	;volatile
  6333                           
  6334                           ;Button_src.c: 445:             RC3 = 1;
  6335  03EC  1587               	bsf	7,3	;volatile
  6336                           
  6337                           ;Button_src.c: 446:             if(RC7 == 0 && b =='x'){
  6338  03ED  1B87               	btfsc	7,7	;volatile
  6339  03EE  2C5F               	goto	l4182
  6340  03EF  3078               	movlw	120
  6341  03F0  0649               	xorwf	_b,w
  6342  03F1  1D03               	btfss	3,2
  6343  03F2  2C5F               	goto	l4182
  6344                           
  6345                           ;Button_src.c: 447:                 if(stats == 1)
  6346  03F3  0324               	decf	_stats,w
  6347  03F4  0425               	iorwf	_stats+1,w
  6348  03F5  1D03               	btfss	3,2
  6349  03F6  2BFB               	goto	l770
  6350                           
  6351                           ;Button_src.c: 448:                     a++;
  6352  03F7  3001               	movlw	1
  6353  03F8  00E5               	movwf	??_date_settings
  6354  03F9  0865               	movf	??_date_settings,w
  6355  03FA  07CA               	addwf	_a,f
  6356  03FB                     l770:	
  6357                           
  6358                           ;Button_src.c: 449:                 if(stats == 0){
  6359  03FB  0824               	movf	_stats,w
  6360  03FC  0425               	iorwf	_stats+1,w
  6361  03FD  1D03               	btfss	3,2
  6362  03FE  2C03               	goto	l771
  6363                           
  6364                           ;Button_src.c: 450:                     stats = 1;
  6365  03FF  3001               	movlw	1
  6366  0400  00A4               	movwf	_stats
  6367  0401  3000               	movlw	0
  6368  0402  00A5               	movwf	_stats+1
  6369  0403                     l771:	
  6370                           ;Button_src.c: 451:                 }
  6371                           
  6372                           
  6373                           ;Button_src.c: 453:                     x++ ;
  6374  0403  3001               	movlw	1
  6375  0404  07AE               	addwf	_x,f
  6376  0405  1803               	skipnc
  6377  0406  0AAF               	incf	_x+1,f
  6378  0407  3000               	movlw	0
  6379  0408  07AF               	addwf	_x+1,f
  6380                           
  6381                           ;Button_src.c: 454:                     x = modulus_func(x,10);
  6382  0409  082F               	movf	_x+1,w
  6383  040A  00F8               	movwf	modulus_func@x+1
  6384  040B  082E               	movf	_x,w
  6385  040C  00F7               	movwf	modulus_func@x
  6386  040D  300A               	movlw	10
  6387  040E  00F9               	movwf	modulus_func@y
  6388  040F  3000               	movlw	0
  6389  0410  00FA               	movwf	modulus_func@y+1
  6390  0411  160A  118A  2370  120A  118A  	fcall	_modulus_func
  6391  0416  0878               	movf	?_modulus_func+1,w
  6392  0417  00AF               	movwf	_x+1
  6393  0418  0877               	movf	?_modulus_func,w
  6394  0419  00AE               	movwf	_x
  6395                           
  6396                           ;Button_src.c: 455:                      if (p == 1){
  6397  041A  0322               	decf	_p,w
  6398  041B  0423               	iorwf	_p+1,w
  6399  041C  1D03               	btfss	3,2
  6400  041D  2C37               	goto	l4168
  6401                           
  6402                           ;Button_src.c: 456:                         y = incrementor(y,x,'0');
  6403  041E  082D               	movf	_y+1,w
  6404  041F  00E1               	movwf	incrementor@upper_val+1
  6405  0420  082C               	movf	_y,w
  6406  0421  00E0               	movwf	incrementor@upper_val
  6407  0422  082F               	movf	_x+1,w
  6408  0423  00E3               	movwf	incrementor@lower_val+1
  6409  0424  082E               	movf	_x,w
  6410  0425  00E2               	movwf	incrementor@lower_val
  6411  0426  3030               	movlw	48
  6412  0427  00E5               	movwf	??_date_settings
  6413  0428  0865               	movf	??_date_settings,w
  6414  0429  00E4               	movwf	incrementor@z
  6415  042A  160A  118A  2480  120A  118A  	fcall	_incrementor
  6416  042F  00E6               	movwf	??_date_settings+1
  6417  0430  01E7               	clrf	??_date_settings+2
  6418  0431  0866               	movf	??_date_settings+1,w
  6419  0432  00AC               	movwf	_y
  6420  0433  0867               	movf	??_date_settings+2,w
  6421  0434  00AD               	movwf	_y+1
  6422                           
  6423                           ;Button_src.c: 457:                         p = 0;
  6424  0435  01A2               	clrf	_p
  6425  0436  01A3               	clrf	_p+1
  6426  0437                     l4168:	
  6427                           
  6428                           ;Button_src.c: 459:                     if (x == 9){
  6429  0437  3009               	movlw	9
  6430  0438  062E               	xorwf	_x,w
  6431  0439  042F               	iorwf	_x+1,w
  6432  043A  1D03               	btfss	3,2
  6433  043B  2C40               	goto	l4172
  6434                           
  6435                           ;Button_src.c: 460:                         p = 1;
  6436  043C  3001               	movlw	1
  6437  043D  00A2               	movwf	_p
  6438  043E  3000               	movlw	0
  6439  043F  00A3               	movwf	_p+1
  6440  0440                     l4172:	
  6441                           
  6442                           ;Button_src.c: 462:                     a = time_date_hex_terminator(a,'C');
  6443  0440  3043               	movlw	67
  6444  0441  00E5               	movwf	??_date_settings
  6445  0442  0865               	movf	??_date_settings,w
  6446  0443  00F0               	movwf	time_date_hex_terminator@limiter
  6447  0444  084A               	movf	_a,w
  6448  0445  160A  118A  2352  120A  118A  	fcall	_time_date_hex_terminator
  6449  044A  00E6               	movwf	??_date_settings+1
  6450  044B  0866               	movf	??_date_settings+1,w
  6451  044C  00CA               	movwf	_a
  6452                           
  6453                           ;Button_src.c: 464:                     if(y == 1 && x == 3){
  6454  044D  032C               	decf	_y,w
  6455  044E  042D               	iorwf	_y+1,w
  6456  044F  1D03               	btfss	3,2
  6457  0450  2C5A               	goto	l4180
  6458  0451  3003               	movlw	3
  6459  0452  062E               	xorwf	_x,w
  6460  0453  042F               	iorwf	_x+1,w
  6461  0454  1D03               	btfss	3,2
  6462  0455  2C5A               	goto	l4180
  6463                           
  6464                           ;Button_src.c: 465:                         x = 0;
  6465  0456  01AE               	clrf	_x
  6466  0457  01AF               	clrf	_x+1
  6467                           
  6468                           ;Button_src.c: 466:                         y = 0;
  6469  0458  01AC               	clrf	_y
  6470  0459  01AD               	clrf	_y+1
  6471  045A                     l4180:	
  6472                           
  6473                           ;Button_src.c: 468:                     button_delay();
  6474  045A  160A  118A  23A5  120A  118A  	fcall	_button_delay
  6475  045F                     l4182:	
  6476                           
  6477                           ;Button_src.c: 470:             if(RC7==0 && b == 'y'){
  6478  045F  1283               	bcf	3,5	;RP0=0, select bank0
  6479  0460  1303               	bcf	3,6	;RP1=0, select bank0
  6480  0461  1B87               	btfsc	7,7	;volatile
  6481  0462  2CE5               	goto	l4216
  6482  0463  3079               	movlw	121
  6483  0464  0649               	xorwf	_b,w
  6484  0465  1D03               	btfss	3,2
  6485  0466  2CE5               	goto	l4216
  6486                           
  6487                           ;Button_src.c: 471:                  if(stats == 1)
  6488  0467  0324               	decf	_stats,w
  6489  0468  0425               	iorwf	_stats+1,w
  6490  0469  1D03               	btfss	3,2
  6491  046A  2C6F               	goto	l776
  6492                           
  6493                           ;Button_src.c: 472:                     day_hex++;
  6494  046B  3001               	movlw	1
  6495  046C  00E5               	movwf	??_date_settings
  6496  046D  0865               	movf	??_date_settings,w
  6497  046E  07C7               	addwf	_day_hex,f
  6498  046F                     l776:	
  6499                           
  6500                           ;Button_src.c: 473:                 if(stats == 0){
  6501  046F  0824               	movf	_stats,w
  6502  0470  0425               	iorwf	_stats+1,w
  6503  0471  1D03               	btfss	3,2
  6504  0472  2C77               	goto	l777
  6505                           
  6506                           ;Button_src.c: 474:                     stats = 1;
  6507  0473  3001               	movlw	1
  6508  0474  00A4               	movwf	_stats
  6509  0475  3000               	movlw	0
  6510  0476  00A5               	movwf	_stats+1
  6511  0477                     l777:	
  6512                           ;Button_src.c: 475:                 }
  6513                           
  6514                           
  6515                           ;Button_src.c: 477:                     day_low++;
  6516  0477  3001               	movlw	1
  6517  0478  07A8               	addwf	_day_low,f
  6518  0479  1803               	skipnc
  6519  047A  0AA9               	incf	_day_low+1,f
  6520  047B  3000               	movlw	0
  6521  047C  07A9               	addwf	_day_low+1,f
  6522                           
  6523                           ;Button_src.c: 478:                     day_low = modulus_func(day_low,10);
  6524  047D  0829               	movf	_day_low+1,w
  6525  047E  00F8               	movwf	modulus_func@x+1
  6526  047F  0828               	movf	_day_low,w
  6527  0480  00F7               	movwf	modulus_func@x
  6528  0481  300A               	movlw	10
  6529  0482  00F9               	movwf	modulus_func@y
  6530  0483  3000               	movlw	0
  6531  0484  00FA               	movwf	modulus_func@y+1
  6532  0485  160A  118A  2370  120A  118A  	fcall	_modulus_func
  6533  048A  0878               	movf	?_modulus_func+1,w
  6534  048B  00A9               	movwf	_day_low+1
  6535  048C  0877               	movf	?_modulus_func,w
  6536  048D  00A8               	movwf	_day_low
  6537                           
  6538                           ;Button_src.c: 479:                     day_counter = modulus_func(day_low,8);
  6539  048E  0829               	movf	_day_low+1,w
  6540  048F  00F8               	movwf	modulus_func@x+1
  6541  0490  0828               	movf	_day_low,w
  6542  0491  00F7               	movwf	modulus_func@x
  6543  0492  3008               	movlw	8
  6544  0493  00F9               	movwf	modulus_func@y
  6545  0494  3000               	movlw	0
  6546  0495  00FA               	movwf	modulus_func@y+1
  6547  0496  160A  118A  2370  120A  118A  	fcall	_modulus_func
  6548  049B  0878               	movf	?_modulus_func+1,w
  6549  049C  00A1               	movwf	_day_counter+1
  6550  049D  0877               	movf	?_modulus_func,w
  6551  049E  00A0               	movwf	_day_counter
  6552                           
  6553                           ;Button_src.c: 480:                     if (p == 1){
  6554  049F  0322               	decf	_p,w
  6555  04A0  0423               	iorwf	_p+1,w
  6556  04A1  1D03               	btfss	3,2
  6557  04A2  2CBC               	goto	l4202
  6558                           
  6559                           ;Button_src.c: 481:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6560  04A3  0827               	movf	_day_high+1,w
  6561  04A4  00E1               	movwf	incrementor@upper_val+1
  6562  04A5  0826               	movf	_day_high,w
  6563  04A6  00E0               	movwf	incrementor@upper_val
  6564  04A7  0829               	movf	_day_low+1,w
  6565  04A8  00E3               	movwf	incrementor@lower_val+1
  6566  04A9  0828               	movf	_day_low,w
  6567  04AA  00E2               	movwf	incrementor@lower_val
  6568  04AB  3030               	movlw	48
  6569  04AC  00E5               	movwf	??_date_settings
  6570  04AD  0865               	movf	??_date_settings,w
  6571  04AE  00E4               	movwf	incrementor@z
  6572  04AF  160A  118A  2480  120A  118A  	fcall	_incrementor
  6573  04B4  00E6               	movwf	??_date_settings+1
  6574  04B5  01E7               	clrf	??_date_settings+2
  6575  04B6  0866               	movf	??_date_settings+1,w
  6576  04B7  00A6               	movwf	_day_high
  6577  04B8  0867               	movf	??_date_settings+2,w
  6578  04B9  00A7               	movwf	_day_high+1
  6579                           
  6580                           ;Button_src.c: 482:                         p = 0;
  6581  04BA  01A2               	clrf	_p
  6582  04BB  01A3               	clrf	_p+1
  6583  04BC                     l4202:	
  6584                           
  6585                           ;Button_src.c: 484:                     if (day_low == 9){
  6586  04BC  3009               	movlw	9
  6587  04BD  0628               	xorwf	_day_low,w
  6588  04BE  0429               	iorwf	_day_low+1,w
  6589  04BF  1D03               	btfss	3,2
  6590  04C0  2CC5               	goto	l4206
  6591                           
  6592                           ;Button_src.c: 485:                         p = 1;
  6593  04C1  3001               	movlw	1
  6594  04C2  00A2               	movwf	_p
  6595  04C3  3000               	movlw	0
  6596  04C4  00A3               	movwf	_p+1
  6597  04C5                     l4206:	
  6598                           
  6599                           ;Button_src.c: 487:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6600  04C5  3063               	movlw	99
  6601  04C6  00E5               	movwf	??_date_settings
  6602  04C7  0865               	movf	??_date_settings,w
  6603  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6604  04C9  0847               	movf	_day_hex,w
  6605  04CA  160A  118A  2352  120A  118A  	fcall	_time_date_hex_terminator
  6606  04CF  00E6               	movwf	??_date_settings+1
  6607  04D0  0866               	movf	??_date_settings+1,w
  6608  04D1  00C7               	movwf	_day_hex
  6609                           
  6610                           ;Button_src.c: 488:                     if(day_high == 3 && day_low==2 ){
  6611  04D2  3003               	movlw	3
  6612  04D3  0626               	xorwf	_day_high,w
  6613  04D4  0427               	iorwf	_day_high+1,w
  6614  04D5  1D03               	btfss	3,2
  6615  04D6  2CE0               	goto	l4214
  6616  04D7  3002               	movlw	2
  6617  04D8  0628               	xorwf	_day_low,w
  6618  04D9  0429               	iorwf	_day_low+1,w
  6619  04DA  1D03               	btfss	3,2
  6620  04DB  2CE0               	goto	l4214
  6621                           
  6622                           ;Button_src.c: 489:                         day_high = 0;
  6623  04DC  01A6               	clrf	_day_high
  6624  04DD  01A7               	clrf	_day_high+1
  6625                           
  6626                           ;Button_src.c: 490:                         day_low = 0;
  6627  04DE  01A8               	clrf	_day_low
  6628  04DF  01A9               	clrf	_day_low+1
  6629  04E0                     l4214:	
  6630                           
  6631                           ;Button_src.c: 492:                     button_delay();
  6632  04E0  160A  118A  23A5  120A  118A  	fcall	_button_delay
  6633  04E5                     l4216:	
  6634                           
  6635                           ;Button_src.c: 494:             if(RC7==0 && b == 'z'){
  6636  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6637  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  6638  04E7  1B87               	btfsc	7,7	;volatile
  6639  04E8  2D4C               	goto	l4248
  6640  04E9  307A               	movlw	122
  6641  04EA  0649               	xorwf	_b,w
  6642  04EB  1D03               	btfss	3,2
  6643  04EC  2D4C               	goto	l4248
  6644                           
  6645                           ;Button_src.c: 495:                 if(stats == 1)
  6646  04ED  0324               	decf	_stats,w
  6647  04EE  0425               	iorwf	_stats+1,w
  6648  04EF  1D03               	btfss	3,2
  6649  04F0  2CF5               	goto	l782
  6650                           
  6651                           ;Button_src.c: 496:                    c++;
  6652  04F1  3001               	movlw	1
  6653  04F2  00E5               	movwf	??_date_settings
  6654  04F3  0865               	movf	??_date_settings,w
  6655  04F4  07C8               	addwf	_c,f
  6656  04F5                     l782:	
  6657                           
  6658                           ;Button_src.c: 497:                 if(stats == 0){
  6659  04F5  0824               	movf	_stats,w
  6660  04F6  0425               	iorwf	_stats+1,w
  6661  04F7  1D03               	btfss	3,2
  6662  04F8  2CFD               	goto	l783
  6663                           
  6664                           ;Button_src.c: 498:                     stats = 1;
  6665  04F9  3001               	movlw	1
  6666  04FA  00A4               	movwf	_stats
  6667  04FB  3000               	movlw	0
  6668  04FC  00A5               	movwf	_stats+1
  6669  04FD                     l783:	
  6670                           ;Button_src.c: 499:                 }
  6671                           
  6672                           
  6673                           ;Button_src.c: 501:                     t++;
  6674  04FD  3001               	movlw	1
  6675  04FE  07B2               	addwf	_t,f
  6676  04FF  1803               	skipnc
  6677  0500  0AB3               	incf	_t+1,f
  6678  0501  3000               	movlw	0
  6679  0502  07B3               	addwf	_t+1,f
  6680                           
  6681                           ;Button_src.c: 502:                     t = modulus_func(t,10);
  6682  0503  0833               	movf	_t+1,w
  6683  0504  00F8               	movwf	modulus_func@x+1
  6684  0505  0832               	movf	_t,w
  6685  0506  00F7               	movwf	modulus_func@x
  6686  0507  300A               	movlw	10
  6687  0508  00F9               	movwf	modulus_func@y
  6688  0509  3000               	movlw	0
  6689  050A  00FA               	movwf	modulus_func@y+1
  6690  050B  160A  118A  2370  120A  118A  	fcall	_modulus_func
  6691  0510  0878               	movf	?_modulus_func+1,w
  6692  0511  00B3               	movwf	_t+1
  6693  0512  0877               	movf	?_modulus_func,w
  6694  0513  00B2               	movwf	_t
  6695                           
  6696                           ;Button_src.c: 503:                      if (p == 1){
  6697  0514  0322               	decf	_p,w
  6698  0515  0423               	iorwf	_p+1,w
  6699  0516  1D03               	btfss	3,2
  6700  0517  2D31               	goto	l4234
  6701                           
  6702                           ;Button_src.c: 504:                         w = incrementor(w,t,'0');
  6703  0518  0831               	movf	_w+1,w
  6704  0519  00E1               	movwf	incrementor@upper_val+1
  6705  051A  0830               	movf	_w,w
  6706  051B  00E0               	movwf	incrementor@upper_val
  6707  051C  0833               	movf	_t+1,w
  6708  051D  00E3               	movwf	incrementor@lower_val+1
  6709  051E  0832               	movf	_t,w
  6710  051F  00E2               	movwf	incrementor@lower_val
  6711  0520  3030               	movlw	48
  6712  0521  00E5               	movwf	??_date_settings
  6713  0522  0865               	movf	??_date_settings,w
  6714  0523  00E4               	movwf	incrementor@z
  6715  0524  160A  118A  2480  120A  118A  	fcall	_incrementor
  6716  0529  00E6               	movwf	??_date_settings+1
  6717  052A  01E7               	clrf	??_date_settings+2
  6718  052B  0866               	movf	??_date_settings+1,w
  6719  052C  00B0               	movwf	_w
  6720  052D  0867               	movf	??_date_settings+2,w
  6721  052E  00B1               	movwf	_w+1
  6722                           
  6723                           ;Button_src.c: 505:                         p = 0;
  6724  052F  01A2               	clrf	_p
  6725  0530  01A3               	clrf	_p+1
  6726  0531                     l4234:	
  6727                           
  6728                           ;Button_src.c: 507:                     if (t == 9){
  6729  0531  3009               	movlw	9
  6730  0532  0632               	xorwf	_t,w
  6731  0533  0433               	iorwf	_t+1,w
  6732  0534  1D03               	btfss	3,2
  6733  0535  2D3A               	goto	l4238
  6734                           
  6735                           ;Button_src.c: 508:                         p = 1;
  6736  0536  3001               	movlw	1
  6737  0537  00A2               	movwf	_p
  6738  0538  3000               	movlw	0
  6739  0539  00A3               	movwf	_p+1
  6740  053A                     l4238:	
  6741                           
  6742                           ;Button_src.c: 511:                      if(c == (0x59 + 1)){
  6743  053A  305A               	movlw	90
  6744  053B  0648               	xorwf	_c,w
  6745  053C  1903               	btfsc	3,2
  6746                           
  6747                           ;Button_src.c: 512:                         c = 0x00;
  6748  053D  01C8               	clrf	_c
  6749                           
  6750                           ;Button_src.c: 514:                     if(w == 6){
  6751  053E  3006               	movlw	6
  6752  053F  0630               	xorwf	_w,w
  6753  0540  0431               	iorwf	_w+1,w
  6754  0541  1D03               	btfss	3,2
  6755  0542  2D47               	goto	l4246
  6756                           
  6757                           ;Button_src.c: 515:                         w = 0;
  6758  0543  01B0               	clrf	_w
  6759  0544  01B1               	clrf	_w+1
  6760                           
  6761                           ;Button_src.c: 516:                         t = 0;
  6762  0545  01B2               	clrf	_t
  6763  0546  01B3               	clrf	_t+1
  6764  0547                     l4246:	
  6765                           
  6766                           ;Button_src.c: 518:                     button_delay();
  6767  0547  160A  118A  23A5  120A  118A  	fcall	_button_delay
  6768  054C                     l4248:	
  6769                           
  6770                           ;Button_src.c: 525:                     a = time_date_delimiter(a,0x11,'9',1);
  6771  054C  3011               	movlw	17
  6772  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6773  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6774  054F  00E5               	movwf	??_date_settings
  6775  0550  0865               	movf	??_date_settings,w
  6776  0551  00F0               	movwf	time_date_delimiter@hex
  6777  0552  3039               	movlw	57
  6778  0553  00E6               	movwf	??_date_settings+1
  6779  0554  0866               	movf	??_date_settings+1,w
  6780  0555  00F1               	movwf	time_date_delimiter@limiter
  6781  0556  3001               	movlw	1
  6782  0557  00F2               	movwf	time_date_delimiter@type
  6783  0558  3000               	movlw	0
  6784  0559  00F3               	movwf	time_date_delimiter@type+1
  6785  055A  084A               	movf	_a,w
  6786  055B  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6787  0560  00E7               	movwf	??_date_settings+2
  6788  0561  0867               	movf	??_date_settings+2,w
  6789  0562  00CA               	movwf	_a
  6790                           
  6791                           ;Button_src.c: 527:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6792  0563  3011               	movlw	17
  6793  0564  00E5               	movwf	??_date_settings
  6794  0565  0865               	movf	??_date_settings,w
  6795  0566  00F0               	movwf	time_date_delimiter@hex
  6796  0567  3039               	movlw	57
  6797  0568  00E6               	movwf	??_date_settings+1
  6798  0569  0866               	movf	??_date_settings+1,w
  6799  056A  00F1               	movwf	time_date_delimiter@limiter
  6800  056B  3002               	movlw	2
  6801  056C  00F2               	movwf	time_date_delimiter@type
  6802  056D  3000               	movlw	0
  6803  056E  00F3               	movwf	time_date_delimiter@type+1
  6804  056F  0847               	movf	_day_hex,w
  6805  0570  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6806  0575  00E7               	movwf	??_date_settings+2
  6807  0576  0867               	movf	??_date_settings+2,w
  6808  0577  00C7               	movwf	_day_hex
  6809                           
  6810                           ;Button_src.c: 528:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6811  0578  3021               	movlw	33
  6812  0579  00E5               	movwf	??_date_settings
  6813  057A  0865               	movf	??_date_settings,w
  6814  057B  00F0               	movwf	time_date_delimiter@hex
  6815  057C  304A               	movlw	74
  6816  057D  00E6               	movwf	??_date_settings+1
  6817  057E  0866               	movf	??_date_settings+1,w
  6818  057F  00F1               	movwf	time_date_delimiter@limiter
  6819  0580  3002               	movlw	2
  6820  0581  00F2               	movwf	time_date_delimiter@type
  6821  0582  3000               	movlw	0
  6822  0583  00F3               	movwf	time_date_delimiter@type+1
  6823  0584  0847               	movf	_day_hex,w
  6824  0585  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6825  058A  00E7               	movwf	??_date_settings+2
  6826  058B  0867               	movf	??_date_settings+2,w
  6827  058C  00C7               	movwf	_day_hex
  6828                           
  6829                           ;Button_src.c: 529:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  6830  058D  3011               	movlw	17
  6831  058E  00E5               	movwf	??_date_settings
  6832  058F  0865               	movf	??_date_settings,w
  6833  0590  00F0               	movwf	time_date_delimiter@hex
  6834  0591  3039               	movlw	57
  6835  0592  00E6               	movwf	??_date_settings+1
  6836  0593  0866               	movf	??_date_settings+1,w
  6837  0594  00F1               	movwf	time_date_delimiter@limiter
  6838  0595  3002               	movlw	2
  6839  0596  00F2               	movwf	time_date_delimiter@type
  6840  0597  3000               	movlw	0
  6841  0598  00F3               	movwf	time_date_delimiter@type+1
  6842  0599  0847               	movf	_day_hex,w
  6843  059A  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6844  059F  00E7               	movwf	??_date_settings+2
  6845  05A0  0867               	movf	??_date_settings+2,w
  6846  05A1  00C7               	movwf	_day_hex
  6847                           
  6848                           ;Button_src.c: 530:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  6849  05A2  3021               	movlw	33
  6850  05A3  00E5               	movwf	??_date_settings
  6851  05A4  0865               	movf	??_date_settings,w
  6852  05A5  00F0               	movwf	time_date_delimiter@hex
  6853  05A6  304A               	movlw	74
  6854  05A7  00E6               	movwf	??_date_settings+1
  6855  05A8  0866               	movf	??_date_settings+1,w
  6856  05A9  00F1               	movwf	time_date_delimiter@limiter
  6857  05AA  3002               	movlw	2
  6858  05AB  00F2               	movwf	time_date_delimiter@type
  6859  05AC  3000               	movlw	0
  6860  05AD  00F3               	movwf	time_date_delimiter@type+1
  6861  05AE  0847               	movf	_day_hex,w
  6862  05AF  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6863  05B4  00E7               	movwf	??_date_settings+2
  6864  05B5  0867               	movf	??_date_settings+2,w
  6865  05B6  00C7               	movwf	_day_hex
  6866                           
  6867                           ;Button_src.c: 531:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  6868  05B7  3031               	movlw	49
  6869  05B8  00E5               	movwf	??_date_settings
  6870  05B9  0865               	movf	??_date_settings,w
  6871  05BA  00F0               	movwf	time_date_delimiter@hex
  6872  05BB  3059               	movlw	89
  6873  05BC  00E6               	movwf	??_date_settings+1
  6874  05BD  0866               	movf	??_date_settings+1,w
  6875  05BE  00F1               	movwf	time_date_delimiter@limiter
  6876  05BF  3002               	movlw	2
  6877  05C0  00F2               	movwf	time_date_delimiter@type
  6878  05C1  3000               	movlw	0
  6879  05C2  00F3               	movwf	time_date_delimiter@type+1
  6880  05C3  0847               	movf	_day_hex,w
  6881  05C4  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6882  05C9  00E7               	movwf	??_date_settings+2
  6883  05CA  0867               	movf	??_date_settings+2,w
  6884  05CB  00C7               	movwf	_day_hex
  6885                           
  6886                           ;Button_src.c: 533:                     c = time_date_delimiter(c,0x11,'9',3);
  6887  05CC  3011               	movlw	17
  6888  05CD  00E5               	movwf	??_date_settings
  6889  05CE  0865               	movf	??_date_settings,w
  6890  05CF  00F0               	movwf	time_date_delimiter@hex
  6891  05D0  3039               	movlw	57
  6892  05D1  00E6               	movwf	??_date_settings+1
  6893  05D2  0866               	movf	??_date_settings+1,w
  6894  05D3  00F1               	movwf	time_date_delimiter@limiter
  6895  05D4  3003               	movlw	3
  6896  05D5  00F2               	movwf	time_date_delimiter@type
  6897  05D6  3000               	movlw	0
  6898  05D7  00F3               	movwf	time_date_delimiter@type+1
  6899  05D8  0848               	movf	_c,w
  6900  05D9  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6901  05DE  00E7               	movwf	??_date_settings+2
  6902  05DF  0867               	movf	??_date_settings+2,w
  6903  05E0  00C8               	movwf	_c
  6904                           
  6905                           ;Button_src.c: 534:                     c = time_date_delimiter(c,0x21,'J',3);
  6906  05E1  3021               	movlw	33
  6907  05E2  00E5               	movwf	??_date_settings
  6908  05E3  0865               	movf	??_date_settings,w
  6909  05E4  00F0               	movwf	time_date_delimiter@hex
  6910  05E5  304A               	movlw	74
  6911  05E6  00E6               	movwf	??_date_settings+1
  6912  05E7  0866               	movf	??_date_settings+1,w
  6913  05E8  00F1               	movwf	time_date_delimiter@limiter
  6914  05E9  3003               	movlw	3
  6915  05EA  00F2               	movwf	time_date_delimiter@type
  6916  05EB  3000               	movlw	0
  6917  05EC  00F3               	movwf	time_date_delimiter@type+1
  6918  05ED  0848               	movf	_c,w
  6919  05EE  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6920  05F3  00E7               	movwf	??_date_settings+2
  6921  05F4  0867               	movf	??_date_settings+2,w
  6922  05F5  00C8               	movwf	_c
  6923                           
  6924                           ;Button_src.c: 535:                     c = time_date_delimiter(c,0x11,'9',3);
  6925  05F6  3011               	movlw	17
  6926  05F7  00E5               	movwf	??_date_settings
  6927  05F8  0865               	movf	??_date_settings,w
  6928  05F9  00F0               	movwf	time_date_delimiter@hex
  6929  05FA  3039               	movlw	57
  6930  05FB  00E6               	movwf	??_date_settings+1
  6931  05FC  0866               	movf	??_date_settings+1,w
  6932  05FD  00F1               	movwf	time_date_delimiter@limiter
  6933  05FE  3003               	movlw	3
  6934  05FF  00F2               	movwf	time_date_delimiter@type
  6935  0600  3000               	movlw	0
  6936  0601  00F3               	movwf	time_date_delimiter@type+1
  6937  0602  0848               	movf	_c,w
  6938  0603  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6939  0608  00E7               	movwf	??_date_settings+2
  6940  0609  0867               	movf	??_date_settings+2,w
  6941  060A  00C8               	movwf	_c
  6942                           
  6943                           ;Button_src.c: 536:                     c = time_date_delimiter(c,0x21,'J',3);
  6944  060B  3021               	movlw	33
  6945  060C  00E5               	movwf	??_date_settings
  6946  060D  0865               	movf	??_date_settings,w
  6947  060E  00F0               	movwf	time_date_delimiter@hex
  6948  060F  304A               	movlw	74
  6949  0610  00E6               	movwf	??_date_settings+1
  6950  0611  0866               	movf	??_date_settings+1,w
  6951  0612  00F1               	movwf	time_date_delimiter@limiter
  6952  0613  3003               	movlw	3
  6953  0614  00F2               	movwf	time_date_delimiter@type
  6954  0615  3000               	movlw	0
  6955  0616  00F3               	movwf	time_date_delimiter@type+1
  6956  0617  0848               	movf	_c,w
  6957  0618  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6958  061D  00E7               	movwf	??_date_settings+2
  6959  061E  0867               	movf	??_date_settings+2,w
  6960  061F  00C8               	movwf	_c
  6961                           
  6962                           ;Button_src.c: 537:                     c = time_date_delimiter(c,0x31,'Y',3);
  6963  0620  3031               	movlw	49
  6964  0621  00E5               	movwf	??_date_settings
  6965  0622  0865               	movf	??_date_settings,w
  6966  0623  00F0               	movwf	time_date_delimiter@hex
  6967  0624  3059               	movlw	89
  6968  0625  00E6               	movwf	??_date_settings+1
  6969  0626  0866               	movf	??_date_settings+1,w
  6970  0627  00F1               	movwf	time_date_delimiter@limiter
  6971  0628  3003               	movlw	3
  6972  0629  00F2               	movwf	time_date_delimiter@type
  6973  062A  3000               	movlw	0
  6974  062B  00F3               	movwf	time_date_delimiter@type+1
  6975  062C  0848               	movf	_c,w
  6976  062D  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6977  0632  00E7               	movwf	??_date_settings+2
  6978  0633  0867               	movf	??_date_settings+2,w
  6979  0634  00C8               	movwf	_c
  6980                           
  6981                           ;Button_src.c: 538:                     c = time_date_delimiter(c,0x41,'j',3);
  6982  0635  3041               	movlw	65
  6983  0636  00E5               	movwf	??_date_settings
  6984  0637  0865               	movf	??_date_settings,w
  6985  0638  00F0               	movwf	time_date_delimiter@hex
  6986  0639  306A               	movlw	106
  6987  063A  00E6               	movwf	??_date_settings+1
  6988  063B  0866               	movf	??_date_settings+1,w
  6989  063C  00F1               	movwf	time_date_delimiter@limiter
  6990  063D  3003               	movlw	3
  6991  063E  00F2               	movwf	time_date_delimiter@type
  6992  063F  3000               	movlw	0
  6993  0640  00F3               	movwf	time_date_delimiter@type+1
  6994  0641  0848               	movf	_c,w
  6995  0642  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  6996  0647  00E7               	movwf	??_date_settings+2
  6997  0648  0867               	movf	??_date_settings+2,w
  6998  0649  00C8               	movwf	_c
  6999                           
  7000                           ;Button_src.c: 539:                     c = time_date_delimiter(c,0x51,'z',3);
  7001  064A  3051               	movlw	81
  7002  064B  00E5               	movwf	??_date_settings
  7003  064C  0865               	movf	??_date_settings,w
  7004  064D  00F0               	movwf	time_date_delimiter@hex
  7005  064E  307A               	movlw	122
  7006  064F  00E6               	movwf	??_date_settings+1
  7007  0650  0866               	movf	??_date_settings+1,w
  7008  0651  00F1               	movwf	time_date_delimiter@limiter
  7009  0652  3003               	movlw	3
  7010  0653  00F2               	movwf	time_date_delimiter@type
  7011  0654  3000               	movlw	0
  7012  0655  00F3               	movwf	time_date_delimiter@type+1
  7013  0656  0848               	movf	_c,w
  7014  0657  120A  158A  223D  120A  118A  	fcall	_time_date_delimiter
  7015  065C  00E7               	movwf	??_date_settings+2
  7016  065D  0867               	movf	??_date_settings+2,w
  7017  065E  00C8               	movwf	_c
  7018                           
  7019                           ;Button_src.c: 541:               if(stats==0){
  7020  065F  0824               	movf	_stats,w
  7021  0660  0425               	iorwf	_stats+1,w
  7022  0661  1D03               	btfss	3,2
  7023  0662  2E71               	goto	l4278
  7024                           
  7025                           ;Button_src.c: 542:                   table[4] = prev_hex;
  7026  0663  0845               	movf	_prev_hex,w
  7027  0664  00E5               	movwf	??_date_settings
  7028  0665  0865               	movf	??_date_settings,w
  7029  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7030  0667  00B7               	movwf	(_table^(0+128)+4)
  7031                           
  7032                           ;Button_src.c: 543:                   table[6] = prev_hex_year;
  7033  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7034  0669  0843               	movf	_prev_hex_year,w
  7035  066A  00E5               	movwf	??_date_settings
  7036  066B  0865               	movf	??_date_settings,w
  7037  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7038  066D  00B9               	movwf	(_table^(0+128)+6)
  7039                           
  7040                           ;Button_src.c: 544:                   table[3] = prev_hex_day;
  7041  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7042  066F  0844               	movf	_prev_hex_day,w
  7043  0670  2E82               	goto	L3
  7044  0671                     l4278:	
  7045                           ;Button_src.c: 545:               }
  7046                           
  7047  0671  0324               	decf	_stats,w
  7048  0672  0425               	iorwf	_stats+1,w
  7049  0673  1D03               	btfss	3,2
  7050  0674  2E86               	goto	l4282
  7051                           
  7052                           ;Button_src.c: 547:               {;Button_src.c: 548:                  table[4]= a;
  7053  0675  084A               	movf	_a,w
  7054  0676  00E5               	movwf	??_date_settings
  7055  0677  0865               	movf	??_date_settings,w
  7056  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7057  0679  00B7               	movwf	(_table^(0+128)+4)
  7058                           
  7059                           ;Button_src.c: 549:                  table[6] = c;
  7060  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7061  067B  0848               	movf	_c,w
  7062  067C  00E5               	movwf	??_date_settings
  7063  067D  0865               	movf	??_date_settings,w
  7064  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7065  067F  00B9               	movwf	(_table^(0+128)+6)
  7066                           
  7067                           ;Button_src.c: 550:                  table[3] = day_hex;
  7068  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7069  0681  0847               	movf	_day_hex,w
  7070  0682                     L3:	
  7071  0682  00E5               	movwf	??_date_settings
  7072  0683  0865               	movf	??_date_settings,w
  7073  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7074  0685  00B6               	movwf	(_table^(0+128)+3)
  7075  0686                     l4282:	
  7076                           
  7077                           ;Button_src.c: 553:              write_cmd(0x88);
  7078  0686  3088               	movlw	136
  7079  0687  120A  158A  2001  120A  118A  	fcall	_write_cmd
  7080                           
  7081                           ;Button_src.c: 555:                   RC0 = 0;
  7082  068C  1007               	bcf	7,0	;volatile
  7083                           
  7084                           ;Button_src.c: 556:                   RC1 = 1;
  7085  068D  1487               	bsf	7,1	;volatile
  7086                           
  7087                           ;Button_src.c: 557:                   RC2 = 1;
  7088  068E  1507               	bsf	7,2	;volatile
  7089                           
  7090                           ;Button_src.c: 558:                   RC3 = 1;
  7091  068F  1587               	bsf	7,3	;volatile
  7092                           
  7093                           ;Button_src.c: 560:                     if (RC6 == 0 ){
  7094  0690  1B07               	btfsc	7,6	;volatile
  7095  0691  2EAB               	goto	l791
  7096                           
  7097                           ;Button_src.c: 561:                           a = 0x00;
  7098  0692  01CA               	clrf	_a
  7099                           
  7100                           ;Button_src.c: 562:                           c = 0x00;
  7101  0693  01C8               	clrf	_c
  7102                           
  7103                           ;Button_src.c: 563:                           day_hex = 0x00;
  7104  0694  01C7               	clrf	_day_hex
  7105                           
  7106                           ;Button_src.c: 564:                           day_high = 0;
  7107  0695  01A6               	clrf	_day_high
  7108  0696  01A7               	clrf	_day_high+1
  7109                           
  7110                           ;Button_src.c: 565:                           day_low = 0;
  7111  0697  01A8               	clrf	_day_low
  7112  0698  01A9               	clrf	_day_low+1
  7113                           
  7114                           ;Button_src.c: 566:                           x = 0;
  7115  0699  01AE               	clrf	_x
  7116  069A  01AF               	clrf	_x+1
  7117                           
  7118                           ;Button_src.c: 567:                           y = 0;
  7119  069B  01AC               	clrf	_y
  7120  069C  01AD               	clrf	_y+1
  7121                           
  7122                           ;Button_src.c: 568:                           w = 0;
  7123  069D  01B0               	clrf	_w
  7124  069E  01B1               	clrf	_w+1
  7125                           
  7126                           ;Button_src.c: 569:                           t = 0;
  7127  069F  01B2               	clrf	_t
  7128  06A0  01B3               	clrf	_t+1
  7129                           
  7130                           ;Button_src.c: 570:                           write_cmd(0x1);
  7131  06A1  3001               	movlw	1
  7132  06A2  120A  158A  2001  120A  118A  	fcall	_write_cmd
  7133                           
  7134                           ;Button_src.c: 571:                           set_time();
  7135  06A7  160A  118A  24CA   	fcall	_set_time
  7136  06AA  0008               	return
  7137  06AB                     l791:	
  7138                           ;Button_src.c: 573:                             }
  7139                           
  7140                           
  7141                           ;Button_src.c: 574:                   RC0 = 0;
  7142  06AB  1007               	bcf	7,0	;volatile
  7143                           
  7144                           ;Button_src.c: 575:                   RC1 = 1;
  7145  06AC  1487               	bsf	7,1	;volatile
  7146                           
  7147                           ;Button_src.c: 576:                   RC2 = 1;
  7148  06AD  1507               	bsf	7,2	;volatile
  7149                           
  7150                           ;Button_src.c: 577:                   RC3 = 1;
  7151  06AE  1587               	bsf	7,3	;volatile
  7152                           
  7153                           ;Button_src.c: 578:                   z = modulus_func(z,3);
  7154  06AF  082B               	movf	_z+1,w
  7155  06B0  00F8               	movwf	modulus_func@x+1
  7156  06B1  082A               	movf	_z,w
  7157  06B2  00F7               	movwf	modulus_func@x
  7158  06B3  3003               	movlw	3
  7159  06B4  00F9               	movwf	modulus_func@y
  7160  06B5  3000               	movlw	0
  7161  06B6  00FA               	movwf	modulus_func@y+1
  7162  06B7  160A  118A  2370  120A  118A  	fcall	_modulus_func
  7163  06BC  0878               	movf	?_modulus_func+1,w
  7164  06BD  00AB               	movwf	_z+1
  7165  06BE  0877               	movf	?_modulus_func,w
  7166  06BF  00AA               	movwf	_z
  7167                           
  7168                           ;Button_src.c: 579:                   if(RC4 == 0 && z ==0){
  7169  06C0  1A07               	btfsc	7,4	;volatile
  7170  06C1  2F01               	goto	l4314
  7171  06C2  082A               	movf	_z,w
  7172  06C3  042B               	iorwf	_z+1,w
  7173  06C4  1D03               	btfss	3,2
  7174  06C5  2F01               	goto	l4314
  7175                           
  7176                           ;Button_src.c: 580:                       write_cmd(0x90);
  7177  06C6  3090               	movlw	144
  7178  06C7  120A  158A  2001  120A  118A  	fcall	_write_cmd
  7179                           
  7180                           ;Button_src.c: 581:                       write_char('D');
  7181  06CC  3044               	movlw	68
  7182  06CD  160A  118A  23E1  120A  118A  	fcall	_write_char
  7183                           
  7184                           ;Button_src.c: 582:                       write_char('a');
  7185  06D2  3061               	movlw	97
  7186  06D3  160A  118A  23E1  120A  118A  	fcall	_write_char
  7187                           
  7188                           ;Button_src.c: 583:                       write_char('y');
  7189  06D8  3079               	movlw	121
  7190  06D9  160A  118A  23E1  120A  118A  	fcall	_write_char
  7191                           
  7192                           ;Button_src.c: 584:                       write_char(':');
  7193  06DE  303A               	movlw	58
  7194  06DF  160A  118A  23E1  120A  118A  	fcall	_write_char
  7195                           
  7196                           ;Button_src.c: 585:                       write_char(' ');
  7197  06E4  3020               	movlw	32
  7198  06E5  160A  118A  23E1  120A  118A  	fcall	_write_char
  7199                           
  7200                           ;Button_src.c: 586:                       write_char(' ');
  7201  06EA  3020               	movlw	32
  7202  06EB  160A  118A  23E1  120A  118A  	fcall	_write_char
  7203                           
  7204                           ;Button_src.c: 587:                       b = 'y';
  7205  06F0  3079               	movlw	121
  7206  06F1  00E5               	movwf	??_date_settings
  7207  06F2  0865               	movf	??_date_settings,w
  7208  06F3  00C9               	movwf	_b
  7209                           
  7210                           ;Button_src.c: 589:                       button_delay();
  7211  06F4  160A  118A  23A5  120A  118A  	fcall	_button_delay
  7212                           
  7213                           ;Button_src.c: 590:                       z++;
  7214  06F9  3001               	movlw	1
  7215  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7216  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7217  06FC  07AA               	addwf	_z,f
  7218  06FD  1803               	skipnc
  7219  06FE  0AAB               	incf	_z+1,f
  7220  06FF  3000               	movlw	0
  7221  0700  07AB               	addwf	_z+1,f
  7222  0701                     l4314:	
  7223                           
  7224                           ;Button_src.c: 592:                   RC0 = 0;
  7225  0701  1007               	bcf	7,0	;volatile
  7226                           
  7227                           ;Button_src.c: 593:                   RC1 = 1;
  7228  0702  1487               	bsf	7,1	;volatile
  7229                           
  7230                           ;Button_src.c: 594:                   RC2 = 1;
  7231  0703  1507               	bsf	7,2	;volatile
  7232                           
  7233                           ;Button_src.c: 595:                   RC3 = 1;
  7234  0704  1587               	bsf	7,3	;volatile
  7235                           
  7236                           ;Button_src.c: 596:                   if(RC4 == 0&& z ==1){
  7237  0705  1A07               	btfsc	7,4	;volatile
  7238  0706  2F44               	goto	l4344
  7239  0707  032A               	decf	_z,w
  7240  0708  042B               	iorwf	_z+1,w
  7241  0709  1D03               	btfss	3,2
  7242  070A  2F44               	goto	l4344
  7243                           
  7244                           ;Button_src.c: 597:                       z++;
  7245  070B  3001               	movlw	1
  7246  070C  07AA               	addwf	_z,f
  7247  070D  1803               	skipnc
  7248  070E  0AAB               	incf	_z+1,f
  7249  070F  3000               	movlw	0
  7250  0710  07AB               	addwf	_z+1,f
  7251                           
  7252                           ;Button_src.c: 598:                       button_delay();
  7253  0711  160A  118A  23A5  120A  118A  	fcall	_button_delay
  7254                           
  7255                           ;Button_src.c: 600:                       write_cmd(0x90);
  7256  0716  3090               	movlw	144
  7257  0717  120A  158A  2001  120A  118A  	fcall	_write_cmd
  7258                           
  7259                           ;Button_src.c: 601:                       write_char('M');
  7260  071C  304D               	movlw	77
  7261  071D  160A  118A  23E1  120A  118A  	fcall	_write_char
  7262                           
  7263                           ;Button_src.c: 602:                       write_char('o');
  7264  0722  306F               	movlw	111
  7265  0723  160A  118A  23E1  120A  118A  	fcall	_write_char
  7266                           
  7267                           ;Button_src.c: 603:                       write_char('n');
  7268  0728  306E               	movlw	110
  7269  0729  160A  118A  23E1  120A  118A  	fcall	_write_char
  7270                           
  7271                           ;Button_src.c: 604:                       write_char('t');
  7272  072E  3074               	movlw	116
  7273  072F  160A  118A  23E1  120A  118A  	fcall	_write_char
  7274                           
  7275                           ;Button_src.c: 605:                       write_char('h');
  7276  0734  3068               	movlw	104
  7277  0735  160A  118A  23E1  120A  118A  	fcall	_write_char
  7278                           
  7279                           ;Button_src.c: 606:                       write_char(':');
  7280  073A  303A               	movlw	58
  7281  073B  160A  118A  23E1  120A  118A  	fcall	_write_char
  7282                           
  7283                           ;Button_src.c: 607:                       b = 'x';
  7284  0740  3078               	movlw	120
  7285  0741  00E5               	movwf	??_date_settings
  7286  0742  0865               	movf	??_date_settings,w
  7287  0743  00C9               	movwf	_b
  7288  0744                     l4344:	
  7289                           
  7290                           ;Button_src.c: 610:                   RC0 = 0;
  7291  0744  1007               	bcf	7,0	;volatile
  7292                           
  7293                           ;Button_src.c: 611:                   RC1 = 1;
  7294  0745  1487               	bsf	7,1	;volatile
  7295                           
  7296                           ;Button_src.c: 612:                   RC2 = 1;
  7297  0746  1507               	bsf	7,2	;volatile
  7298                           
  7299                           ;Button_src.c: 613:                   RC3 = 1;
  7300  0747  1587               	bsf	7,3	;volatile
  7301                           
  7302                           ;Button_src.c: 614:                   if(RC4 == 0&& z ==2){
  7303  0748  1A07               	btfsc	7,4	;volatile
  7304  0749  2F8A               	goto	l4374
  7305  074A  3002               	movlw	2
  7306  074B  062A               	xorwf	_z,w
  7307  074C  042B               	iorwf	_z+1,w
  7308  074D  1D03               	btfss	3,2
  7309  074E  2F8A               	goto	l4374
  7310                           
  7311                           ;Button_src.c: 615:                       button_delay();
  7312  074F  160A  118A  23A5  120A  118A  	fcall	_button_delay
  7313                           
  7314                           ;Button_src.c: 616:                       z++;
  7315  0754  3001               	movlw	1
  7316  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7317  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7318  0757  07AA               	addwf	_z,f
  7319  0758  1803               	skipnc
  7320  0759  0AAB               	incf	_z+1,f
  7321  075A  3000               	movlw	0
  7322  075B  07AB               	addwf	_z+1,f
  7323                           
  7324                           ;Button_src.c: 618:                       write_cmd(0x90);
  7325  075C  3090               	movlw	144
  7326  075D  120A  158A  2001  120A  118A  	fcall	_write_cmd
  7327                           
  7328                           ;Button_src.c: 619:                       write_char('Y');
  7329  0762  3059               	movlw	89
  7330  0763  160A  118A  23E1  120A  118A  	fcall	_write_char
  7331                           
  7332                           ;Button_src.c: 620:                       write_char('e');
  7333  0768  3065               	movlw	101
  7334  0769  160A  118A  23E1  120A  118A  	fcall	_write_char
  7335                           
  7336                           ;Button_src.c: 621:                       write_char('a');
  7337  076E  3061               	movlw	97
  7338  076F  160A  118A  23E1  120A  118A  	fcall	_write_char
  7339                           
  7340                           ;Button_src.c: 622:                       write_char('r');
  7341  0774  3072               	movlw	114
  7342  0775  160A  118A  23E1  120A  118A  	fcall	_write_char
  7343                           
  7344                           ;Button_src.c: 623:                       write_char(':');
  7345  077A  303A               	movlw	58
  7346  077B  160A  118A  23E1  120A  118A  	fcall	_write_char
  7347                           
  7348                           ;Button_src.c: 624:                       write_char(' ');
  7349  0780  3020               	movlw	32
  7350  0781  160A  118A  23E1  120A  118A  	fcall	_write_char
  7351                           
  7352                           ;Button_src.c: 625:                       b = 'z';
  7353  0786  307A               	movlw	122
  7354  0787  00E5               	movwf	??_date_settings
  7355  0788  0865               	movf	??_date_settings,w
  7356  0789  00C9               	movwf	_b
  7357  078A                     l4374:	
  7358                           
  7359                           ;Button_src.c: 628:               write_cmd(0x88);
  7360  078A  3088               	movlw	136
  7361  078B  120A  158A  2001  120A  118A  	fcall	_write_cmd
  7362                           
  7363                           ;Button_src.c: 629:               write_char(day_high + '0');
  7364  0790  0826               	movf	_day_high,w
  7365  0791  3E30               	addlw	48
  7366  0792  160A  118A  23E1  120A  118A  	fcall	_write_char
  7367                           
  7368                           ;Button_src.c: 630:               write_char(day_low + '0');
  7369  0797  0828               	movf	_day_low,w
  7370  0798  3E30               	addlw	48
  7371  0799  160A  118A  23E1  120A  118A  	fcall	_write_char
  7372                           
  7373                           ;Button_src.c: 631:               write_char('/');
  7374  079E  302F               	movlw	47
  7375  079F  160A  118A  23E1  120A  118A  	fcall	_write_char
  7376                           
  7377                           ;Button_src.c: 632:               write_char(y + '0');
  7378  07A4  082C               	movf	_y,w
  7379  07A5  3E30               	addlw	48
  7380  07A6  160A  118A  23E1  120A  118A  	fcall	_write_char
  7381                           
  7382                           ;Button_src.c: 633:               write_char(x + '0');
  7383  07AB  082E               	movf	_x,w
  7384  07AC  3E30               	addlw	48
  7385  07AD  160A  118A  23E1  120A  118A  	fcall	_write_char
  7386                           
  7387                           ;Button_src.c: 634:               write_char('/');
  7388  07B2  302F               	movlw	47
  7389  07B3  160A  118A  23E1  120A  118A  	fcall	_write_char
  7390                           
  7391                           ;Button_src.c: 635:               write_char(w+ '0');
  7392  07B8  0830               	movf	_w,w
  7393  07B9  3E30               	addlw	48
  7394  07BA  160A  118A  23E1  120A  118A  	fcall	_write_char
  7395                           
  7396                           ;Button_src.c: 636:               write_char(t+ '0');
  7397  07BF  0832               	movf	_t,w
  7398  07C0  3E30               	addlw	48
  7399  07C1  160A  118A  23E1  120A  118A  	fcall	_write_char
  7400                           
  7401                           ;Button_src.c: 639:             RC0 = 0;
  7402  07C6  1007               	bcf	7,0	;volatile
  7403                           
  7404                           ;Button_src.c: 640:             RC1 = 1;
  7405  07C7  1487               	bsf	7,1	;volatile
  7406                           
  7407                           ;Button_src.c: 641:             RC2 = 1;
  7408  07C8  1507               	bsf	7,2	;volatile
  7409                           
  7410                           ;Button_src.c: 642:             RC3 = 1;
  7411  07C9  1587               	bsf	7,3	;volatile
  7412                           
  7413                           ;Button_src.c: 643:             if (RC7 == 0 ){
  7414  07CA  1B87               	btfsc	7,7	;volatile
  7415  07CB  2B95               	goto	l768
  7416                           
  7417                           ;Button_src.c: 644:             a = 0x00;
  7418  07CC  01CA               	clrf	_a
  7419                           
  7420                           ;Button_src.c: 645:             c = 0x00;
  7421  07CD  01C8               	clrf	_c
  7422                           
  7423                           ;Button_src.c: 646:             day_hex = 0x00;
  7424  07CE  01C7               	clrf	_day_hex
  7425                           
  7426                           ;Button_src.c: 647:             x = 0;
  7427  07CF  01AE               	clrf	_x
  7428  07D0  01AF               	clrf	_x+1
  7429                           
  7430                           ;Button_src.c: 648:             y = 0;
  7431  07D1  01AC               	clrf	_y
  7432  07D2  01AD               	clrf	_y+1
  7433                           
  7434                           ;Button_src.c: 649:             w = 0;
  7435  07D3  01B0               	clrf	_w
  7436  07D4  01B1               	clrf	_w+1
  7437                           
  7438                           ;Button_src.c: 650:             t = 0;
  7439  07D5  01B2               	clrf	_t
  7440  07D6  01B3               	clrf	_t+1
  7441                           
  7442                           ;Button_src.c: 651:             day_high = 0;
  7443  07D7  01A6               	clrf	_day_high
  7444  07D8  01A7               	clrf	_day_high+1
  7445                           
  7446                           ;Button_src.c: 652:             day_low = 0;
  7447  07D9  01A8               	clrf	_day_low
  7448  07DA  01A9               	clrf	_day_low+1
  7449                           
  7450                           ;Button_src.c: 653:             write_cmd(0x1);
  7451  07DB  3001               	movlw	1
  7452  07DC  120A  158A  2001   	fcall	_write_cmd
  7453                           
  7454                           ;Button_src.c: 654:             break;
  7455  07DF  0008               	return
  7456  07E0                     __end_of_date_settings:	
  7457                           
  7458                           	psect	text29
  7459  0801                     __ptext29:	
  7460 ;; *************** function _write_cmd *****************
  7461 ;; Defined at:
  7462 ;;		line 41 in file "LCD_src.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  x               1    wreg     unsigned char 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  x               1    2[COMMON] unsigned char 
  7467 ;;  i               2    0        int 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 300/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7477 ;;      Params:         0       0       0       0       0
  7478 ;;      Locals:         1       0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0
  7480 ;;      Totals:         1       0       0       0       0
  7481 ;;Total ram usage:        1 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    1
  7484 ;; This function calls:
  7485 ;;		_delay_screen
  7486 ;; This function is called by:
  7487 ;;		_main
  7488 ;;		_lcd_init
  7489 ;;		_thermometer_threshhold_settings
  7490 ;;		_time_settings
  7491 ;;		_date_settings
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           
  7496                           ;psect for function _write_cmd
  7497  0801                     _write_cmd:	
  7498                           
  7499                           ;incstack = 0
  7500                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7501                           ;write_cmd@x stored from wreg
  7502  0801  00F2               	movwf	write_cmd@x
  7503                           
  7504                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7505  0802  1283               	bcf	3,5	;RP0=0, select bank0
  7506  0803  1303               	bcf	3,6	;RP1=0, select bank0
  7507  0804  1285               	bcf	5,5	;volatile
  7508                           
  7509                           ;LCD_src.c: 45:  RA4=0;
  7510  0805  1205               	bcf	5,4	;volatile
  7511                           
  7512                           ;LCD_src.c: 46:  RA3=0;
  7513  0806  1185               	bcf	5,3	;volatile
  7514                           
  7515                           ;LCD_src.c: 47:  delay_screen();
  7516  0807  160A  118A  2391  120A  158A  	fcall	_delay_screen
  7517                           
  7518                           ;LCD_src.c: 48:  RA3=1;
  7519  080C  1283               	bcf	3,5	;RP0=0, select bank0
  7520  080D  1303               	bcf	3,6	;RP1=0, select bank0
  7521  080E  1585               	bsf	5,3	;volatile
  7522                           
  7523                           ;LCD_src.c: 49:  PORTD=x;
  7524  080F  0872               	movf	write_cmd@x,w
  7525  0810  0088               	movwf	8	;volatile
  7526                           
  7527                           ;LCD_src.c: 50:  delay_screen();
  7528  0811  160A  118A  2391   	fcall	_delay_screen
  7529                           
  7530                           ;LCD_src.c: 51:  RA3=0;
  7531  0814  1283               	bcf	3,5	;RP0=0, select bank0
  7532  0815  1303               	bcf	3,6	;RP1=0, select bank0
  7533  0816  1185               	bcf	5,3	;volatile
  7534  0817  0008               	return
  7535  0818                     __end_of_write_cmd:	
  7536                           
  7537                           	psect	text30
  7538  1352                     __ptext30:	
  7539 ;; *************** function _time_date_hex_terminator *****************
  7540 ;; Defined at:
  7541 ;;		line 87 in file "math_src.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  val             1    wreg     unsigned char 
  7544 ;;  limiter         1    0[COMMON] unsigned char 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  val             1    3[COMMON] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      unsigned char 
  7549 ;; Registers used:
  7550 ;;		wreg, status,2
  7551 ;; Tracked objects:
  7552 ;;		On entry : 300/0
  7553 ;;		On exit  : 300/0
  7554 ;;		Unchanged: 300/0
  7555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7556 ;;      Params:         1       0       0       0       0
  7557 ;;      Locals:         1       0       0       0       0
  7558 ;;      Temps:          2       0       0       0       0
  7559 ;;      Totals:         4       0       0       0       0
  7560 ;;Total ram usage:        4 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_thermometer_threshhold_settings
  7566 ;;		_time_settings
  7567 ;;		_date_settings
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _time_date_hex_terminator
  7573  1352                     _time_date_hex_terminator:	
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7577                           ;time_date_hex_terminator@val stored from wreg
  7578  1352  00F3               	movwf	time_date_hex_terminator@val
  7579                           
  7580                           ;math_src.c: 88:     if((val + '0') == limiter){
  7581  1353  0873               	movf	time_date_hex_terminator@val,w
  7582  1354  3E30               	addlw	48
  7583  1355  00F1               	movwf	??_time_date_hex_terminator
  7584  1356  3000               	movlw	0
  7585  1357  1803               	skipnc
  7586  1358  3001               	movlw	1
  7587  1359  00F2               	movwf	??_time_date_hex_terminator+1
  7588  135A  0870               	movf	time_date_hex_terminator@limiter,w
  7589  135B  0671               	xorwf	??_time_date_hex_terminator,w
  7590  135C  0472               	iorwf	??_time_date_hex_terminator+1,w
  7591  135D  1903               	btfsc	3,2
  7592                           
  7593                           ;math_src.c: 89:     val = 0x00;
  7594  135E  01F3               	clrf	time_date_hex_terminator@val
  7595                           
  7596                           ;math_src.c: 91:     return val;
  7597  135F  0873               	movf	time_date_hex_terminator@val,w
  7598  1360  0008               	return
  7599  1361                     __end_of_time_date_hex_terminator:	
  7600                           
  7601                           	psect	text31
  7602  0A3D                     __ptext31:	
  7603 ;; *************** function _time_date_delimiter *****************
  7604 ;; Defined at:
  7605 ;;		line 28 in file "math_src.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  val             1    wreg     unsigned char 
  7608 ;;  hex             1    0[COMMON] unsigned char 
  7609 ;;  limiter         1    1[COMMON] unsigned char 
  7610 ;;  type            2    2[COMMON] int 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;  val             1    6[COMMON] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  1    wreg      unsigned char 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 300/0
  7619 ;;		On exit  : 300/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7622 ;;      Params:         4       0       0       0       0
  7623 ;;      Locals:         1       0       0       0       0
  7624 ;;      Temps:          2       0       0       0       0
  7625 ;;      Totals:         7       0       0       0       0
  7626 ;;Total ram usage:        7 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_time_settings
  7632 ;;		_date_settings
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           
  7637                           ;psect for function _time_date_delimiter
  7638  0A3D                     _time_date_delimiter:	
  7639                           
  7640                           ;incstack = 0
  7641                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  7642                           ;time_date_delimiter@val stored from wreg
  7643  0A3D  00F6               	movwf	time_date_delimiter@val
  7644                           
  7645                           ;math_src.c: 29:     if((val + '0') == limiter){
  7646  0A3E  0876               	movf	time_date_delimiter@val,w
  7647  0A3F  3E30               	addlw	48
  7648  0A40  00F4               	movwf	??_time_date_delimiter
  7649  0A41  3000               	movlw	0
  7650  0A42  1803               	skipnc
  7651  0A43  3001               	movlw	1
  7652  0A44  00F5               	movwf	??_time_date_delimiter+1
  7653  0A45  0871               	movf	time_date_delimiter@limiter,w
  7654  0A46  0674               	xorwf	??_time_date_delimiter,w
  7655  0A47  0475               	iorwf	??_time_date_delimiter+1,w
  7656  0A48  1D03               	skipz
  7657  0A49  2B92               	goto	l3668
  7658                           
  7659                           ;math_src.c: 30:     val = hex;
  7660  0A4A  0870               	movf	time_date_delimiter@hex,w
  7661  0A4B  00F4               	movwf	??_time_date_delimiter
  7662  0A4C  0874               	movf	??_time_date_delimiter,w
  7663  0A4D  00F6               	movwf	time_date_delimiter@val
  7664                           
  7665                           ;math_src.c: 31:     stats=0;
  7666  0A4E  01A4               	clrf	_stats
  7667  0A4F  01A5               	clrf	_stats+1
  7668                           
  7669                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  7670  0A50  3039               	movlw	57
  7671  0A51  0671               	xorwf	time_date_delimiter@limiter,w
  7672  0A52  1D03               	btfss	3,2
  7673  0A53  2A5C               	goto	l3522
  7674  0A54  0372               	decf	time_date_delimiter@type,w
  7675  0A55  0473               	iorwf	time_date_delimiter@type+1,w
  7676  0A56  1D03               	btfss	3,2
  7677  0A57  2A5C               	goto	l3522
  7678                           
  7679                           ;math_src.c: 33:         prev_hex= 0x09;
  7680  0A58  3009               	movlw	9
  7681  0A59  00F4               	movwf	??_time_date_delimiter
  7682  0A5A  0874               	movf	??_time_date_delimiter,w
  7683  0A5B  00C5               	movwf	_prev_hex
  7684  0A5C                     l3522:	
  7685                           
  7686                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  7687  0A5C  304A               	movlw	74
  7688  0A5D  0671               	xorwf	time_date_delimiter@limiter,w
  7689  0A5E  1D03               	btfss	3,2
  7690  0A5F  2A68               	goto	l3528
  7691  0A60  0372               	decf	time_date_delimiter@type,w
  7692  0A61  0473               	iorwf	time_date_delimiter@type+1,w
  7693  0A62  1D03               	btfss	3,2
  7694  0A63  2A68               	goto	l3528
  7695                           
  7696                           ;math_src.c: 35:         prev_hex = 0x19;
  7697  0A64  3019               	movlw	25
  7698  0A65  00F4               	movwf	??_time_date_delimiter
  7699  0A66  0874               	movf	??_time_date_delimiter,w
  7700  0A67  00C5               	movwf	_prev_hex
  7701  0A68                     l3528:	
  7702                           
  7703                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  7704  0A68  3059               	movlw	89
  7705  0A69  0671               	xorwf	time_date_delimiter@limiter,w
  7706  0A6A  1D03               	btfss	3,2
  7707  0A6B  2A74               	goto	l3534
  7708  0A6C  0372               	decf	time_date_delimiter@type,w
  7709  0A6D  0473               	iorwf	time_date_delimiter@type+1,w
  7710  0A6E  1D03               	btfss	3,2
  7711  0A6F  2A74               	goto	l3534
  7712                           
  7713                           ;math_src.c: 37:         prev_hex = 0x29;
  7714  0A70  3029               	movlw	41
  7715  0A71  00F4               	movwf	??_time_date_delimiter
  7716  0A72  0874               	movf	??_time_date_delimiter,w
  7717  0A73  00C5               	movwf	_prev_hex
  7718  0A74                     l3534:	
  7719                           
  7720                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  7721  0A74  306A               	movlw	106
  7722  0A75  0671               	xorwf	time_date_delimiter@limiter,w
  7723  0A76  1D03               	btfss	3,2
  7724  0A77  2A80               	goto	l3540
  7725  0A78  0372               	decf	time_date_delimiter@type,w
  7726  0A79  0473               	iorwf	time_date_delimiter@type+1,w
  7727  0A7A  1D03               	btfss	3,2
  7728  0A7B  2A80               	goto	l3540
  7729                           
  7730                           ;math_src.c: 39:         prev_hex =0x39;
  7731  0A7C  3039               	movlw	57
  7732  0A7D  00F4               	movwf	??_time_date_delimiter
  7733  0A7E  0874               	movf	??_time_date_delimiter,w
  7734  0A7F  00C5               	movwf	_prev_hex
  7735  0A80                     l3540:	
  7736                           
  7737                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  7738  0A80  307A               	movlw	122
  7739  0A81  0671               	xorwf	time_date_delimiter@limiter,w
  7740  0A82  1D03               	btfss	3,2
  7741  0A83  2A8C               	goto	l3546
  7742  0A84  0372               	decf	time_date_delimiter@type,w
  7743  0A85  0473               	iorwf	time_date_delimiter@type+1,w
  7744  0A86  1D03               	btfss	3,2
  7745  0A87  2A8C               	goto	l3546
  7746                           
  7747                           ;math_src.c: 41:         prev_hex = 0x49;
  7748  0A88  3049               	movlw	73
  7749  0A89  00F4               	movwf	??_time_date_delimiter
  7750  0A8A  0874               	movf	??_time_date_delimiter,w
  7751  0A8B  00C5               	movwf	_prev_hex
  7752  0A8C                     l3546:	
  7753                           
  7754                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  7755  0A8C  3039               	movlw	57
  7756  0A8D  0671               	xorwf	time_date_delimiter@limiter,w
  7757  0A8E  1D03               	btfss	3,2
  7758  0A8F  2A99               	goto	l3552
  7759  0A90  3002               	movlw	2
  7760  0A91  0672               	xorwf	time_date_delimiter@type,w
  7761  0A92  0473               	iorwf	time_date_delimiter@type+1,w
  7762  0A93  1D03               	btfss	3,2
  7763  0A94  2A99               	goto	l3552
  7764                           
  7765                           ;math_src.c: 43:         prev_hex_day= 0x09;
  7766  0A95  3009               	movlw	9
  7767  0A96  00F4               	movwf	??_time_date_delimiter
  7768  0A97  0874               	movf	??_time_date_delimiter,w
  7769  0A98  00C4               	movwf	_prev_hex_day
  7770  0A99                     l3552:	
  7771                           
  7772                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  7773  0A99  304A               	movlw	74
  7774  0A9A  0671               	xorwf	time_date_delimiter@limiter,w
  7775  0A9B  1D03               	btfss	3,2
  7776  0A9C  2AA6               	goto	l3558
  7777  0A9D  3002               	movlw	2
  7778  0A9E  0672               	xorwf	time_date_delimiter@type,w
  7779  0A9F  0473               	iorwf	time_date_delimiter@type+1,w
  7780  0AA0  1D03               	btfss	3,2
  7781  0AA1  2AA6               	goto	l3558
  7782                           
  7783                           ;math_src.c: 45:         prev_hex_day = 0x19;
  7784  0AA2  3019               	movlw	25
  7785  0AA3  00F4               	movwf	??_time_date_delimiter
  7786  0AA4  0874               	movf	??_time_date_delimiter,w
  7787  0AA5  00C4               	movwf	_prev_hex_day
  7788  0AA6                     l3558:	
  7789                           
  7790                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  7791  0AA6  3059               	movlw	89
  7792  0AA7  0671               	xorwf	time_date_delimiter@limiter,w
  7793  0AA8  1D03               	btfss	3,2
  7794  0AA9  2AB3               	goto	l3564
  7795  0AAA  3002               	movlw	2
  7796  0AAB  0672               	xorwf	time_date_delimiter@type,w
  7797  0AAC  0473               	iorwf	time_date_delimiter@type+1,w
  7798  0AAD  1D03               	btfss	3,2
  7799  0AAE  2AB3               	goto	l3564
  7800                           
  7801                           ;math_src.c: 47:         prev_hex_day = 0x29;
  7802  0AAF  3029               	movlw	41
  7803  0AB0  00F4               	movwf	??_time_date_delimiter
  7804  0AB1  0874               	movf	??_time_date_delimiter,w
  7805  0AB2  00C4               	movwf	_prev_hex_day
  7806  0AB3                     l3564:	
  7807                           
  7808                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  7809  0AB3  306A               	movlw	106
  7810  0AB4  0671               	xorwf	time_date_delimiter@limiter,w
  7811  0AB5  1D03               	btfss	3,2
  7812  0AB6  2AC0               	goto	l3570
  7813  0AB7  3002               	movlw	2
  7814  0AB8  0672               	xorwf	time_date_delimiter@type,w
  7815  0AB9  0473               	iorwf	time_date_delimiter@type+1,w
  7816  0ABA  1D03               	btfss	3,2
  7817  0ABB  2AC0               	goto	l3570
  7818                           
  7819                           ;math_src.c: 49:         prev_hex_day =0x39;
  7820  0ABC  3039               	movlw	57
  7821  0ABD  00F4               	movwf	??_time_date_delimiter
  7822  0ABE  0874               	movf	??_time_date_delimiter,w
  7823  0ABF  00C4               	movwf	_prev_hex_day
  7824  0AC0                     l3570:	
  7825                           
  7826                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  7827  0AC0  307A               	movlw	122
  7828  0AC1  0671               	xorwf	time_date_delimiter@limiter,w
  7829  0AC2  1D03               	btfss	3,2
  7830  0AC3  2ACD               	goto	l3576
  7831  0AC4  3002               	movlw	2
  7832  0AC5  0672               	xorwf	time_date_delimiter@type,w
  7833  0AC6  0473               	iorwf	time_date_delimiter@type+1,w
  7834  0AC7  1D03               	btfss	3,2
  7835  0AC8  2ACD               	goto	l3576
  7836                           
  7837                           ;math_src.c: 51:         prev_hex_day = 0x49;
  7838  0AC9  3049               	movlw	73
  7839  0ACA  00F4               	movwf	??_time_date_delimiter
  7840  0ACB  0874               	movf	??_time_date_delimiter,w
  7841  0ACC  00C4               	movwf	_prev_hex_day
  7842  0ACD                     l3576:	
  7843                           
  7844                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  7845  0ACD  3039               	movlw	57
  7846  0ACE  0671               	xorwf	time_date_delimiter@limiter,w
  7847  0ACF  1D03               	btfss	3,2
  7848  0AD0  2ADA               	goto	l3582
  7849  0AD1  3003               	movlw	3
  7850  0AD2  0672               	xorwf	time_date_delimiter@type,w
  7851  0AD3  0473               	iorwf	time_date_delimiter@type+1,w
  7852  0AD4  1D03               	btfss	3,2
  7853  0AD5  2ADA               	goto	l3582
  7854                           
  7855                           ;math_src.c: 53:         prev_hex_year= 0x09;
  7856  0AD6  3009               	movlw	9
  7857  0AD7  00F4               	movwf	??_time_date_delimiter
  7858  0AD8  0874               	movf	??_time_date_delimiter,w
  7859  0AD9  00C3               	movwf	_prev_hex_year
  7860  0ADA                     l3582:	
  7861                           
  7862                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  7863  0ADA  304A               	movlw	74
  7864  0ADB  0671               	xorwf	time_date_delimiter@limiter,w
  7865  0ADC  1D03               	btfss	3,2
  7866  0ADD  2AE7               	goto	l3588
  7867  0ADE  3003               	movlw	3
  7868  0ADF  0672               	xorwf	time_date_delimiter@type,w
  7869  0AE0  0473               	iorwf	time_date_delimiter@type+1,w
  7870  0AE1  1D03               	btfss	3,2
  7871  0AE2  2AE7               	goto	l3588
  7872                           
  7873                           ;math_src.c: 55:         prev_hex_year = 0x19;
  7874  0AE3  3019               	movlw	25
  7875  0AE4  00F4               	movwf	??_time_date_delimiter
  7876  0AE5  0874               	movf	??_time_date_delimiter,w
  7877  0AE6  00C3               	movwf	_prev_hex_year
  7878  0AE7                     l3588:	
  7879                           
  7880                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  7881  0AE7  3059               	movlw	89
  7882  0AE8  0671               	xorwf	time_date_delimiter@limiter,w
  7883  0AE9  1D03               	btfss	3,2
  7884  0AEA  2AF4               	goto	l3594
  7885  0AEB  3003               	movlw	3
  7886  0AEC  0672               	xorwf	time_date_delimiter@type,w
  7887  0AED  0473               	iorwf	time_date_delimiter@type+1,w
  7888  0AEE  1D03               	btfss	3,2
  7889  0AEF  2AF4               	goto	l3594
  7890                           
  7891                           ;math_src.c: 57:         prev_hex_year = 0x29;
  7892  0AF0  3029               	movlw	41
  7893  0AF1  00F4               	movwf	??_time_date_delimiter
  7894  0AF2  0874               	movf	??_time_date_delimiter,w
  7895  0AF3  00C3               	movwf	_prev_hex_year
  7896  0AF4                     l3594:	
  7897                           
  7898                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  7899  0AF4  306A               	movlw	106
  7900  0AF5  0671               	xorwf	time_date_delimiter@limiter,w
  7901  0AF6  1D03               	btfss	3,2
  7902  0AF7  2B01               	goto	l3600
  7903  0AF8  3003               	movlw	3
  7904  0AF9  0672               	xorwf	time_date_delimiter@type,w
  7905  0AFA  0473               	iorwf	time_date_delimiter@type+1,w
  7906  0AFB  1D03               	btfss	3,2
  7907  0AFC  2B01               	goto	l3600
  7908                           
  7909                           ;math_src.c: 59:         prev_hex_year =0x39;
  7910  0AFD  3039               	movlw	57
  7911  0AFE  00F4               	movwf	??_time_date_delimiter
  7912  0AFF  0874               	movf	??_time_date_delimiter,w
  7913  0B00  00C3               	movwf	_prev_hex_year
  7914  0B01                     l3600:	
  7915                           
  7916                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  7917  0B01  307A               	movlw	122
  7918  0B02  0671               	xorwf	time_date_delimiter@limiter,w
  7919  0B03  1D03               	btfss	3,2
  7920  0B04  2B0E               	goto	l3606
  7921  0B05  3003               	movlw	3
  7922  0B06  0672               	xorwf	time_date_delimiter@type,w
  7923  0B07  0473               	iorwf	time_date_delimiter@type+1,w
  7924  0B08  1D03               	btfss	3,2
  7925  0B09  2B0E               	goto	l3606
  7926                           
  7927                           ;math_src.c: 61:         prev_hex_year = 0x49;
  7928  0B0A  3049               	movlw	73
  7929  0B0B  00F4               	movwf	??_time_date_delimiter
  7930  0B0C  0874               	movf	??_time_date_delimiter,w
  7931  0B0D  00C3               	movwf	_prev_hex_year
  7932  0B0E                     l3606:	
  7933                           
  7934                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  7935  0B0E  3039               	movlw	57
  7936  0B0F  0671               	xorwf	time_date_delimiter@limiter,w
  7937  0B10  1D03               	btfss	3,2
  7938  0B11  2B1B               	goto	l3612
  7939  0B12  3004               	movlw	4
  7940  0B13  0672               	xorwf	time_date_delimiter@type,w
  7941  0B14  0473               	iorwf	time_date_delimiter@type+1,w
  7942  0B15  1D03               	btfss	3,2
  7943  0B16  2B1B               	goto	l3612
  7944                           
  7945                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  7946  0B17  3009               	movlw	9
  7947  0B18  00F4               	movwf	??_time_date_delimiter
  7948  0B19  0874               	movf	??_time_date_delimiter,w
  7949  0B1A  00C2               	movwf	_prev_hex_hours
  7950  0B1B                     l3612:	
  7951                           
  7952                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  7953  0B1B  304A               	movlw	74
  7954  0B1C  0671               	xorwf	time_date_delimiter@limiter,w
  7955  0B1D  1D03               	btfss	3,2
  7956  0B1E  2B28               	goto	l3618
  7957  0B1F  3004               	movlw	4
  7958  0B20  0672               	xorwf	time_date_delimiter@type,w
  7959  0B21  0473               	iorwf	time_date_delimiter@type+1,w
  7960  0B22  1D03               	btfss	3,2
  7961  0B23  2B28               	goto	l3618
  7962                           
  7963                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  7964  0B24  3019               	movlw	25
  7965  0B25  00F4               	movwf	??_time_date_delimiter
  7966  0B26  0874               	movf	??_time_date_delimiter,w
  7967  0B27  00C2               	movwf	_prev_hex_hours
  7968  0B28                     l3618:	
  7969                           
  7970                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  7971  0B28  3059               	movlw	89
  7972  0B29  0671               	xorwf	time_date_delimiter@limiter,w
  7973  0B2A  1D03               	btfss	3,2
  7974  0B2B  2B35               	goto	l3624
  7975  0B2C  3004               	movlw	4
  7976  0B2D  0672               	xorwf	time_date_delimiter@type,w
  7977  0B2E  0473               	iorwf	time_date_delimiter@type+1,w
  7978  0B2F  1D03               	btfss	3,2
  7979  0B30  2B35               	goto	l3624
  7980                           
  7981                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  7982  0B31  3029               	movlw	41
  7983  0B32  00F4               	movwf	??_time_date_delimiter
  7984  0B33  0874               	movf	??_time_date_delimiter,w
  7985  0B34  00C2               	movwf	_prev_hex_hours
  7986  0B35                     l3624:	
  7987                           
  7988                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  7989  0B35  306A               	movlw	106
  7990  0B36  0671               	xorwf	time_date_delimiter@limiter,w
  7991  0B37  1D03               	btfss	3,2
  7992  0B38  2B42               	goto	l3630
  7993  0B39  3004               	movlw	4
  7994  0B3A  0672               	xorwf	time_date_delimiter@type,w
  7995  0B3B  0473               	iorwf	time_date_delimiter@type+1,w
  7996  0B3C  1D03               	btfss	3,2
  7997  0B3D  2B42               	goto	l3630
  7998                           
  7999                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8000  0B3E  3039               	movlw	57
  8001  0B3F  00F4               	movwf	??_time_date_delimiter
  8002  0B40  0874               	movf	??_time_date_delimiter,w
  8003  0B41  00C2               	movwf	_prev_hex_hours
  8004  0B42                     l3630:	
  8005                           
  8006                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8007  0B42  307A               	movlw	122
  8008  0B43  0671               	xorwf	time_date_delimiter@limiter,w
  8009  0B44  1D03               	btfss	3,2
  8010  0B45  2B4F               	goto	l3636
  8011  0B46  3004               	movlw	4
  8012  0B47  0672               	xorwf	time_date_delimiter@type,w
  8013  0B48  0473               	iorwf	time_date_delimiter@type+1,w
  8014  0B49  1D03               	btfss	3,2
  8015  0B4A  2B4F               	goto	l3636
  8016                           
  8017                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8018  0B4B  3049               	movlw	73
  8019  0B4C  00F4               	movwf	??_time_date_delimiter
  8020  0B4D  0874               	movf	??_time_date_delimiter,w
  8021  0B4E  00C2               	movwf	_prev_hex_hours
  8022  0B4F                     l3636:	
  8023                           
  8024                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8025  0B4F  3039               	movlw	57
  8026  0B50  0671               	xorwf	time_date_delimiter@limiter,w
  8027  0B51  1D03               	btfss	3,2
  8028  0B52  2B5C               	goto	l3642
  8029  0B53  3005               	movlw	5
  8030  0B54  0672               	xorwf	time_date_delimiter@type,w
  8031  0B55  0473               	iorwf	time_date_delimiter@type+1,w
  8032  0B56  1D03               	btfss	3,2
  8033  0B57  2B5C               	goto	l3642
  8034                           
  8035                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8036  0B58  3009               	movlw	9
  8037  0B59  00F4               	movwf	??_time_date_delimiter
  8038  0B5A  0874               	movf	??_time_date_delimiter,w
  8039  0B5B  00C1               	movwf	_prev_hex_mins
  8040  0B5C                     l3642:	
  8041                           
  8042                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8043  0B5C  304A               	movlw	74
  8044  0B5D  0671               	xorwf	time_date_delimiter@limiter,w
  8045  0B5E  1D03               	btfss	3,2
  8046  0B5F  2B69               	goto	l3648
  8047  0B60  3005               	movlw	5
  8048  0B61  0672               	xorwf	time_date_delimiter@type,w
  8049  0B62  0473               	iorwf	time_date_delimiter@type+1,w
  8050  0B63  1D03               	btfss	3,2
  8051  0B64  2B69               	goto	l3648
  8052                           
  8053                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8054  0B65  3019               	movlw	25
  8055  0B66  00F4               	movwf	??_time_date_delimiter
  8056  0B67  0874               	movf	??_time_date_delimiter,w
  8057  0B68  00C1               	movwf	_prev_hex_mins
  8058  0B69                     l3648:	
  8059                           
  8060                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8061  0B69  3059               	movlw	89
  8062  0B6A  0671               	xorwf	time_date_delimiter@limiter,w
  8063  0B6B  1D03               	btfss	3,2
  8064  0B6C  2B76               	goto	l3654
  8065  0B6D  3005               	movlw	5
  8066  0B6E  0672               	xorwf	time_date_delimiter@type,w
  8067  0B6F  0473               	iorwf	time_date_delimiter@type+1,w
  8068  0B70  1D03               	btfss	3,2
  8069  0B71  2B76               	goto	l3654
  8070                           
  8071                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8072  0B72  3029               	movlw	41
  8073  0B73  00F4               	movwf	??_time_date_delimiter
  8074  0B74  0874               	movf	??_time_date_delimiter,w
  8075  0B75  00C1               	movwf	_prev_hex_mins
  8076  0B76                     l3654:	
  8077                           
  8078                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8079  0B76  306A               	movlw	106
  8080  0B77  0671               	xorwf	time_date_delimiter@limiter,w
  8081  0B78  1D03               	btfss	3,2
  8082  0B79  2B83               	goto	l3660
  8083  0B7A  3005               	movlw	5
  8084  0B7B  0672               	xorwf	time_date_delimiter@type,w
  8085  0B7C  0473               	iorwf	time_date_delimiter@type+1,w
  8086  0B7D  1D03               	btfss	3,2
  8087  0B7E  2B83               	goto	l3660
  8088                           
  8089                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8090  0B7F  3039               	movlw	57
  8091  0B80  00F4               	movwf	??_time_date_delimiter
  8092  0B81  0874               	movf	??_time_date_delimiter,w
  8093  0B82  00C1               	movwf	_prev_hex_mins
  8094  0B83                     l3660:	
  8095                           
  8096                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8097  0B83  307A               	movlw	122
  8098  0B84  0671               	xorwf	time_date_delimiter@limiter,w
  8099  0B85  1D03               	btfss	3,2
  8100  0B86  2B90               	goto	l3666
  8101  0B87  3005               	movlw	5
  8102  0B88  0672               	xorwf	time_date_delimiter@type,w
  8103  0B89  0473               	iorwf	time_date_delimiter@type+1,w
  8104  0B8A  1D03               	btfss	3,2
  8105  0B8B  2B90               	goto	l3666
  8106                           
  8107                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8108  0B8C  3049               	movlw	73
  8109  0B8D  00F4               	movwf	??_time_date_delimiter
  8110  0B8E  0874               	movf	??_time_date_delimiter,w
  8111  0B8F  00C1               	movwf	_prev_hex_mins
  8112  0B90                     l3666:	
  8113                           
  8114                           ;math_src.c: 82:     val--;
  8115  0B90  3001               	movlw	1
  8116  0B91  02F6               	subwf	time_date_delimiter@val,f
  8117  0B92                     l3668:	
  8118                           
  8119                           ;math_src.c: 84:     return val;
  8120  0B92  0876               	movf	time_date_delimiter@val,w
  8121  0B93  0008               	return
  8122  0B94                     __end_of_time_date_delimiter:	
  8123                           
  8124                           	psect	text32
  8125  14CA                     __ptext32:	
  8126 ;; *************** function _set_time *****************
  8127 ;; Defined at:
  8128 ;;		line 12 in file "clock_src.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;		None
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;  i               2    5[COMMON] int 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1    wreg      void 
  8135 ;; Registers used:
  8136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 300/0
  8139 ;;		On exit  : 300/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8142 ;;      Params:         0       0       0       0       0
  8143 ;;      Locals:         2       0       0       0       0
  8144 ;;      Temps:          0       0       0       0       0
  8145 ;;      Totals:         2       0       0       0       0
  8146 ;;Total ram usage:        2 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    1
  8149 ;; This function calls:
  8150 ;;		_time_write_1
  8151 ;; This function is called by:
  8152 ;;		_main
  8153 ;;		_time_settings
  8154 ;;		_date_settings
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function _set_time
  8160  14CA                     _set_time:	
  8161                           
  8162                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8163                           
  8164                           ;incstack = 0
  8165                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8166  14CA  1686               	bsf	6,5	;volatile
  8167                           
  8168                           ;clock_src.c: 16:    time_write_1(0xbe);
  8169  14CB  30BE               	movlw	190
  8170  14CC  160A  118A  24A4  160A  118A  	fcall	_time_write_1
  8171                           
  8172                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8173  14D1  01F5               	clrf	set_time@i
  8174  14D2  01F6               	clrf	set_time@i+1
  8175  14D3                     l3308:	
  8176                           
  8177                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8178  14D3  0875               	movf	set_time@i,w
  8179  14D4  3EB3               	addlw	(low (_table| 0))& (0+255)
  8180  14D5  0084               	movwf	4
  8181  14D6  1383               	bcf	3,7	;select IRP bank1
  8182  14D7  0800               	movf	0,w
  8183  14D8  160A  118A  24A4  160A  118A  	fcall	_time_write_1
  8184                           
  8185                           ;clock_src.c: 20:      }
  8186  14DD  3001               	movlw	1
  8187  14DE  07F5               	addwf	set_time@i,f
  8188  14DF  1803               	skipnc
  8189  14E0  0AF6               	incf	set_time@i+1,f
  8190  14E1  3000               	movlw	0
  8191  14E2  07F6               	addwf	set_time@i+1,f
  8192  14E3  0876               	movf	set_time@i+1,w
  8193  14E4  3A80               	xorlw	128
  8194  14E5  00FF               	movwf	127
  8195  14E6  3080               	movlw	128
  8196  14E7  027F               	subwf	127,w
  8197  14E8  1D03               	skipz
  8198  14E9  2CEC               	goto	u2185
  8199  14EA  3008               	movlw	8
  8200  14EB  0275               	subwf	set_time@i,w
  8201  14EC                     u2185:	
  8202  14EC  1C03               	skipc
  8203  14ED  2CD3               	goto	l3308
  8204                           
  8205                           ;clock_src.c: 21:    RB5=0;
  8206  14EE  1283               	bcf	3,5	;RP0=0, select bank0
  8207  14EF  1303               	bcf	3,6	;RP1=0, select bank0
  8208  14F0  1286               	bcf	6,5	;volatile
  8209  14F1  0008               	return
  8210  14F2                     __end_of_set_time:	
  8211                           
  8212                           	psect	text33
  8213  14A4                     __ptext33:	
  8214 ;; *************** function _time_write_1 *****************
  8215 ;; Defined at:
  8216 ;;		line 114 in file "clock_src.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;  time_tx         1    wreg     unsigned char 
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  time_tx         1    4[COMMON] unsigned char 
  8221 ;;  j               2    2[COMMON] int 
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      void 
  8224 ;; Registers used:
  8225 ;;		wreg, status,2, status,0, btemp+1
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 300/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8231 ;;      Params:         0       0       0       0       0
  8232 ;;      Locals:         3       0       0       0       0
  8233 ;;      Temps:          2       0       0       0       0
  8234 ;;      Totals:         5       0       0       0       0
  8235 ;;Total ram usage:        5 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_ds1302_init
  8241 ;;		_set_time
  8242 ;;		_get_time
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           
  8247                           ;psect for function _time_write_1
  8248  14A4                     _time_write_1:	
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8252                           ;time_write_1@time_tx stored from wreg
  8253  14A4  00F4               	movwf	time_write_1@time_tx
  8254                           
  8255                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8256  14A5  01F2               	clrf	time_write_1@j
  8257  14A6  01F3               	clrf	time_write_1@j+1
  8258  14A7                     l472:	
  8259                           
  8260                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8261  14A7  1283               	bcf	3,5	;RP0=0, select bank0
  8262  14A8  1303               	bcf	3,6	;RP1=0, select bank0
  8263  14A9  1206               	bcf	6,4	;volatile
  8264                           
  8265                           ;clock_src.c: 120:         RB0=0;
  8266  14AA  1006               	bcf	6,0	;volatile
  8267                           
  8268                           ;clock_src.c: 121:         if(time_tx&0x01)
  8269  14AB  1874               	btfsc	time_write_1@time_tx,0
  8270                           
  8271                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8272  14AC  1606               	bsf	6,4	;volatile
  8273                           
  8274                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8275  14AD  0874               	movf	time_write_1@time_tx,w
  8276  14AE  00F0               	movwf	??_time_write_1
  8277  14AF  1003               	clrc
  8278  14B0  0C70               	rrf	??_time_write_1,w
  8279  14B1  00F1               	movwf	??_time_write_1+1
  8280  14B2  0871               	movf	??_time_write_1+1,w
  8281  14B3  00F4               	movwf	time_write_1@time_tx
  8282                           
  8283                           ;clock_src.c: 126:         RB0=1;
  8284  14B4  1406               	bsf	6,0	;volatile
  8285                           
  8286                           ;clock_src.c: 127:     }
  8287  14B5  3001               	movlw	1
  8288  14B6  07F2               	addwf	time_write_1@j,f
  8289  14B7  1803               	skipnc
  8290  14B8  0AF3               	incf	time_write_1@j+1,f
  8291  14B9  3000               	movlw	0
  8292  14BA  07F3               	addwf	time_write_1@j+1,f
  8293  14BB  0873               	movf	time_write_1@j+1,w
  8294  14BC  3A80               	xorlw	128
  8295  14BD  00FF               	movwf	127
  8296  14BE  3080               	movlw	128
  8297  14BF  027F               	subwf	127,w
  8298  14C0  1D03               	skipz
  8299  14C1  2CC4               	goto	u2175
  8300  14C2  3008               	movlw	8
  8301  14C3  0272               	subwf	time_write_1@j,w
  8302  14C4                     u2175:	
  8303  14C4  1C03               	skipc
  8304  14C5  2CA7               	goto	l472
  8305                           
  8306                           ;clock_src.c: 128:       RB0=0;
  8307  14C6  1283               	bcf	3,5	;RP0=0, select bank0
  8308  14C7  1303               	bcf	3,6	;RP1=0, select bank0
  8309  14C8  1006               	bcf	6,0	;volatile
  8310  14C9  0008               	return
  8311  14CA                     __end_of_time_write_1:	
  8312                           
  8313                           	psect	text34
  8314  1480                     __ptext34:	
  8315 ;; *************** function _incrementor *****************
  8316 ;; Defined at:
  8317 ;;		line 10 in file "math_src.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  upper_val       2    0[BANK0 ] int 
  8320 ;;  lower_val       2    2[BANK0 ] int 
  8321 ;;  z               1    4[BANK0 ] unsigned char 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      unsigned char 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0, pclath, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 300/0
  8330 ;;		On exit  : 300/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8333 ;;      Params:         0       5       0       0       0
  8334 ;;      Locals:         0       0       0       0       0
  8335 ;;      Temps:          2       0       0       0       0
  8336 ;;      Totals:         2       5       0       0       0
  8337 ;;Total ram usage:        7 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    2
  8340 ;; This function calls:
  8341 ;;		_modulus_func
  8342 ;; This function is called by:
  8343 ;;		_thermometer_threshhold_settings
  8344 ;;		_time_settings
  8345 ;;		_date_settings
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _incrementor
  8351  1480                     _incrementor:	
  8352                           
  8353                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8354                           
  8355                           ;incstack = 0
  8356                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8357  1480  0862               	movf	incrementor@lower_val,w
  8358  1481  3E30               	addlw	48
  8359  1482  00FB               	movwf	??_incrementor
  8360  1483  0863               	movf	incrementor@lower_val+1,w
  8361  1484  1803               	skipnc
  8362  1485  3E01               	addlw	1
  8363  1486  3E00               	addlw	0
  8364  1487  00FC               	movwf	??_incrementor+1
  8365  1488  0864               	movf	incrementor@z,w
  8366  1489  067B               	xorwf	??_incrementor,w
  8367  148A  047C               	iorwf	??_incrementor+1,w
  8368  148B  1D03               	skipz
  8369  148C  2CA2               	goto	l3498
  8370                           
  8371                           ;math_src.c: 12:      upper_val++;
  8372  148D  3001               	movlw	1
  8373  148E  07E0               	addwf	incrementor@upper_val,f
  8374  148F  1803               	skipnc
  8375  1490  0AE1               	incf	incrementor@upper_val+1,f
  8376  1491  3000               	movlw	0
  8377  1492  07E1               	addwf	incrementor@upper_val+1,f
  8378                           
  8379                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8380  1493  0861               	movf	incrementor@upper_val+1,w
  8381  1494  00F8               	movwf	modulus_func@x+1
  8382  1495  0860               	movf	incrementor@upper_val,w
  8383  1496  00F7               	movwf	modulus_func@x
  8384  1497  300A               	movlw	10
  8385  1498  00F9               	movwf	modulus_func@y
  8386  1499  3000               	movlw	0
  8387  149A  00FA               	movwf	modulus_func@y+1
  8388  149B  160A  118A  2370   	fcall	_modulus_func
  8389  149E  0878               	movf	?_modulus_func+1,w
  8390  149F  00E1               	movwf	incrementor@upper_val+1
  8391  14A0  0877               	movf	?_modulus_func,w
  8392  14A1  00E0               	movwf	incrementor@upper_val
  8393  14A2                     l3498:	
  8394                           
  8395                           ;math_src.c: 15:      return upper_val;
  8396  14A2  0860               	movf	incrementor@upper_val,w
  8397  14A3  0008               	return
  8398  14A4                     __end_of_incrementor:	
  8399                           
  8400                           	psect	text35
  8401  1370                     __ptext35:	
  8402 ;; *************** function _modulus_func *****************
  8403 ;; Defined at:
  8404 ;;		line 5 in file "math_src.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  x               2    7[COMMON] int 
  8407 ;;  y               2    9[COMMON] int 
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;		None
  8410 ;; Return value:  Size  Location     Type
  8411 ;;                  2    7[COMMON] int 
  8412 ;; Registers used:
  8413 ;;		wreg, status,2, status,0, pclath, cstack
  8414 ;; Tracked objects:
  8415 ;;		On entry : 300/0
  8416 ;;		On exit  : 300/0
  8417 ;;		Unchanged: 300/0
  8418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8419 ;;      Params:         4       0       0       0       0
  8420 ;;      Locals:         0       0       0       0       0
  8421 ;;      Temps:          0       0       0       0       0
  8422 ;;      Totals:         4       0       0       0       0
  8423 ;;Total ram usage:        4 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    1
  8426 ;; This function calls:
  8427 ;;		___awmod
  8428 ;; This function is called by:
  8429 ;;		_main
  8430 ;;		_thermometer_threshhold_settings
  8431 ;;		_time_settings
  8432 ;;		_date_settings
  8433 ;;		_incrementor
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           
  8438                           ;psect for function _modulus_func
  8439  1370                     _modulus_func:	
  8440                           
  8441                           ;math_src.c: 6:     x = x % y;
  8442                           
  8443                           ;incstack = 0
  8444                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8445  1370  087A               	movf	modulus_func@y+1,w
  8446  1371  00F1               	movwf	___awmod@divisor+1
  8447  1372  0879               	movf	modulus_func@y,w
  8448  1373  00F0               	movwf	___awmod@divisor
  8449  1374  0878               	movf	modulus_func@x+1,w
  8450  1375  00F3               	movwf	___awmod@dividend+1
  8451  1376  0877               	movf	modulus_func@x,w
  8452  1377  00F2               	movwf	___awmod@dividend
  8453  1378  160A  118A  26CD   	fcall	___awmod
  8454  137B  0871               	movf	?___awmod+1,w
  8455  137C  00F8               	movwf	modulus_func@x+1
  8456  137D  0870               	movf	?___awmod,w
  8457  137E  00F7               	movwf	modulus_func@x
  8458                           
  8459                           ;math_src.c: 7:     return x;
  8460  137F  0008               	return
  8461  1380                     __end_of_modulus_func:	
  8462                           
  8463                           	psect	text36
  8464  16CD                     __ptext36:	
  8465 ;; *************** function ___awmod *****************
  8466 ;; Defined at:
  8467 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;  divisor         2    0[COMMON] int 
  8470 ;;  dividend        2    2[COMMON] int 
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  sign            1    6[COMMON] unsigned char 
  8473 ;;  counter         1    5[COMMON] unsigned char 
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  2    0[COMMON] int 
  8476 ;; Registers used:
  8477 ;;		wreg, status,2, status,0
  8478 ;; Tracked objects:
  8479 ;;		On entry : 300/0
  8480 ;;		On exit  : 300/0
  8481 ;;		Unchanged: 300/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8483 ;;      Params:         4       0       0       0       0
  8484 ;;      Locals:         2       0       0       0       0
  8485 ;;      Temps:          1       0       0       0       0
  8486 ;;      Totals:         7       0       0       0       0
  8487 ;;Total ram usage:        7 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_modulus_func
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function ___awmod
  8498  16CD                     ___awmod:	
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8502  16CD  01F6               	clrf	___awmod@sign
  8503  16CE  1FF3               	btfss	___awmod@dividend+1,7
  8504  16CF  2ED7               	goto	l3230
  8505  16D0  09F2               	comf	___awmod@dividend,f
  8506  16D1  09F3               	comf	___awmod@dividend+1,f
  8507  16D2  0AF2               	incf	___awmod@dividend,f
  8508  16D3  1903               	skipnz
  8509  16D4  0AF3               	incf	___awmod@dividend+1,f
  8510  16D5  01F6               	clrf	___awmod@sign
  8511  16D6  0AF6               	incf	___awmod@sign,f
  8512  16D7                     l3230:	
  8513  16D7  1FF1               	btfss	___awmod@divisor+1,7
  8514  16D8  2EDE               	goto	l3234
  8515  16D9  09F0               	comf	___awmod@divisor,f
  8516  16DA  09F1               	comf	___awmod@divisor+1,f
  8517  16DB  0AF0               	incf	___awmod@divisor,f
  8518  16DC  1903               	skipnz
  8519  16DD  0AF1               	incf	___awmod@divisor+1,f
  8520  16DE                     l3234:	
  8521  16DE  0870               	movf	___awmod@divisor,w
  8522  16DF  0471               	iorwf	___awmod@divisor+1,w
  8523  16E0  1903               	btfsc	3,2
  8524  16E1  2F0B               	goto	l3252
  8525  16E2  01F5               	clrf	___awmod@counter
  8526  16E3  0AF5               	incf	___awmod@counter,f
  8527  16E4                     l3242:	
  8528  16E4  1BF1               	btfsc	___awmod@divisor+1,7
  8529  16E5  2EF2               	goto	l3244
  8530  16E6  3001               	movlw	1
  8531  16E7                     u2075:	
  8532  16E7  1003               	clrc
  8533  16E8  0DF0               	rlf	___awmod@divisor,f
  8534  16E9  0DF1               	rlf	___awmod@divisor+1,f
  8535  16EA  3EFF               	addlw	-1
  8536  16EB  1D03               	skipz
  8537  16EC  2EE7               	goto	u2075
  8538  16ED  3001               	movlw	1
  8539  16EE  00F4               	movwf	??___awmod
  8540  16EF  0874               	movf	??___awmod,w
  8541  16F0  07F5               	addwf	___awmod@counter,f
  8542  16F1  2EE4               	goto	l3242
  8543  16F2                     l3244:	
  8544  16F2  0871               	movf	___awmod@divisor+1,w
  8545  16F3  0273               	subwf	___awmod@dividend+1,w
  8546  16F4  1D03               	skipz
  8547  16F5  2EF8               	goto	u2095
  8548  16F6  0870               	movf	___awmod@divisor,w
  8549  16F7  0272               	subwf	___awmod@dividend,w
  8550  16F8                     u2095:	
  8551  16F8  1C03               	skipc
  8552  16F9  2F00               	goto	l3248
  8553  16FA  0870               	movf	___awmod@divisor,w
  8554  16FB  02F2               	subwf	___awmod@dividend,f
  8555  16FC  0871               	movf	___awmod@divisor+1,w
  8556  16FD  1C03               	skipc
  8557  16FE  03F3               	decf	___awmod@dividend+1,f
  8558  16FF  02F3               	subwf	___awmod@dividend+1,f
  8559  1700                     l3248:	
  8560  1700  3001               	movlw	1
  8561  1701                     u2105:	
  8562  1701  1003               	clrc
  8563  1702  0CF1               	rrf	___awmod@divisor+1,f
  8564  1703  0CF0               	rrf	___awmod@divisor,f
  8565  1704  3EFF               	addlw	-1
  8566  1705  1D03               	skipz
  8567  1706  2F01               	goto	u2105
  8568  1707  3001               	movlw	1
  8569  1708  02F5               	subwf	___awmod@counter,f
  8570  1709  1D03               	btfss	3,2
  8571  170A  2EF2               	goto	l3244
  8572  170B                     l3252:	
  8573  170B  0876               	movf	___awmod@sign,w
  8574  170C  1903               	btfsc	3,2
  8575  170D  2F13               	goto	l3256
  8576  170E  09F2               	comf	___awmod@dividend,f
  8577  170F  09F3               	comf	___awmod@dividend+1,f
  8578  1710  0AF2               	incf	___awmod@dividend,f
  8579  1711  1903               	skipnz
  8580  1712  0AF3               	incf	___awmod@dividend+1,f
  8581  1713                     l3256:	
  8582  1713  0873               	movf	___awmod@dividend+1,w
  8583  1714  00F1               	movwf	?___awmod+1
  8584  1715  0872               	movf	___awmod@dividend,w
  8585  1716  00F0               	movwf	?___awmod
  8586  1717  0008               	return
  8587  1718                     __end_of___awmod:	
  8588                           
  8589                           	psect	text37
  8590  13A5                     __ptext37:	
  8591 ;; *************** function _button_delay *****************
  8592 ;; Defined at:
  8593 ;;		line 660 in file "Button_src.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  i               2    0[COMMON] int 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, btemp+1
  8602 ;; Tracked objects:
  8603 ;;		On entry : 300/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8607 ;;      Params:         0       0       0       0       0
  8608 ;;      Locals:         2       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0
  8610 ;;      Totals:         2       0       0       0       0
  8611 ;;Total ram usage:        2 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_set_beep_threshhold
  8617 ;;		_thermometer_threshhold_settings
  8618 ;;		_time_settings
  8619 ;;		_date_settings
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function _button_delay
  8625  13A5                     _button_delay:	
  8626                           
  8627                           ;Button_src.c: 661:     for(int i=0;i<10000;i++);
  8628                           
  8629                           ;incstack = 0
  8630                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  8631  13A5  01F0               	clrf	button_delay@i
  8632  13A6  01F1               	clrf	button_delay@i+1
  8633  13A7                     l3488:	
  8634  13A7  3001               	movlw	1
  8635  13A8  07F0               	addwf	button_delay@i,f
  8636  13A9  1803               	skipnc
  8637  13AA  0AF1               	incf	button_delay@i+1,f
  8638  13AB  3000               	movlw	0
  8639  13AC  07F1               	addwf	button_delay@i+1,f
  8640  13AD  0871               	movf	button_delay@i+1,w
  8641  13AE  3A80               	xorlw	128
  8642  13AF  00FF               	movwf	127
  8643  13B0  30A7               	movlw	167
  8644  13B1  027F               	subwf	127,w
  8645  13B2  1D03               	skipz
  8646  13B3  2BB6               	goto	u2285
  8647  13B4  3010               	movlw	16
  8648  13B5  0270               	subwf	button_delay@i,w
  8649  13B6                     u2285:	
  8650  13B6  1803               	btfsc	3,0
  8651  13B7  0008               	return
  8652  13B8  2BA7               	goto	l3488
  8653  13B9                     __end_of_button_delay:	
  8654                           
  8655                           	psect	text38
  8656  0023                     __ptext38:	
  8657 ;; *************** function _cold_threshold *****************
  8658 ;; Defined at:
  8659 ;;		line 22 in file "threshold_src.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  upper_val       2    3[COMMON] int 
  8662 ;;  lower_val       2    5[COMMON] int 
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;		None
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      unsigned char 
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 300/0
  8671 ;;		On exit  : 300/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8674 ;;      Params:         4       0       0       0       0
  8675 ;;      Locals:         0       0       0       0       0
  8676 ;;      Temps:          1       0       0       0       0
  8677 ;;      Totals:         5       0       0       0       0
  8678 ;;Total ram usage:        5 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    2
  8681 ;; This function calls:
  8682 ;;		_write_char
  8683 ;; This function is called by:
  8684 ;;		_main
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           
  8689                           ;psect for function _cold_threshold
  8690  0023                     _cold_threshold:	
  8691                           
  8692                           ;threshold_src.c: 23:      if(shi <= upper_val && (ge <= lower_val || ge >= lower_val)){
  8693                           
  8694                           ;incstack = 0
  8695                           ; Regs used in _cold_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8696  0023  0874               	movf	cold_threshold@upper_val+1,w
  8697  0024  3A80               	xorlw	128
  8698  0025  00F7               	movwf	??_cold_threshold
  8699  0026  3080               	movlw	128
  8700  0027  0277               	subwf	??_cold_threshold,w
  8701  0028  1D03               	skipz
  8702  0029  282C               	goto	u3895
  8703  002A  085B               	movf	_shi,w
  8704  002B  0273               	subwf	cold_threshold@upper_val,w
  8705  002C                     u3895:	
  8706  002C  1C03               	skipc
  8707  002D  286D               	goto	l948
  8708  002E  0876               	movf	cold_threshold@lower_val+1,w
  8709  002F  3A80               	xorlw	128
  8710  0030  00F7               	movwf	??_cold_threshold
  8711  0031  3080               	movlw	128
  8712  0032  0277               	subwf	??_cold_threshold,w
  8713  0033  1D03               	skipz
  8714  0034  2839               	goto	u3905
  8715  0035  1283               	bcf	3,5	;RP0=0, select bank0
  8716  0036  1303               	bcf	3,6	;RP1=0, select bank0
  8717  0037  085A               	movf	_ge,w
  8718  0038  0275               	subwf	cold_threshold@lower_val,w
  8719  0039                     u3905:	
  8720  0039  1803               	skipnc
  8721  003A  2846               	goto	l4640
  8722  003B  0876               	movf	cold_threshold@lower_val+1,w
  8723  003C  3A80               	xorlw	128
  8724  003D  3C80               	sublw	128
  8725  003E  1D03               	skipz
  8726  003F  2844               	goto	u3915
  8727  0040  0875               	movf	cold_threshold@lower_val,w
  8728  0041  1283               	bcf	3,5	;RP0=0, select bank0
  8729  0042  1303               	bcf	3,6	;RP1=0, select bank0
  8730  0043  025A               	subwf	_ge,w
  8731  0044                     u3915:	
  8732  0044  1C03               	skipc
  8733  0045  286D               	goto	l948
  8734  0046                     l4640:	
  8735                           
  8736                           ;threshold_src.c: 24:     cold_counter ++;
  8737  0046  3001               	movlw	1
  8738  0047  1683               	bsf	3,5	;RP0=1, select bank1
  8739  0048  1303               	bcf	3,6	;RP1=0, select bank1
  8740  0049  07B1               	addwf	_cold_counter^(0+128),f
  8741  004A  1803               	skipnc
  8742  004B  0AB2               	incf	(_cold_counter+1)^(0+128),f
  8743  004C  3000               	movlw	0
  8744  004D  07B2               	addwf	(_cold_counter+1)^(0+128),f
  8745                           
  8746                           ;threshold_src.c: 25:     heater_state = '1';
  8747  004E  3031               	movlw	49
  8748  004F  00F7               	movwf	??_cold_threshold
  8749  0050  0877               	movf	??_cold_threshold,w
  8750  0051  1283               	bcf	3,5	;RP0=0, select bank0
  8751  0052  00D1               	movwf	_heater_state
  8752                           
  8753                           ;threshold_src.c: 26:     cooler_state = '0';
  8754  0053  3030               	movlw	48
  8755  0054  00F7               	movwf	??_cold_threshold
  8756  0055  0877               	movf	??_cold_threshold,w
  8757  0056  00D0               	movwf	_cooler_state
  8758                           
  8759                           ;threshold_src.c: 27:     write_char('C');
  8760  0057  3043               	movlw	67
  8761  0058  160A  118A  23E1  120A  118A  	fcall	_write_char
  8762                           
  8763                           ;threshold_src.c: 28:     write_char('O');
  8764  005D  304F               	movlw	79
  8765  005E  160A  118A  23E1  120A  118A  	fcall	_write_char
  8766                           
  8767                           ;threshold_src.c: 29:     write_char('L');
  8768  0063  304C               	movlw	76
  8769  0064  160A  118A  23E1  120A  118A  	fcall	_write_char
  8770                           
  8771                           ;threshold_src.c: 30:     write_char('D');
  8772  0069  3044               	movlw	68
  8773  006A  160A  118A  23E1   	fcall	_write_char
  8774  006D                     l948:	
  8775                           ;threshold_src.c: 36:     }
  8776                           
  8777                           
  8778                           ;threshold_src.c: 37:     return buzzer_watcher;
  8779  006D  1283               	bcf	3,5	;RP0=0, select bank0
  8780  006E  1303               	bcf	3,6	;RP1=0, select bank0
  8781  006F  0853               	movf	_buzzer_watcher,w
  8782  0070  0008               	return
  8783  0071                     __end_of_cold_threshold:	
  8784                           
  8785                           	psect	text39
  8786  13E1                     __ptext39:	
  8787 ;; *************** function _write_char *****************
  8788 ;; Defined at:
  8789 ;;		line 28 in file "LCD_src.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  x               1    wreg     unsigned char 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  x               1    2[COMMON] unsigned char 
  8794 ;;  i               2    0        int 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 300/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8804 ;;      Params:         0       0       0       0       0
  8805 ;;      Locals:         1       0       0       0       0
  8806 ;;      Temps:          0       0       0       0       0
  8807 ;;      Totals:         1       0       0       0       0
  8808 ;;Total ram usage:        1 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    1
  8811 ;; This function calls:
  8812 ;;		_delay_screen
  8813 ;; This function is called by:
  8814 ;;		_main
  8815 ;;		_display_temp
  8816 ;;		_display_clock
  8817 ;;		_display_date
  8818 ;;		_thermometer_threshhold_settings
  8819 ;;		_time_settings
  8820 ;;		_date_settings
  8821 ;;		_set_upper_threshold
  8822 ;;		_cold_threshold
  8823 ;;		_set_lower_threshold
  8824 ;;		_reset_alarm
  8825 ;;		_display_day
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           
  8830                           ;psect for function _write_char
  8831  13E1                     _write_char:	
  8832                           
  8833                           ;incstack = 0
  8834                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8835                           ;write_char@x stored from wreg
  8836  13E1  00F2               	movwf	write_char@x
  8837                           
  8838                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  8839  13E2  1283               	bcf	3,5	;RP0=0, select bank0
  8840  13E3  1303               	bcf	3,6	;RP1=0, select bank0
  8841  13E4  1685               	bsf	5,5	;volatile
  8842                           
  8843                           ;LCD_src.c: 32:  RA4=0;
  8844  13E5  1205               	bcf	5,4	;volatile
  8845                           
  8846                           ;LCD_src.c: 33:  RA3=0;
  8847  13E6  1185               	bcf	5,3	;volatile
  8848                           
  8849                           ;LCD_src.c: 34:  delay_screen();
  8850  13E7  160A  118A  2391  160A  118A  	fcall	_delay_screen
  8851                           
  8852                           ;LCD_src.c: 35:  RA3=1;
  8853  13EC  1283               	bcf	3,5	;RP0=0, select bank0
  8854  13ED  1303               	bcf	3,6	;RP1=0, select bank0
  8855  13EE  1585               	bsf	5,3	;volatile
  8856                           
  8857                           ;LCD_src.c: 36:  PORTD= x;
  8858  13EF  0872               	movf	write_char@x,w
  8859  13F0  0088               	movwf	8	;volatile
  8860                           
  8861                           ;LCD_src.c: 37:  delay_screen();
  8862  13F1  160A  118A  2391   	fcall	_delay_screen
  8863                           
  8864                           ;LCD_src.c: 38:  RA3=0;
  8865  13F4  1283               	bcf	3,5	;RP0=0, select bank0
  8866  13F5  1303               	bcf	3,6	;RP1=0, select bank0
  8867  13F6  1185               	bcf	5,3	;volatile
  8868  13F7  0008               	return
  8869  13F8                     __end_of_write_char:	
  8870                           
  8871                           	psect	text40
  8872  1391                     __ptext40:	
  8873 ;; *************** function _delay_screen *****************
  8874 ;; Defined at:
  8875 ;;		line 70 in file "LCD_src.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  i               2    0[COMMON] int 
  8880 ;; Return value:  Size  Location     Type
  8881 ;;                  1    wreg      void 
  8882 ;; Registers used:
  8883 ;;		wreg, status,2, btemp+1
  8884 ;; Tracked objects:
  8885 ;;		On entry : 300/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8889 ;;      Params:         0       0       0       0       0
  8890 ;;      Locals:         2       0       0       0       0
  8891 ;;      Temps:          0       0       0       0       0
  8892 ;;      Totals:         2       0       0       0       0
  8893 ;;Total ram usage:        2 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; This function calls:
  8896 ;;		Nothing
  8897 ;; This function is called by:
  8898 ;;		_lcd_init
  8899 ;;		_write_char
  8900 ;;		_write_cmd
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _delay_screen
  8906  1391                     _delay_screen:	
  8907                           
  8908                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  8912  1391  01F0               	clrf	delay_screen@i
  8913  1392  01F1               	clrf	delay_screen@i+1
  8914  1393                     l3272:	
  8915  1393  3001               	movlw	1
  8916  1394  07F0               	addwf	delay_screen@i,f
  8917  1395  1803               	skipnc
  8918  1396  0AF1               	incf	delay_screen@i+1,f
  8919  1397  3000               	movlw	0
  8920  1398  07F1               	addwf	delay_screen@i+1,f
  8921  1399  0871               	movf	delay_screen@i+1,w
  8922  139A  3A80               	xorlw	128
  8923  139B  00FF               	movwf	127
  8924  139C  3080               	movlw	128
  8925  139D  027F               	subwf	127,w
  8926  139E  1D03               	skipz
  8927  139F  2BA2               	goto	u2135
  8928  13A0  3005               	movlw	5
  8929  13A1  0270               	subwf	delay_screen@i,w
  8930  13A2                     u2135:	
  8931  13A2  1803               	btfsc	3,0
  8932  13A3  0008               	return
  8933  13A4  2B93               	goto	l3272
  8934  13A5                     __end_of_delay_screen:	
  8935  007E                     btemp	set	126	;btemp
  8936  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      79
    BANK1            80      0      27
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod
    _cold_threshold->_write_char
    _write_char->_delay_screen

Critical Paths under _main in BANK0

    _main->_date_settings
    _main->_thermometer_threshhold_settings
    _main->_time_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   44049
                                              8 BANK0      7     7      0
                     _cold_threshold
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   13610
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      3     3      0    7701
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   13610
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     371
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    4531
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2617
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _cold_threshold                                       5     1      4     438
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cold_threshold
     _write_char
       _delay_screen
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1B       7       33.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      78      12        0.0%
ABS                  0      0      78       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Dec 12 08:48:48 2019

                                       _a 004A                                         _b 0049  
                                       _c 0048                                         _p 0022  
                                       _t 0032                                         _w 0030  
                                       _x 002E                                         _y 002C  
                                       _z 002A                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005C                                        _TZ 005D  
                                      _ge 005A                                        _wd 003E  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 0006  
                           ?_display_date 0070                                       l165 0D11  
                                     l357 1345                                       l472 14A7  
                                     l478 1552                                       l750 0158  
                                     l742 007D                                       l735 0FED  
                                     l751 0160                                       l744 00E3  
                                     l729 0D8B                                       l745 00EB  
                                     l770 03FB                                       l762 0322  
                                     l771 0403                                       l782 04F5  
                                     l791 06AB                                       l783 04FD  
                                     l943 175F                                       l759 0295  
                                     l776 046F                                       l768 0395  
                                     l777 0477                                       l955 16C9  
                                     l948 006D                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005E  
                           ?_display_temp 0070                                       _TLV 005F  
                                     _shi 005B                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0065  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1314 1457                                      l4012 0E9C  
                                    l3230 16D7                                      l3242 16E4  
                                    l3234 16DE                                      l4202 04BC  
                                    l3402 15B3                                      l3244 16F2  
                                    l3252 170B                                      l3308 14D3  
                                    l4214 04E0                                      l4206 04C5  
                                    l3350 160B                                      l4062 0F28  
                                    l3272 1393                                      l3256 1713  
                                    l3248 1700                                      l3600 0B01  
                                    l4216 04E5                                      l3352 15E4  
                                    l3360 161B                                      l4080 0FA3  
                                    l3522 0A5C                                      l4314 0701  
                                    l4234 0531                                      l3612 0B1B  
                                    l3540 0A80                                      l4180 045A  
                                    l4172 0440                                      l3348 160A  
                                    l3380 1630                                      l3630 0B42  
                                    l3606 0B0E                                      l3534 0A74  
                                    l4246 0547                                      l4238 053A  
                                    l4182 045F                                      l3702 1440  
                                    l3454 13BB                                      l3278 1349  
                                    l3624 0B35                                      l3552 0A99  
                                    l3528 0A68                                      l4344 0744  
                                    l4248 054C                                      l4168 0437  
                                    l3472 1563                                      l4440 0128  
                                    l3642 0B5C                                      l3618 0B28  
                                    l3570 0AC0                                      l3546 0A8C  
                                    l4282 0686                                      l4450 0148  
                                    l3660 0B83                                      l3636 0B4F  
                                    l3564 0AB3                                      l3732 1678  
                                    l3724 1654                                      l4436 011F  
                                    l3654 0B76                                      l3582 0ADA  
                                    l3558 0AA6                                      l4374 078A  
                                    l4278 0671                                      l4710 085F  
                                    l4702 083D                                      l3726 1662  
                                    l3750 1590                                      l4640 0046  
                                    l3488 13A7                                      l3648 0B69  
                                    l3576 0ACD                                      l3736 1683  
                                    l4472 019D                                      l4448 0143  
                                    l3498 14A2                                      l3666 0B90  
                                    l3594 0AF4                                      l4714 0870  
                                    l4706 084E                                      l3682 1420  
                                    l3754 159E                                      l3850 09CB  
                                    l4490 01D8                                      l4482 01C1  
                                    l3588 0AE7                                      l3668 0B92  
                                    l3684 1429                                      l3748 1582  
                                    l4548 02E5                                      l4468 0194  
                                    l4484 01C6                                      l4812 0CCA  
                                    l4718 0881                                      l3694 1438  
                                    l3758 15A9                                      l3854 09D5  
                                    l3846 09C1                                      l4494 01E7  
                                    l4750 0BD2                                      l3928 089C  
                                    l4672 154A                                      l4824 0D4B  
                                    l3890 176E                                      l3858 09DF  
                                    l3878 14FD                                      l4686 001F  
                                    l4696 0820                            ?_display_clock 0070  
                                    l4698 082C                                      l3994 0E59  
                                    u2105 1701                                      u3005 159F  
                                    u2135 13A2                                      u3025 0979  
                                    u2075 16E7                                      u3035 0984  
                                    u3045 0991                                      u2095 16F8  
                                    u2175 14C4                                      u2255 13CA  
                                    u2185 14EC                                      u2275 1573  
                                    u2285 13B6                                      u3095 1518  
                                    u4065 0D60                                      u2905 1657  
                                    u2925 1663                                      u2935 166F  
                                    u3905 0039                                      u2865 1443  
                                    u2945 1679                                      u3915 0044  
                                    u3845 1691                                      u2975 1585  
                                    u3855 169E                                      u3865 171F  
                                    u2995 1596                                      u3875 172A  
                                    u3895 002C               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0B94  
                                    _init 132C                                      _var1 004F  
                                    _var2 004E                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 0060  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 143A  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1718  
                         __end_of___lbmod 145D                      __end_of_delay_screen 13A5  
                         __end_of___lwdiv 1688                           __end_of___lwmod 15AE  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 00AF                                     _table 00B3  
                                   _stats 0024                                     main@i 006D  
                          write_byte@temp 0076                       _set_lower_threshold 1688  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                        ??_cold_threshold 0077                           __initialization 07E0  
                            __end_of_main 0D7F                              __end_of_init 1334  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0068  
                                  ??_init 0070                      incrementor@lower_val 0062  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0060  
                        __end_of_lcd_init 1480                          __end_of_get_temp 0A3D  
                        __end_of_get_time 151E                                    _baifen 0058  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 13B9                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00A7  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 1370                       _set_upper_threshold 1718  
                                  _table1 00A0                           ___awmod@divisor 0070  
                                  _shifen 0059                                    _wanfen 0056  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 14F2  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 1800                      __end_of_display_temp 1419  
                          __pcstackCOMMON 0070                              __pidataBANK1 133C  
                   __size_of_delay_screen 0014                   cold_threshold@lower_val 0075  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                   cold_threshold@upper_val 0073  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 1391                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 1361  
                              _delay_temp 1344                                __pmaintext 0B94  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0064  
                         _cold_high_night 00AD                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 0387  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                            _heat_counter 003C                                 ?_set_time 0070  
                    __size_of_reset_alarm 002E                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 13E1  
                _time_date_hex_terminator 1352                                   ___lbdiv 1419  
                                 ___awmod 16CD                                   ___lbmod 143A  
                         __size_of_delay2 0014                                   ___lwdiv 164C  
                                 ___lwmod 157C                                   _alarm__ 004D  
                                 _day_hex 0047                                   _day_low 0028  
                            _heater_state 0051                                   __ptext1 0071  
                                 __ptext2 0D7F                                   __ptext3 1718  
                                 __ptext4 1688                                   __ptext5 0006  
                                 __ptext6 151E                                   __ptext7 145D  
                                 __ptext8 13CD                                   __ptext9 1327  
                    __end_of_button_delay 13B9                              _cold_counter 00B1  
                                 delay2@i 0070                         __end_of_init_temp 132C  
                        ___awmod@dividend 0072                         __end_of_read_byte 15E2  
                                 _qianfen 0057                      __size_of_time_read_1 0030  
                                 _lower_t 0054               __end_of_set_beep_threshhold 0023  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 009D  
                                 clrloop0 1335                                ??_lcd_init 0073  
                                 _upper_t 0055                                ??_get_temp 0060  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 15E2  
                              ??_set_time 0075                       _time_date_delimiter 0A3D  
                            _display_date 1763                              _display_temp 13F8  
                       __end_of_write_cmd 0818                          ___lbmod@dividend 0074  
                            _cooler_state 0050                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 0936  
                  __size_of_date_settings 0459                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 16CD                             ??_display_day 0075  
                          __end_of_delay2 13CD                                _write_char 13E1  
                              _write_byte 1616                   __size_of_cold_threshold 004E  
                          _var_night_high 0038                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 1380                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 1380  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0387                               __pdataBANK1 00B3  
                              read_byte@i 0076                                read_byte@j 0040  
             __end_of_set_upper_threshold 1763                       __end_of_display_day 0891  
                               ___latbits 0002                             __pcstackBANK0 0060  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       __size_of_get_temp 0107                         __size_of_get_time 002C  
              ??_time_date_hex_terminator 0071                              _button_delay 13A5  
                        ___lwdiv@dividend 0078                               _day_counter 0020  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                                 _cold_high 0036  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 14A4                      __end_of_time_write_1 14CA  
                      _initialise_buttons 13CD                           _day_of_week_var 00A9  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 1327                                 _read_byte 15AE  
                     ?_initialise_buttons 0070                                 clear_ram0 1334  
                           ??_reset_alarm 0073                            _prev_hex_hours 0042  
                            ??_delay_temp 0071                            _cold_low_night 00AB  
                               _temp_high 004B                               _display_day 0818  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 0281  
       ??_thermometer_threshhold_settings 0065          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0D7F                      ??_initialise_buttons 0070  
                  __size_of_time_settings 0316                            _cold_threshold 0023  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 1352  
                               _write_cmd 0801                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 003A  
                         _buzzer_watcher1 0052                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0065                      __size_of_ds1302_init 000F  
                             _incrementor 1480                    __end_of_cold_threshold 0071  
                            _modulus_func 1370                       __end_of_reset_alarm 154C  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 0026  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 132C                                  __ptext11 14F2  
                                __ptext20 164C                                  __ptext12 154C  
                                __ptext21 143A                                  __ptext13 0936  
                                __ptext30 1352                                  __ptext22 1419  
                                __ptext14 1616                                  __ptext31 0A3D  
                                __ptext23 1361                                  __ptext15 15E2  
                                __ptext40 1391                                  __ptext32 14CA  
                                __ptext24 13F8                                  __ptext16 15AE  
                                __ptext33 14A4                                  __ptext25 0818  
                                __ptext17 1344                                  __ptext34 1480  
                                __ptext26 1763                                  __ptext18 13B9  
                                __ptext35 1370                                  __ptext27 0891  
                                __ptext19 157C                                  __ptext36 16CD  
                                __ptext28 0387                                  __ptext37 13A5  
                                __ptext29 0801                                  __ptext38 0023  
                                __ptext39 13E1                       __end_of_time_read_1 157C  
                                _cold_low 0034                                ?_write_cmd 0070  
                                _lcd_init 145D                                  _get_temp 0936  
                                _get_time 14F2                             _time_settings 0071  
        __end_of_time_date_hex_terminator 1361                             __size_of_main 01EB  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0046                                 set_time@i 0075  
                           _prev_hex_mins 0041                             _prev_hex_year 0043  
                            ??_reset_temp 0074                                  _set_time 14CA  
                                _temp_low 004C                                  _prev_hex 0045  
              time_date_delimiter@limiter 0071                           ?_cold_threshold 0073  
            __size_of_set_lower_threshold 0045                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 00A5  
                          _buzzer_watcher 0053                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0B94  
                                init_ram0 1384                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 1616  
                             ??_read_byte 0074                            ?_time_settings 0070  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 151E                              _time_write_1 14A4  
                            _prev_hex_day 0044                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 154C                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 004B  
                           _display_clock 0891                             time_write_1@j 0072  
                      __end_of_write_char 13F8                        __end_of_write_byte 164C  
