

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Dec 12 19:06:42 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 2.10
    57                           ; Generated 31/07/2019 GMT
    58                           ; 
    59                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F877A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  009F                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  010F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001D                     	;# 
   303  001E                     	;# 
   304  001F                     	;# 
   305  0081                     	;# 
   306  0085                     	;# 
   307  0086                     	;# 
   308  0087                     	;# 
   309  0088                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000E                     	;# 
   346  000F                     	;# 
   347  0010                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  001D                     	;# 
   363  001E                     	;# 
   364  001F                     	;# 
   365  0081                     	;# 
   366  0085                     	;# 
   367  0086                     	;# 
   368  0087                     	;# 
   369  0088                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  010F                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0088                     	;# 
   490  0089                     	;# 
   491  008C                     	;# 
   492  008D                     	;# 
   493  008E                     	;# 
   494  0091                     	;# 
   495  0092                     	;# 
   496  0093                     	;# 
   497  0094                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010D                     	;# 
   506  010E                     	;# 
   507  010F                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000E                     	;# 
   526  000F                     	;# 
   527  0010                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0014                     	;# 
   532  0015                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001D                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  0081                     	;# 
   546  0085                     	;# 
   547  0086                     	;# 
   548  0087                     	;# 
   549  0088                     	;# 
   550  0089                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0091                     	;# 
   555  0092                     	;# 
   556  0093                     	;# 
   557  0094                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  000E                     	;# 
   586  000F                     	;# 
   587  0010                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001D                     	;# 
   603  001E                     	;# 
   604  001F                     	;# 
   605  0081                     	;# 
   606  0085                     	;# 
   607  0086                     	;# 
   608  0087                     	;# 
   609  0088                     	;# 
   610  0089                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0088                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0098                     	;# 
   679  0099                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  009F                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690                           
   691                           	psect	idataBANK1
   692  0005                     __pidataBANK1:	
   693                           
   694                           ;initializer for _table
   695  0005  3400               	retlw	0
   696  0006  3418               	retlw	24
   697  0007  3400               	retlw	0
   698  0008  3412               	retlw	18
   699  0009  3412               	retlw	18
   700  000A  3406               	retlw	6
   701  000B  3419               	retlw	25
   702  000C  3400               	retlw	0
   703  0009                     _PORTE	set	9
   704  0008                     _PORTD	set	8
   705  003E                     _RC6	set	62
   706  003F                     _RC7	set	63
   707  003C                     _RC4	set	60
   708  003B                     _RC3	set	59
   709  003A                     _RC2	set	58
   710  0039                     _RC1	set	57
   711  0038                     _RC0	set	56
   712  004A                     _RE2	set	74
   713  0034                     _RB4	set	52
   714  0031                     _RB1	set	49
   715  0035                     _RB5	set	53
   716  0030                     _RB0	set	48
   717  0048                     _RE0	set	72
   718  002B                     _RA3	set	43
   719  002C                     _RA4	set	44
   720  002D                     _RA5	set	45
   721  002A                     _RA2	set	42
   722  0028                     _RA0	set	40
   723  0087                     _TRISC	set	135
   724  0085                     _TRISA	set	133
   725  0089                     _TRISE	set	137
   726  0081                     _OPTION_REG	set	129
   727  0088                     _TRISD	set	136
   728  009F                     _ADCON1	set	159
   729  0086                     _TRISB	set	134
   730  0434                     _TRISB4	set	1076
   731  0448                     _TRISE0	set	1096
   732  0428                     _TRISA0	set	1064
   733                           
   734                           ; #config settings
   735  0000                     
   736                           	psect	cinit
   737  07E0                     start_initialization:	
   738  07E0                     __initialization:	
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07E0  1383               	bcf	3,7	;select IRP bank0
   742  07E1  30C3               	movlw	low (__pdataBANK1+8)
   743  07E2  00FD               	movwf	btemp+-1
   744  07E3  3000               	movlw	high __pidataBANK1
   745  07E4  00FE               	movwf	btemp
   746  07E5  3005               	movlw	low __pidataBANK1
   747  07E6  00FF               	movwf	btemp+1
   748  07E7  30BB               	movlw	low __pdataBANK1
   749  07E8  0084               	movwf	4
   750  07E9  160A  118A  2213  120A  118A  	fcall	init_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753  07EE  30A0               	movlw	low __pbssBANK1
   754  07EF  0084               	movwf	4
   755  07F0  30BB               	movlw	low (__pbssBANK1+27)
   756  07F1  120A  158A  2000  120A  118A  	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to BANK0
   759  07F6  3020               	movlw	low __pbssBANK0
   760  07F7  0084               	movwf	4
   761  07F8  3060               	movlw	low (__pbssBANK0+64)
   762  07F9  120A  158A  2000   	fcall	clear_ram0
   763  07FC                     end_of_initialization:	
   764                           ;End of C runtime variable initialization code
   765                           
   766  07FC                     __end_of__initialization:	
   767  07FC  0183               	clrf	3
   768  07FD  120A  158A  2A40   	ljmp	_main	;jump to C main() function
   769                           
   770                           	psect	bssBANK0
   771  0020                     __pbssBANK0:	
   772  0020                     _day_lower_lower:	
   773  0020                     	ds	2
   774  0022                     _day_lower_upper:	
   775  0022                     	ds	2
   776  0024                     _night_lower_lower:	
   777  0024                     	ds	2
   778  0026                     _night_lower_upper:	
   779  0026                     	ds	2
   780  0028                     _p:	
   781  0028                     	ds	2
   782  002A                     _stats:	
   783  002A                     	ds	2
   784  002C                     _day_high:	
   785  002C                     	ds	2
   786  002E                     _day_low:	
   787  002E                     	ds	2
   788  0030                     _z:	
   789  0030                     	ds	2
   790  0032                     _y:	
   791  0032                     	ds	2
   792  0034                     _x:	
   793  0034                     	ds	2
   794  0036                     _w:	
   795  0036                     	ds	2
   796  0038                     _t:	
   797  0038                     	ds	2
   798  003A                     _var_night_high:	
   799  003A                     	ds	2
   800  003C                     _var_night_low:	
   801  003C                     	ds	2
   802  003E                     _wd:	
   803  003E                     	ds	2
   804  0040                     read_byte@j:	
   805  0040                     	ds	1
   806  0041                     _prev_hex_mins:	
   807  0041                     	ds	1
   808  0042                     _prev_hex_hours:	
   809  0042                     	ds	1
   810  0043                     _prev_hex_year:	
   811  0043                     	ds	1
   812  0044                     _prev_hex_day:	
   813  0044                     	ds	1
   814  0045                     _prev_hex:	
   815  0045                     	ds	1
   816  0046                     _hrs_limiter:	
   817  0046                     	ds	1
   818  0047                     _day_hex:	
   819  0047                     	ds	1
   820  0048                     _c:	
   821  0048                     	ds	1
   822  0049                     _b:	
   823  0049                     	ds	1
   824  004A                     _a:	
   825  004A                     	ds	1
   826  004B                     _temp_high:	
   827  004B                     	ds	1
   828  004C                     _temp_low:	
   829  004C                     	ds	1
   830  004D                     _alarm__:	
   831  004D                     	ds	1
   832  004E                     _var2:	
   833  004E                     	ds	1
   834  004F                     _var1:	
   835  004F                     	ds	1
   836  0050                     _cooler_state:	
   837  0050                     	ds	1
   838  0051                     _heater_state:	
   839  0051                     	ds	1
   840  0052                     _buzzer_watcher1:	
   841  0052                     	ds	1
   842  0053                     _buzzer_watcher:	
   843  0053                     	ds	1
   844  0054                     _lower_t:	
   845  0054                     	ds	1
   846  0055                     _upper_t:	
   847  0055                     	ds	1
   848  0056                     _wanfen:	
   849  0056                     	ds	1
   850  0057                     _qianfen:	
   851  0057                     	ds	1
   852  0058                     _baifen:	
   853  0058                     	ds	1
   854  0059                     _shifen:	
   855  0059                     	ds	1
   856  005A                     _ge:	
   857  005A                     	ds	1
   858  005B                     _shi:	
   859  005B                     	ds	1
   860  005C                     _TX:	
   861  005C                     	ds	1
   862  005D                     _TZ:	
   863  005D                     	ds	1
   864  005E                     _THV:	
   865  005E                     	ds	1
   866  005F                     _TLV:	
   867  005F                     	ds	1
   868                           
   869                           	psect	bssBANK1
   870  00A0                     __pbssBANK1:	
   871  00A0                     _table1:	
   872  00A0                     	ds	7
   873  00A7                     _day_counter:	
   874  00A7                     	ds	2
   875  00A9                     _d_type:	
   876  00A9                     	ds	2
   877  00AB                     _day_of_week_var:	
   878  00AB                     	ds	2
   879  00AD                     _cold_low_night:	
   880  00AD                     	ds	2
   881  00AF                     _cold_high_night:	
   882  00AF                     	ds	2
   883  00B1                     _cold_low:	
   884  00B1                     	ds	2
   885  00B3                     _cold_high:	
   886  00B3                     	ds	2
   887  00B5                     _count:	
   888  00B5                     	ds	2
   889  00B7                     _cold_counter:	
   890  00B7                     	ds	2
   891  00B9                     _heat_counter:	
   892  00B9                     	ds	2
   893                           
   894                           	psect	dataBANK1
   895  00BB                     __pdataBANK1:	
   896  00BB                     _table:	
   897  00BB                     	ds	8
   898                           
   899                           	psect	inittext
   900  120F                     init_fetch0:	
   901                           ;	Called with low address in FSR and high address in W
   902                           
   903  120F  087E               	movf	126,w
   904  1210  008A               	movwf	10
   905  1211  087F               	movf	127,w
   906  1212  0082               	movwf	2
   907  1213                     init_ram0:	
   908                           ;Called with:
   909                           ;	high address of idata address in btemp 
   910                           ;	low address of idata address in btemp+1 
   911                           ;	low address of data in FSR
   912                           ;	high address + 1 of data in btemp-1
   913                           
   914  1213  220F  160A  118A   	fcall	init_fetch0
   915  1216  0080               	movwf	0
   916  1217  0A84               	incf	4,f
   917  1218  0804               	movf	4,w
   918  1219  067D               	xorwf	125,w
   919  121A  1903               	btfsc	3,2
   920  121B  3400               	retlw	0
   921  121C  0AFF               	incf	127,f
   922  121D  1903               	btfsc	3,2
   923  121E  0AFE               	incf	126,f
   924  121F  2A13               	goto	init_ram0
   925                           
   926                           	psect	clrtext
   927  0800                     clear_ram0:	
   928                           ;	Called with FSR containing the base address, and
   929                           ;	W with the last address+1
   930                           
   931  0800  0064               	clrwdt	;clear the watchdog before getting into this loop
   932  0801                     clrloop0:	
   933  0801  0180               	clrf	0	;clear RAM location pointed to by FSR
   934  0802  0A84               	incf	4,f	;increment pointer
   935  0803  0604               	xorwf	4,w	;XOR with final address
   936  0804  1903               	btfsc	3,2	;have we reached the end yet?
   937  0805  3400               	retlw	0	;all done for this memory range, return
   938  0806  0604               	xorwf	4,w	;XOR again to restore value
   939  0807  2801               	goto	clrloop0	;do the next byte
   940                           
   941                           	psect	cstackCOMMON
   942  0070                     __pcstackCOMMON:	
   943  0070                     ?_init_temp:	
   944  0070                     ??_init_temp:	
   945                           ; 1 bytes @ 0x0
   946                           
   947  0070                     ?_set_time:	
   948                           ; 1 bytes @ 0x0
   949                           
   950  0070                     ?_ds1302_init:	
   951                           ; 1 bytes @ 0x0
   952                           
   953  0070                     ?_init:	
   954                           ; 1 bytes @ 0x0
   955                           
   956  0070                     ??_init:	
   957                           ; 1 bytes @ 0x0
   958                           
   959  0070                     ?_lcd_init:	
   960                           ; 1 bytes @ 0x0
   961                           
   962  0070                     ?_initialise_buttons:	
   963                           ; 1 bytes @ 0x0
   964                           
   965  0070                     ??_initialise_buttons:	
   966                           ; 1 bytes @ 0x0
   967                           
   968  0070                     ?_get_temp:	
   969                           ; 1 bytes @ 0x0
   970                           
   971  0070                     ?_get_time:	
   972                           ; 1 bytes @ 0x0
   973                           
   974  0070                     ?_write_cmd:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0070                     ?_write_char:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0070                     ?_display_temp:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0070                     ?_display_date:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0070                     ?_display_clock:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0070                     ?_thermometer_threshhold_settings:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0070                     ?_date_settings:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_time_settings:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_reset_alarm:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_set_beep_threshhold:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_delay_screen:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ??_delay_screen:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_delay_temp:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_delay2:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ??_delay2:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ?_time_write_1:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ??_time_write_1:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_time_read_1:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ??_time_read_1:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?_button_delay:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ??_button_delay:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ?_time_date_hex_terminator:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_time_date_delimiter:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_main:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_reset_temp:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_write_byte:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_read_byte:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?___lbdiv:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?___lbmod:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?___awmod:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?___lwmod:	
  1065                           ; 2 bytes @ 0x0
  1066                           
  1067  0070                     delay_temp@y:	
  1068                           ; 2 bytes @ 0x0
  1069                           
  1070  0070                     time_date_delimiter@hex:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     time_date_hex_terminator@limiter:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ___lbdiv@divisor:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ___lbmod@divisor:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     delay_screen@i:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     delay2@i:	
  1086                           ; 2 bytes @ 0x0
  1087                           
  1088  0070                     button_delay@i:	
  1089                           ; 2 bytes @ 0x0
  1090                           
  1091  0070                     ___awmod@divisor:	
  1092                           ; 2 bytes @ 0x0
  1093                           
  1094  0070                     ___lwmod@divisor:	
  1095                           ; 2 bytes @ 0x0
  1096                           
  1097                           
  1098                           ; 2 bytes @ 0x0
  1099  0070                     	ds	1
  1100  0071                     ??_delay_temp:	
  1101  0071                     ??_time_date_hex_terminator:	
  1102                           ; 1 bytes @ 0x1
  1103                           
  1104  0071                     ??___lbdiv:	
  1105                           ; 1 bytes @ 0x1
  1106                           
  1107  0071                     ??___lbmod:	
  1108                           ; 1 bytes @ 0x1
  1109                           
  1110  0071                     time_date_delimiter@limiter:	
  1111                           ; 1 bytes @ 0x1
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x1
  1115  0071                     	ds	1
  1116  0072                     ??_write_cmd:	
  1117  0072                     ??_write_char:	
  1118                           ; 1 bytes @ 0x2
  1119                           
  1120  0072                     ??_set_beep_threshhold:	
  1121                           ; 1 bytes @ 0x2
  1122                           
  1123  0072                     write_char@x:	
  1124                           ; 1 bytes @ 0x2
  1125                           
  1126  0072                     write_cmd@x:	
  1127                           ; 1 bytes @ 0x2
  1128                           
  1129  0072                     delay_temp@x:	
  1130                           ; 1 bytes @ 0x2
  1131                           
  1132  0072                     set_beep_threshhold@x:	
  1133                           ; 1 bytes @ 0x2
  1134                           
  1135  0072                     ___lbdiv@dividend:	
  1136                           ; 1 bytes @ 0x2
  1137                           
  1138  0072                     time_write_1@j:	
  1139                           ; 1 bytes @ 0x2
  1140                           
  1141  0072                     time_read_1@j:	
  1142                           ; 2 bytes @ 0x2
  1143                           
  1144  0072                     time_date_delimiter@type:	
  1145                           ; 2 bytes @ 0x2
  1146                           
  1147  0072                     ___awmod@dividend:	
  1148                           ; 2 bytes @ 0x2
  1149                           
  1150  0072                     ___lwmod@dividend:	
  1151                           ; 2 bytes @ 0x2
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x2
  1155  0072                     	ds	1
  1156  0073                     ??_lcd_init:	
  1157  0073                     ??_display_temp:	
  1158                           ; 1 bytes @ 0x3
  1159                           
  1160  0073                     ??_display_date:	
  1161                           ; 1 bytes @ 0x3
  1162                           
  1163  0073                     ??_display_clock:	
  1164                           ; 1 bytes @ 0x3
  1165                           
  1166  0073                     ?_set_lower_threshold:	
  1167                           ; 1 bytes @ 0x3
  1168                           
  1169  0073                     ?_set_upper_threshold:	
  1170                           ; 1 bytes @ 0x3
  1171                           
  1172  0073                     ?_cold_threshold:	
  1173                           ; 1 bytes @ 0x3
  1174                           
  1175  0073                     ??_reset_alarm:	
  1176                           ; 1 bytes @ 0x3
  1177                           
  1178  0073                     ?_display_day:	
  1179                           ; 1 bytes @ 0x3
  1180                           
  1181  0073                     delay_temp@z:	
  1182                           ; 1 bytes @ 0x3
  1183                           
  1184  0073                     time_date_hex_terminator@val:	
  1185                           ; 1 bytes @ 0x3
  1186                           
  1187  0073                     ___lbdiv@counter:	
  1188                           ; 1 bytes @ 0x3
  1189                           
  1190  0073                     set_upper_threshold@upper_val:	
  1191                           ; 1 bytes @ 0x3
  1192                           
  1193  0073                     cold_threshold@upper_val:	
  1194                           ; 2 bytes @ 0x3
  1195                           
  1196  0073                     set_lower_threshold@upper_val:	
  1197                           ; 2 bytes @ 0x3
  1198                           
  1199  0073                     display_day@num:	
  1200                           ; 2 bytes @ 0x3
  1201                           
  1202                           
  1203                           ; 2 bytes @ 0x3
  1204  0073                     	ds	1
  1205  0074                     ??_time_date_delimiter:	
  1206  0074                     ??_reset_temp:	
  1207                           ; 1 bytes @ 0x4
  1208                           
  1209  0074                     ??_write_byte:	
  1210                           ; 1 bytes @ 0x4
  1211                           
  1212  0074                     ??_read_byte:	
  1213                           ; 1 bytes @ 0x4
  1214                           
  1215  0074                     ??___awmod:	
  1216                           ; 1 bytes @ 0x4
  1217                           
  1218  0074                     ??___lwmod:	
  1219                           ; 1 bytes @ 0x4
  1220                           
  1221  0074                     time_write_1@time_tx:	
  1222                           ; 1 bytes @ 0x4
  1223                           
  1224  0074                     time_read_1@time_rx:	
  1225                           ; 1 bytes @ 0x4
  1226                           
  1227  0074                     ___lbdiv@quotient:	
  1228                           ; 1 bytes @ 0x4
  1229                           
  1230  0074                     ___lbmod@dividend:	
  1231                           ; 1 bytes @ 0x4
  1232                           
  1233                           
  1234                           ; 1 bytes @ 0x4
  1235  0074                     	ds	1
  1236  0075                     ??_set_time:	
  1237  0075                     ??_ds1302_init:	
  1238                           ; 1 bytes @ 0x5
  1239                           
  1240  0075                     ??_get_time:	
  1241                           ; 1 bytes @ 0x5
  1242                           
  1243  0075                     ??_display_day:	
  1244                           ; 1 bytes @ 0x5
  1245                           
  1246  0075                     reset_temp@presence:	
  1247                           ; 1 bytes @ 0x5
  1248                           
  1249  0075                     read_byte@value:	
  1250                           ; 1 bytes @ 0x5
  1251                           
  1252  0075                     ___awmod@counter:	
  1253                           ; 1 bytes @ 0x5
  1254                           
  1255  0075                     ___lbmod@counter:	
  1256                           ; 1 bytes @ 0x5
  1257                           
  1258  0075                     ___lwmod@counter:	
  1259                           ; 1 bytes @ 0x5
  1260                           
  1261  0075                     set_time@i:	
  1262                           ; 1 bytes @ 0x5
  1263                           
  1264  0075                     display_clock@i:	
  1265                           ; 2 bytes @ 0x5
  1266                           
  1267  0075                     display_date@i:	
  1268                           ; 2 bytes @ 0x5
  1269                           
  1270  0075                     set_upper_threshold@lower_val:	
  1271                           ; 2 bytes @ 0x5
  1272                           
  1273  0075                     cold_threshold@lower_val:	
  1274                           ; 2 bytes @ 0x5
  1275                           
  1276  0075                     set_lower_threshold@lower_val:	
  1277                           ; 2 bytes @ 0x5
  1278                           
  1279                           
  1280                           ; 2 bytes @ 0x5
  1281  0075                     	ds	1
  1282  0076                     ?___lwdiv:	
  1283  0076                     write_byte@temp:	
  1284                           ; 2 bytes @ 0x6
  1285                           
  1286  0076                     read_byte@i:	
  1287                           ; 1 bytes @ 0x6
  1288                           
  1289  0076                     time_date_delimiter@val:	
  1290                           ; 1 bytes @ 0x6
  1291                           
  1292  0076                     ___awmod@sign:	
  1293                           ; 1 bytes @ 0x6
  1294                           
  1295  0076                     ___lbmod@rem:	
  1296                           ; 1 bytes @ 0x6
  1297                           
  1298  0076                     get_time@i:	
  1299                           ; 1 bytes @ 0x6
  1300                           
  1301  0076                     ___lwdiv@divisor:	
  1302                           ; 2 bytes @ 0x6
  1303                           
  1304                           
  1305                           ; 2 bytes @ 0x6
  1306  0076                     	ds	1
  1307  0077                     ??_set_lower_threshold:	
  1308  0077                     ??_set_upper_threshold:	
  1309                           ; 1 bytes @ 0x7
  1310                           
  1311  0077                     ??_cold_threshold:	
  1312                           ; 1 bytes @ 0x7
  1313                           
  1314  0077                     ?_modulus_func:	
  1315                           ; 1 bytes @ 0x7
  1316                           
  1317  0077                     write_byte@val:	
  1318                           ; 2 bytes @ 0x7
  1319                           
  1320  0077                     modulus_func@x:	
  1321                           ; 1 bytes @ 0x7
  1322                           
  1323                           
  1324                           ; 2 bytes @ 0x7
  1325  0077                     	ds	1
  1326  0078                     write_byte@i:	
  1327  0078                     ___lwdiv@dividend:	
  1328                           ; 1 bytes @ 0x8
  1329                           
  1330                           
  1331                           ; 2 bytes @ 0x8
  1332  0078                     	ds	1
  1333  0079                     modulus_func@y:	
  1334                           
  1335                           ; 2 bytes @ 0x9
  1336  0079                     	ds	1
  1337  007A                     ??___lwdiv:	
  1338                           
  1339                           ; 1 bytes @ 0xA
  1340  007A                     	ds	1
  1341  007B                     ??_modulus_func:	
  1342  007B                     ??_incrementor:	
  1343                           ; 1 bytes @ 0xB
  1344                           
  1345  007B                     ___lwdiv@quotient:	
  1346                           ; 1 bytes @ 0xB
  1347                           
  1348                           
  1349                           ; 2 bytes @ 0xB
  1350  007B                     	ds	2
  1351  007D                     ___lwdiv@counter:	
  1352                           
  1353                           ; 1 bytes @ 0xD
  1354  007D                     	ds	1
  1355                           
  1356                           	psect	cstackBANK0
  1357  0060                     __pcstackBANK0:	
  1358  0060                     ??_get_temp:	
  1359  0060                     ?_incrementor:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0060                     incrementor@upper_val:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365                           
  1366                           ; 2 bytes @ 0x0
  1367  0060                     	ds	2
  1368  0062                     incrementor@lower_val:	
  1369                           
  1370                           ; 2 bytes @ 0x2
  1371  0062                     	ds	2
  1372  0064                     incrementor@z:	
  1373                           
  1374                           ; 1 bytes @ 0x4
  1375  0064                     	ds	1
  1376  0065                     ??_thermometer_threshhold_settings:	
  1377  0065                     ??_date_settings:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380  0065                     ??_time_settings:	
  1381                           ; 1 bytes @ 0x5
  1382                           
  1383                           
  1384                           ; 1 bytes @ 0x5
  1385  0065                     	ds	3
  1386  0068                     ??_main:	
  1387                           
  1388                           ; 1 bytes @ 0x8
  1389  0068                     	ds	5
  1390  006D                     main@i:	
  1391                           
  1392                           ; 2 bytes @ 0xD
  1393  006D                     	ds	2
  1394                           
  1395                           	psect	maintext
  1396  0A40                     __pmaintext:	
  1397 ;;
  1398 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1399 ;;
  1400 ;; *************** function _main *****************
  1401 ;; Defined at:
  1402 ;;		line 10 in file "mainLogic.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  i               2   13[BANK0 ] int 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : B00/0
  1413 ;;		On exit  : 200/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1416 ;;      Params:         0       0       0       0       0
  1417 ;;      Locals:         0       2       0       0       0
  1418 ;;      Temps:          0       5       0       0       0
  1419 ;;      Totals:         0       7       0       0       0
  1420 ;;Total ram usage:        7 bytes
  1421 ;; Hardware stack levels required when called:    4
  1422 ;; This function calls:
  1423 ;;		_cold_threshold
  1424 ;;		_date_settings
  1425 ;;		_display_clock
  1426 ;;		_display_date
  1427 ;;		_display_day
  1428 ;;		_display_temp
  1429 ;;		_ds1302_init
  1430 ;;		_get_temp
  1431 ;;		_get_time
  1432 ;;		_init
  1433 ;;		_init_temp
  1434 ;;		_initialise_buttons
  1435 ;;		_lcd_init
  1436 ;;		_modulus_func
  1437 ;;		_reset_alarm
  1438 ;;		_set_beep_threshhold
  1439 ;;		_set_lower_threshold
  1440 ;;		_set_time
  1441 ;;		_set_upper_threshold
  1442 ;;		_thermometer_threshhold_settings
  1443 ;;		_time_settings
  1444 ;;		_write_char
  1445 ;;		_write_cmd
  1446 ;; This function is called by:
  1447 ;;		Startup code after reset
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _main
  1453  0A40                     _main:	
  1454                           
  1455                           ;mainLogic.c: 11:     TRISB=0X02;
  1456                           
  1457                           ;incstack = 0
  1458                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1459  0A40  3002               	movlw	2
  1460  0A41  1683               	bsf	3,5	;RP0=1, select bank1
  1461  0A42  0086               	movwf	6	;volatile
  1462                           
  1463                           ;mainLogic.c: 12:     init_temp();
  1464  0A43  160A  118A  21C6  120A  158A  	fcall	_init_temp
  1465                           
  1466                           ;mainLogic.c: 13:     set_time();
  1467  0A48  160A  118A  238D  120A  158A  	fcall	_set_time
  1468                           
  1469                           ;mainLogic.c: 14:     ds1302_init();
  1470  0A4D  160A  118A  21F0  120A  158A  	fcall	_ds1302_init
  1471                           
  1472                           ;mainLogic.c: 16:     init();
  1473  0A52  160A  118A  21CB  120A  158A  	fcall	_init
  1474                           
  1475                           ;mainLogic.c: 17:     lcd_init();
  1476  0A57  160A  118A  2320  120A  158A  	fcall	_lcd_init
  1477                           
  1478                           ;mainLogic.c: 18:     init_temp();
  1479  0A5C  160A  118A  21C6  120A  158A  	fcall	_init_temp
  1480                           
  1481                           ;mainLogic.c: 19:     initialise_buttons();
  1482  0A61  160A  118A  225C  120A  158A  	fcall	_initialise_buttons
  1483                           
  1484                           ;mainLogic.c: 20:     var1 = 3;
  1485  0A66  3003               	movlw	3
  1486  0A67  00E8               	movwf	??_main
  1487  0A68  0868               	movf	??_main,w
  1488  0A69  00CF               	movwf	_var1
  1489                           
  1490                           ;mainLogic.c: 21:     var2 = 4;
  1491  0A6A  3004               	movlw	4
  1492  0A6B  00E8               	movwf	??_main
  1493  0A6C  0868               	movf	??_main,w
  1494  0A6D  00CE               	movwf	_var2
  1495                           
  1496                           ;mainLogic.c: 22:     var_night_low = 4;
  1497  0A6E  3004               	movlw	4
  1498  0A6F  00BC               	movwf	_var_night_low
  1499  0A70  3000               	movlw	0
  1500  0A71  00BD               	movwf	_var_night_low+1
  1501                           
  1502                           ;mainLogic.c: 23:     var_night_high = 2;
  1503  0A72  3002               	movlw	2
  1504  0A73  00BA               	movwf	_var_night_high
  1505  0A74  3000               	movlw	0
  1506  0A75  00BB               	movwf	_var_night_high+1
  1507                           
  1508                           ;mainLogic.c: 24:     cold_high = 1;
  1509  0A76  3001               	movlw	1
  1510  0A77  1683               	bsf	3,5	;RP0=1, select bank1
  1511  0A78  00B3               	movwf	_cold_high^(0+128)
  1512  0A79  3000               	movlw	0
  1513  0A7A  00B4               	movwf	(_cold_high^(0+128)+1)
  1514                           
  1515                           ;mainLogic.c: 25:     cold_low = 9;
  1516  0A7B  3009               	movlw	9
  1517  0A7C  00B1               	movwf	_cold_low^(0+128)
  1518  0A7D  3000               	movlw	0
  1519  0A7E  00B2               	movwf	(_cold_low^(0+128)+1)
  1520  0A7F                     l5130:	
  1521                           
  1522                           ;mainLogic.c: 28:     get_temp();
  1523  0A7F  160A  118A  26F9  120A  158A  	fcall	_get_temp
  1524                           
  1525                           ;mainLogic.c: 29:     get_time();
  1526  0A84  160A  118A  23B5  120A  158A  	fcall	_get_time
  1527                           
  1528                           ;mainLogic.c: 30:     write_cmd(0x80);
  1529  0A89  3080               	movlw	128
  1530  0A8A  160A  118A  2287  120A  158A  	fcall	_write_cmd
  1531                           
  1532                           ;mainLogic.c: 31:     write_char('T');
  1533  0A8F  3054               	movlw	84
  1534  0A90  160A  118A  2270  120A  158A  	fcall	_write_char
  1535                           
  1536                           ;mainLogic.c: 32:     write_char('e');
  1537  0A95  3065               	movlw	101
  1538  0A96  160A  118A  2270  120A  158A  	fcall	_write_char
  1539                           
  1540                           ;mainLogic.c: 33:     write_char('m');
  1541  0A9B  306D               	movlw	109
  1542  0A9C  160A  118A  2270  120A  158A  	fcall	_write_char
  1543                           
  1544                           ;mainLogic.c: 34:     write_char('p');
  1545  0AA1  3070               	movlw	112
  1546  0AA2  160A  118A  2270  120A  158A  	fcall	_write_char
  1547                           
  1548                           ;mainLogic.c: 35:     write_char(':');
  1549  0AA7  303A               	movlw	58
  1550  0AA8  160A  118A  2270  120A  158A  	fcall	_write_char
  1551                           
  1552                           ;mainLogic.c: 36:     display_temp();
  1553  0AAD  160A  118A  22BB  120A  158A  	fcall	_display_temp
  1554                           
  1555                           ;mainLogic.c: 38:     write_cmd(0x90);
  1556  0AB2  3090               	movlw	144
  1557  0AB3  160A  118A  2287  120A  158A  	fcall	_write_cmd
  1558                           
  1559                           ;mainLogic.c: 39:     write_char('D');
  1560  0AB8  3044               	movlw	68
  1561  0AB9  160A  118A  2270  120A  158A  	fcall	_write_char
  1562                           
  1563                           ;mainLogic.c: 40:     write_char('a');
  1564  0ABE  3061               	movlw	97
  1565  0ABF  160A  118A  2270  120A  158A  	fcall	_write_char
  1566                           
  1567                           ;mainLogic.c: 41:     write_char('t');
  1568  0AC4  3074               	movlw	116
  1569  0AC5  160A  118A  2270  120A  158A  	fcall	_write_char
  1570                           
  1571                           ;mainLogic.c: 42:     write_char('e');
  1572  0ACA  3065               	movlw	101
  1573  0ACB  160A  118A  2270  120A  158A  	fcall	_write_char
  1574                           
  1575                           ;mainLogic.c: 43:     write_char(':');
  1576  0AD0  303A               	movlw	58
  1577  0AD1  160A  118A  2270  120A  158A  	fcall	_write_char
  1578                           
  1579                           ;mainLogic.c: 44:     write_char(' ');
  1580  0AD6  3020               	movlw	32
  1581  0AD7  160A  118A  2270  120A  158A  	fcall	_write_char
  1582                           
  1583                           ;mainLogic.c: 46:     display_date();
  1584  0ADC  160A  118A  265C  120A  158A  	fcall	_display_date
  1585                           
  1586                           ;mainLogic.c: 48:     write_cmd(0x88);
  1587  0AE1  3088               	movlw	136
  1588  0AE2  160A  118A  2287  120A  158A  	fcall	_write_cmd
  1589                           
  1590                           ;mainLogic.c: 49:     write_char('T');
  1591  0AE7  3054               	movlw	84
  1592  0AE8  160A  118A  2270  120A  158A  	fcall	_write_char
  1593                           
  1594                           ;mainLogic.c: 50:     write_char('i');
  1595  0AED  3069               	movlw	105
  1596  0AEE  160A  118A  2270  120A  158A  	fcall	_write_char
  1597                           
  1598                           ;mainLogic.c: 51:     write_char('m');
  1599  0AF3  306D               	movlw	109
  1600  0AF4  160A  118A  2270  120A  158A  	fcall	_write_char
  1601                           
  1602                           ;mainLogic.c: 52:     write_char('e');
  1603  0AF9  3065               	movlw	101
  1604  0AFA  160A  118A  2270  120A  158A  	fcall	_write_char
  1605                           
  1606                           ;mainLogic.c: 53:     write_char(':');
  1607  0AFF  303A               	movlw	58
  1608  0B00  160A  118A  2270  120A  158A  	fcall	_write_char
  1609                           
  1610                           ;mainLogic.c: 54:     display_clock();
  1611  0B05  120A  158A  2044  120A  158A  	fcall	_display_clock
  1612                           
  1613                           ;mainLogic.c: 55:     thermometer_threshhold_settings();
  1614  0B0A  120A  158A  242E  120A  158A  	fcall	_thermometer_threshhold_settings
  1615                           
  1616                           ;mainLogic.c: 56:     date_settings();
  1617  0B0F  120A  118A  2385  120A  158A  	fcall	_date_settings
  1618                           
  1619                           ;mainLogic.c: 57:     time_settings();
  1620  0B14  120A  118A  2086  120A  158A  	fcall	_time_settings
  1621                           
  1622                           ;mainLogic.c: 58:     write_cmd(0x98);
  1623  0B19  3098               	movlw	152
  1624  0B1A  160A  118A  2287  120A  158A  	fcall	_write_cmd
  1625                           
  1626                           ;mainLogic.c: 60:      if((temp_high+'0')<= 1 && (temp_low + '0') < 8){
  1627  0B1F  084B               	movf	_temp_high,w
  1628  0B20  3E30               	addlw	48
  1629  0B21  00E8               	movwf	??_main
  1630  0B22  3000               	movlw	0
  1631  0B23  1803               	skipnc
  1632  0B24  3001               	movlw	1
  1633  0B25  00E9               	movwf	??_main+1
  1634  0B26  3000               	movlw	0
  1635  0B27  0269               	subwf	??_main+1,w
  1636  0B28  3002               	movlw	2
  1637  0B29  1903               	skipnz
  1638  0B2A  0268               	subwf	??_main,w
  1639  0B2B  1803               	skipnc
  1640  0B2C  2B78               	goto	l5192
  1641  0B2D  084C               	movf	_temp_low,w
  1642  0B2E  3E30               	addlw	48
  1643  0B2F  00E8               	movwf	??_main
  1644  0B30  3000               	movlw	0
  1645  0B31  1803               	skipnc
  1646  0B32  3001               	movlw	1
  1647  0B33  00E9               	movwf	??_main+1
  1648  0B34  3000               	movlw	0
  1649  0B35  0269               	subwf	??_main+1,w
  1650  0B36  3008               	movlw	8
  1651  0B37  1903               	skipnz
  1652  0B38  0268               	subwf	??_main,w
  1653  0B39  1803               	skipnc
  1654  0B3A  2B78               	goto	l5192
  1655                           
  1656                           ;mainLogic.c: 61:     alarm__ = set_lower_threshold(var1,var2);
  1657  0B3B  084F               	movf	_var1,w
  1658  0B3C  00E8               	movwf	??_main
  1659  0B3D  01E9               	clrf	??_main+1
  1660  0B3E  0868               	movf	??_main,w
  1661  0B3F  00F3               	movwf	set_lower_threshold@upper_val
  1662  0B40  0869               	movf	??_main+1,w
  1663  0B41  00F4               	movwf	set_lower_threshold@upper_val+1
  1664  0B42  084E               	movf	_var2,w
  1665  0B43  00EA               	movwf	??_main+2
  1666  0B44  01EB               	clrf	??_main+3
  1667  0B45  086A               	movf	??_main+2,w
  1668  0B46  00F5               	movwf	set_lower_threshold@lower_val
  1669  0B47  086B               	movf	??_main+3,w
  1670  0B48  00F6               	movwf	set_lower_threshold@lower_val+1
  1671  0B49  160A  118A  2510  120A  158A  	fcall	_set_lower_threshold
  1672  0B4E  00EC               	movwf	??_main+4
  1673  0B4F  086C               	movf	??_main+4,w
  1674  0B50  00CD               	movwf	_alarm__
  1675                           
  1676                           ;mainLogic.c: 62:     alarm__ = set_upper_threshold(var1,var2);
  1677  0B51  084F               	movf	_var1,w
  1678  0B52  00E8               	movwf	??_main
  1679  0B53  01E9               	clrf	??_main+1
  1680  0B54  0868               	movf	??_main,w
  1681  0B55  00F3               	movwf	set_upper_threshold@upper_val
  1682  0B56  0869               	movf	??_main+1,w
  1683  0B57  00F4               	movwf	set_upper_threshold@upper_val+1
  1684  0B58  084E               	movf	_var2,w
  1685  0B59  00EA               	movwf	??_main+2
  1686  0B5A  01EB               	clrf	??_main+3
  1687  0B5B  086A               	movf	??_main+2,w
  1688  0B5C  00F5               	movwf	set_upper_threshold@lower_val
  1689  0B5D  086B               	movf	??_main+3,w
  1690  0B5E  00F6               	movwf	set_upper_threshold@lower_val+1
  1691  0B5F  160A  118A  25A5  120A  158A  	fcall	_set_upper_threshold
  1692  0B64  00EC               	movwf	??_main+4
  1693  0B65  086C               	movf	??_main+4,w
  1694  0B66  00CD               	movwf	_alarm__
  1695                           
  1696                           ;mainLogic.c: 63:     alarm__ = cold_threshold(cold_high,cold_low);
  1697  0B67  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0B68  0834               	movf	(_cold_high+1)^(0+128),w
  1699  0B69  00F4               	movwf	cold_threshold@upper_val+1
  1700  0B6A  0833               	movf	_cold_high^(0+128),w
  1701  0B6B  00F3               	movwf	cold_threshold@upper_val
  1702  0B6C  0832               	movf	(_cold_low+1)^(0+128),w
  1703  0B6D  00F6               	movwf	cold_threshold@lower_val+1
  1704  0B6E  0831               	movf	_cold_low^(0+128),w
  1705  0B6F  00F5               	movwf	cold_threshold@lower_val
  1706  0B70  160A  118A  25FE  120A  158A  	fcall	_cold_threshold
  1707  0B75  00E8               	movwf	??_main
  1708  0B76  0868               	movf	??_main,w
  1709  0B77  00CD               	movwf	_alarm__
  1710  0B78                     l5192:	
  1711                           
  1712                           ;mainLogic.c: 66:     if((temp_high+'0') >= 1 && (temp_low + '0') >= 8){
  1713  0B78  084B               	movf	_temp_high,w
  1714  0B79  3E30               	addlw	48
  1715  0B7A  00E8               	movwf	??_main
  1716  0B7B  3000               	movlw	0
  1717  0B7C  1803               	skipnc
  1718  0B7D  3001               	movlw	1
  1719  0B7E  00E9               	movwf	??_main+1
  1720  0B7F  0868               	movf	??_main,w
  1721  0B80  0469               	iorwf	??_main+1,w
  1722  0B81  1903               	btfsc	3,2
  1723  0B82  2BBF               	goto	l173
  1724  0B83  084C               	movf	_temp_low,w
  1725  0B84  3E30               	addlw	48
  1726  0B85  00E8               	movwf	??_main
  1727  0B86  3000               	movlw	0
  1728  0B87  1803               	skipnc
  1729  0B88  3001               	movlw	1
  1730  0B89  00E9               	movwf	??_main+1
  1731  0B8A  3000               	movlw	0
  1732  0B8B  0269               	subwf	??_main+1,w
  1733  0B8C  3008               	movlw	8
  1734  0B8D  1903               	skipnz
  1735  0B8E  0268               	subwf	??_main,w
  1736  0B8F  1C03               	skipc
  1737  0B90  2BBF               	goto	l173
  1738                           
  1739                           ;mainLogic.c: 67:     alarm__ = set_lower_threshold(var_night_high,var_night_low);
  1740  0B91  083B               	movf	_var_night_high+1,w
  1741  0B92  00F4               	movwf	set_lower_threshold@upper_val+1
  1742  0B93  083A               	movf	_var_night_high,w
  1743  0B94  00F3               	movwf	set_lower_threshold@upper_val
  1744  0B95  083D               	movf	_var_night_low+1,w
  1745  0B96  00F6               	movwf	set_lower_threshold@lower_val+1
  1746  0B97  083C               	movf	_var_night_low,w
  1747  0B98  00F5               	movwf	set_lower_threshold@lower_val
  1748  0B99  160A  118A  2510  120A  158A  	fcall	_set_lower_threshold
  1749  0B9E  00E8               	movwf	??_main
  1750  0B9F  0868               	movf	??_main,w
  1751  0BA0  00CD               	movwf	_alarm__
  1752                           
  1753                           ;mainLogic.c: 68:     alarm__ = set_upper_threshold(var_night_high,var_night_low);
  1754  0BA1  083B               	movf	_var_night_high+1,w
  1755  0BA2  00F4               	movwf	set_upper_threshold@upper_val+1
  1756  0BA3  083A               	movf	_var_night_high,w
  1757  0BA4  00F3               	movwf	set_upper_threshold@upper_val
  1758  0BA5  083D               	movf	_var_night_low+1,w
  1759  0BA6  00F6               	movwf	set_upper_threshold@lower_val+1
  1760  0BA7  083C               	movf	_var_night_low,w
  1761  0BA8  00F5               	movwf	set_upper_threshold@lower_val
  1762  0BA9  160A  118A  25A5  120A  158A  	fcall	_set_upper_threshold
  1763  0BAE  00E8               	movwf	??_main
  1764  0BAF  0868               	movf	??_main,w
  1765  0BB0  00CD               	movwf	_alarm__
  1766                           
  1767                           ;mainLogic.c: 69:     alarm__ = cold_threshold(cold_high_night,cold_low_night);
  1768  0BB1  3000               	movlw	0
  1769  0BB2  00F3               	movwf	cold_threshold@upper_val
  1770  0BB3  00F4               	movwf	cold_threshold@upper_val+1
  1771  0BB4  3000               	movlw	0
  1772  0BB5  00F5               	movwf	cold_threshold@lower_val
  1773  0BB6  00F6               	movwf	cold_threshold@lower_val+1
  1774  0BB7  160A  118A  25FE  120A  158A  	fcall	_cold_threshold
  1775  0BBC  00E8               	movwf	??_main
  1776  0BBD  0868               	movf	??_main,w
  1777  0BBE  00CD               	movwf	_alarm__
  1778  0BBF                     l173:	
  1779                           ;mainLogic.c: 70:     }
  1780                           
  1781                           
  1782                           ;mainLogic.c: 71:     alarm__ = reset_alarm();
  1783  0BBF  160A  118A  23E1  120A  158A  	fcall	_reset_alarm
  1784  0BC4  00E8               	movwf	??_main
  1785  0BC5  0868               	movf	??_main,w
  1786  0BC6  00CD               	movwf	_alarm__
  1787                           
  1788                           ;mainLogic.c: 72:     set_beep_threshhold(alarm__);
  1789  0BC7  084D               	movf	_alarm__,w
  1790  0BC8  160A  118A  229E  120A  158A  	fcall	_set_beep_threshhold
  1791                           
  1792                           ;mainLogic.c: 73:     write_char(' ');
  1793  0BCD  3020               	movlw	32
  1794  0BCE  160A  118A  2270  120A  158A  	fcall	_write_char
  1795                           
  1796                           ;mainLogic.c: 74:     write_char('H');
  1797  0BD3  3048               	movlw	72
  1798  0BD4  160A  118A  2270  120A  158A  	fcall	_write_char
  1799                           
  1800                           ;mainLogic.c: 75:     write_char(':');
  1801  0BD9  303A               	movlw	58
  1802  0BDA  160A  118A  2270  120A  158A  	fcall	_write_char
  1803                           
  1804                           ;mainLogic.c: 76:     write_char(heater_state);
  1805  0BDF  0851               	movf	_heater_state,w
  1806  0BE0  160A  118A  2270  120A  158A  	fcall	_write_char
  1807                           
  1808                           ;mainLogic.c: 77:     write_char('C');
  1809  0BE5  3043               	movlw	67
  1810  0BE6  160A  118A  2270  120A  158A  	fcall	_write_char
  1811                           
  1812                           ;mainLogic.c: 78:     write_char(':');
  1813  0BEB  303A               	movlw	58
  1814  0BEC  160A  118A  2270  120A  158A  	fcall	_write_char
  1815                           
  1816                           ;mainLogic.c: 79:     write_char(cooler_state);
  1817  0BF1  0850               	movf	_cooler_state,w
  1818  0BF2  160A  118A  2270  120A  158A  	fcall	_write_char
  1819                           
  1820                           ;mainLogic.c: 80:     for(int i = 0; i < 3; i++)
  1821  0BF7  01ED               	clrf	main@i
  1822  0BF8  01EE               	clrf	main@i+1
  1823  0BF9                     l5204:	
  1824                           
  1825                           ;mainLogic.c: 81:     write_char(' ');
  1826  0BF9  3020               	movlw	32
  1827  0BFA  160A  118A  2270  120A  158A  	fcall	_write_char
  1828  0BFF  3001               	movlw	1
  1829  0C00  07ED               	addwf	main@i,f
  1830  0C01  1803               	skipnc
  1831  0C02  0AEE               	incf	main@i+1,f
  1832  0C03  3000               	movlw	0
  1833  0C04  07EE               	addwf	main@i+1,f
  1834  0C05  086E               	movf	main@i+1,w
  1835  0C06  3A80               	xorlw	128
  1836  0C07  00FF               	movwf	127
  1837  0C08  3080               	movlw	128
  1838  0C09  027F               	subwf	127,w
  1839  0C0A  1D03               	skipz
  1840  0C0B  2C0E               	goto	u4405
  1841  0C0C  3003               	movlw	3
  1842  0C0D  026D               	subwf	main@i,w
  1843  0C0E                     u4405:	
  1844  0C0E  1C03               	skipc
  1845  0C0F  2BF9               	goto	l5204
  1846                           
  1847                           ;mainLogic.c: 82:     day_counter = modulus_func(day_low,8);
  1848  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0C12  082F               	movf	_day_low+1,w
  1851  0C13  00F8               	movwf	modulus_func@x+1
  1852  0C14  082E               	movf	_day_low,w
  1853  0C15  00F7               	movwf	modulus_func@x
  1854  0C16  3008               	movlw	8
  1855  0C17  00F9               	movwf	modulus_func@y
  1856  0C18  3000               	movlw	0
  1857  0C19  00FA               	movwf	modulus_func@y+1
  1858  0C1A  160A  118A  21FF  120A  158A  	fcall	_modulus_func
  1859  0C1F  0878               	movf	?_modulus_func+1,w
  1860  0C20  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0C21  00A8               	movwf	(_day_counter+1)^(0+128)
  1862  0C22  0877               	movf	?_modulus_func,w
  1863  0C23  00A7               	movwf	_day_counter^(0+128)
  1864                           
  1865                           ;mainLogic.c: 83:     display_day(day_counter);
  1866  0C24  0828               	movf	(_day_counter+1)^(0+128),w
  1867  0C25  00F4               	movwf	display_day@num+1
  1868  0C26  0827               	movf	_day_counter^(0+128),w
  1869  0C27  00F3               	movwf	display_day@num
  1870  0C28  120A  118A  200D  120A  158A  	fcall	_display_day
  1871  0C2D  2A7F               	goto	l5130
  1872  0C2E                     __end_of_main:	
  1873                           
  1874                           	psect	text1
  1875  0086                     __ptext1:	
  1876 ;; *************** function _time_settings *****************
  1877 ;; Defined at:
  1878 ;;		line 316 in file "Button_src.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 300/0
  1889 ;;		On exit  : 300/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0
  1894 ;;      Temps:          0       3       0       0       0
  1895 ;;      Totals:         0       3       0       0       0
  1896 ;;Total ram usage:        3 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    3
  1899 ;; This function calls:
  1900 ;;		_button_delay
  1901 ;;		_incrementor
  1902 ;;		_modulus_func
  1903 ;;		_set_time
  1904 ;;		_time_date_delimiter
  1905 ;;		_time_date_hex_terminator
  1906 ;;		_write_char
  1907 ;;		_write_cmd
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           
  1914                           ;psect for function _time_settings
  1915  0086                     _time_settings:	
  1916                           
  1917                           ;Button_src.c: 317:  RC0 = 1;
  1918                           
  1919                           ;incstack = 0
  1920                           ; Regs used in _time_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1921  0086  1407               	bsf	7,0	;volatile
  1922                           
  1923                           ;Button_src.c: 318:  RC1 = 1;
  1924  0087  1487               	bsf	7,1	;volatile
  1925                           
  1926                           ;Button_src.c: 319:  RC2 = 0;
  1927  0088  1107               	bcf	7,2	;volatile
  1928                           
  1929                           ;Button_src.c: 320:  RC3 = 1;
  1930  0089  1587               	bsf	7,3	;volatile
  1931                           
  1932                           ;Button_src.c: 321:   if (RC4 == 0){
  1933  008A  1A07               	btfsc	7,4	;volatile
  1934  008B  0008               	return
  1935                           
  1936                           ;Button_src.c: 322:       write_cmd(0x1);
  1937  008C  3001               	movlw	1
  1938  008D  160A  118A  2287  120A  118A  	fcall	_write_cmd
  1939  0092                     l785:	
  1940                           ;Button_src.c: 323:       for(;;){
  1941                           
  1942                           
  1943                           ;Button_src.c: 324:             write_cmd(0x80);
  1944  0092  3080               	movlw	128
  1945  0093  160A  118A  2287  120A  118A  	fcall	_write_cmd
  1946                           
  1947                           ;Button_src.c: 325:             write_char('T');
  1948  0098  3054               	movlw	84
  1949  0099  160A  118A  2270  120A  118A  	fcall	_write_char
  1950                           
  1951                           ;Button_src.c: 326:             write_char('i');
  1952  009E  3069               	movlw	105
  1953  009F  160A  118A  2270  120A  118A  	fcall	_write_char
  1954                           
  1955                           ;Button_src.c: 327:             write_char('m');
  1956  00A4  306D               	movlw	109
  1957  00A5  160A  118A  2270  120A  118A  	fcall	_write_char
  1958                           
  1959                           ;Button_src.c: 328:             write_char('e');
  1960  00AA  3065               	movlw	101
  1961  00AB  160A  118A  2270  120A  118A  	fcall	_write_char
  1962                           
  1963                           ;Button_src.c: 329:             write_char('_');
  1964  00B0  305F               	movlw	95
  1965  00B1  160A  118A  2270  120A  118A  	fcall	_write_char
  1966                           
  1967                           ;Button_src.c: 330:             write_char('S');
  1968  00B6  3053               	movlw	83
  1969  00B7  160A  118A  2270  120A  118A  	fcall	_write_char
  1970                           
  1971                           ;Button_src.c: 331:             write_char('e');
  1972  00BC  3065               	movlw	101
  1973  00BD  160A  118A  2270  120A  118A  	fcall	_write_char
  1974                           
  1975                           ;Button_src.c: 332:             write_char('t');
  1976  00C2  3074               	movlw	116
  1977  00C3  160A  118A  2270  120A  118A  	fcall	_write_char
  1978                           
  1979                           ;Button_src.c: 333:             write_char('t');
  1980  00C8  3074               	movlw	116
  1981  00C9  160A  118A  2270  120A  118A  	fcall	_write_char
  1982                           
  1983                           ;Button_src.c: 334:             write_char('i');
  1984  00CE  3069               	movlw	105
  1985  00CF  160A  118A  2270  120A  118A  	fcall	_write_char
  1986                           
  1987                           ;Button_src.c: 335:             write_char('n');
  1988  00D4  306E               	movlw	110
  1989  00D5  160A  118A  2270  120A  118A  	fcall	_write_char
  1990                           
  1991                           ;Button_src.c: 336:             write_char('g');
  1992  00DA  3067               	movlw	103
  1993  00DB  160A  118A  2270  120A  118A  	fcall	_write_char
  1994                           
  1995                           ;Button_src.c: 337:             write_char('s');
  1996  00E0  3073               	movlw	115
  1997  00E1  160A  118A  2270  120A  118A  	fcall	_write_char
  1998                           
  1999                           ;Button_src.c: 339:             RC0 = 1;
  2000  00E6  1407               	bsf	7,0	;volatile
  2001                           
  2002                           ;Button_src.c: 340:             RC1 = 0;
  2003  00E7  1087               	bcf	7,1	;volatile
  2004                           
  2005                           ;Button_src.c: 341:             RC2 = 1;
  2006  00E8  1507               	bsf	7,2	;volatile
  2007                           
  2008                           ;Button_src.c: 342:             RC3 = 1;
  2009  00E9  1587               	bsf	7,3	;volatile
  2010                           
  2011                           ;Button_src.c: 344:             if(RC7 == 0 && b =='x'){
  2012  00EA  1B87               	btfsc	7,7	;volatile
  2013  00EB  295D               	goto	l4824
  2014  00EC  3078               	movlw	120
  2015  00ED  0649               	xorwf	_b,w
  2016  00EE  1D03               	btfss	3,2
  2017  00EF  295D               	goto	l4824
  2018                           
  2019                           ;Button_src.c: 345:                 if(stats == 1)
  2020  00F0  032A               	decf	_stats,w
  2021  00F1  042B               	iorwf	_stats+1,w
  2022  00F2  1D03               	btfss	3,2
  2023  00F3  28F8               	goto	l787
  2024                           
  2025                           ;Button_src.c: 346:                    a++;
  2026  00F4  3001               	movlw	1
  2027  00F5  00E5               	movwf	??_time_settings
  2028  00F6  0865               	movf	??_time_settings,w
  2029  00F7  07CA               	addwf	_a,f
  2030  00F8                     l787:	
  2031                           
  2032                           ;Button_src.c: 347:                 if(stats == 0){
  2033  00F8  082A               	movf	_stats,w
  2034  00F9  042B               	iorwf	_stats+1,w
  2035  00FA  1D03               	btfss	3,2
  2036  00FB  2900               	goto	l788
  2037                           
  2038                           ;Button_src.c: 348:                    stats = 1;
  2039  00FC  3001               	movlw	1
  2040  00FD  00AA               	movwf	_stats
  2041  00FE  3000               	movlw	0
  2042  00FF  00AB               	movwf	_stats+1
  2043  0100                     l788:	
  2044                           ;Button_src.c: 349:                 }
  2045                           
  2046                           
  2047                           ;Button_src.c: 351:                     x++ ;
  2048  0100  3001               	movlw	1
  2049  0101  07B4               	addwf	_x,f
  2050  0102  1803               	skipnc
  2051  0103  0AB5               	incf	_x+1,f
  2052  0104  3000               	movlw	0
  2053  0105  07B5               	addwf	_x+1,f
  2054                           
  2055                           ;Button_src.c: 352:                     x = modulus_func(x,10);
  2056  0106  0835               	movf	_x+1,w
  2057  0107  00F8               	movwf	modulus_func@x+1
  2058  0108  0834               	movf	_x,w
  2059  0109  00F7               	movwf	modulus_func@x
  2060  010A  300A               	movlw	10
  2061  010B  00F9               	movwf	modulus_func@y
  2062  010C  3000               	movlw	0
  2063  010D  00FA               	movwf	modulus_func@y+1
  2064  010E  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  2065  0113  0878               	movf	?_modulus_func+1,w
  2066  0114  00B5               	movwf	_x+1
  2067  0115  0877               	movf	?_modulus_func,w
  2068  0116  00B4               	movwf	_x
  2069                           
  2070                           ;Button_src.c: 353:                     if (p == 1){
  2071  0117  0328               	decf	_p,w
  2072  0118  0429               	iorwf	_p+1,w
  2073  0119  1D03               	btfss	3,2
  2074  011A  2934               	goto	l4810
  2075                           
  2076                           ;Button_src.c: 354:                         y = incrementor(y,x,'0');
  2077  011B  0833               	movf	_y+1,w
  2078  011C  00E1               	movwf	incrementor@upper_val+1
  2079  011D  0832               	movf	_y,w
  2080  011E  00E0               	movwf	incrementor@upper_val
  2081  011F  0835               	movf	_x+1,w
  2082  0120  00E3               	movwf	incrementor@lower_val+1
  2083  0121  0834               	movf	_x,w
  2084  0122  00E2               	movwf	incrementor@lower_val
  2085  0123  3030               	movlw	48
  2086  0124  00E5               	movwf	??_time_settings
  2087  0125  0865               	movf	??_time_settings,w
  2088  0126  00E4               	movwf	incrementor@z
  2089  0127  160A  118A  2343  120A  118A  	fcall	_incrementor
  2090  012C  00E6               	movwf	??_time_settings+1
  2091  012D  01E7               	clrf	??_time_settings+2
  2092  012E  0866               	movf	??_time_settings+1,w
  2093  012F  00B2               	movwf	_y
  2094  0130  0867               	movf	??_time_settings+2,w
  2095  0131  00B3               	movwf	_y+1
  2096                           
  2097                           ;Button_src.c: 355:                         p = 0;
  2098  0132  01A8               	clrf	_p
  2099  0133  01A9               	clrf	_p+1
  2100  0134                     l4810:	
  2101                           
  2102                           ;Button_src.c: 357:                     if (x == 9){
  2103  0134  3009               	movlw	9
  2104  0135  0634               	xorwf	_x,w
  2105  0136  0435               	iorwf	_x+1,w
  2106  0137  1D03               	btfss	3,2
  2107  0138  293D               	goto	l4814
  2108                           
  2109                           ;Button_src.c: 358:                         p = 1;
  2110  0139  3001               	movlw	1
  2111  013A  00A8               	movwf	_p
  2112  013B  3000               	movlw	0
  2113  013C  00A9               	movwf	_p+1
  2114  013D                     l4814:	
  2115                           
  2116                           ;Button_src.c: 362:                     a = time_date_hex_terminator(a,'T');
  2117  013D  3054               	movlw	84
  2118  013E  00E5               	movwf	??_time_settings
  2119  013F  0865               	movf	??_time_settings,w
  2120  0140  00F0               	movwf	time_date_hex_terminator@limiter
  2121  0141  084A               	movf	_a,w
  2122  0142  160A  118A  21E1  120A  118A  	fcall	_time_date_hex_terminator
  2123  0147  00E6               	movwf	??_time_settings+1
  2124  0148  0866               	movf	??_time_settings+1,w
  2125  0149  00CA               	movwf	_a
  2126                           
  2127                           ;Button_src.c: 363:                     if(y == 2 && x == 4){
  2128  014A  3002               	movlw	2
  2129  014B  0632               	xorwf	_y,w
  2130  014C  0433               	iorwf	_y+1,w
  2131  014D  1D03               	btfss	3,2
  2132  014E  2958               	goto	l4822
  2133  014F  3004               	movlw	4
  2134  0150  0634               	xorwf	_x,w
  2135  0151  0435               	iorwf	_x+1,w
  2136  0152  1D03               	btfss	3,2
  2137  0153  2958               	goto	l4822
  2138                           
  2139                           ;Button_src.c: 364:                         x = 0;
  2140  0154  01B4               	clrf	_x
  2141  0155  01B5               	clrf	_x+1
  2142                           
  2143                           ;Button_src.c: 365:                         y = 0;
  2144  0156  01B2               	clrf	_y
  2145  0157  01B3               	clrf	_y+1
  2146  0158                     l4822:	
  2147                           
  2148                           ;Button_src.c: 367:                     button_delay();
  2149  0158  160A  118A  2234  120A  118A  	fcall	_button_delay
  2150  015D                     l4824:	
  2151                           
  2152                           ;Button_src.c: 369:             if(RC7==0 && b == 'y'){
  2153  015D  1283               	bcf	3,5	;RP0=0, select bank0
  2154  015E  1303               	bcf	3,6	;RP1=0, select bank0
  2155  015F  1B87               	btfsc	7,7	;volatile
  2156  0160  29C4               	goto	l4856
  2157  0161  3079               	movlw	121
  2158  0162  0649               	xorwf	_b,w
  2159  0163  1D03               	btfss	3,2
  2160  0164  29C4               	goto	l4856
  2161                           
  2162                           ;Button_src.c: 370:                  if(stats == 1)
  2163  0165  032A               	decf	_stats,w
  2164  0166  042B               	iorwf	_stats+1,w
  2165  0167  1D03               	btfss	3,2
  2166  0168  296D               	goto	l793
  2167                           
  2168                           ;Button_src.c: 371:                    c++;
  2169  0169  3001               	movlw	1
  2170  016A  00E5               	movwf	??_time_settings
  2171  016B  0865               	movf	??_time_settings,w
  2172  016C  07C8               	addwf	_c,f
  2173  016D                     l793:	
  2174                           
  2175                           ;Button_src.c: 372:                 if(stats == 0){
  2176  016D  082A               	movf	_stats,w
  2177  016E  042B               	iorwf	_stats+1,w
  2178  016F  1D03               	btfss	3,2
  2179  0170  2975               	goto	l794
  2180                           
  2181                           ;Button_src.c: 373:                     stats = 1;
  2182  0171  3001               	movlw	1
  2183  0172  00AA               	movwf	_stats
  2184  0173  3000               	movlw	0
  2185  0174  00AB               	movwf	_stats+1
  2186  0175                     l794:	
  2187                           ;Button_src.c: 374:                 }
  2188                           
  2189                           
  2190                           ;Button_src.c: 376:                     t++;
  2191  0175  3001               	movlw	1
  2192  0176  07B8               	addwf	_t,f
  2193  0177  1803               	skipnc
  2194  0178  0AB9               	incf	_t+1,f
  2195  0179  3000               	movlw	0
  2196  017A  07B9               	addwf	_t+1,f
  2197                           
  2198                           ;Button_src.c: 377:                     t = modulus_func(t,10);
  2199  017B  0839               	movf	_t+1,w
  2200  017C  00F8               	movwf	modulus_func@x+1
  2201  017D  0838               	movf	_t,w
  2202  017E  00F7               	movwf	modulus_func@x
  2203  017F  300A               	movlw	10
  2204  0180  00F9               	movwf	modulus_func@y
  2205  0181  3000               	movlw	0
  2206  0182  00FA               	movwf	modulus_func@y+1
  2207  0183  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  2208  0188  0878               	movf	?_modulus_func+1,w
  2209  0189  00B9               	movwf	_t+1
  2210  018A  0877               	movf	?_modulus_func,w
  2211  018B  00B8               	movwf	_t
  2212                           
  2213                           ;Button_src.c: 378:                       if (p == 1){
  2214  018C  0328               	decf	_p,w
  2215  018D  0429               	iorwf	_p+1,w
  2216  018E  1D03               	btfss	3,2
  2217  018F  29A9               	goto	l4842
  2218                           
  2219                           ;Button_src.c: 379:                         w = incrementor(w,t,'0');
  2220  0190  0837               	movf	_w+1,w
  2221  0191  00E1               	movwf	incrementor@upper_val+1
  2222  0192  0836               	movf	_w,w
  2223  0193  00E0               	movwf	incrementor@upper_val
  2224  0194  0839               	movf	_t+1,w
  2225  0195  00E3               	movwf	incrementor@lower_val+1
  2226  0196  0838               	movf	_t,w
  2227  0197  00E2               	movwf	incrementor@lower_val
  2228  0198  3030               	movlw	48
  2229  0199  00E5               	movwf	??_time_settings
  2230  019A  0865               	movf	??_time_settings,w
  2231  019B  00E4               	movwf	incrementor@z
  2232  019C  160A  118A  2343  120A  118A  	fcall	_incrementor
  2233  01A1  00E6               	movwf	??_time_settings+1
  2234  01A2  01E7               	clrf	??_time_settings+2
  2235  01A3  0866               	movf	??_time_settings+1,w
  2236  01A4  00B6               	movwf	_w
  2237  01A5  0867               	movf	??_time_settings+2,w
  2238  01A6  00B7               	movwf	_w+1
  2239                           
  2240                           ;Button_src.c: 380:                         p = 0;
  2241  01A7  01A8               	clrf	_p
  2242  01A8  01A9               	clrf	_p+1
  2243  01A9                     l4842:	
  2244                           
  2245                           ;Button_src.c: 382:                     if (t == 9){
  2246  01A9  3009               	movlw	9
  2247  01AA  0638               	xorwf	_t,w
  2248  01AB  0439               	iorwf	_t+1,w
  2249  01AC  1D03               	btfss	3,2
  2250  01AD  29B2               	goto	l4846
  2251                           
  2252                           ;Button_src.c: 383:                         p = 1;
  2253  01AE  3001               	movlw	1
  2254  01AF  00A8               	movwf	_p
  2255  01B0  3000               	movlw	0
  2256  01B1  00A9               	movwf	_p+1
  2257  01B2                     l4846:	
  2258                           
  2259                           ;Button_src.c: 386:                     if(c == (0x59 + 1)){
  2260  01B2  305A               	movlw	90
  2261  01B3  0648               	xorwf	_c,w
  2262  01B4  1903               	btfsc	3,2
  2263                           
  2264                           ;Button_src.c: 387:                         c = 0x00;
  2265  01B5  01C8               	clrf	_c
  2266                           
  2267                           ;Button_src.c: 389:                     if(w == 6){
  2268  01B6  3006               	movlw	6
  2269  01B7  0636               	xorwf	_w,w
  2270  01B8  0437               	iorwf	_w+1,w
  2271  01B9  1D03               	btfss	3,2
  2272  01BA  29BF               	goto	l4854
  2273                           
  2274                           ;Button_src.c: 390:                         w = 0;
  2275  01BB  01B6               	clrf	_w
  2276  01BC  01B7               	clrf	_w+1
  2277                           
  2278                           ;Button_src.c: 391:                         t = 0;
  2279  01BD  01B8               	clrf	_t
  2280  01BE  01B9               	clrf	_t+1
  2281  01BF                     l4854:	
  2282                           
  2283                           ;Button_src.c: 393:                     button_delay();
  2284  01BF  160A  118A  2234  120A  118A  	fcall	_button_delay
  2285  01C4                     l4856:	
  2286                           
  2287                           ;Button_src.c: 396:              write_cmd(0x88);
  2288  01C4  3088               	movlw	136
  2289  01C5  160A  118A  2287  120A  118A  	fcall	_write_cmd
  2290                           
  2291                           ;Button_src.c: 397:               if(stats==0){
  2292  01CA  082A               	movf	_stats,w
  2293  01CB  042B               	iorwf	_stats+1,w
  2294  01CC  1D03               	btfss	3,2
  2295  01CD  29D6               	goto	l4862
  2296                           
  2297                           ;Button_src.c: 398:                   table[2] = prev_hex_hours;
  2298  01CE  0842               	movf	_prev_hex_hours,w
  2299  01CF  00E5               	movwf	??_time_settings
  2300  01D0  0865               	movf	??_time_settings,w
  2301  01D1  1683               	bsf	3,5	;RP0=1, select bank1
  2302  01D2  00BD               	movwf	(_table^(0+128)+2)
  2303                           
  2304                           ;Button_src.c: 399:                   table[1] = prev_hex_mins;
  2305  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  2306  01D4  0841               	movf	_prev_hex_mins,w
  2307  01D5  29E1               	goto	L1
  2308  01D6                     l4862:	
  2309                           ;Button_src.c: 400:               }
  2310                           
  2311  01D6  032A               	decf	_stats,w
  2312  01D7  042B               	iorwf	_stats+1,w
  2313  01D8  1D03               	btfss	3,2
  2314  01D9  29E5               	goto	l4866
  2315                           
  2316                           ;Button_src.c: 402:               {;Button_src.c: 403:                  table[2]= a;
  2317  01DA  084A               	movf	_a,w
  2318  01DB  00E5               	movwf	??_time_settings
  2319  01DC  0865               	movf	??_time_settings,w
  2320  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  2321  01DE  00BD               	movwf	(_table^(0+128)+2)
  2322                           
  2323                           ;Button_src.c: 404:                  table[1] = c;
  2324  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  2325  01E0  0848               	movf	_c,w
  2326  01E1                     L1:	
  2327  01E1  00E5               	movwf	??_time_settings
  2328  01E2  0865               	movf	??_time_settings,w
  2329  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  2330  01E4  00BC               	movwf	(_table^(0+128)+1)
  2331  01E5                     l4866:	
  2332                           
  2333                           ;Button_src.c: 408:                     a = time_date_delimiter(a,0x11,'9',4);
  2334  01E5  3011               	movlw	17
  2335  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  2336  01E7  00E5               	movwf	??_time_settings
  2337  01E8  0865               	movf	??_time_settings,w
  2338  01E9  00F0               	movwf	time_date_delimiter@hex
  2339  01EA  3039               	movlw	57
  2340  01EB  00E6               	movwf	??_time_settings+1
  2341  01EC  0866               	movf	??_time_settings+1,w
  2342  01ED  00F1               	movwf	time_date_delimiter@limiter
  2343  01EE  3004               	movlw	4
  2344  01EF  00F2               	movwf	time_date_delimiter@type
  2345  01F0  3000               	movlw	0
  2346  01F1  00F3               	movwf	time_date_delimiter@type+1
  2347  01F2  084A               	movf	_a,w
  2348  01F3  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2349  01F8  00E7               	movwf	??_time_settings+2
  2350  01F9  0867               	movf	??_time_settings+2,w
  2351  01FA  00CA               	movwf	_a
  2352                           
  2353                           ;Button_src.c: 409:                     a = time_date_delimiter(a,0x21,'J',4);
  2354  01FB  3021               	movlw	33
  2355  01FC  00E5               	movwf	??_time_settings
  2356  01FD  0865               	movf	??_time_settings,w
  2357  01FE  00F0               	movwf	time_date_delimiter@hex
  2358  01FF  304A               	movlw	74
  2359  0200  00E6               	movwf	??_time_settings+1
  2360  0201  0866               	movf	??_time_settings+1,w
  2361  0202  00F1               	movwf	time_date_delimiter@limiter
  2362  0203  3004               	movlw	4
  2363  0204  00F2               	movwf	time_date_delimiter@type
  2364  0205  3000               	movlw	0
  2365  0206  00F3               	movwf	time_date_delimiter@type+1
  2366  0207  084A               	movf	_a,w
  2367  0208  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2368  020D  00E7               	movwf	??_time_settings+2
  2369  020E  0867               	movf	??_time_settings+2,w
  2370  020F  00CA               	movwf	_a
  2371                           
  2372                           ;Button_src.c: 411:                     c = time_date_delimiter(c,0x11,'9',5);
  2373  0210  3011               	movlw	17
  2374  0211  00E5               	movwf	??_time_settings
  2375  0212  0865               	movf	??_time_settings,w
  2376  0213  00F0               	movwf	time_date_delimiter@hex
  2377  0214  3039               	movlw	57
  2378  0215  00E6               	movwf	??_time_settings+1
  2379  0216  0866               	movf	??_time_settings+1,w
  2380  0217  00F1               	movwf	time_date_delimiter@limiter
  2381  0218  3005               	movlw	5
  2382  0219  00F2               	movwf	time_date_delimiter@type
  2383  021A  3000               	movlw	0
  2384  021B  00F3               	movwf	time_date_delimiter@type+1
  2385  021C  0848               	movf	_c,w
  2386  021D  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2387  0222  00E7               	movwf	??_time_settings+2
  2388  0223  0867               	movf	??_time_settings+2,w
  2389  0224  00C8               	movwf	_c
  2390                           
  2391                           ;Button_src.c: 412:                     c = time_date_delimiter(c,0x21,'J',5);
  2392  0225  3021               	movlw	33
  2393  0226  00E5               	movwf	??_time_settings
  2394  0227  0865               	movf	??_time_settings,w
  2395  0228  00F0               	movwf	time_date_delimiter@hex
  2396  0229  304A               	movlw	74
  2397  022A  00E6               	movwf	??_time_settings+1
  2398  022B  0866               	movf	??_time_settings+1,w
  2399  022C  00F1               	movwf	time_date_delimiter@limiter
  2400  022D  3005               	movlw	5
  2401  022E  00F2               	movwf	time_date_delimiter@type
  2402  022F  3000               	movlw	0
  2403  0230  00F3               	movwf	time_date_delimiter@type+1
  2404  0231  0848               	movf	_c,w
  2405  0232  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2406  0237  00E7               	movwf	??_time_settings+2
  2407  0238  0867               	movf	??_time_settings+2,w
  2408  0239  00C8               	movwf	_c
  2409                           
  2410                           ;Button_src.c: 413:                     c = time_date_delimiter(c,0x31,'Y',5);
  2411  023A  3031               	movlw	49
  2412  023B  00E5               	movwf	??_time_settings
  2413  023C  0865               	movf	??_time_settings,w
  2414  023D  00F0               	movwf	time_date_delimiter@hex
  2415  023E  3059               	movlw	89
  2416  023F  00E6               	movwf	??_time_settings+1
  2417  0240  0866               	movf	??_time_settings+1,w
  2418  0241  00F1               	movwf	time_date_delimiter@limiter
  2419  0242  3005               	movlw	5
  2420  0243  00F2               	movwf	time_date_delimiter@type
  2421  0244  3000               	movlw	0
  2422  0245  00F3               	movwf	time_date_delimiter@type+1
  2423  0246  0848               	movf	_c,w
  2424  0247  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2425  024C  00E7               	movwf	??_time_settings+2
  2426  024D  0867               	movf	??_time_settings+2,w
  2427  024E  00C8               	movwf	_c
  2428                           
  2429                           ;Button_src.c: 414:                     c = time_date_delimiter(c,0x41,'j',5);
  2430  024F  3041               	movlw	65
  2431  0250  00E5               	movwf	??_time_settings
  2432  0251  0865               	movf	??_time_settings,w
  2433  0252  00F0               	movwf	time_date_delimiter@hex
  2434  0253  306A               	movlw	106
  2435  0254  00E6               	movwf	??_time_settings+1
  2436  0255  0866               	movf	??_time_settings+1,w
  2437  0256  00F1               	movwf	time_date_delimiter@limiter
  2438  0257  3005               	movlw	5
  2439  0258  00F2               	movwf	time_date_delimiter@type
  2440  0259  3000               	movlw	0
  2441  025A  00F3               	movwf	time_date_delimiter@type+1
  2442  025B  0848               	movf	_c,w
  2443  025C  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2444  0261  00E7               	movwf	??_time_settings+2
  2445  0262  0867               	movf	??_time_settings+2,w
  2446  0263  00C8               	movwf	_c
  2447                           
  2448                           ;Button_src.c: 415:                     c = time_date_delimiter(c,0x51,'z',5);
  2449  0264  3051               	movlw	81
  2450  0265  00E5               	movwf	??_time_settings
  2451  0266  0865               	movf	??_time_settings,w
  2452  0267  00F0               	movwf	time_date_delimiter@hex
  2453  0268  307A               	movlw	122
  2454  0269  00E6               	movwf	??_time_settings+1
  2455  026A  0866               	movf	??_time_settings+1,w
  2456  026B  00F1               	movwf	time_date_delimiter@limiter
  2457  026C  3005               	movlw	5
  2458  026D  00F2               	movwf	time_date_delimiter@type
  2459  026E  3000               	movlw	0
  2460  026F  00F3               	movwf	time_date_delimiter@type+1
  2461  0270  0848               	movf	_c,w
  2462  0271  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  2463  0276  00E7               	movwf	??_time_settings+2
  2464  0277  0867               	movf	??_time_settings+2,w
  2465  0278  00C8               	movwf	_c
  2466                           
  2467                           ;Button_src.c: 417:                   RC0 = 0;
  2468  0279  1007               	bcf	7,0	;volatile
  2469                           
  2470                           ;Button_src.c: 418:                   RC1 = 1;
  2471  027A  1487               	bsf	7,1	;volatile
  2472                           
  2473                           ;Button_src.c: 419:                   RC2 = 1;
  2474  027B  1507               	bsf	7,2	;volatile
  2475                           
  2476                           ;Button_src.c: 420:                   RC3 = 1;
  2477  027C  1587               	bsf	7,3	;volatile
  2478                           
  2479                           ;Button_src.c: 421:                     if (RC6 == 0 ){
  2480  027D  1B07               	btfsc	7,6	;volatile
  2481  027E  2A93               	goto	l802
  2482                           
  2483                           ;Button_src.c: 422:                           write_cmd(0x1);
  2484  027F  3001               	movlw	1
  2485  0280  160A  118A  2287  120A  118A  	fcall	_write_cmd
  2486                           
  2487                           ;Button_src.c: 423:                           set_time();
  2488  0285  160A  118A  238D   	fcall	_set_time
  2489                           
  2490                           ;Button_src.c: 424:                           a = 0x00;
  2491  0288  01CA               	clrf	_a
  2492                           
  2493                           ;Button_src.c: 425:                           c = 0x00;
  2494  0289  01C8               	clrf	_c
  2495                           
  2496                           ;Button_src.c: 426:                           x = 0;
  2497  028A  01B4               	clrf	_x
  2498  028B  01B5               	clrf	_x+1
  2499                           
  2500                           ;Button_src.c: 427:                           y = 0;
  2501  028C  01B2               	clrf	_y
  2502  028D  01B3               	clrf	_y+1
  2503                           
  2504                           ;Button_src.c: 428:                           w = 0;
  2505  028E  01B6               	clrf	_w
  2506  028F  01B7               	clrf	_w+1
  2507                           
  2508                           ;Button_src.c: 429:                           t = 0;
  2509  0290  01B8               	clrf	_t
  2510  0291  01B9               	clrf	_t+1
  2511  0292  0008               	return
  2512  0293                     l802:	
  2513                           ;Button_src.c: 432:                             }
  2514                           
  2515                           
  2516                           ;Button_src.c: 433:                   RC0 = 1;
  2517  0293  1407               	bsf	7,0	;volatile
  2518                           
  2519                           ;Button_src.c: 434:                   RC1 = 1;
  2520  0294  1487               	bsf	7,1	;volatile
  2521                           
  2522                           ;Button_src.c: 435:                   RC2 = 0;
  2523  0295  1107               	bcf	7,2	;volatile
  2524                           
  2525                           ;Button_src.c: 436:                   RC3 = 1;
  2526  0296  1587               	bsf	7,3	;volatile
  2527                           
  2528                           ;Button_src.c: 437:                   z = modulus_func(z,2);
  2529  0297  0831               	movf	_z+1,w
  2530  0298  00F8               	movwf	modulus_func@x+1
  2531  0299  0830               	movf	_z,w
  2532  029A  00F7               	movwf	modulus_func@x
  2533  029B  3002               	movlw	2
  2534  029C  00F9               	movwf	modulus_func@y
  2535  029D  3000               	movlw	0
  2536  029E  00FA               	movwf	modulus_func@y+1
  2537  029F  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  2538  02A4  0878               	movf	?_modulus_func+1,w
  2539  02A5  00B1               	movwf	_z+1
  2540  02A6  0877               	movf	?_modulus_func,w
  2541  02A7  00B0               	movwf	_z
  2542                           
  2543                           ;Button_src.c: 438:                   if(RC4 == 0 && z ==0){
  2544  02A8  1A07               	btfsc	7,4	;volatile
  2545  02A9  2AE3               	goto	l4920
  2546  02AA  0830               	movf	_z,w
  2547  02AB  0431               	iorwf	_z+1,w
  2548  02AC  1D03               	btfss	3,2
  2549  02AD  2AE3               	goto	l4920
  2550                           
  2551                           ;Button_src.c: 439:                       write_cmd(0x90);
  2552  02AE  3090               	movlw	144
  2553  02AF  160A  118A  2287  120A  118A  	fcall	_write_cmd
  2554                           
  2555                           ;Button_src.c: 440:                       write_char('H');
  2556  02B4  3048               	movlw	72
  2557  02B5  160A  118A  2270  120A  118A  	fcall	_write_char
  2558                           
  2559                           ;Button_src.c: 441:                       write_char('o');
  2560  02BA  306F               	movlw	111
  2561  02BB  160A  118A  2270  120A  118A  	fcall	_write_char
  2562                           
  2563                           ;Button_src.c: 442:                       write_char('u');
  2564  02C0  3075               	movlw	117
  2565  02C1  160A  118A  2270  120A  118A  	fcall	_write_char
  2566                           
  2567                           ;Button_src.c: 443:                       write_char('r');
  2568  02C6  3072               	movlw	114
  2569  02C7  160A  118A  2270  120A  118A  	fcall	_write_char
  2570                           
  2571                           ;Button_src.c: 444:                       write_char(':');
  2572  02CC  303A               	movlw	58
  2573  02CD  160A  118A  2270  120A  118A  	fcall	_write_char
  2574                           
  2575                           ;Button_src.c: 445:                       b = 'x';
  2576  02D2  3078               	movlw	120
  2577  02D3  00E5               	movwf	??_time_settings
  2578  02D4  0865               	movf	??_time_settings,w
  2579  02D5  00C9               	movwf	_b
  2580                           
  2581                           ;Button_src.c: 446:                       button_delay();
  2582  02D6  160A  118A  2234  120A  118A  	fcall	_button_delay
  2583                           
  2584                           ;Button_src.c: 447:                       z++;
  2585  02DB  3001               	movlw	1
  2586  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2587  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2588  02DE  07B0               	addwf	_z,f
  2589  02DF  1803               	skipnc
  2590  02E0  0AB1               	incf	_z+1,f
  2591  02E1  3000               	movlw	0
  2592  02E2  07B1               	addwf	_z+1,f
  2593  02E3                     l4920:	
  2594                           
  2595                           ;Button_src.c: 449:                   RC0 = 1;
  2596  02E3  1407               	bsf	7,0	;volatile
  2597                           
  2598                           ;Button_src.c: 450:                   RC1 = 1;
  2599  02E4  1487               	bsf	7,1	;volatile
  2600                           
  2601                           ;Button_src.c: 451:                   RC2 = 0;
  2602  02E5  1107               	bcf	7,2	;volatile
  2603                           
  2604                           ;Button_src.c: 452:                   RC3 = 1;
  2605  02E6  1587               	bsf	7,3	;volatile
  2606                           
  2607                           ;Button_src.c: 454:                   if(RC4 == 0&& z ==1){
  2608  02E7  1A07               	btfsc	7,4	;volatile
  2609  02E8  2B20               	goto	l805
  2610  02E9  0330               	decf	_z,w
  2611  02EA  0431               	iorwf	_z+1,w
  2612  02EB  1D03               	btfss	3,2
  2613  02EC  2B20               	goto	l805
  2614                           
  2615                           ;Button_src.c: 455:                     z++;
  2616  02ED  3001               	movlw	1
  2617  02EE  07B0               	addwf	_z,f
  2618  02EF  1803               	skipnc
  2619  02F0  0AB1               	incf	_z+1,f
  2620  02F1  3000               	movlw	0
  2621  02F2  07B1               	addwf	_z+1,f
  2622                           
  2623                           ;Button_src.c: 456:                     button_delay();
  2624  02F3  160A  118A  2234  120A  118A  	fcall	_button_delay
  2625                           
  2626                           ;Button_src.c: 457:                     write_cmd(0x90);
  2627  02F8  3090               	movlw	144
  2628  02F9  160A  118A  2287  120A  118A  	fcall	_write_cmd
  2629                           
  2630                           ;Button_src.c: 458:                     write_char('M');
  2631  02FE  304D               	movlw	77
  2632  02FF  160A  118A  2270  120A  118A  	fcall	_write_char
  2633                           
  2634                           ;Button_src.c: 459:                     write_char('i');
  2635  0304  3069               	movlw	105
  2636  0305  160A  118A  2270  120A  118A  	fcall	_write_char
  2637                           
  2638                           ;Button_src.c: 460:                     write_char('n');
  2639  030A  306E               	movlw	110
  2640  030B  160A  118A  2270  120A  118A  	fcall	_write_char
  2641                           
  2642                           ;Button_src.c: 461:                     write_char('s');
  2643  0310  3073               	movlw	115
  2644  0311  160A  118A  2270  120A  118A  	fcall	_write_char
  2645                           
  2646                           ;Button_src.c: 462:                     write_char(':');
  2647  0316  303A               	movlw	58
  2648  0317  160A  118A  2270  120A  118A  	fcall	_write_char
  2649                           
  2650                           ;Button_src.c: 463:                     b = 'y';
  2651  031C  3079               	movlw	121
  2652  031D  00E5               	movwf	??_time_settings
  2653  031E  0865               	movf	??_time_settings,w
  2654  031F  00C9               	movwf	_b
  2655  0320                     l805:	
  2656                           ;Button_src.c: 464:                   }
  2657                           
  2658                           
  2659                           ;Button_src.c: 465:                    write_cmd(0x88);
  2660  0320  3088               	movlw	136
  2661  0321  160A  118A  2287  120A  118A  	fcall	_write_cmd
  2662                           
  2663                           ;Button_src.c: 469:                   RC0 = 1;
  2664  0326  1407               	bsf	7,0	;volatile
  2665                           
  2666                           ;Button_src.c: 470:                   RC1 = 1;
  2667  0327  1487               	bsf	7,1	;volatile
  2668                           
  2669                           ;Button_src.c: 471:                   RC2 = 0;
  2670  0328  1107               	bcf	7,2	;volatile
  2671                           
  2672                           ;Button_src.c: 472:                   RC3 = 1;
  2673  0329  1587               	bsf	7,3	;volatile
  2674                           
  2675                           ;Button_src.c: 474:              write_cmd(0x88);
  2676  032A  3088               	movlw	136
  2677  032B  160A  118A  2287  120A  118A  	fcall	_write_cmd
  2678                           
  2679                           ;Button_src.c: 475:              write_char('T');
  2680  0330  3054               	movlw	84
  2681  0331  160A  118A  2270  120A  118A  	fcall	_write_char
  2682                           
  2683                           ;Button_src.c: 476:              write_char('i');
  2684  0336  3069               	movlw	105
  2685  0337  160A  118A  2270  120A  118A  	fcall	_write_char
  2686                           
  2687                           ;Button_src.c: 477:              write_char('m');
  2688  033C  306D               	movlw	109
  2689  033D  160A  118A  2270  120A  118A  	fcall	_write_char
  2690                           
  2691                           ;Button_src.c: 478:              write_char('e');
  2692  0342  3065               	movlw	101
  2693  0343  160A  118A  2270  120A  118A  	fcall	_write_char
  2694                           
  2695                           ;Button_src.c: 479:              write_char(':');
  2696  0348  303A               	movlw	58
  2697  0349  160A  118A  2270  120A  118A  	fcall	_write_char
  2698                           
  2699                           ;Button_src.c: 480:              write_char(y + '0');
  2700  034E  0832               	movf	_y,w
  2701  034F  3E30               	addlw	48
  2702  0350  160A  118A  2270  120A  118A  	fcall	_write_char
  2703                           
  2704                           ;Button_src.c: 481:              write_char(x + '0');
  2705  0355  0834               	movf	_x,w
  2706  0356  3E30               	addlw	48
  2707  0357  160A  118A  2270  120A  118A  	fcall	_write_char
  2708                           
  2709                           ;Button_src.c: 482:              write_char(':');
  2710  035C  303A               	movlw	58
  2711  035D  160A  118A  2270  120A  118A  	fcall	_write_char
  2712                           
  2713                           ;Button_src.c: 483:              write_char(w + '0');
  2714  0362  0836               	movf	_w,w
  2715  0363  3E30               	addlw	48
  2716  0364  160A  118A  2270  120A  118A  	fcall	_write_char
  2717                           
  2718                           ;Button_src.c: 484:              write_char(t + '0');
  2719  0369  0838               	movf	_t,w
  2720  036A  3E30               	addlw	48
  2721  036B  160A  118A  2270  120A  118A  	fcall	_write_char
  2722                           
  2723                           ;Button_src.c: 486:             RC0 = 0;
  2724  0370  1007               	bcf	7,0	;volatile
  2725                           
  2726                           ;Button_src.c: 487:             RC1 = 1;
  2727  0371  1487               	bsf	7,1	;volatile
  2728                           
  2729                           ;Button_src.c: 488:             RC2 = 1;
  2730  0372  1507               	bsf	7,2	;volatile
  2731                           
  2732                           ;Button_src.c: 489:             RC3 = 1;
  2733  0373  1587               	bsf	7,3	;volatile
  2734                           
  2735                           ;Button_src.c: 490:             if (RC7 == 0 ){
  2736  0374  1B87               	btfsc	7,7	;volatile
  2737  0375  2892               	goto	l785
  2738                           
  2739                           ;Button_src.c: 491:             a = 0x00;
  2740  0376  01CA               	clrf	_a
  2741                           
  2742                           ;Button_src.c: 492:             c = 0x00;
  2743  0377  01C8               	clrf	_c
  2744                           
  2745                           ;Button_src.c: 493:             x = 0;
  2746  0378  01B4               	clrf	_x
  2747  0379  01B5               	clrf	_x+1
  2748                           
  2749                           ;Button_src.c: 494:             y = 0;
  2750  037A  01B2               	clrf	_y
  2751  037B  01B3               	clrf	_y+1
  2752                           
  2753                           ;Button_src.c: 495:             w = 0;
  2754  037C  01B6               	clrf	_w
  2755  037D  01B7               	clrf	_w+1
  2756                           
  2757                           ;Button_src.c: 496:             t = 0;
  2758  037E  01B8               	clrf	_t
  2759  037F  01B9               	clrf	_t+1
  2760                           
  2761                           ;Button_src.c: 497:             write_cmd(0x1);
  2762  0380  3001               	movlw	1
  2763  0381  160A  118A  2287   	fcall	_write_cmd
  2764                           
  2765                           ;Button_src.c: 498:             break;
  2766  0384  0008               	return
  2767  0385                     __end_of_time_settings:	
  2768                           
  2769                           	psect	text2
  2770  0C2E                     __ptext2:	
  2771 ;; *************** function _thermometer_threshhold_settings *****************
  2772 ;; Defined at:
  2773 ;;		line 23 in file "Button_src.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 300/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2787 ;;      Params:         0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0
  2789 ;;      Temps:          0       3       0       0       0
  2790 ;;      Totals:         0       3       0       0       0
  2791 ;;Total ram usage:        3 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    3
  2794 ;; This function calls:
  2795 ;;		_button_delay
  2796 ;;		_incrementor
  2797 ;;		_modulus_func
  2798 ;;		_write_char
  2799 ;;		_write_cmd
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           
  2806                           ;psect for function _thermometer_threshhold_settings
  2807  0C2E                     _thermometer_threshhold_settings:	
  2808                           
  2809                           ;Button_src.c: 24:  RC0 = 1;
  2810                           
  2811                           ;incstack = 0
  2812                           ; Regs used in _thermometer_threshhold_settings: [wreg+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  2813  0C2E  1407               	bsf	7,0	;volatile
  2814                           
  2815                           ;Button_src.c: 25:  RC1 = 0;
  2816  0C2F  1087               	bcf	7,1	;volatile
  2817                           
  2818                           ;Button_src.c: 26:  RC2 = 1;
  2819  0C30  1507               	bsf	7,2	;volatile
  2820                           
  2821                           ;Button_src.c: 27:  RC3 = 1;
  2822  0C31  1587               	bsf	7,3	;volatile
  2823                           
  2824                           ;Button_src.c: 28:   if (RC4 == 0){
  2825  0C32  1A07               	btfsc	7,4	;volatile
  2826  0C33  0008               	return
  2827                           
  2828                           ;Button_src.c: 29:       write_cmd(0x1);
  2829  0C34  3001               	movlw	1
  2830  0C35  160A  118A  2287  120A  158A  	fcall	_write_cmd
  2831  0C3A                     l761:	
  2832                           ;Button_src.c: 30:       for(;;){
  2833                           
  2834                           
  2835                           ;Button_src.c: 31:             write_cmd(0x80);
  2836  0C3A  3080               	movlw	128
  2837  0C3B  160A  118A  2287  120A  158A  	fcall	_write_cmd
  2838                           
  2839                           ;Button_src.c: 32:             write_char('T');
  2840  0C40  3054               	movlw	84
  2841  0C41  160A  118A  2270  120A  158A  	fcall	_write_char
  2842                           
  2843                           ;Button_src.c: 33:             write_char('h');
  2844  0C46  3068               	movlw	104
  2845  0C47  160A  118A  2270  120A  158A  	fcall	_write_char
  2846                           
  2847                           ;Button_src.c: 34:             write_char('r');
  2848  0C4C  3072               	movlw	114
  2849  0C4D  160A  118A  2270  120A  158A  	fcall	_write_char
  2850                           
  2851                           ;Button_src.c: 35:             write_char('e');
  2852  0C52  3065               	movlw	101
  2853  0C53  160A  118A  2270  120A  158A  	fcall	_write_char
  2854                           
  2855                           ;Button_src.c: 36:             write_char('s');
  2856  0C58  3073               	movlw	115
  2857  0C59  160A  118A  2270  120A  158A  	fcall	_write_char
  2858                           
  2859                           ;Button_src.c: 37:             write_char('h');
  2860  0C5E  3068               	movlw	104
  2861  0C5F  160A  118A  2270  120A  158A  	fcall	_write_char
  2862                           
  2863                           ;Button_src.c: 38:             write_char('o');
  2864  0C64  306F               	movlw	111
  2865  0C65  160A  118A  2270  120A  158A  	fcall	_write_char
  2866                           
  2867                           ;Button_src.c: 39:             write_char('l');
  2868  0C6A  306C               	movlw	108
  2869  0C6B  160A  118A  2270  120A  158A  	fcall	_write_char
  2870                           
  2871                           ;Button_src.c: 40:             write_char('d');
  2872  0C70  3064               	movlw	100
  2873  0C71  160A  118A  2270  120A  158A  	fcall	_write_char
  2874                           
  2875                           ;Button_src.c: 41:             write_char('s');
  2876  0C76  3073               	movlw	115
  2877  0C77  160A  118A  2270  120A  158A  	fcall	_write_char
  2878                           
  2879                           ;Button_src.c: 42:             write_char(':');
  2880  0C7C  303A               	movlw	58
  2881  0C7D  160A  118A  2270  120A  158A  	fcall	_write_char
  2882                           
  2883                           ;Button_src.c: 48:             RC0 = 1;
  2884  0C82  1407               	bsf	7,0	;volatile
  2885                           
  2886                           ;Button_src.c: 49:             RC1 = 0;
  2887  0C83  1087               	bcf	7,1	;volatile
  2888                           
  2889                           ;Button_src.c: 50:             RC2 = 1;
  2890  0C84  1507               	bsf	7,2	;volatile
  2891                           
  2892                           ;Button_src.c: 51:             RC3 = 1;
  2893  0C85  1587               	bsf	7,3	;volatile
  2894                           
  2895                           ;Button_src.c: 53:             if(RC7 == 0 && b =='x'){
  2896  0C86  1B87               	btfsc	7,7	;volatile
  2897  0C87  2CCE               	goto	l4218
  2898  0C88  3078               	movlw	120
  2899  0C89  0649               	xorwf	_b,w
  2900  0C8A  1D03               	btfss	3,2
  2901  0C8B  2CCE               	goto	l4218
  2902                           
  2903                           ;Button_src.c: 54:                     x++ ;
  2904  0C8C  3001               	movlw	1
  2905  0C8D  07B4               	addwf	_x,f
  2906  0C8E  1803               	skipnc
  2907  0C8F  0AB5               	incf	_x+1,f
  2908  0C90  3000               	movlw	0
  2909  0C91  07B5               	addwf	_x+1,f
  2910                           
  2911                           ;Button_src.c: 55:                     x = modulus_func(x,10);
  2912  0C92  0835               	movf	_x+1,w
  2913  0C93  00F8               	movwf	modulus_func@x+1
  2914  0C94  0834               	movf	_x,w
  2915  0C95  00F7               	movwf	modulus_func@x
  2916  0C96  300A               	movlw	10
  2917  0C97  00F9               	movwf	modulus_func@y
  2918  0C98  3000               	movlw	0
  2919  0C99  00FA               	movwf	modulus_func@y+1
  2920  0C9A  160A  118A  21FF  120A  158A  	fcall	_modulus_func
  2921  0C9F  0878               	movf	?_modulus_func+1,w
  2922  0CA0  00B5               	movwf	_x+1
  2923  0CA1  0877               	movf	?_modulus_func,w
  2924  0CA2  00B4               	movwf	_x
  2925                           
  2926                           ;Button_src.c: 56:                     if (p == 1){
  2927  0CA3  0328               	decf	_p,w
  2928  0CA4  0429               	iorwf	_p+1,w
  2929  0CA5  1D03               	btfss	3,2
  2930  0CA6  2CC0               	goto	l4212
  2931                           
  2932                           ;Button_src.c: 57:                         y = incrementor(y,x,'0');
  2933  0CA7  0833               	movf	_y+1,w
  2934  0CA8  00E1               	movwf	incrementor@upper_val+1
  2935  0CA9  0832               	movf	_y,w
  2936  0CAA  00E0               	movwf	incrementor@upper_val
  2937  0CAB  0835               	movf	_x+1,w
  2938  0CAC  00E3               	movwf	incrementor@lower_val+1
  2939  0CAD  0834               	movf	_x,w
  2940  0CAE  00E2               	movwf	incrementor@lower_val
  2941  0CAF  3030               	movlw	48
  2942  0CB0  00E5               	movwf	??_thermometer_threshhold_settings
  2943  0CB1  0865               	movf	??_thermometer_threshhold_settings,w
  2944  0CB2  00E4               	movwf	incrementor@z
  2945  0CB3  160A  118A  2343  120A  158A  	fcall	_incrementor
  2946  0CB8  00E6               	movwf	??_thermometer_threshhold_settings+1
  2947  0CB9  01E7               	clrf	??_thermometer_threshhold_settings+2
  2948  0CBA  0866               	movf	??_thermometer_threshhold_settings+1,w
  2949  0CBB  00B2               	movwf	_y
  2950  0CBC  0867               	movf	??_thermometer_threshhold_settings+2,w
  2951  0CBD  00B3               	movwf	_y+1
  2952                           
  2953                           ;Button_src.c: 58:                         p = 0;
  2954  0CBE  01A8               	clrf	_p
  2955  0CBF  01A9               	clrf	_p+1
  2956  0CC0                     l4212:	
  2957                           
  2958                           ;Button_src.c: 60:                     if (x == 9){
  2959  0CC0  3009               	movlw	9
  2960  0CC1  0634               	xorwf	_x,w
  2961  0CC2  0435               	iorwf	_x+1,w
  2962  0CC3  1D03               	btfss	3,2
  2963  0CC4  2CC9               	goto	l4216
  2964                           
  2965                           ;Button_src.c: 61:                         p = 1;
  2966  0CC5  3001               	movlw	1
  2967  0CC6  00A8               	movwf	_p
  2968  0CC7  3000               	movlw	0
  2969  0CC8  00A9               	movwf	_p+1
  2970  0CC9                     l4216:	
  2971                           
  2972                           ;Button_src.c: 65:                     button_delay();
  2973  0CC9  160A  118A  2234  120A  158A  	fcall	_button_delay
  2974  0CCE                     l4218:	
  2975                           
  2976                           ;Button_src.c: 67:              RC0 = 1;
  2977  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0CD0  1407               	bsf	7,0	;volatile
  2980                           
  2981                           ;Button_src.c: 68:             RC1 = 0;
  2982  0CD1  1087               	bcf	7,1	;volatile
  2983                           
  2984                           ;Button_src.c: 69:             RC2 = 1;
  2985  0CD2  1507               	bsf	7,2	;volatile
  2986                           
  2987                           ;Button_src.c: 70:             RC3 = 1;
  2988  0CD3  1587               	bsf	7,3	;volatile
  2989                           
  2990                           ;Button_src.c: 71:             if(RC7==0 && b == 'y'){
  2991  0CD4  1B87               	btfsc	7,7	;volatile
  2992  0CD5  2D1C               	goto	l4246
  2993  0CD6  3079               	movlw	121
  2994  0CD7  0649               	xorwf	_b,w
  2995  0CD8  1D03               	btfss	3,2
  2996  0CD9  2D1C               	goto	l4246
  2997                           
  2998                           ;Button_src.c: 72:                     t++;
  2999  0CDA  3001               	movlw	1
  3000  0CDB  07B8               	addwf	_t,f
  3001  0CDC  1803               	skipnc
  3002  0CDD  0AB9               	incf	_t+1,f
  3003  0CDE  3000               	movlw	0
  3004  0CDF  07B9               	addwf	_t+1,f
  3005                           
  3006                           ;Button_src.c: 73:                     t = modulus_func(t,10);
  3007  0CE0  0839               	movf	_t+1,w
  3008  0CE1  00F8               	movwf	modulus_func@x+1
  3009  0CE2  0838               	movf	_t,w
  3010  0CE3  00F7               	movwf	modulus_func@x
  3011  0CE4  300A               	movlw	10
  3012  0CE5  00F9               	movwf	modulus_func@y
  3013  0CE6  3000               	movlw	0
  3014  0CE7  00FA               	movwf	modulus_func@y+1
  3015  0CE8  160A  118A  21FF  120A  158A  	fcall	_modulus_func
  3016  0CED  0878               	movf	?_modulus_func+1,w
  3017  0CEE  00B9               	movwf	_t+1
  3018  0CEF  0877               	movf	?_modulus_func,w
  3019  0CF0  00B8               	movwf	_t
  3020                           
  3021                           ;Button_src.c: 74:                    if (p == 1){
  3022  0CF1  0328               	decf	_p,w
  3023  0CF2  0429               	iorwf	_p+1,w
  3024  0CF3  1D03               	btfss	3,2
  3025  0CF4  2D0E               	goto	l4240
  3026                           
  3027                           ;Button_src.c: 75:                         w = incrementor(w,t,'0');
  3028  0CF5  0837               	movf	_w+1,w
  3029  0CF6  00E1               	movwf	incrementor@upper_val+1
  3030  0CF7  0836               	movf	_w,w
  3031  0CF8  00E0               	movwf	incrementor@upper_val
  3032  0CF9  0839               	movf	_t+1,w
  3033  0CFA  00E3               	movwf	incrementor@lower_val+1
  3034  0CFB  0838               	movf	_t,w
  3035  0CFC  00E2               	movwf	incrementor@lower_val
  3036  0CFD  3030               	movlw	48
  3037  0CFE  00E5               	movwf	??_thermometer_threshhold_settings
  3038  0CFF  0865               	movf	??_thermometer_threshhold_settings,w
  3039  0D00  00E4               	movwf	incrementor@z
  3040  0D01  160A  118A  2343  120A  158A  	fcall	_incrementor
  3041  0D06  00E6               	movwf	??_thermometer_threshhold_settings+1
  3042  0D07  01E7               	clrf	??_thermometer_threshhold_settings+2
  3043  0D08  0866               	movf	??_thermometer_threshhold_settings+1,w
  3044  0D09  00B6               	movwf	_w
  3045  0D0A  0867               	movf	??_thermometer_threshhold_settings+2,w
  3046  0D0B  00B7               	movwf	_w+1
  3047                           
  3048                           ;Button_src.c: 76:                         p = 0;
  3049  0D0C  01A8               	clrf	_p
  3050  0D0D  01A9               	clrf	_p+1
  3051  0D0E                     l4240:	
  3052                           
  3053                           ;Button_src.c: 78:                     if (t == 9){
  3054  0D0E  3009               	movlw	9
  3055  0D0F  0638               	xorwf	_t,w
  3056  0D10  0439               	iorwf	_t+1,w
  3057  0D11  1D03               	btfss	3,2
  3058  0D12  2D17               	goto	l4244
  3059                           
  3060                           ;Button_src.c: 79:                         p = 1;
  3061  0D13  3001               	movlw	1
  3062  0D14  00A8               	movwf	_p
  3063  0D15  3000               	movlw	0
  3064  0D16  00A9               	movwf	_p+1
  3065  0D17                     l4244:	
  3066                           
  3067                           ;Button_src.c: 81:                     button_delay();
  3068  0D17  160A  118A  2234  120A  158A  	fcall	_button_delay
  3069  0D1C                     l4246:	
  3070                           
  3071                           ;Button_src.c: 83:             RC0 = 1;
  3072  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0D1E  1407               	bsf	7,0	;volatile
  3075                           
  3076                           ;Button_src.c: 84:             RC1 = 0;
  3077  0D1F  1087               	bcf	7,1	;volatile
  3078                           
  3079                           ;Button_src.c: 85:             RC2 = 1;
  3080  0D20  1507               	bsf	7,2	;volatile
  3081                           
  3082                           ;Button_src.c: 86:             RC3 = 1;
  3083  0D21  1587               	bsf	7,3	;volatile
  3084                           
  3085                           ;Button_src.c: 87:             if(RC7==0 && b == 'z'){
  3086  0D22  1B87               	btfsc	7,7	;volatile
  3087  0D23  2D6A               	goto	l4274
  3088  0D24  307A               	movlw	122
  3089  0D25  0649               	xorwf	_b,w
  3090  0D26  1D03               	btfss	3,2
  3091  0D27  2D6A               	goto	l4274
  3092                           
  3093                           ;Button_src.c: 88:                     night_lower_lower++;
  3094  0D28  3001               	movlw	1
  3095  0D29  07A4               	addwf	_night_lower_lower,f
  3096  0D2A  1803               	skipnc
  3097  0D2B  0AA5               	incf	_night_lower_lower+1,f
  3098  0D2C  3000               	movlw	0
  3099  0D2D  07A5               	addwf	_night_lower_lower+1,f
  3100                           
  3101                           ;Button_src.c: 89:                     night_lower_lower = modulus_func(night_lower_lowe
      +                          r,10);
  3102  0D2E  0825               	movf	_night_lower_lower+1,w
  3103  0D2F  00F8               	movwf	modulus_func@x+1
  3104  0D30  0824               	movf	_night_lower_lower,w
  3105  0D31  00F7               	movwf	modulus_func@x
  3106  0D32  300A               	movlw	10
  3107  0D33  00F9               	movwf	modulus_func@y
  3108  0D34  3000               	movlw	0
  3109  0D35  00FA               	movwf	modulus_func@y+1
  3110  0D36  160A  118A  21FF  120A  158A  	fcall	_modulus_func
  3111  0D3B  0878               	movf	?_modulus_func+1,w
  3112  0D3C  00A5               	movwf	_night_lower_lower+1
  3113  0D3D  0877               	movf	?_modulus_func,w
  3114  0D3E  00A4               	movwf	_night_lower_lower
  3115                           
  3116                           ;Button_src.c: 90:                    if (p == 1){
  3117  0D3F  0328               	decf	_p,w
  3118  0D40  0429               	iorwf	_p+1,w
  3119  0D41  1D03               	btfss	3,2
  3120  0D42  2D5C               	goto	l4268
  3121                           
  3122                           ;Button_src.c: 91:                         night_lower_upper = incrementor(night_lower_u
      +                          pper,night_lower_lower,'0');
  3123  0D43  0827               	movf	_night_lower_upper+1,w
  3124  0D44  00E1               	movwf	incrementor@upper_val+1
  3125  0D45  0826               	movf	_night_lower_upper,w
  3126  0D46  00E0               	movwf	incrementor@upper_val
  3127  0D47  0825               	movf	_night_lower_lower+1,w
  3128  0D48  00E3               	movwf	incrementor@lower_val+1
  3129  0D49  0824               	movf	_night_lower_lower,w
  3130  0D4A  00E2               	movwf	incrementor@lower_val
  3131  0D4B  3030               	movlw	48
  3132  0D4C  00E5               	movwf	??_thermometer_threshhold_settings
  3133  0D4D  0865               	movf	??_thermometer_threshhold_settings,w
  3134  0D4E  00E4               	movwf	incrementor@z
  3135  0D4F  160A  118A  2343  120A  158A  	fcall	_incrementor
  3136  0D54  00E6               	movwf	??_thermometer_threshhold_settings+1
  3137  0D55  01E7               	clrf	??_thermometer_threshhold_settings+2
  3138  0D56  0866               	movf	??_thermometer_threshhold_settings+1,w
  3139  0D57  00A6               	movwf	_night_lower_upper
  3140  0D58  0867               	movf	??_thermometer_threshhold_settings+2,w
  3141  0D59  00A7               	movwf	_night_lower_upper+1
  3142                           
  3143                           ;Button_src.c: 92:                         p = 0;
  3144  0D5A  01A8               	clrf	_p
  3145  0D5B  01A9               	clrf	_p+1
  3146  0D5C                     l4268:	
  3147                           
  3148                           ;Button_src.c: 94:                     if (night_lower_lower == 9){
  3149  0D5C  3009               	movlw	9
  3150  0D5D  0624               	xorwf	_night_lower_lower,w
  3151  0D5E  0425               	iorwf	_night_lower_lower+1,w
  3152  0D5F  1D03               	btfss	3,2
  3153  0D60  2D65               	goto	l4272
  3154                           
  3155                           ;Button_src.c: 95:                         p = 1;
  3156  0D61  3001               	movlw	1
  3157  0D62  00A8               	movwf	_p
  3158  0D63  3000               	movlw	0
  3159  0D64  00A9               	movwf	_p+1
  3160  0D65                     l4272:	
  3161                           
  3162                           ;Button_src.c: 97:                     button_delay();
  3163  0D65  160A  118A  2234  120A  158A  	fcall	_button_delay
  3164  0D6A                     l4274:	
  3165                           
  3166                           ;Button_src.c: 99:             RC0 = 1;
  3167  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  3168  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  3169  0D6C  1407               	bsf	7,0	;volatile
  3170                           
  3171                           ;Button_src.c: 100:             RC1 = 0;
  3172  0D6D  1087               	bcf	7,1	;volatile
  3173                           
  3174                           ;Button_src.c: 101:             RC2 = 1;
  3175  0D6E  1507               	bsf	7,2	;volatile
  3176                           
  3177                           ;Button_src.c: 102:             RC3 = 1;
  3178  0D6F  1587               	bsf	7,3	;volatile
  3179                           
  3180                           ;Button_src.c: 103:             if(RC7==0 && b == 'a'){
  3181  0D70  1B87               	btfsc	7,7	;volatile
  3182  0D71  2DB8               	goto	l4302
  3183  0D72  3061               	movlw	97
  3184  0D73  0649               	xorwf	_b,w
  3185  0D74  1D03               	btfss	3,2
  3186  0D75  2DB8               	goto	l4302
  3187                           
  3188                           ;Button_src.c: 104:                     day_lower_lower++;
  3189  0D76  3001               	movlw	1
  3190  0D77  07A0               	addwf	_day_lower_lower,f
  3191  0D78  1803               	skipnc
  3192  0D79  0AA1               	incf	_day_lower_lower+1,f
  3193  0D7A  3000               	movlw	0
  3194  0D7B  07A1               	addwf	_day_lower_lower+1,f
  3195                           
  3196                           ;Button_src.c: 105:                     day_lower_lower = modulus_func(day_lower_lower,1
      +                          0);
  3197  0D7C  0821               	movf	_day_lower_lower+1,w
  3198  0D7D  00F8               	movwf	modulus_func@x+1
  3199  0D7E  0820               	movf	_day_lower_lower,w
  3200  0D7F  00F7               	movwf	modulus_func@x
  3201  0D80  300A               	movlw	10
  3202  0D81  00F9               	movwf	modulus_func@y
  3203  0D82  3000               	movlw	0
  3204  0D83  00FA               	movwf	modulus_func@y+1
  3205  0D84  160A  118A  21FF  120A  158A  	fcall	_modulus_func
  3206  0D89  0878               	movf	?_modulus_func+1,w
  3207  0D8A  00A1               	movwf	_day_lower_lower+1
  3208  0D8B  0877               	movf	?_modulus_func,w
  3209  0D8C  00A0               	movwf	_day_lower_lower
  3210                           
  3211                           ;Button_src.c: 106:                    if (p == 1){
  3212  0D8D  0328               	decf	_p,w
  3213  0D8E  0429               	iorwf	_p+1,w
  3214  0D8F  1D03               	btfss	3,2
  3215  0D90  2DAA               	goto	l4296
  3216                           
  3217                           ;Button_src.c: 107:                         day_lower_upper = incrementor(day_lower_uppe
      +                          r,day_lower_lower,'0');
  3218  0D91  0823               	movf	_day_lower_upper+1,w
  3219  0D92  00E1               	movwf	incrementor@upper_val+1
  3220  0D93  0822               	movf	_day_lower_upper,w
  3221  0D94  00E0               	movwf	incrementor@upper_val
  3222  0D95  0821               	movf	_day_lower_lower+1,w
  3223  0D96  00E3               	movwf	incrementor@lower_val+1
  3224  0D97  0820               	movf	_day_lower_lower,w
  3225  0D98  00E2               	movwf	incrementor@lower_val
  3226  0D99  3030               	movlw	48
  3227  0D9A  00E5               	movwf	??_thermometer_threshhold_settings
  3228  0D9B  0865               	movf	??_thermometer_threshhold_settings,w
  3229  0D9C  00E4               	movwf	incrementor@z
  3230  0D9D  160A  118A  2343  120A  158A  	fcall	_incrementor
  3231  0DA2  00E6               	movwf	??_thermometer_threshhold_settings+1
  3232  0DA3  01E7               	clrf	??_thermometer_threshhold_settings+2
  3233  0DA4  0866               	movf	??_thermometer_threshhold_settings+1,w
  3234  0DA5  00A2               	movwf	_day_lower_upper
  3235  0DA6  0867               	movf	??_thermometer_threshhold_settings+2,w
  3236  0DA7  00A3               	movwf	_day_lower_upper+1
  3237                           
  3238                           ;Button_src.c: 108:                         p = 0;
  3239  0DA8  01A8               	clrf	_p
  3240  0DA9  01A9               	clrf	_p+1
  3241  0DAA                     l4296:	
  3242                           
  3243                           ;Button_src.c: 110:                     if (day_lower_lower == 9){
  3244  0DAA  3009               	movlw	9
  3245  0DAB  0620               	xorwf	_day_lower_lower,w
  3246  0DAC  0421               	iorwf	_day_lower_lower+1,w
  3247  0DAD  1D03               	btfss	3,2
  3248  0DAE  2DB3               	goto	l4300
  3249                           
  3250                           ;Button_src.c: 111:                         p = 1;
  3251  0DAF  3001               	movlw	1
  3252  0DB0  00A8               	movwf	_p
  3253  0DB1  3000               	movlw	0
  3254  0DB2  00A9               	movwf	_p+1
  3255  0DB3                     l4300:	
  3256                           
  3257                           ;Button_src.c: 113:                     button_delay();
  3258  0DB3  160A  118A  2234  120A  158A  	fcall	_button_delay
  3259  0DB8                     l4302:	
  3260                           
  3261                           ;Button_src.c: 115:             RC0 = 1;
  3262  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  3263  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
  3264  0DBA  1407               	bsf	7,0	;volatile
  3265                           
  3266                           ;Button_src.c: 116:             RC1 = 0;
  3267  0DBB  1087               	bcf	7,1	;volatile
  3268                           
  3269                           ;Button_src.c: 117:             RC2 = 1;
  3270  0DBC  1507               	bsf	7,2	;volatile
  3271                           
  3272                           ;Button_src.c: 118:             RC3 = 1;
  3273  0DBD  1587               	bsf	7,3	;volatile
  3274                           
  3275                           ;Button_src.c: 119:             z = modulus_func(z,4);
  3276  0DBE  0831               	movf	_z+1,w
  3277  0DBF  00F8               	movwf	modulus_func@x+1
  3278  0DC0  0830               	movf	_z,w
  3279  0DC1  00F7               	movwf	modulus_func@x
  3280  0DC2  3004               	movlw	4
  3281  0DC3  00F9               	movwf	modulus_func@y
  3282  0DC4  3000               	movlw	0
  3283  0DC5  00FA               	movwf	modulus_func@y+1
  3284  0DC6  160A  118A  21FF  120A  158A  	fcall	_modulus_func
  3285  0DCB  0878               	movf	?_modulus_func+1,w
  3286  0DCC  00B1               	movwf	_z+1
  3287  0DCD  0877               	movf	?_modulus_func,w
  3288  0DCE  00B0               	movwf	_z
  3289                           
  3290                           ;Button_src.c: 120:             if(RC4 == 0 && z ==0){
  3291  0DCF  1A07               	btfsc	7,4	;volatile
  3292  0DD0  2E20               	goto	l4340
  3293  0DD1  0830               	movf	_z,w
  3294  0DD2  0431               	iorwf	_z+1,w
  3295  0DD3  1D03               	btfss	3,2
  3296  0DD4  2E20               	goto	l4340
  3297                           
  3298                           ;Button_src.c: 121:             z++;
  3299  0DD5  3001               	movlw	1
  3300  0DD6  07B0               	addwf	_z,f
  3301  0DD7  1803               	skipnc
  3302  0DD8  0AB1               	incf	_z+1,f
  3303  0DD9  3000               	movlw	0
  3304  0DDA  07B1               	addwf	_z+1,f
  3305                           
  3306                           ;Button_src.c: 122:             write_cmd(0x90);
  3307  0DDB  3090               	movlw	144
  3308  0DDC  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3309                           
  3310                           ;Button_src.c: 123:             write_char('D');
  3311  0DE1  3044               	movlw	68
  3312  0DE2  160A  118A  2270  120A  158A  	fcall	_write_char
  3313                           
  3314                           ;Button_src.c: 124:             write_char('a');
  3315  0DE7  3061               	movlw	97
  3316  0DE8  160A  118A  2270  120A  158A  	fcall	_write_char
  3317                           
  3318                           ;Button_src.c: 125:             write_char('y');
  3319  0DED  3079               	movlw	121
  3320  0DEE  160A  118A  2270  120A  158A  	fcall	_write_char
  3321                           
  3322                           ;Button_src.c: 126:             write_char('(');
  3323  0DF3  3028               	movlw	40
  3324  0DF4  160A  118A  2270  120A  158A  	fcall	_write_char
  3325                           
  3326                           ;Button_src.c: 127:             write_char('U');
  3327  0DF9  3055               	movlw	85
  3328  0DFA  160A  118A  2270  120A  158A  	fcall	_write_char
  3329                           
  3330                           ;Button_src.c: 128:             write_char(')');
  3331  0DFF  3029               	movlw	41
  3332  0E00  160A  118A  2270  120A  158A  	fcall	_write_char
  3333                           
  3334                           ;Button_src.c: 129:             write_char(':');
  3335  0E05  303A               	movlw	58
  3336  0E06  160A  118A  2270  120A  158A  	fcall	_write_char
  3337                           
  3338                           ;Button_src.c: 130:             write_char(' ');
  3339  0E0B  3020               	movlw	32
  3340  0E0C  160A  118A  2270  120A  158A  	fcall	_write_char
  3341                           
  3342                           ;Button_src.c: 131:             write_char(' ');
  3343  0E11  3020               	movlw	32
  3344  0E12  160A  118A  2270  120A  158A  	fcall	_write_char
  3345                           
  3346                           ;Button_src.c: 134:             b = 'x';
  3347  0E17  3078               	movlw	120
  3348  0E18  00E5               	movwf	??_thermometer_threshhold_settings
  3349  0E19  0865               	movf	??_thermometer_threshhold_settings,w
  3350  0E1A  00C9               	movwf	_b
  3351                           
  3352                           ;Button_src.c: 135:             button_delay();
  3353  0E1B  160A  118A  2234  120A  158A  	fcall	_button_delay
  3354  0E20                     l4340:	
  3355                           
  3356                           ;Button_src.c: 137:             RC0 = 1;
  3357  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0E22  1407               	bsf	7,0	;volatile
  3360                           
  3361                           ;Button_src.c: 138:             RC1 = 0;
  3362  0E23  1087               	bcf	7,1	;volatile
  3363                           
  3364                           ;Button_src.c: 139:             RC2 = 1;
  3365  0E24  1507               	bsf	7,2	;volatile
  3366                           
  3367                           ;Button_src.c: 140:             RC3 = 1;
  3368  0E25  1587               	bsf	7,3	;volatile
  3369                           
  3370                           ;Button_src.c: 141:             if(RC4 == 0 && z ==1){
  3371  0E26  1A07               	btfsc	7,4	;volatile
  3372  0E27  2E77               	goto	l4358
  3373  0E28  0330               	decf	_z,w
  3374  0E29  0431               	iorwf	_z+1,w
  3375  0E2A  1D03               	btfss	3,2
  3376  0E2B  2E77               	goto	l4358
  3377                           
  3378                           ;Button_src.c: 142:             write_cmd(0x90);
  3379  0E2C  3090               	movlw	144
  3380  0E2D  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3381                           
  3382                           ;Button_src.c: 143:             write_char('N');
  3383  0E32  304E               	movlw	78
  3384  0E33  160A  118A  2270  120A  158A  	fcall	_write_char
  3385                           
  3386                           ;Button_src.c: 144:             write_char('i');
  3387  0E38  3069               	movlw	105
  3388  0E39  160A  118A  2270  120A  158A  	fcall	_write_char
  3389                           
  3390                           ;Button_src.c: 145:             write_char('g');
  3391  0E3E  3067               	movlw	103
  3392  0E3F  160A  118A  2270  120A  158A  	fcall	_write_char
  3393                           
  3394                           ;Button_src.c: 146:             write_char('h');
  3395  0E44  3068               	movlw	104
  3396  0E45  160A  118A  2270  120A  158A  	fcall	_write_char
  3397                           
  3398                           ;Button_src.c: 147:             write_char('t');
  3399  0E4A  3074               	movlw	116
  3400  0E4B  160A  118A  2270  120A  158A  	fcall	_write_char
  3401                           
  3402                           ;Button_src.c: 148:             write_char('(');
  3403  0E50  3028               	movlw	40
  3404  0E51  160A  118A  2270  120A  158A  	fcall	_write_char
  3405                           
  3406                           ;Button_src.c: 149:             write_char('U');
  3407  0E56  3055               	movlw	85
  3408  0E57  160A  118A  2270  120A  158A  	fcall	_write_char
  3409                           
  3410                           ;Button_src.c: 150:             write_char(')');
  3411  0E5C  3029               	movlw	41
  3412  0E5D  160A  118A  2270  120A  158A  	fcall	_write_char
  3413                           
  3414                           ;Button_src.c: 151:             write_char(':');
  3415  0E62  303A               	movlw	58
  3416  0E63  160A  118A  2270  120A  158A  	fcall	_write_char
  3417                           
  3418                           ;Button_src.c: 154:             b = 'y';
  3419  0E68  3079               	movlw	121
  3420  0E69  00E5               	movwf	??_thermometer_threshhold_settings
  3421  0E6A  0865               	movf	??_thermometer_threshhold_settings,w
  3422  0E6B  00C9               	movwf	_b
  3423                           
  3424                           ;Button_src.c: 155:             z++;
  3425  0E6C  3001               	movlw	1
  3426  0E6D  07B0               	addwf	_z,f
  3427  0E6E  1803               	skipnc
  3428  0E6F  0AB1               	incf	_z+1,f
  3429  0E70  3000               	movlw	0
  3430  0E71  07B1               	addwf	_z+1,f
  3431                           
  3432                           ;Button_src.c: 156:             button_delay();
  3433  0E72  160A  118A  2234  120A  158A  	fcall	_button_delay
  3434  0E77                     l4358:	
  3435                           
  3436                           ;Button_src.c: 158:             RC0 = 1;
  3437  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0E79  1407               	bsf	7,0	;volatile
  3440                           
  3441                           ;Button_src.c: 159:             RC1 = 0;
  3442  0E7A  1087               	bcf	7,1	;volatile
  3443                           
  3444                           ;Button_src.c: 160:             RC2 = 1;
  3445  0E7B  1507               	bsf	7,2	;volatile
  3446                           
  3447                           ;Button_src.c: 161:             RC3 = 1;
  3448  0E7C  1587               	bsf	7,3	;volatile
  3449                           
  3450                           ;Button_src.c: 162:             if(RC4 == 0 && z ==2){
  3451  0E7D  1A07               	btfsc	7,4	;volatile
  3452  0E7E  2ECF               	goto	l4376
  3453  0E7F  3002               	movlw	2
  3454  0E80  0630               	xorwf	_z,w
  3455  0E81  0431               	iorwf	_z+1,w
  3456  0E82  1D03               	btfss	3,2
  3457  0E83  2ECF               	goto	l4376
  3458                           
  3459                           ;Button_src.c: 163:             write_cmd(0x90);
  3460  0E84  3090               	movlw	144
  3461  0E85  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3462                           
  3463                           ;Button_src.c: 164:             write_char('N');
  3464  0E8A  304E               	movlw	78
  3465  0E8B  160A  118A  2270  120A  158A  	fcall	_write_char
  3466                           
  3467                           ;Button_src.c: 165:             write_char('i');
  3468  0E90  3069               	movlw	105
  3469  0E91  160A  118A  2270  120A  158A  	fcall	_write_char
  3470                           
  3471                           ;Button_src.c: 166:             write_char('g');
  3472  0E96  3067               	movlw	103
  3473  0E97  160A  118A  2270  120A  158A  	fcall	_write_char
  3474                           
  3475                           ;Button_src.c: 167:             write_char('h');
  3476  0E9C  3068               	movlw	104
  3477  0E9D  160A  118A  2270  120A  158A  	fcall	_write_char
  3478                           
  3479                           ;Button_src.c: 168:             write_char('t');
  3480  0EA2  3074               	movlw	116
  3481  0EA3  160A  118A  2270  120A  158A  	fcall	_write_char
  3482                           
  3483                           ;Button_src.c: 169:             write_char('(');
  3484  0EA8  3028               	movlw	40
  3485  0EA9  160A  118A  2270  120A  158A  	fcall	_write_char
  3486                           
  3487                           ;Button_src.c: 170:             write_char('L');
  3488  0EAE  304C               	movlw	76
  3489  0EAF  160A  118A  2270  120A  158A  	fcall	_write_char
  3490                           
  3491                           ;Button_src.c: 171:             write_char(')');
  3492  0EB4  3029               	movlw	41
  3493  0EB5  160A  118A  2270  120A  158A  	fcall	_write_char
  3494                           
  3495                           ;Button_src.c: 172:             write_char(':');
  3496  0EBA  303A               	movlw	58
  3497  0EBB  160A  118A  2270  120A  158A  	fcall	_write_char
  3498                           
  3499                           ;Button_src.c: 175:             b = 'z';
  3500  0EC0  307A               	movlw	122
  3501  0EC1  00E5               	movwf	??_thermometer_threshhold_settings
  3502  0EC2  0865               	movf	??_thermometer_threshhold_settings,w
  3503  0EC3  00C9               	movwf	_b
  3504                           
  3505                           ;Button_src.c: 176:             z++;
  3506  0EC4  3001               	movlw	1
  3507  0EC5  07B0               	addwf	_z,f
  3508  0EC6  1803               	skipnc
  3509  0EC7  0AB1               	incf	_z+1,f
  3510  0EC8  3000               	movlw	0
  3511  0EC9  07B1               	addwf	_z+1,f
  3512                           
  3513                           ;Button_src.c: 177:             button_delay();
  3514  0ECA  160A  118A  2234  120A  158A  	fcall	_button_delay
  3515  0ECF                     l4376:	
  3516                           
  3517                           ;Button_src.c: 179:             if(RC4 == 0 && z ==3){
  3518  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0ED1  1A07               	btfsc	7,4	;volatile
  3521  0ED2  2F23               	goto	l4404
  3522  0ED3  3003               	movlw	3
  3523  0ED4  0630               	xorwf	_z,w
  3524  0ED5  0431               	iorwf	_z+1,w
  3525  0ED6  1D03               	btfss	3,2
  3526  0ED7  2F23               	goto	l4404
  3527                           
  3528                           ;Button_src.c: 180:             z++;
  3529  0ED8  3001               	movlw	1
  3530  0ED9  07B0               	addwf	_z,f
  3531  0EDA  1803               	skipnc
  3532  0EDB  0AB1               	incf	_z+1,f
  3533  0EDC  3000               	movlw	0
  3534  0EDD  07B1               	addwf	_z+1,f
  3535                           
  3536                           ;Button_src.c: 181:             write_cmd(0x90);
  3537  0EDE  3090               	movlw	144
  3538  0EDF  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3539                           
  3540                           ;Button_src.c: 182:             write_char('D');
  3541  0EE4  3044               	movlw	68
  3542  0EE5  160A  118A  2270  120A  158A  	fcall	_write_char
  3543                           
  3544                           ;Button_src.c: 183:             write_char('a');
  3545  0EEA  3061               	movlw	97
  3546  0EEB  160A  118A  2270  120A  158A  	fcall	_write_char
  3547                           
  3548                           ;Button_src.c: 184:             write_char('y');
  3549  0EF0  3079               	movlw	121
  3550  0EF1  160A  118A  2270  120A  158A  	fcall	_write_char
  3551                           
  3552                           ;Button_src.c: 185:             write_char('(');
  3553  0EF6  3028               	movlw	40
  3554  0EF7  160A  118A  2270  120A  158A  	fcall	_write_char
  3555                           
  3556                           ;Button_src.c: 186:             write_char('L');
  3557  0EFC  304C               	movlw	76
  3558  0EFD  160A  118A  2270  120A  158A  	fcall	_write_char
  3559                           
  3560                           ;Button_src.c: 187:             write_char(')');
  3561  0F02  3029               	movlw	41
  3562  0F03  160A  118A  2270  120A  158A  	fcall	_write_char
  3563                           
  3564                           ;Button_src.c: 188:             write_char(':');
  3565  0F08  303A               	movlw	58
  3566  0F09  160A  118A  2270  120A  158A  	fcall	_write_char
  3567                           
  3568                           ;Button_src.c: 189:             write_char(' ');
  3569  0F0E  3020               	movlw	32
  3570  0F0F  160A  118A  2270  120A  158A  	fcall	_write_char
  3571                           
  3572                           ;Button_src.c: 190:             write_char(' ');
  3573  0F14  3020               	movlw	32
  3574  0F15  160A  118A  2270  120A  158A  	fcall	_write_char
  3575                           
  3576                           ;Button_src.c: 193:             b = 'a';
  3577  0F1A  3061               	movlw	97
  3578  0F1B  00E5               	movwf	??_thermometer_threshhold_settings
  3579  0F1C  0865               	movf	??_thermometer_threshhold_settings,w
  3580  0F1D  00C9               	movwf	_b
  3581                           
  3582                           ;Button_src.c: 194:             button_delay();
  3583  0F1E  160A  118A  2234  120A  158A  	fcall	_button_delay
  3584  0F23                     l4404:	
  3585                           
  3586                           ;Button_src.c: 196:             write_cmd(0x88);
  3587  0F23  3088               	movlw	136
  3588  0F24  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3589                           
  3590                           ;Button_src.c: 197:             write_char('T');
  3591  0F29  3054               	movlw	84
  3592  0F2A  160A  118A  2270  120A  158A  	fcall	_write_char
  3593                           
  3594                           ;Button_src.c: 198:             write_char('1');
  3595  0F2F  3031               	movlw	49
  3596  0F30  160A  118A  2270  120A  158A  	fcall	_write_char
  3597                           
  3598                           ;Button_src.c: 199:             write_char(':');
  3599  0F35  303A               	movlw	58
  3600  0F36  160A  118A  2270  120A  158A  	fcall	_write_char
  3601                           
  3602                           ;Button_src.c: 200:             write_char(y + '0');
  3603  0F3B  0832               	movf	_y,w
  3604  0F3C  3E30               	addlw	48
  3605  0F3D  160A  118A  2270  120A  158A  	fcall	_write_char
  3606                           
  3607                           ;Button_src.c: 201:             write_char(x + '0');
  3608  0F42  0834               	movf	_x,w
  3609  0F43  3E30               	addlw	48
  3610  0F44  160A  118A  2270  120A  158A  	fcall	_write_char
  3611                           
  3612                           ;Button_src.c: 202:             write_char('T');
  3613  0F49  3054               	movlw	84
  3614  0F4A  160A  118A  2270  120A  158A  	fcall	_write_char
  3615                           
  3616                           ;Button_src.c: 203:             write_char('2');
  3617  0F4F  3032               	movlw	50
  3618  0F50  160A  118A  2270  120A  158A  	fcall	_write_char
  3619                           
  3620                           ;Button_src.c: 204:             write_char(':');
  3621  0F55  303A               	movlw	58
  3622  0F56  160A  118A  2270  120A  158A  	fcall	_write_char
  3623                           
  3624                           ;Button_src.c: 205:             write_char(w + '0');
  3625  0F5B  0836               	movf	_w,w
  3626  0F5C  3E30               	addlw	48
  3627  0F5D  160A  118A  2270  120A  158A  	fcall	_write_char
  3628                           
  3629                           ;Button_src.c: 206:             write_char(t + '0');
  3630  0F62  0838               	movf	_t,w
  3631  0F63  3E30               	addlw	48
  3632  0F64  160A  118A  2270  120A  158A  	fcall	_write_char
  3633                           
  3634                           ;Button_src.c: 207:             write_char('T');
  3635  0F69  3054               	movlw	84
  3636  0F6A  160A  118A  2270  120A  158A  	fcall	_write_char
  3637                           
  3638                           ;Button_src.c: 208:             write_char('3');
  3639  0F6F  3033               	movlw	51
  3640  0F70  160A  118A  2270  120A  158A  	fcall	_write_char
  3641                           
  3642                           ;Button_src.c: 209:             write_char(':');
  3643  0F75  303A               	movlw	58
  3644  0F76  160A  118A  2270  120A  158A  	fcall	_write_char
  3645                           
  3646                           ;Button_src.c: 210:             write_char(night_lower_upper + '0');
  3647  0F7B  0826               	movf	_night_lower_upper,w
  3648  0F7C  3E30               	addlw	48
  3649  0F7D  160A  118A  2270  120A  158A  	fcall	_write_char
  3650                           
  3651                           ;Button_src.c: 211:             write_char(night_lower_lower + '0');
  3652  0F82  0824               	movf	_night_lower_lower,w
  3653  0F83  3E30               	addlw	48
  3654  0F84  160A  118A  2270  120A  158A  	fcall	_write_char
  3655                           
  3656                           ;Button_src.c: 212:             write_cmd(0x98);
  3657  0F89  3098               	movlw	152
  3658  0F8A  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3659                           
  3660                           ;Button_src.c: 213:             write_char('T');
  3661  0F8F  3054               	movlw	84
  3662  0F90  160A  118A  2270  120A  158A  	fcall	_write_char
  3663                           
  3664                           ;Button_src.c: 214:             write_char('4');
  3665  0F95  3034               	movlw	52
  3666  0F96  160A  118A  2270  120A  158A  	fcall	_write_char
  3667                           
  3668                           ;Button_src.c: 215:             write_char(':');
  3669  0F9B  303A               	movlw	58
  3670  0F9C  160A  118A  2270  120A  158A  	fcall	_write_char
  3671                           
  3672                           ;Button_src.c: 216:             write_char(day_lower_upper + '0');
  3673  0FA1  0822               	movf	_day_lower_upper,w
  3674  0FA2  3E30               	addlw	48
  3675  0FA3  160A  118A  2270  120A  158A  	fcall	_write_char
  3676                           
  3677                           ;Button_src.c: 217:             write_char(day_lower_lower + '0');
  3678  0FA8  0820               	movf	_day_lower_lower,w
  3679  0FA9  3E30               	addlw	48
  3680  0FAA  160A  118A  2270  120A  158A  	fcall	_write_char
  3681                           
  3682                           ;Button_src.c: 279:                 RC0 = 0;
  3683  0FAF  1007               	bcf	7,0	;volatile
  3684                           
  3685                           ;Button_src.c: 280:                 RC1 = 1;
  3686  0FB0  1487               	bsf	7,1	;volatile
  3687                           
  3688                           ;Button_src.c: 281:                 RC2 = 1;
  3689  0FB1  1507               	bsf	7,2	;volatile
  3690                           
  3691                           ;Button_src.c: 282:                 RC3 = 1;
  3692  0FB2  1587               	bsf	7,3	;volatile
  3693                           
  3694                           ;Button_src.c: 283:                     if(RC6 == 0){
  3695  0FB3  1B07               	btfsc	7,6	;volatile
  3696  0FB4  2FED               	goto	l778
  3697                           
  3698                           ;Button_src.c: 284:                         var1 = w;
  3699  0FB5  0836               	movf	_w,w
  3700  0FB6  00E5               	movwf	??_thermometer_threshhold_settings
  3701  0FB7  0865               	movf	??_thermometer_threshhold_settings,w
  3702  0FB8  00CF               	movwf	_var1
  3703                           
  3704                           ;Button_src.c: 285:                         var2 = t;
  3705  0FB9  0838               	movf	_t,w
  3706  0FBA  00E5               	movwf	??_thermometer_threshhold_settings
  3707  0FBB  0865               	movf	??_thermometer_threshhold_settings,w
  3708  0FBC  00CE               	movwf	_var2
  3709                           
  3710                           ;Button_src.c: 286:                         w = 0;
  3711  0FBD  01B6               	clrf	_w
  3712  0FBE  01B7               	clrf	_w+1
  3713                           
  3714                           ;Button_src.c: 287:                         t = 0;
  3715  0FBF  01B8               	clrf	_t
  3716  0FC0  01B9               	clrf	_t+1
  3717                           
  3718                           ;Button_src.c: 288:                         x = 0;
  3719  0FC1  01B4               	clrf	_x
  3720  0FC2  01B5               	clrf	_x+1
  3721                           
  3722                           ;Button_src.c: 289:                         t = 0;
  3723  0FC3  01B8               	clrf	_t
  3724  0FC4  01B9               	clrf	_t+1
  3725                           
  3726                           ;Button_src.c: 291:                         write_cmd(0x1);
  3727  0FC5  3001               	movlw	1
  3728  0FC6  160A  118A  2287  120A  158A  	fcall	_write_cmd
  3729                           
  3730                           ;Button_src.c: 292:                         write_char('S');
  3731  0FCB  3053               	movlw	83
  3732  0FCC  160A  118A  2270  120A  158A  	fcall	_write_char
  3733                           
  3734                           ;Button_src.c: 293:                         write_char('A');
  3735  0FD1  3041               	movlw	65
  3736  0FD2  160A  118A  2270  120A  158A  	fcall	_write_char
  3737                           
  3738                           ;Button_src.c: 294:                         write_char('V');
  3739  0FD7  3056               	movlw	86
  3740  0FD8  160A  118A  2270  120A  158A  	fcall	_write_char
  3741                           
  3742                           ;Button_src.c: 295:                         write_char('E');
  3743  0FDD  3045               	movlw	69
  3744  0FDE  160A  118A  2270  120A  158A  	fcall	_write_char
  3745                           
  3746                           ;Button_src.c: 296:                         write_char('D');
  3747  0FE3  3044               	movlw	68
  3748  0FE4  160A  118A  2270  120A  158A  	fcall	_write_char
  3749                           
  3750                           ;Button_src.c: 297:                         button_delay();
  3751  0FE9  160A  118A  2234   	fcall	_button_delay
  3752  0FEC  0008               	return
  3753  0FED                     l778:	
  3754                           ;Button_src.c: 299:                     }
  3755                           
  3756                           
  3757                           ;Button_src.c: 300:             RC0 = 0;
  3758  0FED  1007               	bcf	7,0	;volatile
  3759                           
  3760                           ;Button_src.c: 301:             RC1 = 1;
  3761  0FEE  1487               	bsf	7,1	;volatile
  3762                           
  3763                           ;Button_src.c: 302:             RC2 = 1;
  3764  0FEF  1507               	bsf	7,2	;volatile
  3765                           
  3766                           ;Button_src.c: 303:             RC3 = 1;
  3767  0FF0  1587               	bsf	7,3	;volatile
  3768                           
  3769                           ;Button_src.c: 304:             if (RC7 == 0 ){
  3770  0FF1  1B87               	btfsc	7,7	;volatile
  3771  0FF2  2C3A               	goto	l761
  3772                           
  3773                           ;Button_src.c: 305:             write_cmd(0x1);
  3774  0FF3  3001               	movlw	1
  3775  0FF4  160A  118A  2287   	fcall	_write_cmd
  3776                           
  3777                           ;Button_src.c: 306:              w = 0;
  3778  0FF7  01B6               	clrf	_w
  3779  0FF8  01B7               	clrf	_w+1
  3780                           
  3781                           ;Button_src.c: 307:                         t = 0;
  3782  0FF9  01B8               	clrf	_t
  3783  0FFA  01B9               	clrf	_t+1
  3784                           
  3785                           ;Button_src.c: 308:                         x = 0;
  3786  0FFB  01B4               	clrf	_x
  3787  0FFC  01B5               	clrf	_x+1
  3788                           
  3789                           ;Button_src.c: 309:                         t = 0;
  3790  0FFD  01B8               	clrf	_t
  3791  0FFE  01B9               	clrf	_t+1
  3792  0FFF  0008               	return
  3793  1000                     __end_of_thermometer_threshhold_settings:	
  3794                           
  3795                           	psect	text3
  3796  15A5                     __ptext3:	
  3797 ;; *************** function _set_upper_threshold *****************
  3798 ;; Defined at:
  3799 ;;		line 4 in file "threshold_src.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  upper_val       2    3[COMMON] int 
  3802 ;;  lower_val       2    5[COMMON] int 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;		None
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  1    wreg      unsigned char 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3809 ;; Tracked objects:
  3810 ;;		On entry : 300/0
  3811 ;;		On exit  : 300/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3814 ;;      Params:         4       0       0       0       0
  3815 ;;      Locals:         0       0       0       0       0
  3816 ;;      Temps:          1       0       0       0       0
  3817 ;;      Totals:         5       0       0       0       0
  3818 ;;Total ram usage:        5 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    2
  3821 ;; This function calls:
  3822 ;;		_write_char
  3823 ;; This function is called by:
  3824 ;;		_main
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           
  3829                           ;psect for function _set_upper_threshold
  3830  15A5                     _set_upper_threshold:	
  3831                           
  3832                           ;threshold_src.c: 5:     if(shi >= upper_val && ge >= lower_val ){
  3833                           
  3834                           ;incstack = 0
  3835                           ; Regs used in _set_upper_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3836  15A5  0874               	movf	set_upper_threshold@upper_val+1,w
  3837  15A6  3A80               	xorlw	128
  3838  15A7  3C80               	sublw	128
  3839  15A8  1D03               	skipz
  3840  15A9  2DAC               	goto	u4185
  3841  15AA  0873               	movf	set_upper_threshold@upper_val,w
  3842  15AB  025B               	subwf	_shi,w
  3843  15AC                     u4185:	
  3844  15AC  1C03               	skipc
  3845  15AD  2DFA               	goto	l994
  3846  15AE  0876               	movf	set_upper_threshold@lower_val+1,w
  3847  15AF  3A80               	xorlw	128
  3848  15B0  3C80               	sublw	128
  3849  15B1  1D03               	skipz
  3850  15B2  2DB7               	goto	u4195
  3851  15B3  0875               	movf	set_upper_threshold@lower_val,w
  3852  15B4  1283               	bcf	3,5	;RP0=0, select bank0
  3853  15B5  1303               	bcf	3,6	;RP1=0, select bank0
  3854  15B6  025A               	subwf	_ge,w
  3855  15B7                     u4195:	
  3856  15B7  1C03               	skipc
  3857  15B8  2DFA               	goto	l994
  3858                           
  3859                           ;threshold_src.c: 6:     heat_counter ++;
  3860  15B9  3001               	movlw	1
  3861  15BA  1683               	bsf	3,5	;RP0=1, select bank1
  3862  15BB  1303               	bcf	3,6	;RP1=0, select bank1
  3863  15BC  07B9               	addwf	_heat_counter^(0+128),f
  3864  15BD  1803               	skipnc
  3865  15BE  0ABA               	incf	(_heat_counter+1)^(0+128),f
  3866  15BF  3000               	movlw	0
  3867  15C0  07BA               	addwf	(_heat_counter+1)^(0+128),f
  3868                           
  3869                           ;threshold_src.c: 7:     heater_state = '0';
  3870  15C1  3030               	movlw	48
  3871  15C2  00F7               	movwf	??_set_upper_threshold
  3872  15C3  0877               	movf	??_set_upper_threshold,w
  3873  15C4  1283               	bcf	3,5	;RP0=0, select bank0
  3874  15C5  00D1               	movwf	_heater_state
  3875                           
  3876                           ;threshold_src.c: 8:     cooler_state = '1';
  3877  15C6  3031               	movlw	49
  3878  15C7  00F7               	movwf	??_set_upper_threshold
  3879  15C8  0877               	movf	??_set_upper_threshold,w
  3880  15C9  00D0               	movwf	_cooler_state
  3881                           
  3882                           ;threshold_src.c: 9:     write_char('W');
  3883  15CA  3057               	movlw	87
  3884  15CB  160A  118A  2270  160A  118A  	fcall	_write_char
  3885                           
  3886                           ;threshold_src.c: 10:     write_char('A');
  3887  15D0  3041               	movlw	65
  3888  15D1  160A  118A  2270  160A  118A  	fcall	_write_char
  3889                           
  3890                           ;threshold_src.c: 11:     write_char('R');
  3891  15D6  3052               	movlw	82
  3892  15D7  160A  118A  2270  160A  118A  	fcall	_write_char
  3893                           
  3894                           ;threshold_src.c: 12:     write_char('M');
  3895  15DC  304D               	movlw	77
  3896  15DD  160A  118A  2270  160A  118A  	fcall	_write_char
  3897                           
  3898                           ;threshold_src.c: 13:     if(heat_counter > 1000){
  3899  15E2  3003               	movlw	3
  3900  15E3  1683               	bsf	3,5	;RP0=1, select bank1
  3901  15E4  023A               	subwf	(_heat_counter+1)^(0+128),w
  3902  15E5  30E9               	movlw	233
  3903  15E6  1903               	skipnz
  3904  15E7  0239               	subwf	_heat_counter^(0+128),w
  3905  15E8  1C03               	skipc
  3906  15E9  2DFA               	goto	l994
  3907                           
  3908                           ;threshold_src.c: 14:         cooler_state = '-';
  3909  15EA  302D               	movlw	45
  3910  15EB  00F7               	movwf	??_set_upper_threshold
  3911  15EC  0877               	movf	??_set_upper_threshold,w
  3912  15ED  1283               	bcf	3,5	;RP0=0, select bank0
  3913  15EE  00D0               	movwf	_cooler_state
  3914                           
  3915                           ;threshold_src.c: 15:         if(count == 2)
  3916  15EF  3002               	movlw	2
  3917  15F0  1683               	bsf	3,5	;RP0=1, select bank1
  3918  15F1  0635               	xorwf	_count^(0+128),w
  3919  15F2  0436               	iorwf	(_count+1)^(0+128),w
  3920  15F3  1D03               	btfss	3,2
  3921  15F4  2DFA               	goto	l994
  3922                           
  3923                           ;threshold_src.c: 16:         buzzer_watcher = 'w';
  3924  15F5  3077               	movlw	119
  3925  15F6  00F7               	movwf	??_set_upper_threshold
  3926  15F7  0877               	movf	??_set_upper_threshold,w
  3927  15F8  1283               	bcf	3,5	;RP0=0, select bank0
  3928  15F9  00D3               	movwf	_buzzer_watcher
  3929  15FA                     l994:	
  3930                           ;threshold_src.c: 18:     }
  3931                           
  3932                           
  3933                           ;threshold_src.c: 19:     return buzzer_watcher;
  3934  15FA  1283               	bcf	3,5	;RP0=0, select bank0
  3935  15FB  1303               	bcf	3,6	;RP1=0, select bank0
  3936  15FC  0853               	movf	_buzzer_watcher,w
  3937  15FD  0008               	return
  3938  15FE                     __end_of_set_upper_threshold:	
  3939                           
  3940                           	psect	text4
  3941  1510                     __ptext4:	
  3942 ;; *************** function _set_lower_threshold *****************
  3943 ;; Defined at:
  3944 ;;		line 41 in file "threshold_src.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  upper_val       2    3[COMMON] int 
  3947 ;;  lower_val       2    5[COMMON] int 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      unsigned char 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 300/0
  3956 ;;		On exit  : 300/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3959 ;;      Params:         4       0       0       0       0
  3960 ;;      Locals:         0       0       0       0       0
  3961 ;;      Temps:          1       0       0       0       0
  3962 ;;      Totals:         5       0       0       0       0
  3963 ;;Total ram usage:        5 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    2
  3966 ;; This function calls:
  3967 ;;		_write_char
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function _set_lower_threshold
  3975  1510                     _set_lower_threshold:	
  3976                           
  3977                           ;threshold_src.c: 42:     if((shi <= upper_val && ge <= lower_val))
  3978                           
  3979                           ;incstack = 0
  3980                           ; Regs used in _set_lower_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3981  1510  0874               	movf	set_lower_threshold@upper_val+1,w
  3982  1511  3A80               	xorlw	128
  3983  1512  00F7               	movwf	??_set_lower_threshold
  3984  1513  3080               	movlw	128
  3985  1514  0277               	subwf	??_set_lower_threshold,w
  3986  1515  1D03               	skipz
  3987  1516  2D19               	goto	u4165
  3988  1517  085B               	movf	_shi,w
  3989  1518  0273               	subwf	set_lower_threshold@upper_val,w
  3990  1519                     u4165:	
  3991  1519  1C03               	skipc
  3992  151A  2D56               	goto	l1007
  3993  151B  0876               	movf	set_lower_threshold@lower_val+1,w
  3994  151C  3A80               	xorlw	128
  3995  151D  00F7               	movwf	??_set_lower_threshold
  3996  151E  3080               	movlw	128
  3997  151F  0277               	subwf	??_set_lower_threshold,w
  3998  1520  1D03               	skipz
  3999  1521  2D26               	goto	u4175
  4000  1522  1283               	bcf	3,5	;RP0=0, select bank0
  4001  1523  1303               	bcf	3,6	;RP1=0, select bank0
  4002  1524  085A               	movf	_ge,w
  4003  1525  0275               	subwf	set_lower_threshold@lower_val,w
  4004  1526                     u4175:	
  4005  1526  1C03               	skipc
  4006  1527  2D56               	goto	l1007
  4007                           
  4008                           ;threshold_src.c: 43:     {;threshold_src.c: 44:     count = 2;
  4009  1528  3002               	movlw	2
  4010  1529  1683               	bsf	3,5	;RP0=1, select bank1
  4011  152A  1303               	bcf	3,6	;RP1=0, select bank1
  4012  152B  00B5               	movwf	_count^(0+128)
  4013  152C  3000               	movlw	0
  4014  152D  00B6               	movwf	(_count^(0+128)+1)
  4015                           
  4016                           ;threshold_src.c: 45:     buzzer_watcher = 'x';
  4017  152E  3078               	movlw	120
  4018  152F  00F7               	movwf	??_set_lower_threshold
  4019  1530  0877               	movf	??_set_lower_threshold,w
  4020  1531  1283               	bcf	3,5	;RP0=0, select bank0
  4021  1532  00D3               	movwf	_buzzer_watcher
  4022                           
  4023                           ;threshold_src.c: 46:     heater_state = '0';
  4024  1533  3030               	movlw	48
  4025  1534  00F7               	movwf	??_set_lower_threshold
  4026  1535  0877               	movf	??_set_lower_threshold,w
  4027  1536  00D1               	movwf	_heater_state
  4028                           
  4029                           ;threshold_src.c: 47:     cooler_state = '0';
  4030  1537  3030               	movlw	48
  4031  1538  00F7               	movwf	??_set_lower_threshold
  4032  1539  0877               	movf	??_set_lower_threshold,w
  4033  153A  00D0               	movwf	_cooler_state
  4034                           
  4035                           ;threshold_src.c: 48:     heat_counter = 0;
  4036  153B  1683               	bsf	3,5	;RP0=1, select bank1
  4037  153C  01B9               	clrf	_heat_counter^(0+128)
  4038  153D  01BA               	clrf	(_heat_counter+1)^(0+128)
  4039                           
  4040                           ;threshold_src.c: 49:     cold_counter = 0;
  4041  153E  01B7               	clrf	_cold_counter^(0+128)
  4042  153F  01B8               	clrf	(_cold_counter+1)^(0+128)
  4043                           
  4044                           ;threshold_src.c: 50:     write_char('O');
  4045  1540  304F               	movlw	79
  4046  1541  160A  118A  2270  160A  118A  	fcall	_write_char
  4047                           
  4048                           ;threshold_src.c: 51:     write_char('K');
  4049  1546  304B               	movlw	75
  4050  1547  160A  118A  2270  160A  118A  	fcall	_write_char
  4051                           
  4052                           ;threshold_src.c: 52:     write_char(' ');
  4053  154C  3020               	movlw	32
  4054  154D  160A  118A  2270  160A  118A  	fcall	_write_char
  4055                           
  4056                           ;threshold_src.c: 53:     write_char(' ');
  4057  1552  3020               	movlw	32
  4058  1553  160A  118A  2270   	fcall	_write_char
  4059  1556                     l1007:	
  4060                           ;threshold_src.c: 54:     }
  4061                           
  4062                           
  4063                           ;threshold_src.c: 55:     return buzzer_watcher;
  4064  1556  1283               	bcf	3,5	;RP0=0, select bank0
  4065  1557  1303               	bcf	3,6	;RP1=0, select bank0
  4066  1558  0853               	movf	_buzzer_watcher,w
  4067  1559  0008               	return
  4068  155A                     __end_of_set_lower_threshold:	
  4069                           
  4070                           	psect	text5
  4071  129E                     __ptext5:	
  4072 ;; *************** function _set_beep_threshhold *****************
  4073 ;; Defined at:
  4074 ;;		line 5 in file "buzzer_src.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  x               1    wreg     unsigned char 
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;  x               1    2[COMMON] unsigned char 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 300/0
  4085 ;;		On exit  : 300/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4088 ;;      Params:         0       0       0       0       0
  4089 ;;      Locals:         1       0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0
  4091 ;;      Totals:         1       0       0       0       0
  4092 ;;Total ram usage:        1 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    1
  4095 ;; This function calls:
  4096 ;;		_button_delay
  4097 ;; This function is called by:
  4098 ;;		_main
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           
  4103                           ;psect for function _set_beep_threshhold
  4104  129E                     _set_beep_threshhold:	
  4105                           
  4106                           ;incstack = 0
  4107                           ; Regs used in _set_beep_threshhold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4108                           ;set_beep_threshhold@x stored from wreg
  4109  129E  00F2               	movwf	set_beep_threshhold@x
  4110                           
  4111                           ;buzzer_src.c: 6:     if (x == 'w'){
  4112  129F  3077               	movlw	119
  4113  12A0  0672               	xorwf	set_beep_threshhold@x,w
  4114  12A1  1D03               	btfss	3,2
  4115  12A2  2AB7               	goto	l5066
  4116                           
  4117                           ;buzzer_src.c: 7:         RE2 = 1;
  4118  12A3  1509               	bsf	9,2	;volatile
  4119                           
  4120                           ;buzzer_src.c: 8:         button_delay();
  4121  12A4  160A  118A  2234  160A  118A  	fcall	_button_delay
  4122                           
  4123                           ;buzzer_src.c: 9:         RE2 = 0;
  4124  12A9  1283               	bcf	3,5	;RP0=0, select bank0
  4125  12AA  1303               	bcf	3,6	;RP1=0, select bank0
  4126  12AB  1109               	bcf	9,2	;volatile
  4127                           
  4128                           ;buzzer_src.c: 10:         button_delay();
  4129  12AC  160A  118A  2234  160A  118A  	fcall	_button_delay
  4130                           
  4131                           ;buzzer_src.c: 11:         RE2 = 1;
  4132  12B1  1283               	bcf	3,5	;RP0=0, select bank0
  4133  12B2  1303               	bcf	3,6	;RP1=0, select bank0
  4134  12B3  1509               	bsf	9,2	;volatile
  4135                           
  4136                           ;buzzer_src.c: 12:         button_delay();
  4137  12B4  160A  118A  2234   	fcall	_button_delay
  4138  12B7                     l5066:	
  4139                           
  4140                           ;buzzer_src.c: 13:         RE2 = 0;
  4141  12B7  1283               	bcf	3,5	;RP0=0, select bank0
  4142  12B8  1303               	bcf	3,6	;RP1=0, select bank0
  4143  12B9  1109               	bcf	9,2	;volatile
  4144  12BA  0008               	return
  4145  12BB                     __end_of_set_beep_threshhold:	
  4146                           
  4147                           	psect	text6
  4148  13E1                     __ptext6:	
  4149 ;; *************** function _reset_alarm *****************
  4150 ;; Defined at:
  4151 ;;		line 58 in file "threshold_src.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 300/0
  4162 ;;		On exit  : 300/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4165 ;;      Params:         0       0       0       0       0
  4166 ;;      Locals:         0       0       0       0       0
  4167 ;;      Temps:          1       0       0       0       0
  4168 ;;      Totals:         1       0       0       0       0
  4169 ;;Total ram usage:        1 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    2
  4172 ;; This function calls:
  4173 ;;		_write_char
  4174 ;; This function is called by:
  4175 ;;		_main
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _reset_alarm
  4181  13E1                     _reset_alarm:	
  4182                           
  4183                           ;threshold_src.c: 59:     RC0 = 1;
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _reset_alarm: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4187  13E1  1407               	bsf	7,0	;volatile
  4188                           
  4189                           ;threshold_src.c: 60:     RC1 = 1;
  4190  13E2  1487               	bsf	7,1	;volatile
  4191                           
  4192                           ;threshold_src.c: 61:     RC2 = 1;
  4193  13E3  1507               	bsf	7,2	;volatile
  4194                           
  4195                           ;threshold_src.c: 62:     RC3 = 0;
  4196  13E4  1187               	bcf	7,3	;volatile
  4197                           
  4198                           ;threshold_src.c: 63:     if(RC4 == 0){
  4199  13E5  1A07               	btfsc	7,4	;volatile
  4200  13E6  2C0E               	goto	l5052
  4201                           
  4202                           ;threshold_src.c: 64:         count = 0;
  4203  13E7  1683               	bsf	3,5	;RP0=1, select bank1
  4204  13E8  01B5               	clrf	_count^(0+128)
  4205  13E9  01B6               	clrf	(_count+1)^(0+128)
  4206                           
  4207                           ;threshold_src.c: 65:         buzzer_watcher = 'x';
  4208  13EA  3078               	movlw	120
  4209  13EB  00F3               	movwf	??_reset_alarm
  4210  13EC  0873               	movf	??_reset_alarm,w
  4211  13ED  1283               	bcf	3,5	;RP0=0, select bank0
  4212  13EE  00D3               	movwf	_buzzer_watcher
  4213                           
  4214                           ;threshold_src.c: 66:         heat_counter = 0;
  4215  13EF  1683               	bsf	3,5	;RP0=1, select bank1
  4216  13F0  01B9               	clrf	_heat_counter^(0+128)
  4217  13F1  01BA               	clrf	(_heat_counter+1)^(0+128)
  4218                           
  4219                           ;threshold_src.c: 67:         write_char('R');
  4220  13F2  3052               	movlw	82
  4221  13F3  160A  118A  2270  160A  118A  	fcall	_write_char
  4222                           
  4223                           ;threshold_src.c: 68:         write_char('E');
  4224  13F8  3045               	movlw	69
  4225  13F9  160A  118A  2270  160A  118A  	fcall	_write_char
  4226                           
  4227                           ;threshold_src.c: 69:         write_char('S');
  4228  13FE  3053               	movlw	83
  4229  13FF  160A  118A  2270  160A  118A  	fcall	_write_char
  4230                           
  4231                           ;threshold_src.c: 70:         write_char('E');
  4232  1404  3045               	movlw	69
  4233  1405  160A  118A  2270  160A  118A  	fcall	_write_char
  4234                           
  4235                           ;threshold_src.c: 71:         write_char('T');
  4236  140A  3054               	movlw	84
  4237  140B  160A  118A  2270   	fcall	_write_char
  4238  140E                     l5052:	
  4239                           
  4240                           ;threshold_src.c: 73:     return buzzer_watcher;
  4241  140E  0853               	movf	_buzzer_watcher,w
  4242  140F  0008               	return
  4243  1410                     __end_of_reset_alarm:	
  4244                           
  4245                           	psect	text7
  4246  1320                     __ptext7:	
  4247 ;; *************** function _lcd_init *****************
  4248 ;; Defined at:
  4249 ;;		line 14 in file "LCD_src.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;		None
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  i               2    0        int 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 300/100
  4260 ;;		On exit  : 300/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4263 ;;      Params:         0       0       0       0       0
  4264 ;;      Locals:         0       0       0       0       0
  4265 ;;      Temps:          0       0       0       0       0
  4266 ;;      Totals:         0       0       0       0       0
  4267 ;;Total ram usage:        0 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    2
  4270 ;; This function calls:
  4271 ;;		_delay_screen
  4272 ;;		_write_cmd
  4273 ;; This function is called by:
  4274 ;;		_main
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _lcd_init
  4280  1320                     _lcd_init:	
  4281                           
  4282                           ;LCD_src.c: 16:  int i;;LCD_src.c: 17:  TRISA = 0x00;
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4286  1320  0185               	clrf	5	;volatile
  4287                           
  4288                           ;LCD_src.c: 18:  RA0=0;
  4289  1321  1283               	bcf	3,5	;RP0=0, select bank0
  4290  1322  1005               	bcf	5,0	;volatile
  4291                           
  4292                           ;LCD_src.c: 19:  delay_screen();
  4293  1323  160A  118A  2220  160A  118A  	fcall	_delay_screen
  4294                           
  4295                           ;LCD_src.c: 20:  RA0=1;
  4296  1328  1283               	bcf	3,5	;RP0=0, select bank0
  4297  1329  1303               	bcf	3,6	;RP1=0, select bank0
  4298  132A  1405               	bsf	5,0	;volatile
  4299                           
  4300                           ;LCD_src.c: 21:  RA2=1;
  4301  132B  1505               	bsf	5,2	;volatile
  4302                           
  4303                           ;LCD_src.c: 22:  write_cmd(0x30);
  4304  132C  3030               	movlw	48
  4305  132D  160A  118A  2287  160A  118A  	fcall	_write_cmd
  4306                           
  4307                           ;LCD_src.c: 23:  write_cmd(0x01);
  4308  1332  3001               	movlw	1
  4309  1333  160A  118A  2287  160A  118A  	fcall	_write_cmd
  4310                           
  4311                           ;LCD_src.c: 24:  write_cmd(0x06);
  4312  1338  3006               	movlw	6
  4313  1339  160A  118A  2287  160A  118A  	fcall	_write_cmd
  4314                           
  4315                           ;LCD_src.c: 25:  write_cmd(0x0c);
  4316  133E  300C               	movlw	12
  4317  133F  160A  118A  2287   	fcall	_write_cmd
  4318  1342  0008               	return
  4319  1343                     __end_of_lcd_init:	
  4320                           
  4321                           	psect	text8
  4322  125C                     __ptext8:	
  4323 ;; *************** function _initialise_buttons *****************
  4324 ;; Defined at:
  4325 ;;		line 11 in file "Button_src.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2
  4334 ;; Tracked objects:
  4335 ;;		On entry : 300/0
  4336 ;;		On exit  : 300/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4339 ;;      Params:         0       0       0       0       0
  4340 ;;      Locals:         0       0       0       0       0
  4341 ;;      Temps:          0       0       0       0       0
  4342 ;;      Totals:         0       0       0       0       0
  4343 ;;Total ram usage:        0 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _initialise_buttons
  4354  125C                     _initialise_buttons:	
  4355                           
  4356                           ;Button_src.c: 12:     ADCON1 = 0x06;
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _initialise_buttons: [wreg+status,2]
  4360  125C  3006               	movlw	6
  4361  125D  1683               	bsf	3,5	;RP0=1, select bank1
  4362  125E  009F               	movwf	31	;volatile
  4363                           
  4364                           ;Button_src.c: 13:     TRISC = 0xf0;
  4365  125F  30F0               	movlw	240
  4366  1260  0087               	movwf	7	;volatile
  4367                           
  4368                           ;Button_src.c: 14:     a = 0x00;
  4369  1261  1283               	bcf	3,5	;RP0=0, select bank0
  4370  1262  01CA               	clrf	_a
  4371                           
  4372                           ;Button_src.c: 15:     b = 0x00;
  4373  1263  01C9               	clrf	_b
  4374                           
  4375                           ;Button_src.c: 16:     c = 0x00;
  4376  1264  01C8               	clrf	_c
  4377                           
  4378                           ;Button_src.c: 17:     z = 0;
  4379  1265  01B0               	clrf	_z
  4380  1266  01B1               	clrf	_z+1
  4381                           
  4382                           ;Button_src.c: 18:     day_low = 0;
  4383  1267  01AE               	clrf	_day_low
  4384  1268  01AF               	clrf	_day_low+1
  4385                           
  4386                           ;Button_src.c: 19:     stats = 1;
  4387  1269  3001               	movlw	1
  4388  126A  00AA               	movwf	_stats
  4389  126B  3000               	movlw	0
  4390  126C  00AB               	movwf	_stats+1
  4391                           
  4392                           ;Button_src.c: 20:     p = 0;
  4393  126D  01A8               	clrf	_p
  4394  126E  01A9               	clrf	_p+1
  4395  126F  0008               	return
  4396  1270                     __end_of_initialise_buttons:	
  4397                           
  4398                           	psect	text9
  4399  11C6                     __ptext9:	
  4400 ;; *************** function _init_temp *****************
  4401 ;; Defined at:
  4402 ;;		line 6 in file "Thermometer_src.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		status,2
  4411 ;; Tracked objects:
  4412 ;;		On entry : 200/100
  4413 ;;		On exit  : 300/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4416 ;;      Params:         0       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0
  4419 ;;      Totals:         0       0       0       0       0
  4420 ;;Total ram usage:        0 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_main
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _init_temp
  4431  11C6                     _init_temp:	
  4432                           
  4433                           ;Thermometer_src.c: 8:     TRISE=0X00;
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _init_temp: [status,2]
  4437  11C6  1683               	bsf	3,5	;RP0=1, select bank1
  4438  11C7  0189               	clrf	9	;volatile
  4439                           
  4440                           ;Thermometer_src.c: 9:     PORTE = 0X00;
  4441  11C8  1283               	bcf	3,5	;RP0=0, select bank0
  4442  11C9  0189               	clrf	9	;volatile
  4443  11CA  0008               	return
  4444  11CB                     __end_of_init_temp:	
  4445                           
  4446                           	psect	text10
  4447  11CB                     __ptext10:	
  4448 ;; *************** function _init *****************
  4449 ;; Defined at:
  4450 ;;		line 5 in file "LCD_src.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2
  4459 ;; Tracked objects:
  4460 ;;		On entry : 300/0
  4461 ;;		On exit  : 300/100
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4464 ;;      Params:         0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0
  4467 ;;      Totals:         0       0       0       0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function _init
  4479  11CB                     _init:	
  4480                           
  4481                           ;LCD_src.c: 7:  ADCON1 = 0X07;
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _init: [wreg+status,2]
  4485  11CB  3007               	movlw	7
  4486  11CC  1683               	bsf	3,5	;RP0=1, select bank1
  4487  11CD  009F               	movwf	31	;volatile
  4488                           
  4489                           ;LCD_src.c: 8:  TRISA0=1;
  4490  11CE  1405               	bsf	5,0	;volatile
  4491                           
  4492                           ;LCD_src.c: 9:  TRISD=0X00;
  4493  11CF  0188               	clrf	8	;volatile
  4494                           
  4495                           ;LCD_src.c: 10:  OPTION_REG=0X00;
  4496  11D0  0181               	clrf	1	;volatile
  4497                           
  4498                           ;LCD_src.c: 11:  TRISE = 0X00;
  4499  11D1  0189               	clrf	9	;volatile
  4500  11D2  0008               	return
  4501  11D3                     __end_of_init:	
  4502                           
  4503                           	psect	text11
  4504  13B5                     __ptext11:	
  4505 ;; *************** function _get_time *****************
  4506 ;; Defined at:
  4507 ;;		line 23 in file "clock_src.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  i               2    6[COMMON] int 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/100
  4518 ;;		On exit  : 300/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4521 ;;      Params:         0       0       0       0       0
  4522 ;;      Locals:         2       0       0       0       0
  4523 ;;      Temps:          1       0       0       0       0
  4524 ;;      Totals:         3       0       0       0       0
  4525 ;;Total ram usage:        3 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    1
  4528 ;; This function calls:
  4529 ;;		_time_read_1
  4530 ;;		_time_write_1
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function _get_time
  4538  13B5                     _get_time:	
  4539                           
  4540                           ;clock_src.c: 25:    int i;;clock_src.c: 26:    RB5=1;
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4544  13B5  1283               	bcf	3,5	;RP0=0, select bank0
  4545  13B6  1303               	bcf	3,6	;RP1=0, select bank0
  4546  13B7  1686               	bsf	6,5	;volatile
  4547                           
  4548                           ;clock_src.c: 27:    time_write_1(0xbf);
  4549  13B8  30BF               	movlw	191
  4550  13B9  160A  118A  2367  160A  118A  	fcall	_time_write_1
  4551                           
  4552                           ;clock_src.c: 28:    for(i=0;i<7;i++)
  4553  13BE  01F6               	clrf	get_time@i
  4554  13BF  01F7               	clrf	get_time@i+1
  4555  13C0                     l4098:	
  4556                           
  4557                           ;clock_src.c: 29:      {;clock_src.c: 30:         table1[i]=time_read_1();
  4558  13C0  160A  118A  2410  160A  118A  	fcall	_time_read_1
  4559  13C5  00F5               	movwf	??_get_time
  4560  13C6  0876               	movf	get_time@i,w
  4561  13C7  3EA0               	addlw	(low (_table1| 0))& (0+255)
  4562  13C8  0084               	movwf	4
  4563  13C9  0875               	movf	??_get_time,w
  4564  13CA  1383               	bcf	3,7	;select IRP bank1
  4565  13CB  0080               	movwf	0
  4566                           
  4567                           ;clock_src.c: 31:      }
  4568  13CC  3001               	movlw	1
  4569  13CD  07F6               	addwf	get_time@i,f
  4570  13CE  1803               	skipnc
  4571  13CF  0AF7               	incf	get_time@i+1,f
  4572  13D0  3000               	movlw	0
  4573  13D1  07F7               	addwf	get_time@i+1,f
  4574  13D2  0877               	movf	get_time@i+1,w
  4575  13D3  3A80               	xorlw	128
  4576  13D4  00FF               	movwf	127
  4577  13D5  3080               	movlw	128
  4578  13D6  027F               	subwf	127,w
  4579  13D7  1D03               	skipz
  4580  13D8  2BDB               	goto	u3265
  4581  13D9  3007               	movlw	7
  4582  13DA  0276               	subwf	get_time@i,w
  4583  13DB                     u3265:	
  4584  13DB  1C03               	skipc
  4585  13DC  2BC0               	goto	l4098
  4586                           
  4587                           ;clock_src.c: 32:    RB5=0;
  4588  13DD  1283               	bcf	3,5	;RP0=0, select bank0
  4589  13DE  1303               	bcf	3,6	;RP1=0, select bank0
  4590  13DF  1286               	bcf	6,5	;volatile
  4591  13E0  0008               	return
  4592  13E1                     __end_of_get_time:	
  4593                           
  4594                           	psect	text12
  4595  1410                     __ptext12:	
  4596 ;; *************** function _time_read_1 *****************
  4597 ;; Defined at:
  4598 ;;		line 130 in file "clock_src.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  j               2    2[COMMON] int 
  4603 ;;  time_rx         1    4[COMMON] unsigned char 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      unsigned char 
  4606 ;; Registers used:
  4607 ;;		wreg, status,2, status,0, btemp+1
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 300/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4613 ;;      Params:         0       0       0       0       0
  4614 ;;      Locals:         3       0       0       0       0
  4615 ;;      Temps:          2       0       0       0       0
  4616 ;;      Totals:         5       0       0       0       0
  4617 ;;Total ram usage:        5 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		_get_time
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _time_read_1
  4628  1410                     _time_read_1:	
  4629                           
  4630                           ;clock_src.c: 132:    unsigned char time_rx=0;
  4631                           
  4632                           ;incstack = 0
  4633                           ; Regs used in _time_read_1: [wreg+status,2+status,0+btemp+1]
  4634  1410  01F4               	clrf	time_read_1@time_rx
  4635                           
  4636                           ;clock_src.c: 133:    int j;;clock_src.c: 134:    TRISB4=1;
  4637  1411  1683               	bsf	3,5	;RP0=1, select bank1
  4638  1412  1303               	bcf	3,6	;RP1=0, select bank1
  4639  1413  1606               	bsf	6,4	;volatile
  4640                           
  4641                           ;clock_src.c: 135:    for(j=0;j<8;j++)
  4642  1414  01F2               	clrf	time_read_1@j
  4643  1415  01F3               	clrf	time_read_1@j+1
  4644  1416                     l494:	
  4645                           
  4646                           ;clock_src.c: 136:       {;clock_src.c: 137:         RB0=0;
  4647  1416  1283               	bcf	3,5	;RP0=0, select bank0
  4648  1417  1303               	bcf	3,6	;RP1=0, select bank0
  4649  1418  1006               	bcf	6,0	;volatile
  4650                           
  4651                           ;clock_src.c: 138:         time_rx=time_rx>>1;
  4652  1419  0874               	movf	time_read_1@time_rx,w
  4653  141A  00F0               	movwf	??_time_read_1
  4654  141B  1003               	clrc
  4655  141C  0C70               	rrf	??_time_read_1,w
  4656  141D  00F1               	movwf	??_time_read_1+1
  4657  141E  0871               	movf	??_time_read_1+1,w
  4658  141F  00F4               	movwf	time_read_1@time_rx
  4659                           
  4660                           ;clock_src.c: 139:         if(RB4)time_rx=time_rx|0x80;
  4661  1420  1E06               	btfss	6,4	;volatile
  4662  1421  2C27               	goto	l3692
  4663  1422  0874               	movf	time_read_1@time_rx,w
  4664  1423  3880               	iorlw	128
  4665  1424  00F0               	movwf	??_time_read_1
  4666  1425  0870               	movf	??_time_read_1,w
  4667  1426  00F4               	movwf	time_read_1@time_rx
  4668  1427                     l3692:	
  4669                           
  4670                           ;clock_src.c: 141:        RB0=1;
  4671  1427  1406               	bsf	6,0	;volatile
  4672                           
  4673                           ;clock_src.c: 142:       }
  4674  1428  3001               	movlw	1
  4675  1429  07F2               	addwf	time_read_1@j,f
  4676  142A  1803               	skipnc
  4677  142B  0AF3               	incf	time_read_1@j+1,f
  4678  142C  3000               	movlw	0
  4679  142D  07F3               	addwf	time_read_1@j+1,f
  4680  142E  0873               	movf	time_read_1@j+1,w
  4681  142F  3A80               	xorlw	128
  4682  1430  00FF               	movwf	127
  4683  1431  3080               	movlw	128
  4684  1432  027F               	subwf	127,w
  4685  1433  1D03               	skipz
  4686  1434  2C37               	goto	u2445
  4687  1435  3008               	movlw	8
  4688  1436  0272               	subwf	time_read_1@j,w
  4689  1437                     u2445:	
  4690  1437  1C03               	skipc
  4691  1438  2C16               	goto	l494
  4692                           
  4693                           ;clock_src.c: 143:     TRISB4=0;
  4694  1439  1683               	bsf	3,5	;RP0=1, select bank1
  4695  143A  1303               	bcf	3,6	;RP1=0, select bank1
  4696  143B  1206               	bcf	6,4	;volatile
  4697                           
  4698                           ;clock_src.c: 144:     RB0=0;
  4699  143C  1283               	bcf	3,5	;RP0=0, select bank0
  4700  143D  1006               	bcf	6,0	;volatile
  4701                           
  4702                           ;clock_src.c: 145:     return(time_rx);
  4703  143E  0874               	movf	time_read_1@time_rx,w
  4704  143F  0008               	return
  4705  1440                     __end_of_time_read_1:	
  4706                           
  4707                           	psect	text13
  4708  16F9                     __ptext13:	
  4709 ;; *************** function _get_temp *****************
  4710 ;; Defined at:
  4711 ;;		line 89 in file "Thermometer_src.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  i               2    0        int 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 200/100
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4725 ;;      Params:         0       0       0       0       0
  4726 ;;      Locals:         0       0       0       0       0
  4727 ;;      Temps:          0       4       0       0       0
  4728 ;;      Totals:         0       4       0       0       0
  4729 ;;Total ram usage:        4 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    2
  4732 ;; This function calls:
  4733 ;;		___lbdiv
  4734 ;;		___lbmod
  4735 ;;		___lwdiv
  4736 ;;		___lwmod
  4737 ;;		_delay2
  4738 ;;		_read_byte
  4739 ;;		_reset_temp
  4740 ;;		_write_byte
  4741 ;; This function is called by:
  4742 ;;		_main
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           
  4747                           ;psect for function _get_temp
  4748  16F9                     _get_temp:	
  4749                           
  4750                           ;Thermometer_src.c: 91: int i;;Thermometer_src.c: 92: TRISE0 =1;
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in _get_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4754  16F9  1683               	bsf	3,5	;RP0=1, select bank1
  4755  16FA  1409               	bsf	9,0	;volatile
  4756                           
  4757                           ;Thermometer_src.c: 93: reset_temp();
  4758  16FB  160A  118A  24A6  160A  118A  	fcall	_reset_temp
  4759                           
  4760                           ;Thermometer_src.c: 94: write_byte(0XCC);
  4761  1700  30CC               	movlw	204
  4762  1701  160A  118A  24DA  160A  118A  	fcall	_write_byte
  4763                           
  4764                           ;Thermometer_src.c: 95: delay2();
  4765  1706  160A  118A  2248  160A  118A  	fcall	_delay2
  4766                           
  4767                           ;Thermometer_src.c: 96: write_byte(0X44);
  4768  170B  3044               	movlw	68
  4769  170C  160A  118A  24DA  160A  118A  	fcall	_write_byte
  4770                           
  4771                           ;Thermometer_src.c: 98: reset_temp();
  4772  1711  160A  118A  24A6  160A  118A  	fcall	_reset_temp
  4773                           
  4774                           ;Thermometer_src.c: 99: write_byte(0XCC);
  4775  1716  30CC               	movlw	204
  4776  1717  160A  118A  24DA  160A  118A  	fcall	_write_byte
  4777                           
  4778                           ;Thermometer_src.c: 100: write_byte(0XBE);
  4779  171C  30BE               	movlw	190
  4780  171D  160A  118A  24DA  160A  118A  	fcall	_write_byte
  4781                           
  4782                           ;Thermometer_src.c: 101: TLV=read_byte();
  4783  1722  160A  118A  2472  160A  118A  	fcall	_read_byte
  4784  1727  1283               	bcf	3,5	;RP0=0, select bank0
  4785  1728  1303               	bcf	3,6	;RP1=0, select bank0
  4786  1729  00E0               	movwf	??_get_temp
  4787  172A  0860               	movf	??_get_temp,w
  4788  172B  00DF               	movwf	_TLV
  4789                           
  4790                           ;Thermometer_src.c: 102: THV=read_byte();
  4791  172C  160A  118A  2472  160A  118A  	fcall	_read_byte
  4792  1731  1283               	bcf	3,5	;RP0=0, select bank0
  4793  1732  1303               	bcf	3,6	;RP1=0, select bank0
  4794  1733  00E0               	movwf	??_get_temp
  4795  1734  0860               	movf	??_get_temp,w
  4796  1735  00DE               	movwf	_THV
  4797                           
  4798                           ;Thermometer_src.c: 103: TRISE0 =1;
  4799  1736  1683               	bsf	3,5	;RP0=1, select bank1
  4800  1737  1409               	bsf	9,0	;volatile
  4801                           
  4802                           ;Thermometer_src.c: 104: TZ=(TLV>>4)|(THV<<4)&0X3f;
  4803  1738  1283               	bcf	3,5	;RP0=0, select bank0
  4804  1739  085E               	movf	_THV,w
  4805  173A  00E0               	movwf	??_get_temp
  4806  173B  3004               	movlw	4
  4807  173C                     u3195:	
  4808  173C  1003               	clrc
  4809  173D  0DE0               	rlf	??_get_temp,f
  4810  173E  3EFF               	addlw	-1
  4811  173F  1D03               	skipz
  4812  1740  2F3C               	goto	u3195
  4813  1741  303F               	movlw	63
  4814  1742  0560               	andwf	??_get_temp,w
  4815  1743  00E1               	movwf	??_get_temp+1
  4816  1744  085F               	movf	_TLV,w
  4817  1745  00E2               	movwf	??_get_temp+2
  4818  1746  3004               	movlw	4
  4819  1747                     u3205:	
  4820  1747  1003               	clrc
  4821  1748  0CE2               	rrf	??_get_temp+2,f
  4822  1749  3EFF               	addlw	-1
  4823  174A  1D03               	skipz
  4824  174B  2F47               	goto	u3205
  4825  174C  0862               	movf	??_get_temp+2,w
  4826  174D  0461               	iorwf	??_get_temp+1,w
  4827  174E  00E3               	movwf	??_get_temp+3
  4828  174F  0863               	movf	??_get_temp+3,w
  4829  1750  00DD               	movwf	_TZ
  4830                           
  4831                           ;Thermometer_src.c: 105: TX=TLV<<4;
  4832  1751  085F               	movf	_TLV,w
  4833  1752  00E0               	movwf	??_get_temp
  4834  1753  3003               	movlw	3
  4835  1754                     u3215:	
  4836  1754  1003               	clrc
  4837  1755  0DE0               	rlf	??_get_temp,f
  4838  1756  3EFF               	addlw	-1
  4839  1757  1D03               	skipz
  4840  1758  2F54               	goto	u3215
  4841  1759  1003               	clrc
  4842  175A  0D60               	rlf	??_get_temp,w
  4843  175B  00E1               	movwf	??_get_temp+1
  4844  175C  0861               	movf	??_get_temp+1,w
  4845  175D  00DC               	movwf	_TX
  4846                           
  4847                           ;Thermometer_src.c: 107: ge=TZ%10;
  4848  175E  300A               	movlw	10
  4849  175F  00E0               	movwf	??_get_temp
  4850  1760  0860               	movf	??_get_temp,w
  4851  1761  00F0               	movwf	___lbmod@divisor
  4852  1762  085D               	movf	_TZ,w
  4853  1763  160A  118A  22FD  160A  118A  	fcall	___lbmod
  4854  1768  00E1               	movwf	??_get_temp+1
  4855  1769  0861               	movf	??_get_temp+1,w
  4856  176A  00DA               	movwf	_ge
  4857                           
  4858                           ;Thermometer_src.c: 108: shi=TZ/10;
  4859  176B  300A               	movlw	10
  4860  176C  00E0               	movwf	??_get_temp
  4861  176D  0860               	movf	??_get_temp,w
  4862  176E  00F0               	movwf	___lbdiv@divisor
  4863  176F  085D               	movf	_TZ,w
  4864  1770  160A  118A  22DC  160A  118A  	fcall	___lbdiv
  4865  1775  00E1               	movwf	??_get_temp+1
  4866  1776  0861               	movf	??_get_temp+1,w
  4867  1777  00DB               	movwf	_shi
  4868                           
  4869                           ;Thermometer_src.c: 109: wd=0;
  4870  1778  01BE               	clrf	_wd
  4871  1779  01BF               	clrf	_wd+1
  4872                           
  4873                           ;Thermometer_src.c: 110: if (TX & 0x80) wd=wd+5000;
  4874  177A  1FDC               	btfss	_TX,7
  4875  177B  2F84               	goto	l4066
  4876  177C  083E               	movf	_wd,w
  4877  177D  3E88               	addlw	136
  4878  177E  00BE               	movwf	_wd
  4879  177F  083F               	movf	_wd+1,w
  4880  1780  1803               	skipnc
  4881  1781  3E01               	addlw	1
  4882  1782  3E13               	addlw	19
  4883  1783  00BF               	movwf	_wd+1
  4884  1784                     l4066:	
  4885                           
  4886                           ;Thermometer_src.c: 111: if (TX & 0x40) wd=wd+2500;
  4887  1784  1F5C               	btfss	_TX,6
  4888  1785  2F8E               	goto	l4070
  4889  1786  083E               	movf	_wd,w
  4890  1787  3EC4               	addlw	196
  4891  1788  00BE               	movwf	_wd
  4892  1789  083F               	movf	_wd+1,w
  4893  178A  1803               	skipnc
  4894  178B  3E01               	addlw	1
  4895  178C  3E09               	addlw	9
  4896  178D  00BF               	movwf	_wd+1
  4897  178E                     l4070:	
  4898                           
  4899                           ;Thermometer_src.c: 112: if (TX & 0x20) wd=wd+1250;
  4900  178E  1EDC               	btfss	_TX,5
  4901  178F  2F98               	goto	l4074
  4902  1790  083E               	movf	_wd,w
  4903  1791  3EE2               	addlw	226
  4904  1792  00BE               	movwf	_wd
  4905  1793  083F               	movf	_wd+1,w
  4906  1794  1803               	skipnc
  4907  1795  3E01               	addlw	1
  4908  1796  3E04               	addlw	4
  4909  1797  00BF               	movwf	_wd+1
  4910  1798                     l4074:	
  4911                           
  4912                           ;Thermometer_src.c: 113: if (TX & 0x10) wd=wd+625;
  4913  1798  1E5C               	btfss	_TX,4
  4914  1799  2FA2               	goto	l4078
  4915  179A  083E               	movf	_wd,w
  4916  179B  3E71               	addlw	113
  4917  179C  00BE               	movwf	_wd
  4918  179D  083F               	movf	_wd+1,w
  4919  179E  1803               	skipnc
  4920  179F  3E01               	addlw	1
  4921  17A0  3E02               	addlw	2
  4922  17A1  00BF               	movwf	_wd+1
  4923  17A2                     l4078:	
  4924                           
  4925                           ;Thermometer_src.c: 114: shifen=wd/1000;
  4926  17A2  30E8               	movlw	232
  4927  17A3  00F6               	movwf	___lwdiv@divisor
  4928  17A4  3003               	movlw	3
  4929  17A5  00F7               	movwf	___lwdiv@divisor+1
  4930  17A6  083F               	movf	_wd+1,w
  4931  17A7  00F9               	movwf	___lwdiv@dividend+1
  4932  17A8  083E               	movf	_wd,w
  4933  17A9  00F8               	movwf	___lwdiv@dividend
  4934  17AA  120A  158A  2008  160A  118A  	fcall	___lwdiv
  4935  17AF  0876               	movf	?___lwdiv,w
  4936  17B0  00E0               	movwf	??_get_temp
  4937  17B1  0860               	movf	??_get_temp,w
  4938  17B2  00D9               	movwf	_shifen
  4939                           
  4940                           ;Thermometer_src.c: 115: baifen=(wd%1000)/100;
  4941  17B3  3064               	movlw	100
  4942  17B4  00F6               	movwf	___lwdiv@divisor
  4943  17B5  3000               	movlw	0
  4944  17B6  00F7               	movwf	___lwdiv@divisor+1
  4945  17B7  083F               	movf	_wd+1,w
  4946  17B8  00F3               	movwf	___lwmod@dividend+1
  4947  17B9  083E               	movf	_wd,w
  4948  17BA  00F2               	movwf	___lwmod@dividend
  4949  17BB  30E8               	movlw	232
  4950  17BC  00F0               	movwf	___lwmod@divisor
  4951  17BD  3003               	movlw	3
  4952  17BE  00F1               	movwf	___lwmod@divisor+1
  4953  17BF  160A  118A  2440  160A  118A  	fcall	___lwmod
  4954  17C4  0871               	movf	?___lwmod+1,w
  4955  17C5  00F9               	movwf	___lwdiv@dividend+1
  4956  17C6  0870               	movf	?___lwmod,w
  4957  17C7  00F8               	movwf	___lwdiv@dividend
  4958  17C8  120A  158A  2008  160A  118A  	fcall	___lwdiv
  4959  17CD  0876               	movf	?___lwdiv,w
  4960  17CE  00E0               	movwf	??_get_temp
  4961  17CF  0860               	movf	??_get_temp,w
  4962  17D0  00D8               	movwf	_baifen
  4963                           
  4964                           ;Thermometer_src.c: 116: qianfen=(wd%100)/10;
  4965  17D1  300A               	movlw	10
  4966  17D2  00F6               	movwf	___lwdiv@divisor
  4967  17D3  3000               	movlw	0
  4968  17D4  00F7               	movwf	___lwdiv@divisor+1
  4969  17D5  083F               	movf	_wd+1,w
  4970  17D6  00F3               	movwf	___lwmod@dividend+1
  4971  17D7  083E               	movf	_wd,w
  4972  17D8  00F2               	movwf	___lwmod@dividend
  4973  17D9  3064               	movlw	100
  4974  17DA  00F0               	movwf	___lwmod@divisor
  4975  17DB  3000               	movlw	0
  4976  17DC  00F1               	movwf	___lwmod@divisor+1
  4977  17DD  160A  118A  2440  160A  118A  	fcall	___lwmod
  4978  17E2  0871               	movf	?___lwmod+1,w
  4979  17E3  00F9               	movwf	___lwdiv@dividend+1
  4980  17E4  0870               	movf	?___lwmod,w
  4981  17E5  00F8               	movwf	___lwdiv@dividend
  4982  17E6  120A  158A  2008  160A  118A  	fcall	___lwdiv
  4983  17EB  0876               	movf	?___lwdiv,w
  4984  17EC  00E0               	movwf	??_get_temp
  4985  17ED  0860               	movf	??_get_temp,w
  4986  17EE  00D7               	movwf	_qianfen
  4987                           
  4988                           ;Thermometer_src.c: 117: wanfen=wd%10;
  4989  17EF  300A               	movlw	10
  4990  17F0  00F0               	movwf	___lwmod@divisor
  4991  17F1  3000               	movlw	0
  4992  17F2  00F1               	movwf	___lwmod@divisor+1
  4993  17F3  083F               	movf	_wd+1,w
  4994  17F4  00F3               	movwf	___lwmod@dividend+1
  4995  17F5  083E               	movf	_wd,w
  4996  17F6  00F2               	movwf	___lwmod@dividend
  4997  17F7  160A  118A  2440   	fcall	___lwmod
  4998  17FA  0870               	movf	?___lwmod,w
  4999  17FB  00E0               	movwf	??_get_temp
  5000  17FC  0860               	movf	??_get_temp,w
  5001  17FD  00D6               	movwf	_wanfen
  5002                           
  5003                           ;Thermometer_src.c: 118: __nop();
  5004  17FE  0000               	nop
  5005  17FF  0008               	return
  5006  1800                     __end_of_get_temp:	
  5007                           
  5008                           	psect	text14
  5009  14DA                     __ptext14:	
  5010 ;; *************** function _write_byte *****************
  5011 ;; Defined at:
  5012 ;;		line 40 in file "Thermometer_src.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  val             1    wreg     unsigned char 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  val             1    7[COMMON] unsigned char 
  5017 ;;  i               1    8[COMMON] unsigned char 
  5018 ;;  temp            1    6[COMMON] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  1    wreg      void 
  5021 ;; Registers used:
  5022 ;;		wreg, status,2, status,0, pclath, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/100
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5028 ;;      Params:         0       0       0       0       0
  5029 ;;      Locals:         3       0       0       0       0
  5030 ;;      Temps:          2       0       0       0       0
  5031 ;;      Totals:         5       0       0       0       0
  5032 ;;Total ram usage:        5 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    1
  5035 ;; This function calls:
  5036 ;;		_delay_temp
  5037 ;; This function is called by:
  5038 ;;		_get_temp
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           
  5043                           ;psect for function _write_byte
  5044  14DA                     _write_byte:	
  5045                           
  5046                           ;incstack = 0
  5047                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  5048                           ;write_byte@val stored from wreg
  5049  14DA  00F7               	movwf	write_byte@val
  5050                           
  5051                           ;Thermometer_src.c: 40: void write_byte(unsigned char val);Thermometer_src.c: 41: {;Ther
      +                          mometer_src.c: 42:  unsigned char i;;Thermometer_src.c: 43:  unsigned char temp;;Thermom
      +                          eter_src.c: 44:  for(i=8;i>0;i--)
  5052  14DB  3008               	movlw	8
  5053  14DC  00F4               	movwf	??_write_byte
  5054  14DD  0874               	movf	??_write_byte,w
  5055  14DE  00F8               	movwf	write_byte@i
  5056  14DF                     l3580:	
  5057                           
  5058                           ;Thermometer_src.c: 45:  {;Thermometer_src.c: 46:    temp=val&0x01;
  5059  14DF  0877               	movf	write_byte@val,w
  5060  14E0  3901               	andlw	1
  5061  14E1  00F4               	movwf	??_write_byte
  5062  14E2  0874               	movf	??_write_byte,w
  5063  14E3  00F6               	movwf	write_byte@temp
  5064                           
  5065                           ;Thermometer_src.c: 47:    RE0 = 0; TRISE0 = 0;
  5066  14E4  1283               	bcf	3,5	;RP0=0, select bank0
  5067  14E5  1303               	bcf	3,6	;RP1=0, select bank0
  5068  14E6  1009               	bcf	9,0	;volatile
  5069  14E7  1683               	bsf	3,5	;RP0=1, select bank1
  5070  14E8  1009               	bcf	9,0	;volatile
  5071                           
  5072                           ;Thermometer_src.c: 48:    __nop();
  5073  14E9  0000               	nop
  5074                           
  5075                           ;Thermometer_src.c: 49:    __nop();
  5076  14EA  0000               	nop
  5077                           
  5078                           ;Thermometer_src.c: 50:    __nop();
  5079  14EB  0000               	nop
  5080                           
  5081                           ;Thermometer_src.c: 51:    __nop();
  5082  14EC  0000               	nop
  5083                           
  5084                           ;Thermometer_src.c: 52:    __nop();
  5085  14ED  0000               	nop
  5086                           
  5087                           ;Thermometer_src.c: 53:    if(temp==1) TRISE0 =1;
  5088  14EE  0376               	decf	write_byte@temp,w
  5089  14EF  1D03               	btfss	3,2
  5090  14F0  2CF4               	goto	l3600
  5091  14F1  1683               	bsf	3,5	;RP0=1, select bank1
  5092  14F2  1303               	bcf	3,6	;RP1=0, select bank1
  5093  14F3  1409               	bsf	9,0	;volatile
  5094  14F4                     l3600:	
  5095                           
  5096                           ;Thermometer_src.c: 54:    delay_temp(2,7);
  5097  14F4  3007               	movlw	7
  5098  14F5  00F4               	movwf	??_write_byte
  5099  14F6  0874               	movf	??_write_byte,w
  5100  14F7  00F0               	movwf	delay_temp@y
  5101  14F8  3002               	movlw	2
  5102  14F9  160A  118A  21D3  160A  118A  	fcall	_delay_temp
  5103                           
  5104                           ;Thermometer_src.c: 55:    TRISE0 =1;
  5105  14FE  1683               	bsf	3,5	;RP0=1, select bank1
  5106  14FF  1303               	bcf	3,6	;RP1=0, select bank1
  5107  1500  1409               	bsf	9,0	;volatile
  5108                           
  5109                           ;Thermometer_src.c: 56:    __nop();
  5110  1501  0000               	nop
  5111                           
  5112                           ;Thermometer_src.c: 57:    __nop();
  5113  1502  0000               	nop
  5114                           
  5115                           ;Thermometer_src.c: 58:    val=val>>1;
  5116  1503  0877               	movf	write_byte@val,w
  5117  1504  00F4               	movwf	??_write_byte
  5118  1505  1003               	clrc
  5119  1506  0C74               	rrf	??_write_byte,w
  5120  1507  00F5               	movwf	??_write_byte+1
  5121  1508  0875               	movf	??_write_byte+1,w
  5122  1509  00F7               	movwf	write_byte@val
  5123                           
  5124                           ;Thermometer_src.c: 59:   }
  5125  150A  3001               	movlw	1
  5126  150B  02F8               	subwf	write_byte@i,f
  5127  150C  0878               	movf	write_byte@i,w
  5128  150D  1903               	btfsc	3,2
  5129  150E  0008               	return
  5130  150F  2CDF               	goto	l3580
  5131  1510                     __end_of_write_byte:	
  5132                           
  5133                           	psect	text15
  5134  14A6                     __ptext15:	
  5135 ;; *************** function _reset_temp *****************
  5136 ;; Defined at:
  5137 ;;		line 25 in file "Thermometer_src.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  presence        1    5[COMMON] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/100
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5151 ;;      Params:         0       0       0       0       0
  5152 ;;      Locals:         1       0       0       0       0
  5153 ;;      Temps:          1       0       0       0       0
  5154 ;;      Totals:         2       0       0       0       0
  5155 ;;Total ram usage:        2 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    1
  5158 ;; This function calls:
  5159 ;;		_delay_temp
  5160 ;; This function is called by:
  5161 ;;		_get_temp
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           
  5166                           ;psect for function _reset_temp
  5167  14A6                     _reset_temp:	
  5168                           
  5169                           ;Thermometer_src.c: 27:   char presence=1;
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _reset_temp: [wreg+status,2+status,0+pclath+cstack]
  5173  14A6  01F5               	clrf	reset_temp@presence
  5174  14A7  0AF5               	incf	reset_temp@presence,f
  5175  14A8                     l3572:	
  5176                           ;Thermometer_src.c: 28:   while(presence)
  5177                           
  5178                           
  5179                           ;Thermometer_src.c: 28:   while(presence)
  5180  14A8  0875               	movf	reset_temp@presence,w
  5181  14A9  1903               	btfsc	3,2
  5182  14AA  0008               	return
  5183                           
  5184                           ;Thermometer_src.c: 29:   {;Thermometer_src.c: 30:     RE0 = 0; TRISE0 = 0 ;
  5185  14AB  1283               	bcf	3,5	;RP0=0, select bank0
  5186  14AC  1303               	bcf	3,6	;RP1=0, select bank0
  5187  14AD  1009               	bcf	9,0	;volatile
  5188  14AE  1683               	bsf	3,5	;RP0=1, select bank1
  5189  14AF  1009               	bcf	9,0	;volatile
  5190                           
  5191                           ;Thermometer_src.c: 31:     delay_temp(2,70);
  5192  14B0  3046               	movlw	70
  5193  14B1  00F4               	movwf	??_reset_temp
  5194  14B2  0874               	movf	??_reset_temp,w
  5195  14B3  00F0               	movwf	delay_temp@y
  5196  14B4  3002               	movlw	2
  5197  14B5  160A  118A  21D3  160A  118A  	fcall	_delay_temp
  5198                           
  5199                           ;Thermometer_src.c: 32:     TRISE0 =1;
  5200  14BA  1683               	bsf	3,5	;RP0=1, select bank1
  5201  14BB  1303               	bcf	3,6	;RP1=0, select bank1
  5202  14BC  1409               	bsf	9,0	;volatile
  5203                           
  5204                           ;Thermometer_src.c: 33:     delay_temp(2,8);
  5205  14BD  3008               	movlw	8
  5206  14BE  00F4               	movwf	??_reset_temp
  5207  14BF  0874               	movf	??_reset_temp,w
  5208  14C0  00F0               	movwf	delay_temp@y
  5209  14C1  3002               	movlw	2
  5210  14C2  160A  118A  21D3  160A  118A  	fcall	_delay_temp
  5211                           
  5212                           ;Thermometer_src.c: 34:     if(RE0==1) presence=1;
  5213  14C7  1283               	bcf	3,5	;RP0=0, select bank0
  5214  14C8  1303               	bcf	3,6	;RP1=0, select bank0
  5215  14C9  1C09               	btfss	9,0	;volatile
  5216  14CA  2CCE               	goto	l3568
  5217  14CB  01F5               	clrf	reset_temp@presence
  5218  14CC  0AF5               	incf	reset_temp@presence,f
  5219  14CD  2CCF               	goto	l3570
  5220  14CE                     l3568:	
  5221  14CE  01F5               	clrf	reset_temp@presence
  5222  14CF                     l3570:	
  5223                           
  5224                           ;Thermometer_src.c: 36:     delay_temp(2,60);
  5225  14CF  303C               	movlw	60
  5226  14D0  00F4               	movwf	??_reset_temp
  5227  14D1  0874               	movf	??_reset_temp,w
  5228  14D2  00F0               	movwf	delay_temp@y
  5229  14D3  3002               	movlw	2
  5230  14D4  160A  118A  21D3  160A  118A  	fcall	_delay_temp
  5231  14D9  2CA8               	goto	l3572
  5232  14DA                     __end_of_reset_temp:	
  5233                           
  5234                           	psect	text16
  5235  1472                     __ptext16:	
  5236 ;; *************** function _read_byte *****************
  5237 ;; Defined at:
  5238 ;;		line 62 in file "Thermometer_src.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;		None
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  i               1    6[COMMON] unsigned char 
  5243 ;;  value           1    5[COMMON] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      unsigned char 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/100
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5253 ;;      Params:         0       0       0       0       0
  5254 ;;      Locals:         2       0       0       0       0
  5255 ;;      Temps:          1       0       0       0       0
  5256 ;;      Totals:         3       0       0       0       0
  5257 ;;Total ram usage:        3 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    1
  5260 ;; This function calls:
  5261 ;;		_delay_temp
  5262 ;; This function is called by:
  5263 ;;		_get_temp
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           
  5268                           ;psect for function _read_byte
  5269  1472                     _read_byte:	
  5270                           
  5271                           ;Thermometer_src.c: 64:  unsigned char i;;Thermometer_src.c: 65:  unsigned char value=0;
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5275  1472  01F5               	clrf	read_byte@value
  5276                           
  5277                           ;Thermometer_src.c: 66:  static _Bool j;;Thermometer_src.c: 67:  for(i=8;i>0;i--)
  5278  1473  3008               	movlw	8
  5279  1474  00F4               	movwf	??_read_byte
  5280  1475  0874               	movf	??_read_byte,w
  5281  1476  00F6               	movwf	read_byte@i
  5282  1477                     l3622:	
  5283                           
  5284                           ;Thermometer_src.c: 68:  {;Thermometer_src.c: 69:    value>>=1;
  5285  1477  1003               	clrc
  5286  1478  0CF5               	rrf	read_byte@value,f
  5287                           
  5288                           ;Thermometer_src.c: 70:    RE0 = 0; TRISE0 = 0;
  5289  1479  1283               	bcf	3,5	;RP0=0, select bank0
  5290  147A  1303               	bcf	3,6	;RP1=0, select bank0
  5291  147B  1009               	bcf	9,0	;volatile
  5292  147C  1683               	bsf	3,5	;RP0=1, select bank1
  5293  147D  1009               	bcf	9,0	;volatile
  5294                           
  5295                           ;Thermometer_src.c: 71:    __nop();
  5296  147E  0000               	nop
  5297                           
  5298                           ;Thermometer_src.c: 72:    __nop();
  5299  147F  0000               	nop
  5300                           
  5301                           ;Thermometer_src.c: 73:    __nop();
  5302  1480  0000               	nop
  5303                           
  5304                           ;Thermometer_src.c: 74:    __nop();
  5305  1481  0000               	nop
  5306                           
  5307                           ;Thermometer_src.c: 75:    __nop();
  5308  1482  0000               	nop
  5309                           
  5310                           ;Thermometer_src.c: 76:    __nop();
  5311  1483  0000               	nop
  5312                           
  5313                           ;Thermometer_src.c: 77:    TRISE0 =1;
  5314  1484  1683               	bsf	3,5	;RP0=1, select bank1
  5315  1485  1303               	bcf	3,6	;RP1=0, select bank1
  5316  1486  1409               	bsf	9,0	;volatile
  5317                           
  5318                           ;Thermometer_src.c: 78:    __nop();
  5319  1487  0000               	nop
  5320                           
  5321                           ;Thermometer_src.c: 79:    __nop();
  5322  1488  0000               	nop
  5323                           
  5324                           ;Thermometer_src.c: 80:    __nop();
  5325  1489  0000               	nop
  5326                           
  5327                           ;Thermometer_src.c: 81:    __nop();
  5328  148A  0000               	nop
  5329                           
  5330                           ;Thermometer_src.c: 82:    __nop();
  5331  148B  0000               	nop
  5332                           
  5333                           ;Thermometer_src.c: 83:    j=RE0;
  5334  148C  3000               	movlw	0
  5335  148D  1283               	bcf	3,5	;RP0=0, select bank0
  5336  148E  1303               	bcf	3,6	;RP1=0, select bank0
  5337  148F  1809               	btfsc	9,0	;volatile
  5338  1490  3001               	movlw	1
  5339  1491  00C0               	movwf	read_byte@j
  5340                           
  5341                           ;Thermometer_src.c: 84:    if(j) value|=0x80;
  5342  1492  0840               	movf	read_byte@j,w
  5343  1493  1D03               	btfss	3,2
  5344  1494  17F5               	bsf	read_byte@value,7
  5345                           
  5346                           ;Thermometer_src.c: 85:    delay_temp(2,7);
  5347  1495  3007               	movlw	7
  5348  1496  00F4               	movwf	??_read_byte
  5349  1497  0874               	movf	??_read_byte,w
  5350  1498  00F0               	movwf	delay_temp@y
  5351  1499  3002               	movlw	2
  5352  149A  160A  118A  21D3  160A  118A  	fcall	_delay_temp
  5353                           
  5354                           ;Thermometer_src.c: 86:   }
  5355  149F  3001               	movlw	1
  5356  14A0  02F6               	subwf	read_byte@i,f
  5357  14A1  0876               	movf	read_byte@i,w
  5358  14A2  1D03               	btfss	3,2
  5359  14A3  2C77               	goto	l3622
  5360                           
  5361                           ;Thermometer_src.c: 87:   return(value);
  5362  14A4  0875               	movf	read_byte@value,w
  5363  14A5  0008               	return
  5364  14A6                     __end_of_read_byte:	
  5365                           
  5366                           	psect	text17
  5367  11D3                     __ptext17:	
  5368 ;; *************** function _delay_temp *****************
  5369 ;; Defined at:
  5370 ;;		line 121 in file "Thermometer_src.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;  x               1    wreg     unsigned char 
  5373 ;;  y               1    0[COMMON] unsigned char 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;  x               1    2[COMMON] unsigned char 
  5376 ;;  z               1    3[COMMON] unsigned char 
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/100
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5386 ;;      Params:         1       0       0       0       0
  5387 ;;      Locals:         2       0       0       0       0
  5388 ;;      Temps:          1       0       0       0       0
  5389 ;;      Totals:         4       0       0       0       0
  5390 ;;Total ram usage:        4 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; This function calls:
  5393 ;;		Nothing
  5394 ;; This function is called by:
  5395 ;;		_reset_temp
  5396 ;;		_write_byte
  5397 ;;		_read_byte
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           
  5402                           ;psect for function _delay_temp
  5403  11D3                     _delay_temp:	
  5404                           
  5405                           ;incstack = 0
  5406                           ; Regs used in _delay_temp: [wreg+status,2+status,0]
  5407                           ;delay_temp@x stored from wreg
  5408  11D3  00F2               	movwf	delay_temp@x
  5409  11D4                     l373:	
  5410                           ;Thermometer_src.c: 121: void delay_temp(char x, char y);Thermometer_src.c: 122: {;Therm
      +                          ometer_src.c: 123:  char z;;Thermometer_src.c: 124:  do{
  5411                           
  5412                           
  5413                           ;Thermometer_src.c: 125:  z=y;
  5414  11D4  0870               	movf	delay_temp@y,w
  5415  11D5  00F1               	movwf	??_delay_temp
  5416  11D6  0871               	movf	??_delay_temp,w
  5417  11D7  00F3               	movwf	delay_temp@z
  5418  11D8                     l3498:	
  5419  11D8  3001               	movlw	1
  5420  11D9  02F3               	subwf	delay_temp@z,f
  5421  11DA  1D03               	btfss	3,2
  5422  11DB  29D8               	goto	l3498
  5423                           
  5424                           ;Thermometer_src.c: 127:  }while(--x);
  5425  11DC  3001               	movlw	1
  5426  11DD  02F2               	subwf	delay_temp@x,f
  5427  11DE  1903               	btfsc	3,2
  5428  11DF  0008               	return
  5429  11E0  29D4               	goto	l373
  5430  11E1                     __end_of_delay_temp:	
  5431                           
  5432                           	psect	text18
  5433  1248                     __ptext18:	
  5434 ;; *************** function _delay2 *****************
  5435 ;; Defined at:
  5436 ;;		line 130 in file "Thermometer_src.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;		None
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  i               2    0[COMMON] int 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, btemp+1
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/100
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5450 ;;      Params:         0       0       0       0       0
  5451 ;;      Locals:         2       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0
  5453 ;;      Totals:         2       0       0       0       0
  5454 ;;Total ram usage:        2 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_get_temp
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _delay2
  5465  1248                     _delay2:	
  5466                           
  5467                           ;Thermometer_src.c: 131:  for (int i = 0; i<50;i++){
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _delay2: [wreg+status,2+btemp+1]
  5471  1248  01F0               	clrf	delay2@i
  5472  1249  01F1               	clrf	delay2@i+1
  5473  124A                     l3674:	
  5474                           
  5475                           ;Thermometer_src.c: 132:  }
  5476  124A  3001               	movlw	1
  5477  124B  07F0               	addwf	delay2@i,f
  5478  124C  1803               	skipnc
  5479  124D  0AF1               	incf	delay2@i+1,f
  5480  124E  3000               	movlw	0
  5481  124F  07F1               	addwf	delay2@i+1,f
  5482  1250  0871               	movf	delay2@i+1,w
  5483  1251  3A80               	xorlw	128
  5484  1252  00FF               	movwf	127
  5485  1253  3080               	movlw	128
  5486  1254  027F               	subwf	127,w
  5487  1255  1D03               	skipz
  5488  1256  2A59               	goto	u2425
  5489  1257  3032               	movlw	50
  5490  1258  0270               	subwf	delay2@i,w
  5491  1259                     u2425:	
  5492  1259  1803               	btfsc	3,0
  5493  125A  0008               	return
  5494  125B  2A4A               	goto	l3674
  5495  125C                     __end_of_delay2:	
  5496                           
  5497                           	psect	text19
  5498  1440                     __ptext19:	
  5499 ;; *************** function ___lwmod *****************
  5500 ;; Defined at:
  5501 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  divisor         2    0[COMMON] unsigned int 
  5504 ;;  dividend        2    2[COMMON] unsigned int 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  counter         1    5[COMMON] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  2    0[COMMON] unsigned int 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0
  5511 ;; Tracked objects:
  5512 ;;		On entry : 300/0
  5513 ;;		On exit  : 300/0
  5514 ;;		Unchanged: 300/0
  5515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5516 ;;      Params:         4       0       0       0       0
  5517 ;;      Locals:         1       0       0       0       0
  5518 ;;      Temps:          1       0       0       0       0
  5519 ;;      Totals:         6       0       0       0       0
  5520 ;;Total ram usage:        6 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_get_temp
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           
  5530                           ;psect for function ___lwmod
  5531  1440                     ___lwmod:	
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5535  1440  0870               	movf	___lwmod@divisor,w
  5536  1441  0471               	iorwf	___lwmod@divisor+1,w
  5537  1442  1903               	btfsc	3,2
  5538  1443  2C6D               	goto	l3978
  5539  1444  01F5               	clrf	___lwmod@counter
  5540  1445  0AF5               	incf	___lwmod@counter,f
  5541  1446                     l3968:	
  5542  1446  1BF1               	btfsc	___lwmod@divisor+1,7
  5543  1447  2C54               	goto	l3970
  5544  1448  3001               	movlw	1
  5545  1449                     u3145:	
  5546  1449  1003               	clrc
  5547  144A  0DF0               	rlf	___lwmod@divisor,f
  5548  144B  0DF1               	rlf	___lwmod@divisor+1,f
  5549  144C  3EFF               	addlw	-1
  5550  144D  1D03               	skipz
  5551  144E  2C49               	goto	u3145
  5552  144F  3001               	movlw	1
  5553  1450  00F4               	movwf	??___lwmod
  5554  1451  0874               	movf	??___lwmod,w
  5555  1452  07F5               	addwf	___lwmod@counter,f
  5556  1453  2C46               	goto	l3968
  5557  1454                     l3970:	
  5558  1454  0871               	movf	___lwmod@divisor+1,w
  5559  1455  0273               	subwf	___lwmod@dividend+1,w
  5560  1456  1D03               	skipz
  5561  1457  2C5A               	goto	u3165
  5562  1458  0870               	movf	___lwmod@divisor,w
  5563  1459  0272               	subwf	___lwmod@dividend,w
  5564  145A                     u3165:	
  5565  145A  1C03               	skipc
  5566  145B  2C62               	goto	l3974
  5567  145C  0870               	movf	___lwmod@divisor,w
  5568  145D  02F2               	subwf	___lwmod@dividend,f
  5569  145E  0871               	movf	___lwmod@divisor+1,w
  5570  145F  1C03               	skipc
  5571  1460  03F3               	decf	___lwmod@dividend+1,f
  5572  1461  02F3               	subwf	___lwmod@dividend+1,f
  5573  1462                     l3974:	
  5574  1462  3001               	movlw	1
  5575  1463                     u3175:	
  5576  1463  1003               	clrc
  5577  1464  0CF1               	rrf	___lwmod@divisor+1,f
  5578  1465  0CF0               	rrf	___lwmod@divisor,f
  5579  1466  3EFF               	addlw	-1
  5580  1467  1D03               	skipz
  5581  1468  2C63               	goto	u3175
  5582  1469  3001               	movlw	1
  5583  146A  02F5               	subwf	___lwmod@counter,f
  5584  146B  1D03               	btfss	3,2
  5585  146C  2C54               	goto	l3970
  5586  146D                     l3978:	
  5587  146D  0873               	movf	___lwmod@dividend+1,w
  5588  146E  00F1               	movwf	?___lwmod+1
  5589  146F  0872               	movf	___lwmod@dividend,w
  5590  1470  00F0               	movwf	?___lwmod
  5591  1471  0008               	return
  5592  1472                     __end_of___lwmod:	
  5593                           
  5594                           	psect	text20
  5595  0808                     __ptext20:	
  5596 ;; *************** function ___lwdiv *****************
  5597 ;; Defined at:
  5598 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  divisor         2    6[COMMON] unsigned int 
  5601 ;;  dividend        2    8[COMMON] unsigned int 
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;  quotient        2   11[COMMON] unsigned int 
  5604 ;;  counter         1   13[COMMON] unsigned char 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  2    6[COMMON] unsigned int 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2, status,0
  5609 ;; Tracked objects:
  5610 ;;		On entry : 300/0
  5611 ;;		On exit  : 300/0
  5612 ;;		Unchanged: 300/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5614 ;;      Params:         4       0       0       0       0
  5615 ;;      Locals:         3       0       0       0       0
  5616 ;;      Temps:          1       0       0       0       0
  5617 ;;      Totals:         8       0       0       0       0
  5618 ;;Total ram usage:        8 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_get_temp
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function ___lwdiv
  5629  0808                     ___lwdiv:	
  5630                           
  5631                           ;incstack = 0
  5632                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5633  0808  01FB               	clrf	___lwdiv@quotient
  5634  0809  01FC               	clrf	___lwdiv@quotient+1
  5635  080A  0876               	movf	___lwdiv@divisor,w
  5636  080B  0477               	iorwf	___lwdiv@divisor+1,w
  5637  080C  1903               	btfsc	3,2
  5638  080D  283F               	goto	l3956
  5639  080E  01FD               	clrf	___lwdiv@counter
  5640  080F  0AFD               	incf	___lwdiv@counter,f
  5641  0810                     l3944:	
  5642  0810  1BF7               	btfsc	___lwdiv@divisor+1,7
  5643  0811  281E               	goto	l3946
  5644  0812  3001               	movlw	1
  5645  0813                     u3075:	
  5646  0813  1003               	clrc
  5647  0814  0DF6               	rlf	___lwdiv@divisor,f
  5648  0815  0DF7               	rlf	___lwdiv@divisor+1,f
  5649  0816  3EFF               	addlw	-1
  5650  0817  1D03               	skipz
  5651  0818  2813               	goto	u3075
  5652  0819  3001               	movlw	1
  5653  081A  00FA               	movwf	??___lwdiv
  5654  081B  087A               	movf	??___lwdiv,w
  5655  081C  07FD               	addwf	___lwdiv@counter,f
  5656  081D  2810               	goto	l3944
  5657  081E                     l3946:	
  5658  081E  3001               	movlw	1
  5659  081F                     u3095:	
  5660  081F  1003               	clrc
  5661  0820  0DFB               	rlf	___lwdiv@quotient,f
  5662  0821  0DFC               	rlf	___lwdiv@quotient+1,f
  5663  0822  3EFF               	addlw	-1
  5664  0823  1D03               	skipz
  5665  0824  281F               	goto	u3095
  5666  0825  0877               	movf	___lwdiv@divisor+1,w
  5667  0826  0279               	subwf	___lwdiv@dividend+1,w
  5668  0827  1D03               	skipz
  5669  0828  282B               	goto	u3105
  5670  0829  0876               	movf	___lwdiv@divisor,w
  5671  082A  0278               	subwf	___lwdiv@dividend,w
  5672  082B                     u3105:	
  5673  082B  1C03               	skipc
  5674  082C  2834               	goto	l3952
  5675  082D  0876               	movf	___lwdiv@divisor,w
  5676  082E  02F8               	subwf	___lwdiv@dividend,f
  5677  082F  0877               	movf	___lwdiv@divisor+1,w
  5678  0830  1C03               	skipc
  5679  0831  03F9               	decf	___lwdiv@dividend+1,f
  5680  0832  02F9               	subwf	___lwdiv@dividend+1,f
  5681  0833  147B               	bsf	___lwdiv@quotient,0
  5682  0834                     l3952:	
  5683  0834  3001               	movlw	1
  5684  0835                     u3115:	
  5685  0835  1003               	clrc
  5686  0836  0CF7               	rrf	___lwdiv@divisor+1,f
  5687  0837  0CF6               	rrf	___lwdiv@divisor,f
  5688  0838  3EFF               	addlw	-1
  5689  0839  1D03               	skipz
  5690  083A  2835               	goto	u3115
  5691  083B  3001               	movlw	1
  5692  083C  02FD               	subwf	___lwdiv@counter,f
  5693  083D  1D03               	btfss	3,2
  5694  083E  281E               	goto	l3946
  5695  083F                     l3956:	
  5696  083F  087C               	movf	___lwdiv@quotient+1,w
  5697  0840  00F7               	movwf	?___lwdiv+1
  5698  0841  087B               	movf	___lwdiv@quotient,w
  5699  0842  00F6               	movwf	?___lwdiv
  5700  0843  0008               	return
  5701  0844                     __end_of___lwdiv:	
  5702                           
  5703                           	psect	text21
  5704  12FD                     __ptext21:	
  5705 ;; *************** function ___lbmod *****************
  5706 ;; Defined at:
  5707 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  dividend        1    wreg     unsigned char 
  5710 ;;  divisor         1    0[COMMON] unsigned char 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  dividend        1    4[COMMON] unsigned char 
  5713 ;;  rem             1    6[COMMON] unsigned char 
  5714 ;;  counter         1    5[COMMON] unsigned char 
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      unsigned char 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0
  5719 ;; Tracked objects:
  5720 ;;		On entry : 300/0
  5721 ;;		On exit  : 300/0
  5722 ;;		Unchanged: 300/0
  5723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5724 ;;      Params:         1       0       0       0       0
  5725 ;;      Locals:         3       0       0       0       0
  5726 ;;      Temps:          3       0       0       0       0
  5727 ;;      Totals:         7       0       0       0       0
  5728 ;;Total ram usage:        7 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_get_temp
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function ___lbmod
  5739  12FD                     ___lbmod:	
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5743                           ;___lbmod@dividend stored from wreg
  5744  12FD  00F4               	movwf	___lbmod@dividend
  5745  12FE  3008               	movlw	8
  5746  12FF  00F1               	movwf	??___lbmod
  5747  1300  0871               	movf	??___lbmod,w
  5748  1301  00F5               	movwf	___lbmod@counter
  5749  1302  01F6               	clrf	___lbmod@rem
  5750  1303                     l3922:	
  5751  1303  0874               	movf	___lbmod@dividend,w
  5752  1304  00F1               	movwf	??___lbmod
  5753  1305  3007               	movlw	7
  5754  1306                     u3035:	
  5755  1306  1003               	clrc
  5756  1307  0CF1               	rrf	??___lbmod,f
  5757  1308  3EFF               	addlw	-1
  5758  1309  1D03               	skipz
  5759  130A  2B06               	goto	u3035
  5760  130B  0876               	movf	___lbmod@rem,w
  5761  130C  00F2               	movwf	??___lbmod+1
  5762  130D  0772               	addwf	??___lbmod+1,w
  5763  130E  0471               	iorwf	??___lbmod,w
  5764  130F  00F3               	movwf	??___lbmod+2
  5765  1310  0873               	movf	??___lbmod+2,w
  5766  1311  00F6               	movwf	___lbmod@rem
  5767  1312  1003               	clrc
  5768  1313  0DF4               	rlf	___lbmod@dividend,f
  5769  1314  0870               	movf	___lbmod@divisor,w
  5770  1315  0276               	subwf	___lbmod@rem,w
  5771  1316  1C03               	skipc
  5772  1317  2B1A               	goto	l1374
  5773  1318  0870               	movf	___lbmod@divisor,w
  5774  1319  02F6               	subwf	___lbmod@rem,f
  5775  131A                     l1374:	
  5776  131A  3001               	movlw	1
  5777  131B  02F5               	subwf	___lbmod@counter,f
  5778  131C  1D03               	btfss	3,2
  5779  131D  2B03               	goto	l3922
  5780  131E  0876               	movf	___lbmod@rem,w
  5781  131F  0008               	return
  5782  1320                     __end_of___lbmod:	
  5783                           
  5784                           	psect	text22
  5785  12DC                     __ptext22:	
  5786 ;; *************** function ___lbdiv *****************
  5787 ;; Defined at:
  5788 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  dividend        1    wreg     unsigned char 
  5791 ;;  divisor         1    0[COMMON] unsigned char 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  dividend        1    2[COMMON] unsigned char 
  5794 ;;  quotient        1    4[COMMON] unsigned char 
  5795 ;;  counter         1    3[COMMON] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      unsigned char 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0
  5800 ;; Tracked objects:
  5801 ;;		On entry : 300/0
  5802 ;;		On exit  : 300/0
  5803 ;;		Unchanged: 300/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5805 ;;      Params:         1       0       0       0       0
  5806 ;;      Locals:         3       0       0       0       0
  5807 ;;      Temps:          1       0       0       0       0
  5808 ;;      Totals:         5       0       0       0       0
  5809 ;;Total ram usage:        5 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_get_temp
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function ___lbdiv
  5820  12DC                     ___lbdiv:	
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5824                           ;___lbdiv@dividend stored from wreg
  5825  12DC  00F2               	movwf	___lbdiv@dividend
  5826  12DD  01F4               	clrf	___lbdiv@quotient
  5827  12DE  0870               	movf	___lbdiv@divisor,w
  5828  12DF  1903               	btfsc	3,2
  5829  12E0  2AFB               	goto	l3914
  5830  12E1  01F3               	clrf	___lbdiv@counter
  5831  12E2  0AF3               	incf	___lbdiv@counter,f
  5832  12E3                     l3902:	
  5833  12E3  1BF0               	btfsc	___lbdiv@divisor,7
  5834  12E4  2AEC               	goto	l3904
  5835  12E5  1003               	clrc
  5836  12E6  0DF0               	rlf	___lbdiv@divisor,f
  5837  12E7  3001               	movlw	1
  5838  12E8  00F1               	movwf	??___lbdiv
  5839  12E9  0871               	movf	??___lbdiv,w
  5840  12EA  07F3               	addwf	___lbdiv@counter,f
  5841  12EB  2AE3               	goto	l3902
  5842  12EC                     l3904:	
  5843  12EC  1003               	clrc
  5844  12ED  0DF4               	rlf	___lbdiv@quotient,f
  5845  12EE  0870               	movf	___lbdiv@divisor,w
  5846  12EF  0272               	subwf	___lbdiv@dividend,w
  5847  12F0  1C03               	skipc
  5848  12F1  2AF6               	goto	L2
  5849  12F2  0870               	movf	___lbdiv@divisor,w
  5850  12F3  02F2               	subwf	___lbdiv@dividend,f
  5851  12F4  1474               	bsf	___lbdiv@quotient,0
  5852  12F5  1003               	clrc
  5853  12F6                     L2:	
  5854  12F6  0CF0               	rrf	___lbdiv@divisor,f
  5855  12F7  3001               	movlw	1
  5856  12F8  02F3               	subwf	___lbdiv@counter,f
  5857  12F9  1D03               	btfss	3,2
  5858  12FA  2AEC               	goto	l3904
  5859  12FB                     l3914:	
  5860  12FB  0874               	movf	___lbdiv@quotient,w
  5861  12FC  0008               	return
  5862  12FD                     __end_of___lbdiv:	
  5863                           
  5864                           	psect	text23
  5865  11F0                     __ptext23:	
  5866 ;; *************** function _ds1302_init *****************
  5867 ;; Defined at:
  5868 ;;		line 3 in file "clock_src.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;		None
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 300/0
  5879 ;;		On exit  : 300/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5882 ;;      Params:         0       0       0       0       0
  5883 ;;      Locals:         0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0
  5885 ;;      Totals:         0       0       0       0       0
  5886 ;;Total ram usage:        0 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    1
  5889 ;; This function calls:
  5890 ;;		_time_write_1
  5891 ;; This function is called by:
  5892 ;;		_main
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _ds1302_init
  5898  11F0                     _ds1302_init:	
  5899                           
  5900                           ;clock_src.c: 5:    RB0=0;
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in _ds1302_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5904  11F0  1006               	bcf	6,0	;volatile
  5905                           
  5906                           ;clock_src.c: 6:    RB5 =0;
  5907  11F1  1286               	bcf	6,5	;volatile
  5908                           
  5909                           ;clock_src.c: 7:    RB5=1;
  5910  11F2  1686               	bsf	6,5	;volatile
  5911                           
  5912                           ;clock_src.c: 8:    time_write_1(0x8e);
  5913  11F3  308E               	movlw	142
  5914  11F4  160A  118A  2367  160A  118A  	fcall	_time_write_1
  5915                           
  5916                           ;clock_src.c: 9:    time_write_1(0);
  5917  11F9  3000               	movlw	0
  5918  11FA  160A  118A  2367   	fcall	_time_write_1
  5919                           
  5920                           ;clock_src.c: 10:    RB5=0;
  5921  11FD  1286               	bcf	6,5	;volatile
  5922  11FE  0008               	return
  5923  11FF                     __end_of_ds1302_init:	
  5924                           
  5925                           	psect	text24
  5926  12BB                     __ptext24:	
  5927 ;; *************** function _display_temp *****************
  5928 ;; Defined at:
  5929 ;;		line 12 in file "Thermometer_src.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;		None
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;		None
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      void 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 300/0
  5940 ;;		On exit  : 300/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5943 ;;      Params:         0       0       0       0       0
  5944 ;;      Locals:         0       0       0       0       0
  5945 ;;      Temps:          0       0       0       0       0
  5946 ;;      Totals:         0       0       0       0       0
  5947 ;;Total ram usage:        0 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    2
  5950 ;; This function calls:
  5951 ;;		_write_char
  5952 ;; This function is called by:
  5953 ;;		_main
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _display_temp
  5959  12BB                     _display_temp:	
  5960                           
  5961                           ;Thermometer_src.c: 14:  write_char(shi + '0');
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _display_temp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5965  12BB  085B               	movf	_shi,w
  5966  12BC  3E30               	addlw	48
  5967  12BD  160A  118A  2270  160A  118A  	fcall	_write_char
  5968                           
  5969                           ;Thermometer_src.c: 16:  write_char(ge + '0');
  5970  12C2  085A               	movf	_ge,w
  5971  12C3  3E30               	addlw	48
  5972  12C4  160A  118A  2270  160A  118A  	fcall	_write_char
  5973                           
  5974                           ;Thermometer_src.c: 17:  write_char('.');
  5975  12C9  302E               	movlw	46
  5976  12CA  160A  118A  2270  160A  118A  	fcall	_write_char
  5977                           
  5978                           ;Thermometer_src.c: 19:  write_char(shifen + '0');
  5979  12CF  0859               	movf	_shifen,w
  5980  12D0  3E30               	addlw	48
  5981  12D1  160A  118A  2270  160A  118A  	fcall	_write_char
  5982                           
  5983                           ;Thermometer_src.c: 21:  write_char(baifen + '0');
  5984  12D6  0858               	movf	_baifen,w
  5985  12D7  3E30               	addlw	48
  5986  12D8  160A  118A  2270   	fcall	_write_char
  5987  12DB  0008               	return
  5988  12DC                     __end_of_display_temp:	
  5989                           
  5990                           	psect	text25
  5991  000D                     __ptext25:	
  5992 ;; *************** function _display_day *****************
  5993 ;; Defined at:
  5994 ;;		line 4 in file "Day_of_week_src.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  num             2    3[COMMON] int 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;		None
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 300/100
  6005 ;;		On exit  : 200/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6008 ;;      Params:         2       0       0       0       0
  6009 ;;      Locals:         0       0       0       0       0
  6010 ;;      Temps:          0       0       0       0       0
  6011 ;;      Totals:         2       0       0       0       0
  6012 ;;Total ram usage:        2 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    2
  6015 ;; This function calls:
  6016 ;;		_write_char
  6017 ;; This function is called by:
  6018 ;;		_main
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _display_day
  6024  000D                     _display_day:	
  6025                           
  6026                           ;Day_of_week_src.c: 5:     if(num == 1 || num == 0){
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _display_day: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6030  000D  0373               	decf	display_day@num,w
  6031  000E  0474               	iorwf	display_day@num+1,w
  6032  000F  1903               	btfsc	3,2
  6033  0010  2815               	goto	l5076
  6034  0011  0873               	movf	display_day@num,w
  6035  0012  0474               	iorwf	display_day@num+1,w
  6036  0013  1D03               	btfss	3,2
  6037  0014  2821               	goto	l5078
  6038  0015                     l5076:	
  6039                           
  6040                           ;Day_of_week_src.c: 6:     write_char('M');
  6041  0015  304D               	movlw	77
  6042  0016  160A  118A  2270  120A  118A  	fcall	_write_char
  6043                           
  6044                           ;Day_of_week_src.c: 7:     write_char('o');
  6045  001B  306F               	movlw	111
  6046  001C  160A  118A  2270  120A  118A  	fcall	_write_char
  6047  0021                     l5078:	
  6048                           
  6049                           ;Day_of_week_src.c: 10:     if(num == 2){
  6050  0021  3002               	movlw	2
  6051  0022  0673               	xorwf	display_day@num,w
  6052  0023  0474               	iorwf	display_day@num+1,w
  6053  0024  1D03               	btfss	3,2
  6054  0025  2832               	goto	l5082
  6055                           
  6056                           ;Day_of_week_src.c: 11:     write_char('T');
  6057  0026  3054               	movlw	84
  6058  0027  160A  118A  2270  120A  118A  	fcall	_write_char
  6059                           
  6060                           ;Day_of_week_src.c: 12:     write_char('u');
  6061  002C  3075               	movlw	117
  6062  002D  160A  118A  2270  120A  118A  	fcall	_write_char
  6063  0032                     l5082:	
  6064                           
  6065                           ;Day_of_week_src.c: 15:     if(num == 3){
  6066  0032  3003               	movlw	3
  6067  0033  0673               	xorwf	display_day@num,w
  6068  0034  0474               	iorwf	display_day@num+1,w
  6069  0035  1D03               	btfss	3,2
  6070  0036  2843               	goto	l5086
  6071                           
  6072                           ;Day_of_week_src.c: 16:     write_char('W');
  6073  0037  3057               	movlw	87
  6074  0038  160A  118A  2270  120A  118A  	fcall	_write_char
  6075                           
  6076                           ;Day_of_week_src.c: 17:     write_char('e');
  6077  003D  3065               	movlw	101
  6078  003E  160A  118A  2270  120A  118A  	fcall	_write_char
  6079  0043                     l5086:	
  6080                           
  6081                           ;Day_of_week_src.c: 20:     if(num == 4){
  6082  0043  3004               	movlw	4
  6083  0044  0673               	xorwf	display_day@num,w
  6084  0045  0474               	iorwf	display_day@num+1,w
  6085  0046  1D03               	btfss	3,2
  6086  0047  2854               	goto	l5090
  6087                           
  6088                           ;Day_of_week_src.c: 21:     write_char('T');
  6089  0048  3054               	movlw	84
  6090  0049  160A  118A  2270  120A  118A  	fcall	_write_char
  6091                           
  6092                           ;Day_of_week_src.c: 22:     write_char('h');
  6093  004E  3068               	movlw	104
  6094  004F  160A  118A  2270  120A  118A  	fcall	_write_char
  6095  0054                     l5090:	
  6096                           
  6097                           ;Day_of_week_src.c: 25:     if(num == 5){
  6098  0054  3005               	movlw	5
  6099  0055  0673               	xorwf	display_day@num,w
  6100  0056  0474               	iorwf	display_day@num+1,w
  6101  0057  1D03               	btfss	3,2
  6102  0058  2865               	goto	l5094
  6103                           
  6104                           ;Day_of_week_src.c: 26:     write_char('F');
  6105  0059  3046               	movlw	70
  6106  005A  160A  118A  2270  120A  118A  	fcall	_write_char
  6107                           
  6108                           ;Day_of_week_src.c: 27:     write_char('r');
  6109  005F  3072               	movlw	114
  6110  0060  160A  118A  2270  120A  118A  	fcall	_write_char
  6111  0065                     l5094:	
  6112                           
  6113                           ;Day_of_week_src.c: 30:     if(num == 6){
  6114  0065  3006               	movlw	6
  6115  0066  0673               	xorwf	display_day@num,w
  6116  0067  0474               	iorwf	display_day@num+1,w
  6117  0068  1D03               	btfss	3,2
  6118  0069  2876               	goto	l5098
  6119                           
  6120                           ;Day_of_week_src.c: 31:     write_char('S');
  6121  006A  3053               	movlw	83
  6122  006B  160A  118A  2270  120A  118A  	fcall	_write_char
  6123                           
  6124                           ;Day_of_week_src.c: 32:     write_char('a');
  6125  0070  3061               	movlw	97
  6126  0071  160A  118A  2270  120A  118A  	fcall	_write_char
  6127  0076                     l5098:	
  6128                           
  6129                           ;Day_of_week_src.c: 35:     if(num == 7){
  6130  0076  3007               	movlw	7
  6131  0077  0673               	xorwf	display_day@num,w
  6132  0078  0474               	iorwf	display_day@num+1,w
  6133  0079  1D03               	btfss	3,2
  6134  007A  0008               	return
  6135                           
  6136                           ;Day_of_week_src.c: 36:     write_char('S');
  6137  007B  3053               	movlw	83
  6138  007C  160A  118A  2270  120A  118A  	fcall	_write_char
  6139                           
  6140                           ;Day_of_week_src.c: 37:     write_char('u');
  6141  0081  3075               	movlw	117
  6142  0082  160A  118A  2270   	fcall	_write_char
  6143  0085  0008               	return
  6144  0086                     __end_of_display_day:	
  6145                           
  6146                           	psect	text26
  6147  165C                     __ptext26:	
  6148 ;; *************** function _display_date *****************
  6149 ;; Defined at:
  6150 ;;		line 77 in file "clock_src.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  i               2    5[COMMON] int 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6159 ;; Tracked objects:
  6160 ;;		On entry : 300/0
  6161 ;;		On exit  : 300/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6164 ;;      Params:         0       0       0       0       0
  6165 ;;      Locals:         2       0       0       0       0
  6166 ;;      Temps:          2       0       0       0       0
  6167 ;;      Totals:         4       0       0       0       0
  6168 ;;Total ram usage:        4 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    2
  6171 ;; This function calls:
  6172 ;;		_write_char
  6173 ;; This function is called by:
  6174 ;;		_main
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           
  6179                           ;psect for function _display_date
  6180  165C                     _display_date:	
  6181                           
  6182                           ;clock_src.c: 79:      int i;;clock_src.c: 80:      if(RB1==0)
  6183                           
  6184                           ;incstack = 0
  6185                           ; Regs used in _display_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6186  165C  1886               	btfsc	6,1	;volatile
  6187  165D  2E67               	goto	l4110
  6188                           
  6189                           ;clock_src.c: 81:        {;clock_src.c: 82:           table1[0]=table1[3];
  6190  165E  1683               	bsf	3,5	;RP0=1, select bank1
  6191  165F  0823               	movf	(_table1^(0+128)+3),w
  6192  1660  00F3               	movwf	??_display_date
  6193  1661  0873               	movf	??_display_date,w
  6194  1662  00A0               	movwf	_table1^(0+128)
  6195                           
  6196                           ;clock_src.c: 83:           table1[1]=table1[4];
  6197  1663  0824               	movf	(_table1^(0+128)+4),w
  6198  1664  00F3               	movwf	??_display_date
  6199  1665  0873               	movf	??_display_date,w
  6200  1666  00A1               	movwf	(_table1^(0+128)+1)
  6201  1667                     l4110:	
  6202                           
  6203                           ;clock_src.c: 85:      i=table1[3]&0xf0;
  6204  1667  1683               	bsf	3,5	;RP0=1, select bank1
  6205  1668  0823               	movf	(_table1^(0+128)+3),w
  6206  1669  39F0               	andlw	240
  6207  166A  00F3               	movwf	??_display_date
  6208  166B  01F4               	clrf	??_display_date+1
  6209  166C  0873               	movf	??_display_date,w
  6210  166D  00F5               	movwf	display_date@i
  6211  166E  0874               	movf	??_display_date+1,w
  6212  166F  00F6               	movwf	display_date@i+1
  6213                           
  6214                           ;clock_src.c: 86:      i=i>>4;
  6215  1670  0E75               	swapf	display_date@i,w
  6216  1671  390F               	andlw	15
  6217  1672  00F5               	movwf	display_date@i
  6218  1673  0E76               	swapf	display_date@i+1,w
  6219  1674  39F0               	andlw	240
  6220  1675  04F5               	iorwf	display_date@i,f
  6221  1676  0E76               	swapf	display_date@i+1,w
  6222  1677  390F               	andlw	15
  6223  1678  00F6               	movwf	display_date@i+1
  6224  1679  30F0               	movlw	240
  6225  167A  1DF6               	btfss	display_date@i+1,3
  6226  167B  3000               	movlw	0
  6227  167C  04F6               	iorwf	display_date@i+1,f
  6228                           
  6229                           ;clock_src.c: 87:      write_char(i + '0');
  6230  167D  0875               	movf	display_date@i,w
  6231  167E  3E30               	addlw	48
  6232  167F  160A  118A  2270  160A  118A  	fcall	_write_char
  6233                           
  6234                           ;clock_src.c: 89:      i=table1[3]&0x0f;
  6235  1684  1683               	bsf	3,5	;RP0=1, select bank1
  6236  1685  0823               	movf	(_table1^(0+128)+3),w
  6237  1686  390F               	andlw	15
  6238  1687  00F3               	movwf	??_display_date
  6239  1688  01F4               	clrf	??_display_date+1
  6240  1689  0873               	movf	??_display_date,w
  6241  168A  00F5               	movwf	display_date@i
  6242  168B  0874               	movf	??_display_date+1,w
  6243  168C  00F6               	movwf	display_date@i+1
  6244                           
  6245                           ;clock_src.c: 90:      write_char(i + '0');
  6246  168D  0875               	movf	display_date@i,w
  6247  168E  3E30               	addlw	48
  6248  168F  160A  118A  2270  160A  118A  	fcall	_write_char
  6249                           
  6250                           ;clock_src.c: 91:      write_char('/');
  6251  1694  302F               	movlw	47
  6252  1695  160A  118A  2270  160A  118A  	fcall	_write_char
  6253                           
  6254                           ;clock_src.c: 95:      i=table1[4]&0xf0;
  6255  169A  1683               	bsf	3,5	;RP0=1, select bank1
  6256  169B  0824               	movf	(_table1^(0+128)+4),w
  6257  169C  39F0               	andlw	240
  6258  169D  00F3               	movwf	??_display_date
  6259  169E  01F4               	clrf	??_display_date+1
  6260  169F  0873               	movf	??_display_date,w
  6261  16A0  00F5               	movwf	display_date@i
  6262  16A1  0874               	movf	??_display_date+1,w
  6263  16A2  00F6               	movwf	display_date@i+1
  6264                           
  6265                           ;clock_src.c: 96:      i=i>>4;
  6266  16A3  0E75               	swapf	display_date@i,w
  6267  16A4  390F               	andlw	15
  6268  16A5  00F5               	movwf	display_date@i
  6269  16A6  0E76               	swapf	display_date@i+1,w
  6270  16A7  39F0               	andlw	240
  6271  16A8  04F5               	iorwf	display_date@i,f
  6272  16A9  0E76               	swapf	display_date@i+1,w
  6273  16AA  390F               	andlw	15
  6274  16AB  00F6               	movwf	display_date@i+1
  6275  16AC  30F0               	movlw	240
  6276  16AD  1DF6               	btfss	display_date@i+1,3
  6277  16AE  3000               	movlw	0
  6278  16AF  04F6               	iorwf	display_date@i+1,f
  6279                           
  6280                           ;clock_src.c: 97:      write_char(i + '0');
  6281  16B0  0875               	movf	display_date@i,w
  6282  16B1  3E30               	addlw	48
  6283  16B2  160A  118A  2270  160A  118A  	fcall	_write_char
  6284                           
  6285                           ;clock_src.c: 99:      i=table1[4]&0x0f;
  6286  16B7  1683               	bsf	3,5	;RP0=1, select bank1
  6287  16B8  0824               	movf	(_table1^(0+128)+4),w
  6288  16B9  390F               	andlw	15
  6289  16BA  00F3               	movwf	??_display_date
  6290  16BB  01F4               	clrf	??_display_date+1
  6291  16BC  0873               	movf	??_display_date,w
  6292  16BD  00F5               	movwf	display_date@i
  6293  16BE  0874               	movf	??_display_date+1,w
  6294  16BF  00F6               	movwf	display_date@i+1
  6295                           
  6296                           ;clock_src.c: 100:      write_char(i + '0');
  6297  16C0  0875               	movf	display_date@i,w
  6298  16C1  3E30               	addlw	48
  6299  16C2  160A  118A  2270  160A  118A  	fcall	_write_char
  6300                           
  6301                           ;clock_src.c: 101:      write_char('/');
  6302  16C7  302F               	movlw	47
  6303  16C8  160A  118A  2270  160A  118A  	fcall	_write_char
  6304                           
  6305                           ;clock_src.c: 105:      i=table1[6]&0xf0;
  6306  16CD  1683               	bsf	3,5	;RP0=1, select bank1
  6307  16CE  0826               	movf	(_table1^(0+128)+6),w
  6308  16CF  39F0               	andlw	240
  6309  16D0  00F3               	movwf	??_display_date
  6310  16D1  01F4               	clrf	??_display_date+1
  6311  16D2  0873               	movf	??_display_date,w
  6312  16D3  00F5               	movwf	display_date@i
  6313  16D4  0874               	movf	??_display_date+1,w
  6314  16D5  00F6               	movwf	display_date@i+1
  6315                           
  6316                           ;clock_src.c: 106:      i=i>>4;
  6317  16D6  0E75               	swapf	display_date@i,w
  6318  16D7  390F               	andlw	15
  6319  16D8  00F5               	movwf	display_date@i
  6320  16D9  0E76               	swapf	display_date@i+1,w
  6321  16DA  39F0               	andlw	240
  6322  16DB  04F5               	iorwf	display_date@i,f
  6323  16DC  0E76               	swapf	display_date@i+1,w
  6324  16DD  390F               	andlw	15
  6325  16DE  00F6               	movwf	display_date@i+1
  6326  16DF  30F0               	movlw	240
  6327  16E0  1DF6               	btfss	display_date@i+1,3
  6328  16E1  3000               	movlw	0
  6329  16E2  04F6               	iorwf	display_date@i+1,f
  6330                           
  6331                           ;clock_src.c: 107:      write_char(i + '0');
  6332  16E3  0875               	movf	display_date@i,w
  6333  16E4  3E30               	addlw	48
  6334  16E5  160A  118A  2270  160A  118A  	fcall	_write_char
  6335                           
  6336                           ;clock_src.c: 109:      i=table1[6]&0x0f;
  6337  16EA  1683               	bsf	3,5	;RP0=1, select bank1
  6338  16EB  0826               	movf	(_table1^(0+128)+6),w
  6339  16EC  390F               	andlw	15
  6340  16ED  00F3               	movwf	??_display_date
  6341  16EE  01F4               	clrf	??_display_date+1
  6342  16EF  0873               	movf	??_display_date,w
  6343  16F0  00F5               	movwf	display_date@i
  6344  16F1  0874               	movf	??_display_date+1,w
  6345  16F2  00F6               	movwf	display_date@i+1
  6346                           
  6347                           ;clock_src.c: 110:      write_char(i + '0');
  6348  16F3  0875               	movf	display_date@i,w
  6349  16F4  3E30               	addlw	48
  6350  16F5  160A  118A  2270   	fcall	_write_char
  6351  16F8  0008               	return
  6352  16F9                     __end_of_display_date:	
  6353                           
  6354                           	psect	text27
  6355  0844                     __ptext27:	
  6356 ;; *************** function _display_clock *****************
  6357 ;; Defined at:
  6358 ;;		line 34 in file "clock_src.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  i               2    5[COMMON] int 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      void 
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 300/0
  6369 ;;		On exit  : 300/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6372 ;;      Params:         0       0       0       0       0
  6373 ;;      Locals:         2       0       0       0       0
  6374 ;;      Temps:          2       0       0       0       0
  6375 ;;      Totals:         4       0       0       0       0
  6376 ;;Total ram usage:        4 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    2
  6379 ;; This function calls:
  6380 ;;		_write_char
  6381 ;; This function is called by:
  6382 ;;		_main
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function _display_clock
  6388  0844                     _display_clock:	
  6389                           
  6390                           ;clock_src.c: 36:      int i;;clock_src.c: 37:      if(RB1==0)
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _display_clock: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6394  0844  1886               	btfsc	6,1	;volatile
  6395  0845  284F               	goto	l4148
  6396                           
  6397                           ;clock_src.c: 38:        {;clock_src.c: 39:           table1[0]=table1[3];
  6398  0846  1683               	bsf	3,5	;RP0=1, select bank1
  6399  0847  0823               	movf	(_table1^(0+128)+3),w
  6400  0848  00F3               	movwf	??_display_clock
  6401  0849  0873               	movf	??_display_clock,w
  6402  084A  00A0               	movwf	_table1^(0+128)
  6403                           
  6404                           ;clock_src.c: 40:           table1[1]=table1[4];
  6405  084B  0824               	movf	(_table1^(0+128)+4),w
  6406  084C  00F3               	movwf	??_display_clock
  6407  084D  0873               	movf	??_display_clock,w
  6408  084E  00A1               	movwf	(_table1^(0+128)+1)
  6409  084F                     l4148:	
  6410                           
  6411                           ;clock_src.c: 43:      i=table1[2]&0xf0;
  6412  084F  1683               	bsf	3,5	;RP0=1, select bank1
  6413  0850  0822               	movf	(_table1^(0+128)+2),w
  6414  0851  39F0               	andlw	240
  6415  0852  00F3               	movwf	??_display_clock
  6416  0853  01F4               	clrf	??_display_clock+1
  6417  0854  0873               	movf	??_display_clock,w
  6418  0855  00F5               	movwf	display_clock@i
  6419  0856  0874               	movf	??_display_clock+1,w
  6420  0857  00F6               	movwf	display_clock@i+1
  6421                           
  6422                           ;clock_src.c: 44:      i=i>>4;
  6423  0858  0E75               	swapf	display_clock@i,w
  6424  0859  390F               	andlw	15
  6425  085A  00F5               	movwf	display_clock@i
  6426  085B  0E76               	swapf	display_clock@i+1,w
  6427  085C  39F0               	andlw	240
  6428  085D  04F5               	iorwf	display_clock@i,f
  6429  085E  0E76               	swapf	display_clock@i+1,w
  6430  085F  390F               	andlw	15
  6431  0860  00F6               	movwf	display_clock@i+1
  6432  0861  30F0               	movlw	240
  6433  0862  1DF6               	btfss	display_clock@i+1,3
  6434  0863  3000               	movlw	0
  6435  0864  04F6               	iorwf	display_clock@i+1,f
  6436                           
  6437                           ;clock_src.c: 45:      write_char(i + '0');
  6438  0865  0875               	movf	display_clock@i,w
  6439  0866  3E30               	addlw	48
  6440  0867  160A  118A  2270  120A  158A  	fcall	_write_char
  6441                           
  6442                           ;clock_src.c: 46:      temp_high = i;
  6443  086C  0875               	movf	display_clock@i,w
  6444  086D  00F3               	movwf	??_display_clock
  6445  086E  0873               	movf	??_display_clock,w
  6446  086F  00CB               	movwf	_temp_high
  6447                           
  6448                           ;clock_src.c: 49:      i=table1[2]&0x0f;
  6449  0870  1683               	bsf	3,5	;RP0=1, select bank1
  6450  0871  0822               	movf	(_table1^(0+128)+2),w
  6451  0872  390F               	andlw	15
  6452  0873  00F3               	movwf	??_display_clock
  6453  0874  01F4               	clrf	??_display_clock+1
  6454  0875  0873               	movf	??_display_clock,w
  6455  0876  00F5               	movwf	display_clock@i
  6456  0877  0874               	movf	??_display_clock+1,w
  6457  0878  00F6               	movwf	display_clock@i+1
  6458                           
  6459                           ;clock_src.c: 50:      write_char(i + '0');
  6460  0879  0875               	movf	display_clock@i,w
  6461  087A  3E30               	addlw	48
  6462  087B  160A  118A  2270  120A  158A  	fcall	_write_char
  6463                           
  6464                           ;clock_src.c: 51:      write_char(':');
  6465  0880  303A               	movlw	58
  6466  0881  160A  118A  2270  120A  158A  	fcall	_write_char
  6467                           
  6468                           ;clock_src.c: 52:      temp_low = i;
  6469  0886  0875               	movf	display_clock@i,w
  6470  0887  00F3               	movwf	??_display_clock
  6471  0888  0873               	movf	??_display_clock,w
  6472  0889  00CC               	movwf	_temp_low
  6473                           
  6474                           ;clock_src.c: 55:      i=table1[1]&0xf0;
  6475  088A  1683               	bsf	3,5	;RP0=1, select bank1
  6476  088B  0821               	movf	(_table1^(0+128)+1),w
  6477  088C  39F0               	andlw	240
  6478  088D  00F3               	movwf	??_display_clock
  6479  088E  01F4               	clrf	??_display_clock+1
  6480  088F  0873               	movf	??_display_clock,w
  6481  0890  00F5               	movwf	display_clock@i
  6482  0891  0874               	movf	??_display_clock+1,w
  6483  0892  00F6               	movwf	display_clock@i+1
  6484                           
  6485                           ;clock_src.c: 56:      i=i>>4;
  6486  0893  0E75               	swapf	display_clock@i,w
  6487  0894  390F               	andlw	15
  6488  0895  00F5               	movwf	display_clock@i
  6489  0896  0E76               	swapf	display_clock@i+1,w
  6490  0897  39F0               	andlw	240
  6491  0898  04F5               	iorwf	display_clock@i,f
  6492  0899  0E76               	swapf	display_clock@i+1,w
  6493  089A  390F               	andlw	15
  6494  089B  00F6               	movwf	display_clock@i+1
  6495  089C  30F0               	movlw	240
  6496  089D  1DF6               	btfss	display_clock@i+1,3
  6497  089E  3000               	movlw	0
  6498  089F  04F6               	iorwf	display_clock@i+1,f
  6499                           
  6500                           ;clock_src.c: 57:      write_char(i + '0');
  6501  08A0  0875               	movf	display_clock@i,w
  6502  08A1  3E30               	addlw	48
  6503  08A2  160A  118A  2270  120A  158A  	fcall	_write_char
  6504                           
  6505                           ;clock_src.c: 60:      i=table1[1]&0x0f;
  6506  08A7  1683               	bsf	3,5	;RP0=1, select bank1
  6507  08A8  0821               	movf	(_table1^(0+128)+1),w
  6508  08A9  390F               	andlw	15
  6509  08AA  00F3               	movwf	??_display_clock
  6510  08AB  01F4               	clrf	??_display_clock+1
  6511  08AC  0873               	movf	??_display_clock,w
  6512  08AD  00F5               	movwf	display_clock@i
  6513  08AE  0874               	movf	??_display_clock+1,w
  6514  08AF  00F6               	movwf	display_clock@i+1
  6515                           
  6516                           ;clock_src.c: 61:      write_char(i + '0');
  6517  08B0  0875               	movf	display_clock@i,w
  6518  08B1  3E30               	addlw	48
  6519  08B2  160A  118A  2270  120A  158A  	fcall	_write_char
  6520                           
  6521                           ;clock_src.c: 62:      write_char(':');
  6522  08B7  303A               	movlw	58
  6523  08B8  160A  118A  2270  120A  158A  	fcall	_write_char
  6524                           
  6525                           ;clock_src.c: 65:      i=table1[0]&0xf0;
  6526  08BD  1683               	bsf	3,5	;RP0=1, select bank1
  6527  08BE  0820               	movf	_table1^(0+128),w
  6528  08BF  39F0               	andlw	240
  6529  08C0  00F3               	movwf	??_display_clock
  6530  08C1  01F4               	clrf	??_display_clock+1
  6531  08C2  0873               	movf	??_display_clock,w
  6532  08C3  00F5               	movwf	display_clock@i
  6533  08C4  0874               	movf	??_display_clock+1,w
  6534  08C5  00F6               	movwf	display_clock@i+1
  6535                           
  6536                           ;clock_src.c: 66:      i=i>>4;
  6537  08C6  0E75               	swapf	display_clock@i,w
  6538  08C7  390F               	andlw	15
  6539  08C8  00F5               	movwf	display_clock@i
  6540  08C9  0E76               	swapf	display_clock@i+1,w
  6541  08CA  39F0               	andlw	240
  6542  08CB  04F5               	iorwf	display_clock@i,f
  6543  08CC  0E76               	swapf	display_clock@i+1,w
  6544  08CD  390F               	andlw	15
  6545  08CE  00F6               	movwf	display_clock@i+1
  6546  08CF  30F0               	movlw	240
  6547  08D0  1DF6               	btfss	display_clock@i+1,3
  6548  08D1  3000               	movlw	0
  6549  08D2  04F6               	iorwf	display_clock@i+1,f
  6550                           
  6551                           ;clock_src.c: 67:      write_char(i + '0');
  6552  08D3  0875               	movf	display_clock@i,w
  6553  08D4  3E30               	addlw	48
  6554  08D5  160A  118A  2270  120A  158A  	fcall	_write_char
  6555                           
  6556                           ;clock_src.c: 70:      i=table1[0]&0x0f;
  6557  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  6558  08DB  0820               	movf	_table1^(0+128),w
  6559  08DC  390F               	andlw	15
  6560  08DD  00F3               	movwf	??_display_clock
  6561  08DE  01F4               	clrf	??_display_clock+1
  6562  08DF  0873               	movf	??_display_clock,w
  6563  08E0  00F5               	movwf	display_clock@i
  6564  08E1  0874               	movf	??_display_clock+1,w
  6565  08E2  00F6               	movwf	display_clock@i+1
  6566                           
  6567                           ;clock_src.c: 71:      write_char(i + '0');
  6568  08E3  0875               	movf	display_clock@i,w
  6569  08E4  3E30               	addlw	48
  6570  08E5  160A  118A  2270   	fcall	_write_char
  6571  08E8  0008               	return
  6572  08E9                     __end_of_display_clock:	
  6573                           
  6574                           	psect	text28
  6575  0385                     __ptext28:	
  6576 ;; *************** function _date_settings *****************
  6577 ;; Defined at:
  6578 ;;		line 504 in file "Button_src.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;		None
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;		None
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      void 
  6585 ;; Registers used:
  6586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 300/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6592 ;;      Params:         0       0       0       0       0
  6593 ;;      Locals:         0       0       0       0       0
  6594 ;;      Temps:          0       3       0       0       0
  6595 ;;      Totals:         0       3       0       0       0
  6596 ;;Total ram usage:        3 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    3
  6599 ;; This function calls:
  6600 ;;		_button_delay
  6601 ;;		_incrementor
  6602 ;;		_modulus_func
  6603 ;;		_set_time
  6604 ;;		_time_date_delimiter
  6605 ;;		_time_date_hex_terminator
  6606 ;;		_write_char
  6607 ;;		_write_cmd
  6608 ;; This function is called by:
  6609 ;;		_main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _date_settings
  6615  0385                     _date_settings:	
  6616                           
  6617                           ;Button_src.c: 505:  RC0 = 0;
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _date_settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6621  0385  1283               	bcf	3,5	;RP0=0, select bank0
  6622  0386  1303               	bcf	3,6	;RP1=0, select bank0
  6623  0387  1007               	bcf	7,0	;volatile
  6624                           
  6625                           ;Button_src.c: 506:  RC1 = 1;
  6626  0388  1487               	bsf	7,1	;volatile
  6627                           
  6628                           ;Button_src.c: 507:  RC2 = 1;
  6629  0389  1507               	bsf	7,2	;volatile
  6630                           
  6631                           ;Button_src.c: 508:  RC3 = 1;
  6632  038A  1587               	bsf	7,3	;volatile
  6633                           
  6634                           ;Button_src.c: 509:   if (RC4 == 0){
  6635  038B  1A07               	btfsc	7,4	;volatile
  6636  038C  0008               	return
  6637                           
  6638                           ;Button_src.c: 510:       write_cmd(0x1);
  6639  038D  3001               	movlw	1
  6640  038E  160A  118A  2287  120A  118A  	fcall	_write_cmd
  6641  0393                     l811:	
  6642                           ;Button_src.c: 511:       for(;;){
  6643                           
  6644                           
  6645                           ;Button_src.c: 512:             write_cmd(0x80);
  6646  0393  3080               	movlw	128
  6647  0394  160A  118A  2287  120A  118A  	fcall	_write_cmd
  6648                           
  6649                           ;Button_src.c: 513:             write_char('D');
  6650  0399  3044               	movlw	68
  6651  039A  160A  118A  2270  120A  118A  	fcall	_write_char
  6652                           
  6653                           ;Button_src.c: 514:             write_char('a');
  6654  039F  3061               	movlw	97
  6655  03A0  160A  118A  2270  120A  118A  	fcall	_write_char
  6656                           
  6657                           ;Button_src.c: 515:             write_char('t');
  6658  03A5  3074               	movlw	116
  6659  03A6  160A  118A  2270  120A  118A  	fcall	_write_char
  6660                           
  6661                           ;Button_src.c: 516:             write_char('e');
  6662  03AB  3065               	movlw	101
  6663  03AC  160A  118A  2270  120A  118A  	fcall	_write_char
  6664                           
  6665                           ;Button_src.c: 517:             write_char('_');
  6666  03B1  305F               	movlw	95
  6667  03B2  160A  118A  2270  120A  118A  	fcall	_write_char
  6668                           
  6669                           ;Button_src.c: 518:             write_char('S');
  6670  03B7  3053               	movlw	83
  6671  03B8  160A  118A  2270  120A  118A  	fcall	_write_char
  6672                           
  6673                           ;Button_src.c: 519:             write_char('e');
  6674  03BD  3065               	movlw	101
  6675  03BE  160A  118A  2270  120A  118A  	fcall	_write_char
  6676                           
  6677                           ;Button_src.c: 520:             write_char('t');
  6678  03C3  3074               	movlw	116
  6679  03C4  160A  118A  2270  120A  118A  	fcall	_write_char
  6680                           
  6681                           ;Button_src.c: 521:             write_char('t');
  6682  03C9  3074               	movlw	116
  6683  03CA  160A  118A  2270  120A  118A  	fcall	_write_char
  6684                           
  6685                           ;Button_src.c: 522:             write_char('i');
  6686  03CF  3069               	movlw	105
  6687  03D0  160A  118A  2270  120A  118A  	fcall	_write_char
  6688                           
  6689                           ;Button_src.c: 523:             write_char('n');
  6690  03D5  306E               	movlw	110
  6691  03D6  160A  118A  2270  120A  118A  	fcall	_write_char
  6692                           
  6693                           ;Button_src.c: 524:             write_char('g');
  6694  03DB  3067               	movlw	103
  6695  03DC  160A  118A  2270  120A  118A  	fcall	_write_char
  6696                           
  6697                           ;Button_src.c: 525:             write_char('s');
  6698  03E1  3073               	movlw	115
  6699  03E2  160A  118A  2270  120A  118A  	fcall	_write_char
  6700                           
  6701                           ;Button_src.c: 526:             RC0 = 1;
  6702  03E7  1407               	bsf	7,0	;volatile
  6703                           
  6704                           ;Button_src.c: 527:             RC1 = 0;
  6705  03E8  1087               	bcf	7,1	;volatile
  6706                           
  6707                           ;Button_src.c: 528:             RC2 = 1;
  6708  03E9  1507               	bsf	7,2	;volatile
  6709                           
  6710                           ;Button_src.c: 529:             RC3 = 1;
  6711  03EA  1587               	bsf	7,3	;volatile
  6712                           
  6713                           ;Button_src.c: 530:             if(RC7 == 0 && b =='x'){
  6714  03EB  1B87               	btfsc	7,7	;volatile
  6715  03EC  2C5D               	goto	l4540
  6716  03ED  3078               	movlw	120
  6717  03EE  0649               	xorwf	_b,w
  6718  03EF  1D03               	btfss	3,2
  6719  03F0  2C5D               	goto	l4540
  6720                           
  6721                           ;Button_src.c: 531:                 if(stats == 1)
  6722  03F1  032A               	decf	_stats,w
  6723  03F2  042B               	iorwf	_stats+1,w
  6724  03F3  1D03               	btfss	3,2
  6725  03F4  2BF9               	goto	l813
  6726                           
  6727                           ;Button_src.c: 532:                     a++;
  6728  03F5  3001               	movlw	1
  6729  03F6  00E5               	movwf	??_date_settings
  6730  03F7  0865               	movf	??_date_settings,w
  6731  03F8  07CA               	addwf	_a,f
  6732  03F9                     l813:	
  6733                           
  6734                           ;Button_src.c: 533:                 if(stats == 0){
  6735  03F9  082A               	movf	_stats,w
  6736  03FA  042B               	iorwf	_stats+1,w
  6737  03FB  1D03               	btfss	3,2
  6738  03FC  2C01               	goto	l814
  6739                           
  6740                           ;Button_src.c: 534:                     stats = 1;
  6741  03FD  3001               	movlw	1
  6742  03FE  00AA               	movwf	_stats
  6743  03FF  3000               	movlw	0
  6744  0400  00AB               	movwf	_stats+1
  6745  0401                     l814:	
  6746                           ;Button_src.c: 535:                 }
  6747                           
  6748                           
  6749                           ;Button_src.c: 537:                     x++ ;
  6750  0401  3001               	movlw	1
  6751  0402  07B4               	addwf	_x,f
  6752  0403  1803               	skipnc
  6753  0404  0AB5               	incf	_x+1,f
  6754  0405  3000               	movlw	0
  6755  0406  07B5               	addwf	_x+1,f
  6756                           
  6757                           ;Button_src.c: 538:                     x = modulus_func(x,10);
  6758  0407  0835               	movf	_x+1,w
  6759  0408  00F8               	movwf	modulus_func@x+1
  6760  0409  0834               	movf	_x,w
  6761  040A  00F7               	movwf	modulus_func@x
  6762  040B  300A               	movlw	10
  6763  040C  00F9               	movwf	modulus_func@y
  6764  040D  3000               	movlw	0
  6765  040E  00FA               	movwf	modulus_func@y+1
  6766  040F  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  6767  0414  0878               	movf	?_modulus_func+1,w
  6768  0415  00B5               	movwf	_x+1
  6769  0416  0877               	movf	?_modulus_func,w
  6770  0417  00B4               	movwf	_x
  6771                           
  6772                           ;Button_src.c: 539:                      if (p == 1){
  6773  0418  0328               	decf	_p,w
  6774  0419  0429               	iorwf	_p+1,w
  6775  041A  1D03               	btfss	3,2
  6776  041B  2C35               	goto	l4526
  6777                           
  6778                           ;Button_src.c: 540:                         y = incrementor(y,x,'0');
  6779  041C  0833               	movf	_y+1,w
  6780  041D  00E1               	movwf	incrementor@upper_val+1
  6781  041E  0832               	movf	_y,w
  6782  041F  00E0               	movwf	incrementor@upper_val
  6783  0420  0835               	movf	_x+1,w
  6784  0421  00E3               	movwf	incrementor@lower_val+1
  6785  0422  0834               	movf	_x,w
  6786  0423  00E2               	movwf	incrementor@lower_val
  6787  0424  3030               	movlw	48
  6788  0425  00E5               	movwf	??_date_settings
  6789  0426  0865               	movf	??_date_settings,w
  6790  0427  00E4               	movwf	incrementor@z
  6791  0428  160A  118A  2343  120A  118A  	fcall	_incrementor
  6792  042D  00E6               	movwf	??_date_settings+1
  6793  042E  01E7               	clrf	??_date_settings+2
  6794  042F  0866               	movf	??_date_settings+1,w
  6795  0430  00B2               	movwf	_y
  6796  0431  0867               	movf	??_date_settings+2,w
  6797  0432  00B3               	movwf	_y+1
  6798                           
  6799                           ;Button_src.c: 541:                         p = 0;
  6800  0433  01A8               	clrf	_p
  6801  0434  01A9               	clrf	_p+1
  6802  0435                     l4526:	
  6803                           
  6804                           ;Button_src.c: 543:                     if (x == 9){
  6805  0435  3009               	movlw	9
  6806  0436  0634               	xorwf	_x,w
  6807  0437  0435               	iorwf	_x+1,w
  6808  0438  1D03               	btfss	3,2
  6809  0439  2C3E               	goto	l4530
  6810                           
  6811                           ;Button_src.c: 544:                         p = 1;
  6812  043A  3001               	movlw	1
  6813  043B  00A8               	movwf	_p
  6814  043C  3000               	movlw	0
  6815  043D  00A9               	movwf	_p+1
  6816  043E                     l4530:	
  6817                           
  6818                           ;Button_src.c: 546:                     a = time_date_hex_terminator(a,'C');
  6819  043E  3043               	movlw	67
  6820  043F  00E5               	movwf	??_date_settings
  6821  0440  0865               	movf	??_date_settings,w
  6822  0441  00F0               	movwf	time_date_hex_terminator@limiter
  6823  0442  084A               	movf	_a,w
  6824  0443  160A  118A  21E1  120A  118A  	fcall	_time_date_hex_terminator
  6825  0448  00E6               	movwf	??_date_settings+1
  6826  0449  0866               	movf	??_date_settings+1,w
  6827  044A  00CA               	movwf	_a
  6828                           
  6829                           ;Button_src.c: 548:                     if(y == 1 && x == 3){
  6830  044B  0332               	decf	_y,w
  6831  044C  0433               	iorwf	_y+1,w
  6832  044D  1D03               	btfss	3,2
  6833  044E  2C58               	goto	l4538
  6834  044F  3003               	movlw	3
  6835  0450  0634               	xorwf	_x,w
  6836  0451  0435               	iorwf	_x+1,w
  6837  0452  1D03               	btfss	3,2
  6838  0453  2C58               	goto	l4538
  6839                           
  6840                           ;Button_src.c: 549:                         x = 0;
  6841  0454  01B4               	clrf	_x
  6842  0455  01B5               	clrf	_x+1
  6843                           
  6844                           ;Button_src.c: 550:                         y = 0;
  6845  0456  01B2               	clrf	_y
  6846  0457  01B3               	clrf	_y+1
  6847  0458                     l4538:	
  6848                           
  6849                           ;Button_src.c: 552:                     button_delay();
  6850  0458  160A  118A  2234  120A  118A  	fcall	_button_delay
  6851  045D                     l4540:	
  6852                           
  6853                           ;Button_src.c: 554:             if(RC7==0 && b == 'y'){
  6854  045D  1283               	bcf	3,5	;RP0=0, select bank0
  6855  045E  1303               	bcf	3,6	;RP1=0, select bank0
  6856  045F  1B87               	btfsc	7,7	;volatile
  6857  0460  2CE5               	goto	l4574
  6858  0461  3079               	movlw	121
  6859  0462  0649               	xorwf	_b,w
  6860  0463  1D03               	btfss	3,2
  6861  0464  2CE5               	goto	l4574
  6862                           
  6863                           ;Button_src.c: 555:                  if(stats == 1)
  6864  0465  032A               	decf	_stats,w
  6865  0466  042B               	iorwf	_stats+1,w
  6866  0467  1D03               	btfss	3,2
  6867  0468  2C6D               	goto	l819
  6868                           
  6869                           ;Button_src.c: 556:                     day_hex++;
  6870  0469  3001               	movlw	1
  6871  046A  00E5               	movwf	??_date_settings
  6872  046B  0865               	movf	??_date_settings,w
  6873  046C  07C7               	addwf	_day_hex,f
  6874  046D                     l819:	
  6875                           
  6876                           ;Button_src.c: 557:                 if(stats == 0){
  6877  046D  082A               	movf	_stats,w
  6878  046E  042B               	iorwf	_stats+1,w
  6879  046F  1D03               	btfss	3,2
  6880  0470  2C75               	goto	l820
  6881                           
  6882                           ;Button_src.c: 558:                     stats = 1;
  6883  0471  3001               	movlw	1
  6884  0472  00AA               	movwf	_stats
  6885  0473  3000               	movlw	0
  6886  0474  00AB               	movwf	_stats+1
  6887  0475                     l820:	
  6888                           ;Button_src.c: 559:                 }
  6889                           
  6890                           
  6891                           ;Button_src.c: 561:                     day_low++;
  6892  0475  3001               	movlw	1
  6893  0476  07AE               	addwf	_day_low,f
  6894  0477  1803               	skipnc
  6895  0478  0AAF               	incf	_day_low+1,f
  6896  0479  3000               	movlw	0
  6897  047A  07AF               	addwf	_day_low+1,f
  6898                           
  6899                           ;Button_src.c: 562:                     day_low = modulus_func(day_low,10);
  6900  047B  082F               	movf	_day_low+1,w
  6901  047C  00F8               	movwf	modulus_func@x+1
  6902  047D  082E               	movf	_day_low,w
  6903  047E  00F7               	movwf	modulus_func@x
  6904  047F  300A               	movlw	10
  6905  0480  00F9               	movwf	modulus_func@y
  6906  0481  3000               	movlw	0
  6907  0482  00FA               	movwf	modulus_func@y+1
  6908  0483  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  6909  0488  0878               	movf	?_modulus_func+1,w
  6910  0489  00AF               	movwf	_day_low+1
  6911  048A  0877               	movf	?_modulus_func,w
  6912  048B  00AE               	movwf	_day_low
  6913                           
  6914                           ;Button_src.c: 563:                     day_counter = modulus_func(day_low,8);
  6915  048C  082F               	movf	_day_low+1,w
  6916  048D  00F8               	movwf	modulus_func@x+1
  6917  048E  082E               	movf	_day_low,w
  6918  048F  00F7               	movwf	modulus_func@x
  6919  0490  3008               	movlw	8
  6920  0491  00F9               	movwf	modulus_func@y
  6921  0492  3000               	movlw	0
  6922  0493  00FA               	movwf	modulus_func@y+1
  6923  0494  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  6924  0499  0878               	movf	?_modulus_func+1,w
  6925  049A  1683               	bsf	3,5	;RP0=1, select bank1
  6926  049B  00A8               	movwf	(_day_counter+1)^(0+128)
  6927  049C  0877               	movf	?_modulus_func,w
  6928  049D  00A7               	movwf	_day_counter^(0+128)
  6929                           
  6930                           ;Button_src.c: 564:                     if (p == 1){
  6931  049E  1283               	bcf	3,5	;RP0=0, select bank0
  6932  049F  0328               	decf	_p,w
  6933  04A0  0429               	iorwf	_p+1,w
  6934  04A1  1D03               	btfss	3,2
  6935  04A2  2CBC               	goto	l4560
  6936                           
  6937                           ;Button_src.c: 565:                         day_high = incrementor(day_high,day_low,'0')
      +                          ;
  6938  04A3  082D               	movf	_day_high+1,w
  6939  04A4  00E1               	movwf	incrementor@upper_val+1
  6940  04A5  082C               	movf	_day_high,w
  6941  04A6  00E0               	movwf	incrementor@upper_val
  6942  04A7  082F               	movf	_day_low+1,w
  6943  04A8  00E3               	movwf	incrementor@lower_val+1
  6944  04A9  082E               	movf	_day_low,w
  6945  04AA  00E2               	movwf	incrementor@lower_val
  6946  04AB  3030               	movlw	48
  6947  04AC  00E5               	movwf	??_date_settings
  6948  04AD  0865               	movf	??_date_settings,w
  6949  04AE  00E4               	movwf	incrementor@z
  6950  04AF  160A  118A  2343  120A  118A  	fcall	_incrementor
  6951  04B4  00E6               	movwf	??_date_settings+1
  6952  04B5  01E7               	clrf	??_date_settings+2
  6953  04B6  0866               	movf	??_date_settings+1,w
  6954  04B7  00AC               	movwf	_day_high
  6955  04B8  0867               	movf	??_date_settings+2,w
  6956  04B9  00AD               	movwf	_day_high+1
  6957                           
  6958                           ;Button_src.c: 566:                         p = 0;
  6959  04BA  01A8               	clrf	_p
  6960  04BB  01A9               	clrf	_p+1
  6961  04BC                     l4560:	
  6962                           
  6963                           ;Button_src.c: 568:                     if (day_low == 9){
  6964  04BC  3009               	movlw	9
  6965  04BD  062E               	xorwf	_day_low,w
  6966  04BE  042F               	iorwf	_day_low+1,w
  6967  04BF  1D03               	btfss	3,2
  6968  04C0  2CC5               	goto	l4564
  6969                           
  6970                           ;Button_src.c: 569:                         p = 1;
  6971  04C1  3001               	movlw	1
  6972  04C2  00A8               	movwf	_p
  6973  04C3  3000               	movlw	0
  6974  04C4  00A9               	movwf	_p+1
  6975  04C5                     l4564:	
  6976                           
  6977                           ;Button_src.c: 571:                     day_hex = time_date_hex_terminator(day_hex,'c');
  6978  04C5  3063               	movlw	99
  6979  04C6  00E5               	movwf	??_date_settings
  6980  04C7  0865               	movf	??_date_settings,w
  6981  04C8  00F0               	movwf	time_date_hex_terminator@limiter
  6982  04C9  0847               	movf	_day_hex,w
  6983  04CA  160A  118A  21E1  120A  118A  	fcall	_time_date_hex_terminator
  6984  04CF  00E6               	movwf	??_date_settings+1
  6985  04D0  0866               	movf	??_date_settings+1,w
  6986  04D1  00C7               	movwf	_day_hex
  6987                           
  6988                           ;Button_src.c: 572:                     if(day_high == 3 && day_low==2 ){
  6989  04D2  3003               	movlw	3
  6990  04D3  062C               	xorwf	_day_high,w
  6991  04D4  042D               	iorwf	_day_high+1,w
  6992  04D5  1D03               	btfss	3,2
  6993  04D6  2CE0               	goto	l4572
  6994  04D7  3002               	movlw	2
  6995  04D8  062E               	xorwf	_day_low,w
  6996  04D9  042F               	iorwf	_day_low+1,w
  6997  04DA  1D03               	btfss	3,2
  6998  04DB  2CE0               	goto	l4572
  6999                           
  7000                           ;Button_src.c: 573:                         day_high = 0;
  7001  04DC  01AC               	clrf	_day_high
  7002  04DD  01AD               	clrf	_day_high+1
  7003                           
  7004                           ;Button_src.c: 574:                         day_low = 0;
  7005  04DE  01AE               	clrf	_day_low
  7006  04DF  01AF               	clrf	_day_low+1
  7007  04E0                     l4572:	
  7008                           
  7009                           ;Button_src.c: 576:                     button_delay();
  7010  04E0  160A  118A  2234  120A  118A  	fcall	_button_delay
  7011  04E5                     l4574:	
  7012                           
  7013                           ;Button_src.c: 578:             if(RC7==0 && b == 'z'){
  7014  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  7015  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  7016  04E7  1B87               	btfsc	7,7	;volatile
  7017  04E8  2D4C               	goto	l4606
  7018  04E9  307A               	movlw	122
  7019  04EA  0649               	xorwf	_b,w
  7020  04EB  1D03               	btfss	3,2
  7021  04EC  2D4C               	goto	l4606
  7022                           
  7023                           ;Button_src.c: 579:                 if(stats == 1)
  7024  04ED  032A               	decf	_stats,w
  7025  04EE  042B               	iorwf	_stats+1,w
  7026  04EF  1D03               	btfss	3,2
  7027  04F0  2CF5               	goto	l825
  7028                           
  7029                           ;Button_src.c: 580:                    c++;
  7030  04F1  3001               	movlw	1
  7031  04F2  00E5               	movwf	??_date_settings
  7032  04F3  0865               	movf	??_date_settings,w
  7033  04F4  07C8               	addwf	_c,f
  7034  04F5                     l825:	
  7035                           
  7036                           ;Button_src.c: 581:                 if(stats == 0){
  7037  04F5  082A               	movf	_stats,w
  7038  04F6  042B               	iorwf	_stats+1,w
  7039  04F7  1D03               	btfss	3,2
  7040  04F8  2CFD               	goto	l826
  7041                           
  7042                           ;Button_src.c: 582:                     stats = 1;
  7043  04F9  3001               	movlw	1
  7044  04FA  00AA               	movwf	_stats
  7045  04FB  3000               	movlw	0
  7046  04FC  00AB               	movwf	_stats+1
  7047  04FD                     l826:	
  7048                           ;Button_src.c: 583:                 }
  7049                           
  7050                           
  7051                           ;Button_src.c: 585:                     t++;
  7052  04FD  3001               	movlw	1
  7053  04FE  07B8               	addwf	_t,f
  7054  04FF  1803               	skipnc
  7055  0500  0AB9               	incf	_t+1,f
  7056  0501  3000               	movlw	0
  7057  0502  07B9               	addwf	_t+1,f
  7058                           
  7059                           ;Button_src.c: 586:                     t = modulus_func(t,10);
  7060  0503  0839               	movf	_t+1,w
  7061  0504  00F8               	movwf	modulus_func@x+1
  7062  0505  0838               	movf	_t,w
  7063  0506  00F7               	movwf	modulus_func@x
  7064  0507  300A               	movlw	10
  7065  0508  00F9               	movwf	modulus_func@y
  7066  0509  3000               	movlw	0
  7067  050A  00FA               	movwf	modulus_func@y+1
  7068  050B  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  7069  0510  0878               	movf	?_modulus_func+1,w
  7070  0511  00B9               	movwf	_t+1
  7071  0512  0877               	movf	?_modulus_func,w
  7072  0513  00B8               	movwf	_t
  7073                           
  7074                           ;Button_src.c: 587:                      if (p == 1){
  7075  0514  0328               	decf	_p,w
  7076  0515  0429               	iorwf	_p+1,w
  7077  0516  1D03               	btfss	3,2
  7078  0517  2D31               	goto	l4592
  7079                           
  7080                           ;Button_src.c: 588:                         w = incrementor(w,t,'0');
  7081  0518  0837               	movf	_w+1,w
  7082  0519  00E1               	movwf	incrementor@upper_val+1
  7083  051A  0836               	movf	_w,w
  7084  051B  00E0               	movwf	incrementor@upper_val
  7085  051C  0839               	movf	_t+1,w
  7086  051D  00E3               	movwf	incrementor@lower_val+1
  7087  051E  0838               	movf	_t,w
  7088  051F  00E2               	movwf	incrementor@lower_val
  7089  0520  3030               	movlw	48
  7090  0521  00E5               	movwf	??_date_settings
  7091  0522  0865               	movf	??_date_settings,w
  7092  0523  00E4               	movwf	incrementor@z
  7093  0524  160A  118A  2343  120A  118A  	fcall	_incrementor
  7094  0529  00E6               	movwf	??_date_settings+1
  7095  052A  01E7               	clrf	??_date_settings+2
  7096  052B  0866               	movf	??_date_settings+1,w
  7097  052C  00B6               	movwf	_w
  7098  052D  0867               	movf	??_date_settings+2,w
  7099  052E  00B7               	movwf	_w+1
  7100                           
  7101                           ;Button_src.c: 589:                         p = 0;
  7102  052F  01A8               	clrf	_p
  7103  0530  01A9               	clrf	_p+1
  7104  0531                     l4592:	
  7105                           
  7106                           ;Button_src.c: 591:                     if (t == 9){
  7107  0531  3009               	movlw	9
  7108  0532  0638               	xorwf	_t,w
  7109  0533  0439               	iorwf	_t+1,w
  7110  0534  1D03               	btfss	3,2
  7111  0535  2D3A               	goto	l4596
  7112                           
  7113                           ;Button_src.c: 592:                         p = 1;
  7114  0536  3001               	movlw	1
  7115  0537  00A8               	movwf	_p
  7116  0538  3000               	movlw	0
  7117  0539  00A9               	movwf	_p+1
  7118  053A                     l4596:	
  7119                           
  7120                           ;Button_src.c: 595:                      if(c == (0x59 + 1)){
  7121  053A  305A               	movlw	90
  7122  053B  0648               	xorwf	_c,w
  7123  053C  1903               	btfsc	3,2
  7124                           
  7125                           ;Button_src.c: 596:                         c = 0x00;
  7126  053D  01C8               	clrf	_c
  7127                           
  7128                           ;Button_src.c: 598:                     if(w == 6){
  7129  053E  3006               	movlw	6
  7130  053F  0636               	xorwf	_w,w
  7131  0540  0437               	iorwf	_w+1,w
  7132  0541  1D03               	btfss	3,2
  7133  0542  2D47               	goto	l4604
  7134                           
  7135                           ;Button_src.c: 599:                         w = 0;
  7136  0543  01B6               	clrf	_w
  7137  0544  01B7               	clrf	_w+1
  7138                           
  7139                           ;Button_src.c: 600:                         t = 0;
  7140  0545  01B8               	clrf	_t
  7141  0546  01B9               	clrf	_t+1
  7142  0547                     l4604:	
  7143                           
  7144                           ;Button_src.c: 602:                     button_delay();
  7145  0547  160A  118A  2234  120A  118A  	fcall	_button_delay
  7146  054C                     l4606:	
  7147                           
  7148                           ;Button_src.c: 609:                     a = time_date_delimiter(a,0x11,'9',1);
  7149  054C  3011               	movlw	17
  7150  054D  1283               	bcf	3,5	;RP0=0, select bank0
  7151  054E  1303               	bcf	3,6	;RP1=0, select bank0
  7152  054F  00E5               	movwf	??_date_settings
  7153  0550  0865               	movf	??_date_settings,w
  7154  0551  00F0               	movwf	time_date_delimiter@hex
  7155  0552  3039               	movlw	57
  7156  0553  00E6               	movwf	??_date_settings+1
  7157  0554  0866               	movf	??_date_settings+1,w
  7158  0555  00F1               	movwf	time_date_delimiter@limiter
  7159  0556  3001               	movlw	1
  7160  0557  00F2               	movwf	time_date_delimiter@type
  7161  0558  3000               	movlw	0
  7162  0559  00F3               	movwf	time_date_delimiter@type+1
  7163  055A  084A               	movf	_a,w
  7164  055B  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7165  0560  00E7               	movwf	??_date_settings+2
  7166  0561  0867               	movf	??_date_settings+2,w
  7167  0562  00CA               	movwf	_a
  7168                           
  7169                           ;Button_src.c: 611:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  7170  0563  3011               	movlw	17
  7171  0564  00E5               	movwf	??_date_settings
  7172  0565  0865               	movf	??_date_settings,w
  7173  0566  00F0               	movwf	time_date_delimiter@hex
  7174  0567  3039               	movlw	57
  7175  0568  00E6               	movwf	??_date_settings+1
  7176  0569  0866               	movf	??_date_settings+1,w
  7177  056A  00F1               	movwf	time_date_delimiter@limiter
  7178  056B  3002               	movlw	2
  7179  056C  00F2               	movwf	time_date_delimiter@type
  7180  056D  3000               	movlw	0
  7181  056E  00F3               	movwf	time_date_delimiter@type+1
  7182  056F  0847               	movf	_day_hex,w
  7183  0570  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7184  0575  00E7               	movwf	??_date_settings+2
  7185  0576  0867               	movf	??_date_settings+2,w
  7186  0577  00C7               	movwf	_day_hex
  7187                           
  7188                           ;Button_src.c: 612:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  7189  0578  3021               	movlw	33
  7190  0579  00E5               	movwf	??_date_settings
  7191  057A  0865               	movf	??_date_settings,w
  7192  057B  00F0               	movwf	time_date_delimiter@hex
  7193  057C  304A               	movlw	74
  7194  057D  00E6               	movwf	??_date_settings+1
  7195  057E  0866               	movf	??_date_settings+1,w
  7196  057F  00F1               	movwf	time_date_delimiter@limiter
  7197  0580  3002               	movlw	2
  7198  0581  00F2               	movwf	time_date_delimiter@type
  7199  0582  3000               	movlw	0
  7200  0583  00F3               	movwf	time_date_delimiter@type+1
  7201  0584  0847               	movf	_day_hex,w
  7202  0585  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7203  058A  00E7               	movwf	??_date_settings+2
  7204  058B  0867               	movf	??_date_settings+2,w
  7205  058C  00C7               	movwf	_day_hex
  7206                           
  7207                           ;Button_src.c: 613:                     day_hex = time_date_delimiter(day_hex,0x11,'9',2
      +                          );
  7208  058D  3011               	movlw	17
  7209  058E  00E5               	movwf	??_date_settings
  7210  058F  0865               	movf	??_date_settings,w
  7211  0590  00F0               	movwf	time_date_delimiter@hex
  7212  0591  3039               	movlw	57
  7213  0592  00E6               	movwf	??_date_settings+1
  7214  0593  0866               	movf	??_date_settings+1,w
  7215  0594  00F1               	movwf	time_date_delimiter@limiter
  7216  0595  3002               	movlw	2
  7217  0596  00F2               	movwf	time_date_delimiter@type
  7218  0597  3000               	movlw	0
  7219  0598  00F3               	movwf	time_date_delimiter@type+1
  7220  0599  0847               	movf	_day_hex,w
  7221  059A  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7222  059F  00E7               	movwf	??_date_settings+2
  7223  05A0  0867               	movf	??_date_settings+2,w
  7224  05A1  00C7               	movwf	_day_hex
  7225                           
  7226                           ;Button_src.c: 614:                     day_hex = time_date_delimiter(day_hex,0x21,'J',2
      +                          );
  7227  05A2  3021               	movlw	33
  7228  05A3  00E5               	movwf	??_date_settings
  7229  05A4  0865               	movf	??_date_settings,w
  7230  05A5  00F0               	movwf	time_date_delimiter@hex
  7231  05A6  304A               	movlw	74
  7232  05A7  00E6               	movwf	??_date_settings+1
  7233  05A8  0866               	movf	??_date_settings+1,w
  7234  05A9  00F1               	movwf	time_date_delimiter@limiter
  7235  05AA  3002               	movlw	2
  7236  05AB  00F2               	movwf	time_date_delimiter@type
  7237  05AC  3000               	movlw	0
  7238  05AD  00F3               	movwf	time_date_delimiter@type+1
  7239  05AE  0847               	movf	_day_hex,w
  7240  05AF  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7241  05B4  00E7               	movwf	??_date_settings+2
  7242  05B5  0867               	movf	??_date_settings+2,w
  7243  05B6  00C7               	movwf	_day_hex
  7244                           
  7245                           ;Button_src.c: 615:                     day_hex = time_date_delimiter(day_hex,0x31,'Y',2
      +                          );
  7246  05B7  3031               	movlw	49
  7247  05B8  00E5               	movwf	??_date_settings
  7248  05B9  0865               	movf	??_date_settings,w
  7249  05BA  00F0               	movwf	time_date_delimiter@hex
  7250  05BB  3059               	movlw	89
  7251  05BC  00E6               	movwf	??_date_settings+1
  7252  05BD  0866               	movf	??_date_settings+1,w
  7253  05BE  00F1               	movwf	time_date_delimiter@limiter
  7254  05BF  3002               	movlw	2
  7255  05C0  00F2               	movwf	time_date_delimiter@type
  7256  05C1  3000               	movlw	0
  7257  05C2  00F3               	movwf	time_date_delimiter@type+1
  7258  05C3  0847               	movf	_day_hex,w
  7259  05C4  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7260  05C9  00E7               	movwf	??_date_settings+2
  7261  05CA  0867               	movf	??_date_settings+2,w
  7262  05CB  00C7               	movwf	_day_hex
  7263                           
  7264                           ;Button_src.c: 617:                     c = time_date_delimiter(c,0x11,'9',3);
  7265  05CC  3011               	movlw	17
  7266  05CD  00E5               	movwf	??_date_settings
  7267  05CE  0865               	movf	??_date_settings,w
  7268  05CF  00F0               	movwf	time_date_delimiter@hex
  7269  05D0  3039               	movlw	57
  7270  05D1  00E6               	movwf	??_date_settings+1
  7271  05D2  0866               	movf	??_date_settings+1,w
  7272  05D3  00F1               	movwf	time_date_delimiter@limiter
  7273  05D4  3003               	movlw	3
  7274  05D5  00F2               	movwf	time_date_delimiter@type
  7275  05D6  3000               	movlw	0
  7276  05D7  00F3               	movwf	time_date_delimiter@type+1
  7277  05D8  0848               	movf	_c,w
  7278  05D9  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7279  05DE  00E7               	movwf	??_date_settings+2
  7280  05DF  0867               	movf	??_date_settings+2,w
  7281  05E0  00C8               	movwf	_c
  7282                           
  7283                           ;Button_src.c: 618:                     c = time_date_delimiter(c,0x21,'J',3);
  7284  05E1  3021               	movlw	33
  7285  05E2  00E5               	movwf	??_date_settings
  7286  05E3  0865               	movf	??_date_settings,w
  7287  05E4  00F0               	movwf	time_date_delimiter@hex
  7288  05E5  304A               	movlw	74
  7289  05E6  00E6               	movwf	??_date_settings+1
  7290  05E7  0866               	movf	??_date_settings+1,w
  7291  05E8  00F1               	movwf	time_date_delimiter@limiter
  7292  05E9  3003               	movlw	3
  7293  05EA  00F2               	movwf	time_date_delimiter@type
  7294  05EB  3000               	movlw	0
  7295  05EC  00F3               	movwf	time_date_delimiter@type+1
  7296  05ED  0848               	movf	_c,w
  7297  05EE  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7298  05F3  00E7               	movwf	??_date_settings+2
  7299  05F4  0867               	movf	??_date_settings+2,w
  7300  05F5  00C8               	movwf	_c
  7301                           
  7302                           ;Button_src.c: 619:                     c = time_date_delimiter(c,0x11,'9',3);
  7303  05F6  3011               	movlw	17
  7304  05F7  00E5               	movwf	??_date_settings
  7305  05F8  0865               	movf	??_date_settings,w
  7306  05F9  00F0               	movwf	time_date_delimiter@hex
  7307  05FA  3039               	movlw	57
  7308  05FB  00E6               	movwf	??_date_settings+1
  7309  05FC  0866               	movf	??_date_settings+1,w
  7310  05FD  00F1               	movwf	time_date_delimiter@limiter
  7311  05FE  3003               	movlw	3
  7312  05FF  00F2               	movwf	time_date_delimiter@type
  7313  0600  3000               	movlw	0
  7314  0601  00F3               	movwf	time_date_delimiter@type+1
  7315  0602  0848               	movf	_c,w
  7316  0603  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7317  0608  00E7               	movwf	??_date_settings+2
  7318  0609  0867               	movf	??_date_settings+2,w
  7319  060A  00C8               	movwf	_c
  7320                           
  7321                           ;Button_src.c: 620:                     c = time_date_delimiter(c,0x21,'J',3);
  7322  060B  3021               	movlw	33
  7323  060C  00E5               	movwf	??_date_settings
  7324  060D  0865               	movf	??_date_settings,w
  7325  060E  00F0               	movwf	time_date_delimiter@hex
  7326  060F  304A               	movlw	74
  7327  0610  00E6               	movwf	??_date_settings+1
  7328  0611  0866               	movf	??_date_settings+1,w
  7329  0612  00F1               	movwf	time_date_delimiter@limiter
  7330  0613  3003               	movlw	3
  7331  0614  00F2               	movwf	time_date_delimiter@type
  7332  0615  3000               	movlw	0
  7333  0616  00F3               	movwf	time_date_delimiter@type+1
  7334  0617  0848               	movf	_c,w
  7335  0618  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7336  061D  00E7               	movwf	??_date_settings+2
  7337  061E  0867               	movf	??_date_settings+2,w
  7338  061F  00C8               	movwf	_c
  7339                           
  7340                           ;Button_src.c: 621:                     c = time_date_delimiter(c,0x31,'Y',3);
  7341  0620  3031               	movlw	49
  7342  0621  00E5               	movwf	??_date_settings
  7343  0622  0865               	movf	??_date_settings,w
  7344  0623  00F0               	movwf	time_date_delimiter@hex
  7345  0624  3059               	movlw	89
  7346  0625  00E6               	movwf	??_date_settings+1
  7347  0626  0866               	movf	??_date_settings+1,w
  7348  0627  00F1               	movwf	time_date_delimiter@limiter
  7349  0628  3003               	movlw	3
  7350  0629  00F2               	movwf	time_date_delimiter@type
  7351  062A  3000               	movlw	0
  7352  062B  00F3               	movwf	time_date_delimiter@type+1
  7353  062C  0848               	movf	_c,w
  7354  062D  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7355  0632  00E7               	movwf	??_date_settings+2
  7356  0633  0867               	movf	??_date_settings+2,w
  7357  0634  00C8               	movwf	_c
  7358                           
  7359                           ;Button_src.c: 622:                     c = time_date_delimiter(c,0x41,'j',3);
  7360  0635  3041               	movlw	65
  7361  0636  00E5               	movwf	??_date_settings
  7362  0637  0865               	movf	??_date_settings,w
  7363  0638  00F0               	movwf	time_date_delimiter@hex
  7364  0639  306A               	movlw	106
  7365  063A  00E6               	movwf	??_date_settings+1
  7366  063B  0866               	movf	??_date_settings+1,w
  7367  063C  00F1               	movwf	time_date_delimiter@limiter
  7368  063D  3003               	movlw	3
  7369  063E  00F2               	movwf	time_date_delimiter@type
  7370  063F  3000               	movlw	0
  7371  0640  00F3               	movwf	time_date_delimiter@type+1
  7372  0641  0848               	movf	_c,w
  7373  0642  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7374  0647  00E7               	movwf	??_date_settings+2
  7375  0648  0867               	movf	??_date_settings+2,w
  7376  0649  00C8               	movwf	_c
  7377                           
  7378                           ;Button_src.c: 623:                     c = time_date_delimiter(c,0x51,'z',3);
  7379  064A  3051               	movlw	81
  7380  064B  00E5               	movwf	??_date_settings
  7381  064C  0865               	movf	??_date_settings,w
  7382  064D  00F0               	movwf	time_date_delimiter@hex
  7383  064E  307A               	movlw	122
  7384  064F  00E6               	movwf	??_date_settings+1
  7385  0650  0866               	movf	??_date_settings+1,w
  7386  0651  00F1               	movwf	time_date_delimiter@limiter
  7387  0652  3003               	movlw	3
  7388  0653  00F2               	movwf	time_date_delimiter@type
  7389  0654  3000               	movlw	0
  7390  0655  00F3               	movwf	time_date_delimiter@type+1
  7391  0656  0848               	movf	_c,w
  7392  0657  120A  158A  20E9  120A  118A  	fcall	_time_date_delimiter
  7393  065C  00E7               	movwf	??_date_settings+2
  7394  065D  0867               	movf	??_date_settings+2,w
  7395  065E  00C8               	movwf	_c
  7396                           
  7397                           ;Button_src.c: 625:               if(stats==0){
  7398  065F  082A               	movf	_stats,w
  7399  0660  042B               	iorwf	_stats+1,w
  7400  0661  1D03               	btfss	3,2
  7401  0662  2E71               	goto	l4636
  7402                           
  7403                           ;Button_src.c: 626:                   table[4] = prev_hex;
  7404  0663  0845               	movf	_prev_hex,w
  7405  0664  00E5               	movwf	??_date_settings
  7406  0665  0865               	movf	??_date_settings,w
  7407  0666  1683               	bsf	3,5	;RP0=1, select bank1
  7408  0667  00BF               	movwf	(_table^(0+128)+4)
  7409                           
  7410                           ;Button_src.c: 627:                   table[6] = prev_hex_year;
  7411  0668  1283               	bcf	3,5	;RP0=0, select bank0
  7412  0669  0843               	movf	_prev_hex_year,w
  7413  066A  00E5               	movwf	??_date_settings
  7414  066B  0865               	movf	??_date_settings,w
  7415  066C  1683               	bsf	3,5	;RP0=1, select bank1
  7416  066D  00C1               	movwf	(_table^(0+128)+6)
  7417                           
  7418                           ;Button_src.c: 628:                   table[3] = prev_hex_day;
  7419  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7420  066F  0844               	movf	_prev_hex_day,w
  7421  0670  2E82               	goto	L3
  7422  0671                     l4636:	
  7423                           ;Button_src.c: 629:               }
  7424                           
  7425  0671  032A               	decf	_stats,w
  7426  0672  042B               	iorwf	_stats+1,w
  7427  0673  1D03               	btfss	3,2
  7428  0674  2E86               	goto	l4640
  7429                           
  7430                           ;Button_src.c: 631:               {;Button_src.c: 632:                  table[4]= a;
  7431  0675  084A               	movf	_a,w
  7432  0676  00E5               	movwf	??_date_settings
  7433  0677  0865               	movf	??_date_settings,w
  7434  0678  1683               	bsf	3,5	;RP0=1, select bank1
  7435  0679  00BF               	movwf	(_table^(0+128)+4)
  7436                           
  7437                           ;Button_src.c: 633:                  table[6] = c;
  7438  067A  1283               	bcf	3,5	;RP0=0, select bank0
  7439  067B  0848               	movf	_c,w
  7440  067C  00E5               	movwf	??_date_settings
  7441  067D  0865               	movf	??_date_settings,w
  7442  067E  1683               	bsf	3,5	;RP0=1, select bank1
  7443  067F  00C1               	movwf	(_table^(0+128)+6)
  7444                           
  7445                           ;Button_src.c: 634:                  table[3] = day_hex;
  7446  0680  1283               	bcf	3,5	;RP0=0, select bank0
  7447  0681  0847               	movf	_day_hex,w
  7448  0682                     L3:	
  7449  0682  00E5               	movwf	??_date_settings
  7450  0683  0865               	movf	??_date_settings,w
  7451  0684  1683               	bsf	3,5	;RP0=1, select bank1
  7452  0685  00BE               	movwf	(_table^(0+128)+3)
  7453  0686                     l4640:	
  7454                           
  7455                           ;Button_src.c: 637:              write_cmd(0x88);
  7456  0686  3088               	movlw	136
  7457  0687  160A  118A  2287  120A  118A  	fcall	_write_cmd
  7458                           
  7459                           ;Button_src.c: 639:                   RC0 = 0;
  7460  068C  1007               	bcf	7,0	;volatile
  7461                           
  7462                           ;Button_src.c: 640:                   RC1 = 1;
  7463  068D  1487               	bsf	7,1	;volatile
  7464                           
  7465                           ;Button_src.c: 641:                   RC2 = 1;
  7466  068E  1507               	bsf	7,2	;volatile
  7467                           
  7468                           ;Button_src.c: 642:                   RC3 = 1;
  7469  068F  1587               	bsf	7,3	;volatile
  7470                           
  7471                           ;Button_src.c: 644:                     if (RC6 == 0 ){
  7472  0690  1B07               	btfsc	7,6	;volatile
  7473  0691  2EAB               	goto	l834
  7474                           
  7475                           ;Button_src.c: 645:                           set_time();
  7476  0692  160A  118A  238D  120A  118A  	fcall	_set_time
  7477                           
  7478                           ;Button_src.c: 646:                           a = 0x00;
  7479  0697  01CA               	clrf	_a
  7480                           
  7481                           ;Button_src.c: 647:                           c = 0x00;
  7482  0698  01C8               	clrf	_c
  7483                           
  7484                           ;Button_src.c: 648:                           day_hex = 0x00;
  7485  0699  01C7               	clrf	_day_hex
  7486                           
  7487                           ;Button_src.c: 649:                           day_high = 0;
  7488  069A  01AC               	clrf	_day_high
  7489  069B  01AD               	clrf	_day_high+1
  7490                           
  7491                           ;Button_src.c: 650:                           day_low = 0;
  7492  069C  01AE               	clrf	_day_low
  7493  069D  01AF               	clrf	_day_low+1
  7494                           
  7495                           ;Button_src.c: 651:                           x = 0;
  7496  069E  01B4               	clrf	_x
  7497  069F  01B5               	clrf	_x+1
  7498                           
  7499                           ;Button_src.c: 652:                           y = 0;
  7500  06A0  01B2               	clrf	_y
  7501  06A1  01B3               	clrf	_y+1
  7502                           
  7503                           ;Button_src.c: 653:                           w = 0;
  7504  06A2  01B6               	clrf	_w
  7505  06A3  01B7               	clrf	_w+1
  7506                           
  7507                           ;Button_src.c: 654:                           t = 0;
  7508  06A4  01B8               	clrf	_t
  7509  06A5  01B9               	clrf	_t+1
  7510                           
  7511                           ;Button_src.c: 655:                           write_cmd(0x1);
  7512  06A6  3001               	movlw	1
  7513  06A7  160A  118A  2287   	fcall	_write_cmd
  7514  06AA  0008               	return
  7515  06AB                     l834:	
  7516                           ;Button_src.c: 657:                             }
  7517                           
  7518                           
  7519                           ;Button_src.c: 658:                   RC0 = 0;
  7520  06AB  1007               	bcf	7,0	;volatile
  7521                           
  7522                           ;Button_src.c: 659:                   RC1 = 1;
  7523  06AC  1487               	bsf	7,1	;volatile
  7524                           
  7525                           ;Button_src.c: 660:                   RC2 = 1;
  7526  06AD  1507               	bsf	7,2	;volatile
  7527                           
  7528                           ;Button_src.c: 661:                   RC3 = 1;
  7529  06AE  1587               	bsf	7,3	;volatile
  7530                           
  7531                           ;Button_src.c: 662:                   z = modulus_func(z,3);
  7532  06AF  0831               	movf	_z+1,w
  7533  06B0  00F8               	movwf	modulus_func@x+1
  7534  06B1  0830               	movf	_z,w
  7535  06B2  00F7               	movwf	modulus_func@x
  7536  06B3  3003               	movlw	3
  7537  06B4  00F9               	movwf	modulus_func@y
  7538  06B5  3000               	movlw	0
  7539  06B6  00FA               	movwf	modulus_func@y+1
  7540  06B7  160A  118A  21FF  120A  118A  	fcall	_modulus_func
  7541  06BC  0878               	movf	?_modulus_func+1,w
  7542  06BD  00B1               	movwf	_z+1
  7543  06BE  0877               	movf	?_modulus_func,w
  7544  06BF  00B0               	movwf	_z
  7545                           
  7546                           ;Button_src.c: 663:                   if(RC4 == 0 && z ==0){
  7547  06C0  1A07               	btfsc	7,4	;volatile
  7548  06C1  2F01               	goto	l4688
  7549  06C2  0830               	movf	_z,w
  7550  06C3  0431               	iorwf	_z+1,w
  7551  06C4  1D03               	btfss	3,2
  7552  06C5  2F01               	goto	l4688
  7553                           
  7554                           ;Button_src.c: 664:                       write_cmd(0x90);
  7555  06C6  3090               	movlw	144
  7556  06C7  160A  118A  2287  120A  118A  	fcall	_write_cmd
  7557                           
  7558                           ;Button_src.c: 665:                       write_char('D');
  7559  06CC  3044               	movlw	68
  7560  06CD  160A  118A  2270  120A  118A  	fcall	_write_char
  7561                           
  7562                           ;Button_src.c: 666:                       write_char('a');
  7563  06D2  3061               	movlw	97
  7564  06D3  160A  118A  2270  120A  118A  	fcall	_write_char
  7565                           
  7566                           ;Button_src.c: 667:                       write_char('y');
  7567  06D8  3079               	movlw	121
  7568  06D9  160A  118A  2270  120A  118A  	fcall	_write_char
  7569                           
  7570                           ;Button_src.c: 668:                       write_char(':');
  7571  06DE  303A               	movlw	58
  7572  06DF  160A  118A  2270  120A  118A  	fcall	_write_char
  7573                           
  7574                           ;Button_src.c: 669:                       write_char(' ');
  7575  06E4  3020               	movlw	32
  7576  06E5  160A  118A  2270  120A  118A  	fcall	_write_char
  7577                           
  7578                           ;Button_src.c: 670:                       write_char(' ');
  7579  06EA  3020               	movlw	32
  7580  06EB  160A  118A  2270  120A  118A  	fcall	_write_char
  7581                           
  7582                           ;Button_src.c: 671:                       b = 'y';
  7583  06F0  3079               	movlw	121
  7584  06F1  00E5               	movwf	??_date_settings
  7585  06F2  0865               	movf	??_date_settings,w
  7586  06F3  00C9               	movwf	_b
  7587                           
  7588                           ;Button_src.c: 673:                       button_delay();
  7589  06F4  160A  118A  2234  120A  118A  	fcall	_button_delay
  7590                           
  7591                           ;Button_src.c: 674:                       z++;
  7592  06F9  3001               	movlw	1
  7593  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  7594  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  7595  06FC  07B0               	addwf	_z,f
  7596  06FD  1803               	skipnc
  7597  06FE  0AB1               	incf	_z+1,f
  7598  06FF  3000               	movlw	0
  7599  0700  07B1               	addwf	_z+1,f
  7600  0701                     l4688:	
  7601                           
  7602                           ;Button_src.c: 676:                   RC0 = 0;
  7603  0701  1007               	bcf	7,0	;volatile
  7604                           
  7605                           ;Button_src.c: 677:                   RC1 = 1;
  7606  0702  1487               	bsf	7,1	;volatile
  7607                           
  7608                           ;Button_src.c: 678:                   RC2 = 1;
  7609  0703  1507               	bsf	7,2	;volatile
  7610                           
  7611                           ;Button_src.c: 679:                   RC3 = 1;
  7612  0704  1587               	bsf	7,3	;volatile
  7613                           
  7614                           ;Button_src.c: 680:                   if(RC4 == 0&& z ==1){
  7615  0705  1A07               	btfsc	7,4	;volatile
  7616  0706  2F44               	goto	l4718
  7617  0707  0330               	decf	_z,w
  7618  0708  0431               	iorwf	_z+1,w
  7619  0709  1D03               	btfss	3,2
  7620  070A  2F44               	goto	l4718
  7621                           
  7622                           ;Button_src.c: 681:                       z++;
  7623  070B  3001               	movlw	1
  7624  070C  07B0               	addwf	_z,f
  7625  070D  1803               	skipnc
  7626  070E  0AB1               	incf	_z+1,f
  7627  070F  3000               	movlw	0
  7628  0710  07B1               	addwf	_z+1,f
  7629                           
  7630                           ;Button_src.c: 682:                       button_delay();
  7631  0711  160A  118A  2234  120A  118A  	fcall	_button_delay
  7632                           
  7633                           ;Button_src.c: 684:                       write_cmd(0x90);
  7634  0716  3090               	movlw	144
  7635  0717  160A  118A  2287  120A  118A  	fcall	_write_cmd
  7636                           
  7637                           ;Button_src.c: 685:                       write_char('M');
  7638  071C  304D               	movlw	77
  7639  071D  160A  118A  2270  120A  118A  	fcall	_write_char
  7640                           
  7641                           ;Button_src.c: 686:                       write_char('o');
  7642  0722  306F               	movlw	111
  7643  0723  160A  118A  2270  120A  118A  	fcall	_write_char
  7644                           
  7645                           ;Button_src.c: 687:                       write_char('n');
  7646  0728  306E               	movlw	110
  7647  0729  160A  118A  2270  120A  118A  	fcall	_write_char
  7648                           
  7649                           ;Button_src.c: 688:                       write_char('t');
  7650  072E  3074               	movlw	116
  7651  072F  160A  118A  2270  120A  118A  	fcall	_write_char
  7652                           
  7653                           ;Button_src.c: 689:                       write_char('h');
  7654  0734  3068               	movlw	104
  7655  0735  160A  118A  2270  120A  118A  	fcall	_write_char
  7656                           
  7657                           ;Button_src.c: 690:                       write_char(':');
  7658  073A  303A               	movlw	58
  7659  073B  160A  118A  2270  120A  118A  	fcall	_write_char
  7660                           
  7661                           ;Button_src.c: 691:                       b = 'x';
  7662  0740  3078               	movlw	120
  7663  0741  00E5               	movwf	??_date_settings
  7664  0742  0865               	movf	??_date_settings,w
  7665  0743  00C9               	movwf	_b
  7666  0744                     l4718:	
  7667                           
  7668                           ;Button_src.c: 694:                   RC0 = 0;
  7669  0744  1007               	bcf	7,0	;volatile
  7670                           
  7671                           ;Button_src.c: 695:                   RC1 = 1;
  7672  0745  1487               	bsf	7,1	;volatile
  7673                           
  7674                           ;Button_src.c: 696:                   RC2 = 1;
  7675  0746  1507               	bsf	7,2	;volatile
  7676                           
  7677                           ;Button_src.c: 697:                   RC3 = 1;
  7678  0747  1587               	bsf	7,3	;volatile
  7679                           
  7680                           ;Button_src.c: 698:                   if(RC4 == 0&& z ==2){
  7681  0748  1A07               	btfsc	7,4	;volatile
  7682  0749  2F8A               	goto	l4748
  7683  074A  3002               	movlw	2
  7684  074B  0630               	xorwf	_z,w
  7685  074C  0431               	iorwf	_z+1,w
  7686  074D  1D03               	btfss	3,2
  7687  074E  2F8A               	goto	l4748
  7688                           
  7689                           ;Button_src.c: 699:                       button_delay();
  7690  074F  160A  118A  2234  120A  118A  	fcall	_button_delay
  7691                           
  7692                           ;Button_src.c: 700:                       z++;
  7693  0754  3001               	movlw	1
  7694  0755  1283               	bcf	3,5	;RP0=0, select bank0
  7695  0756  1303               	bcf	3,6	;RP1=0, select bank0
  7696  0757  07B0               	addwf	_z,f
  7697  0758  1803               	skipnc
  7698  0759  0AB1               	incf	_z+1,f
  7699  075A  3000               	movlw	0
  7700  075B  07B1               	addwf	_z+1,f
  7701                           
  7702                           ;Button_src.c: 702:                       write_cmd(0x90);
  7703  075C  3090               	movlw	144
  7704  075D  160A  118A  2287  120A  118A  	fcall	_write_cmd
  7705                           
  7706                           ;Button_src.c: 703:                       write_char('Y');
  7707  0762  3059               	movlw	89
  7708  0763  160A  118A  2270  120A  118A  	fcall	_write_char
  7709                           
  7710                           ;Button_src.c: 704:                       write_char('e');
  7711  0768  3065               	movlw	101
  7712  0769  160A  118A  2270  120A  118A  	fcall	_write_char
  7713                           
  7714                           ;Button_src.c: 705:                       write_char('a');
  7715  076E  3061               	movlw	97
  7716  076F  160A  118A  2270  120A  118A  	fcall	_write_char
  7717                           
  7718                           ;Button_src.c: 706:                       write_char('r');
  7719  0774  3072               	movlw	114
  7720  0775  160A  118A  2270  120A  118A  	fcall	_write_char
  7721                           
  7722                           ;Button_src.c: 707:                       write_char(':');
  7723  077A  303A               	movlw	58
  7724  077B  160A  118A  2270  120A  118A  	fcall	_write_char
  7725                           
  7726                           ;Button_src.c: 708:                       write_char(' ');
  7727  0780  3020               	movlw	32
  7728  0781  160A  118A  2270  120A  118A  	fcall	_write_char
  7729                           
  7730                           ;Button_src.c: 709:                       b = 'z';
  7731  0786  307A               	movlw	122
  7732  0787  00E5               	movwf	??_date_settings
  7733  0788  0865               	movf	??_date_settings,w
  7734  0789  00C9               	movwf	_b
  7735  078A                     l4748:	
  7736                           
  7737                           ;Button_src.c: 712:               write_cmd(0x88);
  7738  078A  3088               	movlw	136
  7739  078B  160A  118A  2287  120A  118A  	fcall	_write_cmd
  7740                           
  7741                           ;Button_src.c: 713:               write_char(day_high + '0');
  7742  0790  082C               	movf	_day_high,w
  7743  0791  3E30               	addlw	48
  7744  0792  160A  118A  2270  120A  118A  	fcall	_write_char
  7745                           
  7746                           ;Button_src.c: 714:               write_char(day_low + '0');
  7747  0797  082E               	movf	_day_low,w
  7748  0798  3E30               	addlw	48
  7749  0799  160A  118A  2270  120A  118A  	fcall	_write_char
  7750                           
  7751                           ;Button_src.c: 715:               write_char('/');
  7752  079E  302F               	movlw	47
  7753  079F  160A  118A  2270  120A  118A  	fcall	_write_char
  7754                           
  7755                           ;Button_src.c: 716:               write_char(y + '0');
  7756  07A4  0832               	movf	_y,w
  7757  07A5  3E30               	addlw	48
  7758  07A6  160A  118A  2270  120A  118A  	fcall	_write_char
  7759                           
  7760                           ;Button_src.c: 717:               write_char(x + '0');
  7761  07AB  0834               	movf	_x,w
  7762  07AC  3E30               	addlw	48
  7763  07AD  160A  118A  2270  120A  118A  	fcall	_write_char
  7764                           
  7765                           ;Button_src.c: 718:               write_char('/');
  7766  07B2  302F               	movlw	47
  7767  07B3  160A  118A  2270  120A  118A  	fcall	_write_char
  7768                           
  7769                           ;Button_src.c: 719:               write_char(w+ '0');
  7770  07B8  0836               	movf	_w,w
  7771  07B9  3E30               	addlw	48
  7772  07BA  160A  118A  2270  120A  118A  	fcall	_write_char
  7773                           
  7774                           ;Button_src.c: 720:               write_char(t+ '0');
  7775  07BF  0838               	movf	_t,w
  7776  07C0  3E30               	addlw	48
  7777  07C1  160A  118A  2270  120A  118A  	fcall	_write_char
  7778                           
  7779                           ;Button_src.c: 723:             RC0 = 0;
  7780  07C6  1007               	bcf	7,0	;volatile
  7781                           
  7782                           ;Button_src.c: 724:             RC1 = 1;
  7783  07C7  1487               	bsf	7,1	;volatile
  7784                           
  7785                           ;Button_src.c: 725:             RC2 = 1;
  7786  07C8  1507               	bsf	7,2	;volatile
  7787                           
  7788                           ;Button_src.c: 726:             RC3 = 1;
  7789  07C9  1587               	bsf	7,3	;volatile
  7790                           
  7791                           ;Button_src.c: 727:             if (RC7 == 0 ){
  7792  07CA  1B87               	btfsc	7,7	;volatile
  7793  07CB  2B93               	goto	l811
  7794                           
  7795                           ;Button_src.c: 728:             a = 0x00;
  7796  07CC  01CA               	clrf	_a
  7797                           
  7798                           ;Button_src.c: 729:             c = 0x00;
  7799  07CD  01C8               	clrf	_c
  7800                           
  7801                           ;Button_src.c: 730:             day_hex = 0x00;
  7802  07CE  01C7               	clrf	_day_hex
  7803                           
  7804                           ;Button_src.c: 731:             x = 0;
  7805  07CF  01B4               	clrf	_x
  7806  07D0  01B5               	clrf	_x+1
  7807                           
  7808                           ;Button_src.c: 732:             y = 0;
  7809  07D1  01B2               	clrf	_y
  7810  07D2  01B3               	clrf	_y+1
  7811                           
  7812                           ;Button_src.c: 733:             w = 0;
  7813  07D3  01B6               	clrf	_w
  7814  07D4  01B7               	clrf	_w+1
  7815                           
  7816                           ;Button_src.c: 734:             t = 0;
  7817  07D5  01B8               	clrf	_t
  7818  07D6  01B9               	clrf	_t+1
  7819                           
  7820                           ;Button_src.c: 735:             day_high = 0;
  7821  07D7  01AC               	clrf	_day_high
  7822  07D8  01AD               	clrf	_day_high+1
  7823                           
  7824                           ;Button_src.c: 736:             day_low = 0;
  7825  07D9  01AE               	clrf	_day_low
  7826  07DA  01AF               	clrf	_day_low+1
  7827                           
  7828                           ;Button_src.c: 737:             write_cmd(0x1);
  7829  07DB  3001               	movlw	1
  7830  07DC  160A  118A  2287   	fcall	_write_cmd
  7831                           
  7832                           ;Button_src.c: 738:             break;
  7833  07DF  0008               	return
  7834  07E0                     __end_of_date_settings:	
  7835                           
  7836                           	psect	text29
  7837  1287                     __ptext29:	
  7838 ;; *************** function _write_cmd *****************
  7839 ;; Defined at:
  7840 ;;		line 41 in file "LCD_src.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  x               1    wreg     unsigned char 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  x               1    2[COMMON] unsigned char 
  7845 ;;  i               2    0        int 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 300/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7855 ;;      Params:         0       0       0       0       0
  7856 ;;      Locals:         1       0       0       0       0
  7857 ;;      Temps:          0       0       0       0       0
  7858 ;;      Totals:         1       0       0       0       0
  7859 ;;Total ram usage:        1 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    1
  7862 ;; This function calls:
  7863 ;;		_delay_screen
  7864 ;; This function is called by:
  7865 ;;		_main
  7866 ;;		_lcd_init
  7867 ;;		_thermometer_threshhold_settings
  7868 ;;		_time_settings
  7869 ;;		_date_settings
  7870 ;; This function uses a non-reentrant model
  7871 ;;
  7872                           
  7873                           
  7874                           ;psect for function _write_cmd
  7875  1287                     _write_cmd:	
  7876                           
  7877                           ;incstack = 0
  7878                           ; Regs used in _write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7879                           ;write_cmd@x stored from wreg
  7880  1287  00F2               	movwf	write_cmd@x
  7881                           
  7882                           ;LCD_src.c: 41: void write_cmd(char x);LCD_src.c: 42: {;LCD_src.c: 43:  int i;;LCD_src.c
      +                          : 44:  RA5=0;
  7883  1288  1283               	bcf	3,5	;RP0=0, select bank0
  7884  1289  1303               	bcf	3,6	;RP1=0, select bank0
  7885  128A  1285               	bcf	5,5	;volatile
  7886                           
  7887                           ;LCD_src.c: 45:  RA4=0;
  7888  128B  1205               	bcf	5,4	;volatile
  7889                           
  7890                           ;LCD_src.c: 46:  RA3=0;
  7891  128C  1185               	bcf	5,3	;volatile
  7892                           
  7893                           ;LCD_src.c: 47:  delay_screen();
  7894  128D  160A  118A  2220  160A  118A  	fcall	_delay_screen
  7895                           
  7896                           ;LCD_src.c: 48:  RA3=1;
  7897  1292  1283               	bcf	3,5	;RP0=0, select bank0
  7898  1293  1303               	bcf	3,6	;RP1=0, select bank0
  7899  1294  1585               	bsf	5,3	;volatile
  7900                           
  7901                           ;LCD_src.c: 49:  PORTD=x;
  7902  1295  0872               	movf	write_cmd@x,w
  7903  1296  0088               	movwf	8	;volatile
  7904                           
  7905                           ;LCD_src.c: 50:  delay_screen();
  7906  1297  160A  118A  2220   	fcall	_delay_screen
  7907                           
  7908                           ;LCD_src.c: 51:  RA3=0;
  7909  129A  1283               	bcf	3,5	;RP0=0, select bank0
  7910  129B  1303               	bcf	3,6	;RP1=0, select bank0
  7911  129C  1185               	bcf	5,3	;volatile
  7912  129D  0008               	return
  7913  129E                     __end_of_write_cmd:	
  7914                           
  7915                           	psect	text30
  7916  11E1                     __ptext30:	
  7917 ;; *************** function _time_date_hex_terminator *****************
  7918 ;; Defined at:
  7919 ;;		line 87 in file "math_src.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  val             1    wreg     unsigned char 
  7922 ;;  limiter         1    0[COMMON] unsigned char 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  val             1    3[COMMON] unsigned char 
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  1    wreg      unsigned char 
  7927 ;; Registers used:
  7928 ;;		wreg, status,2
  7929 ;; Tracked objects:
  7930 ;;		On entry : 300/0
  7931 ;;		On exit  : 300/0
  7932 ;;		Unchanged: 300/0
  7933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7934 ;;      Params:         1       0       0       0       0
  7935 ;;      Locals:         1       0       0       0       0
  7936 ;;      Temps:          2       0       0       0       0
  7937 ;;      Totals:         4       0       0       0       0
  7938 ;;Total ram usage:        4 bytes
  7939 ;; Hardware stack levels used:    1
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_time_settings
  7944 ;;		_date_settings
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           
  7949                           ;psect for function _time_date_hex_terminator
  7950  11E1                     _time_date_hex_terminator:	
  7951                           
  7952                           ;incstack = 0
  7953                           ; Regs used in _time_date_hex_terminator: [wreg+status,2]
  7954                           ;time_date_hex_terminator@val stored from wreg
  7955  11E1  00F3               	movwf	time_date_hex_terminator@val
  7956                           
  7957                           ;math_src.c: 88:     if((val + '0') == limiter){
  7958  11E2  0873               	movf	time_date_hex_terminator@val,w
  7959  11E3  3E30               	addlw	48
  7960  11E4  00F1               	movwf	??_time_date_hex_terminator
  7961  11E5  3000               	movlw	0
  7962  11E6  1803               	skipnc
  7963  11E7  3001               	movlw	1
  7964  11E8  00F2               	movwf	??_time_date_hex_terminator+1
  7965  11E9  0870               	movf	time_date_hex_terminator@limiter,w
  7966  11EA  0671               	xorwf	??_time_date_hex_terminator,w
  7967  11EB  0472               	iorwf	??_time_date_hex_terminator+1,w
  7968  11EC  1903               	btfsc	3,2
  7969                           
  7970                           ;math_src.c: 89:     val = 0x00;
  7971  11ED  01F3               	clrf	time_date_hex_terminator@val
  7972                           
  7973                           ;math_src.c: 91:     return val;
  7974  11EE  0873               	movf	time_date_hex_terminator@val,w
  7975  11EF  0008               	return
  7976  11F0                     __end_of_time_date_hex_terminator:	
  7977                           
  7978                           	psect	text31
  7979  08E9                     __ptext31:	
  7980 ;; *************** function _time_date_delimiter *****************
  7981 ;; Defined at:
  7982 ;;		line 28 in file "math_src.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  val             1    wreg     unsigned char 
  7985 ;;  hex             1    0[COMMON] unsigned char 
  7986 ;;  limiter         1    1[COMMON] unsigned char 
  7987 ;;  type            2    2[COMMON] int 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  val             1    6[COMMON] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  1    wreg      unsigned char 
  7992 ;; Registers used:
  7993 ;;		wreg, status,2, status,0
  7994 ;; Tracked objects:
  7995 ;;		On entry : 300/0
  7996 ;;		On exit  : 300/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7999 ;;      Params:         4       0       0       0       0
  8000 ;;      Locals:         1       0       0       0       0
  8001 ;;      Temps:          2       0       0       0       0
  8002 ;;      Totals:         7       0       0       0       0
  8003 ;;Total ram usage:        7 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_time_settings
  8009 ;;		_date_settings
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           
  8014                           ;psect for function _time_date_delimiter
  8015  08E9                     _time_date_delimiter:	
  8016                           
  8017                           ;incstack = 0
  8018                           ; Regs used in _time_date_delimiter: [wreg+status,2+status,0]
  8019                           ;time_date_delimiter@val stored from wreg
  8020  08E9  00F6               	movwf	time_date_delimiter@val
  8021                           
  8022                           ;math_src.c: 29:     if((val + '0') == limiter){
  8023  08EA  0876               	movf	time_date_delimiter@val,w
  8024  08EB  3E30               	addlw	48
  8025  08EC  00F4               	movwf	??_time_date_delimiter
  8026  08ED  3000               	movlw	0
  8027  08EE  1803               	skipnc
  8028  08EF  3001               	movlw	1
  8029  08F0  00F5               	movwf	??_time_date_delimiter+1
  8030  08F1  0871               	movf	time_date_delimiter@limiter,w
  8031  08F2  0674               	xorwf	??_time_date_delimiter,w
  8032  08F3  0475               	iorwf	??_time_date_delimiter+1,w
  8033  08F4  1D03               	skipz
  8034  08F5  2A3E               	goto	l3888
  8035                           
  8036                           ;math_src.c: 30:     val = hex;
  8037  08F6  0870               	movf	time_date_delimiter@hex,w
  8038  08F7  00F4               	movwf	??_time_date_delimiter
  8039  08F8  0874               	movf	??_time_date_delimiter,w
  8040  08F9  00F6               	movwf	time_date_delimiter@val
  8041                           
  8042                           ;math_src.c: 31:     stats=0;
  8043  08FA  01AA               	clrf	_stats
  8044  08FB  01AB               	clrf	_stats+1
  8045                           
  8046                           ;math_src.c: 32:     if(limiter == '9' && type ==1)
  8047  08FC  3039               	movlw	57
  8048  08FD  0671               	xorwf	time_date_delimiter@limiter,w
  8049  08FE  1D03               	btfss	3,2
  8050  08FF  2908               	goto	l3742
  8051  0900  0372               	decf	time_date_delimiter@type,w
  8052  0901  0473               	iorwf	time_date_delimiter@type+1,w
  8053  0902  1D03               	btfss	3,2
  8054  0903  2908               	goto	l3742
  8055                           
  8056                           ;math_src.c: 33:         prev_hex= 0x09;
  8057  0904  3009               	movlw	9
  8058  0905  00F4               	movwf	??_time_date_delimiter
  8059  0906  0874               	movf	??_time_date_delimiter,w
  8060  0907  00C5               	movwf	_prev_hex
  8061  0908                     l3742:	
  8062                           
  8063                           ;math_src.c: 34:     if(limiter == 'J'&& type ==1)
  8064  0908  304A               	movlw	74
  8065  0909  0671               	xorwf	time_date_delimiter@limiter,w
  8066  090A  1D03               	btfss	3,2
  8067  090B  2914               	goto	l3748
  8068  090C  0372               	decf	time_date_delimiter@type,w
  8069  090D  0473               	iorwf	time_date_delimiter@type+1,w
  8070  090E  1D03               	btfss	3,2
  8071  090F  2914               	goto	l3748
  8072                           
  8073                           ;math_src.c: 35:         prev_hex = 0x19;
  8074  0910  3019               	movlw	25
  8075  0911  00F4               	movwf	??_time_date_delimiter
  8076  0912  0874               	movf	??_time_date_delimiter,w
  8077  0913  00C5               	movwf	_prev_hex
  8078  0914                     l3748:	
  8079                           
  8080                           ;math_src.c: 36:     if(limiter == 'Y'&& type ==1)
  8081  0914  3059               	movlw	89
  8082  0915  0671               	xorwf	time_date_delimiter@limiter,w
  8083  0916  1D03               	btfss	3,2
  8084  0917  2920               	goto	l3754
  8085  0918  0372               	decf	time_date_delimiter@type,w
  8086  0919  0473               	iorwf	time_date_delimiter@type+1,w
  8087  091A  1D03               	btfss	3,2
  8088  091B  2920               	goto	l3754
  8089                           
  8090                           ;math_src.c: 37:         prev_hex = 0x29;
  8091  091C  3029               	movlw	41
  8092  091D  00F4               	movwf	??_time_date_delimiter
  8093  091E  0874               	movf	??_time_date_delimiter,w
  8094  091F  00C5               	movwf	_prev_hex
  8095  0920                     l3754:	
  8096                           
  8097                           ;math_src.c: 38:     if(limiter == 'j'&& type ==1)
  8098  0920  306A               	movlw	106
  8099  0921  0671               	xorwf	time_date_delimiter@limiter,w
  8100  0922  1D03               	btfss	3,2
  8101  0923  292C               	goto	l3760
  8102  0924  0372               	decf	time_date_delimiter@type,w
  8103  0925  0473               	iorwf	time_date_delimiter@type+1,w
  8104  0926  1D03               	btfss	3,2
  8105  0927  292C               	goto	l3760
  8106                           
  8107                           ;math_src.c: 39:         prev_hex =0x39;
  8108  0928  3039               	movlw	57
  8109  0929  00F4               	movwf	??_time_date_delimiter
  8110  092A  0874               	movf	??_time_date_delimiter,w
  8111  092B  00C5               	movwf	_prev_hex
  8112  092C                     l3760:	
  8113                           
  8114                           ;math_src.c: 40:     if(limiter == 'z'&& type ==1)
  8115  092C  307A               	movlw	122
  8116  092D  0671               	xorwf	time_date_delimiter@limiter,w
  8117  092E  1D03               	btfss	3,2
  8118  092F  2938               	goto	l3766
  8119  0930  0372               	decf	time_date_delimiter@type,w
  8120  0931  0473               	iorwf	time_date_delimiter@type+1,w
  8121  0932  1D03               	btfss	3,2
  8122  0933  2938               	goto	l3766
  8123                           
  8124                           ;math_src.c: 41:         prev_hex = 0x49;
  8125  0934  3049               	movlw	73
  8126  0935  00F4               	movwf	??_time_date_delimiter
  8127  0936  0874               	movf	??_time_date_delimiter,w
  8128  0937  00C5               	movwf	_prev_hex
  8129  0938                     l3766:	
  8130                           
  8131                           ;math_src.c: 42:     if(limiter == '9' && type ==2)
  8132  0938  3039               	movlw	57
  8133  0939  0671               	xorwf	time_date_delimiter@limiter,w
  8134  093A  1D03               	btfss	3,2
  8135  093B  2945               	goto	l3772
  8136  093C  3002               	movlw	2
  8137  093D  0672               	xorwf	time_date_delimiter@type,w
  8138  093E  0473               	iorwf	time_date_delimiter@type+1,w
  8139  093F  1D03               	btfss	3,2
  8140  0940  2945               	goto	l3772
  8141                           
  8142                           ;math_src.c: 43:         prev_hex_day= 0x09;
  8143  0941  3009               	movlw	9
  8144  0942  00F4               	movwf	??_time_date_delimiter
  8145  0943  0874               	movf	??_time_date_delimiter,w
  8146  0944  00C4               	movwf	_prev_hex_day
  8147  0945                     l3772:	
  8148                           
  8149                           ;math_src.c: 44:     if(limiter == 'J'&& type ==2)
  8150  0945  304A               	movlw	74
  8151  0946  0671               	xorwf	time_date_delimiter@limiter,w
  8152  0947  1D03               	btfss	3,2
  8153  0948  2952               	goto	l3778
  8154  0949  3002               	movlw	2
  8155  094A  0672               	xorwf	time_date_delimiter@type,w
  8156  094B  0473               	iorwf	time_date_delimiter@type+1,w
  8157  094C  1D03               	btfss	3,2
  8158  094D  2952               	goto	l3778
  8159                           
  8160                           ;math_src.c: 45:         prev_hex_day = 0x19;
  8161  094E  3019               	movlw	25
  8162  094F  00F4               	movwf	??_time_date_delimiter
  8163  0950  0874               	movf	??_time_date_delimiter,w
  8164  0951  00C4               	movwf	_prev_hex_day
  8165  0952                     l3778:	
  8166                           
  8167                           ;math_src.c: 46:     if(limiter == 'Y'&& type ==2)
  8168  0952  3059               	movlw	89
  8169  0953  0671               	xorwf	time_date_delimiter@limiter,w
  8170  0954  1D03               	btfss	3,2
  8171  0955  295F               	goto	l3784
  8172  0956  3002               	movlw	2
  8173  0957  0672               	xorwf	time_date_delimiter@type,w
  8174  0958  0473               	iorwf	time_date_delimiter@type+1,w
  8175  0959  1D03               	btfss	3,2
  8176  095A  295F               	goto	l3784
  8177                           
  8178                           ;math_src.c: 47:         prev_hex_day = 0x29;
  8179  095B  3029               	movlw	41
  8180  095C  00F4               	movwf	??_time_date_delimiter
  8181  095D  0874               	movf	??_time_date_delimiter,w
  8182  095E  00C4               	movwf	_prev_hex_day
  8183  095F                     l3784:	
  8184                           
  8185                           ;math_src.c: 48:     if(limiter == 'j'&& type ==2)
  8186  095F  306A               	movlw	106
  8187  0960  0671               	xorwf	time_date_delimiter@limiter,w
  8188  0961  1D03               	btfss	3,2
  8189  0962  296C               	goto	l3790
  8190  0963  3002               	movlw	2
  8191  0964  0672               	xorwf	time_date_delimiter@type,w
  8192  0965  0473               	iorwf	time_date_delimiter@type+1,w
  8193  0966  1D03               	btfss	3,2
  8194  0967  296C               	goto	l3790
  8195                           
  8196                           ;math_src.c: 49:         prev_hex_day =0x39;
  8197  0968  3039               	movlw	57
  8198  0969  00F4               	movwf	??_time_date_delimiter
  8199  096A  0874               	movf	??_time_date_delimiter,w
  8200  096B  00C4               	movwf	_prev_hex_day
  8201  096C                     l3790:	
  8202                           
  8203                           ;math_src.c: 50:     if(limiter == 'z'&& type ==2)
  8204  096C  307A               	movlw	122
  8205  096D  0671               	xorwf	time_date_delimiter@limiter,w
  8206  096E  1D03               	btfss	3,2
  8207  096F  2979               	goto	l3796
  8208  0970  3002               	movlw	2
  8209  0971  0672               	xorwf	time_date_delimiter@type,w
  8210  0972  0473               	iorwf	time_date_delimiter@type+1,w
  8211  0973  1D03               	btfss	3,2
  8212  0974  2979               	goto	l3796
  8213                           
  8214                           ;math_src.c: 51:         prev_hex_day = 0x49;
  8215  0975  3049               	movlw	73
  8216  0976  00F4               	movwf	??_time_date_delimiter
  8217  0977  0874               	movf	??_time_date_delimiter,w
  8218  0978  00C4               	movwf	_prev_hex_day
  8219  0979                     l3796:	
  8220                           
  8221                           ;math_src.c: 52:     if(limiter == '9' && type ==3)
  8222  0979  3039               	movlw	57
  8223  097A  0671               	xorwf	time_date_delimiter@limiter,w
  8224  097B  1D03               	btfss	3,2
  8225  097C  2986               	goto	l3802
  8226  097D  3003               	movlw	3
  8227  097E  0672               	xorwf	time_date_delimiter@type,w
  8228  097F  0473               	iorwf	time_date_delimiter@type+1,w
  8229  0980  1D03               	btfss	3,2
  8230  0981  2986               	goto	l3802
  8231                           
  8232                           ;math_src.c: 53:         prev_hex_year= 0x09;
  8233  0982  3009               	movlw	9
  8234  0983  00F4               	movwf	??_time_date_delimiter
  8235  0984  0874               	movf	??_time_date_delimiter,w
  8236  0985  00C3               	movwf	_prev_hex_year
  8237  0986                     l3802:	
  8238                           
  8239                           ;math_src.c: 54:     if(limiter == 'J'&& type ==3)
  8240  0986  304A               	movlw	74
  8241  0987  0671               	xorwf	time_date_delimiter@limiter,w
  8242  0988  1D03               	btfss	3,2
  8243  0989  2993               	goto	l3808
  8244  098A  3003               	movlw	3
  8245  098B  0672               	xorwf	time_date_delimiter@type,w
  8246  098C  0473               	iorwf	time_date_delimiter@type+1,w
  8247  098D  1D03               	btfss	3,2
  8248  098E  2993               	goto	l3808
  8249                           
  8250                           ;math_src.c: 55:         prev_hex_year = 0x19;
  8251  098F  3019               	movlw	25
  8252  0990  00F4               	movwf	??_time_date_delimiter
  8253  0991  0874               	movf	??_time_date_delimiter,w
  8254  0992  00C3               	movwf	_prev_hex_year
  8255  0993                     l3808:	
  8256                           
  8257                           ;math_src.c: 56:     if(limiter == 'Y'&& type ==3)
  8258  0993  3059               	movlw	89
  8259  0994  0671               	xorwf	time_date_delimiter@limiter,w
  8260  0995  1D03               	btfss	3,2
  8261  0996  29A0               	goto	l3814
  8262  0997  3003               	movlw	3
  8263  0998  0672               	xorwf	time_date_delimiter@type,w
  8264  0999  0473               	iorwf	time_date_delimiter@type+1,w
  8265  099A  1D03               	btfss	3,2
  8266  099B  29A0               	goto	l3814
  8267                           
  8268                           ;math_src.c: 57:         prev_hex_year = 0x29;
  8269  099C  3029               	movlw	41
  8270  099D  00F4               	movwf	??_time_date_delimiter
  8271  099E  0874               	movf	??_time_date_delimiter,w
  8272  099F  00C3               	movwf	_prev_hex_year
  8273  09A0                     l3814:	
  8274                           
  8275                           ;math_src.c: 58:     if(limiter == 'j'&& type ==3)
  8276  09A0  306A               	movlw	106
  8277  09A1  0671               	xorwf	time_date_delimiter@limiter,w
  8278  09A2  1D03               	btfss	3,2
  8279  09A3  29AD               	goto	l3820
  8280  09A4  3003               	movlw	3
  8281  09A5  0672               	xorwf	time_date_delimiter@type,w
  8282  09A6  0473               	iorwf	time_date_delimiter@type+1,w
  8283  09A7  1D03               	btfss	3,2
  8284  09A8  29AD               	goto	l3820
  8285                           
  8286                           ;math_src.c: 59:         prev_hex_year =0x39;
  8287  09A9  3039               	movlw	57
  8288  09AA  00F4               	movwf	??_time_date_delimiter
  8289  09AB  0874               	movf	??_time_date_delimiter,w
  8290  09AC  00C3               	movwf	_prev_hex_year
  8291  09AD                     l3820:	
  8292                           
  8293                           ;math_src.c: 60:     if(limiter == 'z'&& type ==3)
  8294  09AD  307A               	movlw	122
  8295  09AE  0671               	xorwf	time_date_delimiter@limiter,w
  8296  09AF  1D03               	btfss	3,2
  8297  09B0  29BA               	goto	l3826
  8298  09B1  3003               	movlw	3
  8299  09B2  0672               	xorwf	time_date_delimiter@type,w
  8300  09B3  0473               	iorwf	time_date_delimiter@type+1,w
  8301  09B4  1D03               	btfss	3,2
  8302  09B5  29BA               	goto	l3826
  8303                           
  8304                           ;math_src.c: 61:         prev_hex_year = 0x49;
  8305  09B6  3049               	movlw	73
  8306  09B7  00F4               	movwf	??_time_date_delimiter
  8307  09B8  0874               	movf	??_time_date_delimiter,w
  8308  09B9  00C3               	movwf	_prev_hex_year
  8309  09BA                     l3826:	
  8310                           
  8311                           ;math_src.c: 62:      if(limiter == '9' && type ==4)
  8312  09BA  3039               	movlw	57
  8313  09BB  0671               	xorwf	time_date_delimiter@limiter,w
  8314  09BC  1D03               	btfss	3,2
  8315  09BD  29C7               	goto	l3832
  8316  09BE  3004               	movlw	4
  8317  09BF  0672               	xorwf	time_date_delimiter@type,w
  8318  09C0  0473               	iorwf	time_date_delimiter@type+1,w
  8319  09C1  1D03               	btfss	3,2
  8320  09C2  29C7               	goto	l3832
  8321                           
  8322                           ;math_src.c: 63:         prev_hex_hours= 0x09;
  8323  09C3  3009               	movlw	9
  8324  09C4  00F4               	movwf	??_time_date_delimiter
  8325  09C5  0874               	movf	??_time_date_delimiter,w
  8326  09C6  00C2               	movwf	_prev_hex_hours
  8327  09C7                     l3832:	
  8328                           
  8329                           ;math_src.c: 64:     if(limiter == 'J'&& type ==4)
  8330  09C7  304A               	movlw	74
  8331  09C8  0671               	xorwf	time_date_delimiter@limiter,w
  8332  09C9  1D03               	btfss	3,2
  8333  09CA  29D4               	goto	l3838
  8334  09CB  3004               	movlw	4
  8335  09CC  0672               	xorwf	time_date_delimiter@type,w
  8336  09CD  0473               	iorwf	time_date_delimiter@type+1,w
  8337  09CE  1D03               	btfss	3,2
  8338  09CF  29D4               	goto	l3838
  8339                           
  8340                           ;math_src.c: 65:         prev_hex_hours = 0x19;
  8341  09D0  3019               	movlw	25
  8342  09D1  00F4               	movwf	??_time_date_delimiter
  8343  09D2  0874               	movf	??_time_date_delimiter,w
  8344  09D3  00C2               	movwf	_prev_hex_hours
  8345  09D4                     l3838:	
  8346                           
  8347                           ;math_src.c: 66:     if(limiter == 'Y'&& type ==4)
  8348  09D4  3059               	movlw	89
  8349  09D5  0671               	xorwf	time_date_delimiter@limiter,w
  8350  09D6  1D03               	btfss	3,2
  8351  09D7  29E1               	goto	l3844
  8352  09D8  3004               	movlw	4
  8353  09D9  0672               	xorwf	time_date_delimiter@type,w
  8354  09DA  0473               	iorwf	time_date_delimiter@type+1,w
  8355  09DB  1D03               	btfss	3,2
  8356  09DC  29E1               	goto	l3844
  8357                           
  8358                           ;math_src.c: 67:         prev_hex_hours = 0x29;
  8359  09DD  3029               	movlw	41
  8360  09DE  00F4               	movwf	??_time_date_delimiter
  8361  09DF  0874               	movf	??_time_date_delimiter,w
  8362  09E0  00C2               	movwf	_prev_hex_hours
  8363  09E1                     l3844:	
  8364                           
  8365                           ;math_src.c: 68:     if(limiter == 'j'&& type ==4)
  8366  09E1  306A               	movlw	106
  8367  09E2  0671               	xorwf	time_date_delimiter@limiter,w
  8368  09E3  1D03               	btfss	3,2
  8369  09E4  29EE               	goto	l3850
  8370  09E5  3004               	movlw	4
  8371  09E6  0672               	xorwf	time_date_delimiter@type,w
  8372  09E7  0473               	iorwf	time_date_delimiter@type+1,w
  8373  09E8  1D03               	btfss	3,2
  8374  09E9  29EE               	goto	l3850
  8375                           
  8376                           ;math_src.c: 69:         prev_hex_hours =0x39;
  8377  09EA  3039               	movlw	57
  8378  09EB  00F4               	movwf	??_time_date_delimiter
  8379  09EC  0874               	movf	??_time_date_delimiter,w
  8380  09ED  00C2               	movwf	_prev_hex_hours
  8381  09EE                     l3850:	
  8382                           
  8383                           ;math_src.c: 70:     if(limiter == 'z'&& type ==4)
  8384  09EE  307A               	movlw	122
  8385  09EF  0671               	xorwf	time_date_delimiter@limiter,w
  8386  09F0  1D03               	btfss	3,2
  8387  09F1  29FB               	goto	l3856
  8388  09F2  3004               	movlw	4
  8389  09F3  0672               	xorwf	time_date_delimiter@type,w
  8390  09F4  0473               	iorwf	time_date_delimiter@type+1,w
  8391  09F5  1D03               	btfss	3,2
  8392  09F6  29FB               	goto	l3856
  8393                           
  8394                           ;math_src.c: 71:         prev_hex_hours = 0x49;
  8395  09F7  3049               	movlw	73
  8396  09F8  00F4               	movwf	??_time_date_delimiter
  8397  09F9  0874               	movf	??_time_date_delimiter,w
  8398  09FA  00C2               	movwf	_prev_hex_hours
  8399  09FB                     l3856:	
  8400                           
  8401                           ;math_src.c: 72:      if(limiter == '9' && type ==5)
  8402  09FB  3039               	movlw	57
  8403  09FC  0671               	xorwf	time_date_delimiter@limiter,w
  8404  09FD  1D03               	btfss	3,2
  8405  09FE  2A08               	goto	l3862
  8406  09FF  3005               	movlw	5
  8407  0A00  0672               	xorwf	time_date_delimiter@type,w
  8408  0A01  0473               	iorwf	time_date_delimiter@type+1,w
  8409  0A02  1D03               	btfss	3,2
  8410  0A03  2A08               	goto	l3862
  8411                           
  8412                           ;math_src.c: 73:         prev_hex_mins= 0x09;
  8413  0A04  3009               	movlw	9
  8414  0A05  00F4               	movwf	??_time_date_delimiter
  8415  0A06  0874               	movf	??_time_date_delimiter,w
  8416  0A07  00C1               	movwf	_prev_hex_mins
  8417  0A08                     l3862:	
  8418                           
  8419                           ;math_src.c: 74:     if(limiter == 'J'&& type ==5)
  8420  0A08  304A               	movlw	74
  8421  0A09  0671               	xorwf	time_date_delimiter@limiter,w
  8422  0A0A  1D03               	btfss	3,2
  8423  0A0B  2A15               	goto	l3868
  8424  0A0C  3005               	movlw	5
  8425  0A0D  0672               	xorwf	time_date_delimiter@type,w
  8426  0A0E  0473               	iorwf	time_date_delimiter@type+1,w
  8427  0A0F  1D03               	btfss	3,2
  8428  0A10  2A15               	goto	l3868
  8429                           
  8430                           ;math_src.c: 75:         prev_hex_mins = 0x19;
  8431  0A11  3019               	movlw	25
  8432  0A12  00F4               	movwf	??_time_date_delimiter
  8433  0A13  0874               	movf	??_time_date_delimiter,w
  8434  0A14  00C1               	movwf	_prev_hex_mins
  8435  0A15                     l3868:	
  8436                           
  8437                           ;math_src.c: 76:     if(limiter == 'Y'&& type ==5)
  8438  0A15  3059               	movlw	89
  8439  0A16  0671               	xorwf	time_date_delimiter@limiter,w
  8440  0A17  1D03               	btfss	3,2
  8441  0A18  2A22               	goto	l3874
  8442  0A19  3005               	movlw	5
  8443  0A1A  0672               	xorwf	time_date_delimiter@type,w
  8444  0A1B  0473               	iorwf	time_date_delimiter@type+1,w
  8445  0A1C  1D03               	btfss	3,2
  8446  0A1D  2A22               	goto	l3874
  8447                           
  8448                           ;math_src.c: 77:         prev_hex_mins = 0x29;
  8449  0A1E  3029               	movlw	41
  8450  0A1F  00F4               	movwf	??_time_date_delimiter
  8451  0A20  0874               	movf	??_time_date_delimiter,w
  8452  0A21  00C1               	movwf	_prev_hex_mins
  8453  0A22                     l3874:	
  8454                           
  8455                           ;math_src.c: 78:     if(limiter == 'j'&& type ==5)
  8456  0A22  306A               	movlw	106
  8457  0A23  0671               	xorwf	time_date_delimiter@limiter,w
  8458  0A24  1D03               	btfss	3,2
  8459  0A25  2A2F               	goto	l3880
  8460  0A26  3005               	movlw	5
  8461  0A27  0672               	xorwf	time_date_delimiter@type,w
  8462  0A28  0473               	iorwf	time_date_delimiter@type+1,w
  8463  0A29  1D03               	btfss	3,2
  8464  0A2A  2A2F               	goto	l3880
  8465                           
  8466                           ;math_src.c: 79:         prev_hex_mins =0x39;
  8467  0A2B  3039               	movlw	57
  8468  0A2C  00F4               	movwf	??_time_date_delimiter
  8469  0A2D  0874               	movf	??_time_date_delimiter,w
  8470  0A2E  00C1               	movwf	_prev_hex_mins
  8471  0A2F                     l3880:	
  8472                           
  8473                           ;math_src.c: 80:     if(limiter == 'z'&& type ==5)
  8474  0A2F  307A               	movlw	122
  8475  0A30  0671               	xorwf	time_date_delimiter@limiter,w
  8476  0A31  1D03               	btfss	3,2
  8477  0A32  2A3C               	goto	l3886
  8478  0A33  3005               	movlw	5
  8479  0A34  0672               	xorwf	time_date_delimiter@type,w
  8480  0A35  0473               	iorwf	time_date_delimiter@type+1,w
  8481  0A36  1D03               	btfss	3,2
  8482  0A37  2A3C               	goto	l3886
  8483                           
  8484                           ;math_src.c: 81:         prev_hex_mins = 0x49;
  8485  0A38  3049               	movlw	73
  8486  0A39  00F4               	movwf	??_time_date_delimiter
  8487  0A3A  0874               	movf	??_time_date_delimiter,w
  8488  0A3B  00C1               	movwf	_prev_hex_mins
  8489  0A3C                     l3886:	
  8490                           
  8491                           ;math_src.c: 82:     val--;
  8492  0A3C  3001               	movlw	1
  8493  0A3D  02F6               	subwf	time_date_delimiter@val,f
  8494  0A3E                     l3888:	
  8495                           
  8496                           ;math_src.c: 84:     return val;
  8497  0A3E  0876               	movf	time_date_delimiter@val,w
  8498  0A3F  0008               	return
  8499  0A40                     __end_of_time_date_delimiter:	
  8500                           
  8501                           	psect	text32
  8502  138D                     __ptext32:	
  8503 ;; *************** function _set_time *****************
  8504 ;; Defined at:
  8505 ;;		line 12 in file "clock_src.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;  i               2    5[COMMON] int 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      void 
  8512 ;; Registers used:
  8513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 300/0
  8516 ;;		On exit  : 300/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8519 ;;      Params:         0       0       0       0       0
  8520 ;;      Locals:         2       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0
  8522 ;;      Totals:         2       0       0       0       0
  8523 ;;Total ram usage:        2 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    1
  8526 ;; This function calls:
  8527 ;;		_time_write_1
  8528 ;; This function is called by:
  8529 ;;		_main
  8530 ;;		_time_settings
  8531 ;;		_date_settings
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function _set_time
  8537  138D                     _set_time:	
  8538                           
  8539                           ;clock_src.c: 14:    int i;;clock_src.c: 15:    RB5=1;
  8540                           
  8541                           ;incstack = 0
  8542                           ; Regs used in _set_time: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8543  138D  1686               	bsf	6,5	;volatile
  8544                           
  8545                           ;clock_src.c: 16:    time_write_1(0xbe);
  8546  138E  30BE               	movlw	190
  8547  138F  160A  118A  2367  160A  118A  	fcall	_time_write_1
  8548                           
  8549                           ;clock_src.c: 17:    for(i=0;i<8;i++)
  8550  1394  01F5               	clrf	set_time@i
  8551  1395  01F6               	clrf	set_time@i+1
  8552  1396                     l3528:	
  8553                           
  8554                           ;clock_src.c: 18:      {;clock_src.c: 19:        time_write_1(table[i]);
  8555  1396  0875               	movf	set_time@i,w
  8556  1397  3EBB               	addlw	(low (_table| 0))& (0+255)
  8557  1398  0084               	movwf	4
  8558  1399  1383               	bcf	3,7	;select IRP bank1
  8559  139A  0800               	movf	0,w
  8560  139B  160A  118A  2367  160A  118A  	fcall	_time_write_1
  8561                           
  8562                           ;clock_src.c: 20:      }
  8563  13A0  3001               	movlw	1
  8564  13A1  07F5               	addwf	set_time@i,f
  8565  13A2  1803               	skipnc
  8566  13A3  0AF6               	incf	set_time@i+1,f
  8567  13A4  3000               	movlw	0
  8568  13A5  07F6               	addwf	set_time@i+1,f
  8569  13A6  0876               	movf	set_time@i+1,w
  8570  13A7  3A80               	xorlw	128
  8571  13A8  00FF               	movwf	127
  8572  13A9  3080               	movlw	128
  8573  13AA  027F               	subwf	127,w
  8574  13AB  1D03               	skipz
  8575  13AC  2BAF               	goto	u2355
  8576  13AD  3008               	movlw	8
  8577  13AE  0275               	subwf	set_time@i,w
  8578  13AF                     u2355:	
  8579  13AF  1C03               	skipc
  8580  13B0  2B96               	goto	l3528
  8581                           
  8582                           ;clock_src.c: 21:    RB5=0;
  8583  13B1  1283               	bcf	3,5	;RP0=0, select bank0
  8584  13B2  1303               	bcf	3,6	;RP1=0, select bank0
  8585  13B3  1286               	bcf	6,5	;volatile
  8586  13B4  0008               	return
  8587  13B5                     __end_of_set_time:	
  8588                           
  8589                           	psect	text33
  8590  1367                     __ptext33:	
  8591 ;; *************** function _time_write_1 *****************
  8592 ;; Defined at:
  8593 ;;		line 114 in file "clock_src.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  time_tx         1    wreg     unsigned char 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  time_tx         1    4[COMMON] unsigned char 
  8598 ;;  j               2    2[COMMON] int 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      void 
  8601 ;; Registers used:
  8602 ;;		wreg, status,2, status,0, btemp+1
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 300/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8608 ;;      Params:         0       0       0       0       0
  8609 ;;      Locals:         3       0       0       0       0
  8610 ;;      Temps:          2       0       0       0       0
  8611 ;;      Totals:         5       0       0       0       0
  8612 ;;Total ram usage:        5 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		_ds1302_init
  8618 ;;		_set_time
  8619 ;;		_get_time
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function _time_write_1
  8625  1367                     _time_write_1:	
  8626                           
  8627                           ;incstack = 0
  8628                           ; Regs used in _time_write_1: [wreg+status,2+status,0+btemp+1]
  8629                           ;time_write_1@time_tx stored from wreg
  8630  1367  00F4               	movwf	time_write_1@time_tx
  8631                           
  8632                           ;clock_src.c: 114: void time_write_1(unsigned char time_tx);clock_src.c: 115: {;clock_sr
      +                          c.c: 116:     int j;;clock_src.c: 117:     for(j=0;j<8;j++)
  8633  1368  01F2               	clrf	time_write_1@j
  8634  1369  01F3               	clrf	time_write_1@j+1
  8635  136A                     l488:	
  8636                           
  8637                           ;clock_src.c: 118:    {;clock_src.c: 119:         RB4=0;
  8638  136A  1283               	bcf	3,5	;RP0=0, select bank0
  8639  136B  1303               	bcf	3,6	;RP1=0, select bank0
  8640  136C  1206               	bcf	6,4	;volatile
  8641                           
  8642                           ;clock_src.c: 120:         RB0=0;
  8643  136D  1006               	bcf	6,0	;volatile
  8644                           
  8645                           ;clock_src.c: 121:         if(time_tx&0x01)
  8646  136E  1874               	btfsc	time_write_1@time_tx,0
  8647                           
  8648                           ;clock_src.c: 122:           {;clock_src.c: 123:             RB4=1;
  8649  136F  1606               	bsf	6,4	;volatile
  8650                           
  8651                           ;clock_src.c: 125:         time_tx=time_tx>>1;
  8652  1370  0874               	movf	time_write_1@time_tx,w
  8653  1371  00F0               	movwf	??_time_write_1
  8654  1372  1003               	clrc
  8655  1373  0C70               	rrf	??_time_write_1,w
  8656  1374  00F1               	movwf	??_time_write_1+1
  8657  1375  0871               	movf	??_time_write_1+1,w
  8658  1376  00F4               	movwf	time_write_1@time_tx
  8659                           
  8660                           ;clock_src.c: 126:         RB0=1;
  8661  1377  1406               	bsf	6,0	;volatile
  8662                           
  8663                           ;clock_src.c: 127:     }
  8664  1378  3001               	movlw	1
  8665  1379  07F2               	addwf	time_write_1@j,f
  8666  137A  1803               	skipnc
  8667  137B  0AF3               	incf	time_write_1@j+1,f
  8668  137C  3000               	movlw	0
  8669  137D  07F3               	addwf	time_write_1@j+1,f
  8670  137E  0873               	movf	time_write_1@j+1,w
  8671  137F  3A80               	xorlw	128
  8672  1380  00FF               	movwf	127
  8673  1381  3080               	movlw	128
  8674  1382  027F               	subwf	127,w
  8675  1383  1D03               	skipz
  8676  1384  2B87               	goto	u2345
  8677  1385  3008               	movlw	8
  8678  1386  0272               	subwf	time_write_1@j,w
  8679  1387                     u2345:	
  8680  1387  1C03               	skipc
  8681  1388  2B6A               	goto	l488
  8682                           
  8683                           ;clock_src.c: 128:       RB0=0;
  8684  1389  1283               	bcf	3,5	;RP0=0, select bank0
  8685  138A  1303               	bcf	3,6	;RP1=0, select bank0
  8686  138B  1006               	bcf	6,0	;volatile
  8687  138C  0008               	return
  8688  138D                     __end_of_time_write_1:	
  8689                           
  8690                           	psect	text34
  8691  1343                     __ptext34:	
  8692 ;; *************** function _incrementor *****************
  8693 ;; Defined at:
  8694 ;;		line 10 in file "math_src.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  upper_val       2    0[BANK0 ] int 
  8697 ;;  lower_val       2    2[BANK0 ] int 
  8698 ;;  z               1    4[BANK0 ] unsigned char 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;		None
  8701 ;; Return value:  Size  Location     Type
  8702 ;;                  1    wreg      unsigned char 
  8703 ;; Registers used:
  8704 ;;		wreg, status,2, status,0, pclath, cstack
  8705 ;; Tracked objects:
  8706 ;;		On entry : 300/0
  8707 ;;		On exit  : 300/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8710 ;;      Params:         0       5       0       0       0
  8711 ;;      Locals:         0       0       0       0       0
  8712 ;;      Temps:          2       0       0       0       0
  8713 ;;      Totals:         2       5       0       0       0
  8714 ;;Total ram usage:        7 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; Hardware stack levels required when called:    2
  8717 ;; This function calls:
  8718 ;;		_modulus_func
  8719 ;; This function is called by:
  8720 ;;		_thermometer_threshhold_settings
  8721 ;;		_time_settings
  8722 ;;		_date_settings
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _incrementor
  8728  1343                     _incrementor:	
  8729                           
  8730                           ;math_src.c: 11:      if(z == (lower_val + '0')){
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _incrementor: [wreg+status,2+status,0+pclath+cstack]
  8734  1343  0862               	movf	incrementor@lower_val,w
  8735  1344  3E30               	addlw	48
  8736  1345  00FB               	movwf	??_incrementor
  8737  1346  0863               	movf	incrementor@lower_val+1,w
  8738  1347  1803               	skipnc
  8739  1348  3E01               	addlw	1
  8740  1349  3E00               	addlw	0
  8741  134A  00FC               	movwf	??_incrementor+1
  8742  134B  0864               	movf	incrementor@z,w
  8743  134C  067B               	xorwf	??_incrementor,w
  8744  134D  047C               	iorwf	??_incrementor+1,w
  8745  134E  1D03               	skipz
  8746  134F  2B65               	goto	l3718
  8747                           
  8748                           ;math_src.c: 12:      upper_val++;
  8749  1350  3001               	movlw	1
  8750  1351  07E0               	addwf	incrementor@upper_val,f
  8751  1352  1803               	skipnc
  8752  1353  0AE1               	incf	incrementor@upper_val+1,f
  8753  1354  3000               	movlw	0
  8754  1355  07E1               	addwf	incrementor@upper_val+1,f
  8755                           
  8756                           ;math_src.c: 13:      upper_val =(modulus_func(upper_val,10));
  8757  1356  0861               	movf	incrementor@upper_val+1,w
  8758  1357  00F8               	movwf	modulus_func@x+1
  8759  1358  0860               	movf	incrementor@upper_val,w
  8760  1359  00F7               	movwf	modulus_func@x
  8761  135A  300A               	movlw	10
  8762  135B  00F9               	movwf	modulus_func@y
  8763  135C  3000               	movlw	0
  8764  135D  00FA               	movwf	modulus_func@y+1
  8765  135E  160A  118A  21FF   	fcall	_modulus_func
  8766  1361  0878               	movf	?_modulus_func+1,w
  8767  1362  00E1               	movwf	incrementor@upper_val+1
  8768  1363  0877               	movf	?_modulus_func,w
  8769  1364  00E0               	movwf	incrementor@upper_val
  8770  1365                     l3718:	
  8771                           
  8772                           ;math_src.c: 15:      return upper_val;
  8773  1365  0860               	movf	incrementor@upper_val,w
  8774  1366  0008               	return
  8775  1367                     __end_of_incrementor:	
  8776                           
  8777                           	psect	text35
  8778  11FF                     __ptext35:	
  8779 ;; *************** function _modulus_func *****************
  8780 ;; Defined at:
  8781 ;;		line 5 in file "math_src.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;  x               2    7[COMMON] int 
  8784 ;;  y               2    9[COMMON] int 
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;		None
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  2    7[COMMON] int 
  8789 ;; Registers used:
  8790 ;;		wreg, status,2, status,0, pclath, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 300/0
  8793 ;;		On exit  : 300/0
  8794 ;;		Unchanged: 300/0
  8795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8796 ;;      Params:         4       0       0       0       0
  8797 ;;      Locals:         0       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0
  8799 ;;      Totals:         4       0       0       0       0
  8800 ;;Total ram usage:        4 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    1
  8803 ;; This function calls:
  8804 ;;		___awmod
  8805 ;; This function is called by:
  8806 ;;		_main
  8807 ;;		_thermometer_threshhold_settings
  8808 ;;		_time_settings
  8809 ;;		_date_settings
  8810 ;;		_incrementor
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _modulus_func
  8816  11FF                     _modulus_func:	
  8817                           
  8818                           ;math_src.c: 6:     x = x % y;
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _modulus_func: [wreg+status,2+status,0+pclath+cstack]
  8822  11FF  087A               	movf	modulus_func@y+1,w
  8823  1200  00F1               	movwf	___awmod@divisor+1
  8824  1201  0879               	movf	modulus_func@y,w
  8825  1202  00F0               	movwf	___awmod@divisor
  8826  1203  0878               	movf	modulus_func@x+1,w
  8827  1204  00F3               	movwf	___awmod@dividend+1
  8828  1205  0877               	movf	modulus_func@x,w
  8829  1206  00F2               	movwf	___awmod@dividend
  8830  1207  160A  118A  255A   	fcall	___awmod
  8831  120A  0871               	movf	?___awmod+1,w
  8832  120B  00F8               	movwf	modulus_func@x+1
  8833  120C  0870               	movf	?___awmod,w
  8834  120D  00F7               	movwf	modulus_func@x
  8835                           
  8836                           ;math_src.c: 7:     return x;
  8837  120E  0008               	return
  8838  120F                     __end_of_modulus_func:	
  8839                           
  8840                           	psect	text36
  8841  155A                     __ptext36:	
  8842 ;; *************** function ___awmod *****************
  8843 ;; Defined at:
  8844 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;  divisor         2    0[COMMON] int 
  8847 ;;  dividend        2    2[COMMON] int 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  sign            1    6[COMMON] unsigned char 
  8850 ;;  counter         1    5[COMMON] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  2    0[COMMON] int 
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0
  8855 ;; Tracked objects:
  8856 ;;		On entry : 300/0
  8857 ;;		On exit  : 300/0
  8858 ;;		Unchanged: 300/0
  8859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8860 ;;      Params:         4       0       0       0       0
  8861 ;;      Locals:         2       0       0       0       0
  8862 ;;      Temps:          1       0       0       0       0
  8863 ;;      Totals:         7       0       0       0       0
  8864 ;;Total ram usage:        7 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; This function calls:
  8867 ;;		Nothing
  8868 ;; This function is called by:
  8869 ;;		_modulus_func
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function ___awmod
  8875  155A                     ___awmod:	
  8876                           
  8877                           ;incstack = 0
  8878                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8879  155A  01F6               	clrf	___awmod@sign
  8880  155B  1FF3               	btfss	___awmod@dividend+1,7
  8881  155C  2D64               	goto	l3450
  8882  155D  09F2               	comf	___awmod@dividend,f
  8883  155E  09F3               	comf	___awmod@dividend+1,f
  8884  155F  0AF2               	incf	___awmod@dividend,f
  8885  1560  1903               	skipnz
  8886  1561  0AF3               	incf	___awmod@dividend+1,f
  8887  1562  01F6               	clrf	___awmod@sign
  8888  1563  0AF6               	incf	___awmod@sign,f
  8889  1564                     l3450:	
  8890  1564  1FF1               	btfss	___awmod@divisor+1,7
  8891  1565  2D6B               	goto	l3454
  8892  1566  09F0               	comf	___awmod@divisor,f
  8893  1567  09F1               	comf	___awmod@divisor+1,f
  8894  1568  0AF0               	incf	___awmod@divisor,f
  8895  1569  1903               	skipnz
  8896  156A  0AF1               	incf	___awmod@divisor+1,f
  8897  156B                     l3454:	
  8898  156B  0870               	movf	___awmod@divisor,w
  8899  156C  0471               	iorwf	___awmod@divisor+1,w
  8900  156D  1903               	btfsc	3,2
  8901  156E  2D98               	goto	l3472
  8902  156F  01F5               	clrf	___awmod@counter
  8903  1570  0AF5               	incf	___awmod@counter,f
  8904  1571                     l3462:	
  8905  1571  1BF1               	btfsc	___awmod@divisor+1,7
  8906  1572  2D7F               	goto	l3464
  8907  1573  3001               	movlw	1
  8908  1574                     u2245:	
  8909  1574  1003               	clrc
  8910  1575  0DF0               	rlf	___awmod@divisor,f
  8911  1576  0DF1               	rlf	___awmod@divisor+1,f
  8912  1577  3EFF               	addlw	-1
  8913  1578  1D03               	skipz
  8914  1579  2D74               	goto	u2245
  8915  157A  3001               	movlw	1
  8916  157B  00F4               	movwf	??___awmod
  8917  157C  0874               	movf	??___awmod,w
  8918  157D  07F5               	addwf	___awmod@counter,f
  8919  157E  2D71               	goto	l3462
  8920  157F                     l3464:	
  8921  157F  0871               	movf	___awmod@divisor+1,w
  8922  1580  0273               	subwf	___awmod@dividend+1,w
  8923  1581  1D03               	skipz
  8924  1582  2D85               	goto	u2265
  8925  1583  0870               	movf	___awmod@divisor,w
  8926  1584  0272               	subwf	___awmod@dividend,w
  8927  1585                     u2265:	
  8928  1585  1C03               	skipc
  8929  1586  2D8D               	goto	l3468
  8930  1587  0870               	movf	___awmod@divisor,w
  8931  1588  02F2               	subwf	___awmod@dividend,f
  8932  1589  0871               	movf	___awmod@divisor+1,w
  8933  158A  1C03               	skipc
  8934  158B  03F3               	decf	___awmod@dividend+1,f
  8935  158C  02F3               	subwf	___awmod@dividend+1,f
  8936  158D                     l3468:	
  8937  158D  3001               	movlw	1
  8938  158E                     u2275:	
  8939  158E  1003               	clrc
  8940  158F  0CF1               	rrf	___awmod@divisor+1,f
  8941  1590  0CF0               	rrf	___awmod@divisor,f
  8942  1591  3EFF               	addlw	-1
  8943  1592  1D03               	skipz
  8944  1593  2D8E               	goto	u2275
  8945  1594  3001               	movlw	1
  8946  1595  02F5               	subwf	___awmod@counter,f
  8947  1596  1D03               	btfss	3,2
  8948  1597  2D7F               	goto	l3464
  8949  1598                     l3472:	
  8950  1598  0876               	movf	___awmod@sign,w
  8951  1599  1903               	btfsc	3,2
  8952  159A  2DA0               	goto	l3476
  8953  159B  09F2               	comf	___awmod@dividend,f
  8954  159C  09F3               	comf	___awmod@dividend+1,f
  8955  159D  0AF2               	incf	___awmod@dividend,f
  8956  159E  1903               	skipnz
  8957  159F  0AF3               	incf	___awmod@dividend+1,f
  8958  15A0                     l3476:	
  8959  15A0  0873               	movf	___awmod@dividend+1,w
  8960  15A1  00F1               	movwf	?___awmod+1
  8961  15A2  0872               	movf	___awmod@dividend,w
  8962  15A3  00F0               	movwf	?___awmod
  8963  15A4  0008               	return
  8964  15A5                     __end_of___awmod:	
  8965                           
  8966                           	psect	text37
  8967  1234                     __ptext37:	
  8968 ;; *************** function _button_delay *****************
  8969 ;; Defined at:
  8970 ;;		line 744 in file "Button_src.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;		None
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;  i               2    0[COMMON] int 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg, status,2, btemp+1
  8979 ;; Tracked objects:
  8980 ;;		On entry : 300/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8984 ;;      Params:         0       0       0       0       0
  8985 ;;      Locals:         2       0       0       0       0
  8986 ;;      Temps:          0       0       0       0       0
  8987 ;;      Totals:         2       0       0       0       0
  8988 ;;Total ram usage:        2 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; This function calls:
  8991 ;;		Nothing
  8992 ;; This function is called by:
  8993 ;;		_set_beep_threshhold
  8994 ;;		_thermometer_threshhold_settings
  8995 ;;		_time_settings
  8996 ;;		_date_settings
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           
  9001                           ;psect for function _button_delay
  9002  1234                     _button_delay:	
  9003                           
  9004                           ;Button_src.c: 745:     for(int i=0;i<10000;i++);
  9005                           
  9006                           ;incstack = 0
  9007                           ; Regs used in _button_delay: [wreg+status,2+btemp+1]
  9008  1234  01F0               	clrf	button_delay@i
  9009  1235  01F1               	clrf	button_delay@i+1
  9010  1236                     l3708:	
  9011  1236  3001               	movlw	1
  9012  1237  07F0               	addwf	button_delay@i,f
  9013  1238  1803               	skipnc
  9014  1239  0AF1               	incf	button_delay@i+1,f
  9015  123A  3000               	movlw	0
  9016  123B  07F1               	addwf	button_delay@i+1,f
  9017  123C  0871               	movf	button_delay@i+1,w
  9018  123D  3A80               	xorlw	128
  9019  123E  00FF               	movwf	127
  9020  123F  30A7               	movlw	167
  9021  1240  027F               	subwf	127,w
  9022  1241  1D03               	skipz
  9023  1242  2A45               	goto	u2455
  9024  1243  3010               	movlw	16
  9025  1244  0270               	subwf	button_delay@i,w
  9026  1245                     u2455:	
  9027  1245  1803               	btfsc	3,0
  9028  1246  0008               	return
  9029  1247  2A36               	goto	l3708
  9030  1248                     __end_of_button_delay:	
  9031                           
  9032                           	psect	text38
  9033  15FE                     __ptext38:	
  9034 ;; *************** function _cold_threshold *****************
  9035 ;; Defined at:
  9036 ;;		line 22 in file "threshold_src.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  upper_val       2    3[COMMON] int 
  9039 ;;  lower_val       2    5[COMMON] int 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;		None
  9042 ;; Return value:  Size  Location     Type
  9043 ;;                  1    wreg      unsigned char 
  9044 ;; Registers used:
  9045 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9046 ;; Tracked objects:
  9047 ;;		On entry : 200/100
  9048 ;;		On exit  : 300/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9051 ;;      Params:         4       0       0       0       0
  9052 ;;      Locals:         0       0       0       0       0
  9053 ;;      Temps:          1       0       0       0       0
  9054 ;;      Totals:         5       0       0       0       0
  9055 ;;Total ram usage:        5 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    2
  9058 ;; This function calls:
  9059 ;;		_write_char
  9060 ;; This function is called by:
  9061 ;;		_main
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           
  9066                           ;psect for function _cold_threshold
  9067  15FE                     _cold_threshold:	
  9068                           
  9069                           ;threshold_src.c: 23:      if(shi <= upper_val && (ge <= lower_val || ge >= lower_val)){
  9070                           
  9071                           ;incstack = 0
  9072                           ; Regs used in _cold_threshold: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9073  15FE  0874               	movf	cold_threshold@upper_val+1,w
  9074  15FF  3A80               	xorlw	128
  9075  1600  00F7               	movwf	??_cold_threshold
  9076  1601  3080               	movlw	128
  9077  1602  0277               	subwf	??_cold_threshold,w
  9078  1603  1D03               	skipz
  9079  1604  2E08               	goto	u4225
  9080  1605  1283               	bcf	3,5	;RP0=0, select bank0
  9081  1606  085B               	movf	_shi,w
  9082  1607  0273               	subwf	cold_threshold@upper_val,w
  9083  1608                     u4225:	
  9084  1608  1C03               	skipc
  9085  1609  2E58               	goto	l1000
  9086  160A  0876               	movf	cold_threshold@lower_val+1,w
  9087  160B  3A80               	xorlw	128
  9088  160C  00F7               	movwf	??_cold_threshold
  9089  160D  3080               	movlw	128
  9090  160E  0277               	subwf	??_cold_threshold,w
  9091  160F  1D03               	skipz
  9092  1610  2E15               	goto	u4235
  9093  1611  1283               	bcf	3,5	;RP0=0, select bank0
  9094  1612  1303               	bcf	3,6	;RP1=0, select bank0
  9095  1613  085A               	movf	_ge,w
  9096  1614  0275               	subwf	cold_threshold@lower_val,w
  9097  1615                     u4235:	
  9098  1615  1803               	skipnc
  9099  1616  2E22               	goto	l5020
  9100  1617  0876               	movf	cold_threshold@lower_val+1,w
  9101  1618  3A80               	xorlw	128
  9102  1619  3C80               	sublw	128
  9103  161A  1D03               	skipz
  9104  161B  2E20               	goto	u4245
  9105  161C  0875               	movf	cold_threshold@lower_val,w
  9106  161D  1283               	bcf	3,5	;RP0=0, select bank0
  9107  161E  1303               	bcf	3,6	;RP1=0, select bank0
  9108  161F  025A               	subwf	_ge,w
  9109  1620                     u4245:	
  9110  1620  1C03               	skipc
  9111  1621  2E58               	goto	l1000
  9112  1622                     l5020:	
  9113                           
  9114                           ;threshold_src.c: 24:     cold_counter ++;
  9115  1622  3001               	movlw	1
  9116  1623  1683               	bsf	3,5	;RP0=1, select bank1
  9117  1624  1303               	bcf	3,6	;RP1=0, select bank1
  9118  1625  07B7               	addwf	_cold_counter^(0+128),f
  9119  1626  1803               	skipnc
  9120  1627  0AB8               	incf	(_cold_counter+1)^(0+128),f
  9121  1628  3000               	movlw	0
  9122  1629  07B8               	addwf	(_cold_counter+1)^(0+128),f
  9123                           
  9124                           ;threshold_src.c: 25:     heater_state = '1';
  9125  162A  3031               	movlw	49
  9126  162B  00F7               	movwf	??_cold_threshold
  9127  162C  0877               	movf	??_cold_threshold,w
  9128  162D  1283               	bcf	3,5	;RP0=0, select bank0
  9129  162E  00D1               	movwf	_heater_state
  9130                           
  9131                           ;threshold_src.c: 26:     cooler_state = '0';
  9132  162F  3030               	movlw	48
  9133  1630  00F7               	movwf	??_cold_threshold
  9134  1631  0877               	movf	??_cold_threshold,w
  9135  1632  00D0               	movwf	_cooler_state
  9136                           
  9137                           ;threshold_src.c: 27:     write_char('C');
  9138  1633  3043               	movlw	67
  9139  1634  160A  118A  2270  160A  118A  	fcall	_write_char
  9140                           
  9141                           ;threshold_src.c: 28:     write_char('O');
  9142  1639  304F               	movlw	79
  9143  163A  160A  118A  2270  160A  118A  	fcall	_write_char
  9144                           
  9145                           ;threshold_src.c: 29:     write_char('L');
  9146  163F  304C               	movlw	76
  9147  1640  160A  118A  2270  160A  118A  	fcall	_write_char
  9148                           
  9149                           ;threshold_src.c: 30:     write_char('D');
  9150  1645  3044               	movlw	68
  9151  1646  160A  118A  2270  160A  118A  	fcall	_write_char
  9152                           
  9153                           ;threshold_src.c: 31:     if(cold_counter > 1000){
  9154  164B  3003               	movlw	3
  9155  164C  1683               	bsf	3,5	;RP0=1, select bank1
  9156  164D  0238               	subwf	(_cold_counter+1)^(0+128),w
  9157  164E  30E9               	movlw	233
  9158  164F  1903               	skipnz
  9159  1650  0237               	subwf	_cold_counter^(0+128),w
  9160  1651  1C03               	skipc
  9161  1652  2E58               	goto	l1000
  9162                           
  9163                           ;threshold_src.c: 32:         heater_state = '-';
  9164  1653  302D               	movlw	45
  9165  1654  00F7               	movwf	??_cold_threshold
  9166  1655  0877               	movf	??_cold_threshold,w
  9167  1656  1283               	bcf	3,5	;RP0=0, select bank0
  9168  1657  00D1               	movwf	_heater_state
  9169  1658                     l1000:	
  9170                           ;threshold_src.c: 36:     }
  9171                           
  9172                           
  9173                           ;threshold_src.c: 37:     return buzzer_watcher;
  9174  1658  1283               	bcf	3,5	;RP0=0, select bank0
  9175  1659  1303               	bcf	3,6	;RP1=0, select bank0
  9176  165A  0853               	movf	_buzzer_watcher,w
  9177  165B  0008               	return
  9178  165C                     __end_of_cold_threshold:	
  9179                           
  9180                           	psect	text39
  9181  1270                     __ptext39:	
  9182 ;; *************** function _write_char *****************
  9183 ;; Defined at:
  9184 ;;		line 28 in file "LCD_src.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  x               1    wreg     unsigned char 
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;  x               1    2[COMMON] unsigned char 
  9189 ;;  i               2    0        int 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 300/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9199 ;;      Params:         0       0       0       0       0
  9200 ;;      Locals:         1       0       0       0       0
  9201 ;;      Temps:          0       0       0       0       0
  9202 ;;      Totals:         1       0       0       0       0
  9203 ;;Total ram usage:        1 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    1
  9206 ;; This function calls:
  9207 ;;		_delay_screen
  9208 ;; This function is called by:
  9209 ;;		_main
  9210 ;;		_display_temp
  9211 ;;		_display_clock
  9212 ;;		_display_date
  9213 ;;		_thermometer_threshhold_settings
  9214 ;;		_time_settings
  9215 ;;		_date_settings
  9216 ;;		_set_upper_threshold
  9217 ;;		_cold_threshold
  9218 ;;		_set_lower_threshold
  9219 ;;		_reset_alarm
  9220 ;;		_display_day
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           
  9225                           ;psect for function _write_char
  9226  1270                     _write_char:	
  9227                           
  9228                           ;incstack = 0
  9229                           ; Regs used in _write_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9230                           ;write_char@x stored from wreg
  9231  1270  00F2               	movwf	write_char@x
  9232                           
  9233                           ;LCD_src.c: 28: void write_char(char x);LCD_src.c: 29: {;LCD_src.c: 30:  int i;;LCD_src.
      +                          c: 31:  RA5=1;
  9234  1271  1283               	bcf	3,5	;RP0=0, select bank0
  9235  1272  1303               	bcf	3,6	;RP1=0, select bank0
  9236  1273  1685               	bsf	5,5	;volatile
  9237                           
  9238                           ;LCD_src.c: 32:  RA4=0;
  9239  1274  1205               	bcf	5,4	;volatile
  9240                           
  9241                           ;LCD_src.c: 33:  RA3=0;
  9242  1275  1185               	bcf	5,3	;volatile
  9243                           
  9244                           ;LCD_src.c: 34:  delay_screen();
  9245  1276  160A  118A  2220  160A  118A  	fcall	_delay_screen
  9246                           
  9247                           ;LCD_src.c: 35:  RA3=1;
  9248  127B  1283               	bcf	3,5	;RP0=0, select bank0
  9249  127C  1303               	bcf	3,6	;RP1=0, select bank0
  9250  127D  1585               	bsf	5,3	;volatile
  9251                           
  9252                           ;LCD_src.c: 36:  PORTD= x;
  9253  127E  0872               	movf	write_char@x,w
  9254  127F  0088               	movwf	8	;volatile
  9255                           
  9256                           ;LCD_src.c: 37:  delay_screen();
  9257  1280  160A  118A  2220   	fcall	_delay_screen
  9258                           
  9259                           ;LCD_src.c: 38:  RA3=0;
  9260  1283  1283               	bcf	3,5	;RP0=0, select bank0
  9261  1284  1303               	bcf	3,6	;RP1=0, select bank0
  9262  1285  1185               	bcf	5,3	;volatile
  9263  1286  0008               	return
  9264  1287                     __end_of_write_char:	
  9265                           
  9266                           	psect	text40
  9267  1220                     __ptext40:	
  9268 ;; *************** function _delay_screen *****************
  9269 ;; Defined at:
  9270 ;;		line 70 in file "LCD_src.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  i               2    0[COMMON] int 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  1    wreg      void 
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, btemp+1
  9279 ;; Tracked objects:
  9280 ;;		On entry : 300/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9284 ;;      Params:         0       0       0       0       0
  9285 ;;      Locals:         2       0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0
  9287 ;;      Totals:         2       0       0       0       0
  9288 ;;Total ram usage:        2 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_lcd_init
  9294 ;;		_write_char
  9295 ;;		_write_cmd
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           
  9300                           ;psect for function _delay_screen
  9301  1220                     _delay_screen:	
  9302                           
  9303                           ;LCD_src.c: 71:     int i;;LCD_src.c: 72:  for(i=0;i<5;i++);
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in _delay_screen: [wreg+status,2+btemp+1]
  9307  1220  01F0               	clrf	delay_screen@i
  9308  1221  01F1               	clrf	delay_screen@i+1
  9309  1222                     l3492:	
  9310  1222  3001               	movlw	1
  9311  1223  07F0               	addwf	delay_screen@i,f
  9312  1224  1803               	skipnc
  9313  1225  0AF1               	incf	delay_screen@i+1,f
  9314  1226  3000               	movlw	0
  9315  1227  07F1               	addwf	delay_screen@i+1,f
  9316  1228  0871               	movf	delay_screen@i+1,w
  9317  1229  3A80               	xorlw	128
  9318  122A  00FF               	movwf	127
  9319  122B  3080               	movlw	128
  9320  122C  027F               	subwf	127,w
  9321  122D  1D03               	skipz
  9322  122E  2A31               	goto	u2305
  9323  122F  3005               	movlw	5
  9324  1230  0270               	subwf	delay_screen@i,w
  9325  1231                     u2305:	
  9326  1231  1803               	btfsc	3,0
  9327  1232  0008               	return
  9328  1233  2A22               	goto	l3492
  9329  1234                     __end_of_delay_screen:	
  9330  007E                     btemp	set	126	;btemp
  9331  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      79
    BANK1            80      0      35
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _set_upper_threshold->_write_char
    _set_lower_threshold->_write_char
    _set_beep_threshhold->_button_delay
    _reset_alarm->_write_char
    _lcd_init->_write_cmd
    _get_time->_time_read_1
    _get_time->_time_write_1
    _get_temp->___lwdiv
    _write_byte->_delay_temp
    _reset_temp->_delay_temp
    _read_byte->_delay_temp
    ___lwdiv->___lwmod
    _ds1302_init->_time_write_1
    _display_temp->_write_char
    _display_day->_write_char
    _display_date->_write_char
    _display_clock->_write_char
    _date_settings->_incrementor
    _write_cmd->_delay_screen
    _set_time->_time_write_1
    _incrementor->_modulus_func
    _modulus_func->___awmod
    _cold_threshold->_write_char
    _write_char->_delay_screen

Critical Paths under _main in BANK0

    _main->_date_settings
    _main->_thermometer_threshhold_settings
    _main->_time_settings
    _time_settings->_incrementor
    _thermometer_threshhold_settings->_incrementor
    _date_settings->_incrementor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   46338
                                              8 BANK0      7     7      0
                     _cold_threshold
                      _date_settings
                      _display_clock
                       _display_date
                        _display_day
                       _display_temp
                        _ds1302_init
                           _get_temp
                           _get_time
                               _init
                          _init_temp
                 _initialise_buttons
                           _lcd_init
                       _modulus_func
                        _reset_alarm
                _set_beep_threshhold
                _set_lower_threshold
                           _set_time
                _set_upper_threshold
    _thermometer_threshhold_settings
                      _time_settings
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _time_settings                                        3     3      0   14370
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _thermometer_threshhold_settings                      3     3      0    8166
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _set_upper_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_lower_threshold                                  5     1      4     416
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _set_beep_threshhold                                  1     1      0      68
                                              2 COMMON     1     1      0
                       _button_delay
 ---------------------------------------------------------------------------------
 (1) _reset_alarm                                          1     1      0      68
                                              3 COMMON     1     1      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     114
                       _delay_screen
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _initialise_buttons                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_temp                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             3     3      0     274
                                              5 COMMON     3     3      0
                        _time_read_1
                       _time_write_1
 ---------------------------------------------------------------------------------
 (2) _time_read_1                                          5     5      0     115
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             6     6      0    3303
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                             _delay2
                          _read_byte
                         _reset_temp
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     561
                                              4 COMMON     5     5      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _reset_temp                                           2     2      0     472
                                              4 COMMON     2     2      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            3     3      0     518
                                              4 COMMON     3     3      0
                         _delay_temp
 ---------------------------------------------------------------------------------
 (3) _delay_temp                                           4     3      1     447
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _delay2                                               2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     615
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     238
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ds1302_init                                          0     0      0      91
                       _time_write_1
 ---------------------------------------------------------------------------------
 (1) _display_temp                                         0     0      0      68
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_day                                          2     0      2     320
                                              3 COMMON     2     0      2
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_date                                         4     4      0     275
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _display_clock                                        4     4      0     319
                                              3 COMMON     4     4      0
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _date_settings                                        3     3      0   14370
                                              5 BANK0      3     3      0
                       _button_delay
                        _incrementor
                       _modulus_func
                           _set_time
                _time_date_delimiter
           _time_date_hex_terminator
                         _write_char
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                            3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _time_date_hex_terminator                             4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _time_date_delimiter                                  7     3      4    5750
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _set_time                                             2     2      0     159
                                              5 COMMON     2     2      0
                       _time_write_1
 ---------------------------------------------------------------------------------
 (3) _time_write_1                                         5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _incrementor                                          7     2      5    5063
                                             11 COMMON     2     2      0
                                              0 BANK0      5     0      5
                       _modulus_func
 ---------------------------------------------------------------------------------
 (2) _modulus_func                                         4     0      4    2921
                                              7 COMMON     4     0      4
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _cold_threshold                                       5     1      4     438
                                              3 COMMON     5     1      4
                         _write_char
 ---------------------------------------------------------------------------------
 (1) _write_char                                           3     3      0      68
                                              2 COMMON     1     1      0
                       _delay_screen
 ---------------------------------------------------------------------------------
 (2) _delay_screen                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cold_threshold
     _write_char
       _delay_screen
   _date_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _display_clock
     _write_char
       _delay_screen
   _display_date
     _write_char
       _delay_screen
   _display_day
     _write_char
       _delay_screen
   _display_temp
     _write_char
       _delay_screen
   _ds1302_init
     _time_write_1
   _get_temp
     ___lbdiv
     ___lbmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _delay2
     _read_byte
       _delay_temp
     _reset_temp
       _delay_temp
     _write_byte
       _delay_temp
   _get_time
     _time_read_1
     _time_write_1
   _init
   _init_temp
   _initialise_buttons
   _lcd_init
     _delay_screen
     _write_cmd
       _delay_screen
   _modulus_func
     ___awmod
   _reset_alarm
     _write_char
       _delay_screen
   _set_beep_threshhold
     _button_delay
   _set_lower_threshold
     _write_char
       _delay_screen
   _set_time
     _time_write_1
   _set_upper_threshold
     _write_char
       _delay_screen
   _thermometer_threshhold_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _time_settings
     _button_delay
     _incrementor
       _modulus_func
         ___awmod
     _modulus_func
       ___awmod
     _set_time
       _time_write_1
     _time_date_delimiter
     _time_date_hex_terminator
     _write_char
       _delay_screen
     _write_cmd
       _delay_screen
   _write_char
     _delay_screen
   _write_cmd
     _delay_screen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      23       7       43.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      80      12        0.0%
ABS                  0      0      80       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Dec 12 19:06:42 2019

                                       _a 004A                                         _b 0049  
                                       _c 0048                                         _p 0028  
                                       _t 0038                                         _w 0036  
                                       _x 0034                                         _y 0032  
                                       _z 0030                                         pc 0002  
            set_lower_threshold@lower_val 0075                              ?_display_day 0073  
                                      _TX 005C                                        _TZ 005D  
                                      _ge 005A                                        _wd 003E  
                                      fsr 0004         __size_of_time_date_hex_terminator 000F  
               ?_time_date_hex_terminator 0070                       _set_beep_threshhold 129E  
                           ?_display_date 0070                                       l173 0BBF  
                                     l373 11D4                                       l802 0293  
                                     l811 0393                                       l820 0475  
                                     l813 03F9                                       l805 0320  
                                     l814 0401                                       l494 1416  
                                     l488 136A                                       l825 04F5  
                                     l761 0C3A                                       l834 06AB  
                                     l826 04FD                                       l819 046D  
                                     l793 016D                                       l785 0092  
                                     l778 0FED                                       l794 0175  
                                     l787 00F8                                       l788 0100  
                                     l994 15FA                                       _RA0 0028  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RC0 0038  
                                     _RA5 002D                                       _RC1 0039  
                                     _RB4 0034                                       _RC2 003A  
                                     _RB5 0035                                       _RC3 003B  
                                     _RE0 0048                                       _RC4 003C  
                                     _RE2 004A                                       _RC6 003E  
                                     _RC7 003F                                       _THV 005E  
                           ?_display_temp 0070                                       _TLV 005F  
                                     _shi 005B                                       fsr0 0004  
                                     indf 0000                              ___awmod@sign 0076  
                            __CFG_FOSC$HS 0000                           ??_time_settings 0065  
                            __CFG_LVP$OFF 0000              set_lower_threshold@upper_val 0073  
                                    l1000 1658                                      l1007 1556  
                                    l4110 1667                                      l1374 131A  
                                    l5020 1622                                      l4300 0DB3  
                                    l4212 0CC0                                      l4070 178E  
                                    l4302 0DB8                                      l3600 14F4  
                                    l4240 0D0E                                      l4216 0CC9  
                                    l3450 1564                                      l4074 1798  
                                    l4066 1784                                      l4218 0CCE  
                                    l5130 0A7F                                      l4148 084F  
                                    l5052 140E                                      l4404 0F23  
                                    l4340 0E20                                      l4244 0D17  
                                    l5204 0BF9                                      l3462 1571  
                                    l3454 156B                                      l3622 1477  
                                    l4078 17A2                                      l4246 0D1C  
                                    l3464 157F                                      l3472 1598  
                                    l3528 1396                                      l4272 0D65  
                                    l3802 0986                                      l4530 043E  
                                    l5090 0054                                      l5082 0032  
                                    l3570 14CF                                      l4098 13C0  
                                    l5066 12B7                                      l4274 0D6A  
                                    l3492 1222                                      l3708 1236  
                                    l3476 15A0                                      l3468 158D  
                                    l3820 09AD                                      l4604 0547  
                                    l4540 045D                                      l5076 0015  
                                    l3572 14A8                                      l3580 14DF  
                                    l4268 0D5C                                      l3718 1365  
                                    l3814 09A0                                      l3742 0908  
                                    l4606 054C                                      l4526 0435  
                                    l5094 0065                                      l5086 0043  
                                    l5078 0021                                      l3902 12E3  
                                    l4358 0E77                                      l3832 09C7  
                                    l3808 0993                                      l3760 092C  
                                    l4640 0686                                      l4560 04BC  
                                    l3904 12EC                                      l3568 14CE  
                                    l4376 0ECF                                      l4296 0DAA  
                                    l5192 0B78                                      l3850 09EE  
                                    l3826 09BA                                      l3754 0920  
                                    l4538 0458                                      l5098 0076  
                                    l3914 12FB                                      l3922 1303  
                                    l3674 124A                                      l3498 11D8  
                                    l4810 0134                                      l3844 09E1  
                                    l3772 0945                                      l3748 0914  
                                    l4636 0671                                      l4572 04E0  
                                    l4564 04C5                                      l3692 1427  
                                    l3862 0A08                                      l3838 09D4  
                                    l3790 096C                                      l3766 0938  
                                    l4718 0744                                      l4574 04E5  
                                    l4822 0158                                      l4814 013D  
                                    l3880 0A2F                                      l3856 09FB  
                                    l3784 095F                                      l4592 0531  
                                    l3952 0834                                      l3944 0810  
                                    l4920 02E3                                      l4824 015D  
                                    l3874 0A22                                      l3778 0952  
                                    l3946 081E                                      l3970 1454  
                                    l4842 01A9                                      l3868 0A15  
                                    l3796 0979                                      l4748 078A  
                                    l4596 053A                                      l3956 083F  
                                    l3886 0A3C                                      l3974 1462  
                                    l4862 01D6                                      l4854 01BF  
                                    l4846 01B2                                      l3888 0A3E  
                                    l4688 0701                                      l3968 1446  
                                    l4856 01C4                            ?_display_clock 0070  
                                    l3978 146D                                      l4866 01E5  
                                    u2305 1231                                      u3105 082B  
                                    u3035 1306                                      u3115 0835  
                                    u2245 1574                                      u3205 1747  
                                    u3215 1754                                      u2265 1585  
                                    u2345 1387                                      u3145 1449  
                                    u2425 1259                                      u2275 158E  
                                    u2355 13AF                                      u3075 0813  
                                    u3165 145A                                      u2445 1437  
                                    u2455 1245                                      u3095 081F  
                                    u3175 1463                                      u4225 1608  
                                    u3265 13DB                                      u4235 1615  
                                    u3195 173C                                      u4245 1620  
                                    u4165 1519                                      u4405 0C0E  
                                    u4175 1526                                      u4185 15AC  
                                    u4195 15B7               time_date_hex_terminator@val 0073  
                    ?_set_beep_threshhold 0070                                      _main 0A40  
                                    _init 11CB                                      _var1 004F  
                                    _var2 004E                                      btemp 007E  
         time_date_hex_terminator@limiter 0070                             write_byte@val 0077  
                                    start 0000                    time_date_delimiter@hex 0070  
                  time_date_delimiter@val 0076                              ?_incrementor 0060  
             __size_of_initialise_buttons 0014                            ??_display_date 0073  
                                   ?_main 0070                            ??_display_temp 0073  
                                   ?_init 0070                           __end_of___lbdiv 12FD  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 15A5  
                         __end_of___lbmod 1320                      __end_of_delay_screen 1234  
                         __end_of___lwdiv 0844                           __end_of___lwmod 1472  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                             __CFG_PWRTE$ON 0000  
                                   _count 00B5                                     _table 00BB  
                                   _stats 002A                                     main@i 006D  
                          write_byte@temp 0076                       _set_lower_threshold 1510  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                   ??_set_beep_threshhold 0072                                     status 0003  
                                   wtemp0 007E                           ___lbdiv@divisor 0070  
                         ___lbdiv@counter 0073                             ??_ds1302_init 0075  
                        ??_cold_threshold 0077                           __initialization 07E0  
                            __end_of_main 0C2E                              __end_of_init 11D3  
                 time_date_delimiter@type 0072                     __end_of_date_settings 07E0  
                    ?_set_lower_threshold 0073                                    ??_main 0068  
                                  ??_init 0070                      incrementor@lower_val 0062  
                         ??_display_clock 0073                                    _ADCON1 009F  
                                  _TRISA0 0428                                    _TRISB4 0434  
                                  _TRISE0 0448                             ?_button_delay 0070  
                            ?_reset_alarm 0070                      incrementor@upper_val 0060  
                        __end_of_lcd_init 1343                          __end_of_get_temp 1800  
                        __end_of_get_time 13E1                                    _baifen 0058  
                               ??___lbdiv 0071                                 ??___awmod 0074  
                                  _delay2 1248                                 ??___lbmod 0071  
                   ??_set_lower_threshold 0077                                    _d_type 00A9  
                               ??___lwdiv 007A                                 ??___lwmod 0074  
                     __end_of_ds1302_init 11FF                       _set_upper_threshold 15A5  
                                  _table1 00A0                           ___awmod@divisor 0070  
                                  _shifen 0059                                    _wanfen 0056  
                         ___awmod@counter 0075                      __size_of_display_day 0079  
                            ?_time_read_1 0070                       time_write_1@time_tx 0074  
                           display_date@i 0075                          __end_of_set_time 13B5  
                      reset_temp@presence 0075                          ___lbdiv@dividend 0072  
                    ?_set_upper_threshold 0073                           ___lbmod@divisor 0070  
                 __end_of__initialization 07FC                           ___lbmod@counter 0075  
                          ??_button_delay 0070              __size_of_time_date_delimiter 0157  
                    __end_of_display_date 16F9                      __end_of_display_temp 12DC  
                          __pcstackCOMMON 0070                              __pidataBANK1 0005  
                   __size_of_delay_screen 0014                   cold_threshold@lower_val 0075  
                    __size_of_incrementor 0024                          ___lbdiv@quotient 0074  
                   ??_set_upper_threshold 0077                   cold_threshold@upper_val 0073  
                              __pbssBANK0 0020                                __pbssBANK1 00A0  
                            _delay_screen 1220                        __size_of_init_temp 0005  
                      __size_of_read_byte 0034                               _ds1302_init 11F0  
                              _delay_temp 11D3                                __pmaintext 0A40  
                                 ?_delay2 0070                             ?_modulus_func 0077  
                      time_read_1@time_rx 0074                              incrementor@z 0064  
                         _cold_high_night 00AF                                 ?_lcd_init 0070  
                               ?_get_temp 0070                     __end_of_time_settings 0385  
                               ?_get_time 0070                        __size_of_write_cmd 0017  
                            _heat_counter 00B9                                 ?_set_time 0070  
                    __size_of_reset_alarm 002F                            ??_modulus_func 007B  
            set_upper_threshold@lower_val 0075                __end_of_initialise_buttons 1270  
                _time_date_hex_terminator 11E1                                   ___lbdiv 12DC  
                                 ___awmod 155A                                   ___lbmod 12FD  
                         __size_of_delay2 0014                                   ___lwdiv 0808  
                                 ___lwmod 1440                                   _alarm__ 004D  
                                 _day_hex 0047                                   _day_low 002E  
                            _heater_state 0051                                   __ptext1 0086  
                                 __ptext2 0C2E                                   __ptext3 15A5  
                                 __ptext4 1510                                   __ptext5 129E  
                                 __ptext6 13E1                                   __ptext7 1320  
                                 __ptext8 125C                                   __ptext9 11C6  
                    __end_of_button_delay 1248                              _cold_counter 00B7  
                                 delay2@i 0070                         __end_of_init_temp 11CB  
                        ___awmod@dividend 0072                         __end_of_read_byte 14A6  
                                 _qianfen 0057                      __size_of_time_read_1 0030  
                                 _lower_t 0054               __end_of_set_beep_threshhold 12BB  
            set_upper_threshold@upper_val 0073                     __size_of_display_date 009D  
                                 clrloop0 0801                                ??_lcd_init 0073  
                                 _upper_t 0055                                ??_get_temp 0060  
                              ??_get_time 0075                     __size_of_display_temp 0021  
                    end_of_initialization 07FC                            display_day@num 0073  
                          display_clock@i 0075                             ?_time_write_1 0070  
                             ?_delay_temp 0070                                _reset_temp 14A6  
                              ??_set_time 0075                       _time_date_delimiter 08E9  
                            _display_date 165C                              _display_temp 12BB  
                       __end_of_write_cmd 129E                          ___lbmod@dividend 0074  
                            _cooler_state 0050                             modulus_func@x 0077  
                           modulus_func@y 0079                     __end_of_display_clock 08E9  
                  __size_of_date_settings 045B                               ___lbmod@rem 0076  
                    ?_time_date_delimiter 0070                            ??_time_write_1 0070  
             __end_of_set_lower_threshold 155A                             ??_display_day 0075  
                          __end_of_delay2 125C                                _write_char 1270  
                              _write_byte 14DA                   __size_of_cold_threshold 005E  
                          _var_night_high 003A                       start_initialization 07E0  
                           delay_screen@i 0070                       __size_of_delay_temp 000E  
                    __end_of_modulus_func 120F                     ??_time_date_delimiter 0074  
                            ?_ds1302_init 0070                               ?_reset_temp 0070  
                           ??_incrementor 007B                                init_fetch0 120F  
                                ??_delay2 0070                     __size_of_button_delay 0014  
                           _date_settings 0385                               __pdataBANK1 00BB  
                              read_byte@i 0076                                read_byte@j 0040  
             __end_of_set_upper_threshold 15FE                       __end_of_display_day 0086  
                               ___latbits 0002                             __pcstackBANK0 0060  
                    set_beep_threshhold@x 0072                         __size_of_lcd_init 0023  
                       _night_lower_lower 0024                         __size_of_get_temp 0107  
                       __size_of_get_time 002C                         _night_lower_upper 0026  
              ??_time_date_hex_terminator 0071                              _button_delay 1234  
                        ___lwdiv@dividend 0078                               _day_counter 00A7  
                                ?___lbdiv 0070                            ?_date_settings 0070  
                                ?___awmod 0070                                  ?___lbmod 0070  
                                ?___lwdiv 0076                                  ?___lwmod 0070  
                       __size_of_set_time 0028                                 _cold_high 00B3  
                             ?_write_char 0070                               ?_write_byte 0070  
                     __end_of_incrementor 1367                      __end_of_time_write_1 138D  
                      _initialise_buttons 125C                           _day_of_week_var 00AB  
                     __size_of_reset_temp 0034                          ___lwdiv@quotient 007B  
                               _init_temp 11C6                                 _read_byte 1472  
                     ?_initialise_buttons 0070                                 clear_ram0 0800  
                           ??_reset_alarm 0073                            _prev_hex_hours 0042  
                            ??_delay_temp 0071                            _cold_low_night 00AD  
                               _temp_high 004B                               _display_day 000D  
 __end_of_thermometer_threshhold_settings 1000  __size_of_thermometer_threshhold_settings 03D2  
       ??_thermometer_threshhold_settings 0065          ?_thermometer_threshhold_settings 0070  
         _thermometer_threshhold_settings 0C2E                      ??_initialise_buttons 0070  
                  __size_of_time_settings 02FF                            _cold_threshold 15FE  
                           ??_time_read_1 0070                               write_char@x 0072  
                   __size_of_modulus_func 0010                                 get_time@i 0076  
                             write_byte@i 0078                        __end_of_delay_temp 11E1  
                               _write_cmd 1287                                ?_init_temp 0070  
                              ?_read_byte 0070                             _var_night_low 003C  
                         _buzzer_watcher1 0052                       __size_of_write_char 0017  
            __size_of_set_beep_threshhold 001D                       __size_of_write_byte 0036  
                         ??_date_settings 0065                           _day_lower_lower 0020  
                    __size_of_ds1302_init 000F                           _day_lower_upper 0022  
                             _incrementor 1343                    __end_of_cold_threshold 165C  
                            _modulus_func 11FF                       __end_of_reset_alarm 1410  
                        __size_of___lbdiv 0021                          __size_of___awmod 004B  
                        __size_of___lbmod 0023                          __size_of___lwdiv 003C  
                        __size_of___lwmod 0032                                  _day_high 002C  
                         ___lwdiv@divisor 0076                           ___lwdiv@counter 007D  
                                __ptext10 11CB                                  __ptext11 13B5  
                                __ptext20 0808                                  __ptext12 1410  
                                __ptext21 12FD                                  __ptext13 16F9  
                                __ptext30 11E1                                  __ptext22 12DC  
                                __ptext14 14DA                                  __ptext31 08E9  
                                __ptext23 11F0                                  __ptext15 14A6  
                                __ptext40 1220                                  __ptext32 138D  
                                __ptext24 12BB                                  __ptext16 1472  
                                __ptext33 1367                                  __ptext25 000D  
                                __ptext17 11D3                                  __ptext34 1343  
                                __ptext26 165C                                  __ptext18 1248  
                                __ptext35 11FF                                  __ptext27 0844  
                                __ptext19 1440                                  __ptext36 155A  
                                __ptext28 0385                                  __ptext37 1234  
                                __ptext29 1287                                  __ptext38 15FE  
                                __ptext39 1270                       __end_of_time_read_1 1440  
                                _cold_low 00B1                                ?_write_cmd 0070  
                                _lcd_init 1320                                  _get_temp 16F9  
                                _get_time 13B5                             _time_settings 0086  
        __end_of_time_date_hex_terminator 11F0                             __size_of_main 01EE  
                           __size_of_init 0008                             ?_delay_screen 0070  
                             _hrs_limiter 0046                                 set_time@i 0075  
                           _prev_hex_mins 0041                             _prev_hex_year 0043  
                            ??_reset_temp 0074                                  _set_time 138D  
                                _temp_low 004C                                  _prev_hex 0045  
              time_date_delimiter@limiter 0071                           ?_cold_threshold 0073  
            __size_of_set_lower_threshold 004A                                write_cmd@x 0072  
                   __size_of_time_write_1 0026                    __size_of_display_clock 00A5  
                          _buzzer_watcher 0053                               delay_temp@x 0072  
                             delay_temp@y 0070                               delay_temp@z 0073  
                          read_byte@value 0075               __end_of_time_date_delimiter 0A40  
                                init_ram0 1213                             button_delay@i 0070  
                             ??_init_temp 0070                        __end_of_reset_temp 14DA  
                             ??_read_byte 0074                            ?_time_settings 0070  
                        ___lwmod@dividend 0072                            ??_delay_screen 0070  
                             _reset_alarm 13E1                              _time_write_1 1367  
                            _prev_hex_day 0044                              ??_write_char 0072  
                            ??_write_byte 0074                                _OPTION_REG 0081  
                             _time_read_1 1410                              time_read_1@j 0072  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0075  
                             ??_write_cmd 0072              __size_of_set_upper_threshold 0059  
                           _display_clock 0844                             time_write_1@j 0072  
                      __end_of_write_char 1287                        __end_of_write_byte 1510  
